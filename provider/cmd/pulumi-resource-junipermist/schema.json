{
    "name": "junipermist",
    "displayName": "Juniper Mist",
    "description": "A Pulumi package for creating and managing Juniper Mist resources.",
    "keywords": [
        "pulumi",
        "juniper",
        "mist",
        "category/cloud"
    ],
    "homepage": "https://pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`mist` Terraform Provider](https://github.com/Juniper/terraform-provider-mist).",
    "repository": "https://github.com/pulumi/pulumi-junipermist",
    "logoUrl": "https://raw.githubusercontent.com/pulumi/pulumi-junipermist/main/res/juniper.png",
    "pluginDownloadURL": "github://api.github.com/pulumi/pulumi-junipermist",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "junipermist": "JuniperMist"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumi",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-junipermist/sdk/go/junipermist",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumi/juniper-mist",
            "packageDescription": "A Pulumi package for creating and managing Juniper Mist resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Juniper/terraform-provider-mist)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-junipermist` repo](https://github.com/pulumi/pulumi-junipermist/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mist` repo](https://github.com/Juniper/terraform-provider-mist/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_juniper_mist",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Juniper/terraform-provider-mist)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-junipermist` repo](https://github.com/pulumi/pulumi-junipermist/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mist` repo](https://github.com/Juniper/terraform-provider-mist/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiDebug": {
                "type": "boolean",
                "description": "Flag to enable debugging API calls. Default is false.\n"
            },
            "apiTimeout": {
                "type": "number",
                "description": "Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0\nresults in infinite timeout.\n"
            },
            "apitoken": {
                "type": "string",
                "description": "For API Token authentication, the Mist API Token.\n",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "URL of the Mist Cloud, e.g. `api.mist.com`.\n"
            },
            "password": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account password.\n",
                "secret": true
            },
            "proxy": {
                "type": "string",
                "description": "Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a\n`[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`\nare supported.\n"
            },
            "username": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account username.\n"
            }
        }
    },
    "types": {
        "junipermist:device/ApAeroscout:ApAeroscout": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable aeroscout config\n"
                },
                "host": {
                    "type": "string",
                    "description": "required if enabled, aeroscout server host\n"
                },
                "locateConnected": {
                    "type": "boolean",
                    "description": "whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "locateConnected"
                    ]
                }
            }
        },
        "junipermist:device/ApBleConfig:ApBleConfig": {
            "properties": {
                "beaconEnabled": {
                    "type": "boolean",
                    "description": "whether Mist beacons is enabled\n"
                },
                "beaconRate": {
                    "type": "integer",
                    "description": "required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second\n"
                },
                "beaconRateMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                },
                "beamDisableds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)\n"
                },
                "customBlePacketEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send custom packet\n"
                },
                "customBlePacketFrame": {
                    "type": "string",
                    "description": "The custom frame to be sent out in this beacon. The frame must be a hexstring\n"
                },
                "customBlePacketFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emitted by custom ble beacon\n"
                },
                "eddystoneUidAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUidBeams": {
                    "type": "string"
                },
                "eddystoneUidEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled\n"
                },
                "eddystoneUidFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit by Eddystone-UID beacon\n"
                },
                "eddystoneUidInstance": {
                    "type": "string",
                    "description": "Eddystone-UID instance for the device\n"
                },
                "eddystoneUidNamespace": {
                    "type": "string",
                    "description": "Eddystone-UID namespace\n"
                },
                "eddystoneUrlAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUrlBeams": {
                    "type": "string"
                },
                "eddystoneUrlEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled\n"
                },
                "eddystoneUrlFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emit by Eddystone-UID beacon\n"
                },
                "eddystoneUrlUrl": {
                    "type": "string",
                    "description": "URL pointed by Eddystone-URL beacon\n"
                },
                "ibeaconAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "ibeaconBeams": {
                    "type": "string"
                },
                "ibeaconEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send iBeacon\n"
                },
                "ibeaconFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit for iBeacon\n"
                },
                "ibeaconMajor": {
                    "type": "integer",
                    "description": "Major number for iBeacon\n"
                },
                "ibeaconMinor": {
                    "type": "integer",
                    "description": "Minor number for iBeacon\n"
                },
                "ibeaconUuid": {
                    "type": "string",
                    "description": "optional, if not specified, the same UUID as the beacon will be used\n"
                },
                "power": {
                    "type": "integer",
                    "description": "required if `power_mode`==`custom`\n"
                },
                "powerMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "beaconEnabled",
                        "beaconRate",
                        "beaconRateMode",
                        "customBlePacketEnabled",
                        "customBlePacketFrame",
                        "customBlePacketFreqMsec",
                        "eddystoneUidAdvPower",
                        "eddystoneUidBeams",
                        "eddystoneUidEnabled",
                        "eddystoneUidFreqMsec",
                        "eddystoneUidInstance",
                        "eddystoneUidNamespace",
                        "eddystoneUrlAdvPower",
                        "eddystoneUrlBeams",
                        "eddystoneUrlEnabled",
                        "eddystoneUrlFreqMsec",
                        "eddystoneUrlUrl",
                        "ibeaconAdvPower",
                        "ibeaconBeams",
                        "ibeaconEnabled",
                        "ibeaconFreqMsec",
                        "ibeaconMajor",
                        "ibeaconMinor",
                        "ibeaconUuid",
                        "power",
                        "powerMode"
                    ]
                }
            }
        },
        "junipermist:device/ApCentrak:ApCentrak": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/ApClientBridge:ApClientBridge": {
            "properties": {
                "auth": {
                    "$ref": "#/types/junipermist:device/ApClientBridgeAuth:ApClientBridgeAuth"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "when acted as client bridge:\n  * only 5G radio can be used\n  * will not serve as AP on any radios\n"
                },
                "ssid": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/ApClientBridgeAuth:ApClientBridgeAuth": {
            "properties": {
                "psk": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "wpa2-AES/CCMPp is assumed when `type`==`psk`. enum: `open`, `psk`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/ApEslConfig:ApEslConfig": {
            "properties": {
                "cacert": {
                    "type": "string",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "usb_config is ignored if esl_config enabled\n"
                },
                "host": {
                    "type": "string",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "type": {
                    "type": "string",
                    "description": "note: ble_config will be ingored if esl_config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`\n"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "Only if `type`==`solum` or `type`==`hanshow`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:device/ApIpConfig:ApIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`static`\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`static`\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "ip6": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                },
                "netmask": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "netmask6": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `autoconf`, `dhcp`, `disabled`, `static`\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "management vlan id, default is 1 (untagged)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dns",
                        "dnsSuffixes",
                        "type",
                        "type6",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:device/ApLed:ApLed": {
            "properties": {
                "brightness": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "brightness",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/ApMesh:ApMesh": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether mesh is enabled on this AP\n"
                },
                "group": {
                    "type": "integer",
                    "description": "mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional\n"
                },
                "role": {
                    "type": "string",
                    "description": "enum: `base`, `remote`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/ApPwrConfig:ApPwrConfig": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "additional power to request during negotiating with PSE over PoE, in mW\n"
                },
                "preferUsbOverWifi": {
                    "type": "boolean",
                    "description": "whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "base",
                        "preferUsbOverWifi"
                    ]
                }
            }
        },
        "junipermist:device/ApRadioConfig:ApRadioConfig": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain24": {
                    "type": "integer",
                    "description": "antenna gain for 2.4G - for models with external antenna only\n"
                },
                "antGain5": {
                    "type": "integer",
                    "description": "antenna gain for 5G - for models with external antenna only\n"
                },
                "antGain6": {
                    "type": "integer",
                    "description": "antenna gain for 6G - for models with external antenna only\n"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "band24": {
                    "$ref": "#/types/junipermist:device/ApRadioConfigBand24:ApRadioConfigBand24",
                    "description": "Radio Band AP settings\n"
                },
                "band24Usage": {
                    "type": "string",
                    "description": "enum: `24`, `5`, `6`, `auto`\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:device/ApRadioConfigBand5:ApRadioConfigBand5",
                    "description": "Radio Band AP settings\n"
                },
                "band5On24Radio": {
                    "$ref": "#/types/junipermist:device/ApRadioConfigBand5On24Radio:ApRadioConfigBand5On24Radio",
                    "description": "Radio Band AP settings\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:device/ApRadioConfigBand6:ApRadioConfigBand6",
                    "description": "Radio Band AP settings\n"
                },
                "indoorUse": {
                    "type": "boolean",
                    "description": "to make an outdoor operate indoor.\nfor an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap\n"
                },
                "scanningEnabled": {
                    "type": "boolean",
                    "description": "whether scanning radio is enabled\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antennaMode",
                        "indoorUse"
                    ]
                }
            }
        },
        "junipermist:device/ApRadioConfigBand24:ApRadioConfigBand24": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 2.4GHz band. enum: `20`, `40`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:device/ApRadioConfigBand5:ApRadioConfigBand5": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:device/ApRadioConfigBand5On24Radio:ApRadioConfigBand5On24Radio": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:device/ApRadioConfigBand6:ApRadioConfigBand6": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                },
                "standardPower": {
                    "type": "boolean",
                    "description": "for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble",
                        "standardPower"
                    ]
                }
            }
        },
        "junipermist:device/ApUplinkPortConfig:ApUplinkPortConfig": {
            "properties": {
                "dot1x": {
                    "type": "boolean",
                    "description": "Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch\n"
                },
                "keepWlansUpIfDown": {
                    "type": "boolean",
                    "description": "by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dot1x",
                        "keepWlansUpIfDown"
                    ]
                }
            }
        },
        "junipermist:device/ApUsbConfig:ApUsbConfig": {
            "properties": {
                "cacert": {
                    "type": "string",
                    "description": "only if `type`==`imagotag`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable any usb config\n"
                },
                "host": {
                    "type": "string",
                    "description": "only if `type`==`imagotag`\n"
                },
                "port": {
                    "type": "integer",
                    "description": "only if `type`==`imagotag`\n"
                },
                "type": {
                    "type": "string",
                    "description": "usb config type. enum: `hanshow`, `imagotag`, `solum`\n"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "only if `type`==`imagotag`, whether to turn on SSL verification\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "only if `type`==`solum` or `type`==`hanshow`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:device/GatewayBgpConfig:GatewayBgpConfig": {
            "properties": {
                "authKey": {
                    "type": "string"
                },
                "bfdMinimumInterval": {
                    "type": "integer",
                    "description": "when bfd_multiplier is configured alone. Default:\n  * 1000 if `type`==`external`\n  * 350 `type`==`internal`\n"
                },
                "bfdMultiplier": {
                    "type": "integer",
                    "description": "when bfd_minimum_interval_is_configured alone\n"
                },
                "disableBfd": {
                    "type": "boolean",
                    "description": "BFD provides faster path failure detection and is enabled by default\n"
                },
                "export": {
                    "type": "string"
                },
                "exportPolicy": {
                    "type": "string",
                    "description": "default export policies if no per-neighbor policies defined\n"
                },
                "extendedV4Nexthop": {
                    "type": "boolean",
                    "description": "by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this\n"
                },
                "gracefulRestartTime": {
                    "type": "integer",
                    "description": "`0` means disable\n"
                },
                "holdTime": {
                    "type": "integer"
                },
                "import": {
                    "type": "string"
                },
                "importPolicy": {
                    "type": "string",
                    "description": "default import policies if no per-neighbor policies defined\n"
                },
                "localAs": {
                    "type": "integer"
                },
                "neighborAs": {
                    "type": "integer"
                },
                "neighbors": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayBgpConfigNeighbors:GatewayBgpConfigNeighbors"
                    },
                    "description": "if per-neighbor as is desired. Property key is the neighbor address\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned BGP routers toward overlay\n"
                },
                "tunnelName": {
                    "type": "string",
                    "description": "if `type`==`tunnel`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `external`, `internal`\n"
                },
                "via": {
                    "type": "string",
                    "description": "network name. enum: `lan`, `tunnel`, `vpn`, `wan`\n"
                },
                "vpnName": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "if `via`==`wan`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdMinimumInterval",
                        "bfdMultiplier",
                        "disableBfd",
                        "gracefulRestartTime",
                        "holdTime",
                        "networks",
                        "noReadvertiseToOverlay",
                        "via"
                    ]
                }
            }
        },
        "junipermist:device/GatewayBgpConfigNeighbors:GatewayBgpConfigNeighbors": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "If true, the BGP session to this neighbor will be administratively disabled/shutdown\n"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "holdTime": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "multihopTtl": {
                    "type": "integer",
                    "description": "assuming BGP neighbor is directly connected\n"
                },
                "neighborAs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "holdTime"
                    ]
                }
            }
        },
        "junipermist:device/GatewayClusterNode:GatewayClusterNode": {
            "properties": {
                "mac": {
                    "type": "string",
                    "description": "Gateway MAC Address. Format is `[0-9a-f]{12}` (e.g \"5684dae9ac8b\")\n"
                }
            },
            "type": "object",
            "required": [
                "mac"
            ]
        },
        "junipermist:device/GatewayDhcpdConfig:GatewayDhcpdConfig": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayDhcpdConfigConfig:GatewayDhcpdConfigConfig"
                    },
                    "description": "Property key is the network name\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if set to `false`, disable the DHCP server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayDhcpdConfigConfig:GatewayDhcpdConfigConfig": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "fixedBindings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayDhcpdConfigConfigFixedBindings:GatewayDhcpdConfigConfigFixedBindings"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g \"5684dae9ac8b\")\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`local` - optional, `ip` will be used if not provided\n"
                },
                "ipEnd": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipEnd6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "ipStart": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipStart6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayDhcpdConfigConfigOptions:GatewayDhcpdConfigConfigOptions"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the DHCP option number\n"
                },
                "serverIdOverride": {
                    "type": "boolean",
                    "description": "`server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, \nshould overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`relay`\n"
                },
                "servers6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type6`==`relay`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "vendorEncapsulated": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayDhcpdConfigConfigVendorEncapsulated:GatewayDhcpdConfigConfigVendorEncapsulated"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is \u003centerprise number\u003e:\u003csub option code\u003e, with\n  * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)\n  * sub option code: 1-255, sub-option code'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsServers",
                        "dnsSuffixes",
                        "leaseTime",
                        "serverIdOverride",
                        "servers",
                        "servers6s",
                        "type",
                        "type6"
                    ]
                }
            }
        },
        "junipermist:device/GatewayDhcpdConfigConfigFixedBindings:GatewayDhcpdConfigConfigFixedBindings": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "junipermist:device/GatewayDhcpdConfigConfigOptions:GatewayDhcpdConfigConfigOptions": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayDhcpdConfigConfigVendorEncapsulated:GatewayDhcpdConfigConfigVendorEncapsulated": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayExtraRoutes6:GatewayExtraRoutes6": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:device/GatewayExtraRoutes:GatewayExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:device/GatewayIdpProfiles:GatewayIdpProfiles": {
            "properties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique ID of the object instance in the Mist Organnization\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayIdpProfilesOverwrite:GatewayIdpProfilesOverwrite"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayIdpProfilesOverwrite:GatewayIdpProfilesOverwrite": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum:\n  * alert (default)\n  * drop: siliently dropping packets\n  * close: notify client/server to close connection\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:device/GatewayIdpProfilesOverwriteMatching:GatewayIdpProfilesOverwriteMatching"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action"
                    ]
                }
            }
        },
        "junipermist:device/GatewayIdpProfilesOverwriteMatching:GatewayIdpProfilesOverwriteMatching": {
            "properties": {
                "attackNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dstSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayIpConfigs:GatewayIpConfigs": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "secondaryIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional list of secondary IPs in CIDR format\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "netmask"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "netmask",
                        "secondaryIps",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/GatewayNetwork:GatewayNetwork": {
            "properties": {
                "disallowMistServices": {
                    "type": "boolean",
                    "description": "whether to disallow Mist Devices in the network\n"
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "internalAccess": {
                    "$ref": "#/types/junipermist:device/GatewayNetworkInternalAccess:GatewayNetworkInternalAccess"
                },
                "internetAccess": {
                    "$ref": "#/types/junipermist:device/GatewayNetworkInternetAccess:GatewayNetworkInternetAccess",
                    "description": "whether this network has direct internet access\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to allow clients in the network to talk to each other\n"
                },
                "multicast": {
                    "$ref": "#/types/junipermist:device/GatewayNetworkMulticast:GatewayNetworkMulticast",
                    "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                },
                "name": {
                    "type": "string"
                },
                "routedForNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                },
                "subnet": {
                    "type": "string"
                },
                "subnet6": {
                    "type": "string"
                },
                "tenants": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkTenants:GatewayNetworkTenants"
                    },
                    "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkVpnAccess:GatewayNetworkVpnAccess"
                    },
                    "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disallowMistServices",
                        "name",
                        "subnet"
                    ]
                }
            }
        },
        "junipermist:device/GatewayNetworkInternalAccess:GatewayNetworkInternalAccess": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkInternetAccess:GatewayNetworkInternetAccess": {
            "properties": {
                "createSimpleServicePolicy": {
                    "type": "boolean"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkInternetAccessDestinationNat:GatewayNetworkInternetAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkInternetAccessStaticNat:GatewayNetworkInternetAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createSimpleServicePolicy",
                        "restricted"
                    ]
                }
            }
        },
        "junipermist:device/GatewayNetworkInternetAccessDestinationNat:GatewayNetworkInternetAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be a Port (i.e. \"443\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkInternetAccessStaticNat:GatewayNetworkInternetAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:device/GatewayNetworkMulticast:GatewayNetworkMulticast": {
            "properties": {
                "disableIgmp": {
                    "type": "boolean",
                    "description": "if the network will only be the soruce of the multicast traffic, IGMP can be disabled\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkMulticastGroups:GatewayNetworkMulticastGroups"
                    },
                    "description": "Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example \"225.1.0.3/32\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableIgmp",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayNetworkMulticastGroups:GatewayNetworkMulticastGroups": {
            "properties": {
                "rpIp": {
                    "type": "string",
                    "description": "RP (rendezvous point) IP Address\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkTenants:GatewayNetworkTenants": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkVpnAccess:GatewayNetworkVpnAccess": {
            "properties": {
                "advertisedSubnet": {
                    "type": "string",
                    "description": "if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side\n"
                },
                "allowPing": {
                    "type": "boolean",
                    "description": "whether to allow ping from vpn into this routed network\n"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkVpnAccessDestinationNat:GatewayNetworkVpnAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub\n"
                },
                "noReadvertiseToLanBgp": {
                    "type": "boolean",
                    "description": "toward LAN-side BGP peers\n"
                },
                "noReadvertiseToLanOspf": {
                    "type": "boolean",
                    "description": "toward LAN-side OSPF peers\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "otherVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "by default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "whether this network is routable\n"
                },
                "sourceNat": {
                    "$ref": "#/types/junipermist:device/GatewayNetworkVpnAccessSourceNat:GatewayNetworkVpnAccessSourceNat",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayNetworkVpnAccessStaticNat:GatewayNetworkVpnAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "summarizedSubnet": {
                    "type": "string",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "summarizedSubnetToLanBgp": {
                    "type": "string",
                    "description": "toward LAN-side BGP peers\n"
                },
                "summarizedSubnetToLanOspf": {
                    "type": "string",
                    "description": "toward LAN-side OSPF peers\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noReadvertiseToLanBgp",
                        "noReadvertiseToLanOspf",
                        "otherVrfs",
                        "sourceNat",
                        "staticNat"
                    ]
                }
            }
        },
        "junipermist:device/GatewayNetworkVpnAccessDestinationNat:GatewayNetworkVpnAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkVpnAccessSourceNat:GatewayNetworkVpnAccessSourceNat": {
            "properties": {
                "externalIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayNetworkVpnAccessStaticNat:GatewayNetworkVpnAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:device/GatewayOobIpConfig:GatewayOobIpConfig": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "node1": {
                    "$ref": "#/types/junipermist:device/GatewayOobIpConfigNode1:GatewayOobIpConfigNode1",
                    "description": "for HA Cluster, node1 can have different IP Config\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "node1",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/GatewayOobIpConfigNode1:GatewayOobIpConfigNode1": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPathPreferences:GatewayPathPreferences": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayPathPreferencesPath:GatewayPathPreferencesPath"
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "enum: `ecmp`, `ordered`, `weighted`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "strategy"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPathPreferencesPath:GatewayPathPreferencesPath": {
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "For SSR Only. `true`, if this specific path is undesired\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "only if `type`==`local`, if a different gateway is desired\n"
                },
                "internetAccess": {
                    "type": "boolean",
                    "description": "only if `type`==`vpn`, if this vpn path can be used for internet\n"
                },
                "name": {
                    "type": "string",
                    "description": "required when \n  * `type`==`vpn`: the name of the VPN Path to use \n  * `type`==`wan`: the name of the WAN interface to use'\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`local`\n"
                },
                "targetIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local`, if destination IP is to be replaced\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local`, `tunnel`, `vpn`, `wan`\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "optional if `type`==`vpn`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networks",
                        "targetIps"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfig:GatewayPortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "if `aggregated`==`true`. To disable LCP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "string",
                    "description": "if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)\n"
                },
                "aeLacpForceUp": {
                    "type": "boolean",
                    "description": "For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm, set it to true\n"
                },
                "description": {
                    "type": "string",
                    "description": "Interface Description. Can be a variable (i.e. \"{{myvar}}\")\n"
                },
                "disableAutoneg": {
                    "type": "boolean"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "port admin up (true) / down (false)\n"
                },
                "dslType": {
                    "type": "string",
                    "description": "if `wan_type`==`dsl`. enum: `adsl`, `vdsl`\n"
                },
                "dslVci": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 16 bit int\n"
                },
                "dslVpi": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 8 bit int\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/GatewayPortConfigIpConfig:GatewayPortConfigIpConfig",
                    "description": "Junos IP Config\n"
                },
                "lteApn": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "lteAuth": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`. enum: `chap`, `none`, `pap`\n"
                },
                "lteBackup": {
                    "type": "boolean"
                },
                "ltePassword": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n",
                    "secret": true
                },
                "lteUsername": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "name that we'll use to derive config\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`lan`, name of the `junipermist.org.Network` resource\n"
                },
                "outerVlanId": {
                    "type": "integer",
                    "description": "for Q-in-Q\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only for SRX and if `usage`==`lan`, the Untagged VLAN Network\n"
                },
                "preserveDscp": {
                    "type": "boolean",
                    "description": "whether to preserve dscp when sending traffic over VPN (SSR-only)\n"
                },
                "redundant": {
                    "type": "boolean",
                    "description": "if HA mode\n"
                },
                "rethIdx": {
                    "type": "integer",
                    "description": "if HA mode\n"
                },
                "rethNode": {
                    "type": "string",
                    "description": "if HA mode\n"
                },
                "rethNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSR only - supporting vlan-based redundancy (matching the size of `networks`)\n"
                },
                "speed": {
                    "type": "string"
                },
                "ssrNoVirtualMac": {
                    "type": "boolean",
                    "description": "when SSR is running as VM, this is required on certain hosting platforms\n"
                },
                "svrPortRange": {
                    "type": "string",
                    "description": "for SSR only\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:device/GatewayPortConfigTrafficShaping:GatewayPortConfigTrafficShaping"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnPaths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPortConfigVpnPaths:GatewayPortConfigVpnPaths"
                    },
                    "description": "Property key is the VPN name\n"
                },
                "wanArpPolicer": {
                    "type": "string",
                    "description": "Only when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`\n"
                },
                "wanExtIp": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP\n"
                },
                "wanExtraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPortConfigWanExtraRoutes:GatewayPortConfigWanExtraRoutes"
                    },
                    "description": "Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g \"100.100.100.0/24\")\n"
                },
                "wanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined\n"
                },
                "wanProbeOverride": {
                    "$ref": "#/types/junipermist:device/GatewayPortConfigWanProbeOverride:GatewayPortConfigWanProbeOverride",
                    "description": "Only if `usage`==`wan`\n"
                },
                "wanSourceNat": {
                    "$ref": "#/types/junipermist:device/GatewayPortConfigWanSourceNat:GatewayPortConfigWanSourceNat",
                    "description": "Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip\n"
                },
                "wanType": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aeDisableLacp",
                        "aeLacpForceUp",
                        "aggregated",
                        "critical",
                        "disableAutoneg",
                        "disabled",
                        "dslType",
                        "dslVci",
                        "dslVpi",
                        "duplex",
                        "lteAuth",
                        "networks",
                        "poeDisabled",
                        "preserveDscp",
                        "redundant",
                        "rethNodes",
                        "speed",
                        "ssrNoVirtualMac",
                        "svrPortRange",
                        "usage",
                        "wanArpPolicer",
                        "wanNetworks",
                        "wanType"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigIpConfig:GatewayPortConfigIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. \"192.168.1.1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Interface IP Address (i.e. \"192.168.1.8\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. \"/24\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "network": {
                    "type": "string",
                    "description": "optional, the network to be used for mgmt\n"
                },
                "poserPassword": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n",
                    "secret": true
                },
                "pppoeAuth": {
                    "type": "string",
                    "description": "if `type`==`pppoe`. enum: `chap`, `none`, `pap`\n"
                },
                "pppoeUsername": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `pppoe`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pppoeAuth",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigTrafficShaping:GatewayPortConfigTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigVpnPaths:GatewayPortConfigVpnPaths": {
            "properties": {
                "bfdProfile": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `broadband`, `lte`\n"
                },
                "bfdUseTunnelMode": {
                    "type": "boolean",
                    "description": "Only if the VPN `type`==`hub_spoke`. Whether to use tunnel mode. SSR only\n"
                },
                "linkName": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`mesh`\n"
                },
                "preference": {
                    "type": "integer",
                    "description": "Only if the VPN `type`==`hub_spoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)\n"
                },
                "role": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `hub`, `spoke`\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:device/GatewayPortConfigVpnPathsTrafficShaping:GatewayPortConfigVpnPathsTrafficShaping"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdProfile",
                        "bfdUseTunnelMode",
                        "role"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigVpnPathsTrafficShaping:GatewayPortConfigVpnPathsTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigWanExtraRoutes:GatewayPortConfigWanExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayPortConfigWanProbeOverride:GatewayPortConfigWanProbeOverride": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "probeProfile": {
                    "type": "string",
                    "description": "enum: `broadband`, `lte`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "probeProfile"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortConfigWanSourceNat:GatewayPortConfigWanSourceNat": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "or to disable the source-nat\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if alternative nat_pool is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayPortMirroring:GatewayPortMirroring": {
            "properties": {
                "portMirror": {
                    "$ref": "#/types/junipermist:device/GatewayPortMirroringPortMirror:GatewayPortMirroringPortMirror"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayPortMirroringPortMirror:GatewayPortMirroringPortMirror": {
            "properties": {
                "familyType": {
                    "type": "string"
                },
                "ingressPortIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outputPortId": {
                    "type": "string"
                },
                "rate": {
                    "type": "integer"
                },
                "runLength": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayRoutingPolicies:GatewayRoutingPolicies": {
            "properties": {
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayRoutingPoliciesTerm:GatewayRoutingPoliciesTerm"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayRoutingPoliciesTerm:GatewayRoutingPoliciesTerm": {
            "properties": {
                "action": {
                    "$ref": "#/types/junipermist:device/GatewayRoutingPoliciesTermAction:GatewayRoutingPoliciesTermAction",
                    "description": "when used as import policy\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:device/GatewayRoutingPoliciesTermMatching:GatewayRoutingPoliciesTermMatching",
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayRoutingPoliciesTermAction:GatewayRoutingPoliciesTermAction": {
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "addCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "addTargetVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for SSR, hub decides how VRF routes are leaked on spoke\n"
                },
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "route aggregation\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "excludeAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. To exclude certain AS\n"
                },
                "excludeCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exportCommunitites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "localPreference": {
                    "type": "string",
                    "description": "optional, for an import policy, local_preference can be changed\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. By default, the local AS will be prepended, to change it\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayRoutingPoliciesTermMatching:GatewayRoutingPoliciesTermMatching": {
            "properties": {
                "asPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "takes regular expression\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "`direct`, `bgp`, `osp`, ...\n"
                },
                "routeExists": {
                    "$ref": "#/types/junipermist:device/GatewayRoutingPoliciesTermMatchingRouteExists:GatewayRoutingPoliciesTermMatchingRouteExists"
                },
                "vpnNeighborMacs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn)\n"
                },
                "vpnPathSla": {
                    "$ref": "#/types/junipermist:device/GatewayRoutingPoliciesTermMatchingVpnPathSla:GatewayRoutingPoliciesTermMatchingVpnPathSla"
                },
                "vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn). ordered-\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayRoutingPoliciesTermMatchingRouteExists:GatewayRoutingPoliciesTermMatchingRouteExists": {
            "properties": {
                "route": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string",
                    "description": "name of the vrf instance, it can also be the name of the VPN or wan if they\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vrfName"
                    ]
                }
            }
        },
        "junipermist:device/GatewayRoutingPoliciesTermMatchingVpnPathSla:GatewayRoutingPoliciesTermMatchingVpnPathSla": {
            "properties": {
                "maxJitter": {
                    "type": "integer"
                },
                "maxLatency": {
                    "type": "integer"
                },
                "maxLoss": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayServicePolicy:GatewayServicePolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:device/GatewayServicePolicyAppqoe:GatewayServicePolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayServicePolicyEwf:GatewayServicePolicyEwf"
                    }
                },
                "idp": {
                    "$ref": "#/types/junipermist:device/GatewayServicePolicyIdp:GatewayServicePolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "name": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy name)\n"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them. Optionally, you can customize by using `path_preference`\n"
                },
                "servicepolicyId": {
                    "type": "string",
                    "description": "used to link servicepolicy defined at org level and overwrite some attributes\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Applications / Desctinations\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Networks / Users\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "services",
                        "tenants"
                    ]
                }
            }
        },
        "junipermist:device/GatewayServicePolicyAppqoe:GatewayServicePolicyAppqoe": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/GatewayServicePolicyEwf:GatewayServicePolicyEwf": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "blockMessage": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:device/GatewayServicePolicyIdp:GatewayServicePolicyIdp": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idpprofileId": {
                    "type": "string",
                    "description": "org_level IDP Profile can be used, this takes precedence over `profile`\n"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `Custom`, `strict` (default), `standard` or keys from from idp_profiles\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertOnly",
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:device/GatewayTunnelConfigs:GatewayTunnelConfigs": {
            "properties": {
                "autoProvision": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsAutoProvision:GatewayTunnelConfigsAutoProvision"
                },
                "ikeLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ikeMode": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`\n"
                },
                "ikeProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelConfigsIkeProposal:GatewayTunnelConfigsIkeProposal"
                    },
                    "description": "if `provider`==`custom-ipsec`\n"
                },
                "ipsecLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ipsecProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelConfigsIpsecProposal:GatewayTunnelConfigsIpsecProposal"
                    },
                    "description": "Only if  `provider`==`custom-ipsec`\n"
                },
                "localId": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `provider`==`custom-ipsec`, networks reachable via this tunnel\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsPrimary:GatewayTunnelConfigsPrimary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "probe": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsProbe:GatewayTunnelConfigsProbe",
                    "description": "Only if `provider`==`custom-ipsec`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`\n"
                },
                "psk": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n",
                    "secret": true
                },
                "secondary": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsSecondary:GatewayTunnelConfigsSecondary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "version": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ikeMode",
                        "mode",
                        "networks",
                        "version"
                    ]
                }
            }
        },
        "junipermist:device/GatewayTunnelConfigsAutoProvision:GatewayTunnelConfigsAutoProvision": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsAutoProvisionLatlng:GatewayTunnelConfigsAutoProvisionLatlng",
                    "description": "API override for POP selection\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsAutoProvisionPrimary:GatewayTunnelConfigsAutoProvisionPrimary"
                },
                "provider": {
                    "type": "string",
                    "description": "enum: `jse-ipsec`, `zscaler-ipsec`\n"
                },
                "region": {
                    "type": "string",
                    "description": "API override for POP selection\n"
                },
                "secondary": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelConfigsAutoProvisionSecondary:GatewayTunnelConfigsAutoProvisionSecondary"
                }
            },
            "type": "object",
            "required": [
                "provider"
            ]
        },
        "junipermist:device/GatewayTunnelConfigsAutoProvisionLatlng:GatewayTunnelConfigsAutoProvisionLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ]
        },
        "junipermist:device/GatewayTunnelConfigsAutoProvisionPrimary:GatewayTunnelConfigsAutoProvisionPrimary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayTunnelConfigsAutoProvisionSecondary:GatewayTunnelConfigsAutoProvisionSecondary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayTunnelConfigsIkeProposal:GatewayTunnelConfigsIkeProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:device/GatewayTunnelConfigsIpsecProposal:GatewayTunnelConfigsIpsecProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:device/GatewayTunnelConfigsPrimary:GatewayTunnelConfigsPrimary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:device/GatewayTunnelConfigsProbe:GatewayTunnelConfigsProbe": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "how often to trigger the probe\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "number of consecutive misses before declaring the tunnel down\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "time within which to complete the connectivity check\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `http`, `icmp`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/GatewayTunnelConfigsSecondary:GatewayTunnelConfigsSecondary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:device/GatewayTunnelProviderOptions:GatewayTunnelProviderOptions": {
            "properties": {
                "jse": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptionsJse:GatewayTunnelProviderOptionsJse",
                    "description": "for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added\n"
                },
                "zscaler": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptionsZscaler:GatewayTunnelProviderOptionsZscaler",
                    "description": "for zscaler-ipsec and zscaler-gre\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayTunnelProviderOptionsJse:GatewayTunnelProviderOptionsJse": {
            "properties": {
                "numUsers": {
                    "type": "integer"
                },
                "orgName": {
                    "type": "string",
                    "description": "JSE Organization name\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayTunnelProviderOptionsZscaler:GatewayTunnelProviderOptionsZscaler": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to enforce user authentication\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "subLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptionsZscalerSubLocation:GatewayTunnelProviderOptionsZscalerSubLocation"
                    },
                    "description": "`sub-locations` can be used for specific uses cases to define different configuration based on the user network\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "location uses proxy chaining to forward traffic\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayTunnelProviderOptionsZscalerSubLocation:GatewayTunnelProviderOptionsZscalerSubLocation": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to authenticate users\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayVrfConfig:GatewayVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/GatewayVrfInstances:GatewayVrfInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchAclPolicy:SwitchAclPolicy": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchAclPolicyAction:SwitchAclPolicyAction"
                    },
                    "description": "ACL Policy Actions:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                },
                "name": {
                    "type": "string"
                },
                "srcTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ACL Policy Source Tags:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchAclPolicyAction:SwitchAclPolicyAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "dstTag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dstTag"
            ]
        },
        "junipermist:device/SwitchAclTags:SwitchAclTags": {
            "properties": {
                "gbpTag": {
                    "type": "integer",
                    "description": "required if\n  - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)\n  - `type`==`gbp_resource`\n  - `type`==`static_gbp` (applying gbp tag against matching conditions)\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if \n- `type`==`mac`\n- `type`==`static_gbp` if from matching mac\n"
                },
                "network": {
                    "type": "string",
                    "description": "if:\n  * `type`==`mac` (optional. default is `any`)\n  * `type`==`subnet` (optional. default is `any`)\n  * `type`==`network`\n  * `type`==`resource` (optional. default is `any`)\n  * `type`==`static_gbp` if from matching network (vlan)'\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "required if:\n  * `type`==`radius_group`\n  * `type`==`static_gbp`\nif from matching radius_group\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchAclTagsSpec:SwitchAclTagsSpec"
                    },
                    "description": "if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if \n- `type`==`subnet` \n- `type`==`resource` (optional. default is `any`)\n- `type`==`static_gbp` if from matching subnet\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: \n  * `any`: matching anything not identified\n  * `dynamic_gbp`: from the gbp_tag received from RADIUS\n  * `gbp_resource`: can only be used in `dst_tags`\n  * `mac`\n  * `network`\n  * `radius_group`\n  * `resource`: can only be used in `dst_tags`\n  * `static_gbp`: applying gbp tag against matching conditions\n  * `subnet`'\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macs",
                        "subnets",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/SwitchAclTagsSpec:SwitchAclTagsSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "`tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocol_number` is between 1-254, default is `any` `protocol_number` is between 1-254\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol"
                    ]
                }
            }
        },
        "junipermist:device/SwitchDhcpSnooping:SwitchDhcpSnooping": {
            "properties": {
                "allNetworks": {
                    "type": "boolean"
                },
                "enableArpSpoofCheck": {
                    "type": "boolean",
                    "description": "Enable for dynamic ARP inspection check\n"
                },
                "enableIpSourceGuard": {
                    "type": "boolean",
                    "description": "Enable for check for forging source IP address\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `all_networks`==`false`, list of network with DHCP snooping enabled\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchDhcpdConfig:SwitchDhcpdConfig": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpdConfigConfig:SwitchDhcpdConfigConfig"
                    },
                    "description": "Property key is the network name\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if set to `true`, enable the DHCP server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:device/SwitchDhcpdConfigConfig:SwitchDhcpdConfigConfig": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`server` or `type6`==`server` - optional, if not defined, system one will be used\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`server` or `type6`==`server` - optional, if not defined, system one will be used\n"
                },
                "fixedBindings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpdConfigConfigFixedBindings:SwitchDhcpdConfigConfigFixedBindings"
                    },
                    "description": "if `type`==`server` or `type6`==`server`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g \"5684dae9ac8b\")\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`server`  - optional, `ip` will be used if not provided\n"
                },
                "ipEnd": {
                    "type": "string",
                    "description": "if `type`==`server`\n"
                },
                "ipEnd6": {
                    "type": "string",
                    "description": "if `type6`==`server`\n"
                },
                "ipStart": {
                    "type": "string",
                    "description": "if `type`==`server`\n"
                },
                "ipStart6": {
                    "type": "string",
                    "description": "if `type6`==`server`\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpdConfigConfigOptions:SwitchDhcpdConfigConfigOptions"
                    },
                    "description": "if `type`==`server` or `type6`==`server`. Property key is the DHCP option number\n"
                },
                "serverIdOverride": {
                    "type": "boolean",
                    "description": "`server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, \nshould overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`relay`\n"
                },
                "servers6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type6`==`relay`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)\n"
                },
                "vendorEncapsulated": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpdConfigConfigVendorEncapsulated:SwitchDhcpdConfigConfigVendorEncapsulated"
                    },
                    "description": "if `type`==`server` or `type6`==`server`. Property key is \u003centerprise number\u003e:\u003csub option code\u003e, with\n  * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)\n  * sub option code: 1-255, sub-option code'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsServers",
                        "dnsSuffixes",
                        "leaseTime",
                        "serverIdOverride",
                        "servers",
                        "servers6s",
                        "type6"
                    ]
                }
            }
        },
        "junipermist:device/SwitchDhcpdConfigConfigFixedBindings:SwitchDhcpdConfigConfigFixedBindings": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "junipermist:device/SwitchDhcpdConfigConfigOptions:SwitchDhcpdConfigConfigOptions": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchDhcpdConfigConfigVendorEncapsulated:SwitchDhcpdConfigConfigVendorEncapsulated": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchExtraRoutes6:SwitchExtraRoutes6": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutes6NextQualified:SwitchExtraRoutes6NextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:device/SwitchExtraRoutes6NextQualified:SwitchExtraRoutes6NextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchExtraRoutes:SwitchExtraRoutes": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutesNextQualified:SwitchExtraRoutesNextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:device/SwitchExtraRoutesNextQualified:SwitchExtraRoutesNextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchIpConfig:SwitchIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `type`==`static`\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`\n"
                },
                "network": {
                    "type": "string",
                    "description": "the network where this mgmt IP reside, this will be used as default network for outbound-ssh, dns, ntp, dns, tacplus, radius, syslog, snmp\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dns",
                        "dnsSuffixes",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/SwitchLocalPortConfig:SwitchLocalPortConfig": {
            "properties": {
                "allNetworks": {
                    "type": "boolean",
                    "description": "Only if `mode`==`trunk` whether to trunk all network/vlans\n"
                },
                "allowDhcpd": {
                    "type": "boolean",
                    "description": "If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.\n"
                },
                "allowMultipleSupplicants": {
                    "type": "boolean"
                },
                "bypassAuthWhenServerDown": {
                    "type": "boolean",
                    "description": "Only if `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down\n"
                },
                "bypassAuthWhenServerDownForUnkonwnClient": {
                    "type": "boolean",
                    "description": "Only if `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down\n"
                },
                "description": {
                    "type": "string"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether the port is disabled\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "link connection mode. enum: `auto`, `full`, `half`\n"
                },
                "dynamicVlanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "Only if `port_auth`==`dot1x` whether to enable MAC Auth\n"
                },
                "enableQos": {
                    "type": "boolean"
                },
                "guestNetwork": {
                    "type": "string",
                    "description": "Only if `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)\n"
                },
                "interSwitchLink": {
                    "type": "boolean",
                    "description": "inter_switch_link is used together with \"isolation\" under networks. NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together\n"
                },
                "macAuthOnly": {
                    "type": "boolean",
                    "description": "Only if `enable_mac_auth`==`true`\n"
                },
                "macAuthPreferred": {
                    "type": "boolean",
                    "description": "Only if `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.\n"
                },
                "macAuthProtocol": {
                    "type": "string",
                    "description": "Only if `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform\n"
                },
                "mode": {
                    "type": "string",
                    "description": "enum: `access`, `inet`, `trunk`\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`==`trunk`, the list of network/vlans\n"
                },
                "note": {
                    "type": "string",
                    "description": "Additional note for the port config override\n"
                },
                "persistMac": {
                    "type": "boolean",
                    "description": "Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses\n"
                },
                "poeDisabled": {
                    "type": "boolean",
                    "description": "whether PoE capabilities are disabled for a port\n"
                },
                "portAuth": {
                    "type": "string",
                    "description": "if dot1x is desired, set to dot1x. enum: `dot1x`\n"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "native network/vlan for untagged traffic\n"
                },
                "reauthInterval": {
                    "type": "integer",
                    "description": "Only if `port_auth`=`dot1x` reauthentication interval range\n"
                },
                "serverFailNetwork": {
                    "type": "string",
                    "description": "Only if `port_auth`==`dot1x` sets server fail fallback vlan\n"
                },
                "serverRejectNetwork": {
                    "type": "string",
                    "description": "Only if `port_auth`==`dot1x` when radius server reject / fails\n"
                },
                "speed": {
                    "type": "string",
                    "description": "enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "stormControl": {
                    "$ref": "#/types/junipermist:device/SwitchLocalPortConfigStormControl:SwitchLocalPortConfigStormControl",
                    "description": "Switch storm control\n"
                },
                "stpEdge": {
                    "type": "boolean",
                    "description": "when enabled, the port is not expected to receive BPDU frames\n"
                },
                "stpNoRootPort": {
                    "type": "boolean"
                },
                "stpP2p": {
                    "type": "boolean"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name.\n"
                },
                "useVstp": {
                    "type": "boolean",
                    "description": "if this is connected to a vstp network\n"
                },
                "voipNetwork": {
                    "type": "string",
                    "description": "network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allNetworks",
                        "allowMultipleSupplicants",
                        "bypassAuthWhenServerDown",
                        "bypassAuthWhenServerDownForUnkonwnClient",
                        "disableAutoneg",
                        "disabled",
                        "duplex",
                        "enableMacAuth",
                        "enableQos",
                        "interSwitchLink",
                        "macAuthProtocol",
                        "macLimit",
                        "persistMac",
                        "poeDisabled",
                        "reauthInterval",
                        "speed",
                        "stpEdge",
                        "stpNoRootPort",
                        "stpP2p",
                        "usage",
                        "useVstp"
                    ]
                }
            }
        },
        "junipermist:device/SwitchLocalPortConfigStormControl:SwitchLocalPortConfigStormControl": {
            "properties": {
                "noBroadcast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on broadcast traffic\n"
                },
                "noMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on multicast traffic\n"
                },
                "noRegisteredMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on registered multicast traffic\n"
                },
                "noUnknownUnicast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on unknown unicast traffic\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noBroadcast",
                        "noMulticast",
                        "noRegisteredMulticast",
                        "noUnknownUnicast",
                        "percentage"
                    ]
                }
            }
        },
        "junipermist:device/SwitchMistNac:SwitchMistNac": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchNetworks:SwitchNetworks": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv4 Virtual Gateway\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv6 Virtual Gateway\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required). NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set\n"
                },
                "isolationVlanId": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "subnet6": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isolation",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:device/SwitchOobIpConfig:SwitchOobIpConfig": {
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`\n"
                },
                "network": {
                    "type": "string",
                    "description": "optional, the network to be used for mgmt\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "useMgmtVrf"
                    ]
                }
            }
        },
        "junipermist:device/SwitchOspfAreas:SwitchOspfAreas": {
            "properties": {
                "includeLoopback": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchOspfAreasNetworks:SwitchOspfAreasNetworks"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "OSPF type. enum: `default`, `nssa`, `stub`\n"
                }
            },
            "type": "object",
            "required": [
                "networks"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "includeLoopback",
                        "networks",
                        "type"
                    ]
                }
            }
        },
        "junipermist:device/SwitchOspfAreasNetworks:SwitchOspfAreasNetworks": {
            "properties": {
                "authKeys": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Required if `auth_type`==`md5`. Property key is the key number\n"
                },
                "authPassword": {
                    "type": "string",
                    "description": "Required if `auth_type`==`password`, the password, max length is 8\n"
                },
                "authType": {
                    "type": "string",
                    "description": "auth type. enum: `md5`, `none`, `password`\n"
                },
                "bfdMinimumInterval": {
                    "type": "integer"
                },
                "deadInterval": {
                    "type": "integer"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "helloInterval": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`\n"
                },
                "metric": {
                    "type": "integer"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned OSPF routes toward overlay\n"
                },
                "passive": {
                    "type": "boolean",
                    "description": "whether to send OSPF-Hello\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authKeys",
                        "authType",
                        "interfaceType",
                        "noReadvertiseToOverlay",
                        "passive"
                    ]
                }
            }
        },
        "junipermist:device/SwitchOtherIpConfigs:SwitchOtherIpConfigs": {
            "properties": {
                "evpnAnycast": {
                    "type": "boolean",
                    "description": "for EVPN, if anycast is desired\n"
                },
                "ip": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "ip6": {
                    "type": "string",
                    "description": "required if `type6`==`static`\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "optional, `subnet` from `network` definition will be used if defined\n"
                },
                "netmask6": {
                    "type": "string",
                    "description": "optional, `subnet` from `network` definition will be used if defined\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `autoconf`, `dhcp`, `disabled`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "evpnAnycast",
                        "type",
                        "type6"
                    ]
                }
            }
        },
        "junipermist:device/SwitchPortConfig:SwitchPortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "To disable LACP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "integer",
                    "description": "Users could force to use the designated AE name\n"
                },
                "aeLacpSlow": {
                    "type": "boolean",
                    "description": "to use fast timeout\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm\n"
                },
                "description": {
                    "type": "string"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "if `speed` and `duplex` are specified, whether to disable autonegotiation\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "dynamicUsage": {
                    "type": "string",
                    "description": "Enable dynamic usage for this port. Set to `dynamic` to enable.\n"
                },
                "esilag": {
                    "type": "boolean"
                },
                "mtu": {
                    "type": "integer",
                    "description": "media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation\n"
                },
                "noLocalOverwrite": {
                    "type": "boolean",
                    "description": "prevent helpdesk to override the port config\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "speed": {
                    "type": "string",
                    "description": "enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. If EVPN is used, use `evpn_uplink`or `evpn_downlink`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregated",
                        "disableAutoneg",
                        "duplex",
                        "mtu",
                        "poeDisabled",
                        "speed",
                        "usage"
                    ]
                }
            }
        },
        "junipermist:device/SwitchPortMirroring:SwitchPortMirroring": {
            "properties": {
                "inputNetworksIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsEgresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "outputNetwork": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                },
                "outputPortId": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "inputNetworksIngresses",
                        "inputPortIdsEgresses",
                        "inputPortIdsIngresses"
                    ]
                }
            }
        },
        "junipermist:device/SwitchPortUsages:SwitchPortUsages": {
            "properties": {
                "allNetworks": {
                    "type": "boolean",
                    "description": "Only if `mode`==`trunk` whether to trunk all network/vlans\n"
                },
                "allowDhcpd": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.\n"
                },
                "allowMultipleSupplicants": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "bypassAuthWhenServerDown": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down\n"
                },
                "bypassAuthWhenServerDownForUnkonwnClient": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down\n"
                },
                "description": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether the port is disabled\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`\n"
                },
                "dynamicVlanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth\n"
                },
                "enableQos": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "guestNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)\n"
                },
                "interSwitchLink": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` inter_switch_link is used together with \"isolation\" under networks. NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together\n"
                },
                "macAuthOnly": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`\n"
                },
                "macAuthPreferred": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.\n"
                },
                "macAuthProtocol": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform\n"
                },
                "mode": {
                    "type": "string",
                    "description": "`mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`==`trunk`, the list of network/vlans\n"
                },
                "persistMac": {
                    "type": "boolean",
                    "description": "Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses\n"
                },
                "poeDisabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port\n"
                },
                "portAuth": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`\n"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` native network/vlan for untagged traffic\n"
                },
                "reauthInterval": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range\n"
                },
                "resetDefaultWhen": {
                    "type": "string",
                    "description": "Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchPortUsagesRule:SwitchPortUsagesRule"
                    },
                    "description": "Only if `mode`==`dynamic`\n"
                },
                "serverFailNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan\n"
                },
                "serverRejectNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "stormControl": {
                    "$ref": "#/types/junipermist:device/SwitchPortUsagesStormControl:SwitchPortUsagesStormControl",
                    "description": "Switch storm control. Only if `mode`!=`dynamic`\n"
                },
                "stpEdge": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames\n"
                },
                "stpNoRootPort": {
                    "type": "boolean"
                },
                "stpP2p": {
                    "type": "boolean"
                },
                "useVstp": {
                    "type": "boolean",
                    "description": "if this is connected to a vstp network\n"
                },
                "voipNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allNetworks",
                        "allowMultipleSupplicants",
                        "bypassAuthWhenServerDown",
                        "bypassAuthWhenServerDownForUnkonwnClient",
                        "disableAutoneg",
                        "disabled",
                        "duplex",
                        "dynamicVlanNetworks",
                        "enableMacAuth",
                        "enableQos",
                        "interSwitchLink",
                        "macAuthProtocol",
                        "macLimit",
                        "networks",
                        "persistMac",
                        "poeDisabled",
                        "reauthInterval",
                        "resetDefaultWhen",
                        "speed",
                        "stpEdge",
                        "stpNoRootPort",
                        "stpP2p",
                        "useVstp"
                    ]
                }
            }
        },
        "junipermist:device/SwitchPortUsagesRule:SwitchPortUsagesRule": {
            "properties": {
                "equals": {
                    "type": "string"
                },
                "equalsAnies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "use `equals_any` to match any item in a list\n"
                },
                "expression": {
                    "type": "string",
                    "description": "\"[0:3]\":\"abcdef\" \u003e \"abc\"\n\"split(.)[1]\": \"a.b.c\" \u003e \"b\"\n\"split(-)[1][0:3]: \"a1234-b5678-c90\" \u003e \"b56\"\n"
                },
                "src": {
                    "type": "string",
                    "description": "enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "`port_usage` name\n"
                }
            },
            "type": "object",
            "required": [
                "src"
            ]
        },
        "junipermist:device/SwitchPortUsagesStormControl:SwitchPortUsagesStormControl": {
            "properties": {
                "noBroadcast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on broadcast traffic\n"
                },
                "noMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on multicast traffic\n"
                },
                "noRegisteredMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on registered multicast traffic\n"
                },
                "noUnknownUnicast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on unknown unicast traffic\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noBroadcast",
                        "noMulticast",
                        "noRegisteredMulticast",
                        "noUnknownUnicast",
                        "percentage"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRadiusConfig:SwitchRadiusConfig": {
            "properties": {
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRadiusConfigAcctServer:SwitchRadiusConfigAcctServer"
                    }
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRadiusConfigAuthServer:SwitchRadiusConfigAuthServer"
                    }
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout\n"
                },
                "network": {
                    "type": "string",
                    "description": "use `network`or `source_ip`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "use `network`or `source_ip`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acctInterimInterval",
                        "authServersRetries",
                        "authServersTimeout"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRadiusConfigAcctServer:SwitchRadiusConfigAcctServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Acct port of RADIUS server\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRadiusConfigAuthServer:SwitchRadiusConfigAuthServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Auth port of RADIUS server\n"
                },
                "requireMessageAuthenticator": {
                    "type": "boolean",
                    "description": "whether to require Message-Authenticator in requests\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requireMessageAuthenticator",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslog:SwitchRemoteSyslog": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:device/SwitchRemoteSyslogArchive:SwitchRemoteSyslogArchive"
                },
                "console": {
                    "$ref": "#/types/junipermist:device/SwitchRemoteSyslogConsole:SwitchRemoteSyslogConsole"
                },
                "enabled": {
                    "type": "boolean"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogFile:SwitchRemoteSyslogFile"
                    }
                },
                "network": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "sendToAllServers": {
                    "type": "boolean"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogServer:SwitchRemoteSyslogServer"
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "enum: `millisecond`, `year`, `year millisecond`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogUser:SwitchRemoteSyslogUser"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "sendToAllServers"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslogArchive:SwitchRemoteSyslogArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchRemoteSyslogConsole:SwitchRemoteSyslogConsole": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogConsoleContent:SwitchRemoteSyslogConsoleContent"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchRemoteSyslogConsoleContent:SwitchRemoteSyslogConsoleContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslogFile:SwitchRemoteSyslogFile": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:device/SwitchRemoteSyslogFileArchive:SwitchRemoteSyslogFileArchive"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogFileContent:SwitchRemoteSyslogFileContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "file": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "structuredData": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchRemoteSyslogFileArchive:SwitchRemoteSyslogFileArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchRemoteSyslogFileContent:SwitchRemoteSyslogFileContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslogServer:SwitchRemoteSyslogServer": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogServerContent:SwitchRemoteSyslogServerContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "host": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `tcp`, `udp`\n"
                },
                "routingInstance": {
                    "type": "string"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "structuredData": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "port",
                        "protocol",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslogServerContent:SwitchRemoteSyslogServerContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:device/SwitchRemoteSyslogUser:SwitchRemoteSyslogUser": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslogUserContent:SwitchRemoteSyslogUserContent"
                    }
                },
                "match": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchRemoteSyslogUserContent:SwitchRemoteSyslogUserContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSnmpConfig:SwitchSnmpConfig": {
            "properties": {
                "clientLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigClientList:SwitchSnmpConfigClientList"
                    }
                },
                "contact": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "engineId": {
                    "type": "string",
                    "description": "enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "trapGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigTrapGroup:SwitchSnmpConfigTrapGroup"
                    }
                },
                "v2cConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV2cConfig:SwitchSnmpConfigV2cConfig"
                    }
                },
                "v3Config": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3Config:SwitchSnmpConfigV3Config"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigView:SwitchSnmpConfigView"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "network"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSnmpConfigClientList:SwitchSnmpConfigClientList": {
            "properties": {
                "clientListName": {
                    "type": "string"
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigTrapGroup:SwitchSnmpConfigTrapGroup": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string",
                    "description": "enum: `all`, `v1`, `v2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "version"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSnmpConfigV2cConfig:SwitchSnmpConfigV2cConfig": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "clientListName": {
                    "type": "string",
                    "description": "client_list_name here should refer to client_list above\n"
                },
                "communityName": {
                    "type": "string"
                },
                "view": {
                    "type": "string",
                    "description": "view name here should be defined in views above\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3Config:SwitchSnmpConfigV3Config": {
            "properties": {
                "notifies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigNotify:SwitchSnmpConfigV3ConfigNotify"
                    }
                },
                "notifyFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigNotifyFilter:SwitchSnmpConfigV3ConfigNotifyFilter"
                    }
                },
                "targetAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigTargetAddress:SwitchSnmpConfigV3ConfigTargetAddress"
                    }
                },
                "targetParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigTargetParameter:SwitchSnmpConfigV3ConfigTargetParameter"
                    }
                },
                "usm": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigUsm:SwitchSnmpConfigV3ConfigUsm"
                },
                "vacm": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigVacm:SwitchSnmpConfigV3ConfigVacm"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigNotify:SwitchSnmpConfigV3ConfigNotify": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `inform`, `trap`\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigNotifyFilter:SwitchSnmpConfigV3ConfigNotifyFilter": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigNotifyFilterContent:SwitchSnmpConfigV3ConfigNotifyFilterContent"
                    }
                },
                "profileName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigNotifyFilterContent:SwitchSnmpConfigV3ConfigNotifyFilterContent": {
            "properties": {
                "include": {
                    "type": "boolean"
                },
                "oid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigTargetAddress:SwitchSnmpConfigV3ConfigTargetAddress": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressMask": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "tagList": {
                    "type": "string",
                    "description": "\u003crefer to notify tag, can be multiple with blank\n"
                },
                "targetAddressName": {
                    "type": "string"
                },
                "targetParameters": {
                    "type": "string",
                    "description": "refer to notify target parameters name\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigTargetParameter:SwitchSnmpConfigV3ConfigTargetParameter": {
            "properties": {
                "messageProcessingModel": {
                    "type": "string",
                    "description": "enum: `v1`, `v2c`, `v3`\n"
                },
                "name": {
                    "type": "string"
                },
                "notifyFilter": {
                    "type": "string",
                    "description": "refer to profile-name in notify_filter\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                },
                "securityName": {
                    "type": "string",
                    "description": "refer to security_name in usm\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigUsm:SwitchSnmpConfigV3ConfigUsm": {
            "properties": {
                "engineType": {
                    "type": "string",
                    "description": "enum: `local_engine`, `remote_engine`\n"
                },
                "engineid": {
                    "type": "string",
                    "description": "required only if `engine_type`==`remote_engine`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigUsmUser:SwitchSnmpConfigV3ConfigUsmUser"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigUsmUser:SwitchSnmpConfigV3ConfigUsmUser": {
            "properties": {
                "authenticationPassword": {
                    "type": "string",
                    "description": "Not required if `authentication_type`==`authentication_none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.\n",
                    "secret": true
                },
                "authenticationType": {
                    "type": "string",
                    "description": "sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`\n"
                },
                "encryptionPassword": {
                    "type": "string",
                    "description": "Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters\n",
                    "secret": true
                },
                "encryptionType": {
                    "type": "string",
                    "description": "enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigVacm:SwitchSnmpConfigV3ConfigVacm": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigVacmAccess:SwitchSnmpConfigV3ConfigVacmAccess"
                    }
                },
                "securityToGroup": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigVacmSecurityToGroup:SwitchSnmpConfigV3ConfigVacmSecurityToGroup"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigVacmAccess:SwitchSnmpConfigV3ConfigVacmAccess": {
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "prefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigVacmAccessPrefixList:SwitchSnmpConfigV3ConfigVacmAccessPrefixList"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigVacmAccessPrefixList:SwitchSnmpConfigV3ConfigVacmAccessPrefixList": {
            "properties": {
                "contextPrefix": {
                    "type": "string",
                    "description": "only required if `type`==`context_prefix`\n"
                },
                "notifyView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "readView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `any`, `usm`, `v1`, `v2c`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `context_prefix`, `default_context_prefix`\n"
                },
                "writeView": {
                    "type": "string",
                    "description": "refer to view name\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigVacmSecurityToGroup:SwitchSnmpConfigV3ConfigVacmSecurityToGroup": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent:SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent"
                    }
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent:SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "refer to group_name under access\n"
                },
                "securityName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchSnmpConfigView:SwitchSnmpConfigView": {
            "properties": {
                "include": {
                    "type": "boolean",
                    "description": "if the root oid configured is included\n"
                },
                "oid": {
                    "type": "string"
                },
                "viewName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchStpConfig:SwitchStpConfig": {
            "properties": {
                "bridgePriority": {
                    "type": "string",
                    "description": "Switch STP priority: from `0k` to `15k`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bridgePriority"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmt:SwitchSwitchMgmt": {
            "properties": {
                "apAffinityThreshold": {
                    "type": "integer",
                    "description": "ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.\n"
                },
                "cliBanner": {
                    "type": "string",
                    "description": "Set Banners for switches. Allows markup formatting\n"
                },
                "cliIdleTimeout": {
                    "type": "integer",
                    "description": "Sets timeout for switches\n"
                },
                "configRevertTimer": {
                    "type": "integer",
                    "description": "the rollback timer for commit confirmed\n"
                },
                "dhcpOptionFqdn": {
                    "type": "boolean",
                    "description": "Enable to provide the FQDN with DHCP option 81\n"
                },
                "disableOobDownAlarm": {
                    "type": "boolean"
                },
                "localAccounts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchSwitchMgmtLocalAccounts:SwitchSwitchMgmtLocalAccounts"
                    },
                    "description": "Property key is the user name. For Local user authentication\n"
                },
                "mxedgeProxyHost": {
                    "type": "string"
                },
                "mxedgeProxyPort": {
                    "type": "integer"
                },
                "protectRe": {
                    "$ref": "#/types/junipermist:device/SwitchSwitchMgmtProtectRe:SwitchSwitchMgmtProtectRe",
                    "description": "restrict inbound-traffic to host\nwhen enabled, all traffic that is not essential to our operation will be dropped \ne.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works\n"
                },
                "rootPassword": {
                    "type": "string",
                    "secret": true
                },
                "tacacs": {
                    "$ref": "#/types/junipermist:device/SwitchSwitchMgmtTacacs:SwitchSwitchMgmtTacacs"
                },
                "useMxedgeProxy": {
                    "type": "boolean",
                    "description": "to use mxedge as proxy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apAffinityThreshold",
                        "configRevertTimer",
                        "dhcpOptionFqdn",
                        "mxedgeProxyPort"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtLocalAccounts:SwitchSwitchMgmtLocalAccounts": {
            "properties": {
                "password": {
                    "type": "string",
                    "secret": true
                },
                "role": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "role"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtProtectRe:SwitchSwitchMgmtProtectRe": {
            "properties": {
                "allowedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optionally, services we'll allow. enum: `icmp`, `ssh`\n"
                },
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSwitchMgmtProtectReCustom:SwitchSwitchMgmtProtectReCustom"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled, all traffic that is not essential to our operation will be dropped\ne.g. ntp / dns / traffic to mist will be allowed by default\n     if dhcpd is enabled, we'll make sure it works\n"
                },
                "trustedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "host/subnets we'll allow traffic to/from\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedServices",
                        "customs",
                        "enabled",
                        "trustedHosts"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtProtectReCustom:SwitchSwitchMgmtProtectReCustom": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtTacacs:SwitchSwitchMgmtTacacs": {
            "properties": {
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSwitchMgmtTacacsAcctServer:SwitchSwitchMgmtTacacsAcctServer"
                    }
                },
                "defaultRole": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string",
                    "description": "which network the TACACS server resides\n"
                },
                "tacplusServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchSwitchMgmtTacacsTacplusServer:SwitchSwitchMgmtTacacsTacplusServer"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultRole"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtTacacsAcctServer:SwitchSwitchMgmtTacacsAcctServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:device/SwitchSwitchMgmtTacacsTacplusServer:SwitchSwitchMgmtTacacsTacplusServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:device/SwitchVirtualChassis:SwitchVirtualChassis": {
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchVirtualChassisMember:SwitchVirtualChassisMember"
                    },
                    "description": "list of Virtual Chassis members\n"
                },
                "preprovisioned": {
                    "type": "boolean",
                    "description": "to configure whether the VC is preprovisioned or nonprovisioned\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preprovisioned"
                    ]
                }
            }
        },
        "junipermist:device/SwitchVirtualChassisMember:SwitchVirtualChassisMember": {
            "properties": {
                "mac": {
                    "type": "string",
                    "description": "fpc0, same as the mac of device_id\n"
                },
                "memberId": {
                    "type": "integer"
                },
                "vcRole": {
                    "type": "string",
                    "description": "Both vc_role master and backup will be matched to routing-engine role in Junos preprovisioned VC config. enum: `backup`, `linecard`, `master`\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchVrfConfig:SwitchVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchVrfInstances:SwitchVrfInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vrfExtraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchVrfInstancesVrfExtraRoutes:SwitchVrfInstancesVrfExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchVrfInstancesVrfExtraRoutes:SwitchVrfInstancesVrfExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string",
                    "description": "Next-hop address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:device/SwitchVrrpConfig:SwitchVrrpConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchVrrpConfigGroups:SwitchVrrpConfigGroups"
                    },
                    "description": "Property key is the VRRP name\n"
                }
            },
            "type": "object"
        },
        "junipermist:device/SwitchVrrpConfigGroups:SwitchVrrpConfigGroups": {
            "properties": {
                "priority": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:device/baseLatlng:baseLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ]
        },
        "junipermist:device/getApStatsDeviceApStat:getApStatsDeviceApStat": {
            "properties": {
                "autoPlacement": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatAutoPlacement:getApStatsDeviceApStatAutoPlacement"
                },
                "autoUpgradeStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatAutoUpgradeStat:getApStatsDeviceApStatAutoUpgradeStat"
                },
                "bleStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatBleStat:getApStatsDeviceApStatBleStat"
                },
                "certExpiry": {
                    "type": "number"
                },
                "configReverted": {
                    "type": "boolean"
                },
                "cpuSystem": {
                    "type": "integer"
                },
                "cpuUtil": {
                    "type": "integer"
                },
                "createdTime": {
                    "type": "integer"
                },
                "deviceprofileId": {
                    "type": "string"
                },
                "envStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatEnvStat:getApStatsDeviceApStatEnvStat",
                    "description": "device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage\n"
                },
                "eslStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatEslStat:getApStatsDeviceApStatEslStat"
                },
                "extIp": {
                    "type": "string"
                },
                "fwupdate": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatFwupdate:getApStatsDeviceApStatFwupdate"
                },
                "hwRev": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inactiveWiredVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "iotStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getApStatsDeviceApStatIotStat:getApStatsDeviceApStatIotStat"
                    }
                },
                "ip": {
                    "type": "string"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatIpConfig:getApStatsDeviceApStatIpConfig",
                    "description": "IP AP settings\n"
                },
                "ipStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatIpStat:getApStatsDeviceApStatIpStat"
                },
                "l2tpStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getApStatsDeviceApStatL2tpStat:getApStatsDeviceApStatL2tpStat"
                    },
                    "description": "l2tp tunnel status (key is the wxtunnel*id)\n"
                },
                "lastSeen": {
                    "type": "number",
                    "description": "last seen timestamp\n"
                },
                "lastTrouble": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatLastTrouble:getApStatsDeviceApStatLastTrouble",
                    "description": "last trouble code of switch\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatLed:getApStatsDeviceApStatLed",
                    "description": "LED AP settings\n"
                },
                "lldpStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatLldpStat:getApStatsDeviceApStatLldpStat",
                    "description": "LLDP Stat (neighbor information, power negotiations)\n"
                },
                "locating": {
                    "type": "boolean"
                },
                "locked": {
                    "type": "boolean",
                    "description": "whether this AP is considered locked (placement / orientation has been vetted)\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device mac\n"
                },
                "mapId": {
                    "type": "string"
                },
                "memUsedKb": {
                    "type": "integer"
                },
                "meshDownlinks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getApStatsDeviceApStatMeshDownlinks:getApStatsDeviceApStatMeshDownlinks"
                    },
                    "description": "Property key is the mesh downlink id (e.g `00000000-0000-0000-1000-5c5b35000010`)\n"
                },
                "meshUplink": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatMeshUplink:getApStatsDeviceApStatMeshUplink"
                },
                "model": {
                    "type": "string",
                    "description": "device model\n"
                },
                "modifiedTime": {
                    "type": "integer"
                },
                "mount": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "numClients": {
                    "type": "integer",
                    "description": "how many wireless clients are currently connected\n"
                },
                "orgId": {
                    "type": "string"
                },
                "portStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getApStatsDeviceApStatPortStat:getApStatsDeviceApStatPortStat"
                    },
                    "description": "Property key is the port name (e.g. `eth0`)\n"
                },
                "powerBudget": {
                    "type": "integer",
                    "description": "in mW, surplus if positive or deficit if negative\n"
                },
                "powerConstrained": {
                    "type": "boolean",
                    "description": "whether insufficient power\n"
                },
                "powerOpmode": {
                    "type": "string",
                    "description": "constrained mode\n"
                },
                "powerSrc": {
                    "type": "string",
                    "description": "DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)\n"
                },
                "radioStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatRadioStat:getApStatsDeviceApStatRadioStat"
                },
                "rxBps": {
                    "type": "number"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string",
                    "description": "serial\n"
                },
                "siteId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "switchRedundancy": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatSwitchRedundancy:getApStatsDeviceApStatSwitchRedundancy"
                },
                "txBps": {
                    "type": "number"
                },
                "txBytes": {
                    "type": "number"
                },
                "txPkts": {
                    "type": "number"
                },
                "uptime": {
                    "type": "number",
                    "description": "how long, in seconds, has the device been up (or rebooted)\n"
                },
                "usbStat": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatUsbStat:getApStatsDeviceApStatUsbStat"
                },
                "version": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "autoPlacement",
                "autoUpgradeStat",
                "bleStat",
                "certExpiry",
                "configReverted",
                "cpuSystem",
                "cpuUtil",
                "createdTime",
                "deviceprofileId",
                "envStat",
                "eslStat",
                "extIp",
                "fwupdate",
                "hwRev",
                "id",
                "inactiveWiredVlans",
                "iotStat",
                "ip",
                "ipConfig",
                "ipStat",
                "l2tpStat",
                "lastSeen",
                "lastTrouble",
                "led",
                "lldpStat",
                "locating",
                "locked",
                "mac",
                "mapId",
                "memUsedKb",
                "meshDownlinks",
                "meshUplink",
                "model",
                "modifiedTime",
                "mount",
                "name",
                "notes",
                "numClients",
                "orgId",
                "portStat",
                "powerBudget",
                "powerConstrained",
                "powerOpmode",
                "powerSrc",
                "radioStat",
                "rxBps",
                "rxBytes",
                "rxPkts",
                "serial",
                "siteId",
                "status",
                "switchRedundancy",
                "txBps",
                "txBytes",
                "txPkts",
                "uptime",
                "usbStat",
                "version",
                "x",
                "y"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatAutoPlacement:getApStatsDeviceApStatAutoPlacement": {
            "properties": {
                "info": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatAutoPlacementInfo:getApStatsDeviceApStatAutoPlacementInfo",
                    "description": "Additional information about auto placements AP data\n"
                },
                "recommendedAnchor": {
                    "type": "boolean",
                    "description": "Flag to represent if AP is recommended as an anchor by auto placement service\n"
                },
                "status": {
                    "type": "string",
                    "description": "Basic Placement Status\n"
                },
                "statusDetail": {
                    "type": "string",
                    "description": "Additional info about placement status\n"
                },
                "useAutoPlacement": {
                    "type": "boolean",
                    "description": "Flag to represent if auto_placement values are currently utilized\n"
                },
                "x": {
                    "type": "number",
                    "description": "X Autoplaced Position in pixels\n"
                },
                "xM": {
                    "type": "number",
                    "description": "X Autoplaced Position in meters\n"
                },
                "y": {
                    "type": "number",
                    "description": "Y Autoplaced Position in pixels\n"
                },
                "yM": {
                    "type": "number",
                    "description": "X Autoplaced Position in meters\n"
                }
            },
            "type": "object",
            "required": [
                "info",
                "recommendedAnchor",
                "status",
                "statusDetail",
                "useAutoPlacement",
                "x",
                "xM",
                "y",
                "yM"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatAutoPlacementInfo:getApStatsDeviceApStatAutoPlacementInfo": {
            "properties": {
                "clusterNumber": {
                    "type": "integer",
                    "description": "All APs sharing a given cluster number can be placed relative to each other\n"
                },
                "orientationStats": {
                    "type": "integer",
                    "description": "The orientation of an AP\n"
                },
                "probabilitySurface": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatAutoPlacementInfoProbabilitySurface:getApStatsDeviceApStatAutoPlacementInfoProbabilitySurface",
                    "description": "Coordinates representing a circle where the AP is most likely exists in the event of an inaccurate placement result\n"
                }
            },
            "type": "object",
            "required": [
                "clusterNumber",
                "orientationStats",
                "probabilitySurface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatAutoPlacementInfoProbabilitySurface:getApStatsDeviceApStatAutoPlacementInfoProbabilitySurface": {
            "properties": {
                "radius": {
                    "type": "number",
                    "description": "The radius representing placement uncertainty, measured in pixels\n"
                },
                "radiusM": {
                    "type": "number",
                    "description": "The radius representing placement uncertainty, measured in meters\n"
                },
                "x": {
                    "type": "number",
                    "description": "Y-coordinate of the potential placement’s center, measured in pixels\n"
                }
            },
            "type": "object",
            "required": [
                "radius",
                "radiusM",
                "x"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatAutoUpgradeStat:getApStatsDeviceApStatAutoUpgradeStat": {
            "properties": {
                "lastcheck": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "lastcheck"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatBleStat:getApStatsDeviceApStatBleStat": {
            "properties": {
                "beaconEnabled": {
                    "type": "boolean"
                },
                "beaconRate": {
                    "type": "integer"
                },
                "eddystoneUidEnabled": {
                    "type": "boolean"
                },
                "eddystoneUidFreqMsec": {
                    "type": "integer"
                },
                "eddystoneUidInstance": {
                    "type": "string"
                },
                "eddystoneUidNamespace": {
                    "type": "string"
                },
                "eddystoneUrlEnabled": {
                    "type": "boolean"
                },
                "eddystoneUrlFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit by Eddystone-UID beacon\n"
                },
                "eddystoneUrlUrl": {
                    "type": "string"
                },
                "ibeaconEnabled": {
                    "type": "boolean"
                },
                "ibeaconFreqMsec": {
                    "type": "integer"
                },
                "ibeaconMajor": {
                    "type": "integer"
                },
                "ibeaconMinor": {
                    "type": "integer"
                },
                "ibeaconUuid": {
                    "type": "string"
                },
                "major": {
                    "type": "integer"
                },
                "minors": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "power": {
                    "type": "integer"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "txResets": {
                    "type": "integer",
                    "description": "resets due to tx hung\n"
                },
                "uuid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "beaconEnabled",
                "beaconRate",
                "eddystoneUidEnabled",
                "eddystoneUidFreqMsec",
                "eddystoneUidInstance",
                "eddystoneUidNamespace",
                "eddystoneUrlEnabled",
                "eddystoneUrlFreqMsec",
                "eddystoneUrlUrl",
                "ibeaconEnabled",
                "ibeaconFreqMsec",
                "ibeaconMajor",
                "ibeaconMinor",
                "ibeaconUuid",
                "major",
                "minors",
                "power",
                "rxBytes",
                "rxPkts",
                "txBytes",
                "txPkts",
                "txResets",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatEnvStat:getApStatsDeviceApStatEnvStat": {
            "properties": {
                "accelX": {
                    "type": "number"
                },
                "accelY": {
                    "type": "number"
                },
                "accelZ": {
                    "type": "number"
                },
                "ambientTemp": {
                    "type": "integer"
                },
                "attitude": {
                    "type": "integer"
                },
                "cpuTemp": {
                    "type": "integer"
                },
                "humidity": {
                    "type": "integer"
                },
                "magneX": {
                    "type": "number"
                },
                "magneY": {
                    "type": "number"
                },
                "magneZ": {
                    "type": "number"
                },
                "pressure": {
                    "type": "number"
                },
                "vcoreVoltage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "accelX",
                "accelY",
                "accelZ",
                "ambientTemp",
                "attitude",
                "cpuTemp",
                "humidity",
                "magneX",
                "magneY",
                "magneZ",
                "pressure",
                "vcoreVoltage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatEslStat:getApStatsDeviceApStatEslStat": {
            "properties": {
                "channel": {
                    "type": "integer"
                },
                "connected": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "up": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "channel",
                "connected",
                "type",
                "up"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatFwupdate:getApStatsDeviceApStatFwupdate": {
            "properties": {
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "statusId": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "number"
                },
                "willRetry": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "progress",
                "status",
                "statusId",
                "timestamp",
                "willRetry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatIotStat:getApStatsDeviceApStatIotStat": {
            "properties": {
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatIpConfig:getApStatsDeviceApStatIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`static`\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`static`\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "ip6": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                },
                "netmask": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "netmask6": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "type6": {
                    "type": "string"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "management vlan id, default is 1 (untagged)\n"
                }
            },
            "type": "object",
            "required": [
                "dns",
                "dnsSuffixes",
                "gateway",
                "gateway6",
                "ip",
                "ip6",
                "mtu",
                "netmask",
                "netmask6",
                "type",
                "type6",
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatIpStat:getApStatsDeviceApStatIpStat": {
            "properties": {
                "dhcpServer": {
                    "type": "string"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ip6": {
                    "type": "string"
                },
                "ips": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "netmask": {
                    "type": "string"
                },
                "netmask6": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dhcpServer",
                "dns",
                "dnsSuffixes",
                "gateway",
                "gateway6",
                "ip",
                "ip6",
                "ips",
                "netmask",
                "netmask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatL2tpStat:getApStatsDeviceApStatL2tpStat": {
            "properties": {
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getApStatsDeviceApStatL2tpStatSession:getApStatsDeviceApStatL2tpStatSession"
                    },
                    "description": "list of sessions\n"
                },
                "state": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer",
                    "description": "uptime\n"
                },
                "wxtunnelId": {
                    "type": "string",
                    "description": "WxlanTunnel ID\n"
                }
            },
            "type": "object",
            "required": [
                "sessions",
                "state",
                "uptime",
                "wxtunnelId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatL2tpStatSession:getApStatsDeviceApStatL2tpStatSession": {
            "properties": {
                "localSid": {
                    "type": "integer",
                    "description": "remote sessions id (dynamically unless Tunnel is said to be static)\n"
                },
                "remoteId": {
                    "type": "string",
                    "description": "WxlanTunnel Remote ID (user-configured)\n"
                },
                "remoteSid": {
                    "type": "integer",
                    "description": "remote sessions id (dynamically unless Tunnel is said to be static)\n"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "localSid",
                "remoteId",
                "remoteSid",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatLastTrouble:getApStatsDeviceApStatLastTrouble": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code definitions list at /api/v1/consts/ap*led*status\n"
                },
                "timestamp": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "code",
                "timestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatLed:getApStatsDeviceApStatLed": {
            "properties": {
                "brightness": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "brightness",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatLldpStat:getApStatsDeviceApStatLldpStat": {
            "properties": {
                "chassisId": {
                    "type": "string"
                },
                "lldpMedSupported": {
                    "type": "boolean",
                    "description": "whether it support LLDP-MED\n"
                },
                "mgmtAddr": {
                    "type": "string",
                    "description": "switch’s management address (if advertised), can be IPv4, IPv6, or MAC\n"
                },
                "mgmtAddrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "portDesc": {
                    "type": "string",
                    "description": "ge-0/0/4\n"
                },
                "portId": {
                    "type": "string"
                },
                "powerAllocated": {
                    "type": "number",
                    "description": "in mW, provided/allocated by PSE\n"
                },
                "powerDraw": {
                    "type": "number",
                    "description": "in mW, total power needed by PD\n"
                },
                "powerRequestCount": {
                    "type": "integer",
                    "description": "number of negotiations, if it keeps increasing, we don’t have a stable power\n"
                },
                "powerRequested": {
                    "type": "number",
                    "description": "in mW, the current power requested by PD\n"
                },
                "systemDesc": {
                    "type": "string",
                    "description": "description provided by switch\n"
                },
                "systemName": {
                    "type": "string",
                    "description": "name of the switch\n"
                }
            },
            "type": "object",
            "required": [
                "chassisId",
                "lldpMedSupported",
                "mgmtAddr",
                "mgmtAddrs",
                "portDesc",
                "portId",
                "powerAllocated",
                "powerDraw",
                "powerRequestCount",
                "powerRequested",
                "systemDesc",
                "systemName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatMeshDownlinks:getApStatsDeviceApStatMeshDownlinks": {
            "properties": {
                "band": {
                    "type": "string"
                },
                "channel": {
                    "type": "integer"
                },
                "idleTime": {
                    "type": "integer"
                },
                "lastSeen": {
                    "type": "number"
                },
                "proto": {
                    "type": "string"
                },
                "rssi": {
                    "type": "integer"
                },
                "rxBps": {
                    "type": "integer"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPackets": {
                    "type": "integer"
                },
                "rxRate": {
                    "type": "integer"
                },
                "rxRetries": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "string"
                },
                "snr": {
                    "type": "integer"
                },
                "txBps": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPackets": {
                    "type": "integer"
                },
                "txRate": {
                    "type": "integer"
                },
                "txRetries": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "band",
                "channel",
                "idleTime",
                "lastSeen",
                "proto",
                "rssi",
                "rxBps",
                "rxBytes",
                "rxPackets",
                "rxRate",
                "rxRetries",
                "siteId",
                "snr",
                "txBps",
                "txBytes",
                "txPackets",
                "txRate",
                "txRetries"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatMeshUplink:getApStatsDeviceApStatMeshUplink": {
            "properties": {
                "band": {
                    "type": "string"
                },
                "channel": {
                    "type": "integer"
                },
                "idleTime": {
                    "type": "integer"
                },
                "lastSeen": {
                    "type": "number"
                },
                "proto": {
                    "type": "string"
                },
                "rssi": {
                    "type": "integer"
                },
                "rxBps": {
                    "type": "integer"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPackets": {
                    "type": "integer"
                },
                "rxRate": {
                    "type": "integer"
                },
                "rxRetries": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "string"
                },
                "snr": {
                    "type": "integer"
                },
                "txBps": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPackets": {
                    "type": "integer"
                },
                "txRate": {
                    "type": "integer"
                },
                "txRetries": {
                    "type": "integer"
                },
                "uplinkApId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "band",
                "channel",
                "idleTime",
                "lastSeen",
                "proto",
                "rssi",
                "rxBps",
                "rxBytes",
                "rxPackets",
                "rxRate",
                "rxRetries",
                "siteId",
                "snr",
                "txBps",
                "txBytes",
                "txPackets",
                "txRate",
                "txRetries",
                "uplinkApId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatPortStat:getApStatsDeviceApStatPortStat": {
            "properties": {
                "fullDuplex": {
                    "type": "boolean"
                },
                "rxBytes": {
                    "type": "number"
                },
                "rxErrors": {
                    "type": "number"
                },
                "rxPkts": {
                    "type": "number"
                },
                "speed": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "number"
                },
                "txPkts": {
                    "type": "number"
                },
                "up": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "fullDuplex",
                "rxBytes",
                "rxErrors",
                "rxPkts",
                "speed",
                "txBytes",
                "txPkts",
                "up"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatRadioStat:getApStatsDeviceApStatRadioStat": {
            "properties": {
                "band24": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatRadioStatBand24:getApStatsDeviceApStatRadioStatBand24",
                    "description": "radio stat\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatRadioStatBand5:getApStatsDeviceApStatRadioStatBand5",
                    "description": "radio stat\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:device/getApStatsDeviceApStatRadioStatBand6:getApStatsDeviceApStatRadioStatBand6",
                    "description": "radio stat\n"
                }
            },
            "type": "object",
            "required": [
                "band24",
                "band5",
                "band6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatRadioStatBand24:getApStatsDeviceApStatRadioStatBand24": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "current channel the radio is running on\n"
                },
                "dynamicChainingEnalbed": {
                    "type": "boolean",
                    "description": "Use dynamic chaining for downlink\n"
                },
                "mac": {
                    "type": "string",
                    "description": "radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)\n"
                },
                "noiseFloor": {
                    "type": "integer"
                },
                "numClients": {
                    "type": "integer"
                },
                "power": {
                    "type": "integer",
                    "description": "transmit power (in dBm)\n"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "usage": {
                    "type": "string"
                },
                "utilAll": {
                    "type": "integer",
                    "description": "all utilization in percentage\n"
                },
                "utilNonWifi": {
                    "type": "integer",
                    "description": "reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise\n"
                },
                "utilRxInBss": {
                    "type": "integer",
                    "description": "reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS\n"
                },
                "utilRxOtherBss": {
                    "type": "integer",
                    "description": "reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS\n"
                },
                "utilTx": {
                    "type": "integer",
                    "description": "transmission utilization in percentage\n"
                },
                "utilUndecodableWifi": {
                    "type": "integer",
                    "description": "reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio\n"
                },
                "utilUnknownWifi": {
                    "type": "integer",
                    "description": "reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver\n"
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "channel",
                "dynamicChainingEnalbed",
                "mac",
                "noiseFloor",
                "numClients",
                "power",
                "rxBytes",
                "rxPkts",
                "txBytes",
                "txPkts",
                "usage",
                "utilAll",
                "utilNonWifi",
                "utilRxInBss",
                "utilRxOtherBss",
                "utilTx",
                "utilUndecodableWifi",
                "utilUnknownWifi"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatRadioStatBand5:getApStatsDeviceApStatRadioStatBand5": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "current channel the radio is running on\n"
                },
                "dynamicChainingEnalbed": {
                    "type": "boolean",
                    "description": "Use dynamic chaining for downlink\n"
                },
                "mac": {
                    "type": "string",
                    "description": "radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)\n"
                },
                "noiseFloor": {
                    "type": "integer"
                },
                "numClients": {
                    "type": "integer"
                },
                "power": {
                    "type": "integer",
                    "description": "transmit power (in dBm)\n"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "usage": {
                    "type": "string"
                },
                "utilAll": {
                    "type": "integer",
                    "description": "all utilization in percentage\n"
                },
                "utilNonWifi": {
                    "type": "integer",
                    "description": "reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise\n"
                },
                "utilRxInBss": {
                    "type": "integer",
                    "description": "reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS\n"
                },
                "utilRxOtherBss": {
                    "type": "integer",
                    "description": "reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS\n"
                },
                "utilTx": {
                    "type": "integer",
                    "description": "transmission utilization in percentage\n"
                },
                "utilUndecodableWifi": {
                    "type": "integer",
                    "description": "reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio\n"
                },
                "utilUnknownWifi": {
                    "type": "integer",
                    "description": "reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver\n"
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "channel",
                "dynamicChainingEnalbed",
                "mac",
                "noiseFloor",
                "numClients",
                "power",
                "rxBytes",
                "rxPkts",
                "txBytes",
                "txPkts",
                "usage",
                "utilAll",
                "utilNonWifi",
                "utilRxInBss",
                "utilRxOtherBss",
                "utilTx",
                "utilUndecodableWifi",
                "utilUnknownWifi"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatRadioStatBand6:getApStatsDeviceApStatRadioStatBand6": {
            "properties": {
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "current channel the radio is running on\n"
                },
                "dynamicChainingEnalbed": {
                    "type": "boolean",
                    "description": "Use dynamic chaining for downlink\n"
                },
                "mac": {
                    "type": "string",
                    "description": "radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)\n"
                },
                "noiseFloor": {
                    "type": "integer"
                },
                "numClients": {
                    "type": "integer"
                },
                "power": {
                    "type": "integer",
                    "description": "transmit power (in dBm)\n"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "usage": {
                    "type": "string"
                },
                "utilAll": {
                    "type": "integer",
                    "description": "all utilization in percentage\n"
                },
                "utilNonWifi": {
                    "type": "integer",
                    "description": "reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise\n"
                },
                "utilRxInBss": {
                    "type": "integer",
                    "description": "reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS\n"
                },
                "utilRxOtherBss": {
                    "type": "integer",
                    "description": "reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS\n"
                },
                "utilTx": {
                    "type": "integer",
                    "description": "transmission utilization in percentage\n"
                },
                "utilUndecodableWifi": {
                    "type": "integer",
                    "description": "reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio\n"
                },
                "utilUnknownWifi": {
                    "type": "integer",
                    "description": "reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver\n"
                }
            },
            "type": "object",
            "required": [
                "bandwidth",
                "channel",
                "dynamicChainingEnalbed",
                "mac",
                "noiseFloor",
                "numClients",
                "power",
                "rxBytes",
                "rxPkts",
                "txBytes",
                "txPkts",
                "usage",
                "utilAll",
                "utilNonWifi",
                "utilRxInBss",
                "utilRxOtherBss",
                "utilTx",
                "utilUndecodableWifi",
                "utilUnknownWifi"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatSwitchRedundancy:getApStatsDeviceApStatSwitchRedundancy": {
            "properties": {
                "numRedundantAps": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numRedundantAps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getApStatsDeviceApStatUsbStat:getApStatsDeviceApStatUsbStat": {
            "properties": {
                "channel": {
                    "type": "integer"
                },
                "connected": {
                    "type": "boolean"
                },
                "lastActivity": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "up": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "channel",
                "connected",
                "lastActivity",
                "type",
                "up"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStat:getGatewayStatsDeviceGatewayStat": {
            "properties": {
                "apRedundancy": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatApRedundancy:getGatewayStatsDeviceGatewayStatApRedundancy"
                },
                "arpTableStats": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatArpTableStats:getGatewayStatsDeviceGatewayStatArpTableStats"
                },
                "certExpiry": {
                    "type": "integer"
                },
                "clusterConfig": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfig:getGatewayStatsDeviceGatewayStatClusterConfig"
                },
                "clusterStat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterStat:getGatewayStatsDeviceGatewayStatClusterStat"
                },
                "conductorName": {
                    "type": "string"
                },
                "configStatus": {
                    "type": "string"
                },
                "cpu2Stat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatCpu2Stat:getGatewayStatsDeviceGatewayStatCpu2Stat"
                },
                "cpuStat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatCpuStat:getGatewayStatsDeviceGatewayStatCpuStat"
                },
                "createdTime": {
                    "type": "integer"
                },
                "deviceprofileId": {
                    "type": "string"
                },
                "dhcpd2Stat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatDhcpd2Stat:getGatewayStatsDeviceGatewayStatDhcpd2Stat"
                    },
                    "description": "Property key is the network name\n"
                },
                "dhcpdStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatDhcpdStat:getGatewayStatsDeviceGatewayStatDhcpdStat"
                    },
                    "description": "Property key is the network name\n"
                },
                "extIp": {
                    "type": "string",
                    "description": "IP address\n"
                },
                "fwupdate": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatFwupdate:getGatewayStatsDeviceGatewayStatFwupdate"
                },
                "hasPcap": {
                    "type": "boolean"
                },
                "hostname": {
                    "type": "string",
                    "description": "hostname reported by the device\n"
                },
                "id": {
                    "type": "string",
                    "description": "serial\n"
                },
                "if2Stat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIf2Stat:getGatewayStatsDeviceGatewayStatIf2Stat"
                    },
                    "description": "Property key is the interface name\n"
                },
                "ifStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIfStat:getGatewayStatsDeviceGatewayStatIfStat"
                    },
                    "description": "Property key is the interface name\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP address\n"
                },
                "ip2Stat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIp2Stat:getGatewayStatsDeviceGatewayStatIp2Stat"
                },
                "ipStat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIpStat:getGatewayStatsDeviceGatewayStatIpStat"
                },
                "isHa": {
                    "type": "boolean"
                },
                "lastSeen": {
                    "type": "number",
                    "description": "last seen timestamp\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device mac\n"
                },
                "mapId": {
                    "type": "string",
                    "description": "serial\n"
                },
                "memory2Stat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatMemory2Stat:getGatewayStatsDeviceGatewayStatMemory2Stat",
                    "description": "memory usage stat (for virtual chassis, memory usage of master RE)\n"
                },
                "memoryStat": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatMemoryStat:getGatewayStatsDeviceGatewayStatMemoryStat",
                    "description": "memory usage stat (for virtual chassis, memory usage of master RE)\n"
                },
                "model": {
                    "type": "string",
                    "description": "device model\n"
                },
                "modifiedTime": {
                    "type": "integer"
                },
                "module2Stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2Stat:getGatewayStatsDeviceGatewayStatModule2Stat"
                    }
                },
                "moduleStats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStat:getGatewayStatsDeviceGatewayStatModuleStat"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "device name if configured\n"
                },
                "nodeName": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "serial\n"
                },
                "routeSummaryStats": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatRouteSummaryStats:getGatewayStatsDeviceGatewayStatRouteSummaryStats"
                },
                "routerName": {
                    "type": "string",
                    "description": "device name if configured\n"
                },
                "serial": {
                    "type": "string",
                    "description": "serial\n"
                },
                "service2Stat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatService2Stat:getGatewayStatsDeviceGatewayStatService2Stat"
                    }
                },
                "serviceStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatServiceStat:getGatewayStatsDeviceGatewayStatServiceStat"
                    }
                },
                "serviceStatus": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatServiceStatus:getGatewayStatsDeviceGatewayStatServiceStatus"
                },
                "siteId": {
                    "type": "string",
                    "description": "serial\n"
                },
                "spu2Stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatSpu2Stat:getGatewayStatsDeviceGatewayStatSpu2Stat"
                    }
                },
                "spuStats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatSpuStat:getGatewayStatsDeviceGatewayStatSpuStat"
                    }
                },
                "status": {
                    "type": "string"
                },
                "uptime": {
                    "type": "number"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apRedundancy",
                "arpTableStats",
                "certExpiry",
                "clusterConfig",
                "clusterStat",
                "conductorName",
                "configStatus",
                "cpu2Stat",
                "cpuStat",
                "createdTime",
                "deviceprofileId",
                "dhcpd2Stat",
                "dhcpdStat",
                "extIp",
                "fwupdate",
                "hasPcap",
                "hostname",
                "id",
                "if2Stat",
                "ifStat",
                "ip",
                "ip2Stat",
                "ipStat",
                "isHa",
                "lastSeen",
                "mac",
                "mapId",
                "memory2Stat",
                "memoryStat",
                "model",
                "modifiedTime",
                "module2Stats",
                "moduleStats",
                "name",
                "nodeName",
                "orgId",
                "routeSummaryStats",
                "routerName",
                "serial",
                "service2Stat",
                "serviceStat",
                "serviceStatus",
                "siteId",
                "spu2Stats",
                "spuStats",
                "status",
                "uptime",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatApRedundancy:getGatewayStatsDeviceGatewayStatApRedundancy": {
            "properties": {
                "modules": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatApRedundancyModules:getGatewayStatsDeviceGatewayStatApRedundancyModules"
                    },
                    "description": "Property key is the node id\n"
                },
                "numAps": {
                    "type": "integer"
                },
                "numApsWithSwitchRedundancy": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "modules",
                "numAps",
                "numApsWithSwitchRedundancy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatApRedundancyModules:getGatewayStatsDeviceGatewayStatApRedundancyModules": {
            "properties": {
                "numAps": {
                    "type": "integer"
                },
                "numApsWithSwitchRedundancy": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numAps",
                "numApsWithSwitchRedundancy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatArpTableStats:getGatewayStatsDeviceGatewayStatArpTableStats": {
            "properties": {
                "arpTableCount": {
                    "type": "integer"
                },
                "maxEntriesSupported": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "arpTableCount",
                "maxEntriesSupported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfig:getGatewayStatsDeviceGatewayStatClusterConfig": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "controlLinkInfo": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo:getGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo"
                },
                "ethernetConnections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection:getGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection"
                    }
                },
                "fabricLinkInfo": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo:getGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo"
                },
                "lastStatusChangeReason": {
                    "type": "string"
                },
                "operational": {
                    "type": "string"
                },
                "primaryNodeHealth": {
                    "type": "string"
                },
                "redundancyGroupInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation:getGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation"
                    }
                },
                "secondaryNodeHealth": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "configuration",
                "controlLinkInfo",
                "ethernetConnections",
                "fabricLinkInfo",
                "lastStatusChangeReason",
                "operational",
                "primaryNodeHealth",
                "redundancyGroupInformations",
                "secondaryNodeHealth",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo:getGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection:getGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo:getGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo": {
            "properties": {
                "dataPlaneNotifiedStatus": {
                    "type": "string"
                },
                "interfaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalStatus": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataPlaneNotifiedStatus",
                "interfaces",
                "internalStatus",
                "state",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation:getGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "monitoringFailure": {
                    "type": "string"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "monitoringFailure",
                "threshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatClusterStat:getGatewayStatsDeviceGatewayStatClusterStat": {
            "properties": {
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatCpu2Stat:getGatewayStatsDeviceGatewayStatCpu2Stat": {
            "properties": {
                "idle": {
                    "type": "number",
                    "description": "Percentage of CPU time that is idle\n"
                },
                "interrupt": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by interrupts\n"
                },
                "loadAvgs": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "Load averages for the last 1, 5, and 15 minutes\n"
                },
                "system": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by system processes\n"
                },
                "user": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by user processe\n"
                }
            },
            "type": "object",
            "required": [
                "idle",
                "interrupt",
                "loadAvgs",
                "system",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatCpuStat:getGatewayStatsDeviceGatewayStatCpuStat": {
            "properties": {
                "idle": {
                    "type": "number",
                    "description": "Percentage of CPU time that is idle\n"
                },
                "interrupt": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by interrupts\n"
                },
                "loadAvgs": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "Load averages for the last 1, 5, and 15 minutes\n"
                },
                "system": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by system processes\n"
                },
                "user": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by user processe\n"
                }
            },
            "type": "object",
            "required": [
                "idle",
                "interrupt",
                "loadAvgs",
                "system",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatDhcpd2Stat:getGatewayStatsDeviceGatewayStatDhcpd2Stat": {
            "properties": {
                "numIps": {
                    "type": "integer"
                },
                "numLeased": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numIps",
                "numLeased"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatDhcpdStat:getGatewayStatsDeviceGatewayStatDhcpdStat": {
            "properties": {
                "numIps": {
                    "type": "integer"
                },
                "numLeased": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numIps",
                "numLeased"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatFwupdate:getGatewayStatsDeviceGatewayStatFwupdate": {
            "properties": {
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "statusId": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "number"
                },
                "willRetry": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "progress",
                "status",
                "statusId",
                "timestamp",
                "willRetry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIf2Stat:getGatewayStatsDeviceGatewayStatIf2Stat": {
            "properties": {
                "addressMode": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "natAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networkName": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                },
                "portUsage": {
                    "type": "string"
                },
                "redundancyState": {
                    "type": "string"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "servpInfo": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIf2StatServpInfo:getGatewayStatsDeviceGatewayStatIf2StatServpInfo"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "up": {
                    "type": "boolean"
                },
                "vlan": {
                    "type": "integer"
                },
                "wanName": {
                    "type": "string"
                },
                "wanType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "addressMode",
                "ips",
                "natAddresses",
                "networkName",
                "portId",
                "portUsage",
                "redundancyState",
                "rxBytes",
                "rxPkts",
                "servpInfo",
                "txBytes",
                "txPkts",
                "up",
                "vlan",
                "wanName",
                "wanType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIf2StatServpInfo:getGatewayStatsDeviceGatewayStatIf2StatServpInfo": {
            "properties": {
                "asn": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "org": {
                    "type": "string"
                },
                "regionCode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asn",
                "city",
                "countryCode",
                "latitude",
                "longitude",
                "org",
                "regionCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIfStat:getGatewayStatsDeviceGatewayStatIfStat": {
            "properties": {
                "addressMode": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "natAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networkName": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                },
                "portUsage": {
                    "type": "string"
                },
                "redundancyState": {
                    "type": "string"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "servpInfo": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatIfStatServpInfo:getGatewayStatsDeviceGatewayStatIfStatServpInfo"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "up": {
                    "type": "boolean"
                },
                "vlan": {
                    "type": "integer"
                },
                "wanName": {
                    "type": "string"
                },
                "wanType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "addressMode",
                "ips",
                "natAddresses",
                "networkName",
                "portId",
                "portUsage",
                "redundancyState",
                "rxBytes",
                "rxPkts",
                "servpInfo",
                "txBytes",
                "txPkts",
                "up",
                "vlan",
                "wanName",
                "wanType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIfStatServpInfo:getGatewayStatsDeviceGatewayStatIfStatServpInfo": {
            "properties": {
                "asn": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "org": {
                    "type": "string"
                },
                "regionCode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asn",
                "city",
                "countryCode",
                "latitude",
                "longitude",
                "org",
                "regionCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIp2Stat:getGatewayStatsDeviceGatewayStatIp2Stat": {
            "properties": {
                "dhcpServer": {
                    "type": "string"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ip6": {
                    "type": "string"
                },
                "ips": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "netmask": {
                    "type": "string"
                },
                "netmask6": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dhcpServer",
                "dns",
                "dnsSuffixes",
                "gateway",
                "gateway6",
                "ip",
                "ip6",
                "ips",
                "netmask",
                "netmask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatIpStat:getGatewayStatsDeviceGatewayStatIpStat": {
            "properties": {
                "dhcpServer": {
                    "type": "string"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ip6": {
                    "type": "string"
                },
                "ips": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "netmask": {
                    "type": "string"
                },
                "netmask6": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dhcpServer",
                "dns",
                "dnsSuffixes",
                "gateway",
                "gateway6",
                "ip",
                "ip6",
                "ips",
                "netmask",
                "netmask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatMemory2Stat:getGatewayStatsDeviceGatewayStatMemory2Stat": {
            "properties": {
                "usage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatMemoryStat:getGatewayStatsDeviceGatewayStatMemoryStat": {
            "properties": {
                "usage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2Stat:getGatewayStatsDeviceGatewayStatModule2Stat": {
            "properties": {
                "backupVersion": {
                    "type": "string"
                },
                "biosVersion": {
                    "type": "string"
                },
                "cpldVersion": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatError:getGatewayStatsDeviceGatewayStatModule2StatError"
                    },
                    "description": "used to report all error states the device node is running into.\nAn error should always have `type` and `since` fields, and could have some other fields specific to that type.\n"
                },
                "fans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatFan:getGatewayStatsDeviceGatewayStatModule2StatFan"
                    }
                },
                "fpgaVersion": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "opticsCpldVersion": {
                    "type": "string"
                },
                "pendingVersion": {
                    "type": "string"
                },
                "pics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPic:getGatewayStatsDeviceGatewayStatModule2StatPic"
                    }
                },
                "poe": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPoe:getGatewayStatsDeviceGatewayStatModule2StatPoe"
                },
                "poeVersion": {
                    "type": "string"
                },
                "powerCpldVersion": {
                    "type": "string"
                },
                "psuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPsus:getGatewayStatsDeviceGatewayStatModule2StatPsus"
                    }
                },
                "reFpgaVersion": {
                    "type": "string"
                },
                "recoveryVersion": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "temperatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatTemperature:getGatewayStatsDeviceGatewayStatModule2StatTemperature"
                    }
                },
                "tmcFpgaVersion": {
                    "type": "string"
                },
                "ubootVersion": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "vcLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatVcLink:getGatewayStatsDeviceGatewayStatModule2StatVcLink"
                    }
                },
                "vcMode": {
                    "type": "string"
                },
                "vcRole": {
                    "type": "string",
                    "description": "master / backup / linecard\n"
                },
                "vcState": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backupVersion",
                "biosVersion",
                "cpldVersion",
                "errors",
                "fans",
                "fpgaVersion",
                "lastSeen",
                "model",
                "opticsCpldVersion",
                "pendingVersion",
                "pics",
                "poe",
                "poeVersion",
                "powerCpldVersion",
                "psuses",
                "reFpgaVersion",
                "recoveryVersion",
                "serial",
                "status",
                "temperatures",
                "tmcFpgaVersion",
                "ubootVersion",
                "uptime",
                "vcLinks",
                "vcMode",
                "vcRole",
                "vcState",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatError:getGatewayStatsDeviceGatewayStatModule2StatError": {
            "properties": {
                "feature": {
                    "type": "string"
                },
                "minimumVersion": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "since": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "feature",
                "minimumVersion",
                "reason",
                "since",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatFan:getGatewayStatsDeviceGatewayStatModule2StatFan": {
            "properties": {
                "airflow": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "airflow",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPic:getGatewayStatsDeviceGatewayStatModule2StatPic": {
            "properties": {
                "index": {
                    "type": "integer"
                },
                "modelNumber": {
                    "type": "string"
                },
                "portGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPicPortGroup:getGatewayStatsDeviceGatewayStatModule2StatPicPortGroup"
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "modelNumber",
                "portGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPicPortGroup:getGatewayStatsDeviceGatewayStatModule2StatPicPortGroup": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "count",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPoe:getGatewayStatsDeviceGatewayStatModule2StatPoe": {
            "properties": {
                "maxPower": {
                    "type": "number"
                },
                "powerDraw": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "maxPower",
                "powerDraw"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatPsus:getGatewayStatsDeviceGatewayStatModule2StatPsus": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatTemperature:getGatewayStatsDeviceGatewayStatModule2StatTemperature": {
            "properties": {
                "celsius": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "celsius",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModule2StatVcLink:getGatewayStatsDeviceGatewayStatModule2StatVcLink": {
            "properties": {
                "neighborModuleIdx": {
                    "type": "integer"
                },
                "neighborPortId": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "neighborModuleIdx",
                "neighborPortId",
                "portId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStat:getGatewayStatsDeviceGatewayStatModuleStat": {
            "properties": {
                "backupVersion": {
                    "type": "string"
                },
                "biosVersion": {
                    "type": "string"
                },
                "cpldVersion": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatError:getGatewayStatsDeviceGatewayStatModuleStatError"
                    },
                    "description": "used to report all error states the device node is running into.\nAn error should always have `type` and `since` fields, and could have some other fields specific to that type.\n"
                },
                "fans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatFan:getGatewayStatsDeviceGatewayStatModuleStatFan"
                    }
                },
                "fpgaVersion": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "opticsCpldVersion": {
                    "type": "string"
                },
                "pendingVersion": {
                    "type": "string"
                },
                "pics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPic:getGatewayStatsDeviceGatewayStatModuleStatPic"
                    }
                },
                "poe": {
                    "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPoe:getGatewayStatsDeviceGatewayStatModuleStatPoe"
                },
                "poeVersion": {
                    "type": "string"
                },
                "powerCpldVersion": {
                    "type": "string"
                },
                "psuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPsus:getGatewayStatsDeviceGatewayStatModuleStatPsus"
                    }
                },
                "reFpgaVersion": {
                    "type": "string"
                },
                "recoveryVersion": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "temperatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatTemperature:getGatewayStatsDeviceGatewayStatModuleStatTemperature"
                    }
                },
                "tmcFpgaVersion": {
                    "type": "string"
                },
                "ubootVersion": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "vcLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatVcLink:getGatewayStatsDeviceGatewayStatModuleStatVcLink"
                    }
                },
                "vcMode": {
                    "type": "string"
                },
                "vcRole": {
                    "type": "string",
                    "description": "master / backup / linecard\n"
                },
                "vcState": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backupVersion",
                "biosVersion",
                "cpldVersion",
                "errors",
                "fans",
                "fpgaVersion",
                "lastSeen",
                "model",
                "opticsCpldVersion",
                "pendingVersion",
                "pics",
                "poe",
                "poeVersion",
                "powerCpldVersion",
                "psuses",
                "reFpgaVersion",
                "recoveryVersion",
                "serial",
                "status",
                "temperatures",
                "tmcFpgaVersion",
                "ubootVersion",
                "uptime",
                "vcLinks",
                "vcMode",
                "vcRole",
                "vcState",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatError:getGatewayStatsDeviceGatewayStatModuleStatError": {
            "properties": {
                "feature": {
                    "type": "string"
                },
                "minimumVersion": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "since": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "feature",
                "minimumVersion",
                "reason",
                "since",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatFan:getGatewayStatsDeviceGatewayStatModuleStatFan": {
            "properties": {
                "airflow": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "airflow",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPic:getGatewayStatsDeviceGatewayStatModuleStatPic": {
            "properties": {
                "index": {
                    "type": "integer"
                },
                "modelNumber": {
                    "type": "string"
                },
                "portGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPicPortGroup:getGatewayStatsDeviceGatewayStatModuleStatPicPortGroup"
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "modelNumber",
                "portGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPicPortGroup:getGatewayStatsDeviceGatewayStatModuleStatPicPortGroup": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "count",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPoe:getGatewayStatsDeviceGatewayStatModuleStatPoe": {
            "properties": {
                "maxPower": {
                    "type": "number"
                },
                "powerDraw": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "maxPower",
                "powerDraw"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatPsus:getGatewayStatsDeviceGatewayStatModuleStatPsus": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatTemperature:getGatewayStatsDeviceGatewayStatModuleStatTemperature": {
            "properties": {
                "celsius": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "celsius",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatModuleStatVcLink:getGatewayStatsDeviceGatewayStatModuleStatVcLink": {
            "properties": {
                "neighborModuleIdx": {
                    "type": "integer"
                },
                "neighborPortId": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "neighborModuleIdx",
                "neighborPortId",
                "portId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatRouteSummaryStats:getGatewayStatsDeviceGatewayStatRouteSummaryStats": {
            "properties": {
                "fibRoutes": {
                    "type": "integer"
                },
                "maxUnicastRoutesSupported": {
                    "type": "integer"
                },
                "ribRoutes": {
                    "type": "integer"
                },
                "totalRoutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "fibRoutes",
                "maxUnicastRoutesSupported",
                "ribRoutes",
                "totalRoutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatService2Stat:getGatewayStatsDeviceGatewayStatService2Stat": {
            "properties": {
                "ashVersion": {
                    "type": "string"
                },
                "ciaVersion": {
                    "type": "string"
                },
                "emberVersion": {
                    "type": "string"
                },
                "ipsecClientVersion": {
                    "type": "string"
                },
                "mistAgentVersion": {
                    "type": "string"
                },
                "packageVersion": {
                    "type": "string"
                },
                "testingToolsVersion": {
                    "type": "string"
                },
                "wheeljackVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ashVersion",
                "ciaVersion",
                "emberVersion",
                "ipsecClientVersion",
                "mistAgentVersion",
                "packageVersion",
                "testingToolsVersion",
                "wheeljackVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatServiceStat:getGatewayStatsDeviceGatewayStatServiceStat": {
            "properties": {
                "ashVersion": {
                    "type": "string"
                },
                "ciaVersion": {
                    "type": "string"
                },
                "emberVersion": {
                    "type": "string"
                },
                "ipsecClientVersion": {
                    "type": "string"
                },
                "mistAgentVersion": {
                    "type": "string"
                },
                "packageVersion": {
                    "type": "string"
                },
                "testingToolsVersion": {
                    "type": "string"
                },
                "wheeljackVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ashVersion",
                "ciaVersion",
                "emberVersion",
                "ipsecClientVersion",
                "mistAgentVersion",
                "packageVersion",
                "testingToolsVersion",
                "wheeljackVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatServiceStatus:getGatewayStatsDeviceGatewayStatServiceStatus": {
            "properties": {
                "appidInstallResult": {
                    "type": "string"
                },
                "appidInstallTimestamp": {
                    "type": "string"
                },
                "appidStatus": {
                    "type": "string"
                },
                "appidVersion": {
                    "type": "integer"
                },
                "ewfStatus": {
                    "type": "string"
                },
                "idpInstallResult": {
                    "type": "string"
                },
                "idpInstallTimestamp": {
                    "type": "string"
                },
                "idpPolicy": {
                    "type": "string"
                },
                "idpStatus": {
                    "type": "string"
                },
                "idpUpdateTimestamp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appidInstallResult",
                "appidInstallTimestamp",
                "appidStatus",
                "appidVersion",
                "ewfStatus",
                "idpInstallResult",
                "idpInstallTimestamp",
                "idpPolicy",
                "idpStatus",
                "idpUpdateTimestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatSpu2Stat:getGatewayStatsDeviceGatewayStatSpu2Stat": {
            "properties": {
                "spuCpu": {
                    "type": "integer"
                },
                "spuCurrentSession": {
                    "type": "integer"
                },
                "spuMaxSession": {
                    "type": "integer"
                },
                "spuMemory": {
                    "type": "integer"
                },
                "spuPendingSession": {
                    "type": "integer"
                },
                "spuValidSession": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "spuCpu",
                "spuCurrentSession",
                "spuMaxSession",
                "spuMemory",
                "spuPendingSession",
                "spuValidSession"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getGatewayStatsDeviceGatewayStatSpuStat:getGatewayStatsDeviceGatewayStatSpuStat": {
            "properties": {
                "spuCpu": {
                    "type": "integer"
                },
                "spuCurrentSession": {
                    "type": "integer"
                },
                "spuMaxSession": {
                    "type": "integer"
                },
                "spuMemory": {
                    "type": "integer"
                },
                "spuPendingSession": {
                    "type": "integer"
                },
                "spuValidSession": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "spuCpu",
                "spuCurrentSession",
                "spuMaxSession",
                "spuMemory",
                "spuPendingSession",
                "spuValidSession"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStat:getSwitchStatsDeviceSwitchStat": {
            "properties": {
                "apRedundancy": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatApRedundancy:getSwitchStatsDeviceSwitchStatApRedundancy"
                },
                "arpTableStats": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatArpTableStats:getSwitchStatsDeviceSwitchStatArpTableStats"
                },
                "certExpiry": {
                    "type": "integer"
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatClient:getSwitchStatsDeviceSwitchStatClient"
                    }
                },
                "clientsStats": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatClientsStats:getSwitchStatsDeviceSwitchStatClientsStats"
                },
                "configStatus": {
                    "type": "string"
                },
                "cpuStat": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatCpuStat:getSwitchStatsDeviceSwitchStatCpuStat"
                },
                "createdTime": {
                    "type": "integer"
                },
                "deviceprofileId": {
                    "type": "string"
                },
                "dhcpdStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatDhcpdStat:getSwitchStatsDeviceSwitchStatDhcpdStat"
                    },
                    "description": "Property key is the network name\n"
                },
                "evpntopoId": {
                    "type": "string"
                },
                "fwVersionsOutofsync": {
                    "type": "boolean"
                },
                "fwupdate": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatFwupdate:getSwitchStatsDeviceSwitchStatFwupdate"
                },
                "hasPcap": {
                    "type": "boolean",
                    "description": "whether the switch supports packet capture\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "hostname reported by the device\n"
                },
                "hwRev": {
                    "type": "string",
                    "description": "device hardware revision number\n"
                },
                "id": {
                    "type": "string"
                },
                "ifStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatIfStat:getSwitchStatsDeviceSwitchStatIfStat"
                    },
                    "description": "Property key is the interface name\n"
                },
                "ip": {
                    "type": "string"
                },
                "ipStat": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatIpStat:getSwitchStatsDeviceSwitchStatIpStat"
                },
                "lastSeen": {
                    "type": "number"
                },
                "lastTrouble": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatLastTrouble:getSwitchStatsDeviceSwitchStatLastTrouble",
                    "description": "last trouble code of switch\n"
                },
                "mac": {
                    "type": "string"
                },
                "macTableStats": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatMacTableStats:getSwitchStatsDeviceSwitchStatMacTableStats"
                },
                "mapId": {
                    "type": "string"
                },
                "memoryStat": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatMemoryStat:getSwitchStatsDeviceSwitchStatMemoryStat",
                    "description": "memory usage stat (for virtual chassis, memory usage of master RE)\n"
                },
                "model": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "integer"
                },
                "moduleStats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStat:getSwitchStatsDeviceSwitchStatModuleStat"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "device name if configured\n"
                },
                "orgId": {
                    "type": "string"
                },
                "routeSummaryStats": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatRouteSummaryStats:getSwitchStatsDeviceSwitchStatRouteSummaryStats"
                },
                "serial": {
                    "type": "string"
                },
                "serviceStat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatServiceStat:getSwitchStatsDeviceSwitchStatServiceStat"
                    }
                },
                "siteId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "uptime": {
                    "type": "number"
                },
                "vcMac": {
                    "type": "string"
                },
                "vcSetupInfo": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatVcSetupInfo:getSwitchStatsDeviceSwitchStatVcSetupInfo"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apRedundancy",
                "arpTableStats",
                "certExpiry",
                "clients",
                "clientsStats",
                "configStatus",
                "cpuStat",
                "createdTime",
                "deviceprofileId",
                "dhcpdStat",
                "evpntopoId",
                "fwVersionsOutofsync",
                "fwupdate",
                "hasPcap",
                "hostname",
                "hwRev",
                "id",
                "ifStat",
                "ip",
                "ipStat",
                "lastSeen",
                "lastTrouble",
                "mac",
                "macTableStats",
                "mapId",
                "memoryStat",
                "model",
                "modifiedTime",
                "moduleStats",
                "name",
                "orgId",
                "routeSummaryStats",
                "serial",
                "serviceStat",
                "siteId",
                "status",
                "uptime",
                "vcMac",
                "vcSetupInfo",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatApRedundancy:getSwitchStatsDeviceSwitchStatApRedundancy": {
            "properties": {
                "modules": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatApRedundancyModules:getSwitchStatsDeviceSwitchStatApRedundancyModules"
                    },
                    "description": "for a VC / stacked switches.\n"
                },
                "numAps": {
                    "type": "integer"
                },
                "numApsWithSwitchRedundancy": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "modules",
                "numAps",
                "numApsWithSwitchRedundancy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatApRedundancyModules:getSwitchStatsDeviceSwitchStatApRedundancyModules": {
            "properties": {
                "numAps": {
                    "type": "integer"
                },
                "numApsWithSwitchRedundancy": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numAps",
                "numApsWithSwitchRedundancy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatArpTableStats:getSwitchStatsDeviceSwitchStatArpTableStats": {
            "properties": {
                "arpTableCount": {
                    "type": "integer"
                },
                "maxEntriesSupported": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "arpTableCount",
                "maxEntriesSupported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatClient:getSwitchStatsDeviceSwitchStatClient": {
            "properties": {
                "deviceMac": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "mac": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deviceMac",
                "hostname",
                "mac",
                "portId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatClientsStats:getSwitchStatsDeviceSwitchStatClientsStats": {
            "properties": {
                "total": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatClientsStatsTotal:getSwitchStatsDeviceSwitchStatClientsStatsTotal"
                }
            },
            "type": "object",
            "required": [
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatClientsStatsTotal:getSwitchStatsDeviceSwitchStatClientsStatsTotal": {
            "properties": {
                "numAps": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "numWiredClients": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numAps",
                "numWiredClients"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatCpuStat:getSwitchStatsDeviceSwitchStatCpuStat": {
            "properties": {
                "idle": {
                    "type": "number",
                    "description": "Percentage of CPU time that is idle\n"
                },
                "interrupt": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by interrupts\n"
                },
                "loadAvgs": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "Load averages for the last 1, 5, and 15 minutes\n"
                },
                "system": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by system processes\n"
                },
                "user": {
                    "type": "number",
                    "description": "Percentage of CPU time being used by user processe\n"
                }
            },
            "type": "object",
            "required": [
                "idle",
                "interrupt",
                "loadAvgs",
                "system",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatDhcpdStat:getSwitchStatsDeviceSwitchStatDhcpdStat": {
            "properties": {
                "numIps": {
                    "type": "integer"
                },
                "numLeased": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numIps",
                "numLeased"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatFwupdate:getSwitchStatsDeviceSwitchStatFwupdate": {
            "properties": {
                "progress": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "statusId": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "number"
                },
                "willRetry": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "progress",
                "status",
                "statusId",
                "timestamp",
                "willRetry"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatIfStat:getSwitchStatsDeviceSwitchStatIfStat": {
            "properties": {
                "addressMode": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "natAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networkName": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                },
                "portUsage": {
                    "type": "string"
                },
                "redundancyState": {
                    "type": "string"
                },
                "rxBytes": {
                    "type": "integer"
                },
                "rxPkts": {
                    "type": "integer"
                },
                "servpInfo": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatIfStatServpInfo:getSwitchStatsDeviceSwitchStatIfStatServpInfo"
                },
                "txBytes": {
                    "type": "integer"
                },
                "txPkts": {
                    "type": "integer"
                },
                "up": {
                    "type": "boolean"
                },
                "vlan": {
                    "type": "integer"
                },
                "wanName": {
                    "type": "string"
                },
                "wanType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "addressMode",
                "ips",
                "natAddresses",
                "networkName",
                "portId",
                "portUsage",
                "redundancyState",
                "rxBytes",
                "rxPkts",
                "servpInfo",
                "txBytes",
                "txPkts",
                "up",
                "vlan",
                "wanName",
                "wanType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatIfStatServpInfo:getSwitchStatsDeviceSwitchStatIfStatServpInfo": {
            "properties": {
                "asn": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "org": {
                    "type": "string"
                },
                "regionCode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "asn",
                "city",
                "countryCode",
                "latitude",
                "longitude",
                "org",
                "regionCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatIpStat:getSwitchStatsDeviceSwitchStatIpStat": {
            "properties": {
                "dhcpServer": {
                    "type": "string"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ip6": {
                    "type": "string"
                },
                "ips": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "netmask": {
                    "type": "string"
                },
                "netmask6": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dhcpServer",
                "dns",
                "dnsSuffixes",
                "gateway",
                "gateway6",
                "ip",
                "ip6",
                "ips",
                "netmask",
                "netmask6"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatLastTrouble:getSwitchStatsDeviceSwitchStatLastTrouble": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code definitions list at /api/v1/consts/ap*led*status\n"
                },
                "timestamp": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "code",
                "timestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatMacTableStats:getSwitchStatsDeviceSwitchStatMacTableStats": {
            "properties": {
                "macTableCount": {
                    "type": "integer"
                },
                "maxMacEntriesSupported": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "macTableCount",
                "maxMacEntriesSupported"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatMemoryStat:getSwitchStatsDeviceSwitchStatMemoryStat": {
            "properties": {
                "usage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStat:getSwitchStatsDeviceSwitchStatModuleStat": {
            "properties": {
                "backupVersion": {
                    "type": "string"
                },
                "biosVersion": {
                    "type": "string"
                },
                "cpldVersion": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatError:getSwitchStatsDeviceSwitchStatModuleStatError"
                    },
                    "description": "used to report all error states the device node is running into.\nAn error should always have `type` and `since` fields, and could have some other fields specific to that type.\n"
                },
                "fans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatFan:getSwitchStatsDeviceSwitchStatModuleStatFan"
                    }
                },
                "fpcIdx": {
                    "type": "integer"
                },
                "fpgaVersion": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "opticsCpldVersion": {
                    "type": "string"
                },
                "pendingVersion": {
                    "type": "string"
                },
                "pics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPic:getSwitchStatsDeviceSwitchStatModuleStatPic"
                    }
                },
                "poe": {
                    "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPoe:getSwitchStatsDeviceSwitchStatModuleStatPoe"
                },
                "poeVersion": {
                    "type": "string"
                },
                "powerCpldVersion": {
                    "type": "string"
                },
                "psuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPsus:getSwitchStatsDeviceSwitchStatModuleStatPsus"
                    }
                },
                "reFpgaVersion": {
                    "type": "string"
                },
                "recoveryVersion": {
                    "type": "string"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "temperatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatTemperature:getSwitchStatsDeviceSwitchStatModuleStatTemperature"
                    }
                },
                "tmcFpgaVersion": {
                    "type": "string"
                },
                "ubootVersion": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "vcLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatVcLink:getSwitchStatsDeviceSwitchStatModuleStatVcLink"
                    }
                },
                "vcMode": {
                    "type": "string"
                },
                "vcRole": {
                    "type": "string",
                    "description": "master / backup / linecard\n"
                },
                "vcState": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backupVersion",
                "biosVersion",
                "cpldVersion",
                "errors",
                "fans",
                "fpcIdx",
                "fpgaVersion",
                "lastSeen",
                "model",
                "opticsCpldVersion",
                "pendingVersion",
                "pics",
                "poe",
                "poeVersion",
                "powerCpldVersion",
                "psuses",
                "reFpgaVersion",
                "recoveryVersion",
                "serial",
                "status",
                "temperatures",
                "tmcFpgaVersion",
                "ubootVersion",
                "uptime",
                "vcLinks",
                "vcMode",
                "vcRole",
                "vcState",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatError:getSwitchStatsDeviceSwitchStatModuleStatError": {
            "properties": {
                "feature": {
                    "type": "string"
                },
                "minimumVersion": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "since": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "feature",
                "minimumVersion",
                "reason",
                "since",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatFan:getSwitchStatsDeviceSwitchStatModuleStatFan": {
            "properties": {
                "airflow": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "airflow",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPic:getSwitchStatsDeviceSwitchStatModuleStatPic": {
            "properties": {
                "index": {
                    "type": "integer"
                },
                "modelNumber": {
                    "type": "string"
                },
                "portGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPicPortGroup:getSwitchStatsDeviceSwitchStatModuleStatPicPortGroup"
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "modelNumber",
                "portGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPicPortGroup:getSwitchStatsDeviceSwitchStatModuleStatPicPortGroup": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "count",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPoe:getSwitchStatsDeviceSwitchStatModuleStatPoe": {
            "properties": {
                "maxPower": {
                    "type": "number"
                },
                "powerDraw": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "maxPower",
                "powerDraw"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatPsus:getSwitchStatsDeviceSwitchStatModuleStatPsus": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatTemperature:getSwitchStatsDeviceSwitchStatModuleStatTemperature": {
            "properties": {
                "celsius": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "celsius",
                "name",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatModuleStatVcLink:getSwitchStatsDeviceSwitchStatModuleStatVcLink": {
            "properties": {
                "neighborModuleIdx": {
                    "type": "integer"
                },
                "neighborPortId": {
                    "type": "string"
                },
                "portId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "neighborModuleIdx",
                "neighborPortId",
                "portId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatRouteSummaryStats:getSwitchStatsDeviceSwitchStatRouteSummaryStats": {
            "properties": {
                "fibRoutes": {
                    "type": "integer"
                },
                "maxUnicastRoutesSupported": {
                    "type": "integer"
                },
                "ribRoutes": {
                    "type": "integer"
                },
                "totalRoutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "fibRoutes",
                "maxUnicastRoutesSupported",
                "ribRoutes",
                "totalRoutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatServiceStat:getSwitchStatsDeviceSwitchStatServiceStat": {
            "properties": {
                "ashVersion": {
                    "type": "string"
                },
                "ciaVersion": {
                    "type": "string"
                },
                "emberVersion": {
                    "type": "string"
                },
                "ipsecClientVersion": {
                    "type": "string"
                },
                "mistAgentVersion": {
                    "type": "string"
                },
                "packageVersion": {
                    "type": "string"
                },
                "testingToolsVersion": {
                    "type": "string"
                },
                "wheeljackVersion": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ashVersion",
                "ciaVersion",
                "emberVersion",
                "ipsecClientVersion",
                "mistAgentVersion",
                "packageVersion",
                "testingToolsVersion",
                "wheeljackVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:device/getSwitchStatsDeviceSwitchStatVcSetupInfo:getSwitchStatsDeviceSwitchStatVcSetupInfo": {
            "properties": {
                "configType": {
                    "type": "string"
                },
                "errMissingDevIdFpc": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "configType",
                "errMissingDevIdFpc"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstAlarmsConstAlarm:getConstAlarmsConstAlarm": {
            "properties": {
                "display": {
                    "type": "string",
                    "description": "Description of the alarm type\n"
                },
                "group": {
                    "type": "string",
                    "description": "Group to which the alarm belongs\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key name of the alarm type\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Severity of the alarm\n"
                }
            },
            "type": "object",
            "required": [
                "display",
                "group",
                "key",
                "severity"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstAppCategoriesConstAppCategory:getConstAppCategoriesConstAppCategory": {
            "properties": {
                "display": {
                    "type": "string",
                    "description": "Description of the app category\n"
                },
                "filters": {
                    "$ref": "#/types/junipermist:index/getConstAppCategoriesConstAppCategoryFilters:getConstAppCategoriesConstAppCategoryFilters"
                },
                "includes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of other App Categories contained by this one\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key name of the app category\n"
                }
            },
            "type": "object",
            "required": [
                "display",
                "filters",
                "includes",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstAppCategoriesConstAppCategoryFilters:getConstAppCategoriesConstAppCategoryFilters": {
            "properties": {
                "srxes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ssrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "srxes",
                "ssrs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstAppSubCategoriesConstAppSubCategory:getConstAppSubCategoriesConstAppSubCategory": {
            "properties": {
                "display": {
                    "type": "string",
                    "description": "Description of the app subcategory\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key name of the app subcategory\n"
                },
                "trafficType": {
                    "type": "string",
                    "description": "Type of traffic (QoS) of the app subcategory\n"
                }
            },
            "type": "object",
            "required": [
                "display",
                "key",
                "trafficType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstApplicationsConstApplication:getConstApplicationsConstApplication": {
            "properties": {
                "appId": {
                    "type": "boolean"
                },
                "appImageUrl": {
                    "type": "string"
                },
                "appProbe": {
                    "type": "boolean"
                },
                "category": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "signatureBased": {
                    "type": "boolean"
                },
                "ssrAppId": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "appId",
                "appImageUrl",
                "appProbe",
                "category",
                "group",
                "key",
                "name",
                "signatureBased",
                "ssrAppId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstCountriesConstCountry:getConstCountriesConstCountry": {
            "properties": {
                "alpha2": {
                    "type": "string",
                    "description": "country code, in two-character\n"
                },
                "certified": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "numeric": {
                    "type": "number",
                    "description": "country code, ISO 3166-1 numeric\n"
                }
            },
            "type": "object",
            "required": [
                "alpha2",
                "certified",
                "name",
                "numeric"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstTrafficTypesConstTrafficType:getConstTrafficTypesConstTrafficType": {
            "properties": {
                "display": {
                    "type": "string"
                },
                "dscp": {
                    "type": "integer"
                },
                "failoverPolicy": {
                    "type": "string"
                },
                "maxJitter": {
                    "type": "integer"
                },
                "maxLatency": {
                    "type": "integer"
                },
                "maxLoss": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "trafficClass": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "display",
                "dscp",
                "failoverPolicy",
                "maxJitter",
                "maxLatency",
                "maxLoss",
                "name",
                "trafficClass"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getConstWebhooksConstWebhook:getConstWebhooksConstWebhook": {
            "properties": {
                "forOrg": {
                    "type": "boolean",
                    "description": "can be used in org webhooks, optional\n"
                },
                "hasDeliveryResults": {
                    "type": "boolean",
                    "description": "supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search\n"
                },
                "internal": {
                    "type": "boolean",
                    "description": "internal topic (not selectable in site/org webhooks)\n"
                },
                "key": {
                    "type": "string",
                    "description": "webhook topic name\n"
                }
            },
            "type": "object",
            "required": [
                "forOrg",
                "hasDeliveryResults",
                "internal",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getSitesSite:getSitesSite": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "full address of the site\n"
                },
                "alarmtemplateId": {
                    "type": "string",
                    "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                },
                "aptemplateId": {
                    "type": "string",
                    "description": "AP Template ID, used by APs\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "country code for the site (for AP config generation), in two-character\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "gatewaytemplateId": {
                    "type": "string",
                    "description": "Gateway Template ID, used by gateways\n"
                },
                "id": {
                    "type": "string"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:index/getSitesSiteLatlng:getSitesSiteLatlng"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "networktemplateId": {
                    "type": "string",
                    "description": "Network Template ID, this takes precedence over Site Settings\n"
                },
                "notes": {
                    "type": "string",
                    "description": "optional, any notes about the site\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rftemplateId": {
                    "type": "string",
                    "description": "RF Template ID, this takes precedence over Site Settings\n"
                },
                "secpolicyId": {
                    "type": "string",
                    "description": "SecPolicy ID\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sitegroups this site belongs to\n"
                },
                "sitetemplateId": {
                    "type": "string",
                    "description": "Site Template ID\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone the site is at\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "alarmtemplateId",
                "aptemplateId",
                "countryCode",
                "createdTime",
                "gatewaytemplateId",
                "id",
                "latlng",
                "modifiedTime",
                "name",
                "networktemplateId",
                "notes",
                "orgId",
                "rftemplateId",
                "secpolicyId",
                "sitegroupIds",
                "sitetemplateId",
                "timezone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:index/getSitesSiteLatlng:getSitesSiteLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/AlarmtemplateDelivery:AlarmtemplateDelivery": {
            "properties": {
                "additionalEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional email string to deliver the alarms via emails\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alarm delivery via emails or not\n"
                },
                "toOrgAdmins": {
                    "type": "boolean",
                    "description": "Whether to deliver the alarms via emails to Org admins or not\n"
                },
                "toSiteAdmins": {
                    "type": "boolean",
                    "description": "Whether to deliver the alarms via emails to Site admins or not\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalEmails",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/AlarmtemplateRules:AlarmtemplateRules": {
            "properties": {
                "delivery": {
                    "$ref": "#/types/junipermist:org/AlarmtemplateRulesDelivery:AlarmtemplateRulesDelivery",
                    "description": "Delivery object to configure the alarm delivery\n"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:org/AlarmtemplateRulesDelivery:AlarmtemplateRulesDelivery": {
            "properties": {
                "additionalEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of additional email string to deliver the alarms via emails\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the alarm delivery via emails or not\n"
                },
                "toOrgAdmins": {
                    "type": "boolean",
                    "description": "Whether to deliver the alarms via emails to Org admins or not\n"
                },
                "toSiteAdmins": {
                    "type": "boolean",
                    "description": "Whether to deliver the alarms via emails to Site admins or not\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalEmails",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/ApitokenPrivilege:ApitokenPrivilege": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "enum: `org`, `site`, `sitegroup`\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Required if `scope`==`site`\n"
                },
                "sitegroupId": {
                    "type": "string",
                    "description": "Required if `scope`==`sitegroup`\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "scope"
            ]
        },
        "junipermist:org/DeviceprofileApAeroscout:DeviceprofileApAeroscout": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable aeroscout config\n"
                },
                "host": {
                    "type": "string",
                    "description": "required if enabled, aeroscout server host\n"
                },
                "locateConnected": {
                    "type": "boolean",
                    "description": "whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "locateConnected"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApBleConfig:DeviceprofileApBleConfig": {
            "properties": {
                "beaconEnabled": {
                    "type": "boolean",
                    "description": "whether Mist beacons is enabled\n"
                },
                "beaconRate": {
                    "type": "integer",
                    "description": "required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second\n"
                },
                "beaconRateMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                },
                "beamDisableds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)\n"
                },
                "customBlePacketEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send custom packet\n"
                },
                "customBlePacketFrame": {
                    "type": "string",
                    "description": "The custom frame to be sent out in this beacon. The frame must be a hexstring\n"
                },
                "customBlePacketFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emitted by custom ble beacon\n"
                },
                "eddystoneUidAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUidBeams": {
                    "type": "string"
                },
                "eddystoneUidEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled\n"
                },
                "eddystoneUidFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit by Eddystone-UID beacon\n"
                },
                "eddystoneUidInstance": {
                    "type": "string",
                    "description": "Eddystone-UID instance for the device\n"
                },
                "eddystoneUidNamespace": {
                    "type": "string",
                    "description": "Eddystone-UID namespace\n"
                },
                "eddystoneUrlAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUrlBeams": {
                    "type": "string"
                },
                "eddystoneUrlEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled\n"
                },
                "eddystoneUrlFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emit by Eddystone-UID beacon\n"
                },
                "eddystoneUrlUrl": {
                    "type": "string",
                    "description": "URL pointed by Eddystone-URL beacon\n"
                },
                "ibeaconAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "ibeaconBeams": {
                    "type": "string"
                },
                "ibeaconEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send iBeacon\n"
                },
                "ibeaconFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit for iBeacon\n"
                },
                "ibeaconMajor": {
                    "type": "integer",
                    "description": "Major number for iBeacon\n"
                },
                "ibeaconMinor": {
                    "type": "integer",
                    "description": "Minor number for iBeacon\n"
                },
                "ibeaconUuid": {
                    "type": "string",
                    "description": "optional, if not specified, the same UUID as the beacon will be used\n"
                },
                "power": {
                    "type": "integer",
                    "description": "required if `power_mode`==`custom`\n"
                },
                "powerMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "beaconEnabled",
                        "beaconRate",
                        "beaconRateMode",
                        "customBlePacketEnabled",
                        "customBlePacketFrame",
                        "customBlePacketFreqMsec",
                        "eddystoneUidAdvPower",
                        "eddystoneUidBeams",
                        "eddystoneUidEnabled",
                        "eddystoneUidFreqMsec",
                        "eddystoneUidInstance",
                        "eddystoneUidNamespace",
                        "eddystoneUrlAdvPower",
                        "eddystoneUrlBeams",
                        "eddystoneUrlEnabled",
                        "eddystoneUrlFreqMsec",
                        "eddystoneUrlUrl",
                        "ibeaconAdvPower",
                        "ibeaconBeams",
                        "ibeaconEnabled",
                        "ibeaconFreqMsec",
                        "ibeaconMajor",
                        "ibeaconMinor",
                        "ibeaconUuid",
                        "power",
                        "powerMode"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApEslConfig:DeviceprofileApEslConfig": {
            "properties": {
                "cacert": {
                    "type": "string",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "usb*config is ignored if esl*config enabled\n"
                },
                "host": {
                    "type": "string",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "type": {
                    "type": "string",
                    "description": "note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`\n"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "Only if `type`==`imagotag` or `type`==`native`\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "Only if `type`==`solum` or `type`==`hanshow`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApIpConfig:DeviceprofileApIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`static`\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`static`\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "gateway6": {
                    "type": "string"
                },
                "ip": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "ip6": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                },
                "netmask": {
                    "type": "string",
                    "description": "required if `type`==`static`\n"
                },
                "netmask6": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `autoconf`, `dhcp`, `disabled`, `static`\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "management vlan id, default is 1 (untagged)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dns",
                        "dnsSuffixes",
                        "type",
                        "type6",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApLed:DeviceprofileApLed": {
            "properties": {
                "brightness": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "brightness",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApMesh:DeviceprofileApMesh": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether mesh is enabled on this AP\n"
                },
                "group": {
                    "type": "integer",
                    "description": "mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional\n"
                },
                "role": {
                    "type": "string",
                    "description": "enum: `base`, `remote`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApPwrConfig:DeviceprofileApPwrConfig": {
            "properties": {
                "base": {
                    "type": "integer",
                    "description": "additional power to request during negotiating with PSE over PoE, in mW\n"
                },
                "preferUsbOverWifi": {
                    "type": "boolean",
                    "description": "whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "base",
                        "preferUsbOverWifi"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApRadioConfig:DeviceprofileApRadioConfig": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain24": {
                    "type": "integer",
                    "description": "antenna gain for 2.4G - for models with external antenna only\n"
                },
                "antGain5": {
                    "type": "integer",
                    "description": "antenna gain for 5G - for models with external antenna only\n"
                },
                "antGain6": {
                    "type": "integer",
                    "description": "antenna gain for 6G - for models with external antenna only\n"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "band24": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfigBand24:DeviceprofileApRadioConfigBand24",
                    "description": "Radio Band AP settings\n"
                },
                "band24Usage": {
                    "type": "string",
                    "description": "enum: `24`, `5`, `6`, `auto`\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfigBand5:DeviceprofileApRadioConfigBand5",
                    "description": "Radio Band AP settings\n"
                },
                "band5On24Radio": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfigBand5On24Radio:DeviceprofileApRadioConfigBand5On24Radio",
                    "description": "Radio Band AP settings\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfigBand6:DeviceprofileApRadioConfigBand6",
                    "description": "Radio Band AP settings\n"
                },
                "indoorUse": {
                    "type": "boolean",
                    "description": "to make an outdoor operate indoor.\nfor an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap\n"
                },
                "scanningEnabled": {
                    "type": "boolean",
                    "description": "whether scanning radio is enabled\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antennaMode",
                        "indoorUse"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApRadioConfigBand24:DeviceprofileApRadioConfigBand24": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 2.4GHz band. enum: `20`, `40`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApRadioConfigBand5:DeviceprofileApRadioConfigBand5": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApRadioConfigBand5On24Radio:DeviceprofileApRadioConfigBand5On24Radio": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApRadioConfigBand6:DeviceprofileApRadioConfigBand6": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "For Device. (primary) channel for the band, 0 means using the Site Setting\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                },
                "standardPower": {
                    "type": "boolean",
                    "description": "for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channel",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble",
                        "standardPower"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApUplinkPortConfig:DeviceprofileApUplinkPortConfig": {
            "properties": {
                "dot1x": {
                    "type": "boolean",
                    "description": "Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch\n"
                },
                "keepWlansUpIfDown": {
                    "type": "boolean",
                    "description": "by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dot1x",
                        "keepWlansUpIfDown"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileApUsbConfig:DeviceprofileApUsbConfig": {
            "properties": {
                "cacert": {
                    "type": "string",
                    "description": "only if `type`==`imagotag`\n"
                },
                "channel": {
                    "type": "integer",
                    "description": "only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable any usb config\n"
                },
                "host": {
                    "type": "string",
                    "description": "only if `type`==`imagotag`\n"
                },
                "port": {
                    "type": "integer",
                    "description": "only if `type`==`imagotag`\n"
                },
                "type": {
                    "type": "string",
                    "description": "usb config type. enum: `hanshow`, `imagotag`, `solum`\n"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "only if `type`==`imagotag`, whether to turn on SSL verification\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "only if `type`==`solum` or `type`==`hanshow`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayBgpConfig:DeviceprofileGatewayBgpConfig": {
            "properties": {
                "authKey": {
                    "type": "string"
                },
                "bfdMinimumInterval": {
                    "type": "integer",
                    "description": "when bfd_multiplier is configured alone. Default:\n  * 1000 if `type`==`external`\n  * 350 `type`==`internal`\n"
                },
                "bfdMultiplier": {
                    "type": "integer",
                    "description": "when bfd_minimum_interval_is_configured alone\n"
                },
                "disableBfd": {
                    "type": "boolean",
                    "description": "BFD provides faster path failure detection and is enabled by default\n"
                },
                "export": {
                    "type": "string"
                },
                "exportPolicy": {
                    "type": "string",
                    "description": "default export policies if no per-neighbor policies defined\n"
                },
                "extendedV4Nexthop": {
                    "type": "boolean",
                    "description": "by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this\n"
                },
                "gracefulRestartTime": {
                    "type": "integer",
                    "description": "`0` means disable\n"
                },
                "holdTime": {
                    "type": "integer"
                },
                "import": {
                    "type": "string"
                },
                "importPolicy": {
                    "type": "string",
                    "description": "default import policies if no per-neighbor policies defined\n"
                },
                "localAs": {
                    "type": "integer"
                },
                "neighborAs": {
                    "type": "integer"
                },
                "neighbors": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayBgpConfigNeighbors:DeviceprofileGatewayBgpConfigNeighbors"
                    },
                    "description": "if per-neighbor as is desired. Property key is the neighbor address\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned BGP routers toward overlay\n"
                },
                "tunnelName": {
                    "type": "string",
                    "description": "if `type`==`tunnel`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `external`, `internal`\n"
                },
                "via": {
                    "type": "string",
                    "description": "network name. enum: `lan`, `tunnel`, `vpn`, `wan`\n"
                },
                "vpnName": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "if `via`==`wan`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdMinimumInterval",
                        "bfdMultiplier",
                        "disableBfd",
                        "gracefulRestartTime",
                        "holdTime",
                        "networks",
                        "noReadvertiseToOverlay",
                        "via"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayBgpConfigNeighbors:DeviceprofileGatewayBgpConfigNeighbors": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "If true, the BGP session to this neighbor will be administratively disabled/shutdown\n"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "holdTime": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "multihopTtl": {
                    "type": "integer",
                    "description": "assuming BGP neighbor is directly connected\n"
                },
                "neighborAs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "holdTime"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayDhcpdConfig:DeviceprofileGatewayDhcpdConfig": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfigConfig:DeviceprofileGatewayDhcpdConfigConfig"
                    },
                    "description": "Property key is the network name\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if set to `false`, disable the DHCP server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayDhcpdConfigConfig:DeviceprofileGatewayDhcpdConfigConfig": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "fixedBindings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfigConfigFixedBindings:DeviceprofileGatewayDhcpdConfigConfigFixedBindings"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g \"5684dae9ac8b\")\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`local` - optional, `ip` will be used if not provided\n"
                },
                "ipEnd": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipEnd6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "ipStart": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipStart6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfigConfigOptions:DeviceprofileGatewayDhcpdConfigConfigOptions"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the DHCP option number\n"
                },
                "serverIdOverride": {
                    "type": "boolean",
                    "description": "`server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, \nshould overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`relay`\n"
                },
                "servers6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type6`==`relay`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "vendorEncapsulated": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated:DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is \u003centerprise number\u003e:\u003csub option code\u003e, with\n  * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)\n  * sub option code: 1-255, sub-option code'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsServers",
                        "dnsSuffixes",
                        "leaseTime",
                        "serverIdOverride",
                        "servers",
                        "servers6s",
                        "type",
                        "type6"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayDhcpdConfigConfigFixedBindings:DeviceprofileGatewayDhcpdConfigConfigFixedBindings": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "junipermist:org/DeviceprofileGatewayDhcpdConfigConfigOptions:DeviceprofileGatewayDhcpdConfigConfigOptions": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated:DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayExtraRoutes6:DeviceprofileGatewayExtraRoutes6": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:org/DeviceprofileGatewayExtraRoutes:DeviceprofileGatewayExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:org/DeviceprofileGatewayIdpProfiles:DeviceprofileGatewayIdpProfiles": {
            "properties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayIdpProfilesOverwrite:DeviceprofileGatewayIdpProfilesOverwrite"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayIdpProfilesOverwrite:DeviceprofileGatewayIdpProfilesOverwrite": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum:\n  * alert (default)\n  * drop: siliently dropping packets\n  * close: notify client/server to close connection\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayIdpProfilesOverwriteMatching:DeviceprofileGatewayIdpProfilesOverwriteMatching"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayIdpProfilesOverwriteMatching:DeviceprofileGatewayIdpProfilesOverwriteMatching": {
            "properties": {
                "attackNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dstSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayIpConfigs:DeviceprofileGatewayIpConfigs": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "secondaryIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional list of secondary IPs in CIDR format\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "netmask"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "netmask",
                        "secondaryIps",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayNetwork:DeviceprofileGatewayNetwork": {
            "properties": {
                "disallowMistServices": {
                    "type": "boolean",
                    "description": "whether to disallow Mist Devices in the network\n"
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "internalAccess": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkInternalAccess:DeviceprofileGatewayNetworkInternalAccess"
                },
                "internetAccess": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkInternetAccess:DeviceprofileGatewayNetworkInternetAccess",
                    "description": "whether this network has direct internet access\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to allow clients in the network to talk to each other\n"
                },
                "multicast": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkMulticast:DeviceprofileGatewayNetworkMulticast",
                    "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                },
                "name": {
                    "type": "string"
                },
                "routedForNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                },
                "subnet": {
                    "type": "string"
                },
                "subnet6": {
                    "type": "string"
                },
                "tenants": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkTenants:DeviceprofileGatewayNetworkTenants"
                    },
                    "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkVpnAccess:DeviceprofileGatewayNetworkVpnAccess"
                    },
                    "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disallowMistServices",
                        "name",
                        "subnet"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayNetworkInternalAccess:DeviceprofileGatewayNetworkInternalAccess": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkInternetAccess:DeviceprofileGatewayNetworkInternetAccess": {
            "properties": {
                "createSimpleServicePolicy": {
                    "type": "boolean"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkInternetAccessDestinationNat:DeviceprofileGatewayNetworkInternetAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkInternetAccessStaticNat:DeviceprofileGatewayNetworkInternetAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createSimpleServicePolicy",
                        "restricted"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayNetworkInternetAccessDestinationNat:DeviceprofileGatewayNetworkInternetAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be a Port (i.e. \"443\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkInternetAccessStaticNat:DeviceprofileGatewayNetworkInternetAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/DeviceprofileGatewayNetworkMulticast:DeviceprofileGatewayNetworkMulticast": {
            "properties": {
                "disableIgmp": {
                    "type": "boolean",
                    "description": "if the network will only be the soruce of the multicast traffic, IGMP can be disabled\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkMulticastGroups:DeviceprofileGatewayNetworkMulticastGroups"
                    },
                    "description": "Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example \"225.1.0.3/32\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableIgmp",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayNetworkMulticastGroups:DeviceprofileGatewayNetworkMulticastGroups": {
            "properties": {
                "rpIp": {
                    "type": "string",
                    "description": "RP (rendezvous point) IP Address\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkTenants:DeviceprofileGatewayNetworkTenants": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkVpnAccess:DeviceprofileGatewayNetworkVpnAccess": {
            "properties": {
                "advertisedSubnet": {
                    "type": "string",
                    "description": "if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side\n"
                },
                "allowPing": {
                    "type": "boolean",
                    "description": "whether to allow ping from vpn into this routed network\n"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkVpnAccessDestinationNat:DeviceprofileGatewayNetworkVpnAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub\n"
                },
                "noReadvertiseToLanBgp": {
                    "type": "boolean",
                    "description": "toward LAN-side BGP peers\n"
                },
                "noReadvertiseToLanOspf": {
                    "type": "boolean",
                    "description": "toward LAN-side OSPF peers\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "otherVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "by default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "whether this network is routable\n"
                },
                "sourceNat": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkVpnAccessSourceNat:DeviceprofileGatewayNetworkVpnAccessSourceNat",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetworkVpnAccessStaticNat:DeviceprofileGatewayNetworkVpnAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "summarizedSubnet": {
                    "type": "string",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "summarizedSubnetToLanBgp": {
                    "type": "string",
                    "description": "toward LAN-side BGP peers\n"
                },
                "summarizedSubnetToLanOspf": {
                    "type": "string",
                    "description": "toward LAN-side OSPF peers\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noReadvertiseToLanBgp",
                        "noReadvertiseToLanOspf",
                        "otherVrfs",
                        "sourceNat",
                        "staticNat"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayNetworkVpnAccessDestinationNat:DeviceprofileGatewayNetworkVpnAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkVpnAccessSourceNat:DeviceprofileGatewayNetworkVpnAccessSourceNat": {
            "properties": {
                "externalIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayNetworkVpnAccessStaticNat:DeviceprofileGatewayNetworkVpnAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/DeviceprofileGatewayOobIpConfig:DeviceprofileGatewayOobIpConfig": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "node1": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayOobIpConfigNode1:DeviceprofileGatewayOobIpConfigNode1",
                    "description": "for HA Cluster, node1 can have different IP Config\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "node1",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayOobIpConfigNode1:DeviceprofileGatewayOobIpConfigNode1": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPathPreferences:DeviceprofileGatewayPathPreferences": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPathPreferencesPath:DeviceprofileGatewayPathPreferencesPath"
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "enum: `ecmp`, `ordered`, `weighted`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "strategy"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPathPreferencesPath:DeviceprofileGatewayPathPreferencesPath": {
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "For SSR Only. `true`, if this specific path is undesired\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "only if `type`==`local`, if a different gateway is desired\n"
                },
                "internetAccess": {
                    "type": "boolean",
                    "description": "only if `type`==`vpn`, if this vpn path can be used for internet\n"
                },
                "name": {
                    "type": "string",
                    "description": "required when \n  * `type`==`vpn`: the name of the VPN Path to use \n  * `type`==`wan`: the name of the WAN interface to use'\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`local`\n"
                },
                "targetIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local`, if destination IP is to be replaced\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local`, `tunnel`, `vpn`, `wan`\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "optional if `type`==`vpn`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networks",
                        "targetIps"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfig:DeviceprofileGatewayPortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "if `aggregated`==`true`. To disable LCP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "string",
                    "description": "if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)\n"
                },
                "aeLacpForceUp": {
                    "type": "boolean",
                    "description": "For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm, set it to true\n"
                },
                "description": {
                    "type": "string",
                    "description": "Interface Description. Can be a variable (i.e. \"{{myvar}}\")\n"
                },
                "disableAutoneg": {
                    "type": "boolean"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "port admin up (true) / down (false)\n"
                },
                "dslType": {
                    "type": "string",
                    "description": "if `wan_type`==`dsl`. enum: `adsl`, `vdsl`\n"
                },
                "dslVci": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 16 bit int\n"
                },
                "dslVpi": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 8 bit int\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigIpConfig:DeviceprofileGatewayPortConfigIpConfig",
                    "description": "Junos IP Config\n"
                },
                "lteApn": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "lteAuth": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`. enum: `chap`, `none`, `pap`\n"
                },
                "lteBackup": {
                    "type": "boolean"
                },
                "ltePassword": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n",
                    "secret": true
                },
                "lteUsername": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "name that we'll use to derive config\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`lan`, name of the `junipermist.org.Network` resource\n"
                },
                "outerVlanId": {
                    "type": "integer",
                    "description": "for Q-in-Q\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only for SRX and if `usage`==`lan`, the Untagged VLAN Network\n"
                },
                "preserveDscp": {
                    "type": "boolean",
                    "description": "whether to preserve dscp when sending traffic over VPN (SSR-only)\n"
                },
                "redundant": {
                    "type": "boolean",
                    "description": "if HA mode\n"
                },
                "rethIdx": {
                    "type": "integer",
                    "description": "if HA mode\n"
                },
                "rethNode": {
                    "type": "string",
                    "description": "if HA mode\n"
                },
                "rethNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSR only - supporting vlan-based redundancy (matching the size of `networks`)\n"
                },
                "speed": {
                    "type": "string"
                },
                "ssrNoVirtualMac": {
                    "type": "boolean",
                    "description": "when SSR is running as VM, this is required on certain hosting platforms\n"
                },
                "svrPortRange": {
                    "type": "string",
                    "description": "for SSR only\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigTrafficShaping:DeviceprofileGatewayPortConfigTrafficShaping"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnPaths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigVpnPaths:DeviceprofileGatewayPortConfigVpnPaths"
                    },
                    "description": "Property key is the VPN name\n"
                },
                "wanArpPolicer": {
                    "type": "string",
                    "description": "Only when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`\n"
                },
                "wanExtIp": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP\n"
                },
                "wanExtraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigWanExtraRoutes:DeviceprofileGatewayPortConfigWanExtraRoutes"
                    },
                    "description": "Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g \"100.100.100.0/24\")\n"
                },
                "wanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined\n"
                },
                "wanProbeOverride": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigWanProbeOverride:DeviceprofileGatewayPortConfigWanProbeOverride",
                    "description": "Only if `usage`==`wan`\n"
                },
                "wanSourceNat": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigWanSourceNat:DeviceprofileGatewayPortConfigWanSourceNat",
                    "description": "Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip\n"
                },
                "wanType": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aeDisableLacp",
                        "aeLacpForceUp",
                        "aggregated",
                        "critical",
                        "disableAutoneg",
                        "disabled",
                        "dslType",
                        "dslVci",
                        "dslVpi",
                        "duplex",
                        "lteAuth",
                        "networks",
                        "poeDisabled",
                        "preserveDscp",
                        "redundant",
                        "rethNodes",
                        "speed",
                        "ssrNoVirtualMac",
                        "svrPortRange",
                        "usage",
                        "wanArpPolicer",
                        "wanNetworks",
                        "wanType"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigIpConfig:DeviceprofileGatewayPortConfigIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. \"192.168.1.1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Interface IP Address (i.e. \"192.168.1.8\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. \"/24\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "network": {
                    "type": "string",
                    "description": "optional, the network to be used for mgmt\n"
                },
                "poserPassword": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n",
                    "secret": true
                },
                "pppoeAuth": {
                    "type": "string",
                    "description": "if `type`==`pppoe`. enum: `chap`, `none`, `pap`\n"
                },
                "pppoeUsername": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `pppoe`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pppoeAuth",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigTrafficShaping:DeviceprofileGatewayPortConfigTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigVpnPaths:DeviceprofileGatewayPortConfigVpnPaths": {
            "properties": {
                "bfdProfile": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `broadband`, `lte`\n"
                },
                "bfdUseTunnelMode": {
                    "type": "boolean",
                    "description": "Only if the VPN `type`==`hub_spoke`. Whether to use tunnel mode. SSR only\n"
                },
                "linkName": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`mesh`\n"
                },
                "preference": {
                    "type": "integer",
                    "description": "Only if the VPN `type`==`hub_spoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)\n"
                },
                "role": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `hub`, `spoke`\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfigVpnPathsTrafficShaping:DeviceprofileGatewayPortConfigVpnPathsTrafficShaping"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdProfile",
                        "bfdUseTunnelMode",
                        "role"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigVpnPathsTrafficShaping:DeviceprofileGatewayPortConfigVpnPathsTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigWanExtraRoutes:DeviceprofileGatewayPortConfigWanExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayPortConfigWanProbeOverride:DeviceprofileGatewayPortConfigWanProbeOverride": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "probeProfile": {
                    "type": "string",
                    "description": "enum: `broadband`, `lte`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "probeProfile"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayPortConfigWanSourceNat:DeviceprofileGatewayPortConfigWanSourceNat": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "or to disable the source-nat\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if alternative nat_pool is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayRoutingPolicies:DeviceprofileGatewayRoutingPolicies": {
            "properties": {
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPoliciesTerm:DeviceprofileGatewayRoutingPoliciesTerm"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayRoutingPoliciesTerm:DeviceprofileGatewayRoutingPoliciesTerm": {
            "properties": {
                "action": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPoliciesTermAction:DeviceprofileGatewayRoutingPoliciesTermAction",
                    "description": "when used as import policy\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatching:DeviceprofileGatewayRoutingPoliciesTermMatching",
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayRoutingPoliciesTermAction:DeviceprofileGatewayRoutingPoliciesTermAction": {
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "addCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "addTargetVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for SSR, hub decides how VRF routes are leaked on spoke\n"
                },
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "route aggregation\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "excludeAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. To exclude certain AS\n"
                },
                "excludeCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exportCommunitites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "localPreference": {
                    "type": "string",
                    "description": "optional, for an import policy, local_preference can be changed\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. By default, the local AS will be prepended, to change it\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatching:DeviceprofileGatewayRoutingPoliciesTermMatching": {
            "properties": {
                "asPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "takes regular expression\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "`direct`, `bgp`, `osp`, ...\n"
                },
                "routeExists": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists:DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists"
                },
                "vpnNeighborMacs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn)\n"
                },
                "vpnPathSla": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla:DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla"
                },
                "vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn). ordered-\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists:DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists": {
            "properties": {
                "route": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string",
                    "description": "name of the vrf instance, it can also be the name of the VPN or wan if they\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vrfName"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla:DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla": {
            "properties": {
                "maxJitter": {
                    "type": "integer"
                },
                "maxLatency": {
                    "type": "integer"
                },
                "maxLoss": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayServicePolicy:DeviceprofileGatewayServicePolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicyAppqoe:DeviceprofileGatewayServicePolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicyEwf:DeviceprofileGatewayServicePolicyEwf"
                    }
                },
                "idp": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicyIdp:DeviceprofileGatewayServicePolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "name": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy name)\n"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them. Optionally, you can customize by using `path_preference`\n"
                },
                "servicepolicyId": {
                    "type": "string",
                    "description": "used to link servicepolicy defined at org level and overwrite some attributes\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Applications / Desctinations\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Networks / Users\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "services",
                        "tenants"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayServicePolicyAppqoe:DeviceprofileGatewayServicePolicyAppqoe": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayServicePolicyEwf:DeviceprofileGatewayServicePolicyEwf": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "blockMessage": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayServicePolicyIdp:DeviceprofileGatewayServicePolicyIdp": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idpprofileId": {
                    "type": "string",
                    "description": "org_level IDP Profile can be used, this takes precedence over `profile`\n"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `Custom`, `strict` (default), `standard` or keys from from idp_profiles\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertOnly",
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigs:DeviceprofileGatewayTunnelConfigs": {
            "properties": {
                "autoProvision": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvision:DeviceprofileGatewayTunnelConfigsAutoProvision"
                },
                "ikeLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ikeMode": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`\n"
                },
                "ikeProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsIkeProposal:DeviceprofileGatewayTunnelConfigsIkeProposal"
                    },
                    "description": "if `provider`==`custom-ipsec`\n"
                },
                "ipsecLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ipsecProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsIpsecProposal:DeviceprofileGatewayTunnelConfigsIpsecProposal"
                    },
                    "description": "Only if  `provider`==`custom-ipsec`\n"
                },
                "localId": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `provider`==`custom-ipsec`, networks reachable via this tunnel\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsPrimary:DeviceprofileGatewayTunnelConfigsPrimary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "probe": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsProbe:DeviceprofileGatewayTunnelConfigsProbe",
                    "description": "Only if `provider`==`custom-ipsec`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`\n"
                },
                "psk": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n",
                    "secret": true
                },
                "secondary": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsSecondary:DeviceprofileGatewayTunnelConfigsSecondary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "version": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ikeMode",
                        "mode",
                        "networks",
                        "version"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvision:DeviceprofileGatewayTunnelConfigsAutoProvision": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng:DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng",
                    "description": "API override for POP selection\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary:DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary"
                },
                "provider": {
                    "type": "string",
                    "description": "enum: `jse-ipsec`, `zscaler-ipsec`\n"
                },
                "region": {
                    "type": "string",
                    "description": "API override for POP selection\n"
                },
                "secondary": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary:DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary"
                }
            },
            "type": "object",
            "required": [
                "provider"
            ]
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng:DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ]
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary:DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary:DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsIkeProposal:DeviceprofileGatewayTunnelConfigsIkeProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsIpsecProposal:DeviceprofileGatewayTunnelConfigsIpsecProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsPrimary:DeviceprofileGatewayTunnelConfigsPrimary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsProbe:DeviceprofileGatewayTunnelConfigsProbe": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "how often to trigger the probe\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "number of consecutive misses before declaring the tunnel down\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "time within which to complete the connectivity check\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `http`, `icmp`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/DeviceprofileGatewayTunnelConfigsSecondary:DeviceprofileGatewayTunnelConfigsSecondary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:org/DeviceprofileGatewayTunnelProviderOptions:DeviceprofileGatewayTunnelProviderOptions": {
            "properties": {
                "jse": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptionsJse:DeviceprofileGatewayTunnelProviderOptionsJse",
                    "description": "for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added\n"
                },
                "zscaler": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptionsZscaler:DeviceprofileGatewayTunnelProviderOptionsZscaler",
                    "description": "for zscaler-ipsec and zscaler-gre\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayTunnelProviderOptionsJse:DeviceprofileGatewayTunnelProviderOptionsJse": {
            "properties": {
                "numUsers": {
                    "type": "integer"
                },
                "orgName": {
                    "type": "string",
                    "description": "JSE Organization name\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayTunnelProviderOptionsZscaler:DeviceprofileGatewayTunnelProviderOptionsZscaler": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to enforce user authentication\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "subLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation:DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation"
                    },
                    "description": "`sub-locations` can be used for specific uses cases to define different configuration based on the user network\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "location uses proxy chaining to forward traffic\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation:DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to authenticate users\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayVrfConfig:DeviceprofileGatewayVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/DeviceprofileGatewayVrfInstances:DeviceprofileGatewayVrfInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions": {
            "properties": {
                "autoLoopbackSubnet": {
                    "type": "string",
                    "description": "optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides\n"
                },
                "autoLoopbackSubnet6": {
                    "type": "string",
                    "description": "optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides\n"
                },
                "autoRouterIdSubnet": {
                    "type": "string",
                    "description": "optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored\n"
                },
                "autoRouterIdSubnet6": {
                    "type": "string",
                    "description": "optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored\n"
                },
                "coreAsBorder": {
                    "type": "boolean",
                    "description": "optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway\nwhen `routed_at` != `core`, whether to do virtual-gateway at core as well\n"
                },
                "overlay": {
                    "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptionsOverlay:EvpnTopologyEvpnOptionsOverlay"
                },
                "perVlanVgaV4Mac": {
                    "type": "boolean",
                    "description": "by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4_mac\nif enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)\n"
                },
                "routedAt": {
                    "type": "string",
                    "description": "optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`\n"
                },
                "underlay": {
                    "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptionsUnderlay:EvpnTopologyEvpnOptionsUnderlay"
                },
                "vsInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptionsVsInstances:EvpnTopologyEvpnOptionsVsInstances"
                    },
                    "description": "optional, for EX9200 only to seggregate virtual-switches\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoLoopbackSubnet",
                        "autoLoopbackSubnet6",
                        "autoRouterIdSubnet",
                        "coreAsBorder",
                        "perVlanVgaV4Mac",
                        "routedAt"
                    ]
                }
            }
        },
        "junipermist:org/EvpnTopologyEvpnOptionsOverlay:EvpnTopologyEvpnOptionsOverlay": {
            "properties": {
                "as": {
                    "type": "integer",
                    "description": "Overlay BGP Local AS Number\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "as"
                    ]
                }
            }
        },
        "junipermist:org/EvpnTopologyEvpnOptionsUnderlay:EvpnTopologyEvpnOptionsUnderlay": {
            "properties": {
                "asBase": {
                    "type": "integer",
                    "description": "Underlay BGP Base AS Number\n"
                },
                "routedIdPrefix": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string",
                    "description": "underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6\n"
                },
                "useIpv6": {
                    "type": "boolean",
                    "description": "if v6 is desired for underlay\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asBase",
                        "useIpv6"
                    ]
                }
            }
        },
        "junipermist:org/EvpnTopologyEvpnOptionsVsInstances:EvpnTopologyEvpnOptionsVsInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/EvpnTopologySwitches:EvpnTopologySwitches": {
            "properties": {
                "deviceprofileId": {
                    "type": "string"
                },
                "evpnId": {
                    "type": "integer"
                },
                "mac": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "pod": {
                    "type": "integer",
                    "description": "optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g. \n  * for CLOS, to group dist / access switches into pods\n  * for ERB/CRB, to group dist / esilag-access into pods\n"
                },
                "pods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "by default, core switches are assumed to be connecting all pods. \nif you want to limit the pods, you can specify pods.\n"
                },
                "role": {
                    "type": "string",
                    "description": "use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`\n"
                },
                "routerId": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceprofileId",
                        "evpnId",
                        "mac",
                        "model",
                        "pod",
                        "pods",
                        "role",
                        "routerId",
                        "siteId"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateBgpConfig:GatewaytemplateBgpConfig": {
            "properties": {
                "authKey": {
                    "type": "string"
                },
                "bfdMinimumInterval": {
                    "type": "integer",
                    "description": "when bfd_multiplier is configured alone. Default:\n  * 1000 if `type`==`external`\n  * 350 `type`==`internal`\n"
                },
                "bfdMultiplier": {
                    "type": "integer",
                    "description": "when bfd_minimum_interval_is_configured alone\n"
                },
                "disableBfd": {
                    "type": "boolean",
                    "description": "BFD provides faster path failure detection and is enabled by default\n"
                },
                "export": {
                    "type": "string"
                },
                "exportPolicy": {
                    "type": "string",
                    "description": "default export policies if no per-neighbor policies defined\n"
                },
                "extendedV4Nexthop": {
                    "type": "boolean",
                    "description": "by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this\n"
                },
                "gracefulRestartTime": {
                    "type": "integer",
                    "description": "`0` means disable\n"
                },
                "holdTime": {
                    "type": "integer"
                },
                "import": {
                    "type": "string"
                },
                "importPolicy": {
                    "type": "string",
                    "description": "default import policies if no per-neighbor policies defined\n"
                },
                "localAs": {
                    "type": "integer"
                },
                "neighborAs": {
                    "type": "integer"
                },
                "neighbors": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateBgpConfigNeighbors:GatewaytemplateBgpConfigNeighbors"
                    },
                    "description": "if per-neighbor as is desired. Property key is the neighbor address\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned BGP routers toward overlay\n"
                },
                "tunnelName": {
                    "type": "string",
                    "description": "if `type`==`tunnel`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `external`, `internal`\n"
                },
                "via": {
                    "type": "string",
                    "description": "network name. enum: `lan`, `tunnel`, `vpn`, `wan`\n"
                },
                "vpnName": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "if `via`==`wan`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdMinimumInterval",
                        "bfdMultiplier",
                        "disableBfd",
                        "gracefulRestartTime",
                        "holdTime",
                        "networks",
                        "noReadvertiseToOverlay",
                        "via"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateBgpConfigNeighbors:GatewaytemplateBgpConfigNeighbors": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "If true, the BGP session to this neighbor will be administratively disabled/shutdown\n"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "holdTime": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "multihopTtl": {
                    "type": "integer",
                    "description": "assuming BGP neighbor is directly connected\n"
                },
                "neighborAs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "holdTime"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateDhcpdConfig:GatewaytemplateDhcpdConfig": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfigConfig:GatewaytemplateDhcpdConfigConfig"
                    },
                    "description": "Property key is the network name\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if set to `false`, disable the DHCP server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateDhcpdConfigConfig:GatewaytemplateDhcpdConfigConfig": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used\n"
                },
                "fixedBindings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfigConfigFixedBindings:GatewaytemplateDhcpdConfigConfigFixedBindings"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g \"5684dae9ac8b\")\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`local` - optional, `ip` will be used if not provided\n"
                },
                "ipEnd": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipEnd6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "ipStart": {
                    "type": "string",
                    "description": "if `type`==`local`\n"
                },
                "ipStart6": {
                    "type": "string",
                    "description": "if `type6`==`local`\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfigConfigOptions:GatewaytemplateDhcpdConfigConfigOptions"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is the DHCP option number\n"
                },
                "serverIdOverride": {
                    "type": "boolean",
                    "description": "`server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, \nshould overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`relay`\n"
                },
                "servers6s": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type6`==`relay`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "type6": {
                    "type": "string",
                    "description": "enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)\n"
                },
                "vendorEncapsulated": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfigConfigVendorEncapsulated:GatewaytemplateDhcpdConfigConfigVendorEncapsulated"
                    },
                    "description": "if `type`==`local` or `type6`==`local`. Property key is \u003centerprise number\u003e:\u003csub option code\u003e, with\n  * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)\n  * sub option code: 1-255, sub-option code'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsServers",
                        "dnsSuffixes",
                        "leaseTime",
                        "serverIdOverride",
                        "servers",
                        "servers6s",
                        "type",
                        "type6"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateDhcpdConfigConfigFixedBindings:GatewaytemplateDhcpdConfigConfigFixedBindings": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "junipermist:org/GatewaytemplateDhcpdConfigConfigOptions:GatewaytemplateDhcpdConfigConfigOptions": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateDhcpdConfigConfigVendorEncapsulated:GatewaytemplateDhcpdConfigConfigVendorEncapsulated": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateExtraRoutes6:GatewaytemplateExtraRoutes6": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:org/GatewaytemplateExtraRoutes:GatewaytemplateExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:org/GatewaytemplateIdpProfiles:GatewaytemplateIdpProfiles": {
            "properties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateIdpProfilesOverwrite:GatewaytemplateIdpProfilesOverwrite"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateIdpProfilesOverwrite:GatewaytemplateIdpProfilesOverwrite": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum:\n  * alert (default)\n  * drop: siliently dropping packets\n  * close: notify client/server to close connection\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateIdpProfilesOverwriteMatching:GatewaytemplateIdpProfilesOverwriteMatching"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateIdpProfilesOverwriteMatching:GatewaytemplateIdpProfilesOverwriteMatching": {
            "properties": {
                "attackNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dstSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateIpConfigs:GatewaytemplateIpConfigs": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "secondaryIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional list of secondary IPs in CIDR format\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "netmask"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "netmask",
                        "secondaryIps",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateNetwork:GatewaytemplateNetwork": {
            "properties": {
                "disallowMistServices": {
                    "type": "boolean",
                    "description": "whether to disallow Mist Devices in the network\n"
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "internalAccess": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateNetworkInternalAccess:GatewaytemplateNetworkInternalAccess"
                },
                "internetAccess": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateNetworkInternetAccess:GatewaytemplateNetworkInternetAccess",
                    "description": "whether this network has direct internet access\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to allow clients in the network to talk to each other\n"
                },
                "multicast": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateNetworkMulticast:GatewaytemplateNetworkMulticast",
                    "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                },
                "name": {
                    "type": "string"
                },
                "routedForNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                },
                "subnet": {
                    "type": "string"
                },
                "subnet6": {
                    "type": "string"
                },
                "tenants": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkTenants:GatewaytemplateNetworkTenants"
                    },
                    "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkVpnAccess:GatewaytemplateNetworkVpnAccess"
                    },
                    "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disallowMistServices",
                        "name",
                        "subnet"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateNetworkInternalAccess:GatewaytemplateNetworkInternalAccess": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkInternetAccess:GatewaytemplateNetworkInternetAccess": {
            "properties": {
                "createSimpleServicePolicy": {
                    "type": "boolean"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkInternetAccessDestinationNat:GatewaytemplateNetworkInternetAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkInternetAccessStaticNat:GatewaytemplateNetworkInternetAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createSimpleServicePolicy",
                        "restricted"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateNetworkInternetAccessDestinationNat:GatewaytemplateNetworkInternetAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be a Port (i.e. \"443\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkInternetAccessStaticNat:GatewaytemplateNetworkInternetAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/GatewaytemplateNetworkMulticast:GatewaytemplateNetworkMulticast": {
            "properties": {
                "disableIgmp": {
                    "type": "boolean",
                    "description": "if the network will only be the soruce of the multicast traffic, IGMP can be disabled\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkMulticastGroups:GatewaytemplateNetworkMulticastGroups"
                    },
                    "description": "Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example \"225.1.0.3/32\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableIgmp",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateNetworkMulticastGroups:GatewaytemplateNetworkMulticastGroups": {
            "properties": {
                "rpIp": {
                    "type": "string",
                    "description": "RP (rendezvous point) IP Address\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkTenants:GatewaytemplateNetworkTenants": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkVpnAccess:GatewaytemplateNetworkVpnAccess": {
            "properties": {
                "advertisedSubnet": {
                    "type": "string",
                    "description": "if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side\n"
                },
                "allowPing": {
                    "type": "boolean",
                    "description": "whether to allow ping from vpn into this routed network\n"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkVpnAccessDestinationNat:GatewaytemplateNetworkVpnAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub\n"
                },
                "noReadvertiseToLanBgp": {
                    "type": "boolean",
                    "description": "toward LAN-side BGP peers\n"
                },
                "noReadvertiseToLanOspf": {
                    "type": "boolean",
                    "description": "toward LAN-side OSPF peers\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "otherVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "by default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "whether this network is routable\n"
                },
                "sourceNat": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateNetworkVpnAccessSourceNat:GatewaytemplateNetworkVpnAccessSourceNat",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetworkVpnAccessStaticNat:GatewaytemplateNetworkVpnAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "summarizedSubnet": {
                    "type": "string",
                    "description": "toward overlay, how HUB should deal with routes it received from Spokes\n"
                },
                "summarizedSubnetToLanBgp": {
                    "type": "string",
                    "description": "toward LAN-side BGP peers\n"
                },
                "summarizedSubnetToLanOspf": {
                    "type": "string",
                    "description": "toward LAN-side OSPF peers\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noReadvertiseToLanBgp",
                        "noReadvertiseToLanOspf",
                        "otherVrfs",
                        "sourceNat",
                        "staticNat"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateNetworkVpnAccessDestinationNat:GatewaytemplateNetworkVpnAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkVpnAccessSourceNat:GatewaytemplateNetworkVpnAccessSourceNat": {
            "properties": {
                "externalIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateNetworkVpnAccessStaticNat:GatewaytemplateNetworkVpnAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/GatewaytemplateOobIpConfig:GatewaytemplateOobIpConfig": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "node1": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateOobIpConfigNode1:GatewaytemplateOobIpConfigNode1",
                    "description": "for HA Cluster, node1 can have different IP Config\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "node1",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateOobIpConfigNode1:GatewaytemplateOobIpConfigNode1": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "if `type`==`static`\n"
                },
                "ip": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePathPreferences:GatewaytemplatePathPreferences": {
            "properties": {
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePathPreferencesPath:GatewaytemplatePathPreferencesPath"
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "enum: `ecmp`, `ordered`, `weighted`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "strategy"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePathPreferencesPath:GatewaytemplatePathPreferencesPath": {
            "properties": {
                "cost": {
                    "type": "integer"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "For SSR Only. `true`, if this specific path is undesired\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "only if `type`==`local`, if a different gateway is desired\n"
                },
                "internetAccess": {
                    "type": "boolean",
                    "description": "only if `type`==`vpn`, if this vpn path can be used for internet\n"
                },
                "name": {
                    "type": "string",
                    "description": "required when \n  * `type`==`vpn`: the name of the VPN Path to use \n  * `type`==`wan`: the name of the WAN interface to use'\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`local`\n"
                },
                "targetIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`local`, if destination IP is to be replaced\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `local`, `tunnel`, `vpn`, `wan`\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "optional if `type`==`vpn`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networks",
                        "targetIps"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfig:GatewaytemplatePortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "if `aggregated`==`true`. To disable LCP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "string",
                    "description": "if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)\n"
                },
                "aeLacpForceUp": {
                    "type": "boolean",
                    "description": "For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm, set it to true\n"
                },
                "description": {
                    "type": "string",
                    "description": "Interface Description. Can be a variable (i.e. \"{{myvar}}\")\n"
                },
                "disableAutoneg": {
                    "type": "boolean"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "port admin up (true) / down (false)\n"
                },
                "dslType": {
                    "type": "string",
                    "description": "if `wan_type`==`dsl`. enum: `adsl`, `vdsl`\n"
                },
                "dslVci": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 16 bit int\n"
                },
                "dslVpi": {
                    "type": "integer",
                    "description": "if `wan_type`==`dsl`, 8 bit int\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigIpConfig:GatewaytemplatePortConfigIpConfig",
                    "description": "Junos IP Config\n"
                },
                "lteApn": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "lteAuth": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`. enum: `chap`, `none`, `pap`\n"
                },
                "lteBackup": {
                    "type": "boolean"
                },
                "ltePassword": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n",
                    "secret": true
                },
                "lteUsername": {
                    "type": "string",
                    "description": "if `wan_type`==`lte`\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "name that we'll use to derive config\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`lan`, name of the `junipermist.org.Network` resource\n"
                },
                "outerVlanId": {
                    "type": "integer",
                    "description": "for Q-in-Q\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only for SRX and if `usage`==`lan`, the Untagged VLAN Network\n"
                },
                "preserveDscp": {
                    "type": "boolean",
                    "description": "whether to preserve dscp when sending traffic over VPN (SSR-only)\n"
                },
                "redundant": {
                    "type": "boolean",
                    "description": "if HA mode\n"
                },
                "rethIdx": {
                    "type": "integer",
                    "description": "if HA mode\n"
                },
                "rethNode": {
                    "type": "string",
                    "description": "if HA mode\n"
                },
                "rethNodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSR only - supporting vlan-based redundancy (matching the size of `networks`)\n"
                },
                "speed": {
                    "type": "string"
                },
                "ssrNoVirtualMac": {
                    "type": "boolean",
                    "description": "when SSR is running as VM, this is required on certain hosting platforms\n"
                },
                "svrPortRange": {
                    "type": "string",
                    "description": "for SSR only\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigTrafficShaping:GatewaytemplatePortConfigTrafficShaping"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnPaths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigVpnPaths:GatewaytemplatePortConfigVpnPaths"
                    },
                    "description": "Property key is the VPN name\n"
                },
                "wanArpPolicer": {
                    "type": "string",
                    "description": "Only when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`\n"
                },
                "wanExtIp": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP\n"
                },
                "wanExtraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigWanExtraRoutes:GatewaytemplatePortConfigWanExtraRoutes"
                    },
                    "description": "Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g \"100.100.100.0/24\")\n"
                },
                "wanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined\n"
                },
                "wanProbeOverride": {
                    "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigWanProbeOverride:GatewaytemplatePortConfigWanProbeOverride",
                    "description": "Only if `usage`==`wan`\n"
                },
                "wanSourceNat": {
                    "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigWanSourceNat:GatewaytemplatePortConfigWanSourceNat",
                    "description": "Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip\n"
                },
                "wanType": {
                    "type": "string",
                    "description": "Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aeDisableLacp",
                        "aeLacpForceUp",
                        "aggregated",
                        "critical",
                        "disableAutoneg",
                        "disabled",
                        "dslType",
                        "dslVci",
                        "dslVpi",
                        "duplex",
                        "lteAuth",
                        "networks",
                        "poeDisabled",
                        "preserveDscp",
                        "redundant",
                        "rethNodes",
                        "speed",
                        "ssrNoVirtualMac",
                        "svrPortRange",
                        "usage",
                        "wanArpPolicer",
                        "wanNetworks",
                        "wanType"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigIpConfig:GatewaytemplatePortConfigIpConfig": {
            "properties": {
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "except for out-of_band interface (vme/em0/fxp0)\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. \"192.168.1.1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Interface IP Address (i.e. \"192.168.1.8\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. \"/24\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "network": {
                    "type": "string",
                    "description": "optional, the network to be used for mgmt\n"
                },
                "poserPassword": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n",
                    "secret": true
                },
                "pppoeAuth": {
                    "type": "string",
                    "description": "if `type`==`pppoe`. enum: `chap`, `none`, `pap`\n"
                },
                "pppoeUsername": {
                    "type": "string",
                    "description": "if `type`==`pppoe`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `pppoe`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pppoeAuth",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigTrafficShaping:GatewaytemplatePortConfigTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigVpnPaths:GatewaytemplatePortConfigVpnPaths": {
            "properties": {
                "bfdProfile": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `broadband`, `lte`\n"
                },
                "bfdUseTunnelMode": {
                    "type": "boolean",
                    "description": "Only if the VPN `type`==`hub_spoke`. Whether to use tunnel mode. SSR only\n"
                },
                "linkName": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`mesh`\n"
                },
                "preference": {
                    "type": "integer",
                    "description": "Only if the VPN `type`==`hub_spoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)\n"
                },
                "role": {
                    "type": "string",
                    "description": "Only if the VPN `type`==`hub_spoke`. enum: `hub`, `spoke`\n"
                },
                "trafficShaping": {
                    "$ref": "#/types/junipermist:org/GatewaytemplatePortConfigVpnPathsTrafficShaping:GatewaytemplatePortConfigVpnPathsTrafficShaping"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdProfile",
                        "bfdUseTunnelMode",
                        "role"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigVpnPathsTrafficShaping:GatewaytemplatePortConfigVpnPathsTrafficShaping": {
            "properties": {
                "classPercentages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "maxTxKbps": {
                    "type": "integer",
                    "description": "Interface Transmit Cap in kbps\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigWanExtraRoutes:GatewaytemplatePortConfigWanExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplatePortConfigWanProbeOverride:GatewaytemplatePortConfigWanProbeOverride": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "probeProfile": {
                    "type": "string",
                    "description": "enum: `broadband`, `lte`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "probeProfile"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplatePortConfigWanSourceNat:GatewaytemplatePortConfigWanSourceNat": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "or to disable the source-nat\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if alternative nat_pool is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateRoutingPolicies:GatewaytemplateRoutingPolicies": {
            "properties": {
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPoliciesTerm:GatewaytemplateRoutingPoliciesTerm"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateRoutingPoliciesTerm:GatewaytemplateRoutingPoliciesTerm": {
            "properties": {
                "action": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPoliciesTermAction:GatewaytemplateRoutingPoliciesTermAction",
                    "description": "when used as import policy\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPoliciesTermMatching:GatewaytemplateRoutingPoliciesTermMatching",
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateRoutingPoliciesTermAction:GatewaytemplateRoutingPoliciesTermAction": {
            "properties": {
                "accept": {
                    "type": "boolean"
                },
                "addCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "addTargetVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for SSR, hub decides how VRF routes are leaked on spoke\n"
                },
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "route aggregation\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "excludeAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. To exclude certain AS\n"
                },
                "excludeCommunities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exportCommunitites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional\n"
                },
                "localPreference": {
                    "type": "string",
                    "description": "optional, for an import policy, local_preference can be changed\n"
                },
                "prependAsPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when used as export policy, optional. By default, the local AS will be prepended, to change it\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateRoutingPoliciesTermMatching:GatewaytemplateRoutingPoliciesTermMatching": {
            "properties": {
                "asPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "takes regular expression\n"
                },
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "zero or more criteria/filter can be specified to match the term, all criteria have to be met\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "`direct`, `bgp`, `osp`, ...\n"
                },
                "routeExists": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPoliciesTermMatchingRouteExists:GatewaytemplateRoutingPoliciesTermMatchingRouteExists"
                },
                "vpnNeighborMacs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn)\n"
                },
                "vpnPathSla": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla:GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla"
                },
                "vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "overlay-facing criteria (used for bgp_config where via=vpn). ordered-\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateRoutingPoliciesTermMatchingRouteExists:GatewaytemplateRoutingPoliciesTermMatchingRouteExists": {
            "properties": {
                "route": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string",
                    "description": "name of the vrf instance, it can also be the name of the VPN or wan if they\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "vrfName"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla:GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla": {
            "properties": {
                "maxJitter": {
                    "type": "integer"
                },
                "maxLatency": {
                    "type": "integer"
                },
                "maxLoss": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateServicePolicy:GatewaytemplateServicePolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicyAppqoe:GatewaytemplateServicePolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicyEwf:GatewaytemplateServicePolicyEwf"
                    }
                },
                "idp": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicyIdp:GatewaytemplateServicePolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "name": {
                    "type": "string",
                    "description": "Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy name)\n"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them. Optionally, you can customize by using `path_preference`\n"
                },
                "servicepolicyId": {
                    "type": "string",
                    "description": "used to link servicepolicy defined at org level and overwrite some attributes\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Applications / Desctinations\n"
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required when `servicepolicy_id` is not defined. List of Networks / Users\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "services",
                        "tenants"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateServicePolicyAppqoe:GatewaytemplateServicePolicyAppqoe": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateServicePolicyEwf:GatewaytemplateServicePolicyEwf": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "blockMessage": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateServicePolicyIdp:GatewaytemplateServicePolicyIdp": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idpprofileId": {
                    "type": "string",
                    "description": "org_level IDP Profile can be used, this takes precedence over `profile`\n"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `Custom`, `strict` (default), `standard` or keys from from idp_profiles\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertOnly",
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateTunnelConfigs:GatewaytemplateTunnelConfigs": {
            "properties": {
                "autoProvision": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsAutoProvision:GatewaytemplateTunnelConfigsAutoProvision"
                },
                "ikeLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ikeMode": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`\n"
                },
                "ikeProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsIkeProposal:GatewaytemplateTunnelConfigsIkeProposal"
                    },
                    "description": "if `provider`==`custom-ipsec`\n"
                },
                "ipsecLifetime": {
                    "type": "integer",
                    "description": "Only if `provider`==`custom-ipsec`. Must be between 180 and 86400\n"
                },
                "ipsecProposals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsIpsecProposal:GatewaytemplateTunnelConfigsIpsecProposal"
                    },
                    "description": "Only if  `provider`==`custom-ipsec`\n"
                },
                "localId": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `provider`==`custom-ipsec`, networks reachable via this tunnel\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsPrimary:GatewaytemplateTunnelConfigsPrimary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "probe": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsProbe:GatewaytemplateTunnelConfigsProbe",
                    "description": "Only if `provider`==`custom-ipsec`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`\n"
                },
                "psk": {
                    "type": "string",
                    "description": "Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n",
                    "secret": true
                },
                "secondary": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsSecondary:GatewaytemplateTunnelConfigsSecondary",
                    "description": "Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "version": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ikeMode",
                        "mode",
                        "networks",
                        "version"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateTunnelConfigsAutoProvision:GatewaytemplateTunnelConfigsAutoProvision": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionLatlng:GatewaytemplateTunnelConfigsAutoProvisionLatlng",
                    "description": "API override for POP selection\n"
                },
                "primary": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionPrimary:GatewaytemplateTunnelConfigsAutoProvisionPrimary"
                },
                "provider": {
                    "type": "string",
                    "description": "enum: `jse-ipsec`, `zscaler-ipsec`\n"
                },
                "region": {
                    "type": "string",
                    "description": "API override for POP selection\n"
                },
                "secondary": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionSecondary:GatewaytemplateTunnelConfigsAutoProvisionSecondary"
                }
            },
            "type": "object",
            "required": [
                "provider"
            ]
        },
        "junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionLatlng:GatewaytemplateTunnelConfigsAutoProvisionLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ]
        },
        "junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionPrimary:GatewaytemplateTunnelConfigsAutoProvisionPrimary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateTunnelConfigsAutoProvisionSecondary:GatewaytemplateTunnelConfigsAutoProvisionSecondary": {
            "properties": {
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, only needed if `vars_only`==`false`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateTunnelConfigsIkeProposal:GatewaytemplateTunnelConfigsIkeProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateTunnelConfigsIpsecProposal:GatewaytemplateTunnelConfigsIpsecProposal": {
            "properties": {
                "authAlgo": {
                    "type": "string",
                    "description": "enum: `md5`, `sha1`, `sha2`\n"
                },
                "dhGroup": {
                    "type": "string",
                    "description": "Only if `provider`==`custom-ipsec`. enum:\n  * 1\n  * 2 (1024-bit)\n  * 5\n  * 14 (default, 2048-bit)\n  * 15 (3072-bit)\n  * 16 (4096-bit)\n  * 19 (256-bit ECP)\n  * 20 (384-bit ECP)\n  * 21 (521-bit ECP)\n  * 24 (2048-bit ECP)\n"
                },
                "encAlgo": {
                    "type": "string",
                    "description": "enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhGroup",
                        "encAlgo"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateTunnelConfigsPrimary:GatewaytemplateTunnelConfigsPrimary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:org/GatewaytemplateTunnelConfigsProbe:GatewaytemplateTunnelConfigsProbe": {
            "properties": {
                "interval": {
                    "type": "integer",
                    "description": "how often to trigger the probe\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "number of consecutive misses before declaring the tunnel down\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "time within which to complete the connectivity check\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `http`, `icmp`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/GatewaytemplateTunnelConfigsSecondary:GatewaytemplateTunnelConfigsSecondary": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`\n"
                },
                "probeIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`\n"
                },
                "wanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "hosts",
                "wanNames"
            ]
        },
        "junipermist:org/GatewaytemplateTunnelProviderOptions:GatewaytemplateTunnelProviderOptions": {
            "properties": {
                "jse": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptionsJse:GatewaytemplateTunnelProviderOptionsJse",
                    "description": "for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added\n"
                },
                "zscaler": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptionsZscaler:GatewaytemplateTunnelProviderOptionsZscaler",
                    "description": "for zscaler-ipsec and zscaler-gre\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateTunnelProviderOptionsJse:GatewaytemplateTunnelProviderOptionsJse": {
            "properties": {
                "numUsers": {
                    "type": "integer"
                },
                "orgName": {
                    "type": "string",
                    "description": "JSE Organization name\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateTunnelProviderOptionsZscaler:GatewaytemplateTunnelProviderOptionsZscaler": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to enforce user authentication\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "subLocations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptionsZscalerSubLocation:GatewaytemplateTunnelProviderOptionsZscalerSubLocation"
                    },
                    "description": "`sub-locations` can be used for specific uses cases to define different configuration based on the user network\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "location uses proxy chaining to forward traffic\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateTunnelProviderOptionsZscalerSubLocation:GatewaytemplateTunnelProviderOptionsZscalerSubLocation": {
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display Acceptable Use Policy (AUP)\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "proxy HTTPs traffic, requiring Zscaler cert to be installed in browser\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Required if `aup_enabled`==`true`. Days before AUP is requested again\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enable this option to authenticate users\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`false`, display caution notification for non-authenticated users\n"
                },
                "dnBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP`==`true`, idle Time to Disassociation\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network name\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "if `true`, enable the firewall control option\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Can only be `true` when `auth_required`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idle_time_in_minutes`, refresh Time for re-validation of Surrogacy\n"
                },
                "upBandwidth": {
                    "type": "number",
                    "description": "the download bandwidth cap of the link, in Mbps. Disabled if not set\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateVrfConfig:GatewaytemplateVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/GatewaytemplateVrfInstances:GatewaytemplateVrfInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/IdpprofileOverwrite:IdpprofileOverwrite": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum:\n  * alert (default)\n  * drop: siliently dropping packets\n  * close: notify client/server to close connection\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/IdpprofileOverwriteMatching:IdpprofileOverwriteMatching"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "name"
                    ]
                }
            }
        },
        "junipermist:org/IdpprofileOverwriteMatching:IdpprofileOverwriteMatching": {
            "properties": {
                "attackNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dstSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/InventoryDevice:InventoryDevice": {
            "properties": {
                "claimCode": {
                    "type": "string",
                    "description": "used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)\n"
                },
                "deviceprofileId": {
                    "type": "string",
                    "description": "deviceprofile id if assigned, null if not assigned\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "hostname reported by the device\n"
                },
                "id": {
                    "type": "string",
                    "description": "device id\n"
                },
                "mac": {
                    "type": "string",
                    "description": "used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)\n"
                },
                "model": {
                    "type": "string",
                    "description": "device model\n"
                },
                "orgId": {
                    "type": "string"
                },
                "serial": {
                    "type": "string",
                    "description": "device serial\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Site ID. Used to assign device to a Site\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `ap`, `gateway`, `switch`\n"
                },
                "unclaimWhenDestroyed": {
                    "type": "boolean",
                    "description": "Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`\n"
                },
                "vcMac": {
                    "type": "string",
                    "description": "if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Clust, MAC Address of the Cluster\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "claimCode",
                        "deviceprofileId",
                        "hostname",
                        "id",
                        "mac",
                        "model",
                        "orgId",
                        "serial",
                        "type",
                        "unclaimWhenDestroyed",
                        "vcMac"
                    ]
                }
            }
        },
        "junipermist:org/InventoryInventory:InventoryInventory": {
            "properties": {
                "claimCode": {
                    "type": "string",
                    "description": "device claim code\n"
                },
                "deviceprofileId": {
                    "type": "string",
                    "description": "deviceprofile id if assigned, null if not assigned\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "hostname reported by the device\n"
                },
                "id": {
                    "type": "string",
                    "description": "device id\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device MAC address\n"
                },
                "model": {
                    "type": "string",
                    "description": "device model\n"
                },
                "orgId": {
                    "type": "string"
                },
                "serial": {
                    "type": "string",
                    "description": "device serial\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Site ID. Used to assign device to a Site\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `ap`, `gateway`, `switch`\n"
                },
                "unclaimWhenDestroyed": {
                    "type": "boolean",
                    "description": "Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`\n"
                },
                "vcMac": {
                    "type": "string",
                    "description": "if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Clust, MAC Address of the Cluster\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "claimCode",
                        "deviceprofileId",
                        "hostname",
                        "id",
                        "mac",
                        "model",
                        "orgId",
                        "serial",
                        "type",
                        "unclaimWhenDestroyed",
                        "vcMac"
                    ]
                }
            }
        },
        "junipermist:org/NacruleMatching:NacruleMatching": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`\n"
                },
                "nactags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "portTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "siteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of site ids to match\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of sitegroup ids to match\n"
                },
                "vendors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of vendors to match\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nactags",
                        "portTypes",
                        "siteIds",
                        "sitegroupIds",
                        "vendors"
                    ]
                }
            }
        },
        "junipermist:org/NacruleNotMatching:NacruleNotMatching": {
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`\n"
                },
                "nactags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "portTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "siteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of site ids to match\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of sitegroup ids to match\n"
                },
                "vendors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of vendors to match\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nactags",
                        "portTypes",
                        "siteIds",
                        "sitegroupIds",
                        "vendors"
                    ]
                }
            }
        },
        "junipermist:org/NetworkInternalAccess:NetworkInternalAccess": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkInternetAccess:NetworkInternetAccess": {
            "properties": {
                "createSimpleServicePolicy": {
                    "type": "boolean"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkInternetAccessDestinationNat:NetworkInternetAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "restricted": {
                    "type": "boolean",
                    "description": "by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkInternetAccessStaticNat:NetworkInternetAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createSimpleServicePolicy",
                        "restricted"
                    ]
                }
            }
        },
        "junipermist:org/NetworkInternetAccessDestinationNat:NetworkInternetAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be a Port (i.e. \"443\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkInternetAccessStaticNat:NetworkInternetAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "wanName": {
                    "type": "string",
                    "description": "SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. \"{{myvar}}\")\n"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/NetworkMulticast:NetworkMulticast": {
            "properties": {
                "disableIgmp": {
                    "type": "boolean",
                    "description": "if the network will only be the soruce of the multicast traffic, IGMP can be disabled\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkMulticastGroups:NetworkMulticastGroups"
                    },
                    "description": "Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example \"225.1.0.3/32\")\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableIgmp",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/NetworkMulticastGroups:NetworkMulticastGroups": {
            "properties": {
                "rpIp": {
                    "type": "string",
                    "description": "RP (rendezvous point) IP Address\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkTenants:NetworkTenants": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkVpnAccess:NetworkVpnAccess": {
            "properties": {
                "advertisedSubnet": {
                    "type": "string",
                    "description": "if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side\n"
                },
                "allowPing": {
                    "type": "boolean",
                    "description": "whether to allow ping from vpn into this routed network\n"
                },
                "destinationNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkVpnAccessDestinationNat:NetworkVpnAccessDestinationNat"
                    },
                    "description": "Property key can be an External IP (i.e. \"63.16.0.3\"), an External IP:Port (i.e. \"63.16.0.3:443\"), an External Port (i.e. \":443\"), an External CIDR (i.e. \"63.16.0.0/30\"), an External CIDR:Port (i.e. \"63.16.0.0/30:443\") or a Variable (i.e. \"{{myvar}}\"). At least one of the `internal_ip` or `port` must be defined\n"
                },
                "natPool": {
                    "type": "string",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub\n"
                },
                "noReadvertiseToLanBgp": {
                    "type": "boolean",
                    "description": "toward LAN-side BGP peers\n"
                },
                "noReadvertiseToLanOspf": {
                    "type": "boolean",
                    "description": "toward LAN-side OSPF peers\n"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "toward overlay\nhow HUB should deal with routes it received from Spokes\n"
                },
                "otherVrfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "by default, the routes are only readvertised toward the same vrf on spoke\nto allow it to be leaked to other vrfs\n"
                },
                "routed": {
                    "type": "boolean",
                    "description": "whether this network is routable\n"
                },
                "sourceNat": {
                    "$ref": "#/types/junipermist:org/NetworkVpnAccessSourceNat:NetworkVpnAccessSourceNat",
                    "description": "if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub\n"
                },
                "staticNat": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkVpnAccessStaticNat:NetworkVpnAccessStaticNat"
                    },
                    "description": "Property key may be an External IP Address (i.e. \"63.16.0.3\"), a CIDR (i.e. \"63.16.0.12/20\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "summarizedSubnet": {
                    "type": "string",
                    "description": "toward overlay\nhow HUB should deal with routes it received from Spokes\n"
                },
                "summarizedSubnetToLanBgp": {
                    "type": "string",
                    "description": "toward LAN-side BGP peers\n"
                },
                "summarizedSubnetToLanOspf": {
                    "type": "string",
                    "description": "toward LAN-side OSPF peers\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noReadvertiseToLanBgp",
                        "noReadvertiseToLanOspf",
                        "otherVrfs",
                        "sourceNat",
                        "staticNat"
                    ]
                }
            }
        },
        "junipermist:org/NetworkVpnAccessDestinationNat:NetworkVpnAccessDestinationNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Destination NAT destination IP Address. Must be an IP (i.e. \"192.168.70.30\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkVpnAccessSourceNat:NetworkVpnAccessSourceNat": {
            "properties": {
                "externalIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworkVpnAccessStaticNat:NetworkVpnAccessStaticNat": {
            "properties": {
                "internalIp": {
                    "type": "string",
                    "description": "The Static NAT destination IP Address. Must be an IP Address (i.e. \"192.168.70.3\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "internalIp",
                "name"
            ]
        },
        "junipermist:org/NetworktemplateAclPolicy:NetworktemplateAclPolicy": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclPolicyAction:NetworktemplateAclPolicyAction"
                    },
                    "description": "ACL Policy Actions:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                },
                "name": {
                    "type": "string"
                },
                "srcTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ACL Policy Source Tags:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateAclPolicyAction:NetworktemplateAclPolicyAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "dstTag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dstTag"
            ]
        },
        "junipermist:org/NetworktemplateAclTags:NetworktemplateAclTags": {
            "properties": {
                "gbpTag": {
                    "type": "integer",
                    "description": "required if\n  - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)\n  - `type`==`gbp_resource`\n  - `type`==`static_gbp` (applying gbp tag against matching conditions)\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if \n- `type`==`mac`\n- `type`==`static_gbp` if from matching mac\n"
                },
                "network": {
                    "type": "string",
                    "description": "if:\n  * `type`==`mac` (optional. default is `any`)\n  * `type`==`subnet` (optional. default is `any`)\n  * `type`==`network`\n  * `type`==`resource` (optional. default is `any`)\n  * `type`==`static_gbp` if from matching network (vlan)'\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "required if:\n  * `type`==`radius_group`\n  * `type`==`static_gbp`\nif from matching radius_group\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclTagsSpec:NetworktemplateAclTagsSpec"
                    },
                    "description": "if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if \n- `type`==`subnet` \n- `type`==`resource` (optional. default is `any`)\n- `type`==`static_gbp` if from matching subnet\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: \n  * `any`: matching anything not identified\n  * `dynamic_gbp`: from the gbp_tag received from RADIUS\n  * `gbp_resource`: can only be used in `dst_tags`\n  * `mac`\n  * `network`\n  * `radius_group`\n  * `resource`: can only be used in `dst_tags`\n  * `static_gbp`: applying gbp tag against matching conditions\n  * `subnet`'\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macs",
                        "subnets",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateAclTagsSpec:NetworktemplateAclTagsSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "`tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocol_number` is between 1-254, default is `any` `protocol_number` is between 1-254\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping": {
            "properties": {
                "allNetworks": {
                    "type": "boolean"
                },
                "enableArpSpoofCheck": {
                    "type": "boolean",
                    "description": "Enable for dynamic ARP inspection check\n"
                },
                "enableIpSourceGuard": {
                    "type": "boolean",
                    "description": "Enable for check for forging source IP address\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `all_networks`==`false`, list of network with DHCP snooping enabled\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes6NextQualified:NetworktemplateExtraRoutes6NextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateExtraRoutes6NextQualified:NetworktemplateExtraRoutes6NextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutesNextQualified:NetworktemplateExtraRoutesNextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateExtraRoutesNextQualified:NetworktemplateExtraRoutesNextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateMistNac:NetworktemplateMistNac": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateNetworks:NetworktemplateNetworks": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv4 Virtual Gateway\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv6 Virtual Gateway\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required). NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set\n"
                },
                "isolationVlanId": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "subnet6": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isolation",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateOspfAreas:NetworktemplateOspfAreas": {
            "properties": {
                "includeLoopback": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateOspfAreasNetworks:NetworktemplateOspfAreasNetworks"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "OSPF type. enum: `default`, `nssa`, `stub`\n"
                }
            },
            "type": "object",
            "required": [
                "networks"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "includeLoopback",
                        "networks",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateOspfAreasNetworks:NetworktemplateOspfAreasNetworks": {
            "properties": {
                "authKeys": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Required if `auth_type`==`md5`. Property key is the key number\n"
                },
                "authPassword": {
                    "type": "string",
                    "description": "Required if `auth_type`==`password`, the password, max length is 8\n"
                },
                "authType": {
                    "type": "string",
                    "description": "auth type. enum: `md5`, `none`, `password`\n"
                },
                "bfdMinimumInterval": {
                    "type": "integer"
                },
                "deadInterval": {
                    "type": "integer"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "helloInterval": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`\n"
                },
                "metric": {
                    "type": "integer"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned OSPF routes toward overlay\n"
                },
                "passive": {
                    "type": "boolean",
                    "description": "whether to send OSPF-Hello\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authKeys",
                        "authType",
                        "interfaceType",
                        "noReadvertiseToOverlay",
                        "passive"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplatePortMirroring:NetworktemplatePortMirroring": {
            "properties": {
                "inputNetworksIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsEgresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "outputNetwork": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                },
                "outputPortId": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "inputNetworksIngresses",
                        "inputPortIdsEgresses",
                        "inputPortIdsIngresses"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplatePortUsages:NetworktemplatePortUsages": {
            "properties": {
                "allNetworks": {
                    "type": "boolean",
                    "description": "Only if `mode`==`trunk` whether to trunk all network/vlans\n"
                },
                "allowDhcpd": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.\n"
                },
                "allowMultipleSupplicants": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "bypassAuthWhenServerDown": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down\n"
                },
                "bypassAuthWhenServerDownForUnkonwnClient": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down\n"
                },
                "description": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether the port is disabled\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`\n"
                },
                "dynamicVlanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth\n"
                },
                "enableQos": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "guestNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)\n"
                },
                "interSwitchLink": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` inter_switch_link is used together with \"isolation\" under networks. NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together\n"
                },
                "macAuthOnly": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`\n"
                },
                "macAuthPreferred": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.\n"
                },
                "macAuthProtocol": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform\n"
                },
                "mode": {
                    "type": "string",
                    "description": "`mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`==`trunk`, the list of network/vlans\n"
                },
                "persistMac": {
                    "type": "boolean",
                    "description": "Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses\n"
                },
                "poeDisabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port\n"
                },
                "portAuth": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`\n"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` native network/vlan for untagged traffic\n"
                },
                "reauthInterval": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range\n"
                },
                "resetDefaultWhen": {
                    "type": "string",
                    "description": "Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplatePortUsagesRule:NetworktemplatePortUsagesRule"
                    },
                    "description": "Only if `mode`==`dynamic`\n"
                },
                "serverFailNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan\n"
                },
                "serverRejectNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "stormControl": {
                    "$ref": "#/types/junipermist:org/NetworktemplatePortUsagesStormControl:NetworktemplatePortUsagesStormControl",
                    "description": "Switch storm control. Only if `mode`!=`dynamic`\n"
                },
                "stpEdge": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames\n"
                },
                "stpNoRootPort": {
                    "type": "boolean"
                },
                "stpP2p": {
                    "type": "boolean"
                },
                "uiEvpntopoId": {
                    "type": "string",
                    "description": "optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches\n"
                },
                "useVstp": {
                    "type": "boolean",
                    "description": "if this is connected to a vstp network\n"
                },
                "voipNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allNetworks",
                        "allowMultipleSupplicants",
                        "bypassAuthWhenServerDown",
                        "bypassAuthWhenServerDownForUnkonwnClient",
                        "disableAutoneg",
                        "disabled",
                        "duplex",
                        "dynamicVlanNetworks",
                        "enableMacAuth",
                        "enableQos",
                        "interSwitchLink",
                        "macAuthProtocol",
                        "macLimit",
                        "networks",
                        "persistMac",
                        "poeDisabled",
                        "reauthInterval",
                        "resetDefaultWhen",
                        "speed",
                        "stpEdge",
                        "stpNoRootPort",
                        "stpP2p",
                        "useVstp"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplatePortUsagesRule:NetworktemplatePortUsagesRule": {
            "properties": {
                "equals": {
                    "type": "string"
                },
                "equalsAnies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "use `equals_any` to match any item in a list\n"
                },
                "expression": {
                    "type": "string",
                    "description": "\"[0:3]\":\"abcdef\" \u003e \"abc\"\n\"split(.)[1]\": \"a.b.c\" \u003e \"b\"\n\"split(-)[1][0:3]: \"a1234-b5678-c90\" \u003e \"b56\"\n"
                },
                "src": {
                    "type": "string",
                    "description": "enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "`port_usage` name\n"
                }
            },
            "type": "object",
            "required": [
                "src"
            ]
        },
        "junipermist:org/NetworktemplatePortUsagesStormControl:NetworktemplatePortUsagesStormControl": {
            "properties": {
                "noBroadcast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on broadcast traffic\n"
                },
                "noMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on multicast traffic\n"
                },
                "noRegisteredMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on registered multicast traffic\n"
                },
                "noUnknownUnicast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on unknown unicast traffic\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noBroadcast",
                        "noMulticast",
                        "noRegisteredMulticast",
                        "noUnknownUnicast",
                        "percentage"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig": {
            "properties": {
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRadiusConfigAcctServer:NetworktemplateRadiusConfigAcctServer"
                    }
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRadiusConfigAuthServer:NetworktemplateRadiusConfigAuthServer"
                    }
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout\n"
                },
                "network": {
                    "type": "string",
                    "description": "use `network`or `source_ip`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "use `network`or `source_ip`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acctInterimInterval",
                        "authServersRetries",
                        "authServersTimeout"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRadiusConfigAcctServer:NetworktemplateRadiusConfigAcctServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Acct port of RADIUS server\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRadiusConfigAuthServer:NetworktemplateRadiusConfigAuthServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Auth port of RADIUS server\n"
                },
                "requireMessageAuthenticator": {
                    "type": "boolean",
                    "description": "whether to require Message-Authenticator in requests\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requireMessageAuthenticator",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogArchive:NetworktemplateRemoteSyslogArchive"
                },
                "console": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogConsole:NetworktemplateRemoteSyslogConsole"
                },
                "enabled": {
                    "type": "boolean"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogFile:NetworktemplateRemoteSyslogFile"
                    }
                },
                "network": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "sendToAllServers": {
                    "type": "boolean"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogServer:NetworktemplateRemoteSyslogServer"
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "enum: `millisecond`, `year`, `year millisecond`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogUser:NetworktemplateRemoteSyslogUser"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "sendToAllServers"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslogArchive:NetworktemplateRemoteSyslogArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateRemoteSyslogConsole:NetworktemplateRemoteSyslogConsole": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogConsoleContent:NetworktemplateRemoteSyslogConsoleContent"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateRemoteSyslogConsoleContent:NetworktemplateRemoteSyslogConsoleContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslogFile:NetworktemplateRemoteSyslogFile": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogFileArchive:NetworktemplateRemoteSyslogFileArchive"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogFileContent:NetworktemplateRemoteSyslogFileContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "file": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "structuredData": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateRemoteSyslogFileArchive:NetworktemplateRemoteSyslogFileArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateRemoteSyslogFileContent:NetworktemplateRemoteSyslogFileContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslogServer:NetworktemplateRemoteSyslogServer": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogServerContent:NetworktemplateRemoteSyslogServerContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "host": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `tcp`, `udp`\n"
                },
                "routingInstance": {
                    "type": "string"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "structuredData": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "port",
                        "protocol",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslogServerContent:NetworktemplateRemoteSyslogServerContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateRemoteSyslogUser:NetworktemplateRemoteSyslogUser": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslogUserContent:NetworktemplateRemoteSyslogUserContent"
                    }
                },
                "match": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateRemoteSyslogUserContent:NetworktemplateRemoteSyslogUserContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig": {
            "properties": {
                "clientLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigClientList:NetworktemplateSnmpConfigClientList"
                    }
                },
                "contact": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "engineId": {
                    "type": "string",
                    "description": "enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "trapGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigTrapGroup:NetworktemplateSnmpConfigTrapGroup"
                    }
                },
                "v2cConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV2cConfig:NetworktemplateSnmpConfigV2cConfig"
                    }
                },
                "v3Config": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3Config:NetworktemplateSnmpConfigV3Config"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigView:NetworktemplateSnmpConfigView"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "network"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSnmpConfigClientList:NetworktemplateSnmpConfigClientList": {
            "properties": {
                "clientListName": {
                    "type": "string"
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigTrapGroup:NetworktemplateSnmpConfigTrapGroup": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string",
                    "description": "enum: `all`, `v1`, `v2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "version"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSnmpConfigV2cConfig:NetworktemplateSnmpConfigV2cConfig": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "clientListName": {
                    "type": "string",
                    "description": "client_list_name here should refer to client_list above\n"
                },
                "communityName": {
                    "type": "string"
                },
                "view": {
                    "type": "string",
                    "description": "view name here should be defined in views above\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3Config:NetworktemplateSnmpConfigV3Config": {
            "properties": {
                "notifies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigNotify:NetworktemplateSnmpConfigV3ConfigNotify"
                    }
                },
                "notifyFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigNotifyFilter:NetworktemplateSnmpConfigV3ConfigNotifyFilter"
                    }
                },
                "targetAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigTargetAddress:NetworktemplateSnmpConfigV3ConfigTargetAddress"
                    }
                },
                "targetParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigTargetParameter:NetworktemplateSnmpConfigV3ConfigTargetParameter"
                    }
                },
                "usm": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigUsm:NetworktemplateSnmpConfigV3ConfigUsm"
                },
                "vacm": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigVacm:NetworktemplateSnmpConfigV3ConfigVacm"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigNotify:NetworktemplateSnmpConfigV3ConfigNotify": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `inform`, `trap`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigNotifyFilter:NetworktemplateSnmpConfigV3ConfigNotifyFilter": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigNotifyFilterContent:NetworktemplateSnmpConfigV3ConfigNotifyFilterContent"
                    }
                },
                "profileName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigNotifyFilterContent:NetworktemplateSnmpConfigV3ConfigNotifyFilterContent": {
            "properties": {
                "include": {
                    "type": "boolean"
                },
                "oid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigTargetAddress:NetworktemplateSnmpConfigV3ConfigTargetAddress": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressMask": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "tagList": {
                    "type": "string",
                    "description": "\u003crefer to notify tag, can be multiple with blank\n"
                },
                "targetAddressName": {
                    "type": "string"
                },
                "targetParameters": {
                    "type": "string",
                    "description": "refer to notify target parameters name\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigTargetParameter:NetworktemplateSnmpConfigV3ConfigTargetParameter": {
            "properties": {
                "messageProcessingModel": {
                    "type": "string",
                    "description": "enum: `v1`, `v2c`, `v3`\n"
                },
                "name": {
                    "type": "string"
                },
                "notifyFilter": {
                    "type": "string",
                    "description": "refer to profile-name in notify_filter\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                },
                "securityName": {
                    "type": "string",
                    "description": "refer to security_name in usm\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigUsm:NetworktemplateSnmpConfigV3ConfigUsm": {
            "properties": {
                "engineType": {
                    "type": "string",
                    "description": "enum: `local_engine`, `remote_engine`\n"
                },
                "engineid": {
                    "type": "string",
                    "description": "required only if `engine_type`==`remote_engine`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigUsmUser:NetworktemplateSnmpConfigV3ConfigUsmUser"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigUsmUser:NetworktemplateSnmpConfigV3ConfigUsmUser": {
            "properties": {
                "authenticationPassword": {
                    "type": "string",
                    "description": "Not required if `authentication_type`==`authentication_none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.\n",
                    "secret": true
                },
                "authenticationType": {
                    "type": "string",
                    "description": "sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`\n"
                },
                "encryptionPassword": {
                    "type": "string",
                    "description": "Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters\n",
                    "secret": true
                },
                "encryptionType": {
                    "type": "string",
                    "description": "enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigVacm:NetworktemplateSnmpConfigV3ConfigVacm": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmAccess:NetworktemplateSnmpConfigV3ConfigVacmAccess"
                    }
                },
                "securityToGroup": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmAccess:NetworktemplateSnmpConfigV3ConfigVacmAccess": {
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "prefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList:NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList:NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList": {
            "properties": {
                "contextPrefix": {
                    "type": "string",
                    "description": "only required if `type`==`context_prefix`\n"
                },
                "notifyView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "readView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `any`, `usm`, `v1`, `v2c`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `context_prefix`, `default_context_prefix`\n"
                },
                "writeView": {
                    "type": "string",
                    "description": "refer to view name\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent"
                    }
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "refer to group_name under access\n"
                },
                "securityName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSnmpConfigView:NetworktemplateSnmpConfigView": {
            "properties": {
                "include": {
                    "type": "boolean",
                    "description": "if the root oid configured is included\n"
                },
                "oid": {
                    "type": "string"
                },
                "viewName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatchingRule:NetworktemplateSwitchMatchingRule"
                    },
                    "description": "list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `match_model`, `match_name` or `match_role` must be defined\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateSwitchMatchingRule:NetworktemplateSwitchMatchingRule": {
            "properties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatchingRuleIpConfig:NetworktemplateSwitchMatchingRuleIpConfig",
                    "description": "In-Band Management interface configuration\n"
                },
                "matchModel": {
                    "type": "string",
                    "description": "string the switch model must start with to use this rule. It is possible to combine with the `match_name` and `match_role` attributes\n"
                },
                "matchName": {
                    "type": "string",
                    "description": "string the switch name must start with to use this rule. Use the `match_name_offset` to indicate the first character of the switch name to compare to. It is possible to combine with the `match_model` and `match_role` attributes\n"
                },
                "matchNameOffset": {
                    "type": "integer",
                    "description": "first character of the switch name to compare to the `match_name` value\n"
                },
                "matchRole": {
                    "type": "string",
                    "description": "string the switch role must start with to use this rule. It is possible to combine with the `match_name` and `match_model` attributes\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`\n",
                    "deprecationMessage": "The `match_type` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `match_name`, `match_model` and `match_role`attribuites and may be removed in future versions.\nPlease update your configurations."
                },
                "matchValue": {
                    "type": "string",
                    "deprecationMessage": "The `match_value` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `match_name`, `match_model` and `match_role`attribuites and may be removed in future versions.\nPlease update your configurations."
                },
                "name": {
                    "type": "string"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatchingRuleOobIpConfig:NetworktemplateSwitchMatchingRuleOobIpConfig",
                    "description": "Out-of-Band Management interface configuration\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatchingRulePortConfig:NetworktemplateSwitchMatchingRulePortConfig"
                    },
                    "description": "Propery key is the interface name or interface range\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatchingRulePortMirroring:NetworktemplateSwitchMatchingRulePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalConfigCmds",
                        "matchModel",
                        "matchName",
                        "matchNameOffset",
                        "matchType",
                        "matchValue"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMatchingRuleIpConfig:NetworktemplateSwitchMatchingRuleIpConfig": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "VLAN Name for the management interface\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMatchingRuleOobIpConfig:NetworktemplateSwitchMatchingRuleOobIpConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "useMgmtVrf",
                        "useMgmtVrfForHostOut"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMatchingRulePortConfig:NetworktemplateSwitchMatchingRulePortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "To disable LACP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "integer",
                    "description": "Users could force to use the designated AE name\n"
                },
                "aeLacpSlow": {
                    "type": "boolean",
                    "description": "to use fast timeout\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm\n"
                },
                "description": {
                    "type": "string"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "if `speed` and `duplex` are specified, whether to disable autonegotiation\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "dynamicUsage": {
                    "type": "string",
                    "description": "Enable dynamic usage for this port. Set to `dynamic` to enable.\n"
                },
                "esilag": {
                    "type": "boolean"
                },
                "mtu": {
                    "type": "integer",
                    "description": "media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation\n"
                },
                "noLocalOverwrite": {
                    "type": "boolean",
                    "description": "prevent helpdesk to override the port config\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "speed": {
                    "type": "string",
                    "description": "enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. If EVPN is used, use `evpn_uplink`or `evpn_downlink`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregated",
                        "disableAutoneg",
                        "duplex",
                        "mtu",
                        "poeDisabled",
                        "speed",
                        "usage"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMatchingRulePortMirroring:NetworktemplateSwitchMatchingRulePortMirroring": {
            "properties": {
                "inputNetworksIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsEgresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "outputNetwork": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                },
                "outputPortId": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "inputNetworksIngresses",
                        "inputPortIdsEgresses",
                        "inputPortIdsIngresses"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt": {
            "properties": {
                "apAffinityThreshold": {
                    "type": "integer",
                    "description": "ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.\n"
                },
                "cliBanner": {
                    "type": "string",
                    "description": "Set Banners for switches. Allows markup formatting\n"
                },
                "cliIdleTimeout": {
                    "type": "integer",
                    "description": "Sets timeout for switches\n"
                },
                "configRevertTimer": {
                    "type": "integer",
                    "description": "the rollback timer for commit confirmed\n"
                },
                "dhcpOptionFqdn": {
                    "type": "boolean",
                    "description": "Enable to provide the FQDN with DHCP option 81\n"
                },
                "disableOobDownAlarm": {
                    "type": "boolean"
                },
                "localAccounts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtLocalAccounts:NetworktemplateSwitchMgmtLocalAccounts"
                    },
                    "description": "Property key is the user name. For Local user authentication\n"
                },
                "mxedgeProxyHost": {
                    "type": "string"
                },
                "mxedgeProxyPort": {
                    "type": "integer"
                },
                "protectRe": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtProtectRe:NetworktemplateSwitchMgmtProtectRe",
                    "description": "restrict inbound-traffic to host\nwhen enabled, all traffic that is not essential to our operation will be dropped \ne.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works\n"
                },
                "rootPassword": {
                    "type": "string",
                    "secret": true
                },
                "tacacs": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtTacacs:NetworktemplateSwitchMgmtTacacs"
                },
                "useMxedgeProxy": {
                    "type": "boolean",
                    "description": "to use mxedge as proxy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apAffinityThreshold",
                        "configRevertTimer",
                        "dhcpOptionFqdn",
                        "mxedgeProxyPort"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtLocalAccounts:NetworktemplateSwitchMgmtLocalAccounts": {
            "properties": {
                "password": {
                    "type": "string",
                    "secret": true
                },
                "role": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "role"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtProtectRe:NetworktemplateSwitchMgmtProtectRe": {
            "properties": {
                "allowedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optionally, services we'll allow. enum: `icmp`, `ssh`\n"
                },
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtProtectReCustom:NetworktemplateSwitchMgmtProtectReCustom"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled, all traffic that is not essential to our operation will be dropped\ne.g. ntp / dns / traffic to mist will be allowed by default\n     if dhcpd is enabled, we'll make sure it works\n"
                },
                "trustedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "host/subnets we'll allow traffic to/from\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedServices",
                        "customs",
                        "enabled",
                        "trustedHosts"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtProtectReCustom:NetworktemplateSwitchMgmtProtectReCustom": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtTacacs:NetworktemplateSwitchMgmtTacacs": {
            "properties": {
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtTacacsAcctServer:NetworktemplateSwitchMgmtTacacsAcctServer"
                    }
                },
                "defaultRole": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string",
                    "description": "which network the TACACS server resides\n"
                },
                "tacplusServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmtTacacsTacplusServer:NetworktemplateSwitchMgmtTacacsTacplusServer"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultRole"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtTacacsAcctServer:NetworktemplateSwitchMgmtTacacsAcctServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateSwitchMgmtTacacsTacplusServer:NetworktemplateSwitchMgmtTacacsTacplusServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:org/NetworktemplateVrfConfig:NetworktemplateVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateVrfInstances:NetworktemplateVrfInstances": {
            "properties": {
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateVrfInstancesExtraRoutes:NetworktemplateVrfInstancesExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:org/NetworktemplateVrfInstancesExtraRoutes:NetworktemplateVrfInstancesExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string",
                    "description": "Next-hop address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:org/RftemplateBand24:RftemplateBand24": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 2.4GHz band. enum: `20`, `40`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channels",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateBand5:RftemplateBand5": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "channels",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateBand5On24Radio:RftemplateBand5On24Radio": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateBand6:RftemplateBand6": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                },
                "standardPower": {
                    "type": "boolean",
                    "description": "for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "channels",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble",
                        "standardPower"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateModelSpecific:RftemplateModelSpecific": {
            "properties": {
                "antGain24": {
                    "type": "integer"
                },
                "antGain5": {
                    "type": "integer"
                },
                "antGain6": {
                    "type": "integer"
                },
                "band24": {
                    "$ref": "#/types/junipermist:org/RftemplateModelSpecificBand24:RftemplateModelSpecificBand24",
                    "description": "Radio Band AP settings\n"
                },
                "band24Usage": {
                    "type": "string",
                    "description": "enum: `24`, `5`, `6`, `auto`\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:org/RftemplateModelSpecificBand5:RftemplateModelSpecificBand5",
                    "description": "Radio Band AP settings\n"
                },
                "band5On24Radio": {
                    "$ref": "#/types/junipermist:org/RftemplateModelSpecificBand5On24Radio:RftemplateModelSpecificBand5On24Radio",
                    "description": "Radio Band AP settings\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:org/RftemplateModelSpecificBand6:RftemplateModelSpecificBand6",
                    "description": "Radio Band AP settings\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/RftemplateModelSpecificBand24:RftemplateModelSpecificBand24": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 2.4GHz band. enum: `20`, `40`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateModelSpecificBand5:RftemplateModelSpecificBand5": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateModelSpecificBand5On24Radio:RftemplateModelSpecificBand5On24Radio": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 5GHz band. enum: `20`, `40`, `80`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble"
                    ]
                }
            }
        },
        "junipermist:org/RftemplateModelSpecificBand6:RftemplateModelSpecificBand6": {
            "properties": {
                "allowRrmDisable": {
                    "type": "boolean"
                },
                "antGain": {
                    "type": "integer"
                },
                "antennaMode": {
                    "type": "string",
                    "description": "enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`\n"
                },
                "bandwidth": {
                    "type": "integer",
                    "description": "channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "For RFTemplates. List of channels, null or empty array means auto\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "whether to disable the radio\n"
                },
                "power": {
                    "type": "integer",
                    "description": "TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …\n"
                },
                "powerMax": {
                    "type": "integer",
                    "description": "when power=0, max tx power to use, HW-specific values will be used if not set\n"
                },
                "powerMin": {
                    "type": "integer",
                    "description": "when power=0, min tx power to use, HW-specific values will be used if not set\n"
                },
                "preamble": {
                    "type": "string",
                    "description": "enum: `auto`, `long`, `short`\n"
                },
                "standardPower": {
                    "type": "boolean",
                    "description": "for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowRrmDisable",
                        "antGain",
                        "antennaMode",
                        "bandwidth",
                        "disabled",
                        "power",
                        "powerMax",
                        "powerMin",
                        "preamble",
                        "standardPower"
                    ]
                }
            }
        },
        "junipermist:org/ServiceSpec:ServiceSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "port number, port range, or variable\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "`https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.\n`protocol_number` is between 1-254\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "protocol"
                    ]
                }
            }
        },
        "junipermist:org/ServicepolicyAppqoe:ServicepolicyAppqoe": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/ServicepolicyEwf:ServicepolicyEwf": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "blockMessage": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/ServicepolicyIdp:ServicepolicyIdp": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idpprofileId": {
                    "type": "string",
                    "description": "org_level IDP Profile can be used, this takes precedence over `profile`\n"
                },
                "profile": {
                    "type": "string",
                    "description": "`strict` (default) / `standard` / or keys from from idp_profiles\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "profile"
                    ]
                }
            }
        },
        "junipermist:org/SettingApiPolicy:SettingApiPolicy": {
            "properties": {
                "noReveal": {
                    "type": "boolean",
                    "description": "by default, API hides password/secrets when the user doesn't have write access\n  * `true`: API will hide passwords/secrets for all users\n  * `false`: API will hide passwords/secrets for read-only users\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noReveal"
                    ]
                }
            }
        },
        "junipermist:org/SettingCelona:SettingCelona": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "apiPrefix": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "apiPrefix"
            ]
        },
        "junipermist:org/SettingCloudshark:SettingCloudshark": {
            "properties": {
                "apitoken": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "if using CS Enteprise\n"
                }
            },
            "type": "object",
            "required": [
                "apitoken"
            ]
        },
        "junipermist:org/SettingCradlepoint:SettingCradlepoint": {
            "properties": {
                "cpApiId": {
                    "type": "string"
                },
                "cpApiKey": {
                    "type": "string",
                    "secret": true
                },
                "ecmApiId": {
                    "type": "string"
                },
                "ecmApiKey": {
                    "type": "string",
                    "secret": true
                },
                "enableLldp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cpApiId",
                        "cpApiKey",
                        "ecmApiId",
                        "ecmApiKey",
                        "enableLldp"
                    ]
                }
            }
        },
        "junipermist:org/SettingDeviceCert:SettingDeviceCert": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "junipermist:org/SettingInstaller:SettingInstaller": {
            "properties": {
                "allowAllDevices": {
                    "type": "boolean"
                },
                "allowAllSites": {
                    "type": "boolean"
                },
                "extraSiteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gracePeriod": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraSiteIds"
                    ]
                }
            }
        },
        "junipermist:org/SettingJcloud:SettingJcloud": {
            "properties": {
                "orgApitoken": {
                    "type": "string",
                    "description": "JCloud Org Token\n"
                },
                "orgApitokenName": {
                    "type": "string",
                    "description": "JCloud Org Token Name\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "JCloud Org ID\n"
                }
            },
            "type": "object",
            "required": [
                "orgApitoken",
                "orgApitokenName",
                "orgId"
            ]
        },
        "junipermist:org/SettingJcloudRa:SettingJcloudRa": {
            "properties": {
                "orgApitoken": {
                    "type": "string",
                    "description": "JCloud Routing Assurance Org Token\n"
                },
                "orgApitokenName": {
                    "type": "string",
                    "description": "JCloud Routing Assurance Org Token Name\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "JCloud Routing Assurance Org ID\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/SettingJuniper:SettingJuniper": {
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/SettingJuniperAccount:SettingJuniperAccount"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accounts"
                    ]
                }
            }
        },
        "junipermist:org/SettingJuniperAccount:SettingJuniperAccount": {
            "properties": {
                "linkedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "linkedBy",
                        "name"
                    ]
                }
            }
        },
        "junipermist:org/SettingMgmt:SettingMgmt": {
            "properties": {
                "mxtunnelIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Mist Tunnels\n"
                },
                "useMxtunnel": {
                    "type": "boolean",
                    "description": "whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel\n"
                },
                "useWxtunnel": {
                    "type": "boolean",
                    "description": "whether to use wxtunnel for mgmt connectivity\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "mxtunnelIds",
                        "useMxtunnel",
                        "useWxtunnel"
                    ]
                }
            }
        },
        "junipermist:org/SettingMistNac:SettingMistNac": {
            "properties": {
                "cacerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of PEM-encoded ca certs\n"
                },
                "defaultIdpId": {
                    "type": "string",
                    "description": "use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.\n"
                },
                "disableRsaeAlgorithms": {
                    "type": "boolean",
                    "description": "to disable RSAE_PSS_SHA256, RSAE_PSS_SHA384, RSAE_PSS_SHA512 from server side. see https://www.openssl.org/docs/man3.0/man1/openssl-ciphers.html\n"
                },
                "eapSslSecurityLevel": {
                    "type": "integer",
                    "description": "eap ssl security level\nsee https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR\n"
                },
                "euOnly": {
                    "type": "boolean",
                    "description": "By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.\nFor strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled\n"
                },
                "idpMachineCertLookupField": {
                    "type": "string",
                    "description": "allow customer to choose the EAP-TLS client certificate's field to use for IDP Machine Groups lookup. enum: `automatic`, `cn`, `dns`\n"
                },
                "idpUserCertLookupField": {
                    "type": "string",
                    "description": "allow customer to choose the EAP-TLS client certificate's field\nto use for IDP User Groups lookup. enum: `automatic`, `cn`, `email`, `upn`\n"
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/SettingMistNacIdp:SettingMistNacIdp"
                    }
                },
                "serverCert": {
                    "$ref": "#/types/junipermist:org/SettingMistNacServerCert:SettingMistNacServerCert",
                    "description": "radius server cert to be presented in EAP TLS\n"
                },
                "useIpVersion": {
                    "type": "string",
                    "description": "by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`\n"
                },
                "useSslPort": {
                    "type": "boolean",
                    "description": "By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac. \nSet `use_ssl_port`==`true` to override that port with TCP43 (ssl), \nThis is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cacerts",
                        "disableRsaeAlgorithms",
                        "eapSslSecurityLevel",
                        "euOnly",
                        "idpMachineCertLookupField",
                        "idpUserCertLookupField",
                        "idps",
                        "useIpVersion",
                        "useSslPort"
                    ]
                }
            }
        },
        "junipermist:org/SettingMistNacIdp:SettingMistNacIdp": {
            "properties": {
                "excludeRealms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when the IDP of mxedge_proxy type, exclude the following realms from proxying in addition to other valid home realms in this org\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the `mist_nacidp`\n"
                },
                "userRealms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "which realm should trigger this IDP. User Realm is extracted from:\n  * Username-AVP (`mist.com` from john@mist.com)\n  * Cert CN\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "userRealms"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "excludeRealms",
                        "id",
                        "userRealms"
                    ]
                }
            }
        },
        "junipermist:org/SettingMistNacServerCert:SettingMistNacServerCert": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "private key password (optional)\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "junipermist:org/SettingMxedgeMgmt:SettingMxedgeMgmt": {
            "properties": {
                "fipsEnabled": {
                    "type": "boolean"
                },
                "mistPassword": {
                    "type": "string",
                    "secret": true
                },
                "oobIpType": {
                    "type": "string",
                    "description": "enum: `dhcp`, `disabled`, `static`\n"
                },
                "oobIpType6": {
                    "type": "string",
                    "description": "enum: `autoconf`, `dhcp`, `disabled`, `static`\n"
                },
                "rootPassword": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fipsEnabled",
                        "oobIpType",
                        "oobIpType6"
                    ]
                }
            }
        },
        "junipermist:org/SettingOpticPortConfig:SettingOpticPortConfig": {
            "properties": {
                "channelized": {
                    "type": "boolean",
                    "description": "enable channelization\n"
                },
                "speed": {
                    "type": "string",
                    "description": "interface speed (e.g. `25g`, `50g`), use the chassis speed by default\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "channelized"
                    ]
                }
            }
        },
        "junipermist:org/SettingPasswordPolicy:SettingPasswordPolicy": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether the policy is enabled\n"
                },
                "expiryInDays": {
                    "type": "integer",
                    "description": "password expiry in days\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "required password length\n"
                },
                "requiresSpecialChar": {
                    "type": "boolean",
                    "description": "whether to require special character\n"
                },
                "requiresTwoFactorAuth": {
                    "type": "boolean",
                    "description": "whether to require two-factor auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "minLength",
                        "requiresSpecialChar",
                        "requiresTwoFactorAuth"
                    ]
                }
            }
        },
        "junipermist:org/SettingPcap:SettingPcap": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "maxPktLen": {
                    "type": "integer",
                    "description": "max_len of non-management packets to capture\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxPktLen"
                    ]
                }
            }
        },
        "junipermist:org/SettingSecurity:SettingSecurity": {
            "properties": {
                "disableLocalSsh": {
                    "type": "boolean",
                    "description": "whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled\n"
                },
                "fipsZeroizePassword": {
                    "type": "string",
                    "description": "password required to zeroize devices (FIPS) on site level\n",
                    "secret": true
                },
                "limitSshAccess": {
                    "type": "boolean",
                    "description": "whether to allow certain SSH keys to SSH into the AP (see Site:Setting)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "limitSshAccess"
                    ]
                }
            }
        },
        "junipermist:org/SettingSwitchMgmt:SettingSwitchMgmt": {
            "properties": {
                "apAffinityThreshold": {
                    "type": "integer",
                    "description": "If the field is set in both site/setting and org/setting, the value from site/setting will be used.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apAffinityThreshold"
                    ]
                }
            }
        },
        "junipermist:org/SettingSyntheticTest:SettingSyntheticTest": {
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/SettingSyntheticTestVlan:SettingSyntheticTestVlan"
                    }
                },
                "wanSpeedtest": {
                    "$ref": "#/types/junipermist:org/SettingSyntheticTestWanSpeedtest:SettingSyntheticTestWanSpeedtest"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled"
                    ]
                }
            }
        },
        "junipermist:org/SettingSyntheticTestVlan:SettingSyntheticTestVlan": {
            "properties": {
                "customTestUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "for some vlans where we don't want this to run\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customTestUrls",
                        "disabled",
                        "vlanIds"
                    ]
                }
            }
        },
        "junipermist:org/SettingSyntheticTestWanSpeedtest:SettingSyntheticTestWanSpeedtest": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "timeOfDay": {
                    "type": "string",
                    "description": "any / HH:MM (24-hour format)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeOfDay"
                    ]
                }
            }
        },
        "junipermist:org/SettingVpnOptions:SettingVpnOptions": {
            "properties": {
                "asBase": {
                    "type": "integer"
                },
                "stSubnet": {
                    "type": "string",
                    "description": "equiring /12 or bigger to support 16 private IPs for 65535 gateways\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "stSubnet"
                    ]
                }
            }
        },
        "junipermist:org/SettingWanPma:SettingWanPma": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/SettingWiredPma:SettingWiredPma": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/SettingWirelessPma:SettingWirelessPma": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/SsoRolePrivilege:SsoRolePrivilege": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "enum: `org`, `site`, `sitegroup`\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Required if `scope`==`site`\n"
                },
                "sitegroupId": {
                    "type": "string",
                    "description": "Required if `scope`==`sitegroup`\n"
                }
            },
            "type": "object",
            "required": [
                "role",
                "scope"
            ]
        },
        "junipermist:org/VpnPaths:VpnPaths": {
            "properties": {
                "bfdProfile": {
                    "type": "string",
                    "description": "enum: `broadband`, `lte`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "if different from the wan port\n"
                },
                "pod": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdProfile",
                        "pod"
                    ]
                }
            }
        },
        "junipermist:org/WlanAcctServer:WlanAcctServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Acct port of RADIUS server\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:org/WlanAirwatch:WlanAirwatch": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "consoleUrl": {
                    "type": "string",
                    "description": "console URL\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "description": "password\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "username\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "consoleUrl",
                        "enabled",
                        "password",
                        "username"
                    ]
                }
            }
        },
        "junipermist:org/WlanAppLimit:WlanAppLimit": {
            "properties": {
                "apps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Map from app key to bandwidth in kbps. \nProperty key is the app key, defined in Get Application List\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "wxtagIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtag_id`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "wxtagIds"
                    ]
                }
            }
        },
        "junipermist:org/WlanAppQos:WlanAppQos": {
            "properties": {
                "apps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/WlanAppQosApps:WlanAppQosApps"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "others": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanAppQosOther:WlanAppQosOther"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanAppQosApps:WlanAppQosApps": {
            "properties": {
                "dscp": {
                    "type": "integer"
                },
                "dstSubnet": {
                    "type": "string",
                    "description": "subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)\n"
                },
                "srcSubnet": {
                    "type": "string",
                    "description": "subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/WlanAppQosOther:WlanAppQosOther": {
            "properties": {
                "dscp": {
                    "type": "integer"
                },
                "dstSubnet": {
                    "type": "string"
                },
                "portRanges": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "srcSubnet": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:org/WlanAuth:WlanAuth": {
            "properties": {
                "anticlogThreshold": {
                    "type": "integer",
                    "description": "SAE anti-clogging token threshold\n"
                },
                "eapReauth": {
                    "type": "boolean",
                    "description": "whether to trigger EAP reauth when the session ends\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "whether to enable MAC Auth, uses the same auth_servers\n"
                },
                "keyIdx": {
                    "type": "integer",
                    "description": "when `type`==`wep`\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length\n"
                },
                "multiPskOnly": {
                    "type": "boolean",
                    "description": "when `type`==`psk`, whether to only use multi_psk\n"
                },
                "owe": {
                    "type": "string",
                    "description": "if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`\n"
                },
                "pairwises": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`\n"
                },
                "privateWlan": {
                    "type": "boolean",
                    "description": "when `multi_psk_only`==`true`, whether private wlan is enabled\n"
                },
                "psk": {
                    "type": "string",
                    "description": "when `type`==`psk`, 8-64 characters, or 64 hex characters\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`\n"
                },
                "wepAsSecondaryAuth": {
                    "type": "boolean",
                    "description": "enable WEP as secondary auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "eapReauth",
                        "enableMacAuth",
                        "keyIdx",
                        "keys",
                        "multiPskOnly",
                        "pairwises",
                        "privateWlan",
                        "psk",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/WlanAuthServer:WlanAuthServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Auth port of RADIUS server\n"
                },
                "requireMessageAuthenticator": {
                    "type": "boolean",
                    "description": "whether to require Message-Authenticator in requests\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requireMessageAuthenticator",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:org/WlanBonjour:WlanBonjour": {
            "properties": {
                "additionalVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false\n"
                },
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/WlanBonjourServices:WlanBonjourServices"
                    },
                    "description": "what services are allowed. \nProperty key is the service name\n"
                }
            },
            "type": "object",
            "required": [
                "additionalVlanIds",
                "services"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalVlanIds",
                        "enabled",
                        "services"
                    ]
                }
            }
        },
        "junipermist:org/WlanBonjourServices:WlanBonjourServices": {
            "properties": {
                "disableLocal": {
                    "type": "boolean",
                    "description": "whether to prevent wireless clients to discover bonjour devices on the same WLAN\n"
                },
                "radiusGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, if the service is further restricted for certain RADIUS groups\n"
                },
                "scope": {
                    "type": "string",
                    "description": "how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableLocal",
                        "scope"
                    ]
                }
            }
        },
        "junipermist:org/WlanCiscoCwa:WlanCiscoCwa": {
            "properties": {
                "allowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "allowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "blockedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of blocked CIDRs\n"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanCoaServer:WlanCoaServer": {
            "properties": {
                "disableEventTimestampCheck": {
                    "type": "boolean",
                    "description": "whether to disable Event-Timestamp Check\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "ip",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableEventTimestampCheck",
                        "enabled",
                        "ip",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:org/WlanDnsServerRewrite:WlanDnsServerRewrite": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "radiusGroups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "map between radius_group and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanDynamicPsk:WlanDynamicPsk": {
            "properties": {
                "defaultPsk": {
                    "type": "string",
                    "description": "default PSK to use if cloud WLC is not available, 8-63 characters\n",
                    "secret": true
                },
                "defaultVlanId": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "forceLookup": {
                    "type": "boolean",
                    "description": "when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto\n"
                },
                "source": {
                    "type": "string",
                    "description": "enum: `cloud_psks`, `radius`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "forceLookup",
                        "source"
                    ]
                }
            }
        },
        "junipermist:org/WlanDynamicVlan:WlanDynamicVlan": {
            "properties": {
                "defaultVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Whether to enable dynamic vlan\n"
                },
                "localVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vlan_ids to be locally bridged\n"
                },
                "type": {
                    "type": "string",
                    "description": "standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`\n"
                },
                "vlans": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping\n  * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\\"\\\"\n  * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name\n"
                }
            },
            "type": "object",
            "required": [
                "defaultVlanIds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultVlanIds",
                        "enabled",
                        "localVlanIds",
                        "type"
                    ]
                }
            }
        },
        "junipermist:org/WlanHotspot20:WlanHotspot20": {
            "properties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable hotspot 2.0 config\n"
                },
                "naiRealms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of operators to support\n"
                },
                "rcois": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "venueName": {
                    "type": "string",
                    "description": "venue name, default is site name\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/WlanInjectDhcpOption82:WlanInjectDhcpOption82": {
            "properties": {
                "circuitId": {
                    "type": "string",
                    "description": "information to set in the `circuit_id` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):\n  * {{AP_MAC}}\n  * {{AP_MAC_DASHED}}\n  * {{AP_MODEL}}\n  * {{AP_NAME}}\n  * {{SITE_NAME}}\n  * {{SSID}}\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to inject option 82 when forwarding DHCP packets\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanMistNac:WlanMistNac": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled:\n  * `auth_servers` is ignored\n  * `acct_servers` is ignored\n  * `auth_servers_*` are ignored\n  * `coa_servers` is ignored\n  * `radsec` is ignored\n  * `coa_enabled` is assumed'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanPortal:WlanPortal": {
            "properties": {
                "allowWlanIdRoam": {
                    "type": "boolean",
                    "description": "Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)\n"
                },
                "amazonClientId": {
                    "type": "string",
                    "description": "Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.\n"
                },
                "amazonClientSecret": {
                    "type": "string",
                    "description": "Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "amazonEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "amazonEnabled": {
                    "type": "boolean",
                    "description": "whether amazon is enabled as a login method\n"
                },
                "amazonExpire": {
                    "type": "integer",
                    "description": "Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`\n"
                },
                "auth": {
                    "type": "string",
                    "description": "authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`\n"
                },
                "azureClientId": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory app client id\n"
                },
                "azureClientSecret": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory app client secret\n"
                },
                "azureEnabled": {
                    "type": "boolean",
                    "description": "whether Azure Active Directory is enabled as a login method\n"
                },
                "azureExpire": {
                    "type": "integer",
                    "description": "interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory tenant id.\n"
                },
                "broadnetPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n",
                    "secret": true
                },
                "broadnetSid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n"
                },
                "broadnetUserId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n"
                },
                "bypassWhenCloudDown": {
                    "type": "boolean",
                    "description": "whether to bypass the guest portal when cloud not reachable (and apply the default policies)\n"
                },
                "clickatellApiKey": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`clickatell`\n"
                },
                "crossSite": {
                    "type": "boolean",
                    "description": "whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)\n"
                },
                "emailEnabled": {
                    "type": "boolean",
                    "description": "whether email (access code verification) is enabled as a login method\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether guest portal is enabled\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "how long to remain authorized, in minutes\n"
                },
                "externalPortalUrl": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to\n"
                },
                "facebookClientId": {
                    "type": "string",
                    "description": "Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.\n"
                },
                "facebookClientSecret": {
                    "type": "string",
                    "description": "Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "facebookEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "facebookEnabled": {
                    "type": "boolean",
                    "description": "whether facebook is enabled as a login method\n"
                },
                "facebookExpire": {
                    "type": "integer",
                    "description": "Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`\n"
                },
                "forward": {
                    "type": "boolean",
                    "description": "whether to forward the user to another URL after authorized\n"
                },
                "forwardUrl": {
                    "type": "string",
                    "description": "the URL to forward the user to\n"
                },
                "googleClientId": {
                    "type": "string",
                    "description": "Google OAuth2 app id. This is optional. If not provided, it will use a default one.\n"
                },
                "googleClientSecret": {
                    "type": "string",
                    "description": "Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "googleEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "googleEnabled": {
                    "type": "boolean",
                    "description": "whether google is enabled as login method\n"
                },
                "googleExpire": {
                    "type": "integer",
                    "description": "Optional if `google_enabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`\n"
                },
                "gupshupPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`gupshup`\n",
                    "secret": true
                },
                "gupshupUserid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`gupshup`\n"
                },
                "microsoftClientId": {
                    "type": "string",
                    "description": "Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.\n"
                },
                "microsoftClientSecret": {
                    "type": "string",
                    "description": "Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "microsoftEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "microsoftEnabled": {
                    "type": "boolean",
                    "description": "whether microsoft 365 is enabled as a login method\n"
                },
                "microsoftExpire": {
                    "type": "integer",
                    "description": "Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`\n"
                },
                "passphraseEnabled": {
                    "type": "boolean",
                    "description": "Whether password is enabled\n"
                },
                "passphraseExpire": {
                    "type": "integer",
                    "description": "Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`\n"
                },
                "password": {
                    "type": "string",
                    "description": "Required if `passphrase_enabled`==`true`.\n",
                    "secret": true
                },
                "predefinedSponsorsEnabled": {
                    "type": "boolean",
                    "description": "whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`\n"
                },
                "predefinedSponsorsHideEmail": {
                    "type": "boolean",
                    "description": "whether to hide sponsor’s email from list of sponsors\n"
                },
                "privacy": {
                    "type": "boolean"
                },
                "puzzelPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n",
                    "secret": true
                },
                "puzzelServiceId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n"
                },
                "puzzelUsername": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n"
                },
                "smsEnabled": {
                    "type": "boolean",
                    "description": "whether sms is enabled as a login method\n"
                },
                "smsExpire": {
                    "type": "integer",
                    "description": "Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`\n"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "Optional if `sms_enabled`==`true`. SMS Message format\n"
                },
                "smsProvider": {
                    "type": "string",
                    "description": "Optioanl if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`\n"
                },
                "sponsorAutoApprove": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled\n"
                },
                "sponsorEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.\n"
                },
                "sponsorEnabled": {
                    "type": "boolean",
                    "description": "whether sponsor is enabled\n"
                },
                "sponsorExpire": {
                    "type": "integer",
                    "description": "Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`\n"
                },
                "sponsorLinkValidityDuration": {
                    "type": "string",
                    "description": "Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.\n"
                },
                "sponsorNotifyAll": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.\n"
                },
                "sponsorStatusNotify": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)\n"
                },
                "sponsors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "object of allowed sponsors email with name. Required if `sponsor_enabled`\n            is `true` and `sponsor_email_domains` is empty.\n\n            Property key is the sponsor email, Property value is the sponsor name\n"
                },
                "ssoDefaultRole": {
                    "type": "string",
                    "description": "Optionl if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched\n"
                },
                "ssoForcedRole": {
                    "type": "string",
                    "description": "Optionl if `wlan_portal_auth`==`sso`\n"
                },
                "ssoIdpCert": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)\n"
                },
                "ssoIdpSignAlgo": {
                    "type": "string",
                    "description": "Optioanl if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`\n"
                },
                "ssoIdpSsoUrl": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL\n"
                },
                "ssoIssuer": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`, IDP issuer URL\n"
                },
                "ssoNameidFormat": {
                    "type": "string",
                    "description": "Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`\n"
                },
                "telstraClientId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`telstra`, Client ID provided by Telstra\n"
                },
                "telstraClientSecret": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`telstra`, Client secret provided by Telstra\n"
                },
                "twilioAuthToken": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Auth token account with twilio account\n"
                },
                "twilioPhoneNumber": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.\n"
                },
                "twilioSid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Account SID provided by Twilio\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "amazonClientId",
                        "amazonClientSecret",
                        "amazonEmailDomains",
                        "amazonEnabled",
                        "auth",
                        "azureClientId",
                        "azureClientSecret",
                        "azureEnabled",
                        "azureTenantId",
                        "broadnetPassword",
                        "bypassWhenCloudDown",
                        "emailEnabled",
                        "enabled",
                        "expire",
                        "externalPortalUrl",
                        "facebookClientId",
                        "facebookClientSecret",
                        "facebookEmailDomains",
                        "facebookEnabled",
                        "forward",
                        "forwardUrl",
                        "googleClientId",
                        "googleClientSecret",
                        "googleEmailDomains",
                        "googleEnabled",
                        "microsoftClientId",
                        "microsoftClientSecret",
                        "microsoftEmailDomains",
                        "microsoftEnabled",
                        "passphraseEnabled",
                        "password",
                        "predefinedSponsorsEnabled",
                        "predefinedSponsorsHideEmail",
                        "privacy",
                        "smsEnabled",
                        "smsMessageFormat",
                        "smsProvider",
                        "sponsorEmailDomains",
                        "sponsorEnabled",
                        "sponsorLinkValidityDuration",
                        "sponsorNotifyAll",
                        "sponsorStatusNotify",
                        "sponsors",
                        "ssoDefaultRole",
                        "ssoForcedRole",
                        "ssoIdpCert",
                        "ssoIdpSignAlgo",
                        "ssoIdpSsoUrl",
                        "ssoIssuer",
                        "ssoNameidFormat"
                    ]
                }
            }
        },
        "junipermist:org/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate": {
            "properties": {
                "accessCodeAlternateEmail": {
                    "type": "string"
                },
                "alignment": {
                    "type": "string",
                    "description": "defines alignment on portal. enum: `center`, `left`, `right`\n"
                },
                "authButtonAmazon": {
                    "type": "string",
                    "description": "label for Amazon auth button\n"
                },
                "authButtonAzure": {
                    "type": "string",
                    "description": "label for Azure auth button\n"
                },
                "authButtonEmail": {
                    "type": "string",
                    "description": "label for Email auth button\n"
                },
                "authButtonFacebook": {
                    "type": "string",
                    "description": "label for Facebook auth button\n"
                },
                "authButtonGoogle": {
                    "type": "string",
                    "description": "label for Google auth button\n"
                },
                "authButtonMicrosoft": {
                    "type": "string",
                    "description": "label for Microsoft auth button\n"
                },
                "authButtonPassphrase": {
                    "type": "string",
                    "description": "label for passphrase auth button\n"
                },
                "authButtonSms": {
                    "type": "string",
                    "description": "label for SMS auth button\n"
                },
                "authButtonSponsor": {
                    "type": "string",
                    "description": "label for Sponsor auth button\n"
                },
                "authLabel": {
                    "type": "string"
                },
                "backLink": {
                    "type": "string",
                    "description": "label of the link to go back to /logon\n"
                },
                "color": {
                    "type": "string",
                    "description": "Portal main color\n"
                },
                "colorDark": {
                    "type": "string"
                },
                "colorLight": {
                    "type": "string"
                },
                "company": {
                    "type": "boolean",
                    "description": "whether company field is required\n"
                },
                "companyError": {
                    "type": "string",
                    "description": "error message when company not provided\n"
                },
                "companyLabel": {
                    "type": "string",
                    "description": "label of company field\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "whether email field is required\n"
                },
                "emailAccessDomainError": {
                    "type": "string",
                    "description": "error message when a user has valid social login but doesn't match specified email domains.\n"
                },
                "emailCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission using email auth\n"
                },
                "emailCodeCancel": {
                    "type": "string"
                },
                "emailCodeError": {
                    "type": "string"
                },
                "emailCodeFieldLabel": {
                    "type": "string"
                },
                "emailCodeMessage": {
                    "type": "string"
                },
                "emailCodeSubmit": {
                    "type": "string"
                },
                "emailCodeTitle": {
                    "type": "string"
                },
                "emailError": {
                    "type": "string",
                    "description": "error message when email not provided\n"
                },
                "emailFieldLabel": {
                    "type": "string"
                },
                "emailLabel": {
                    "type": "string",
                    "description": "label of email field\n"
                },
                "emailMessage": {
                    "type": "string"
                },
                "emailSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button using email auth\n"
                },
                "emailTitle": {
                    "type": "string",
                    "description": "Title for the Email registration\n"
                },
                "field1": {
                    "type": "boolean",
                    "description": "whether to ask field1\n"
                },
                "field1error": {
                    "type": "string",
                    "description": "error message when field1 not provided\n"
                },
                "field1label": {
                    "type": "string",
                    "description": "label of field1\n"
                },
                "field1required": {
                    "type": "boolean",
                    "description": "whether field1 is required field\n"
                },
                "field2": {
                    "type": "boolean",
                    "description": "whether to ask field2\n"
                },
                "field2error": {
                    "type": "string",
                    "description": "error message when field2 not provided\n"
                },
                "field2label": {
                    "type": "string",
                    "description": "label of field2\n"
                },
                "field2required": {
                    "type": "boolean",
                    "description": "whether field2 is required field\n"
                },
                "field3": {
                    "type": "boolean",
                    "description": "whether to ask field3\n"
                },
                "field3error": {
                    "type": "string",
                    "description": "error message when field3 not provided\n"
                },
                "field3label": {
                    "type": "string",
                    "description": "label of field3\n"
                },
                "field3required": {
                    "type": "boolean",
                    "description": "whether field3 is required field\n"
                },
                "field4": {
                    "type": "boolean",
                    "description": "whether to ask field4\n"
                },
                "field4error": {
                    "type": "string",
                    "description": "error message when field4 not provided\n"
                },
                "field4label": {
                    "type": "string",
                    "description": "label of field4\n"
                },
                "field4required": {
                    "type": "boolean",
                    "description": "whether field4 is required field\n"
                },
                "locales": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/WlanPortalTemplatePortalTemplateLocales:WlanPortalTemplatePortalTemplateLocales"
                    },
                    "description": "Can be used to localize the portal based on the User Agent. Allowed property key values are:\n  `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, \n  `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, \n  `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, \n  `zh-Hans`, `zh-Hant`\n"
                },
                "logo": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `png` image less than 100kB and image dimension must be less 500px x 200px (width x height).\n"
                },
                "message": {
                    "type": "string"
                },
                "multiAuth": {
                    "type": "boolean"
                },
                "name": {
                    "type": "boolean",
                    "description": "whether name field is required\n"
                },
                "nameError": {
                    "type": "string",
                    "description": "error message when name not provided\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "label of name field\n"
                },
                "optOutDefault": {
                    "type": "boolean",
                    "description": "Default value for the `Do not store` checkbox\n"
                },
                "optout": {
                    "type": "boolean",
                    "description": "whether to display Do Not Store My Personal Information\n"
                },
                "optoutLabel": {
                    "type": "string",
                    "description": "label for Do Not Store My Personal Information\n"
                },
                "pageTitle": {
                    "type": "string"
                },
                "passphraseCancel": {
                    "type": "string",
                    "description": "Label for the Passphrase cancel button\n"
                },
                "passphraseError": {
                    "type": "string",
                    "description": "error message when invalid passphrase is provided\n"
                },
                "passphraseLabel": {
                    "type": "string",
                    "description": "Passphrase\n"
                },
                "passphraseMessage": {
                    "type": "string"
                },
                "passphraseSubmit": {
                    "type": "string",
                    "description": "Label for the Passphrase submit button\n"
                },
                "passphraseTitle": {
                    "type": "string",
                    "description": "Title for passphrase details page\n"
                },
                "poweredBy": {
                    "type": "boolean",
                    "description": "whether to show \\\"Powered by Mist\\\"\n"
                },
                "privacy": {
                    "type": "boolean",
                    "description": "wheter to require the Privacy Term acceptance\n"
                },
                "privacyPolicyAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyError": {
                    "type": "string",
                    "description": "error message when Privacy Policy not accepted\n"
                },
                "privacyPolicyLink": {
                    "type": "string",
                    "description": "label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyText": {
                    "type": "string",
                    "description": "text of the Privacy Policy\n"
                },
                "requiredFieldLabel": {
                    "type": "string",
                    "description": "label to denote required field\n"
                },
                "responsiveLayout": {
                    "type": "boolean"
                },
                "signInLabel": {
                    "type": "string",
                    "description": "label of the button to /signin\n"
                },
                "smsCarrierDefault": {
                    "type": "string"
                },
                "smsCarrierError": {
                    "type": "string"
                },
                "smsCarrierFieldLabel": {
                    "type": "string",
                    "description": "label for mobile carrier drop-down list\n"
                },
                "smsCodeCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission\n"
                },
                "smsCodeError": {
                    "type": "string",
                    "description": "error message when confirmation code is invalid\n"
                },
                "smsCodeFieldLabel": {
                    "type": "string"
                },
                "smsCodeMessage": {
                    "type": "string"
                },
                "smsCodeSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button\n"
                },
                "smsCodeTitle": {
                    "type": "string"
                },
                "smsCountryFieldLabel": {
                    "type": "string"
                },
                "smsCountryFormat": {
                    "type": "string"
                },
                "smsHaveAccessCode": {
                    "type": "string",
                    "description": "Label for checkbox to specify that the user has access code\n"
                },
                "smsIsTwilio": {
                    "type": "boolean"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.\n"
                },
                "smsNumberCancel": {
                    "type": "string",
                    "description": "label for canceling mobile details for SMS auth\n"
                },
                "smsNumberError": {
                    "type": "string"
                },
                "smsNumberFieldLabel": {
                    "type": "string",
                    "description": "label for field to provide mobile number\n"
                },
                "smsNumberFormat": {
                    "type": "string"
                },
                "smsNumberMessage": {
                    "type": "string"
                },
                "smsNumberSubmit": {
                    "type": "string",
                    "description": "label for submit button for code generation\n"
                },
                "smsNumberTitle": {
                    "type": "string",
                    "description": "Title for phone number details\n"
                },
                "smsUsernameFormat": {
                    "type": "string"
                },
                "smsValidityDuration": {
                    "type": "integer",
                    "description": "how long confirmation code should be considered valid (in minutes)\n"
                },
                "sponsorBackLink": {
                    "type": "string"
                },
                "sponsorCancel": {
                    "type": "string"
                },
                "sponsorEmail": {
                    "type": "string",
                    "description": "label for Sponsor Email\n"
                },
                "sponsorEmailError": {
                    "type": "string"
                },
                "sponsorEmailTemplate": {
                    "type": "string",
                    "description": "html template to replace/override default sponsor email template \nSponsor Email Template supports following template variables:\n  * `approve_url`: Renders URL to approve the request; optionally \u0026minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized\n  * `deny_url`: Renders URL to reject the request\n  * `guest_email`: Renders Email ID of the guest\n  * `guest_name`: Renders Name of the guest\n  * `field1`: Renders value of the Custom Field 1\n  * `field2`: Renders value of the Custom Field 2\n  * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)\n  * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)\n"
                },
                "sponsorInfoApproved": {
                    "type": "string"
                },
                "sponsorInfoDenied": {
                    "type": "string"
                },
                "sponsorInfoPending": {
                    "type": "string"
                },
                "sponsorName": {
                    "type": "string",
                    "description": "label for Sponsor Name\n"
                },
                "sponsorNameError": {
                    "type": "string"
                },
                "sponsorNotePending": {
                    "type": "string"
                },
                "sponsorRequestAccess": {
                    "type": "string",
                    "description": "submit button label request Wifi Access and notify sponsor about guest request\n"
                },
                "sponsorStatusApproved": {
                    "type": "string",
                    "description": "text to display if sponsor approves request\n"
                },
                "sponsorStatusDenied": {
                    "type": "string",
                    "description": "text to display when sponsor denies request\n"
                },
                "sponsorStatusPending": {
                    "type": "string",
                    "description": "text to display if request is still pending\n"
                },
                "sponsorSubmit": {
                    "type": "string",
                    "description": "submit button label to notify sponsor about guest request\n"
                },
                "sponsorsError": {
                    "type": "string"
                },
                "sponsorsFieldLabel": {
                    "type": "string"
                },
                "tos": {
                    "type": "boolean"
                },
                "tosAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to tos\n"
                },
                "tosError": {
                    "type": "string",
                    "description": "error message when tos not accepted\n"
                },
                "tosLink": {
                    "type": "string",
                    "description": "label of the link to go to tos\n"
                },
                "tosText": {
                    "type": "string",
                    "description": "text of the Terms of Service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessCodeAlternateEmail",
                        "alignment",
                        "authButtonAmazon",
                        "authButtonAzure",
                        "authButtonEmail",
                        "authButtonFacebook",
                        "authButtonGoogle",
                        "authButtonMicrosoft",
                        "authButtonPassphrase",
                        "authButtonSms",
                        "authButtonSponsor",
                        "authLabel",
                        "color",
                        "colorDark",
                        "colorLight",
                        "company",
                        "companyError",
                        "companyLabel",
                        "email",
                        "emailAccessDomainError",
                        "emailCancel",
                        "emailCodeCancel",
                        "emailCodeError",
                        "emailCodeFieldLabel",
                        "emailCodeMessage",
                        "emailCodeSubmit",
                        "emailCodeTitle",
                        "emailError",
                        "emailFieldLabel",
                        "emailLabel",
                        "emailMessage",
                        "emailSubmit",
                        "emailTitle",
                        "field1",
                        "field1error",
                        "field1label",
                        "field2",
                        "field2error",
                        "field2label",
                        "field3",
                        "field3error",
                        "field3label",
                        "field4",
                        "field4error",
                        "field4label",
                        "logo",
                        "message",
                        "multiAuth",
                        "name",
                        "nameError",
                        "nameLabel",
                        "optOutDefault",
                        "optout",
                        "optoutLabel",
                        "pageTitle",
                        "passphraseCancel",
                        "passphraseError",
                        "passphraseLabel",
                        "passphraseMessage",
                        "passphraseSubmit",
                        "passphraseTitle",
                        "poweredBy",
                        "privacy",
                        "privacyPolicyAcceptLabel",
                        "privacyPolicyError",
                        "privacyPolicyLink",
                        "privacyPolicyText",
                        "requiredFieldLabel",
                        "responsiveLayout",
                        "signInLabel",
                        "smsCarrierDefault",
                        "smsCarrierError",
                        "smsCarrierFieldLabel",
                        "smsCodeCancel",
                        "smsCodeError",
                        "smsCodeFieldLabel",
                        "smsCodeMessage",
                        "smsCodeSubmit",
                        "smsCodeTitle",
                        "smsCountryFieldLabel",
                        "smsCountryFormat",
                        "smsHaveAccessCode",
                        "smsIsTwilio",
                        "smsNumberCancel",
                        "smsNumberError",
                        "smsNumberFieldLabel",
                        "smsNumberFormat",
                        "smsNumberMessage",
                        "smsNumberSubmit",
                        "smsNumberTitle",
                        "smsUsernameFormat",
                        "sponsorBackLink",
                        "sponsorCancel",
                        "sponsorEmail",
                        "sponsorEmailError",
                        "sponsorEmailTemplate",
                        "sponsorInfoApproved",
                        "sponsorInfoDenied",
                        "sponsorInfoPending",
                        "sponsorName",
                        "sponsorNameError",
                        "sponsorNotePending",
                        "sponsorRequestAccess",
                        "sponsorStatusApproved",
                        "sponsorStatusDenied",
                        "sponsorStatusPending",
                        "sponsorSubmit",
                        "sponsorsError",
                        "sponsorsFieldLabel",
                        "tos",
                        "tosAcceptLabel",
                        "tosError",
                        "tosLink",
                        "tosText"
                    ]
                }
            }
        },
        "junipermist:org/WlanPortalTemplatePortalTemplateLocales:WlanPortalTemplatePortalTemplateLocales": {
            "properties": {
                "authButtonAmazon": {
                    "type": "string",
                    "description": "label for Amazon auth button\n"
                },
                "authButtonAzure": {
                    "type": "string",
                    "description": "label for Azure auth button\n"
                },
                "authButtonEmail": {
                    "type": "string",
                    "description": "label for Email auth button\n"
                },
                "authButtonFacebook": {
                    "type": "string",
                    "description": "label for Facebook auth button\n"
                },
                "authButtonGoogle": {
                    "type": "string",
                    "description": "label for Google auth button\n"
                },
                "authButtonMicrosoft": {
                    "type": "string",
                    "description": "label for Microsoft auth button\n"
                },
                "authButtonPassphrase": {
                    "type": "string",
                    "description": "label for passphrase auth button\n"
                },
                "authButtonSms": {
                    "type": "string",
                    "description": "label for SMS auth button\n"
                },
                "authButtonSponsor": {
                    "type": "string",
                    "description": "label for Sponsor auth button\n"
                },
                "authLabel": {
                    "type": "string"
                },
                "backLink": {
                    "type": "string",
                    "description": "label of the link to go back to /logon\n"
                },
                "companyError": {
                    "type": "string",
                    "description": "error message when company not provided\n"
                },
                "companyLabel": {
                    "type": "string",
                    "description": "label of company field\n"
                },
                "emailAccessDomainError": {
                    "type": "string",
                    "description": "error message when a user has valid social login but doesn't match specified email domains.\n"
                },
                "emailCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission using email auth\n"
                },
                "emailCodeCancel": {
                    "type": "string"
                },
                "emailCodeError": {
                    "type": "string"
                },
                "emailCodeFieldLabel": {
                    "type": "string"
                },
                "emailCodeMessage": {
                    "type": "string"
                },
                "emailCodeSubmit": {
                    "type": "string"
                },
                "emailCodeTitle": {
                    "type": "string"
                },
                "emailError": {
                    "type": "string",
                    "description": "error message when email not provided\n"
                },
                "emailFieldLabel": {
                    "type": "string"
                },
                "emailLabel": {
                    "type": "string",
                    "description": "label of email field\n"
                },
                "emailMessage": {
                    "type": "string"
                },
                "emailSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button using email auth\n"
                },
                "emailTitle": {
                    "type": "string",
                    "description": "Title for the Email registration\n"
                },
                "field1error": {
                    "type": "string",
                    "description": "error message when field1 not provided\n"
                },
                "field1label": {
                    "type": "string",
                    "description": "label of field1\n"
                },
                "field2error": {
                    "type": "string",
                    "description": "error message when field2 not provided\n"
                },
                "field2label": {
                    "type": "string",
                    "description": "label of field2\n"
                },
                "field3error": {
                    "type": "string",
                    "description": "error message when field3 not provided\n"
                },
                "field3label": {
                    "type": "string",
                    "description": "label of field3\n"
                },
                "field4error": {
                    "type": "string",
                    "description": "error message when field4 not provided\n"
                },
                "field4label": {
                    "type": "string",
                    "description": "label of field4\n"
                },
                "message": {
                    "type": "string"
                },
                "nameError": {
                    "type": "string",
                    "description": "error message when name not provided\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "label of name field\n"
                },
                "optoutLabel": {
                    "type": "string",
                    "description": "label for Do Not Store My Personal Information\n"
                },
                "pageTitle": {
                    "type": "string"
                },
                "passphraseCancel": {
                    "type": "string",
                    "description": "Label for the Passphrase cancel button\n"
                },
                "passphraseError": {
                    "type": "string",
                    "description": "error message when invalid passphrase is provided\n"
                },
                "passphraseLabel": {
                    "type": "string",
                    "description": "Passphrase\n"
                },
                "passphraseMessage": {
                    "type": "string"
                },
                "passphraseSubmit": {
                    "type": "string",
                    "description": "Label for the Passphrase submit button\n"
                },
                "passphraseTitle": {
                    "type": "string",
                    "description": "Title for passphrase details page\n"
                },
                "privacyPolicyAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyError": {
                    "type": "string",
                    "description": "error message when Privacy Policy not accepted\n"
                },
                "privacyPolicyLink": {
                    "type": "string",
                    "description": "label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyText": {
                    "type": "string",
                    "description": "text of the Privacy Policy\n"
                },
                "requiredFieldLabel": {
                    "type": "string",
                    "description": "label to denote required field\n"
                },
                "signInLabel": {
                    "type": "string",
                    "description": "label of the button to /signin\n"
                },
                "smsCarrierDefault": {
                    "type": "string"
                },
                "smsCarrierError": {
                    "type": "string"
                },
                "smsCarrierFieldLabel": {
                    "type": "string",
                    "description": "label for mobile carrier drop-down list\n"
                },
                "smsCodeCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission\n"
                },
                "smsCodeError": {
                    "type": "string",
                    "description": "error message when confirmation code is invalid\n"
                },
                "smsCodeFieldLabel": {
                    "type": "string"
                },
                "smsCodeMessage": {
                    "type": "string"
                },
                "smsCodeSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button\n"
                },
                "smsCodeTitle": {
                    "type": "string"
                },
                "smsCountryFieldLabel": {
                    "type": "string"
                },
                "smsCountryFormat": {
                    "type": "string"
                },
                "smsHaveAccessCode": {
                    "type": "string",
                    "description": "Label for checkbox to specify that the user has access code\n"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.\n"
                },
                "smsNumberCancel": {
                    "type": "string",
                    "description": "label for canceling mobile details for SMS auth\n"
                },
                "smsNumberError": {
                    "type": "string"
                },
                "smsNumberFieldLabel": {
                    "type": "string",
                    "description": "label for field to provide mobile number\n"
                },
                "smsNumberFormat": {
                    "type": "string"
                },
                "smsNumberMessage": {
                    "type": "string"
                },
                "smsNumberSubmit": {
                    "type": "string",
                    "description": "label for submit button for code generation\n"
                },
                "smsNumberTitle": {
                    "type": "string",
                    "description": "Title for phone number details\n"
                },
                "smsUsernameFormat": {
                    "type": "string"
                },
                "sponsorBackLink": {
                    "type": "string"
                },
                "sponsorCancel": {
                    "type": "string"
                },
                "sponsorEmail": {
                    "type": "string",
                    "description": "label for Sponsor Email\n"
                },
                "sponsorEmailError": {
                    "type": "string"
                },
                "sponsorInfoApproved": {
                    "type": "string"
                },
                "sponsorInfoDenied": {
                    "type": "string"
                },
                "sponsorInfoPending": {
                    "type": "string"
                },
                "sponsorName": {
                    "type": "string",
                    "description": "label for Sponsor Name\n"
                },
                "sponsorNameError": {
                    "type": "string"
                },
                "sponsorNotePending": {
                    "type": "string"
                },
                "sponsorRequestAccess": {
                    "type": "string",
                    "description": "submit button label request Wifi Access and notify sponsor about guest request\n"
                },
                "sponsorStatusApproved": {
                    "type": "string",
                    "description": "text to display if sponsor approves request\n"
                },
                "sponsorStatusDenied": {
                    "type": "string",
                    "description": "text to display when sponsor denies request\n"
                },
                "sponsorStatusPending": {
                    "type": "string",
                    "description": "text to display if request is still pending\n"
                },
                "sponsorSubmit": {
                    "type": "string",
                    "description": "submit button label to notify sponsor about guest request\n"
                },
                "sponsorsError": {
                    "type": "string"
                },
                "sponsorsFieldLabel": {
                    "type": "string"
                },
                "tosAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to tos\n"
                },
                "tosError": {
                    "type": "string",
                    "description": "error message when tos not accepted\n"
                },
                "tosLink": {
                    "type": "string",
                    "description": "label of the link to go to tos\n"
                },
                "tosText": {
                    "type": "string",
                    "description": "text of the Terms of Service\n"
                }
            },
            "type": "object"
        },
        "junipermist:org/WlanQos:WlanQos": {
            "properties": {
                "class": {
                    "type": "string",
                    "description": "enum: `background`, `best_effort`, `video`, `voice`\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "whether to overwrite QoS\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "class",
                        "overwrite"
                    ]
                }
            }
        },
        "junipermist:org/WlanRadsec:WlanRadsec": {
            "properties": {
                "coaEnabled": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idleTimeout": {
                    "type": "integer"
                },
                "mxclusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids\n"
                },
                "proxyHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanRadsecServer:WlanRadsecServer"
                    },
                    "description": "List of Radsec Servers. Only if not Mist Edge.\n"
                },
                "useMxedge": {
                    "type": "boolean",
                    "description": "use mxedge(s) as radsecproxy\n"
                },
                "useSiteMxedge": {
                    "type": "boolean",
                    "description": "To use Site mxedges when this WLAN does not use mxtunnel\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "coaEnabled",
                        "mxclusterIds",
                        "proxyHosts",
                        "useSiteMxedge"
                    ]
                }
            }
        },
        "junipermist:org/WlanRadsecServer:WlanRadsecServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:org/WlanRateset:WlanRateset": {
            "properties": {
                "ht": {
                    "type": "string",
                    "description": "if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)\n"
                },
                "legacies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`\n"
                },
                "minRssi": {
                    "type": "integer",
                    "description": "Minimum RSSI for client to connect, 0 means not enforcing\n"
                },
                "template": {
                    "type": "string",
                    "description": "Data Rates template to apply. enum: \n  * `no-legacy`: no 11b\n  * `compatible`: all, like before, default setting that Broadcom/Atheros used\n  * `legacy-only`: disable 802.11n and 802.11ac\n  * `high-density`: no 11b, no low rates\n  * `custom`: user defined\n"
                },
                "vht": {
                    "type": "string",
                    "description": "if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "legacies",
                        "minRssi",
                        "template"
                    ]
                }
            }
        },
        "junipermist:org/WlanSchedule:WlanSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "hours": {
                    "$ref": "#/types/junipermist:org/WlanScheduleHours:WlanScheduleHours",
                    "description": "hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). \n\n**Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:org/WlanScheduleHours:WlanScheduleHours": {
            "properties": {
                "fri": {
                    "type": "string"
                },
                "mon": {
                    "type": "string"
                },
                "sat": {
                    "type": "string"
                },
                "sun": {
                    "type": "string"
                },
                "thu": {
                    "type": "string"
                },
                "tue": {
                    "type": "string"
                },
                "wed": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fri",
                        "mon",
                        "sat",
                        "sun",
                        "thu",
                        "tue",
                        "wed"
                    ]
                }
            }
        },
        "junipermist:org/WlantemplateApplies:WlantemplateApplies": {
            "properties": {
                "orgId": {
                    "type": "string"
                },
                "siteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of site ids\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of sitegroup ids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "siteIds",
                        "sitegroupIds"
                    ]
                }
            }
        },
        "junipermist:org/WlantemplateExceptions:WlantemplateExceptions": {
            "properties": {
                "siteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of site ids\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of sitegroup ids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "siteIds",
                        "sitegroupIds"
                    ]
                }
            }
        },
        "junipermist:org/WxtagSpec:WxtagSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched destination port, \"0\" means any\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "tcp / udp / icmp / gre / any / \":protocol_number\", `protocol_number` is between 1-254\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "matched destination subnets and/or IP Addresses\n"
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:org/getDeviceprofilesApDeviceprofile:getDeviceprofilesApDeviceprofile": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getDeviceprofilesGatewayDeviceprofile:getDeviceprofilesGatewayDeviceprofile": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getGatewaytemplatesOrgGatewaytemplate:getGatewaytemplatesOrgGatewaytemplate": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getIdpprofilesOrgIdpprofile:getIdpprofilesOrgIdpprofile": {
            "properties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/getIdpprofilesOrgIdpprofileOverwrite:getIdpprofilesOrgIdpprofileOverwrite"
                    }
                }
            },
            "type": "object",
            "required": [
                "baseProfile",
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId",
                "overwrites"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getIdpprofilesOrgIdpprofileOverwrite:getIdpprofilesOrgIdpprofileOverwrite": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum:\n  * alert (default)\n  * drop: siliently dropping packets\n  * close: notify client/server to close connection\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/getIdpprofilesOrgIdpprofileOverwriteMatching:getIdpprofilesOrgIdpprofileOverwriteMatching"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "matching",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getIdpprofilesOrgIdpprofileOverwriteMatching:getIdpprofilesOrgIdpprofileOverwriteMatching": {
            "properties": {
                "attackNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dstSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attackNames",
                "dstSubnets",
                "severities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getInventoryOrgInventory:getInventoryOrgInventory": {
            "properties": {
                "adopted": {
                    "type": "boolean",
                    "description": "only if `type`==`switch` or `type`==`gateway`\nwhether the switch/gateway is adopted\n"
                },
                "claimCode": {
                    "type": "string",
                    "description": "device claim code\n"
                },
                "connected": {
                    "type": "boolean",
                    "description": "whether the device is connected\n"
                },
                "deviceprofileId": {
                    "type": "string",
                    "description": "deviceprofile id if assigned, null if not assigned\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "hostname reported by the device\n"
                },
                "hwRev": {
                    "type": "string",
                    "description": "device hardware revision number\n"
                },
                "id": {
                    "type": "string",
                    "description": "device id\n"
                },
                "jsi": {
                    "type": "boolean"
                },
                "mac": {
                    "type": "string",
                    "description": "device MAC address\n"
                },
                "model": {
                    "type": "string",
                    "description": "device model\n"
                },
                "name": {
                    "type": "string",
                    "description": "device name if configured\n"
                },
                "orgId": {
                    "type": "string"
                },
                "serial": {
                    "type": "string",
                    "description": "device serial\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Site ID where the device is assigned to\n"
                },
                "sku": {
                    "type": "string",
                    "description": "device stock keeping unit\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `ap`, `gateway`, `switch`\n"
                },
                "vcMac": {
                    "type": "string",
                    "description": "if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Clust, MAC Address of the Cluster\n"
                }
            },
            "type": "object",
            "required": [
                "adopted",
                "claimCode",
                "connected",
                "deviceprofileId",
                "hostname",
                "hwRev",
                "id",
                "jsi",
                "mac",
                "model",
                "name",
                "orgId",
                "serial",
                "siteId",
                "sku",
                "type",
                "vcMac"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getNacrulesOrgNacrule:getNacrulesOrgNacrule": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getNactagsOrgNactag:getNactagsOrgNactag": {
            "properties": {
                "allowUsermacOverride": {
                    "type": "boolean",
                    "description": "can be set to true to allow the override by usermac result\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "egressVlanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`egress_vlan_names`, list of egress vlans to return\n"
                },
                "gbpTag": {
                    "type": "integer",
                    "description": "if `type`==`gbp_tag`\n"
                },
                "id": {
                    "type": "string"
                },
                "match": {
                    "type": "string",
                    "description": "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`, `mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`\n"
                },
                "matchAll": {
                    "type": "boolean",
                    "description": "This field is applicable only when `type`==`match`\n  * `false`: means it is sufficient to match any of the values (i.e., match-any behavior)\n  * `true`: means all values should be matched (i.e., match-all behavior)\n\n\nCurrently it makes sense to set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'\n"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "radiusAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_attrs in the result of a given rule.\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "if `type`==`radius_group`\n"
                },
                "radiusVendorAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field \"radius_vendor_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.\n"
                },
                "sessionTimeout": {
                    "type": "integer",
                    "description": "if `type`==`session_timeout, in seconds\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`, `username_attr`, `vlan`\n"
                },
                "usernameAttr": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`match`\n"
                },
                "vlan": {
                    "type": "string",
                    "description": "if `type`==`vlan`\n"
                }
            },
            "type": "object",
            "required": [
                "allowUsermacOverride",
                "createdTime",
                "egressVlanNames",
                "gbpTag",
                "id",
                "match",
                "matchAll",
                "modifiedTime",
                "name",
                "orgId",
                "radiusAttrs",
                "radiusGroup",
                "radiusVendorAttrs",
                "sessionTimeout",
                "type",
                "usernameAttr",
                "values",
                "vlan"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getNetworksOrgNetwork:getNetworksOrgNetwork": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getNetworktemplatesOrgNetworktemplate:getNetworktemplatesOrgNetworktemplate": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getPsksOrgPsk:getPsksOrgPsk": {
            "properties": {
                "adminSsoId": {
                    "type": "string",
                    "description": "sso id for psk created from psk portal\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "id": {
                    "type": "string"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000\n"
                },
                "maxUsage": {
                    "type": "integer",
                    "description": "For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)\n"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n"
                },
                "orgId": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n"
                },
                "role": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `macs`, `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adminSsoId",
                "createdTime",
                "email",
                "expireTime",
                "expiryNotificationTime",
                "id",
                "mac",
                "macs",
                "maxUsage",
                "modifiedTime",
                "name",
                "note",
                "notifyExpiry",
                "notifyOnCreateOrEdit",
                "oldPassphrase",
                "orgId",
                "passphrase",
                "role",
                "ssid",
                "usage",
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getRftemplatesOrgRftemplate:getRftemplatesOrgRftemplate": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getServicepoliciesOrgServicepolicy:getServicepoliciesOrgServicepolicy": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:org/getServicepoliciesOrgServicepolicyAppqoe:getServicepoliciesOrgServicepolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/getServicepoliciesOrgServicepolicyEwf:getServicepoliciesOrgServicepolicyEwf"
                    }
                },
                "id": {
                    "type": "string"
                },
                "idp": {
                    "$ref": "#/types/junipermist:org/getServicepoliciesOrgServicepolicyIdp:getServicepoliciesOrgServicepolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them\noptionally, you can customize by using `path_preference`\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "appqoe",
                "createdTime",
                "ewfs",
                "id",
                "idp",
                "localRouting",
                "modifiedTime",
                "name",
                "orgId",
                "pathPreference",
                "services",
                "tenants"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getServicepoliciesOrgServicepolicyAppqoe:getServicepoliciesOrgServicepolicyAppqoe": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getServicepoliciesOrgServicepolicyEwf:getServicepoliciesOrgServicepolicyEwf": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "blockMessage": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "profile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                }
            },
            "type": "object",
            "required": [
                "alertOnly",
                "blockMessage",
                "enabled",
                "profile"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getServicepoliciesOrgServicepolicyIdp:getServicepoliciesOrgServicepolicyIdp": {
            "properties": {
                "alertOnly": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idpprofileId": {
                    "type": "string",
                    "description": "org_level IDP Profile can be used, this takes precedence over `profile`\n"
                },
                "profile": {
                    "type": "string",
                    "description": "`strict` (default) / `standard` / or keys from from idp_profiles\n"
                }
            },
            "type": "object",
            "required": [
                "alertOnly",
                "enabled",
                "idpprofileId",
                "profile"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getServicesOrgService:getServicesOrgService": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getSitegroupsOrgSitegroup:getSitegroupsOrgSitegroup": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "siteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId",
                "siteIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getVpnsOrgVpn:getVpnsOrgVpn": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "paths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/getVpnsOrgVpnPaths:getVpnsOrgVpnPaths"
                    }
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId",
                "paths"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getVpnsOrgVpnPaths:getVpnsOrgVpnPaths": {
            "properties": {
                "bfdProfile": {
                    "type": "string",
                    "description": "enum: `broadband`, `lte`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "if different from the wan port\n"
                },
                "pod": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "bfdProfile",
                "ip",
                "pod"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getWebhooksOrgWebhook:getWebhooksOrgWebhook": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk`\nIf splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "enabled",
                "headers",
                "id",
                "modifiedTime",
                "name",
                "oauth2ClientId",
                "oauth2ClientSecret",
                "oauth2GrantType",
                "oauth2Password",
                "oauth2Scopes",
                "oauth2TokenUrl",
                "oauth2Username",
                "orgId",
                "secret",
                "siteId",
                "splunkToken",
                "topics",
                "type",
                "url",
                "verifyCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getWlantemplatesOrgWlantemplate:getWlantemplatesOrgWlantemplate": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:org/getWxtagsOrgWxtag:getWxtagsOrgWxtag": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "id",
                "modifiedTime",
                "name",
                "orgId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:site/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions": {
            "properties": {
                "autoLoopbackSubnet": {
                    "type": "string",
                    "description": "optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides\n"
                },
                "autoLoopbackSubnet6": {
                    "type": "string",
                    "description": "optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides\n"
                },
                "autoRouterIdSubnet": {
                    "type": "string",
                    "description": "optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored\n"
                },
                "autoRouterIdSubnet6": {
                    "type": "string",
                    "description": "optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored\n"
                },
                "coreAsBorder": {
                    "type": "boolean",
                    "description": "optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway\nwhen `routed_at` != `core`, whether to do virtual-gateway at core as well\n"
                },
                "overlay": {
                    "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptionsOverlay:EvpnTopologyEvpnOptionsOverlay"
                },
                "perVlanVgaV4Mac": {
                    "type": "boolean",
                    "description": "by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4_mac\nif enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)\n"
                },
                "routedAt": {
                    "type": "string",
                    "description": "optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`\n"
                },
                "underlay": {
                    "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptionsUnderlay:EvpnTopologyEvpnOptionsUnderlay"
                },
                "vsInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptionsVsInstances:EvpnTopologyEvpnOptionsVsInstances"
                    },
                    "description": "optional, for EX9200 only to seggregate virtual-switches\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoLoopbackSubnet",
                        "autoLoopbackSubnet6",
                        "autoRouterIdSubnet",
                        "coreAsBorder",
                        "perVlanVgaV4Mac",
                        "routedAt"
                    ]
                }
            }
        },
        "junipermist:site/EvpnTopologyEvpnOptionsOverlay:EvpnTopologyEvpnOptionsOverlay": {
            "properties": {
                "as": {
                    "type": "integer",
                    "description": "Overlay BGP Local AS Number\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "as"
                    ]
                }
            }
        },
        "junipermist:site/EvpnTopologyEvpnOptionsUnderlay:EvpnTopologyEvpnOptionsUnderlay": {
            "properties": {
                "asBase": {
                    "type": "integer",
                    "description": "Underlay BGP Base AS Number\n"
                },
                "routedIdPrefix": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string",
                    "description": "underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6\n"
                },
                "useIpv6": {
                    "type": "boolean",
                    "description": "if v6 is desired for underlay\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asBase",
                        "useIpv6"
                    ]
                }
            }
        },
        "junipermist:site/EvpnTopologyEvpnOptionsVsInstances:EvpnTopologyEvpnOptionsVsInstances": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/EvpnTopologySwitches:EvpnTopologySwitches": {
            "properties": {
                "deviceprofileId": {
                    "type": "string"
                },
                "evpnId": {
                    "type": "integer"
                },
                "mac": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "pod": {
                    "type": "integer",
                    "description": "optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g. \n  * for CLOS, to group dist / access switches into pods\n  * for ERB/CRB, to group dist / esilag-access into pods\n"
                },
                "pods": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "by default, core switches are assumed to be connecting all pods. \nif you want to limit the pods, you can specify pods.\n"
                },
                "role": {
                    "type": "string",
                    "description": "use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`\n"
                },
                "routerId": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceprofileId",
                        "evpnId",
                        "mac",
                        "model",
                        "pod",
                        "pods",
                        "role",
                        "routerId",
                        "siteId"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateAclPolicy:NetworktemplateAclPolicy": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclPolicyAction:NetworktemplateAclPolicyAction"
                    },
                    "description": "ACL Policy Actions:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                },
                "name": {
                    "type": "string"
                },
                "srcTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ACL Policy Source Tags:\n  - for GBP-based policy, all src_tags and dst_tags have to be gbp-based\n  - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateAclPolicyAction:NetworktemplateAclPolicyAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "dstTag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dstTag"
            ]
        },
        "junipermist:site/NetworktemplateAclTags:NetworktemplateAclTags": {
            "properties": {
                "gbpTag": {
                    "type": "integer",
                    "description": "required if\n  - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)\n  - `type`==`gbp_resource`\n  - `type`==`static_gbp` (applying gbp tag against matching conditions)\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if \n- `type`==`mac`\n- `type`==`static_gbp` if from matching mac\n"
                },
                "network": {
                    "type": "string",
                    "description": "if:\n  * `type`==`mac` (optional. default is `any`)\n  * `type`==`subnet` (optional. default is `any`)\n  * `type`==`network`\n  * `type`==`resource` (optional. default is `any`)\n  * `type`==`static_gbp` if from matching network (vlan)'\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "required if:\n  * `type`==`radius_group`\n  * `type`==`static_gbp`\nif from matching radius_group\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclTagsSpec:NetworktemplateAclTagsSpec"
                    },
                    "description": "if `type`==`resource` or `type`==`gbp_resource`. Empty means unrestricted, i.e. any\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if \n- `type`==`subnet` \n- `type`==`resource` (optional. default is `any`)\n- `type`==`static_gbp` if from matching subnet\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: \n  * `any`: matching anything not identified\n  * `dynamic_gbp`: from the gbp_tag received from RADIUS\n  * `gbp_resource`: can only be used in `dst_tags`\n  * `mac`\n  * `network`\n  * `radius_group`\n  * `resource`: can only be used in `dst_tags`\n  * `static_gbp`: applying gbp tag against matching conditions\n  * `subnet`'\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macs",
                        "subnets",
                        "type"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateAclTagsSpec:NetworktemplateAclTagsSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "`tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocol_number` is between 1-254, default is `any` `protocol_number` is between 1-254\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping": {
            "properties": {
                "allNetworks": {
                    "type": "boolean"
                },
                "enableArpSpoofCheck": {
                    "type": "boolean",
                    "description": "Enable for dynamic ARP inspection check\n"
                },
                "enableIpSourceGuard": {
                    "type": "boolean",
                    "description": "Enable for check for forging source IP address\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `all_networks`==`false`, list of network with DHCP snooping enabled\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes6NextQualified:NetworktemplateExtraRoutes6NextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateExtraRoutes6NextQualified:NetworktemplateExtraRoutes6NextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes": {
            "properties": {
                "discard": {
                    "type": "boolean",
                    "description": "this takes precedence\n"
                },
                "metric": {
                    "type": "integer"
                },
                "nextQualified": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutesNextQualified:NetworktemplateExtraRoutesNextQualified"
                    }
                },
                "noResolve": {
                    "type": "boolean"
                },
                "preference": {
                    "type": "integer"
                },
                "via": {
                    "type": "string",
                    "description": "next-hop IP Address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "discard",
                        "noResolve",
                        "via"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateExtraRoutesNextQualified:NetworktemplateExtraRoutesNextQualified": {
            "properties": {
                "metric": {
                    "type": "integer"
                },
                "preference": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateMistNac:NetworktemplateMistNac": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateNetworks:NetworktemplateNetworks": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv4 Virtual Gateway\n"
                },
                "gateway6": {
                    "type": "string",
                    "description": "only required for EVPN-VXLAN networks, IPv6 Virtual Gateway\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required). NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set\n"
                },
                "isolationVlanId": {
                    "type": "string"
                },
                "subnet": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "subnet6": {
                    "type": "string",
                    "description": "optional for pure switching, required when L3 / routing features are used\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isolation",
                        "vlanId"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateOspfAreas:NetworktemplateOspfAreas": {
            "properties": {
                "includeLoopback": {
                    "type": "boolean"
                },
                "ospfNetworks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateOspfAreasOspfNetworks:NetworktemplateOspfAreasOspfNetworks"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "OSPF type. enum: `default`, `nssa`, `stub`\n"
                }
            },
            "type": "object",
            "required": [
                "ospfNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "includeLoopback",
                        "ospfNetworks",
                        "type"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateOspfAreasOspfNetworks:NetworktemplateOspfAreasOspfNetworks": {
            "properties": {
                "authKeys": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Required if `auth_type`==`md5`. Property key is the key number\n"
                },
                "authPassword": {
                    "type": "string",
                    "description": "Required if `auth_type`==`password`, the password, max length is 8\n"
                },
                "authType": {
                    "type": "string",
                    "description": "auth type. enum: `md5`, `none`, `password`\n"
                },
                "bfdMinimumInterval": {
                    "type": "integer"
                },
                "deadInterval": {
                    "type": "integer"
                },
                "exportPolicy": {
                    "type": "string"
                },
                "helloInterval": {
                    "type": "integer"
                },
                "importPolicy": {
                    "type": "string"
                },
                "interfaceType": {
                    "type": "string",
                    "description": "interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`\n"
                },
                "metric": {
                    "type": "integer"
                },
                "noReadvertiseToOverlay": {
                    "type": "boolean",
                    "description": "by default, we'll re-advertise all learned OSPF routes toward overlay\n"
                },
                "passive": {
                    "type": "boolean",
                    "description": "whether to send OSPF-Hello\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authKeys",
                        "authType",
                        "interfaceType",
                        "noReadvertiseToOverlay",
                        "passive"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplatePortMirroring:NetworktemplatePortMirroring": {
            "properties": {
                "inputNetworksIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsEgresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "outputNetwork": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                },
                "outputPortId": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "inputNetworksIngresses",
                        "inputPortIdsEgresses",
                        "inputPortIdsIngresses"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplatePortUsages:NetworktemplatePortUsages": {
            "properties": {
                "allNetworks": {
                    "type": "boolean",
                    "description": "Only if `mode`==`trunk` whether to trunk all network/vlans\n"
                },
                "allowDhcpd": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.\n"
                },
                "allowMultipleSupplicants": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "bypassAuthWhenServerDown": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down\n"
                },
                "bypassAuthWhenServerDownForUnkonwnClient": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down\n"
                },
                "description": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether the port is disabled\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`\n"
                },
                "dynamicVlanNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth\n"
                },
                "enableQos": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic`\n"
                },
                "guestNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)\n"
                },
                "interSwitchLink": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` inter_switch_link is used together with \"isolation\" under networks. NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together\n"
                },
                "macAuthOnly": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`\n"
                },
                "macAuthPreferred": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.\n"
                },
                "macAuthProtocol": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform\n"
                },
                "mode": {
                    "type": "string",
                    "description": "`mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only if `mode`==`trunk`, the list of network/vlans\n"
                },
                "persistMac": {
                    "type": "boolean",
                    "description": "Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses\n"
                },
                "poeDisabled": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port\n"
                },
                "portAuth": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`\n"
                },
                "portNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` native network/vlan for untagged traffic\n"
                },
                "reauthInterval": {
                    "type": "integer",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range\n"
                },
                "resetDefaultWhen": {
                    "type": "string",
                    "description": "Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplatePortUsagesRule:NetworktemplatePortUsagesRule"
                    },
                    "description": "Only if `mode`==`dynamic`\n"
                },
                "serverFailNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan\n"
                },
                "serverRejectNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails\n"
                },
                "speed": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "stormControl": {
                    "$ref": "#/types/junipermist:site/NetworktemplatePortUsagesStormControl:NetworktemplatePortUsagesStormControl",
                    "description": "Switch storm control. Only if `mode`!=`dynamic`\n"
                },
                "stpEdge": {
                    "type": "boolean",
                    "description": "Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames\n"
                },
                "stpNoRootPort": {
                    "type": "boolean"
                },
                "stpP2p": {
                    "type": "boolean"
                },
                "uiEvpntopoId": {
                    "type": "string",
                    "description": "optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches\n"
                },
                "useVstp": {
                    "type": "boolean",
                    "description": "if this is connected to a vstp network\n"
                },
                "voipNetwork": {
                    "type": "string",
                    "description": "Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allNetworks",
                        "allowMultipleSupplicants",
                        "bypassAuthWhenServerDown",
                        "bypassAuthWhenServerDownForUnkonwnClient",
                        "disableAutoneg",
                        "disabled",
                        "duplex",
                        "dynamicVlanNetworks",
                        "enableMacAuth",
                        "enableQos",
                        "interSwitchLink",
                        "macAuthProtocol",
                        "macLimit",
                        "networks",
                        "persistMac",
                        "poeDisabled",
                        "reauthInterval",
                        "resetDefaultWhen",
                        "speed",
                        "stpEdge",
                        "stpNoRootPort",
                        "stpP2p",
                        "useVstp"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplatePortUsagesRule:NetworktemplatePortUsagesRule": {
            "properties": {
                "equals": {
                    "type": "string"
                },
                "equalsAnies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "use `equals_any` to match any item in a list\n"
                },
                "expression": {
                    "type": "string",
                    "description": "\"[0:3]\":\"abcdef\" \u003e \"abc\"\n\"split(.)[1]\": \"a.b.c\" \u003e \"b\"\n\"split(-)[1][0:3]: \"a1234-b5678-c90\" \u003e \"b56\"\n"
                },
                "src": {
                    "type": "string",
                    "description": "enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "`port_usage` name\n"
                }
            },
            "type": "object",
            "required": [
                "src"
            ]
        },
        "junipermist:site/NetworktemplatePortUsagesStormControl:NetworktemplatePortUsagesStormControl": {
            "properties": {
                "noBroadcast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on broadcast traffic\n"
                },
                "noMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on multicast traffic\n"
                },
                "noRegisteredMulticast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on registered multicast traffic\n"
                },
                "noUnknownUnicast": {
                    "type": "boolean",
                    "description": "whether to disable storm control on unknown unicast traffic\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noBroadcast",
                        "noMulticast",
                        "noRegisteredMulticast",
                        "noUnknownUnicast",
                        "percentage"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig": {
            "properties": {
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRadiusConfigAcctServer:NetworktemplateRadiusConfigAcctServer"
                    }
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRadiusConfigAuthServer:NetworktemplateRadiusConfigAuthServer"
                    }
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout\n"
                },
                "network": {
                    "type": "string",
                    "description": "use `network`or `source_ip`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "use `network`or `source_ip`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acctInterimInterval",
                        "authServersRetries",
                        "authServersTimeout"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRadiusConfigAcctServer:NetworktemplateRadiusConfigAcctServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Acct port of RADIUS server\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRadiusConfigAuthServer:NetworktemplateRadiusConfigAuthServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Auth port of RADIUS server\n"
                },
                "requireMessageAuthenticator": {
                    "type": "boolean",
                    "description": "whether to require Message-Authenticator in requests\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requireMessageAuthenticator",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogArchive:NetworktemplateRemoteSyslogArchive"
                },
                "console": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogConsole:NetworktemplateRemoteSyslogConsole"
                },
                "enabled": {
                    "type": "boolean"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogFile:NetworktemplateRemoteSyslogFile"
                    }
                },
                "network": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "sendToAllServers": {
                    "type": "boolean"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogServer:NetworktemplateRemoteSyslogServer"
                    }
                },
                "timeFormat": {
                    "type": "string",
                    "description": "enum: `millisecond`, `year`, `year millisecond`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogUser:NetworktemplateRemoteSyslogUser"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "sendToAllServers"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslogArchive:NetworktemplateRemoteSyslogArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateRemoteSyslogConsole:NetworktemplateRemoteSyslogConsole": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogConsoleContent:NetworktemplateRemoteSyslogConsoleContent"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateRemoteSyslogConsoleContent:NetworktemplateRemoteSyslogConsoleContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslogFile:NetworktemplateRemoteSyslogFile": {
            "properties": {
                "archive": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogFileArchive:NetworktemplateRemoteSyslogFileArchive"
                },
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogFileContent:NetworktemplateRemoteSyslogFileContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "file": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "structuredData": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateRemoteSyslogFileArchive:NetworktemplateRemoteSyslogFileArchive": {
            "properties": {
                "files": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateRemoteSyslogFileContent:NetworktemplateRemoteSyslogFileContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslogServer:NetworktemplateRemoteSyslogServer": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogServerContent:NetworktemplateRemoteSyslogServerContent"
                    }
                },
                "explicitPriority": {
                    "type": "boolean"
                },
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "host": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `tcp`, `udp`\n"
                },
                "routingInstance": {
                    "type": "string"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "if source_address is configured, will use the vlan firstly otherwise use source_ip\n"
                },
                "structuredData": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "port",
                        "protocol",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslogServerContent:NetworktemplateRemoteSyslogServerContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateRemoteSyslogUser:NetworktemplateRemoteSyslogUser": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslogUserContent:NetworktemplateRemoteSyslogUserContent"
                    }
                },
                "match": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateRemoteSyslogUserContent:NetworktemplateRemoteSyslogUserContent": {
            "properties": {
                "facility": {
                    "type": "string",
                    "description": "enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`\n"
                },
                "severity": {
                    "type": "string",
                    "description": "enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "facility",
                        "severity"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig": {
            "properties": {
                "clientLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigClientList:NetworktemplateSnmpConfigClientList"
                    }
                },
                "contact": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "engineId": {
                    "type": "string",
                    "description": "enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`\n"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "trapGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigTrapGroup:NetworktemplateSnmpConfigTrapGroup"
                    }
                },
                "v2cConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV2cConfig:NetworktemplateSnmpConfigV2cConfig"
                    }
                },
                "v3Config": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3Config:NetworktemplateSnmpConfigV3Config"
                },
                "views": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigView:NetworktemplateSnmpConfigView"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "network"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSnmpConfigClientList:NetworktemplateSnmpConfigClientList": {
            "properties": {
                "clientListName": {
                    "type": "string"
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigTrapGroup:NetworktemplateSnmpConfigTrapGroup": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupName": {
                    "type": "string",
                    "description": "Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "version": {
                    "type": "string",
                    "description": "enum: `all`, `v1`, `v2`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "version"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSnmpConfigV2cConfig:NetworktemplateSnmpConfigV2cConfig": {
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "clientListName": {
                    "type": "string",
                    "description": "client_list_name here should refer to client_list above\n"
                },
                "communityName": {
                    "type": "string"
                },
                "view": {
                    "type": "string",
                    "description": "view name here should be defined in views above\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3Config:NetworktemplateSnmpConfigV3Config": {
            "properties": {
                "notifies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigNotify:NetworktemplateSnmpConfigV3ConfigNotify"
                    }
                },
                "notifyFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigNotifyFilter:NetworktemplateSnmpConfigV3ConfigNotifyFilter"
                    }
                },
                "targetAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigTargetAddress:NetworktemplateSnmpConfigV3ConfigTargetAddress"
                    }
                },
                "targetParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigTargetParameter:NetworktemplateSnmpConfigV3ConfigTargetParameter"
                    }
                },
                "usm": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigUsm:NetworktemplateSnmpConfigV3ConfigUsm"
                },
                "vacm": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigVacm:NetworktemplateSnmpConfigV3ConfigVacm"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigNotify:NetworktemplateSnmpConfigV3ConfigNotify": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `inform`, `trap`\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigNotifyFilter:NetworktemplateSnmpConfigV3ConfigNotifyFilter": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigNotifyFilterContent:NetworktemplateSnmpConfigV3ConfigNotifyFilterContent"
                    }
                },
                "profileName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigNotifyFilterContent:NetworktemplateSnmpConfigV3ConfigNotifyFilterContent": {
            "properties": {
                "include": {
                    "type": "boolean"
                },
                "oid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigTargetAddress:NetworktemplateSnmpConfigV3ConfigTargetAddress": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressMask": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "tagList": {
                    "type": "string",
                    "description": "\u003crefer to notify tag, can be multiple with blank\n"
                },
                "targetAddressName": {
                    "type": "string"
                },
                "targetParameters": {
                    "type": "string",
                    "description": "refer to notify target parameters name\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigTargetParameter:NetworktemplateSnmpConfigV3ConfigTargetParameter": {
            "properties": {
                "messageProcessingModel": {
                    "type": "string",
                    "description": "enum: `v1`, `v2c`, `v3`\n"
                },
                "name": {
                    "type": "string"
                },
                "notifyFilter": {
                    "type": "string",
                    "description": "refer to profile-name in notify_filter\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                },
                "securityName": {
                    "type": "string",
                    "description": "refer to security_name in usm\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigUsm:NetworktemplateSnmpConfigV3ConfigUsm": {
            "properties": {
                "engineType": {
                    "type": "string",
                    "description": "enum: `local_engine`, `remote_engine`\n"
                },
                "engineid": {
                    "type": "string",
                    "description": "required only if `engine_type`==`remote_engine`\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigUsmUser:NetworktemplateSnmpConfigV3ConfigUsmUser"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigUsmUser:NetworktemplateSnmpConfigV3ConfigUsmUser": {
            "properties": {
                "authenticationPassword": {
                    "type": "string",
                    "description": "Not required if `authentication_type`==`authentication_none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.\n",
                    "secret": true
                },
                "authenticationType": {
                    "type": "string",
                    "description": "sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`\n"
                },
                "encryptionPassword": {
                    "type": "string",
                    "description": "Not required if `encryption_type`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters\n",
                    "secret": true
                },
                "encryptionType": {
                    "type": "string",
                    "description": "enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigVacm:NetworktemplateSnmpConfigV3ConfigVacm": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmAccess:NetworktemplateSnmpConfigV3ConfigVacmAccess"
                    }
                },
                "securityToGroup": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmAccess:NetworktemplateSnmpConfigV3ConfigVacmAccess": {
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "prefixLists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList:NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList:NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList": {
            "properties": {
                "contextPrefix": {
                    "type": "string",
                    "description": "only required if `type`==`context_prefix`\n"
                },
                "notifyView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "readView": {
                    "type": "string",
                    "description": "refer to view name\n"
                },
                "securityLevel": {
                    "type": "string",
                    "description": "enum: `authentication`, `none`, `privacy`\n"
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `any`, `usm`, `v1`, `v2c`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `context_prefix`, `default_context_prefix`\n"
                },
                "writeView": {
                    "type": "string",
                    "description": "refer to view name\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup": {
            "properties": {
                "contents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent"
                    }
                },
                "securityModel": {
                    "type": "string",
                    "description": "enum: `usm`, `v1`, `v2c`\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent:NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "refer to group_name under access\n"
                },
                "securityName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSnmpConfigView:NetworktemplateSnmpConfigView": {
            "properties": {
                "include": {
                    "type": "boolean",
                    "description": "if the root oid configured is included\n"
                },
                "oid": {
                    "type": "string"
                },
                "viewName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching": {
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatchingRule:NetworktemplateSwitchMatchingRule"
                    },
                    "description": "list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `match_model`, `match_name` or `match_role` must be defined\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateSwitchMatchingRule:NetworktemplateSwitchMatchingRule": {
            "properties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatchingRuleIpConfig:NetworktemplateSwitchMatchingRuleIpConfig",
                    "description": "In-Band Management interface configuration\n"
                },
                "matchModel": {
                    "type": "string",
                    "description": "string the switch model must start with to use this rule. It is possible to combine with the `match_name` and `match_role` attributes\n"
                },
                "matchName": {
                    "type": "string",
                    "description": "string the switch name must start with to use this rule. Use the `match_name_offset` to indicate the first character of the switch name to compare to. It is possible to combine with the `match_model` and `match_role` attributes\n"
                },
                "matchNameOffset": {
                    "type": "integer",
                    "description": "first character of the switch name to compare to the `match_name` value\n"
                },
                "matchRole": {
                    "type": "string",
                    "description": "string the switch role must start with to use this rule. It is possible to combine with the `match_name` and `match_model` attributes\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`\n",
                    "deprecationMessage": "The `match_type` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `match_name`, `match_model` and `match_role`attribuites and may be removed in future versions.\nPlease update your configurations."
                },
                "matchValue": {
                    "type": "string",
                    "deprecationMessage": "The `match_value` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `match_name`, `match_model` and `match_role`attribuites and may be removed in future versions.\nPlease update your configurations."
                },
                "name": {
                    "type": "string"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatchingRuleOobIpConfig:NetworktemplateSwitchMatchingRuleOobIpConfig",
                    "description": "Out-of-Band Management interface configuration\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatchingRulePortConfig:NetworktemplateSwitchMatchingRulePortConfig"
                    },
                    "description": "Propery key is the interface name or interface range\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatchingRulePortMirroring:NetworktemplateSwitchMatchingRulePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalConfigCmds",
                        "matchModel",
                        "matchName",
                        "matchNameOffset",
                        "matchType",
                        "matchValue"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMatchingRuleIpConfig:NetworktemplateSwitchMatchingRuleIpConfig": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "VLAN Name for the management interface\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMatchingRuleOobIpConfig:NetworktemplateSwitchMatchingRuleOobIpConfig": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "enum: `dhcp`, `static`\n"
                },
                "useMgmtVrf": {
                    "type": "boolean",
                    "description": "if supported on the platform. If enabled, DNS will be using this routing-instance, too\n"
                },
                "useMgmtVrfForHostOut": {
                    "type": "boolean",
                    "description": "for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type",
                        "useMgmtVrf",
                        "useMgmtVrfForHostOut"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMatchingRulePortConfig:NetworktemplateSwitchMatchingRulePortConfig": {
            "properties": {
                "aeDisableLacp": {
                    "type": "boolean",
                    "description": "To disable LACP support for the AE interface\n"
                },
                "aeIdx": {
                    "type": "integer",
                    "description": "Users could force to use the designated AE name\n"
                },
                "aeLacpSlow": {
                    "type": "boolean",
                    "description": "to use fast timeout\n"
                },
                "aggregated": {
                    "type": "boolean"
                },
                "critical": {
                    "type": "boolean",
                    "description": "if want to generate port up/down alarm\n"
                },
                "description": {
                    "type": "string"
                },
                "disableAutoneg": {
                    "type": "boolean",
                    "description": "if `speed` and `duplex` are specified, whether to disable autonegotiation\n"
                },
                "duplex": {
                    "type": "string",
                    "description": "enum: `auto`, `full`, `half`\n"
                },
                "dynamicUsage": {
                    "type": "string",
                    "description": "Enable dynamic usage for this port. Set to `dynamic` to enable.\n"
                },
                "esilag": {
                    "type": "boolean"
                },
                "mtu": {
                    "type": "integer",
                    "description": "media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation\n"
                },
                "noLocalOverwrite": {
                    "type": "boolean",
                    "description": "prevent helpdesk to override the port config\n"
                },
                "poeDisabled": {
                    "type": "boolean"
                },
                "speed": {
                    "type": "string",
                    "description": "enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`\n"
                },
                "usage": {
                    "type": "string",
                    "description": "port usage name. If EVPN is used, use `evpn_uplink`or `evpn_downlink`\n"
                }
            },
            "type": "object",
            "required": [
                "usage"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregated",
                        "disableAutoneg",
                        "duplex",
                        "mtu",
                        "poeDisabled",
                        "speed",
                        "usage"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMatchingRulePortMirroring:NetworktemplateSwitchMatchingRulePortMirroring": {
            "properties": {
                "inputNetworksIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsEgresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "inputPortIdsIngresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified\n"
                },
                "outputNetwork": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                },
                "outputPortId": {
                    "type": "string",
                    "description": "exaclty one of the `output_port_id` or `output_network` should be provided\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "inputNetworksIngresses",
                        "inputPortIdsEgresses",
                        "inputPortIdsIngresses"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt": {
            "properties": {
                "apAffinityThreshold": {
                    "type": "integer",
                    "description": "ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.\n"
                },
                "cliBanner": {
                    "type": "string",
                    "description": "Set Banners for switches. Allows markup formatting\n"
                },
                "cliIdleTimeout": {
                    "type": "integer",
                    "description": "Sets timeout for switches\n"
                },
                "configRevertTimer": {
                    "type": "integer",
                    "description": "the rollback timer for commit confirmed\n"
                },
                "dhcpOptionFqdn": {
                    "type": "boolean",
                    "description": "Enable to provide the FQDN with DHCP option 81\n"
                },
                "disableOobDownAlarm": {
                    "type": "boolean"
                },
                "localAccounts": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtLocalAccounts:NetworktemplateSwitchMgmtLocalAccounts"
                    },
                    "description": "Property key is the user name. For Local user authentication\n"
                },
                "mxedgeProxyHost": {
                    "type": "string"
                },
                "mxedgeProxyPort": {
                    "type": "integer"
                },
                "protectRe": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtProtectRe:NetworktemplateSwitchMgmtProtectRe",
                    "description": "restrict inbound-traffic to host\nwhen enabled, all traffic that is not essential to our operation will be dropped \ne.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works\n"
                },
                "rootPassword": {
                    "type": "string",
                    "secret": true
                },
                "tacacs": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtTacacs:NetworktemplateSwitchMgmtTacacs"
                },
                "useMxedgeProxy": {
                    "type": "boolean",
                    "description": "to use mxedge as proxy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apAffinityThreshold",
                        "configRevertTimer",
                        "dhcpOptionFqdn",
                        "mxedgeProxyPort"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtLocalAccounts:NetworktemplateSwitchMgmtLocalAccounts": {
            "properties": {
                "password": {
                    "type": "string",
                    "secret": true
                },
                "role": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "role"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtProtectRe:NetworktemplateSwitchMgmtProtectRe": {
            "properties": {
                "allowedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optionally, services we'll allow. enum: `icmp`, `ssh`\n"
                },
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtProtectReCustom:NetworktemplateSwitchMgmtProtectReCustom"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled, all traffic that is not essential to our operation will be dropped\ne.g. ntp / dns / traffic to mist will be allowed by default\n     if dhcpd is enabled, we'll make sure it works\n"
                },
                "trustedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "host/subnets we'll allow traffic to/from\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedServices",
                        "customs",
                        "enabled",
                        "trustedHosts"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtProtectReCustom:NetworktemplateSwitchMgmtProtectReCustom": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtTacacs:NetworktemplateSwitchMgmtTacacs": {
            "properties": {
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtTacacsAcctServer:NetworktemplateSwitchMgmtTacacsAcctServer"
                    }
                },
                "defaultRole": {
                    "type": "string",
                    "description": "enum: `admin`, `helpdesk`, `none`, `read`\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "network": {
                    "type": "string",
                    "description": "which network the TACACS server resides\n"
                },
                "tacplusServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmtTacacsTacplusServer:NetworktemplateSwitchMgmtTacacsTacplusServer"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultRole"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtTacacsAcctServer:NetworktemplateSwitchMgmtTacacsAcctServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateSwitchMgmtTacacsTacplusServer:NetworktemplateSwitchMgmtTacacsTacplusServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "junipermist:site/NetworktemplateVrfConfig:NetworktemplateVrfConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable VRF (when supported on the device)\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateVrfInstances:NetworktemplateVrfInstances": {
            "properties": {
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateVrfInstancesExtraRoutes:NetworktemplateVrfInstancesExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "junipermist:site/NetworktemplateVrfInstancesExtraRoutes:NetworktemplateVrfInstancesExtraRoutes": {
            "properties": {
                "via": {
                    "type": "string",
                    "description": "Next-hop address\n"
                }
            },
            "type": "object",
            "required": [
                "via"
            ]
        },
        "junipermist:site/SettingAnalytic:SettingAnalytic": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable Advanced Analytic feature (using SUB-ANA license)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingAutoUpgrade:SettingAutoUpgrade": {
            "properties": {
                "customVersions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "custom versions for different models. Property key is the model name (e.g. \"AP41\")\n"
                },
                "dayOfWeek": {
                    "type": "string",
                    "description": "enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)\n"
                },
                "timeOfDay": {
                    "type": "string",
                    "description": "any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time\n"
                },
                "version": {
                    "type": "string",
                    "description": "desired version. enum: `beta`, `custom`, `stable`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customVersions",
                        "enabled",
                        "version"
                    ]
                }
            }
        },
        "junipermist:site/SettingBleConfig:SettingBleConfig": {
            "properties": {
                "beaconEnabled": {
                    "type": "boolean",
                    "description": "whether Mist beacons is enabled\n"
                },
                "beaconRate": {
                    "type": "integer",
                    "description": "required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second\n"
                },
                "beaconRateMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                },
                "beamDisableds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)\n"
                },
                "customBlePacketEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send custom packet\n"
                },
                "customBlePacketFrame": {
                    "type": "string",
                    "description": "The custom frame to be sent out in this beacon. The frame must be a hexstring\n"
                },
                "customBlePacketFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emitted by custom ble beacon\n"
                },
                "eddystoneUidAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUidBeams": {
                    "type": "string"
                },
                "eddystoneUidEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled\n"
                },
                "eddystoneUidFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit by Eddystone-UID beacon\n"
                },
                "eddystoneUidInstance": {
                    "type": "string",
                    "description": "Eddystone-UID instance for the device\n"
                },
                "eddystoneUidNamespace": {
                    "type": "string",
                    "description": "Eddystone-UID namespace\n"
                },
                "eddystoneUrlAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "eddystoneUrlBeams": {
                    "type": "string"
                },
                "eddystoneUrlEnabled": {
                    "type": "boolean",
                    "description": "only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled\n"
                },
                "eddystoneUrlFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emit by Eddystone-UID beacon\n"
                },
                "eddystoneUrlUrl": {
                    "type": "string",
                    "description": "URL pointed by Eddystone-URL beacon\n"
                },
                "ibeaconAdvPower": {
                    "type": "integer",
                    "description": "advertised TX Power, -100 to 20 (dBm), omit this attribute to use default\n"
                },
                "ibeaconBeams": {
                    "type": "string"
                },
                "ibeaconEnabled": {
                    "type": "boolean",
                    "description": "can be enabled if `beacon_enabled`==`true`, whether to send iBeacon\n"
                },
                "ibeaconFreqMsec": {
                    "type": "integer",
                    "description": "Frequency (msec) of data emmit for iBeacon\n"
                },
                "ibeaconMajor": {
                    "type": "integer",
                    "description": "Major number for iBeacon\n"
                },
                "ibeaconMinor": {
                    "type": "integer",
                    "description": "Minor number for iBeacon\n"
                },
                "ibeaconUuid": {
                    "type": "string",
                    "description": "optional, if not specified, the same UUID as the beacon will be used\n"
                },
                "power": {
                    "type": "integer",
                    "description": "required if `power_mode`==`custom`; else use `power_mode` as default\n"
                },
                "powerMode": {
                    "type": "string",
                    "description": "enum: `custom`, `default`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "beaconEnabled",
                        "beaconRate",
                        "beaconRateMode",
                        "customBlePacketEnabled",
                        "customBlePacketFrame",
                        "customBlePacketFreqMsec",
                        "eddystoneUidAdvPower",
                        "eddystoneUidBeams",
                        "eddystoneUidEnabled",
                        "eddystoneUidFreqMsec",
                        "eddystoneUidInstance",
                        "eddystoneUidNamespace",
                        "eddystoneUrlAdvPower",
                        "eddystoneUrlBeams",
                        "eddystoneUrlEnabled",
                        "eddystoneUrlFreqMsec",
                        "eddystoneUrlUrl",
                        "ibeaconAdvPower",
                        "ibeaconBeams",
                        "ibeaconEnabled",
                        "ibeaconFreqMsec",
                        "ibeaconMajor",
                        "ibeaconMinor",
                        "ibeaconUuid",
                        "power",
                        "powerMode"
                    ]
                }
            }
        },
        "junipermist:site/SettingConfigPushPolicy:SettingConfigPushPolicy": {
            "properties": {
                "noPush": {
                    "type": "boolean",
                    "description": "stop any new config from being pushed to the device\n"
                },
                "pushWindow": {
                    "$ref": "#/types/junipermist:site/SettingConfigPushPolicyPushWindow:SettingConfigPushPolicyPushWindow",
                    "description": "if enabled, new config will only be pushed to device within the specified time window\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "noPush"
                    ]
                }
            }
        },
        "junipermist:site/SettingConfigPushPolicyPushWindow:SettingConfigPushPolicyPushWindow": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "hours": {
                    "$ref": "#/types/junipermist:site/SettingConfigPushPolicyPushWindowHours:SettingConfigPushPolicyPushWindowHours",
                    "description": "hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). \n\n**Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingConfigPushPolicyPushWindowHours:SettingConfigPushPolicyPushWindowHours": {
            "properties": {
                "fri": {
                    "type": "string"
                },
                "mon": {
                    "type": "string"
                },
                "sat": {
                    "type": "string"
                },
                "sun": {
                    "type": "string"
                },
                "thu": {
                    "type": "string"
                },
                "tue": {
                    "type": "string"
                },
                "wed": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fri",
                        "mon",
                        "sat",
                        "sun",
                        "thu",
                        "tue",
                        "wed"
                    ]
                }
            }
        },
        "junipermist:site/SettingCriticalUrlMonitoring:SettingCriticalUrlMonitoring": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "monitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/SettingCriticalUrlMonitoringMonitor:SettingCriticalUrlMonitoringMonitor"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "monitors"
                    ]
                }
            }
        },
        "junipermist:site/SettingCriticalUrlMonitoringMonitor:SettingCriticalUrlMonitoringMonitor": {
            "properties": {
                "url": {
                    "type": "string"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingEngagement:SettingEngagement": {
            "properties": {
                "dwellTagNames": {
                    "$ref": "#/types/junipermist:site/SettingEngagementDwellTagNames:SettingEngagementDwellTagNames"
                },
                "dwellTags": {
                    "$ref": "#/types/junipermist:site/SettingEngagementDwellTags:SettingEngagementDwellTags",
                    "description": "add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)\n"
                },
                "hours": {
                    "$ref": "#/types/junipermist:site/SettingEngagementHours:SettingEngagementHours",
                    "description": "hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). \n\n**Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.\n"
                },
                "maxDwell": {
                    "type": "integer",
                    "description": "max time, default is 43200(12h), max is 68400 (18h)\n"
                },
                "minDwell": {
                    "type": "integer",
                    "description": "min time\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxDwell"
                    ]
                }
            }
        },
        "junipermist:site/SettingEngagementDwellTagNames:SettingEngagementDwellTagNames": {
            "properties": {
                "bounce": {
                    "type": "string"
                },
                "engaged": {
                    "type": "string"
                },
                "passerby": {
                    "type": "string"
                },
                "stationed": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingEngagementDwellTags:SettingEngagementDwellTags": {
            "properties": {
                "bounce": {
                    "type": "string"
                },
                "engaged": {
                    "type": "string"
                },
                "passerby": {
                    "type": "string"
                },
                "stationed": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingEngagementHours:SettingEngagementHours": {
            "properties": {
                "fri": {
                    "type": "string"
                },
                "mon": {
                    "type": "string"
                },
                "sat": {
                    "type": "string"
                },
                "sun": {
                    "type": "string"
                },
                "thu": {
                    "type": "string"
                },
                "tue": {
                    "type": "string"
                },
                "wed": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fri",
                        "mon",
                        "sat",
                        "sun",
                        "thu",
                        "tue",
                        "wed"
                    ]
                }
            }
        },
        "junipermist:site/SettingGatewayMgmt:SettingGatewayMgmt": {
            "properties": {
                "adminSshkeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for SSR only, as direct root access is not allowed\n"
                },
                "appProbing": {
                    "$ref": "#/types/junipermist:site/SettingGatewayMgmtAppProbing:SettingGatewayMgmtAppProbing"
                },
                "appUsage": {
                    "type": "boolean",
                    "description": "consumes uplink bandwidth, requires WA license\n"
                },
                "autoSignatureUpdate": {
                    "$ref": "#/types/junipermist:site/SettingGatewayMgmtAutoSignatureUpdate:SettingGatewayMgmtAutoSignatureUpdate"
                },
                "configRevertTimer": {
                    "type": "integer",
                    "description": "he rollback timer for commit confirmed\n"
                },
                "disableConsole": {
                    "type": "boolean",
                    "description": "for both SSR and SRX disable console port\n"
                },
                "disableOob": {
                    "type": "boolean",
                    "description": "for both SSR and SRX disable management interface\n"
                },
                "probeHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "protectRe": {
                    "$ref": "#/types/junipermist:site/SettingGatewayMgmtProtectRe:SettingGatewayMgmtProtectRe",
                    "description": "restrict inbound-traffic to host\nwhen enabled, all traffic that is not essential to our operation will be dropped \ne.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "for SRX only\n",
                    "secret": true
                },
                "securityLogSourceAddress": {
                    "type": "string"
                },
                "securityLogSourceInterface": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminSshkeys",
                        "configRevertTimer",
                        "disableConsole",
                        "disableOob",
                        "probeHosts"
                    ]
                }
            }
        },
        "junipermist:site/SettingGatewayMgmtAppProbing:SettingGatewayMgmtAppProbing": {
            "properties": {
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "app-keys from /api/v1/const/applications\n"
                },
                "customApps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/SettingGatewayMgmtAppProbingCustomApp:SettingGatewayMgmtAppProbingCustomApp"
                    }
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingGatewayMgmtAppProbingCustomApp:SettingGatewayMgmtAppProbingCustomApp": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "appType": {
                    "type": "string"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only 1 entry is allowed:\n    * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)\n    * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)\n"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "packetSize": {
                    "type": "integer",
                    "description": "if `protocol`==`icmp`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `http`, `icmp`\n"
                },
                "url": {
                    "type": "string"
                },
                "vrf": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "hostnames",
                "name",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "hostnames",
                        "key",
                        "name",
                        "protocol",
                        "url"
                    ]
                }
            }
        },
        "junipermist:site/SettingGatewayMgmtAutoSignatureUpdate:SettingGatewayMgmtAutoSignatureUpdate": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`\n"
                },
                "enable": {
                    "type": "boolean"
                },
                "timeOfDay": {
                    "type": "string",
                    "description": "optional, Mist will decide the timing\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enable"
                    ]
                }
            }
        },
        "junipermist:site/SettingGatewayMgmtProtectRe:SettingGatewayMgmtProtectRe": {
            "properties": {
                "allowedServices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optionally, services we'll allow. enum: `icmp`, `ssh`\n"
                },
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/SettingGatewayMgmtProtectReCustom:SettingGatewayMgmtProtectReCustom"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled, all traffic that is not essential to our operation will be dropped\ne.g. ntp / dns / traffic to mist will be allowed by default\n     if dhcpd is enabled, we'll make sure it works\n"
                },
                "trustedHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "host/subnets we'll allow traffic to/from\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedServices",
                        "customs",
                        "enabled",
                        "trustedHosts"
                    ]
                }
            }
        },
        "junipermist:site/SettingGatewayMgmtProtectReCustom:SettingGatewayMgmtProtectReCustom": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched dst port, \"0\" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:site/SettingLed:SettingLed": {
            "properties": {
                "brightness": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "brightness",
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingOccupancy:SettingOccupancy": {
            "properties": {
                "assetsEnabled": {
                    "type": "boolean",
                    "description": "indicate whether named BLE assets should be included in the zone occupancy calculation\n"
                },
                "clientsEnabled": {
                    "type": "boolean",
                    "description": "indicate whether connected WiFi clients should be included in the zone occupancy calculation\n"
                },
                "minDuration": {
                    "type": "integer",
                    "description": "minimum duration\n"
                },
                "sdkclientsEnabled": {
                    "type": "boolean",
                    "description": "indicate whether SDK clients should be included in the zone occupancy calculation\n"
                },
                "unconnectedClientsEnabled": {
                    "type": "boolean",
                    "description": "indicate whether unconnected WiFi clients should be included in the zone occupancy calculation\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assetsEnabled",
                        "clientsEnabled",
                        "minDuration",
                        "sdkclientsEnabled",
                        "unconnectedClientsEnabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingProxy:SettingProxy": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingRogue:SettingRogue": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether or not rogue detection is enabled\n"
                },
                "honeypotEnabled": {
                    "type": "boolean",
                    "description": "whether or not honeypot detection is enabled\n"
                },
                "minDuration": {
                    "type": "integer",
                    "description": "minimum duration for a bssid to be considered rogue\n"
                },
                "minRssi": {
                    "type": "integer",
                    "description": "minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)\n"
                },
                "whitelistedBssids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of BSSIDs to whitelist. Ex: \"cc-:8e-:6f-:d4-:bf-:16\", \"cc-8e-6f-d4-bf-16\", \"cc-73-*\", \"cc:82:*\"\n"
                },
                "whitelistedSsids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of SSIDs to whitelist\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "honeypotEnabled",
                        "minDuration",
                        "minRssi",
                        "whitelistedBssids",
                        "whitelistedSsids"
                    ]
                }
            }
        },
        "junipermist:site/SettingRtsa:SettingRtsa": {
            "properties": {
                "appWaking": {
                    "type": "boolean"
                },
                "disableDeadReckoning": {
                    "type": "boolean"
                },
                "disablePressureSensor": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "trackAsset": {
                    "type": "boolean",
                    "description": "asset tracking related\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appWaking",
                        "disablePressureSensor",
                        "trackAsset"
                    ]
                }
            }
        },
        "junipermist:site/SettingSimpleAlert:SettingSimpleAlert": {
            "properties": {
                "arpFailure": {
                    "$ref": "#/types/junipermist:site/SettingSimpleAlertArpFailure:SettingSimpleAlertArpFailure"
                },
                "dhcpFailure": {
                    "$ref": "#/types/junipermist:site/SettingSimpleAlertDhcpFailure:SettingSimpleAlertDhcpFailure"
                },
                "dnsFailure": {
                    "$ref": "#/types/junipermist:site/SettingSimpleAlertDnsFailure:SettingSimpleAlertDnsFailure"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingSimpleAlertArpFailure:SettingSimpleAlertArpFailure": {
            "properties": {
                "clientCount": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer",
                    "description": "failing within minutes\n"
                },
                "incidentCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientCount",
                        "duration",
                        "incidentCount"
                    ]
                }
            }
        },
        "junipermist:site/SettingSimpleAlertDhcpFailure:SettingSimpleAlertDhcpFailure": {
            "properties": {
                "clientCount": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer",
                    "description": "failing within minutes\n"
                },
                "incidentCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientCount",
                        "duration",
                        "incidentCount"
                    ]
                }
            }
        },
        "junipermist:site/SettingSimpleAlertDnsFailure:SettingSimpleAlertDnsFailure": {
            "properties": {
                "clientCount": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer",
                    "description": "failing within minutes\n"
                },
                "incidentCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientCount",
                        "duration",
                        "incidentCount"
                    ]
                }
            }
        },
        "junipermist:site/SettingSkyatp:SettingSkyatp": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "sendIpMacMapping": {
                    "type": "boolean",
                    "description": "whether to send IP-MAC mapping to SkyATP\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sendIpMacMapping"
                    ]
                }
            }
        },
        "junipermist:site/SettingSrxApp:SettingSrxApp": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingSsr:SettingSsr": {
            "properties": {
                "conductorHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "disableStats": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingSyntheticTest:SettingSyntheticTest": {
            "properties": {
                "disabled": {
                    "type": "boolean"
                },
                "vlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/SettingSyntheticTestVlan:SettingSyntheticTestVlan"
                    }
                },
                "wanSpeedtest": {
                    "$ref": "#/types/junipermist:site/SettingSyntheticTestWanSpeedtest:SettingSyntheticTestWanSpeedtest"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingSyntheticTestVlan:SettingSyntheticTestVlan": {
            "properties": {
                "customTestUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "disabled": {
                    "type": "boolean",
                    "description": "for some vlans where we don't want this to run\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customTestUrls",
                        "disabled",
                        "vlanIds"
                    ]
                }
            }
        },
        "junipermist:site/SettingSyntheticTestWanSpeedtest:SettingSyntheticTestWanSpeedtest": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "timeOfDay": {
                    "type": "string",
                    "description": "any / HH:MM (24-hour format)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeOfDay"
                    ]
                }
            }
        },
        "junipermist:site/SettingUplinkPortConfig:SettingUplinkPortConfig": {
            "properties": {
                "dot1x": {
                    "type": "boolean",
                    "description": "Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch\n"
                },
                "keepWlansUpIfDown": {
                    "type": "boolean",
                    "description": "by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dot1x",
                        "keepWlansUpIfDown"
                    ]
                }
            }
        },
        "junipermist:site/SettingVna:SettingVna": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingVsInstance:SettingVsInstance": {
            "properties": {
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "networks"
                    ]
                }
            }
        },
        "junipermist:site/SettingWanVna:SettingWanVna": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingWids:SettingWids": {
            "properties": {
                "repeatedAuthFailures": {
                    "$ref": "#/types/junipermist:site/SettingWidsRepeatedAuthFailures:SettingWidsRepeatedAuthFailures"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingWidsRepeatedAuthFailures:SettingWidsRepeatedAuthFailures": {
            "properties": {
                "duration": {
                    "type": "integer",
                    "description": "window where a trigger will be detected and action to be taken (in seconds)\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "count of events to trigger\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/SettingWifi:SettingWifi": {
            "properties": {
                "ciscoEnabled": {
                    "type": "boolean"
                },
                "disable11k": {
                    "type": "boolean",
                    "description": "whether to disable 11k\n"
                },
                "disableRadiosWhenPowerConstrained": {
                    "type": "boolean"
                },
                "enableArpSpoofCheck": {
                    "type": "boolean",
                    "description": "when proxy_arp is enabled, check for arp spoofing.\n"
                },
                "enableSharedRadioScanning": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enable WIFI feature (using SUB-MAN license)\n"
                },
                "locateConnected": {
                    "type": "boolean",
                    "description": "whether to locate connected clients\n"
                },
                "locateUnconnected": {
                    "type": "boolean",
                    "description": "whether to locate unconnected clients\n"
                },
                "meshAllowDfs": {
                    "type": "boolean",
                    "description": "whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.\n"
                },
                "meshEnableCrm": {
                    "type": "boolean",
                    "description": "used to enable/disable CRM\n"
                },
                "meshEnabled": {
                    "type": "boolean",
                    "description": "whether to enable Mesh feature for the site\n"
                },
                "meshPsk": {
                    "type": "string",
                    "description": "optional passphrase of mesh networking, default is generated randomly\n",
                    "secret": true
                },
                "meshSsid": {
                    "type": "string",
                    "description": "optional ssid of mesh networking, default is based on site_id\n"
                },
                "proxyArp": {
                    "type": "string",
                    "description": "enum: `default`, `disabled`, `enabled`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ciscoEnabled",
                        "disable11k",
                        "disableRadiosWhenPowerConstrained",
                        "enableArpSpoofCheck",
                        "enableSharedRadioScanning",
                        "enabled",
                        "locateConnected",
                        "locateUnconnected",
                        "meshAllowDfs",
                        "meshEnableCrm",
                        "meshEnabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingWiredVna:SettingWiredVna": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/SettingZoneOccupancyAlert:SettingZoneOccupancyAlert": {
            "properties": {
                "emailNotifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of email addresses to send email notifications when the alert threshold is reached\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "indicate whether zone occupancy alert is enabled for the site\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy \u003e occupancy_limit) for a minimum duration specified in the threshold, in minutes\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "threshold"
                    ]
                }
            }
        },
        "junipermist:site/WlanAcctServer:WlanAcctServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Acct port of RADIUS server\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:site/WlanAirwatch:WlanAirwatch": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key\n"
                },
                "consoleUrl": {
                    "type": "string",
                    "description": "console URL\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "description": "password\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "username\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "consoleUrl",
                        "enabled",
                        "password",
                        "username"
                    ]
                }
            }
        },
        "junipermist:site/WlanAppLimit:WlanAppLimit": {
            "properties": {
                "apps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Map from app key to bandwidth in kbps. \nProperty key is the app key, defined in Get Application List\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "wxtagIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    },
                    "description": "Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtag_id`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "wxtagIds"
                    ]
                }
            }
        },
        "junipermist:site/WlanAppQos:WlanAppQos": {
            "properties": {
                "apps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/WlanAppQosApps:WlanAppQosApps"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "others": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanAppQosOther:WlanAppQosOther"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanAppQosApps:WlanAppQosApps": {
            "properties": {
                "dscp": {
                    "type": "integer"
                },
                "dstSubnet": {
                    "type": "string",
                    "description": "subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)\n"
                },
                "srcSubnet": {
                    "type": "string",
                    "description": "subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/WlanAppQosOther:WlanAppQosOther": {
            "properties": {
                "dscp": {
                    "type": "integer"
                },
                "dstSubnet": {
                    "type": "string"
                },
                "portRanges": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "srcSubnet": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "junipermist:site/WlanAuth:WlanAuth": {
            "properties": {
                "anticlogThreshold": {
                    "type": "integer",
                    "description": "SAE anti-clogging token threshold\n"
                },
                "eapReauth": {
                    "type": "boolean",
                    "description": "whether to trigger EAP reauth when the session ends\n"
                },
                "enableMacAuth": {
                    "type": "boolean",
                    "description": "whether to enable MAC Auth, uses the same auth_servers\n"
                },
                "keyIdx": {
                    "type": "integer",
                    "description": "when `type`==`wep`\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length\n"
                },
                "multiPskOnly": {
                    "type": "boolean",
                    "description": "when `type`==`psk`, whether to only use multi_psk\n"
                },
                "owe": {
                    "type": "string",
                    "description": "if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`\n"
                },
                "pairwises": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`\n"
                },
                "privateWlan": {
                    "type": "boolean",
                    "description": "when `multi_psk_only`==`true`, whether private wlan is enabled\n"
                },
                "psk": {
                    "type": "string",
                    "description": "when `type`==`psk`, 8-64 characters, or 64 hex characters\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`\n"
                },
                "wepAsSecondaryAuth": {
                    "type": "boolean",
                    "description": "enable WEP as secondary auth\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "eapReauth",
                        "enableMacAuth",
                        "keyIdx",
                        "keys",
                        "multiPskOnly",
                        "pairwises",
                        "privateWlan",
                        "psk",
                        "type"
                    ]
                }
            }
        },
        "junipermist:site/WlanAuthServer:WlanAuthServer": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "ip / hostname of RADIUS server\n"
                },
                "keywrapEnabled": {
                    "type": "boolean"
                },
                "keywrapFormat": {
                    "type": "string",
                    "description": "enum: `ascii`, `hex`\n"
                },
                "keywrapKek": {
                    "type": "string"
                },
                "keywrapMack": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Auth port of RADIUS server\n"
                },
                "requireMessageAuthenticator": {
                    "type": "boolean",
                    "description": "whether to require Message-Authenticator in requests\n"
                },
                "secret": {
                    "type": "string",
                    "description": "secret of RADIUS server\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "host",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "requireMessageAuthenticator",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:site/WlanBonjour:WlanBonjour": {
            "properties": {
                "additionalVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false\n"
                },
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/WlanBonjourServices:WlanBonjourServices"
                    },
                    "description": "what services are allowed. \nProperty key is the service name\n"
                }
            },
            "type": "object",
            "required": [
                "additionalVlanIds",
                "services"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalVlanIds",
                        "enabled",
                        "services"
                    ]
                }
            }
        },
        "junipermist:site/WlanBonjourServices:WlanBonjourServices": {
            "properties": {
                "disableLocal": {
                    "type": "boolean",
                    "description": "whether to prevent wireless clients to discover bonjour devices on the same WLAN\n"
                },
                "radiusGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "optional, if the service is further restricted for certain RADIUS groups\n"
                },
                "scope": {
                    "type": "string",
                    "description": "how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableLocal",
                        "scope"
                    ]
                }
            }
        },
        "junipermist:site/WlanCiscoCwa:WlanCiscoCwa": {
            "properties": {
                "allowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "allowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "blockedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of blocked CIDRs\n"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanCoaServer:WlanCoaServer": {
            "properties": {
                "disableEventTimestampCheck": {
                    "type": "boolean",
                    "description": "whether to disable Event-Timestamp Check\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "ip",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disableEventTimestampCheck",
                        "enabled",
                        "ip",
                        "port",
                        "secret"
                    ]
                }
            }
        },
        "junipermist:site/WlanDnsServerRewrite:WlanDnsServerRewrite": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "radiusGroups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "map between radius_group and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanDynamicPsk:WlanDynamicPsk": {
            "properties": {
                "defaultPsk": {
                    "type": "string",
                    "description": "default PSK to use if cloud WLC is not available, 8-63 characters\n",
                    "secret": true
                },
                "defaultVlanId": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "forceLookup": {
                    "type": "boolean",
                    "description": "when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto\n"
                },
                "source": {
                    "type": "string",
                    "description": "enum: `cloud_psks`, `radius`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "forceLookup",
                        "source"
                    ]
                }
            }
        },
        "junipermist:site/WlanDynamicVlan:WlanDynamicVlan": {
            "properties": {
                "defaultVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Whether to enable dynamic vlan\n"
                },
                "localVlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vlan_ids to be locally bridged\n"
                },
                "type": {
                    "type": "string",
                    "description": "standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`\n"
                },
                "vlans": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping\n  * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\\"\\\"\n  * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name\n"
                }
            },
            "type": "object",
            "required": [
                "defaultVlanIds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "defaultVlanIds",
                        "enabled",
                        "localVlanIds",
                        "type"
                    ]
                }
            }
        },
        "junipermist:site/WlanHotspot20:WlanHotspot20": {
            "properties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to enable hotspot 2.0 config\n"
                },
                "naiRealms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "operators": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of operators to support\n"
                },
                "rcois": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "venueName": {
                    "type": "string",
                    "description": "venue name, default is site name\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/WlanInjectDhcpOption82:WlanInjectDhcpOption82": {
            "properties": {
                "circuitId": {
                    "type": "string",
                    "description": "information to set in the `circuit_id` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):\n  * {{AP_MAC}}\n  * {{AP_MAC_DASHED}}\n  * {{AP_MODEL}}\n  * {{AP_NAME}}\n  * {{SITE_NAME}}\n  * {{SSID}}\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether to inject option 82 when forwarding DHCP packets\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanMistNac:WlanMistNac": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "when enabled:\n  * `auth_servers` is ignored\n  * `acct_servers` is ignored\n  * `auth_servers_*` are ignored\n  * `coa_servers` is ignored\n  * `radsec` is ignored\n  * `coa_enabled` is assumed'\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanPortal:WlanPortal": {
            "properties": {
                "allowWlanIdRoam": {
                    "type": "boolean",
                    "description": "Optional if `amazon_enabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable random_mac for seamless roaming)\n"
                },
                "amazonClientId": {
                    "type": "string",
                    "description": "Optional if `amazon_enabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.\n"
                },
                "amazonClientSecret": {
                    "type": "string",
                    "description": "Optional if `amazon_enabled`==`true`. Amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "amazonEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `amazon_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "amazonEnabled": {
                    "type": "boolean",
                    "description": "whether amazon is enabled as a login method\n"
                },
                "amazonExpire": {
                    "type": "integer",
                    "description": "Optional if `amazon_enabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`\n"
                },
                "auth": {
                    "type": "string",
                    "description": "authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`\n"
                },
                "azureClientId": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory app client id\n"
                },
                "azureClientSecret": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory app client secret\n"
                },
                "azureEnabled": {
                    "type": "boolean",
                    "description": "whether Azure Active Directory is enabled as a login method\n"
                },
                "azureExpire": {
                    "type": "integer",
                    "description": "interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Required if `azure_enabled`==`true`. Azure active directory tenant id.\n"
                },
                "broadnetPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n",
                    "secret": true
                },
                "broadnetSid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n"
                },
                "broadnetUserId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`broadnet`\n"
                },
                "bypassWhenCloudDown": {
                    "type": "boolean",
                    "description": "whether to bypass the guest portal when cloud not reachable (and apply the default policies)\n"
                },
                "clickatellApiKey": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`clickatell`\n"
                },
                "crossSite": {
                    "type": "boolean",
                    "description": "whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)\n"
                },
                "emailEnabled": {
                    "type": "boolean",
                    "description": "whether email (access code verification) is enabled as a login method\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether guest portal is enabled\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "how long to remain authorized, in minutes\n"
                },
                "externalPortalUrl": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to\n"
                },
                "facebookClientId": {
                    "type": "string",
                    "description": "Required if `facebook_enabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.\n"
                },
                "facebookClientSecret": {
                    "type": "string",
                    "description": "Required if `facebook_enabled`==`true`. Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "facebookEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `facebook_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "facebookEnabled": {
                    "type": "boolean",
                    "description": "whether facebook is enabled as a login method\n"
                },
                "facebookExpire": {
                    "type": "integer",
                    "description": "Optional if `facebook_enabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`\n"
                },
                "forward": {
                    "type": "boolean",
                    "description": "whether to forward the user to another URL after authorized\n"
                },
                "forwardUrl": {
                    "type": "string",
                    "description": "the URL to forward the user to\n"
                },
                "googleClientId": {
                    "type": "string",
                    "description": "Google OAuth2 app id. This is optional. If not provided, it will use a default one.\n"
                },
                "googleClientSecret": {
                    "type": "string",
                    "description": "Optional if `google_enabled`==`true`. Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "googleEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `google_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "googleEnabled": {
                    "type": "boolean",
                    "description": "whether google is enabled as login method\n"
                },
                "googleExpire": {
                    "type": "integer",
                    "description": "Optional if `google_enabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`\n"
                },
                "gupshupPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`gupshup`\n",
                    "secret": true
                },
                "gupshupUserid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`gupshup`\n"
                },
                "microsoftClientId": {
                    "type": "string",
                    "description": "Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.\n"
                },
                "microsoftClientSecret": {
                    "type": "string",
                    "description": "Optional if `microsoft_enabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.\n"
                },
                "microsoftEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional if `microsoft_enabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.\n"
                },
                "microsoftEnabled": {
                    "type": "boolean",
                    "description": "whether microsoft 365 is enabled as a login method\n"
                },
                "microsoftExpire": {
                    "type": "integer",
                    "description": "Optional if `microsoft_enabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`\n"
                },
                "passphraseEnabled": {
                    "type": "boolean",
                    "description": "Whether password is enabled\n"
                },
                "passphraseExpire": {
                    "type": "integer",
                    "description": "Optional if `passphrase_enabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`\n"
                },
                "password": {
                    "type": "string",
                    "description": "Required if `passphrase_enabled`==`true`.\n",
                    "secret": true
                },
                "predefinedSponsorsEnabled": {
                    "type": "boolean",
                    "description": "whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`\n"
                },
                "predefinedSponsorsHideEmail": {
                    "type": "boolean",
                    "description": "whether to hide sponsor’s email from list of sponsors\n"
                },
                "privacy": {
                    "type": "boolean"
                },
                "puzzelPassword": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n",
                    "secret": true
                },
                "puzzelServiceId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n"
                },
                "puzzelUsername": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`puzzel`\n"
                },
                "smsEnabled": {
                    "type": "boolean",
                    "description": "whether sms is enabled as a login method\n"
                },
                "smsExpire": {
                    "type": "integer",
                    "description": "Optional if `sms_enabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`\n"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "Optional if `sms_enabled`==`true`. SMS Message format\n"
                },
                "smsProvider": {
                    "type": "string",
                    "description": "Optioanl if `sms_enabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`\n"
                },
                "sponsorAutoApprove": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled\n"
                },
                "sponsorEmailDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.\n"
                },
                "sponsorEnabled": {
                    "type": "boolean",
                    "description": "whether sponsor is enabled\n"
                },
                "sponsorExpire": {
                    "type": "integer",
                    "description": "Optional if `sponsor_enabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`\n"
                },
                "sponsorLinkValidityDuration": {
                    "type": "string",
                    "description": "Optional if `sponsor_enabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.\n"
                },
                "sponsorNotifyAll": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.\n"
                },
                "sponsorStatusNotify": {
                    "type": "boolean",
                    "description": "Optional if `sponsor_enabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)\n"
                },
                "sponsors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "object of allowed sponsors email with name. Required if `sponsor_enabled`\n            is `true` and `sponsor_email_domains` is empty.\n\n            Property key is the sponsor email, Property value is the sponsor name\n"
                },
                "ssoDefaultRole": {
                    "type": "string",
                    "description": "Optionl if `wlan_portal_auth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched\n"
                },
                "ssoForcedRole": {
                    "type": "string",
                    "description": "Optionl if `wlan_portal_auth`==`sso`\n"
                },
                "ssoIdpCert": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`. IDP Cert (used to verify the signed response)\n"
                },
                "ssoIdpSignAlgo": {
                    "type": "string",
                    "description": "Optioanl if `wlan_portal_auth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`\n"
                },
                "ssoIdpSsoUrl": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`, IDP Single-Sign-On URL\n"
                },
                "ssoIssuer": {
                    "type": "string",
                    "description": "Required if `wlan_portal_auth`==`sso`, IDP issuer URL\n"
                },
                "ssoNameidFormat": {
                    "type": "string",
                    "description": "Optional if `wlan_portal_auth`==`sso`. enum: `email`, `unspecified`\n"
                },
                "telstraClientId": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`telstra`, Client ID provided by Telstra\n"
                },
                "telstraClientSecret": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`telstra`, Client secret provided by Telstra\n"
                },
                "twilioAuthToken": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Auth token account with twilio account\n"
                },
                "twilioPhoneNumber": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.\n"
                },
                "twilioSid": {
                    "type": "string",
                    "description": "Required if `sms_provider`==`twilio`, Account SID provided by Twilio\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "amazonClientId",
                        "amazonClientSecret",
                        "amazonEmailDomains",
                        "amazonEnabled",
                        "auth",
                        "azureClientId",
                        "azureClientSecret",
                        "azureEnabled",
                        "azureTenantId",
                        "broadnetPassword",
                        "bypassWhenCloudDown",
                        "emailEnabled",
                        "enabled",
                        "expire",
                        "externalPortalUrl",
                        "facebookClientId",
                        "facebookClientSecret",
                        "facebookEmailDomains",
                        "facebookEnabled",
                        "forward",
                        "forwardUrl",
                        "googleClientId",
                        "googleClientSecret",
                        "googleEmailDomains",
                        "googleEnabled",
                        "microsoftClientId",
                        "microsoftClientSecret",
                        "microsoftEmailDomains",
                        "microsoftEnabled",
                        "passphraseEnabled",
                        "password",
                        "predefinedSponsorsEnabled",
                        "predefinedSponsorsHideEmail",
                        "privacy",
                        "smsEnabled",
                        "smsMessageFormat",
                        "smsProvider",
                        "sponsorEmailDomains",
                        "sponsorEnabled",
                        "sponsorLinkValidityDuration",
                        "sponsorNotifyAll",
                        "sponsorStatusNotify",
                        "sponsors",
                        "ssoDefaultRole",
                        "ssoForcedRole",
                        "ssoIdpCert",
                        "ssoIdpSignAlgo",
                        "ssoIdpSsoUrl",
                        "ssoIssuer",
                        "ssoNameidFormat"
                    ]
                }
            }
        },
        "junipermist:site/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate": {
            "properties": {
                "accessCodeAlternateEmail": {
                    "type": "string"
                },
                "alignment": {
                    "type": "string",
                    "description": "defines alignment on portal. enum: `center`, `left`, `right`\n"
                },
                "authButtonAmazon": {
                    "type": "string",
                    "description": "label for Amazon auth button\n"
                },
                "authButtonAzure": {
                    "type": "string",
                    "description": "label for Azure auth button\n"
                },
                "authButtonEmail": {
                    "type": "string",
                    "description": "label for Email auth button\n"
                },
                "authButtonFacebook": {
                    "type": "string",
                    "description": "label for Facebook auth button\n"
                },
                "authButtonGoogle": {
                    "type": "string",
                    "description": "label for Google auth button\n"
                },
                "authButtonMicrosoft": {
                    "type": "string",
                    "description": "label for Microsoft auth button\n"
                },
                "authButtonPassphrase": {
                    "type": "string",
                    "description": "label for passphrase auth button\n"
                },
                "authButtonSms": {
                    "type": "string",
                    "description": "label for SMS auth button\n"
                },
                "authButtonSponsor": {
                    "type": "string",
                    "description": "label for Sponsor auth button\n"
                },
                "authLabel": {
                    "type": "string"
                },
                "backLink": {
                    "type": "string",
                    "description": "label of the link to go back to /logon\n"
                },
                "color": {
                    "type": "string",
                    "description": "Portal main color\n"
                },
                "colorDark": {
                    "type": "string"
                },
                "colorLight": {
                    "type": "string"
                },
                "company": {
                    "type": "boolean",
                    "description": "whether company field is required\n"
                },
                "companyError": {
                    "type": "string",
                    "description": "error message when company not provided\n"
                },
                "companyLabel": {
                    "type": "string",
                    "description": "label of company field\n"
                },
                "email": {
                    "type": "boolean",
                    "description": "whether email field is required\n"
                },
                "emailAccessDomainError": {
                    "type": "string",
                    "description": "error message when a user has valid social login but doesn't match specified email domains.\n"
                },
                "emailCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission using email auth\n"
                },
                "emailCodeCancel": {
                    "type": "string"
                },
                "emailCodeError": {
                    "type": "string"
                },
                "emailCodeFieldLabel": {
                    "type": "string"
                },
                "emailCodeMessage": {
                    "type": "string"
                },
                "emailCodeSubmit": {
                    "type": "string"
                },
                "emailCodeTitle": {
                    "type": "string"
                },
                "emailError": {
                    "type": "string",
                    "description": "error message when email not provided\n"
                },
                "emailFieldLabel": {
                    "type": "string"
                },
                "emailLabel": {
                    "type": "string",
                    "description": "label of email field\n"
                },
                "emailMessage": {
                    "type": "string"
                },
                "emailSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button using email auth\n"
                },
                "emailTitle": {
                    "type": "string",
                    "description": "Title for the Email registration\n"
                },
                "field1": {
                    "type": "boolean",
                    "description": "whether to ask field1\n"
                },
                "field1error": {
                    "type": "string",
                    "description": "error message when field1 not provided\n"
                },
                "field1label": {
                    "type": "string",
                    "description": "label of field1\n"
                },
                "field1required": {
                    "type": "boolean",
                    "description": "whether field1 is required field\n"
                },
                "field2": {
                    "type": "boolean",
                    "description": "whether to ask field2\n"
                },
                "field2error": {
                    "type": "string",
                    "description": "error message when field2 not provided\n"
                },
                "field2label": {
                    "type": "string",
                    "description": "label of field2\n"
                },
                "field2required": {
                    "type": "boolean",
                    "description": "whether field2 is required field\n"
                },
                "field3": {
                    "type": "boolean",
                    "description": "whether to ask field3\n"
                },
                "field3error": {
                    "type": "string",
                    "description": "error message when field3 not provided\n"
                },
                "field3label": {
                    "type": "string",
                    "description": "label of field3\n"
                },
                "field3required": {
                    "type": "boolean",
                    "description": "whether field3 is required field\n"
                },
                "field4": {
                    "type": "boolean",
                    "description": "whether to ask field4\n"
                },
                "field4error": {
                    "type": "string",
                    "description": "error message when field4 not provided\n"
                },
                "field4label": {
                    "type": "string",
                    "description": "label of field4\n"
                },
                "field4required": {
                    "type": "boolean",
                    "description": "whether field4 is required field\n"
                },
                "locales": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/WlanPortalTemplatePortalTemplateLocales:WlanPortalTemplatePortalTemplateLocales"
                    },
                    "description": "Can be used to localize the portal based on the User Agent. Allowed property key values are:\n  `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, \n  `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, \n  `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, \n  `zh-Hans`, `zh-Hant`\n"
                },
                "logo": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `png` image`\n"
                },
                "message": {
                    "type": "string"
                },
                "multiAuth": {
                    "type": "boolean"
                },
                "name": {
                    "type": "boolean",
                    "description": "whether name field is required\n"
                },
                "nameError": {
                    "type": "string",
                    "description": "error message when name not provided\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "label of name field\n"
                },
                "optOutDefault": {
                    "type": "boolean",
                    "description": "Default value for the `Do not store` checkbox\n"
                },
                "optout": {
                    "type": "boolean",
                    "description": "whether to display Do Not Store My Personal Information\n"
                },
                "optoutLabel": {
                    "type": "string",
                    "description": "label for Do Not Store My Personal Information\n"
                },
                "pageTitle": {
                    "type": "string"
                },
                "passphraseCancel": {
                    "type": "string",
                    "description": "Label for the Passphrase cancel button\n"
                },
                "passphraseError": {
                    "type": "string",
                    "description": "error message when invalid passphrase is provided\n"
                },
                "passphraseLabel": {
                    "type": "string",
                    "description": "Passphrase\n"
                },
                "passphraseMessage": {
                    "type": "string"
                },
                "passphraseSubmit": {
                    "type": "string",
                    "description": "Label for the Passphrase submit button\n"
                },
                "passphraseTitle": {
                    "type": "string",
                    "description": "Title for passphrase details page\n"
                },
                "poweredBy": {
                    "type": "boolean",
                    "description": "whether to show \\\"Powered by Mist\\\"\n"
                },
                "privacy": {
                    "type": "boolean",
                    "description": "wheter to require the Privacy Term acceptance\n"
                },
                "privacyPolicyAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyError": {
                    "type": "string",
                    "description": "error message when Privacy Policy not accepted\n"
                },
                "privacyPolicyLink": {
                    "type": "string",
                    "description": "label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyText": {
                    "type": "string",
                    "description": "text of the Privacy Policy\n"
                },
                "requiredFieldLabel": {
                    "type": "string",
                    "description": "label to denote required field\n"
                },
                "responsiveLayout": {
                    "type": "boolean"
                },
                "signInLabel": {
                    "type": "string",
                    "description": "label of the button to /signin\n"
                },
                "smsCarrierDefault": {
                    "type": "string"
                },
                "smsCarrierError": {
                    "type": "string"
                },
                "smsCarrierFieldLabel": {
                    "type": "string",
                    "description": "label for mobile carrier drop-down list\n"
                },
                "smsCodeCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission\n"
                },
                "smsCodeError": {
                    "type": "string",
                    "description": "error message when confirmation code is invalid\n"
                },
                "smsCodeFieldLabel": {
                    "type": "string"
                },
                "smsCodeMessage": {
                    "type": "string"
                },
                "smsCodeSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button\n"
                },
                "smsCodeTitle": {
                    "type": "string"
                },
                "smsCountryFieldLabel": {
                    "type": "string"
                },
                "smsCountryFormat": {
                    "type": "string"
                },
                "smsHaveAccessCode": {
                    "type": "string",
                    "description": "Label for checkbox to specify that the user has access code\n"
                },
                "smsIsTwilio": {
                    "type": "boolean"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.\n"
                },
                "smsNumberCancel": {
                    "type": "string",
                    "description": "label for canceling mobile details for SMS auth\n"
                },
                "smsNumberError": {
                    "type": "string"
                },
                "smsNumberFieldLabel": {
                    "type": "string",
                    "description": "label for field to provide mobile number\n"
                },
                "smsNumberFormat": {
                    "type": "string"
                },
                "smsNumberMessage": {
                    "type": "string"
                },
                "smsNumberSubmit": {
                    "type": "string",
                    "description": "label for submit button for code generation\n"
                },
                "smsNumberTitle": {
                    "type": "string",
                    "description": "Title for phone number details\n"
                },
                "smsUsernameFormat": {
                    "type": "string"
                },
                "smsValidityDuration": {
                    "type": "integer",
                    "description": "how long confirmation code should be considered valid (in minutes)\n"
                },
                "sponsorBackLink": {
                    "type": "string"
                },
                "sponsorCancel": {
                    "type": "string"
                },
                "sponsorEmail": {
                    "type": "string",
                    "description": "label for Sponsor Email\n"
                },
                "sponsorEmailError": {
                    "type": "string"
                },
                "sponsorEmailTemplate": {
                    "type": "string",
                    "description": "html template to replace/override default sponsor email template \nSponsor Email Template supports following template variables:\n  * `approve_url`: Renders URL to approve the request; optionally \u0026minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized\n  * `deny_url`: Renders URL to reject the request\n  * `guest_email`: Renders Email ID of the guest\n  * `guest_name`: Renders Name of the guest\n  * `field1`: Renders value of the Custom Field 1\n  * `field2`: Renders value of the Custom Field 2\n  * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)\n  * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)\n"
                },
                "sponsorInfoApproved": {
                    "type": "string"
                },
                "sponsorInfoDenied": {
                    "type": "string"
                },
                "sponsorInfoPending": {
                    "type": "string"
                },
                "sponsorName": {
                    "type": "string",
                    "description": "label for Sponsor Name\n"
                },
                "sponsorNameError": {
                    "type": "string"
                },
                "sponsorNotePending": {
                    "type": "string"
                },
                "sponsorRequestAccess": {
                    "type": "string",
                    "description": "submit button label request Wifi Access and notify sponsor about guest request\n"
                },
                "sponsorStatusApproved": {
                    "type": "string",
                    "description": "text to display if sponsor approves request\n"
                },
                "sponsorStatusDenied": {
                    "type": "string",
                    "description": "text to display when sponsor denies request\n"
                },
                "sponsorStatusPending": {
                    "type": "string",
                    "description": "text to display if request is still pending\n"
                },
                "sponsorSubmit": {
                    "type": "string",
                    "description": "submit button label to notify sponsor about guest request\n"
                },
                "sponsorsError": {
                    "type": "string"
                },
                "sponsorsFieldLabel": {
                    "type": "string"
                },
                "tos": {
                    "type": "boolean"
                },
                "tosAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to tos\n"
                },
                "tosError": {
                    "type": "string",
                    "description": "error message when tos not accepted\n"
                },
                "tosLink": {
                    "type": "string",
                    "description": "label of the link to go to tos\n"
                },
                "tosText": {
                    "type": "string",
                    "description": "text of the Terms of Service\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessCodeAlternateEmail",
                        "alignment",
                        "authButtonAmazon",
                        "authButtonAzure",
                        "authButtonEmail",
                        "authButtonFacebook",
                        "authButtonGoogle",
                        "authButtonMicrosoft",
                        "authButtonPassphrase",
                        "authButtonSms",
                        "authButtonSponsor",
                        "authLabel",
                        "color",
                        "colorDark",
                        "colorLight",
                        "company",
                        "companyError",
                        "companyLabel",
                        "email",
                        "emailAccessDomainError",
                        "emailCancel",
                        "emailCodeCancel",
                        "emailCodeError",
                        "emailCodeFieldLabel",
                        "emailCodeMessage",
                        "emailCodeSubmit",
                        "emailCodeTitle",
                        "emailError",
                        "emailFieldLabel",
                        "emailLabel",
                        "emailMessage",
                        "emailSubmit",
                        "emailTitle",
                        "field1",
                        "field1error",
                        "field1label",
                        "field2",
                        "field2error",
                        "field2label",
                        "field3",
                        "field3error",
                        "field3label",
                        "field4",
                        "field4error",
                        "field4label",
                        "logo",
                        "message",
                        "multiAuth",
                        "name",
                        "nameError",
                        "nameLabel",
                        "optOutDefault",
                        "optout",
                        "optoutLabel",
                        "pageTitle",
                        "passphraseCancel",
                        "passphraseError",
                        "passphraseLabel",
                        "passphraseMessage",
                        "passphraseSubmit",
                        "passphraseTitle",
                        "poweredBy",
                        "privacy",
                        "privacyPolicyAcceptLabel",
                        "privacyPolicyError",
                        "privacyPolicyLink",
                        "privacyPolicyText",
                        "requiredFieldLabel",
                        "responsiveLayout",
                        "signInLabel",
                        "smsCarrierDefault",
                        "smsCarrierError",
                        "smsCarrierFieldLabel",
                        "smsCodeCancel",
                        "smsCodeError",
                        "smsCodeFieldLabel",
                        "smsCodeMessage",
                        "smsCodeSubmit",
                        "smsCodeTitle",
                        "smsCountryFieldLabel",
                        "smsCountryFormat",
                        "smsHaveAccessCode",
                        "smsIsTwilio",
                        "smsNumberCancel",
                        "smsNumberError",
                        "smsNumberFieldLabel",
                        "smsNumberFormat",
                        "smsNumberMessage",
                        "smsNumberSubmit",
                        "smsNumberTitle",
                        "smsUsernameFormat",
                        "sponsorBackLink",
                        "sponsorCancel",
                        "sponsorEmail",
                        "sponsorEmailError",
                        "sponsorEmailTemplate",
                        "sponsorInfoApproved",
                        "sponsorInfoDenied",
                        "sponsorInfoPending",
                        "sponsorName",
                        "sponsorNameError",
                        "sponsorNotePending",
                        "sponsorRequestAccess",
                        "sponsorStatusApproved",
                        "sponsorStatusDenied",
                        "sponsorStatusPending",
                        "sponsorSubmit",
                        "sponsorsError",
                        "sponsorsFieldLabel",
                        "tos",
                        "tosAcceptLabel",
                        "tosError",
                        "tosLink",
                        "tosText"
                    ]
                }
            }
        },
        "junipermist:site/WlanPortalTemplatePortalTemplateLocales:WlanPortalTemplatePortalTemplateLocales": {
            "properties": {
                "authButtonAmazon": {
                    "type": "string",
                    "description": "label for Amazon auth button\n"
                },
                "authButtonAzure": {
                    "type": "string",
                    "description": "label for Azure auth button\n"
                },
                "authButtonEmail": {
                    "type": "string",
                    "description": "label for Email auth button\n"
                },
                "authButtonFacebook": {
                    "type": "string",
                    "description": "label for Facebook auth button\n"
                },
                "authButtonGoogle": {
                    "type": "string",
                    "description": "label for Google auth button\n"
                },
                "authButtonMicrosoft": {
                    "type": "string",
                    "description": "label for Microsoft auth button\n"
                },
                "authButtonPassphrase": {
                    "type": "string",
                    "description": "label for passphrase auth button\n"
                },
                "authButtonSms": {
                    "type": "string",
                    "description": "label for SMS auth button\n"
                },
                "authButtonSponsor": {
                    "type": "string",
                    "description": "label for Sponsor auth button\n"
                },
                "authLabel": {
                    "type": "string"
                },
                "backLink": {
                    "type": "string",
                    "description": "label of the link to go back to /logon\n"
                },
                "companyError": {
                    "type": "string",
                    "description": "error message when company not provided\n"
                },
                "companyLabel": {
                    "type": "string",
                    "description": "label of company field\n"
                },
                "emailAccessDomainError": {
                    "type": "string",
                    "description": "error message when a user has valid social login but doesn't match specified email domains.\n"
                },
                "emailCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission using email auth\n"
                },
                "emailCodeCancel": {
                    "type": "string"
                },
                "emailCodeError": {
                    "type": "string"
                },
                "emailCodeFieldLabel": {
                    "type": "string"
                },
                "emailCodeMessage": {
                    "type": "string"
                },
                "emailCodeSubmit": {
                    "type": "string"
                },
                "emailCodeTitle": {
                    "type": "string"
                },
                "emailError": {
                    "type": "string",
                    "description": "error message when email not provided\n"
                },
                "emailFieldLabel": {
                    "type": "string"
                },
                "emailLabel": {
                    "type": "string",
                    "description": "label of email field\n"
                },
                "emailMessage": {
                    "type": "string"
                },
                "emailSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button using email auth\n"
                },
                "emailTitle": {
                    "type": "string",
                    "description": "Title for the Email registration\n"
                },
                "field1error": {
                    "type": "string",
                    "description": "error message when field1 not provided\n"
                },
                "field1label": {
                    "type": "string",
                    "description": "label of field1\n"
                },
                "field2error": {
                    "type": "string",
                    "description": "error message when field2 not provided\n"
                },
                "field2label": {
                    "type": "string",
                    "description": "label of field2\n"
                },
                "field3error": {
                    "type": "string",
                    "description": "error message when field3 not provided\n"
                },
                "field3label": {
                    "type": "string",
                    "description": "label of field3\n"
                },
                "field4error": {
                    "type": "string",
                    "description": "error message when field4 not provided\n"
                },
                "field4label": {
                    "type": "string",
                    "description": "label of field4\n"
                },
                "message": {
                    "type": "string"
                },
                "nameError": {
                    "type": "string",
                    "description": "error message when name not provided\n"
                },
                "nameLabel": {
                    "type": "string",
                    "description": "label of name field\n"
                },
                "optoutLabel": {
                    "type": "string",
                    "description": "label for Do Not Store My Personal Information\n"
                },
                "pageTitle": {
                    "type": "string"
                },
                "passphraseCancel": {
                    "type": "string",
                    "description": "Label for the Passphrase cancel button\n"
                },
                "passphraseError": {
                    "type": "string",
                    "description": "error message when invalid passphrase is provided\n"
                },
                "passphraseLabel": {
                    "type": "string",
                    "description": "Passphrase\n"
                },
                "passphraseMessage": {
                    "type": "string"
                },
                "passphraseSubmit": {
                    "type": "string",
                    "description": "Label for the Passphrase submit button\n"
                },
                "passphraseTitle": {
                    "type": "string",
                    "description": "Title for passphrase details page\n"
                },
                "privacyPolicyAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyError": {
                    "type": "string",
                    "description": "error message when Privacy Policy not accepted\n"
                },
                "privacyPolicyLink": {
                    "type": "string",
                    "description": "label of the link to go to Privacy Policy\n"
                },
                "privacyPolicyText": {
                    "type": "string",
                    "description": "text of the Privacy Policy\n"
                },
                "requiredFieldLabel": {
                    "type": "string",
                    "description": "label to denote required field\n"
                },
                "signInLabel": {
                    "type": "string",
                    "description": "label of the button to /signin\n"
                },
                "smsCarrierDefault": {
                    "type": "string"
                },
                "smsCarrierError": {
                    "type": "string"
                },
                "smsCarrierFieldLabel": {
                    "type": "string",
                    "description": "label for mobile carrier drop-down list\n"
                },
                "smsCodeCancel": {
                    "type": "string",
                    "description": "Label for cancel confirmation code submission\n"
                },
                "smsCodeError": {
                    "type": "string",
                    "description": "error message when confirmation code is invalid\n"
                },
                "smsCodeFieldLabel": {
                    "type": "string"
                },
                "smsCodeMessage": {
                    "type": "string"
                },
                "smsCodeSubmit": {
                    "type": "string",
                    "description": "Label for confirmation code submit button\n"
                },
                "smsCodeTitle": {
                    "type": "string"
                },
                "smsCountryFieldLabel": {
                    "type": "string"
                },
                "smsCountryFormat": {
                    "type": "string"
                },
                "smsHaveAccessCode": {
                    "type": "string",
                    "description": "Label for checkbox to specify that the user has access code\n"
                },
                "smsMessageFormat": {
                    "type": "string",
                    "description": "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.\n"
                },
                "smsNumberCancel": {
                    "type": "string",
                    "description": "label for canceling mobile details for SMS auth\n"
                },
                "smsNumberError": {
                    "type": "string"
                },
                "smsNumberFieldLabel": {
                    "type": "string",
                    "description": "label for field to provide mobile number\n"
                },
                "smsNumberFormat": {
                    "type": "string"
                },
                "smsNumberMessage": {
                    "type": "string"
                },
                "smsNumberSubmit": {
                    "type": "string",
                    "description": "label for submit button for code generation\n"
                },
                "smsNumberTitle": {
                    "type": "string",
                    "description": "Title for phone number details\n"
                },
                "smsUsernameFormat": {
                    "type": "string"
                },
                "sponsorBackLink": {
                    "type": "string"
                },
                "sponsorCancel": {
                    "type": "string"
                },
                "sponsorEmail": {
                    "type": "string",
                    "description": "label for Sponsor Email\n"
                },
                "sponsorEmailError": {
                    "type": "string"
                },
                "sponsorInfoApproved": {
                    "type": "string"
                },
                "sponsorInfoDenied": {
                    "type": "string"
                },
                "sponsorInfoPending": {
                    "type": "string"
                },
                "sponsorName": {
                    "type": "string",
                    "description": "label for Sponsor Name\n"
                },
                "sponsorNameError": {
                    "type": "string"
                },
                "sponsorNotePending": {
                    "type": "string"
                },
                "sponsorRequestAccess": {
                    "type": "string",
                    "description": "submit button label request Wifi Access and notify sponsor about guest request\n"
                },
                "sponsorStatusApproved": {
                    "type": "string",
                    "description": "text to display if sponsor approves request\n"
                },
                "sponsorStatusDenied": {
                    "type": "string",
                    "description": "text to display when sponsor denies request\n"
                },
                "sponsorStatusPending": {
                    "type": "string",
                    "description": "text to display if request is still pending\n"
                },
                "sponsorSubmit": {
                    "type": "string",
                    "description": "submit button label to notify sponsor about guest request\n"
                },
                "sponsorsError": {
                    "type": "string"
                },
                "sponsorsFieldLabel": {
                    "type": "string"
                },
                "tosAcceptLabel": {
                    "type": "string",
                    "description": "prefix of the label of the link to go to tos\n"
                },
                "tosError": {
                    "type": "string",
                    "description": "error message when tos not accepted\n"
                },
                "tosLink": {
                    "type": "string",
                    "description": "label of the link to go to tos\n"
                },
                "tosText": {
                    "type": "string",
                    "description": "text of the Terms of Service\n"
                }
            },
            "type": "object"
        },
        "junipermist:site/WlanQos:WlanQos": {
            "properties": {
                "class": {
                    "type": "string",
                    "description": "enum: `background`, `best_effort`, `video`, `voice`\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "whether to overwrite QoS\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "class",
                        "overwrite"
                    ]
                }
            }
        },
        "junipermist:site/WlanRadsec:WlanRadsec": {
            "properties": {
                "coaEnabled": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "idleTimeout": {
                    "type": "integer"
                },
                "mxclusterIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids\n"
                },
                "proxyHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanRadsecServer:WlanRadsecServer"
                    },
                    "description": "List of Radsec Servers. Only if not Mist Edge.\n"
                },
                "useMxedge": {
                    "type": "boolean",
                    "description": "use mxedge(s) as radsecproxy\n"
                },
                "useSiteMxedge": {
                    "type": "boolean",
                    "description": "To use Site mxedges when this WLAN does not use mxtunnel\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "coaEnabled",
                        "mxclusterIds",
                        "proxyHosts",
                        "useSiteMxedge"
                    ]
                }
            }
        },
        "junipermist:site/WlanRadsecServer:WlanRadsecServer": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "junipermist:site/WlanRateset:WlanRateset": {
            "properties": {
                "ht": {
                    "type": "string",
                    "description": "if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)\n"
                },
                "legacies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`\n"
                },
                "minRssi": {
                    "type": "integer",
                    "description": "Minimum RSSI for client to connect, 0 means not enforcing\n"
                },
                "template": {
                    "type": "string",
                    "description": "Data Rates template to apply. enum: \n  * `no-legacy`: no 11b\n  * `compatible`: all, like before, default setting that Broadcom/Atheros used\n  * `legacy-only`: disable 802.11n and 802.11ac\n  * `high-density`: no 11b, no low rates\n  * `custom`: user defined\n"
                },
                "vht": {
                    "type": "string",
                    "description": "if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "legacies",
                        "minRssi",
                        "template"
                    ]
                }
            }
        },
        "junipermist:site/WlanSchedule:WlanSchedule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "hours": {
                    "$ref": "#/types/junipermist:site/WlanScheduleHours:WlanScheduleHours",
                    "description": "hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). \n\n**Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled"
                    ]
                }
            }
        },
        "junipermist:site/WlanScheduleHours:WlanScheduleHours": {
            "properties": {
                "fri": {
                    "type": "string"
                },
                "mon": {
                    "type": "string"
                },
                "sat": {
                    "type": "string"
                },
                "sun": {
                    "type": "string"
                },
                "thu": {
                    "type": "string"
                },
                "tue": {
                    "type": "string"
                },
                "wed": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fri",
                        "mon",
                        "sat",
                        "sun",
                        "thu",
                        "tue",
                        "wed"
                    ]
                }
            }
        },
        "junipermist:site/WxtagSpec:WxtagSpec": {
            "properties": {
                "portRange": {
                    "type": "string",
                    "description": "matched destination port, \"0\" means any\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "tcp / udp / icmp / gre / any / \":protocol_number\", `protocol_number` is between 1-254\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "matched destination subnets and/or IP Addresses\n"
                }
            },
            "type": "object",
            "required": [
                "subnets"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portRange",
                        "protocol",
                        "subnets"
                    ]
                }
            }
        },
        "junipermist:site/baseLatlng:baseLatlng": {
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "lat",
                "lng"
            ]
        },
        "junipermist:site/getPsksSitePsk:getPsksSitePsk": {
            "properties": {
                "adminSsoId": {
                    "type": "string",
                    "description": "sso id for psk created from psk portal\n"
                },
                "createdTime": {
                    "type": "number"
                },
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "id": {
                    "type": "string"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n"
                },
                "orgId": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n"
                },
                "role": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `macs`, `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "adminSsoId",
                "createdTime",
                "email",
                "expireTime",
                "expiryNotificationTime",
                "id",
                "mac",
                "modifiedTime",
                "name",
                "note",
                "notifyExpiry",
                "notifyOnCreateOrEdit",
                "oldPassphrase",
                "orgId",
                "passphrase",
                "role",
                "siteId",
                "ssid",
                "usage",
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "junipermist:site/getWebhooksSiteWebhook:getWebhooksSiteWebhook": {
            "properties": {
                "createdTime": {
                    "type": "number"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "id": {
                    "type": "string"
                },
                "modifiedTime": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk`\nIf splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "type": "object",
            "required": [
                "createdTime",
                "enabled",
                "headers",
                "id",
                "modifiedTime",
                "name",
                "oauth2ClientId",
                "oauth2ClientSecret",
                "oauth2GrantType",
                "oauth2Password",
                "oauth2Scopes",
                "oauth2TokenUrl",
                "oauth2Username",
                "orgId",
                "secret",
                "siteId",
                "splunkToken",
                "topics",
                "type",
                "url",
                "verifyCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the mist package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiDebug": {
                "type": "boolean",
                "description": "Flag to enable debugging API calls. Default is false.\n"
            },
            "apiTimeout": {
                "type": "number",
                "description": "Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0\nresults in infinite timeout.\n"
            },
            "apitoken": {
                "type": "string",
                "description": "For API Token authentication, the Mist API Token.\n",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "URL of the Mist Cloud, e.g. `api.mist.com`.\n"
            },
            "password": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account password.\n",
                "secret": true
            },
            "proxy": {
                "type": "string",
                "description": "Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a\n`[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`\nare supported.\n"
            },
            "username": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account username.\n"
            }
        },
        "inputProperties": {
            "apiDebug": {
                "type": "boolean",
                "description": "Flag to enable debugging API calls. Default is false.\n"
            },
            "apiTimeout": {
                "type": "number",
                "description": "Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0\nresults in infinite timeout.\n"
            },
            "apitoken": {
                "type": "string",
                "description": "For API Token authentication, the Mist API Token.\n",
                "secret": true
            },
            "host": {
                "type": "string",
                "description": "URL of the Mist Cloud, e.g. `api.mist.com`.\n"
            },
            "password": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account password.\n",
                "secret": true
            },
            "proxy": {
                "type": "string",
                "description": "Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a\n`[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`\nare supported.\n"
            },
            "username": {
                "type": "string",
                "description": "For username/password authentication, the Mist Account username.\n"
            }
        }
    },
    "resources": {
        "junipermist:device/ap:Ap": {
            "description": "This resource manages the Wireless Access Point configuration.\nIt can be used to define specific configuration at the device level or to override AP Device Profile (`junipermist.org.DeviceprofileAp`).\n\n\n## Import\n\nUsing `pulumi import`, import `mist_device_ap` with:\n\nAP Configuration can be imported by specifying the site_id and the device_id\n\n```sh\n$ pulumi import junipermist:device/ap:Ap ap_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "aeroscout": {
                    "$ref": "#/types/junipermist:device/ApAeroscout:ApAeroscout",
                    "description": "Aeroscout AP settings\n"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:device/ApBleConfig:ApBleConfig",
                    "description": "BLE AP settings\n"
                },
                "centrak": {
                    "$ref": "#/types/junipermist:device/ApCentrak:ApCentrak"
                },
                "clientBridge": {
                    "$ref": "#/types/junipermist:device/ApClientBridge:ApClientBridge"
                },
                "deviceId": {
                    "type": "string"
                },
                "disableEth1": {
                    "type": "boolean",
                    "description": "whether to disable eth1 port\n"
                },
                "disableEth2": {
                    "type": "boolean",
                    "description": "whether to disable eth2 port\n"
                },
                "disableEth3": {
                    "type": "boolean",
                    "description": "whether to disable eth3 port\n"
                },
                "disableModule": {
                    "type": "boolean",
                    "description": "whether to disable module port\n"
                },
                "eslConfig": {
                    "$ref": "#/types/junipermist:device/ApEslConfig:ApEslConfig"
                },
                "height": {
                    "type": "number",
                    "description": "height, in meters, optional\n"
                },
                "image1Url": {
                    "type": "string"
                },
                "image2Url": {
                    "type": "string"
                },
                "image3Url": {
                    "type": "string"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/ApIpConfig:ApIpConfig",
                    "description": "IP AP settings\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:device/ApLed:ApLed",
                    "description": "LED AP settings\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "whether this map is considered locked down\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device MAC address\n"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "mesh": {
                    "$ref": "#/types/junipermist:device/ApMesh:ApMesh",
                    "description": "Mesh AP settings\n"
                },
                "model": {
                    "type": "string",
                    "description": "device Model\n"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string",
                    "description": "any notes about this AP\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgId": {
                    "type": "string"
                },
                "orientation": {
                    "type": "integer",
                    "description": "orientation, 0-359, in degrees, up is 0, right is 90.\n"
                },
                "poePassthrough": {
                    "type": "boolean",
                    "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                },
                "pwrConfig": {
                    "$ref": "#/types/junipermist:device/ApPwrConfig:ApPwrConfig",
                    "description": "power related configs\n"
                },
                "radioConfig": {
                    "$ref": "#/types/junipermist:device/ApRadioConfig:ApRadioConfig",
                    "description": "Radio AP settings\n"
                },
                "serial": {
                    "type": "string",
                    "description": "device Serial\n"
                },
                "siteId": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Device Type. enum: `ap`\n"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:device/ApUplinkPortConfig:ApUplinkPortConfig"
                },
                "usbConfig": {
                    "$ref": "#/types/junipermist:device/ApUsbConfig:ApUsbConfig",
                    "description": "USB AP settings Note: if native imagotag is enabled, BLE will be disabled automatically Note: legacy, new config moved\nto ESL Config.\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "required": [
                "deviceId",
                "disableEth1",
                "disableEth2",
                "disableEth3",
                "disableModule",
                "image1Url",
                "image2Url",
                "image3Url",
                "mac",
                "model",
                "name",
                "orgId",
                "poePassthrough",
                "serial",
                "siteId",
                "type"
            ],
            "inputProperties": {
                "aeroscout": {
                    "$ref": "#/types/junipermist:device/ApAeroscout:ApAeroscout",
                    "description": "Aeroscout AP settings\n"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:device/ApBleConfig:ApBleConfig",
                    "description": "BLE AP settings\n"
                },
                "centrak": {
                    "$ref": "#/types/junipermist:device/ApCentrak:ApCentrak"
                },
                "clientBridge": {
                    "$ref": "#/types/junipermist:device/ApClientBridge:ApClientBridge"
                },
                "deviceId": {
                    "type": "string"
                },
                "disableEth1": {
                    "type": "boolean",
                    "description": "whether to disable eth1 port\n"
                },
                "disableEth2": {
                    "type": "boolean",
                    "description": "whether to disable eth2 port\n"
                },
                "disableEth3": {
                    "type": "boolean",
                    "description": "whether to disable eth3 port\n"
                },
                "disableModule": {
                    "type": "boolean",
                    "description": "whether to disable module port\n"
                },
                "eslConfig": {
                    "$ref": "#/types/junipermist:device/ApEslConfig:ApEslConfig"
                },
                "height": {
                    "type": "number",
                    "description": "height, in meters, optional\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/ApIpConfig:ApIpConfig",
                    "description": "IP AP settings\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:device/ApLed:ApLed",
                    "description": "LED AP settings\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "whether this map is considered locked down\n"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "mesh": {
                    "$ref": "#/types/junipermist:device/ApMesh:ApMesh",
                    "description": "Mesh AP settings\n"
                },
                "name": {
                    "type": "string"
                },
                "notes": {
                    "type": "string",
                    "description": "any notes about this AP\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orientation": {
                    "type": "integer",
                    "description": "orientation, 0-359, in degrees, up is 0, right is 90.\n"
                },
                "poePassthrough": {
                    "type": "boolean",
                    "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                },
                "pwrConfig": {
                    "$ref": "#/types/junipermist:device/ApPwrConfig:ApPwrConfig",
                    "description": "power related configs\n"
                },
                "radioConfig": {
                    "$ref": "#/types/junipermist:device/ApRadioConfig:ApRadioConfig",
                    "description": "Radio AP settings\n"
                },
                "siteId": {
                    "type": "string"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:device/ApUplinkPortConfig:ApUplinkPortConfig"
                },
                "usbConfig": {
                    "$ref": "#/types/junipermist:device/ApUsbConfig:ApUsbConfig",
                    "description": "USB AP settings Note: if native imagotag is enabled, BLE will be disabled automatically Note: legacy, new config moved\nto ESL Config.\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ap resources.\n",
                "properties": {
                    "aeroscout": {
                        "$ref": "#/types/junipermist:device/ApAeroscout:ApAeroscout",
                        "description": "Aeroscout AP settings\n"
                    },
                    "bleConfig": {
                        "$ref": "#/types/junipermist:device/ApBleConfig:ApBleConfig",
                        "description": "BLE AP settings\n"
                    },
                    "centrak": {
                        "$ref": "#/types/junipermist:device/ApCentrak:ApCentrak"
                    },
                    "clientBridge": {
                        "$ref": "#/types/junipermist:device/ApClientBridge:ApClientBridge"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "disableEth1": {
                        "type": "boolean",
                        "description": "whether to disable eth1 port\n"
                    },
                    "disableEth2": {
                        "type": "boolean",
                        "description": "whether to disable eth2 port\n"
                    },
                    "disableEth3": {
                        "type": "boolean",
                        "description": "whether to disable eth3 port\n"
                    },
                    "disableModule": {
                        "type": "boolean",
                        "description": "whether to disable module port\n"
                    },
                    "eslConfig": {
                        "$ref": "#/types/junipermist:device/ApEslConfig:ApEslConfig"
                    },
                    "height": {
                        "type": "number",
                        "description": "height, in meters, optional\n"
                    },
                    "image1Url": {
                        "type": "string"
                    },
                    "image2Url": {
                        "type": "string"
                    },
                    "image3Url": {
                        "type": "string"
                    },
                    "ipConfig": {
                        "$ref": "#/types/junipermist:device/ApIpConfig:ApIpConfig",
                        "description": "IP AP settings\n"
                    },
                    "led": {
                        "$ref": "#/types/junipermist:device/ApLed:ApLed",
                        "description": "LED AP settings\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "whether this map is considered locked down\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "device MAC address\n"
                    },
                    "mapId": {
                        "type": "string",
                        "description": "map where the device belongs to\n"
                    },
                    "mesh": {
                        "$ref": "#/types/junipermist:device/ApMesh:ApMesh",
                        "description": "Mesh AP settings\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "device Model\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string",
                        "description": "any notes about this AP\n"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orientation": {
                        "type": "integer",
                        "description": "orientation, 0-359, in degrees, up is 0, right is 90.\n"
                    },
                    "poePassthrough": {
                        "type": "boolean",
                        "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                    },
                    "pwrConfig": {
                        "$ref": "#/types/junipermist:device/ApPwrConfig:ApPwrConfig",
                        "description": "power related configs\n"
                    },
                    "radioConfig": {
                        "$ref": "#/types/junipermist:device/ApRadioConfig:ApRadioConfig",
                        "description": "Radio AP settings\n"
                    },
                    "serial": {
                        "type": "string",
                        "description": "device Serial\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device Type. enum: `ap`\n"
                    },
                    "uplinkPortConfig": {
                        "$ref": "#/types/junipermist:device/ApUplinkPortConfig:ApUplinkPortConfig"
                    },
                    "usbConfig": {
                        "$ref": "#/types/junipermist:device/ApUsbConfig:ApUsbConfig",
                        "description": "USB AP settings Note: if native imagotag is enabled, BLE will be disabled automatically Note: legacy, new config moved\nto ESL Config.\n"
                    },
                    "vars": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                    },
                    "x": {
                        "type": "number",
                        "description": "x in pixel\n"
                    },
                    "y": {
                        "type": "number",
                        "description": "y in pixel\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:device/base:base": {
            "description": "This resources manages the Site basic information.\nThis resource can be used to assign templates to a site, or to change basic information (e.g. Site Address)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst juniperFrance = new junipermist.site.Base(\"juniper_france\", {\n    orgId: terraformTest.id,\n    name: \"JNP-FR-PAR\",\n    countryCode: \"FR\",\n    timezone: \"Europe/Paris\",\n    address: \"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n    notes: \"Created with Terraform, Updated with Terraform\",\n    latlng: {\n        lat: 48.899268,\n        lng: 2.214447,\n    },\n    sitegroupIds: [\n        testGroup.id,\n        testGroup2.id,\n    ],\n    networktemplateId: networktemplateOne.id,\n    rftemplateId: rftemplateOne.id,\n    gatewaytemplateId: gatewaytemplateOne.id,\n    alarmtemplateId: alarmtemplateOne.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\njuniper_france = junipermist.site.Base(\"juniper_france\",\n    org_id=terraform_test[\"id\"],\n    name=\"JNP-FR-PAR\",\n    country_code=\"FR\",\n    timezone=\"Europe/Paris\",\n    address=\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n    notes=\"Created with Terraform, Updated with Terraform\",\n    latlng={\n        \"lat\": 48.899268,\n        \"lng\": 2.214447,\n    },\n    sitegroup_ids=[\n        test_group[\"id\"],\n        test_group2[\"id\"],\n    ],\n    networktemplate_id=networktemplate_one[\"id\"],\n    rftemplate_id=rftemplate_one[\"id\"],\n    gatewaytemplate_id=gatewaytemplate_one[\"id\"],\n    alarmtemplate_id=alarmtemplate_one[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var juniperFrance = new JuniperMist.Site.Base(\"juniper_france\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"JNP-FR-PAR\",\n        CountryCode = \"FR\",\n        Timezone = \"Europe/Paris\",\n        Address = \"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n        Notes = \"Created with Terraform, Updated with Terraform\",\n        Latlng = new JuniperMist.Site.Inputs.BaseLatlngArgs\n        {\n            Lat = 48.899268,\n            Lng = 2.214447,\n        },\n        SitegroupIds = new[]\n        {\n            testGroup.Id,\n            testGroup2.Id,\n        },\n        NetworktemplateId = networktemplateOne.Id,\n        RftemplateId = rftemplateOne.Id,\n        GatewaytemplateId = gatewaytemplateOne.Id,\n        AlarmtemplateId = alarmtemplateOne.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.Newbase(ctx, \"juniper_france\", \u0026site.baseArgs{\n\t\t\tOrgId:       pulumi.Any(terraformTest.Id),\n\t\t\tName:        pulumi.String(\"JNP-FR-PAR\"),\n\t\t\tCountryCode: pulumi.String(\"FR\"),\n\t\t\tTimezone:    pulumi.String(\"Europe/Paris\"),\n\t\t\tAddress:     pulumi.String(\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\"),\n\t\t\tNotes:       pulumi.String(\"Created with Terraform, Updated with Terraform\"),\n\t\t\tLatlng: \u0026site.BaseLatlngArgs{\n\t\t\t\tLat: pulumi.Float64(48.899268),\n\t\t\t\tLng: pulumi.Float64(2.214447),\n\t\t\t},\n\t\t\tSitegroupIds: pulumi.StringArray{\n\t\t\t\ttestGroup.Id,\n\t\t\t\ttestGroup2.Id,\n\t\t\t},\n\t\t\tNetworktemplateId: pulumi.Any(networktemplateOne.Id),\n\t\t\tRftemplateId:      pulumi.Any(rftemplateOne.Id),\n\t\t\tGatewaytemplateId: pulumi.Any(gatewaytemplateOne.Id),\n\t\t\tAlarmtemplateId:   pulumi.Any(alarmtemplateOne.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.base;\nimport com.pulumi.junipermist.site.BaseArgs;\nimport com.pulumi.junipermist.site.inputs.BaseLatlngArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var juniperFrance = new Base(\"juniperFrance\", BaseArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"JNP-FR-PAR\")\n            .countryCode(\"FR\")\n            .timezone(\"Europe/Paris\")\n            .address(\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\")\n            .notes(\"Created with Terraform, Updated with Terraform\")\n            .latlng(BaseLatlngArgs.builder()\n                .lat(48.899268)\n                .lng(2.214447)\n                .build())\n            .sitegroupIds(            \n                testGroup.id(),\n                testGroup2.id())\n            .networktemplateId(networktemplateOne.id())\n            .rftemplateId(rftemplateOne.id())\n            .gatewaytemplateId(gatewaytemplateOne.id())\n            .alarmtemplateId(alarmtemplateOne.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  juniperFrance:\n    type: junipermist:site:base\n    name: juniper_france\n    properties:\n      orgId: ${terraformTest.id}\n      name: JNP-FR-PAR\n      countryCode: FR\n      timezone: Europe/Paris\n      address: 41 Rue de Villiers, 92100 Neuilly sur Seine, France\n      notes: Created with Terraform, Updated with Terraform\n      latlng:\n        lat: 48.899268\n        lng: 2.214447\n      sitegroupIds:\n        - ${testGroup.id}\n        - ${testGroup2.id}\n      networktemplateId: ${networktemplateOne.id}\n      rftemplateId: ${rftemplateOne.id}\n      gatewaytemplateId: ${gatewaytemplateOne.id}\n      alarmtemplateId: ${alarmtemplateOne.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site` with:\n\nSite can be imported by specifying the site_id\n\n```sh\n$ pulumi import junipermist:device/base:base site_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "full address of the site\n"
                },
                "alarmtemplateId": {
                    "type": "string",
                    "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                },
                "aptemplateId": {
                    "type": "string",
                    "description": "AP Template ID, used by APs\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "country code for the site (for AP config generation), in two-character\n"
                },
                "gatewaytemplateId": {
                    "type": "string",
                    "description": "Gateway Template ID, used by gateways\n"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:device/baseLatlng:baseLatlng"
                },
                "name": {
                    "type": "string"
                },
                "networktemplateId": {
                    "type": "string",
                    "description": "Network Template ID, this takes precedence over Site Settings\n"
                },
                "notes": {
                    "type": "string",
                    "description": "optional, any notes about the site\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rftemplateId": {
                    "type": "string",
                    "description": "RF Template ID, this takes precedence over Site Settings\n"
                },
                "secpolicyId": {
                    "type": "string",
                    "description": "SecPolicy ID\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sitegroups this site belongs to\n"
                },
                "sitetemplateId": {
                    "type": "string",
                    "description": "Site Template ID\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone the site is at\n"
                }
            },
            "required": [
                "address",
                "name",
                "orgId",
                "timezone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "full address of the site\n"
                },
                "alarmtemplateId": {
                    "type": "string",
                    "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                },
                "aptemplateId": {
                    "type": "string",
                    "description": "AP Template ID, used by APs\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "country code for the site (for AP config generation), in two-character\n"
                },
                "gatewaytemplateId": {
                    "type": "string",
                    "description": "Gateway Template ID, used by gateways\n"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:device/baseLatlng:baseLatlng"
                },
                "name": {
                    "type": "string"
                },
                "networktemplateId": {
                    "type": "string",
                    "description": "Network Template ID, this takes precedence over Site Settings\n"
                },
                "notes": {
                    "type": "string",
                    "description": "optional, any notes about the site\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rftemplateId": {
                    "type": "string",
                    "description": "RF Template ID, this takes precedence over Site Settings\n"
                },
                "secpolicyId": {
                    "type": "string",
                    "description": "SecPolicy ID\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sitegroups this site belongs to\n"
                },
                "sitetemplateId": {
                    "type": "string",
                    "description": "Site Template ID\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone the site is at\n"
                }
            },
            "requiredInputs": [
                "address",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering base resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "full address of the site\n"
                    },
                    "alarmtemplateId": {
                        "type": "string",
                        "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                    },
                    "aptemplateId": {
                        "type": "string",
                        "description": "AP Template ID, used by APs\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "country code for the site (for AP config generation), in two-character\n"
                    },
                    "gatewaytemplateId": {
                        "type": "string",
                        "description": "Gateway Template ID, used by gateways\n"
                    },
                    "latlng": {
                        "$ref": "#/types/junipermist:device/baseLatlng:baseLatlng"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networktemplateId": {
                        "type": "string",
                        "description": "Network Template ID, this takes precedence over Site Settings\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "optional, any notes about the site\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "rftemplateId": {
                        "type": "string",
                        "description": "RF Template ID, this takes precedence over Site Settings\n"
                    },
                    "secpolicyId": {
                        "type": "string",
                        "description": "SecPolicy ID\n"
                    },
                    "sitegroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "sitegroups this site belongs to\n"
                    },
                    "sitetemplateId": {
                        "type": "string",
                        "description": "Site Template ID\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone the site is at\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "junipermist.device/base.base has been deprecated in favor of junipermist.site/base.base"
        },
        "junipermist:device/gateway:Gateway": {
            "description": "This resource manages the Gateway configuration.\nIt can be used to define specific configuration at the device level or to override Org Gateway template settings.\n\n\u003e **WARNING** For **adopted** devices, make sure to set `managed`=`true` to allow Mist to manage the gateway\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst gatewayOne = new junipermist.device.Gateway(\"gateway_one\", {\n    name: \"gateway_one\",\n    deviceId: clusterOne.deviceId,\n    siteId: clusterOne.siteId,\n    oobIpConfig: {\n        type: \"dhcp\",\n    },\n    dnsServers: [\"8.8.8.8\"],\n    additionalConfigCmds: [\n        \"annotate system \\\" -- custom-main -- Template level --\\\"\",\n        \"delete apply-groups custom-main\",\n        \"delete groups custom-main\",\n        \"set groups custom-main\",\n        \"set groups custom-main system services ssh root-login allow\",\n        \"set apply-groups custom-main\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\ngateway_one = junipermist.device.Gateway(\"gateway_one\",\n    name=\"gateway_one\",\n    device_id=cluster_one[\"deviceId\"],\n    site_id=cluster_one[\"siteId\"],\n    oob_ip_config={\n        \"type\": \"dhcp\",\n    },\n    dns_servers=[\"8.8.8.8\"],\n    additional_config_cmds=[\n        \"annotate system \\\" -- custom-main -- Template level --\\\"\",\n        \"delete apply-groups custom-main\",\n        \"delete groups custom-main\",\n        \"set groups custom-main\",\n        \"set groups custom-main system services ssh root-login allow\",\n        \"set apply-groups custom-main\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gatewayOne = new JuniperMist.Device.Gateway(\"gateway_one\", new()\n    {\n        Name = \"gateway_one\",\n        DeviceId = clusterOne.DeviceId,\n        SiteId = clusterOne.SiteId,\n        OobIpConfig = new JuniperMist.Device.Inputs.GatewayOobIpConfigArgs\n        {\n            Type = \"dhcp\",\n        },\n        DnsServers = new[]\n        {\n            \"8.8.8.8\",\n        },\n        AdditionalConfigCmds = new[]\n        {\n            \"annotate system \\\" -- custom-main -- Template level --\\\"\",\n            \"delete apply-groups custom-main\",\n            \"delete groups custom-main\",\n            \"set groups custom-main\",\n            \"set groups custom-main system services ssh root-login allow\",\n            \"set apply-groups custom-main\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.NewGateway(ctx, \"gateway_one\", \u0026device.GatewayArgs{\n\t\t\tName:     pulumi.String(\"gateway_one\"),\n\t\t\tDeviceId: pulumi.Any(clusterOne.DeviceId),\n\t\t\tSiteId:   pulumi.Any(clusterOne.SiteId),\n\t\t\tOobIpConfig: \u0026device.GatewayOobIpConfigArgs{\n\t\t\t\tType: pulumi.String(\"dhcp\"),\n\t\t\t},\n\t\t\tDnsServers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t},\n\t\t\tAdditionalConfigCmds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"annotate system \\\" -- custom-main -- Template level --\\\"\"),\n\t\t\t\tpulumi.String(\"delete apply-groups custom-main\"),\n\t\t\t\tpulumi.String(\"delete groups custom-main\"),\n\t\t\t\tpulumi.String(\"set groups custom-main\"),\n\t\t\t\tpulumi.String(\"set groups custom-main system services ssh root-login allow\"),\n\t\t\t\tpulumi.String(\"set apply-groups custom-main\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.Gateway;\nimport com.pulumi.junipermist.device.GatewayArgs;\nimport com.pulumi.junipermist.device.inputs.GatewayOobIpConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gatewayOne = new Gateway(\"gatewayOne\", GatewayArgs.builder()\n            .name(\"gateway_one\")\n            .deviceId(clusterOne.deviceId())\n            .siteId(clusterOne.siteId())\n            .oobIpConfig(GatewayOobIpConfigArgs.builder()\n                .type(\"dhcp\")\n                .build())\n            .dnsServers(\"8.8.8.8\")\n            .additionalConfigCmds(            \n                \"annotate system \\\" -- custom-main -- Template level --\\\"\",\n                \"delete apply-groups custom-main\",\n                \"delete groups custom-main\",\n                \"set groups custom-main\",\n                \"set groups custom-main system services ssh root-login allow\",\n                \"set apply-groups custom-main\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gatewayOne:\n    type: junipermist:device:Gateway\n    name: gateway_one\n    properties:\n      name: gateway_one\n      deviceId: ${clusterOne.deviceId}\n      siteId: ${clusterOne.siteId}\n      oobIpConfig:\n        type: dhcp\n      dnsServers:\n        - 8.8.8.8\n      additionalConfigCmds:\n        - annotate system \" -- custom-main -- Template level --\"\n        - delete apply-groups custom-main\n        - delete groups custom-main\n        - set groups custom-main\n        - set groups custom-main system services ssh root-login allow\n        - set apply-groups custom-main\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_device_gateway` with:\n\nGateway Configuration can be imported by specifying the site_id and the device_id\n\n```sh\n$ pulumi import junipermist:device/gateway:Gateway gateway_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayBgpConfig:GatewayBgpConfig"
                    }
                },
                "deviceId": {
                    "type": "string"
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:device/GatewayDhcpdConfig:GatewayDhcpdConfig"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayExtraRoutes:GatewayExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayExtraRoutes6:GatewayExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayIdpProfiles:GatewayIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "image1Url": {
                    "type": "string"
                },
                "image2Url": {
                    "type": "string"
                },
                "image3Url": {
                    "type": "string"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayIpConfigs:GatewayIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device MAC address\n"
                },
                "managed": {
                    "type": "boolean"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "model": {
                    "type": "string",
                    "description": "device Model\n"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayNetwork:GatewayNetwork"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:device/GatewayOobIpConfig:GatewayOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPathPreferences:GatewayPathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPortConfig:GatewayPortConfig"
                    },
                    "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "portMirroring": {
                    "$ref": "#/types/junipermist:device/GatewayPortMirroring:GatewayPortMirroring"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayRoutingPolicies:GatewayRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "serial": {
                    "type": "string",
                    "description": "device Serial\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayServicePolicy:GatewayServicePolicy"
                    }
                },
                "siteId": {
                    "type": "string"
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelConfigs:GatewayTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptions:GatewayTunnelProviderOptions"
                },
                "type": {
                    "type": "string",
                    "description": "Device Type. enum: `gateway`\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:device/GatewayVrfConfig:GatewayVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayVrfInstances:GatewayVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "required": [
                "deviceId",
                "image1Url",
                "image2Url",
                "image3Url",
                "mac",
                "model",
                "name",
                "oobIpConfig",
                "orgId",
                "serial",
                "siteId",
                "type"
            ],
            "inputProperties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayBgpConfig:GatewayBgpConfig"
                    }
                },
                "deviceId": {
                    "type": "string"
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:device/GatewayDhcpdConfig:GatewayDhcpdConfig"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayExtraRoutes:GatewayExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayExtraRoutes6:GatewayExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayIdpProfiles:GatewayIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayIpConfigs:GatewayIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "managed": {
                    "type": "boolean"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "mspId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayNetwork:GatewayNetwork"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:device/GatewayOobIpConfig:GatewayOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPathPreferences:GatewayPathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayPortConfig:GatewayPortConfig"
                    },
                    "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "portMirroring": {
                    "$ref": "#/types/junipermist:device/GatewayPortMirroring:GatewayPortMirroring"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayRoutingPolicies:GatewayRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayServicePolicy:GatewayServicePolicy"
                    }
                },
                "siteId": {
                    "type": "string"
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelConfigs:GatewayTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptions:GatewayTunnelProviderOptions"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:device/GatewayVrfConfig:GatewayVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/GatewayVrfInstances:GatewayVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gateway resources.\n",
                "properties": {
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "bgpConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayBgpConfig:GatewayBgpConfig"
                        }
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "dhcpdConfig": {
                        "$ref": "#/types/junipermist:device/GatewayDhcpdConfig:GatewayDhcpdConfig"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayExtraRoutes:GatewayExtraRoutes"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayExtraRoutes6:GatewayExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "idpProfiles": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayIdpProfiles:GatewayIdpProfiles"
                        },
                        "description": "Property key is the profile name\n"
                    },
                    "image1Url": {
                        "type": "string"
                    },
                    "image2Url": {
                        "type": "string"
                    },
                    "image3Url": {
                        "type": "string"
                    },
                    "ipConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayIpConfigs:GatewayIpConfigs"
                        },
                        "description": "Property key is the network name\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "device MAC address\n"
                    },
                    "managed": {
                        "type": "boolean"
                    },
                    "mapId": {
                        "type": "string",
                        "description": "map where the device belongs to\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "device Model\n"
                    },
                    "mspId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:device/GatewayNetwork:GatewayNetwork"
                        }
                    },
                    "notes": {
                        "type": "string"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "oobIpConfig": {
                        "$ref": "#/types/junipermist:device/GatewayOobIpConfig:GatewayOobIpConfig",
                        "description": "out-of-band (vme/em0/fxp0) IP config\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "pathPreferences": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayPathPreferences:GatewayPathPreferences"
                        },
                        "description": "Property key is the path name\n"
                    },
                    "portConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayPortConfig:GatewayPortConfig"
                        },
                        "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                    },
                    "portMirroring": {
                        "$ref": "#/types/junipermist:device/GatewayPortMirroring:GatewayPortMirroring"
                    },
                    "routerId": {
                        "type": "string",
                        "description": "auto assigned if not set\n"
                    },
                    "routingPolicies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayRoutingPolicies:GatewayRoutingPolicies"
                        },
                        "description": "Property key is the routing policy name\n"
                    },
                    "serial": {
                        "type": "string",
                        "description": "device Serial\n"
                    },
                    "servicePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:device/GatewayServicePolicy:GatewayServicePolicy"
                        }
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "tunnelConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayTunnelConfigs:GatewayTunnelConfigs"
                        },
                        "description": "Property key is the tunnel name\n"
                    },
                    "tunnelProviderOptions": {
                        "$ref": "#/types/junipermist:device/GatewayTunnelProviderOptions:GatewayTunnelProviderOptions"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device Type. enum: `gateway`\n"
                    },
                    "vars": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:device/GatewayVrfConfig:GatewayVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/GatewayVrfInstances:GatewayVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    },
                    "x": {
                        "type": "number",
                        "description": "x in pixel\n"
                    },
                    "y": {
                        "type": "number",
                        "description": "y in pixel\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:device/gatewayCluster:GatewayCluster": {
            "description": "This resource can be used to form or delete a Gateway\n Clusters. It can be used with two Gateways assigned to the same site.\nOnce the Cluster is formed, it can be create just like a Gateway with the `junipermist.device.Gateway` resource:\n1. Claim the gateways and assign them to the same site with the `junipermist.org.Inventory` resource\n2. Form the Cluster with the `junipermist.device.GatewayCluster` resource by providing the `site_id` and the two nodes MAC Addresses (the first in the list will be the node0)\n3. Configure the Cluster with the `junipermist.device.Gateway` resource\n\nPlease check the Juniper Documentation first to validate the cabling between the Gateways\n\n\u003e Both gateways must belong to the same site when creating the Gateway Cluster\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst clusterOne = new junipermist.device.GatewayCluster(\"cluster_one\", {\n    siteId: terraformSite2.id,\n    nodes: [\n        {\n            mac: \"4c961000000\",\n        },\n        {\n            mac: \"4c961000001\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\ncluster_one = junipermist.device.GatewayCluster(\"cluster_one\",\n    site_id=terraform_site2[\"id\"],\n    nodes=[\n        {\n            \"mac\": \"4c961000000\",\n        },\n        {\n            \"mac\": \"4c961000001\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var clusterOne = new JuniperMist.Device.GatewayCluster(\"cluster_one\", new()\n    {\n        SiteId = terraformSite2.Id,\n        Nodes = new[]\n        {\n            new JuniperMist.Device.Inputs.GatewayClusterNodeArgs\n            {\n                Mac = \"4c961000000\",\n            },\n            new JuniperMist.Device.Inputs.GatewayClusterNodeArgs\n            {\n                Mac = \"4c961000001\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.NewGatewayCluster(ctx, \"cluster_one\", \u0026device.GatewayClusterArgs{\n\t\t\tSiteId: pulumi.Any(terraformSite2.Id),\n\t\t\tNodes: device.GatewayClusterNodeArray{\n\t\t\t\t\u0026device.GatewayClusterNodeArgs{\n\t\t\t\t\tMac: pulumi.String(\"4c961000000\"),\n\t\t\t\t},\n\t\t\t\t\u0026device.GatewayClusterNodeArgs{\n\t\t\t\t\tMac: pulumi.String(\"4c961000001\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.GatewayCluster;\nimport com.pulumi.junipermist.device.GatewayClusterArgs;\nimport com.pulumi.junipermist.device.inputs.GatewayClusterNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var clusterOne = new GatewayCluster(\"clusterOne\", GatewayClusterArgs.builder()\n            .siteId(terraformSite2.id())\n            .nodes(            \n                GatewayClusterNodeArgs.builder()\n                    .mac(\"4c961000000\")\n                    .build(),\n                GatewayClusterNodeArgs.builder()\n                    .mac(\"4c961000001\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  clusterOne:\n    type: junipermist:device:GatewayCluster\n    name: cluster_one\n    properties:\n      siteId: ${terraformSite2.id}\n      nodes:\n        - mac: 4c961000000\n        - mac: 4c961000001\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_device_gateway_cluster` with:\n\nGateway cluster can be imported by specifying the org_id and the cluster_id\n\n```sh\n$ pulumi import junipermist:device/gatewayCluster:GatewayCluster cluster_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayClusterNode:GatewayClusterNode"
                    },
                    "description": "when replacing a node, either mac has to remain the same as existing cluster\n"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "required": [
                "nodes",
                "siteId"
            ],
            "inputProperties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/GatewayClusterNode:GatewayClusterNode"
                    },
                    "description": "when replacing a node, either mac has to remain the same as existing cluster\n"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "nodes",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayCluster resources.\n",
                "properties": {
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:device/GatewayClusterNode:GatewayClusterNode"
                        },
                        "description": "when replacing a node, either mac has to remain the same as existing cluster\n"
                    },
                    "siteId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:device/image:Image": {
            "description": "This resource is used to upload a Device picture.\nThis resource can be used to add a picture to a Wireless Access point, a Switch or a Gateway. A Maximum of 3 pictures can be uploaded.\n\n\n",
            "properties": {
                "deviceId": {
                    "type": "string"
                },
                "file": {
                    "type": "string",
                    "description": "path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "imageNumber": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "required": [
                "deviceId",
                "file",
                "imageNumber",
                "siteId"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "string"
                },
                "file": {
                    "type": "string",
                    "description": "path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "imageNumber": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "deviceId",
                "file",
                "imageNumber",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Image resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string",
                        "description": "path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`\n"
                    },
                    "imageNumber": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:device/switch:Switch": {
            "description": "This resource manages the Switch configuration.\nIt can be used to define specific configuration at the device level or to override Org/Site Network template settings.\n\n\u003e **WARNING** For **adopted** devices, make sure to set `managed`=`true` to allow Mist to manage the switch\n\n\n## Import\n\nUsing `pulumi import`, import `mist_device_switch` with:\n\nSwitch Configuration can be imported by specifying the site_id and the device_id\n\n```sh\n$ pulumi import junipermist:device/switch:Switch switch_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchAclPolicy:SwitchAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchAclTags:SwitchAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "deviceId": {
                    "type": "string"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:device/SwitchDhcpSnooping:SwitchDhcpSnooping"
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:device/SwitchDhcpdConfig:SwitchDhcpdConfig"
                },
                "disableAutoConfig": {
                    "type": "boolean",
                    "description": "for a claimed switch, we control the configs by default. This option (disables the behavior)\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutes:SwitchExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutes6:SwitchExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "image1Url": {
                    "type": "string"
                },
                "image2Url": {
                    "type": "string"
                },
                "image3Url": {
                    "type": "string"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/SwitchIpConfig:SwitchIpConfig",
                    "description": "Junos IP Config\n"
                },
                "localPortConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchLocalPortConfig:SwitchLocalPortConfig"
                    },
                    "description": "Local port override, overriding the port configuration from `port_config`. Property key is the port name or range (e.g.\n\"ge-0/0/0-10\")\n"
                },
                "mac": {
                    "type": "string",
                    "description": "device MAC address\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "for an adopted switch, we don’t overwrite their existing configs automatically\n"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:device/SwitchMistNac:SwitchMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "model": {
                    "type": "string",
                    "description": "device Model\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchNetworks:SwitchNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "notes": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchOobIpConfig:SwitchOobIpConfig",
                    "description": "Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,\nre1 mgmt IP has to be set separately (if desired): key parameter = `re1`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchOspfAreas:SwitchOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "otherIpConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchOtherIpConfigs:SwitchOtherIpConfigs"
                    },
                    "description": "Property key is the network name. Defines the additional IP Addresses configured on the device.\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortConfig:SwitchPortConfig"
                    },
                    "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortMirroring:SwitchPortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortUsages:SwitchPortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:device/SwitchRadiusConfig:SwitchRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:device/SwitchRemoteSyslog:SwitchRemoteSyslog"
                },
                "role": {
                    "type": "string"
                },
                "routerId": {
                    "type": "string",
                    "description": "used for OSPF / BGP / EVPN\n"
                },
                "serial": {
                    "type": "string",
                    "description": "device Serial\n"
                },
                "siteId": {
                    "type": "string"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfig:SwitchSnmpConfig"
                },
                "stpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchStpConfig:SwitchStpConfig"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:device/SwitchSwitchMgmt:SwitchSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "type": {
                    "type": "string",
                    "description": "Device Type. enum: `switch`\n"
                },
                "useRouterIdAsSourceIp": {
                    "type": "boolean",
                    "description": "whether to use it for snmp / syslog / tacplus / radius\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "virtualChassis": {
                    "$ref": "#/types/junipermist:device/SwitchVirtualChassis:SwitchVirtualChassis",
                    "description": "required for preprovisioned Virtual Chassis\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:device/SwitchVrfConfig:SwitchVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchVrfInstances:SwitchVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                },
                "vrrpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchVrrpConfig:SwitchVrrpConfig",
                    "description": "Junos VRRP config\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "required": [
                "deviceId",
                "disableAutoConfig",
                "image1Url",
                "image2Url",
                "image3Url",
                "mac",
                "managed",
                "model",
                "name",
                "orgId",
                "routerId",
                "serial",
                "siteId",
                "type",
                "useRouterIdAsSourceIp"
            ],
            "inputProperties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:device/SwitchAclPolicy:SwitchAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchAclTags:SwitchAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "deviceId": {
                    "type": "string"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:device/SwitchDhcpSnooping:SwitchDhcpSnooping"
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:device/SwitchDhcpdConfig:SwitchDhcpdConfig"
                },
                "disableAutoConfig": {
                    "type": "boolean",
                    "description": "for a claimed switch, we control the configs by default. This option (disables the behavior)\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutes:SwitchExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchExtraRoutes6:SwitchExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:device/SwitchIpConfig:SwitchIpConfig",
                    "description": "Junos IP Config\n"
                },
                "localPortConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchLocalPortConfig:SwitchLocalPortConfig"
                    },
                    "description": "Local port override, overriding the port configuration from `port_config`. Property key is the port name or range (e.g.\n\"ge-0/0/0-10\")\n"
                },
                "managed": {
                    "type": "boolean",
                    "description": "for an adopted switch, we don’t overwrite their existing configs automatically\n"
                },
                "mapId": {
                    "type": "string",
                    "description": "map where the device belongs to\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:device/SwitchMistNac:SwitchMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchNetworks:SwitchNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "notes": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchOobIpConfig:SwitchOobIpConfig",
                    "description": "Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,\nre1 mgmt IP has to be set separately (if desired): key parameter = `re1`\n"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchOspfAreas:SwitchOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "otherIpConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchOtherIpConfigs:SwitchOtherIpConfigs"
                    },
                    "description": "Property key is the network name. Defines the additional IP Addresses configured on the device.\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortConfig:SwitchPortConfig"
                    },
                    "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortMirroring:SwitchPortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchPortUsages:SwitchPortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:device/SwitchRadiusConfig:SwitchRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:device/SwitchRemoteSyslog:SwitchRemoteSyslog"
                },
                "role": {
                    "type": "string"
                },
                "routerId": {
                    "type": "string",
                    "description": "used for OSPF / BGP / EVPN\n"
                },
                "siteId": {
                    "type": "string"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchSnmpConfig:SwitchSnmpConfig"
                },
                "stpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchStpConfig:SwitchStpConfig"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:device/SwitchSwitchMgmt:SwitchSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "useRouterIdAsSourceIp": {
                    "type": "boolean",
                    "description": "whether to use it for snmp / syslog / tacplus / radius\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "virtualChassis": {
                    "$ref": "#/types/junipermist:device/SwitchVirtualChassis:SwitchVirtualChassis",
                    "description": "required for preprovisioned Virtual Chassis\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:device/SwitchVrfConfig:SwitchVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:device/SwitchVrfInstances:SwitchVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                },
                "vrrpConfig": {
                    "$ref": "#/types/junipermist:device/SwitchVrrpConfig:SwitchVrrpConfig",
                    "description": "Junos VRRP config\n"
                },
                "x": {
                    "type": "number",
                    "description": "x in pixel\n"
                },
                "y": {
                    "type": "number",
                    "description": "y in pixel\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Switch resources.\n",
                "properties": {
                    "aclPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:device/SwitchAclPolicy:SwitchAclPolicy"
                        }
                    },
                    "aclTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchAclTags:SwitchAclTags"
                        },
                        "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                    },
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "dhcpSnooping": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpSnooping:SwitchDhcpSnooping"
                    },
                    "dhcpdConfig": {
                        "$ref": "#/types/junipermist:device/SwitchDhcpdConfig:SwitchDhcpdConfig"
                    },
                    "disableAutoConfig": {
                        "type": "boolean",
                        "description": "for a claimed switch, we control the configs by default. This option (disables the behavior)\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchExtraRoutes:SwitchExtraRoutes"
                        }
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchExtraRoutes6:SwitchExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "image1Url": {
                        "type": "string"
                    },
                    "image2Url": {
                        "type": "string"
                    },
                    "image3Url": {
                        "type": "string"
                    },
                    "ipConfig": {
                        "$ref": "#/types/junipermist:device/SwitchIpConfig:SwitchIpConfig",
                        "description": "Junos IP Config\n"
                    },
                    "localPortConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchLocalPortConfig:SwitchLocalPortConfig"
                        },
                        "description": "Local port override, overriding the port configuration from `port_config`. Property key is the port name or range (e.g.\n\"ge-0/0/0-10\")\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "device MAC address\n"
                    },
                    "managed": {
                        "type": "boolean",
                        "description": "for an adopted switch, we don’t overwrite their existing configs automatically\n"
                    },
                    "mapId": {
                        "type": "string",
                        "description": "map where the device belongs to\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:device/SwitchMistNac:SwitchMistNac",
                        "description": "enable mist_nac to use radsec\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "device Model\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchNetworks:SwitchNetworks"
                        },
                        "description": "Property key is network name\n"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                    },
                    "oobIpConfig": {
                        "$ref": "#/types/junipermist:device/SwitchOobIpConfig:SwitchOobIpConfig",
                        "description": "Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,\nre1 mgmt IP has to be set separately (if desired): key parameter = `re1`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "ospfAreas": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchOspfAreas:SwitchOspfAreas"
                        },
                        "description": "Junos OSPF areas\n"
                    },
                    "otherIpConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchOtherIpConfigs:SwitchOtherIpConfigs"
                        },
                        "description": "Property key is the network name. Defines the additional IP Addresses configured on the device.\n"
                    },
                    "portConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchPortConfig:SwitchPortConfig"
                        },
                        "description": "Property key is the port name or range (e.g. \"ge-0/0/0-10\")\n"
                    },
                    "portMirroring": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchPortMirroring:SwitchPortMirroring"
                        },
                        "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                    },
                    "portUsages": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchPortUsages:SwitchPortUsages"
                        },
                        "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                    },
                    "radiusConfig": {
                        "$ref": "#/types/junipermist:device/SwitchRadiusConfig:SwitchRadiusConfig",
                        "description": "Junos Radius config\n"
                    },
                    "remoteSyslog": {
                        "$ref": "#/types/junipermist:device/SwitchRemoteSyslog:SwitchRemoteSyslog"
                    },
                    "role": {
                        "type": "string"
                    },
                    "routerId": {
                        "type": "string",
                        "description": "used for OSPF / BGP / EVPN\n"
                    },
                    "serial": {
                        "type": "string",
                        "description": "device Serial\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "snmpConfig": {
                        "$ref": "#/types/junipermist:device/SwitchSnmpConfig:SwitchSnmpConfig"
                    },
                    "stpConfig": {
                        "$ref": "#/types/junipermist:device/SwitchStpConfig:SwitchStpConfig"
                    },
                    "switchMgmt": {
                        "$ref": "#/types/junipermist:device/SwitchSwitchMgmt:SwitchSwitchMgmt",
                        "description": "Switch settings\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device Type. enum: `switch`\n"
                    },
                    "useRouterIdAsSourceIp": {
                        "type": "boolean",
                        "description": "whether to use it for snmp / syslog / tacplus / radius\n"
                    },
                    "vars": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                    },
                    "virtualChassis": {
                        "$ref": "#/types/junipermist:device/SwitchVirtualChassis:SwitchVirtualChassis",
                        "description": "required for preprovisioned Virtual Chassis\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:device/SwitchVrfConfig:SwitchVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:device/SwitchVrfInstances:SwitchVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    },
                    "vrrpConfig": {
                        "$ref": "#/types/junipermist:device/SwitchVrrpConfig:SwitchVrrpConfig",
                        "description": "Junos VRRP config\n"
                    },
                    "x": {
                        "type": "number",
                        "description": "x in pixel\n"
                    },
                    "y": {
                        "type": "number",
                        "description": "y in pixel\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/alarmtemplate:Alarmtemplate": {
            "description": "This resource manages Alarm Templates.\nAn Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.\n\nOnce created, the Alarm template must be assigned with the `alarmtemplate_id` attribute to one of the following\n\t* the whole org with the `junipermist.org.base` resource\n\t* one or multiple sites with the `junipermist.site.base` resource\n\nIt is possible to use the `junipermist.getConstAlarms` data source to get a list of the available alarms\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Alarmtemplate;\nimport com.pulumi.junipermist.org.AlarmtemplateArgs;\nimport com.pulumi.junipermist.org.inputs.AlarmtemplateDeliveryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alarmtemplateOne = new Alarmtemplate(\"alarmtemplateOne\", AlarmtemplateArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"alarmtemplate_one\")\n            .delivery(AlarmtemplateDeliveryArgs.builder()\n                .enabled(true)\n                .to_org_admins(true)\n                .additional_emails(\"admin@mycorp.net\")\n                .build())\n            .rules(Map.ofEntries(\n                Map.entry(\"health_check_failed\", Map.of(\"enabled\", true)),\n                Map.entry(\"insufficient_capacity\", Map.of(\"enabled\", true)),\n                Map.entry(\"insufficient_coverage\", Map.of(\"enabled\", true)),\n                Map.entry(\"infra_arp_failure\", Map.of(\"enabled\", true)),\n                Map.entry(\"arp_failure\", Map.of(\"enabled\", true))\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alarmtemplateOne:\n    type: junipermist:org:Alarmtemplate\n    name: alarmtemplate_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: alarmtemplate_one\n      delivery:\n        enabled: true\n        to_org_admins: true\n        additional_emails:\n          - admin@mycorp.net\n      rules:\n        health_check_failed:\n          enabled: true\n        insufficient_capacity:\n          enabled: true\n        insufficient_coverage:\n          enabled: true\n        infra_arp_failure:\n          enabled: true\n        arp_failure:\n          enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_alarmtemplate` with:\n\nOrg RF Template can be imported by specifying the org_id and the alarmtemplate_id\n\n```sh\n$ pulumi import junipermist:org/alarmtemplate:Alarmtemplate alarmtemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "delivery": {
                    "$ref": "#/types/junipermist:org/AlarmtemplateDelivery:AlarmtemplateDelivery",
                    "description": "Delivery object to configure the alarm delivery\n"
                },
                "name": {
                    "type": "string",
                    "description": "Some string to name the alarm template\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rules": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/AlarmtemplateRules:AlarmtemplateRules"
                    },
                    "description": "Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).\n"
                }
            },
            "required": [
                "delivery",
                "name",
                "orgId",
                "rules"
            ],
            "inputProperties": {
                "delivery": {
                    "$ref": "#/types/junipermist:org/AlarmtemplateDelivery:AlarmtemplateDelivery",
                    "description": "Delivery object to configure the alarm delivery\n"
                },
                "name": {
                    "type": "string",
                    "description": "Some string to name the alarm template\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rules": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/AlarmtemplateRules:AlarmtemplateRules"
                    },
                    "description": "Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).\n"
                }
            },
            "requiredInputs": [
                "delivery",
                "orgId",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alarmtemplate resources.\n",
                "properties": {
                    "delivery": {
                        "$ref": "#/types/junipermist:org/AlarmtemplateDelivery:AlarmtemplateDelivery",
                        "description": "Delivery object to configure the alarm delivery\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Some string to name the alarm template\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/AlarmtemplateRules:AlarmtemplateRules"
                        },
                        "description": "Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/apitoken:Apitoken": {
            "description": "This resource manages Org API Tokens.\nOrg API token is a unique identifier used by an application to authenticate and access a service's API. These tokens are used to authenticate requests made to the API server and ensure secure access to the API. They are not bound to any specific user and provide access to the organization as a whole. \nOrganization tokens support different privileges and can only be used for the specific organization they are generated for.\nRate limiting is done on an individual token basis, so if one token reaches its rate limit, it does not impact other tokens.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Apitoken;\nimport com.pulumi.junipermist.org.ApitokenArgs;\nimport com.pulumi.junipermist.org.inputs.ApitokenPrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var apitokenOne = new Apitoken(\"apitokenOne\", ApitokenArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"apitoken_one\")\n            .privileges(            \n                ApitokenPrivilegeArgs.builder()\n                    .scope(\"site\")\n                    .role(\"admin\")\n                    .site_id(\"d7c8364e-xxxx-xxxx-xxxx-37eff0475b03\")\n                    .build(),\n                ApitokenPrivilegeArgs.builder()\n                    .scope(\"site\")\n                    .role(\"read\")\n                    .site_id(\"08f8851b-xxxx-xxxx-xxxx-9ebb5aa62de4\")\n                    .build())\n            .srcIps(\"1.2.3.4/32\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  apitokenOne:\n    type: junipermist:org:Apitoken\n    name: apitoken_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: apitoken_one\n      privileges:\n        - scope: site\n          role: admin\n          site_id: d7c8364e-xxxx-xxxx-xxxx-37eff0475b03\n        - scope: site\n          role: read\n          site_id: 08f8851b-xxxx-xxxx-xxxx-9ebb5aa62de4\n      srcIps:\n        - 1.2.3.4/32\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "email of the token creator / null if creator is deleted\n"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "name of the token\n"
                },
                "orgId": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ApitokenPrivilege:ApitokenPrivilege"
                    },
                    "description": "list of privileges the token has on the orgs/sites\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of allowed IP addresses from where the token can be used from. At most 10 IP addresses can be specified, cannot be changed once the API Token is created.\n"
                }
            },
            "required": [
                "createdBy",
                "key",
                "name",
                "orgId",
                "privileges"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "name of the token\n"
                },
                "orgId": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ApitokenPrivilege:ApitokenPrivilege"
                    },
                    "description": "list of privileges the token has on the orgs/sites\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of allowed IP addresses from where the token can be used from. At most 10 IP addresses can be specified, cannot be changed once the API Token is created.\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "privileges"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Apitoken resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "email of the token creator / null if creator is deleted\n"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the token\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/ApitokenPrivilege:ApitokenPrivilege"
                        },
                        "description": "list of privileges the token has on the orgs/sites\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of allowed IP addresses from where the token can be used from. At most 10 IP addresses can be specified, cannot be changed once the API Token is created.\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/base:base": {
            "description": "This resource manages the Mist Organization.\nAn organization usually represents a customer - which has inventories, licenses. An Organization can contain multiple sites. A site usually represents a deployment at the same location (a campus, an office).\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst orgOne = new junipermist.org.Base(\"org_one\", {\n    name: \"Org One\",\n    alarmtemplateId: alarmtemplateOne.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\norg_one = junipermist.org.Base(\"org_one\",\n    name=\"Org One\",\n    alarmtemplate_id=alarmtemplate_one[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var orgOne = new JuniperMist.Org.Base(\"org_one\", new()\n    {\n        Name = \"Org One\",\n        AlarmtemplateId = alarmtemplateOne.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.Newbase(ctx, \"org_one\", \u0026org.baseArgs{\n\t\t\tName:            pulumi.String(\"Org One\"),\n\t\t\tAlarmtemplateId: pulumi.Any(alarmtemplateOne.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.base;\nimport com.pulumi.junipermist.org.BaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var orgOne = new Base(\"orgOne\", BaseArgs.builder()\n            .name(\"Org One\")\n            .alarmtemplateId(alarmtemplateOne.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  orgOne:\n    type: junipermist:org:base\n    name: org_one\n    properties:\n      name: Org One\n      alarmtemplateId: ${alarmtemplateOne.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org` with:\n\nOrganization can be imported by specifying the org_id\n\n```sh\n$ pulumi import junipermist:org/base:base org_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a\n```\n\n",
            "properties": {
                "alarmtemplateId": {
                    "type": "string"
                },
                "allowMist": {
                    "type": "boolean"
                },
                "mspId": {
                    "type": "string"
                },
                "mspLogoUrl": {
                    "type": "string",
                    "description": "logo uploaded by the MSP with advanced tier, only present if provided\n"
                },
                "mspName": {
                    "type": "string",
                    "description": "name of the msp the org belongs to\n"
                },
                "name": {
                    "type": "string"
                },
                "orggroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sessionExpiry": {
                    "type": "integer"
                }
            },
            "required": [
                "allowMist",
                "mspId",
                "mspLogoUrl",
                "mspName",
                "name",
                "orggroupIds",
                "sessionExpiry"
            ],
            "inputProperties": {
                "alarmtemplateId": {
                    "type": "string"
                },
                "allowMist": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "sessionExpiry": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering base resources.\n",
                "properties": {
                    "alarmtemplateId": {
                        "type": "string"
                    },
                    "allowMist": {
                        "type": "boolean"
                    },
                    "mspId": {
                        "type": "string"
                    },
                    "mspLogoUrl": {
                        "type": "string",
                        "description": "logo uploaded by the MSP with advanced tier, only present if provided\n"
                    },
                    "mspName": {
                        "type": "string",
                        "description": "name of the msp the org belongs to\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orggroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sessionExpiry": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/deviceprofileAp:DeviceprofileAp": {
            "description": "This resource manages the AP Device Profiles.\nAP Device profiles for aps are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They allow for efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.\n\nThe AP Devide Profile can be assigned to a gateway with the `junipermist.org.DeviceprofileAssign` resource.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst deviceprofileApOne = new junipermist.org.DeviceprofileAp(\"deviceprofile_ap_one\", {\n    name: \"deviceprofile_ap_one\",\n    orgId: terraformTest.id,\n    eslConfig: {\n        enabled: true,\n        host: \"1.2.3.4\",\n        type: \"native\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\ndeviceprofile_ap_one = junipermist.org.DeviceprofileAp(\"deviceprofile_ap_one\",\n    name=\"deviceprofile_ap_one\",\n    org_id=terraform_test[\"id\"],\n    esl_config={\n        \"enabled\": True,\n        \"host\": \"1.2.3.4\",\n        \"type\": \"native\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deviceprofileApOne = new JuniperMist.Org.DeviceprofileAp(\"deviceprofile_ap_one\", new()\n    {\n        Name = \"deviceprofile_ap_one\",\n        OrgId = terraformTest.Id,\n        EslConfig = new JuniperMist.Org.Inputs.DeviceprofileApEslConfigArgs\n        {\n            Enabled = true,\n            Host = \"1.2.3.4\",\n            Type = \"native\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewDeviceprofileAp(ctx, \"deviceprofile_ap_one\", \u0026org.DeviceprofileApArgs{\n\t\t\tName:  pulumi.String(\"deviceprofile_ap_one\"),\n\t\t\tOrgId: pulumi.Any(terraformTest.Id),\n\t\t\tEslConfig: \u0026org.DeviceprofileApEslConfigArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\tHost:    pulumi.String(\"1.2.3.4\"),\n\t\t\t\tType:    pulumi.String(\"native\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.DeviceprofileAp;\nimport com.pulumi.junipermist.org.DeviceprofileApArgs;\nimport com.pulumi.junipermist.org.inputs.DeviceprofileApEslConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deviceprofileApOne = new DeviceprofileAp(\"deviceprofileApOne\", DeviceprofileApArgs.builder()\n            .name(\"deviceprofile_ap_one\")\n            .orgId(terraformTest.id())\n            .eslConfig(DeviceprofileApEslConfigArgs.builder()\n                .enabled(true)\n                .host(\"1.2.3.4\")\n                .type(\"native\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deviceprofileApOne:\n    type: junipermist:org:DeviceprofileAp\n    name: deviceprofile_ap_one\n    properties:\n      name: deviceprofile_ap_one\n      orgId: ${terraformTest.id}\n      eslConfig:\n        enabled: true\n        host: 1.2.3.4\n        type: native\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_deviceprofile_ap` with:\n\nDevice Profile can be imported by specifying the org_id and the deviceprofile_id\n\n```sh\n$ pulumi import junipermist:org/deviceprofileAp:DeviceprofileAp deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "aeroscout": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApAeroscout:DeviceprofileApAeroscout",
                    "description": "Aeroscout AP settings\n"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApBleConfig:DeviceprofileApBleConfig",
                    "description": "BLE AP settings\n"
                },
                "disableEth1": {
                    "type": "boolean",
                    "description": "whether to disable eth1 port\n"
                },
                "disableEth2": {
                    "type": "boolean",
                    "description": "whether to disable eth2 port\n"
                },
                "disableEth3": {
                    "type": "boolean",
                    "description": "whether to disable eth3 port\n"
                },
                "disableModule": {
                    "type": "boolean",
                    "description": "whether to disable module port\n"
                },
                "eslConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApEslConfig:DeviceprofileApEslConfig"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApIpConfig:DeviceprofileApIpConfig",
                    "description": "IP AP settings\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApLed:DeviceprofileApLed",
                    "description": "LED AP settings\n"
                },
                "mesh": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApMesh:DeviceprofileApMesh",
                    "description": "Mesh AP settings\n"
                },
                "name": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgId": {
                    "type": "string"
                },
                "poePassthrough": {
                    "type": "boolean",
                    "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                },
                "pwrConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApPwrConfig:DeviceprofileApPwrConfig",
                    "description": "power related configs\n"
                },
                "radioConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfig:DeviceprofileApRadioConfig",
                    "description": "Radio AP settings\n"
                },
                "siteId": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "Device Type. enum: `ap`\n"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApUplinkPortConfig:DeviceprofileApUplinkPortConfig"
                },
                "usbConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApUsbConfig:DeviceprofileApUsbConfig",
                    "description": "USB AP settings\nNote: if native imagotag is enabled, BLE will be disabled automatically\nNote: legacy, new config moved to ESL Config.\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                }
            },
            "required": [
                "disableEth1",
                "disableEth2",
                "disableEth3",
                "disableModule",
                "name",
                "orgId",
                "poePassthrough",
                "type"
            ],
            "inputProperties": {
                "aeroscout": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApAeroscout:DeviceprofileApAeroscout",
                    "description": "Aeroscout AP settings\n"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApBleConfig:DeviceprofileApBleConfig",
                    "description": "BLE AP settings\n"
                },
                "disableEth1": {
                    "type": "boolean",
                    "description": "whether to disable eth1 port\n"
                },
                "disableEth2": {
                    "type": "boolean",
                    "description": "whether to disable eth2 port\n"
                },
                "disableEth3": {
                    "type": "boolean",
                    "description": "whether to disable eth3 port\n"
                },
                "disableModule": {
                    "type": "boolean",
                    "description": "whether to disable module port\n"
                },
                "eslConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApEslConfig:DeviceprofileApEslConfig"
                },
                "ipConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApIpConfig:DeviceprofileApIpConfig",
                    "description": "IP AP settings\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApLed:DeviceprofileApLed",
                    "description": "LED AP settings\n"
                },
                "mesh": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApMesh:DeviceprofileApMesh",
                    "description": "Mesh AP settings\n"
                },
                "name": {
                    "type": "string"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgId": {
                    "type": "string"
                },
                "poePassthrough": {
                    "type": "boolean",
                    "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                },
                "pwrConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApPwrConfig:DeviceprofileApPwrConfig",
                    "description": "power related configs\n"
                },
                "radioConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfig:DeviceprofileApRadioConfig",
                    "description": "Radio AP settings\n"
                },
                "siteId": {
                    "type": "string"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApUplinkPortConfig:DeviceprofileApUplinkPortConfig"
                },
                "usbConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileApUsbConfig:DeviceprofileApUsbConfig",
                    "description": "USB AP settings\nNote: if native imagotag is enabled, BLE will be disabled automatically\nNote: legacy, new config moved to ESL Config.\n"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceprofileAp resources.\n",
                "properties": {
                    "aeroscout": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApAeroscout:DeviceprofileApAeroscout",
                        "description": "Aeroscout AP settings\n"
                    },
                    "bleConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApBleConfig:DeviceprofileApBleConfig",
                        "description": "BLE AP settings\n"
                    },
                    "disableEth1": {
                        "type": "boolean",
                        "description": "whether to disable eth1 port\n"
                    },
                    "disableEth2": {
                        "type": "boolean",
                        "description": "whether to disable eth2 port\n"
                    },
                    "disableEth3": {
                        "type": "boolean",
                        "description": "whether to disable eth3 port\n"
                    },
                    "disableModule": {
                        "type": "boolean",
                        "description": "whether to disable module port\n"
                    },
                    "eslConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApEslConfig:DeviceprofileApEslConfig"
                    },
                    "ipConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApIpConfig:DeviceprofileApIpConfig",
                        "description": "IP AP settings\n"
                    },
                    "led": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApLed:DeviceprofileApLed",
                        "description": "LED AP settings\n"
                    },
                    "mesh": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApMesh:DeviceprofileApMesh",
                        "description": "Mesh AP settings\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "poePassthrough": {
                        "type": "boolean",
                        "description": "whether to enable power out through module port (for APH) or eth1 (for APL/BT11)\n"
                    },
                    "pwrConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApPwrConfig:DeviceprofileApPwrConfig",
                        "description": "power related configs\n"
                    },
                    "radioConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApRadioConfig:DeviceprofileApRadioConfig",
                        "description": "Radio AP settings\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device Type. enum: `ap`\n"
                    },
                    "uplinkPortConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApUplinkPortConfig:DeviceprofileApUplinkPortConfig"
                    },
                    "usbConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileApUsbConfig:DeviceprofileApUsbConfig",
                        "description": "USB AP settings\nNote: if native imagotag is enabled, BLE will be disabled automatically\nNote: legacy, new config moved to ESL Config.\n"
                    },
                    "vars": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/deviceprofileAssign:DeviceprofileAssign": {
            "description": "This resourceis used to assign/unassign a device profile to one or multiple devices\nThe `junipermist.org.DeviceprofileGateway` resource can be assigned to GatewaysThe `junipermist.org.DeviceprofileAp` resource can be assigned the Wireless Access Points\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst deviceprofileAssign = new junipermist.org.DeviceprofileAssign(\"deviceprofile_assign\", {\n    orgId: terraformTest.id,\n    deviceprofileId: hubOne.id,\n    macs: [\n        \"4c9614000000\",\n        \"4c9614000001\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\ndeviceprofile_assign = junipermist.org.DeviceprofileAssign(\"deviceprofile_assign\",\n    org_id=terraform_test[\"id\"],\n    deviceprofile_id=hub_one[\"id\"],\n    macs=[\n        \"4c9614000000\",\n        \"4c9614000001\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deviceprofileAssign = new JuniperMist.Org.DeviceprofileAssign(\"deviceprofile_assign\", new()\n    {\n        OrgId = terraformTest.Id,\n        DeviceprofileId = hubOne.Id,\n        Macs = new[]\n        {\n            \"4c9614000000\",\n            \"4c9614000001\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewDeviceprofileAssign(ctx, \"deviceprofile_assign\", \u0026org.DeviceprofileAssignArgs{\n\t\t\tOrgId:           pulumi.Any(terraformTest.Id),\n\t\t\tDeviceprofileId: pulumi.Any(hubOne.Id),\n\t\t\tMacs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"4c9614000000\"),\n\t\t\t\tpulumi.String(\"4c9614000001\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.DeviceprofileAssign;\nimport com.pulumi.junipermist.org.DeviceprofileAssignArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deviceprofileAssign = new DeviceprofileAssign(\"deviceprofileAssign\", DeviceprofileAssignArgs.builder()\n            .orgId(terraformTest.id())\n            .deviceprofileId(hubOne.id())\n            .macs(            \n                \"4c9614000000\",\n                \"4c9614000001\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deviceprofileAssign:\n    type: junipermist:org:DeviceprofileAssign\n    name: deviceprofile_assign\n    properties:\n      orgId: ${terraformTest.id}\n      deviceprofileId: ${hubOne.id}\n      macs:\n        - 4c9614000000\n        - 4c9614000001\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceprofileId": {
                    "type": "string"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "deviceprofileId",
                "macs",
                "orgId"
            ],
            "inputProperties": {
                "deviceprofileId": {
                    "type": "string"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orgId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "deviceprofileId",
                "macs",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceprofileAssign resources.\n",
                "properties": {
                    "deviceprofileId": {
                        "type": "string"
                    },
                    "macs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/deviceprofileGateway:DeviceprofileGateway": {
            "description": "This resource manages the Gateway Device Profiles (HUB Profiles).\nA HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.\n\nThe Gateway Devide Profile can be assigned to a gateway with the `junipermist.org.DeviceprofileAssign` resource.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.DeviceprofileGateway;\nimport com.pulumi.junipermist.org.DeviceprofileGatewayArgs;\nimport com.pulumi.junipermist.org.inputs.DeviceprofileGatewayServicePolicyArgs;\nimport com.pulumi.junipermist.org.inputs.DeviceprofileGatewayServicePolicyIdpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deviceprofileGwOne = new DeviceprofileGateway(\"deviceprofileGwOne\", DeviceprofileGatewayArgs.builder()\n            .name(\"deviceprofile_gw_one\")\n            .orgId(terraformTest.id())\n            .portConfig(Map.ofEntries(\n                Map.entry(\"ge-0/0/3\", Map.ofEntries(\n                    Map.entry(\"name\", \"FTTH\"),\n                    Map.entry(\"usage\", \"wan\"),\n                    Map.entry(\"aggregated\", false),\n                    Map.entry(\"redundant\", false),\n                    Map.entry(\"critical\", false),\n                    Map.entry(\"wanType\", \"broadband\"),\n                    Map.entry(\"ipConfig\", Map.ofEntries(\n                        Map.entry(\"type\", \"static\"),\n                        Map.entry(\"ip\", \"192.168.1.8\"),\n                        Map.entry(\"netmask\", \"/24\"),\n                        Map.entry(\"gateway\", \"192.168.1.1\")\n                    )),\n                    Map.entry(\"disableAutoneg\", false),\n                    Map.entry(\"speed\", \"auto\"),\n                    Map.entry(\"duplex\", \"auto\"),\n                    Map.entry(\"wanSourceNat\", Map.of(\"disabled\", false)),\n                    Map.entry(\"vpnPaths\", Map.of(\"SSR_HUB_DC-MPLS.OrgOverlay\", Map.ofEntries(\n                        Map.entry(\"key\", 0),\n                        Map.entry(\"role\", \"spoke\"),\n                        Map.entry(\"bfdProfile\", \"broadband\")\n                    )))\n                )),\n                Map.entry(\"ge-0/0/5\", Map.ofEntries(\n                    Map.entry(\"usage\", \"lan\"),\n                    Map.entry(\"critical\", false),\n                    Map.entry(\"aggregated\", true),\n                    Map.entry(\"aeDisableLacp\", false),\n                    Map.entry(\"aeLacpForceUp\", true),\n                    Map.entry(\"aeIdx\", 0),\n                    Map.entry(\"redundant\", false),\n                    Map.entry(\"networks\",                     \n                        \"PRD-Core\",\n                        \"PRD-Mgmt\",\n                        \"PRD-Lab\")\n                ))\n            ))\n            .ipConfigs(Map.ofEntries(\n                Map.entry(\"PRD-Core\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.100.9\"),\n                    Map.entry(\"netmask\", \"/24\")\n                )),\n                Map.entry(\"PRD-Mgmt\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.172.1\"),\n                    Map.entry(\"netmask\", \"/24\")\n                )),\n                Map.entry(\"PRD-Lab\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.171.1\"),\n                    Map.entry(\"netmask\", \"/24\")\n                ))\n            ))\n            .servicePolicies(DeviceprofileGatewayServicePolicyArgs.builder()\n                .name(\"Policy-14\")\n                .tenants(\"PRD-Core\")\n                .services(\"any\")\n                .action(\"allow\")\n                .path_preference(\"HUB\")\n                .idp(DeviceprofileGatewayServicePolicyIdpArgs.builder()\n                    .enabled(true)\n                    .profile(\"critical\")\n                    .alertOnly(false)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deviceprofileGwOne:\n    type: junipermist:org:DeviceprofileGateway\n    name: deviceprofile_gw_one\n    properties:\n      name: deviceprofile_gw_one\n      orgId: ${terraformTest.id}\n      portConfig:\n        ge-0/0/3:\n          name: FTTH\n          usage: wan\n          aggregated: false\n          redundant: false\n          critical: false\n          wanType: broadband\n          ipConfig:\n            type: static\n            ip: 192.168.1.8\n            netmask: /24\n            gateway: 192.168.1.1\n          disableAutoneg: false\n          speed: auto\n          duplex: auto\n          wanSourceNat:\n            disabled: false\n          vpnPaths:\n            SSR_HUB_DC-MPLS.OrgOverlay:\n              key: 0\n              role: spoke\n              bfdProfile: broadband\n        ge-0/0/5:\n          usage: lan\n          critical: false\n          aggregated: true\n          aeDisableLacp: false\n          aeLacpForceUp: true\n          aeIdx: 0\n          redundant: false\n          networks:\n            - PRD-Core\n            - PRD-Mgmt\n            - PRD-Lab\n      ipConfigs:\n        PRD-Core:\n          type: static\n          ip: 10.3.100.9\n          netmask: /24\n        PRD-Mgmt:\n          type: static\n          ip: 10.3.172.1\n          netmask: /24\n        PRD-Lab:\n          type: static\n          ip: 10.3.171.1\n          netmask: /24\n      servicePolicies:\n        - name: Policy-14\n          tenants:\n            - PRD-Core\n          services:\n            - any\n          action: allow\n          path_preference: HUB\n          idp:\n            enabled: true\n            profile: critical\n            alertOnly: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_deviceprofile_gateway` with:\n\nDevice Profile can be imported by specifying the org_id and the deviceprofile_id\n\n```sh\n$ pulumi import junipermist:org/deviceprofileGateway:DeviceprofileGateway deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayBgpConfig:DeviceprofileGatewayBgpConfig"
                    }
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfig:DeviceprofileGatewayDhcpdConfig"
                },
                "dnsOverride": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes:DeviceprofileGatewayExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes6:DeviceprofileGatewayExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayIdpProfiles:DeviceprofileGatewayIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayIpConfigs:DeviceprofileGatewayIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetwork:DeviceprofileGatewayNetwork"
                    }
                },
                "ntpOverride": {
                    "type": "boolean"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayOobIpConfig:DeviceprofileGatewayOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPathPreferences:DeviceprofileGatewayPathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfig:DeviceprofileGatewayPortConfig"
                    },
                    "description": "Property key is the port(s) name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPolicies:DeviceprofileGatewayRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicy:DeviceprofileGatewayServicePolicy"
                    }
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigs:DeviceprofileGatewayTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptions:DeviceprofileGatewayTunnelProviderOptions"
                },
                "type": {
                    "type": "string",
                    "description": "Device Type. enum: `gateway`\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfConfig:DeviceprofileGatewayVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfInstances:DeviceprofileGatewayVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "required": [
                "dnsOverride",
                "name",
                "ntpOverride",
                "oobIpConfig",
                "orgId",
                "type"
            ],
            "inputProperties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayBgpConfig:DeviceprofileGatewayBgpConfig"
                    }
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfig:DeviceprofileGatewayDhcpdConfig"
                },
                "dnsOverride": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes:DeviceprofileGatewayExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes6:DeviceprofileGatewayExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayIdpProfiles:DeviceprofileGatewayIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayIpConfigs:DeviceprofileGatewayIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetwork:DeviceprofileGatewayNetwork"
                    }
                },
                "ntpOverride": {
                    "type": "boolean"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayOobIpConfig:DeviceprofileGatewayOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPathPreferences:DeviceprofileGatewayPathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfig:DeviceprofileGatewayPortConfig"
                    },
                    "description": "Property key is the port(s) name or range (e.g. \"ge-0/0/0-10\")\n"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPolicies:DeviceprofileGatewayRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicy:DeviceprofileGatewayServicePolicy"
                    }
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigs:DeviceprofileGatewayTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptions:DeviceprofileGatewayTunnelProviderOptions"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfConfig:DeviceprofileGatewayVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfInstances:DeviceprofileGatewayVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeviceprofileGateway resources.\n",
                "properties": {
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "bgpConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayBgpConfig:DeviceprofileGatewayBgpConfig"
                        }
                    },
                    "dhcpdConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayDhcpdConfig:DeviceprofileGatewayDhcpdConfig"
                    },
                    "dnsOverride": {
                        "type": "boolean"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes:DeviceprofileGatewayExtraRoutes"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayExtraRoutes6:DeviceprofileGatewayExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "idpProfiles": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayIdpProfiles:DeviceprofileGatewayIdpProfiles"
                        },
                        "description": "Property key is the profile name\n"
                    },
                    "ipConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayIpConfigs:DeviceprofileGatewayIpConfigs"
                        },
                        "description": "Property key is the network name\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayNetwork:DeviceprofileGatewayNetwork"
                        }
                    },
                    "ntpOverride": {
                        "type": "boolean"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                    },
                    "oobIpConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayOobIpConfig:DeviceprofileGatewayOobIpConfig",
                        "description": "out-of-band (vme/em0/fxp0) IP config\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "pathPreferences": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayPathPreferences:DeviceprofileGatewayPathPreferences"
                        },
                        "description": "Property key is the path name\n"
                    },
                    "portConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayPortConfig:DeviceprofileGatewayPortConfig"
                        },
                        "description": "Property key is the port(s) name or range (e.g. \"ge-0/0/0-10\")\n"
                    },
                    "routerId": {
                        "type": "string",
                        "description": "auto assigned if not set\n"
                    },
                    "routingPolicies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayRoutingPolicies:DeviceprofileGatewayRoutingPolicies"
                        },
                        "description": "Property key is the routing policy name\n"
                    },
                    "servicePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayServicePolicy:DeviceprofileGatewayServicePolicy"
                        }
                    },
                    "tunnelConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelConfigs:DeviceprofileGatewayTunnelConfigs"
                        },
                        "description": "Property key is the tunnel name\n"
                    },
                    "tunnelProviderOptions": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayTunnelProviderOptions:DeviceprofileGatewayTunnelProviderOptions"
                    },
                    "type": {
                        "type": "string",
                        "description": "Device Type. enum: `gateway`\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfConfig:DeviceprofileGatewayVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/DeviceprofileGatewayVrfInstances:DeviceprofileGatewayVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/evpnTopology:EvpnTopology": {
            "description": "This resource manages the Org Evpn Topologys.\nEVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.\n\n\u003e To create or manage your EVPN Topology with the Mist Provider, please refer to the `How To - EVPN Topology` Guide.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mist from \"@pulumi/mist\";\n\nconst evpnOne = new mist.index.OrgSiteEvpnTopology(\"evpn_one\", {\n    orgId: terraformTest.id,\n    name: \"evpn_one\",\n    evpnOptions: {\n        routedAt: \"core\",\n        overlay: {\n            as: 65000,\n        },\n        coreAsBorder: true,\n        autoLoopbackSubnet: \"172.16.192.0/24\",\n        autoLoopbackSubnet6: \"fd33:ab00:2::/64\",\n        perVlanVgaV4Mac: false,\n        underlay: {\n            asBase: 65001,\n            useIpv6: false,\n            subnet: \"10.255.240.0/20\",\n        },\n        autoRouterIdSubnet: \"172.16.254.0/23\",\n    },\n    switches: [\n        {\n            mac: \"020004000001\",\n            role: \"core\",\n        },\n        {\n            mac: \"02000400002\",\n            role: \"core\",\n        },\n        {\n            mac: \"02000400003\",\n            role: \"distribution\",\n        },\n        {\n            mac: \"02000400004\",\n            role: \"distribution\",\n        },\n        {\n            mac: \"02000400005\",\n            role: \"access\",\n        },\n        {\n            mac: \"02000400006\",\n            role: \"access\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mist as mist\n\nevpn_one = mist.index.OrgSiteEvpnTopology(\"evpn_one\",\n    org_id=terraform_test.id,\n    name=evpn_one,\n    evpn_options={\n        routedAt: core,\n        overlay: {\n            as: 65000,\n        },\n        coreAsBorder: True,\n        autoLoopbackSubnet: 172.16.192.0/24,\n        autoLoopbackSubnet6: fd33:ab00:2::/64,\n        perVlanVgaV4Mac: False,\n        underlay: {\n            asBase: 65001,\n            useIpv6: False,\n            subnet: 10.255.240.0/20,\n        },\n        autoRouterIdSubnet: 172.16.254.0/23,\n    },\n    switches=[\n        {\n            mac: 020004000001,\n            role: core,\n        },\n        {\n            mac: 02000400002,\n            role: core,\n        },\n        {\n            mac: 02000400003,\n            role: distribution,\n        },\n        {\n            mac: 02000400004,\n            role: distribution,\n        },\n        {\n            mac: 02000400005,\n            role: access,\n        },\n        {\n            mac: 02000400006,\n            role: access,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mist = Pulumi.Mist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var evpnOne = new Mist.Index.OrgSiteEvpnTopology(\"evpn_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"evpn_one\",\n        EvpnOptions = \n        {\n            { \"routedAt\", \"core\" },\n            { \"overlay\", \n            {\n                { \"as\", 65000 },\n            } },\n            { \"coreAsBorder\", true },\n            { \"autoLoopbackSubnet\", \"172.16.192.0/24\" },\n            { \"autoLoopbackSubnet6\", \"fd33:ab00:2::/64\" },\n            { \"perVlanVgaV4Mac\", false },\n            { \"underlay\", \n            {\n                { \"asBase\", 65001 },\n                { \"useIpv6\", false },\n                { \"subnet\", \"10.255.240.0/20\" },\n            } },\n            { \"autoRouterIdSubnet\", \"172.16.254.0/23\" },\n        },\n        Switches = new[]\n        {\n            \n            {\n                { \"mac\", \"020004000001\" },\n                { \"role\", \"core\" },\n            },\n            \n            {\n                { \"mac\", \"02000400002\" },\n                { \"role\", \"core\" },\n            },\n            \n            {\n                { \"mac\", \"02000400003\" },\n                { \"role\", \"distribution\" },\n            },\n            \n            {\n                { \"mac\", \"02000400004\" },\n                { \"role\", \"distribution\" },\n            },\n            \n            {\n                { \"mac\", \"02000400005\" },\n                { \"role\", \"access\" },\n            },\n            \n            {\n                { \"mac\", \"02000400006\" },\n                { \"role\", \"access\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mist/sdk/go/mist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mist.NewOrgSiteEvpnTopology(ctx, \"evpn_one\", \u0026mist.OrgSiteEvpnTopologyArgs{\n\t\t\tOrgId: terraformTest.Id,\n\t\t\tName:  \"evpn_one\",\n\t\t\tEvpnOptions: map[string]interface{}{\n\t\t\t\t\"routedAt\": \"core\",\n\t\t\t\t\"overlay\": map[string]interface{}{\n\t\t\t\t\t\"as\": 65000,\n\t\t\t\t},\n\t\t\t\t\"coreAsBorder\":        true,\n\t\t\t\t\"autoLoopbackSubnet\":  \"172.16.192.0/24\",\n\t\t\t\t\"autoLoopbackSubnet6\": \"fd33:ab00:2::/64\",\n\t\t\t\t\"perVlanVgaV4Mac\":     false,\n\t\t\t\t\"underlay\": map[string]interface{}{\n\t\t\t\t\t\"asBase\":  65001,\n\t\t\t\t\t\"useIpv6\": false,\n\t\t\t\t\t\"subnet\":  \"10.255.240.0/20\",\n\t\t\t\t},\n\t\t\t\t\"autoRouterIdSubnet\": \"172.16.254.0/23\",\n\t\t\t},\n\t\t\tSwitches: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"020004000001\",\n\t\t\t\t\t\"role\": \"core\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400002\",\n\t\t\t\t\t\"role\": \"core\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400003\",\n\t\t\t\t\t\"role\": \"distribution\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400004\",\n\t\t\t\t\t\"role\": \"distribution\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400005\",\n\t\t\t\t\t\"role\": \"access\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400006\",\n\t\t\t\t\t\"role\": \"access\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mist.orgSiteEvpnTopology;\nimport com.pulumi.mist.OrgSiteEvpnTopologyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var evpnOne = new OrgSiteEvpnTopology(\"evpnOne\", OrgSiteEvpnTopologyArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"evpn_one\")\n            .evpnOptions(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .switches(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  evpnOne:\n    type: mist:orgSiteEvpnTopology\n    name: evpn_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: evpn_one\n      evpnOptions:\n        routedAt: core\n        overlay:\n          as: 65000\n        coreAsBorder: true\n        autoLoopbackSubnet: 172.16.192.0/24\n        autoLoopbackSubnet6: fd33:ab00:2::/64\n        perVlanVgaV4Mac: false\n        underlay:\n          asBase: 65001\n          useIpv6: false\n          subnet: 10.255.240.0/20\n        autoRouterIdSubnet: 172.16.254.0/23\n      switches:\n        - mac: '020004000001'\n          role: core\n        - mac: '02000400002'\n          role: core\n        - mac: '02000400003'\n          role: distribution\n        - mac: '02000400004'\n          role: distribution\n        - mac: '02000400005'\n          role: access\n        - mac: '02000400006'\n          role: access\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_evpn_topology` with:\n\nEVPN Topology can be imported by specifying the org_id and the evpn_topology_id\n\n```sh\n$ pulumi import junipermist:org/evpnTopology:EvpnTopology evpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "evpnOptions": {
                    "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                    "description": "EVPN Options\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "podNames": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Property key is the pod number\n"
                },
                "switches": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/EvpnTopologySwitches:EvpnTopologySwitches"
                    },
                    "description": "Property key can be the switch MAC Address\n"
                }
            },
            "required": [
                "name",
                "orgId",
                "podNames",
                "switches"
            ],
            "inputProperties": {
                "evpnOptions": {
                    "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                    "description": "EVPN Options\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "podNames": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Property key is the pod number\n"
                },
                "switches": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/EvpnTopologySwitches:EvpnTopologySwitches"
                    },
                    "description": "Property key can be the switch MAC Address\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "switches"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EvpnTopology resources.\n",
                "properties": {
                    "evpnOptions": {
                        "$ref": "#/types/junipermist:org/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                        "description": "EVPN Options\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "podNames": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Property key is the pod number\n"
                    },
                    "switches": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/EvpnTopologySwitches:EvpnTopologySwitches"
                        },
                        "description": "Property key can be the switch MAC Address\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/gatewaytemplate:Gatewaytemplate": {
            "description": "This resource manages the Gateway Templates.\nA Gateway template is used to define the static ip address and subnet mask of the hub device, along with the gateway. It also allows for the selection of options such as enabling source nat and overriding the public ip for the hub if needed. the endpoint selected in the gateway template ties the hub and spoke devices together and creates the auto-vpn tunnel.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Gatewaytemplate;\nimport com.pulumi.junipermist.org.GatewaytemplateArgs;\nimport com.pulumi.junipermist.org.inputs.GatewaytemplateServicePolicyArgs;\nimport com.pulumi.junipermist.org.inputs.GatewaytemplateServicePolicyIdpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gatewaytemplateOne = new Gatewaytemplate(\"gatewaytemplateOne\", GatewaytemplateArgs.builder()\n            .type(\"spoke\")\n            .name(\"gatewaytemplate_one\")\n            .orgId(terraformTest.id())\n            .portConfig(Map.ofEntries(\n                Map.entry(\"ge-0/0/3\", Map.ofEntries(\n                    Map.entry(\"name\", \"FTTH\"),\n                    Map.entry(\"usage\", \"wan\"),\n                    Map.entry(\"aggregated\", false),\n                    Map.entry(\"redundant\", false),\n                    Map.entry(\"critical\", false),\n                    Map.entry(\"wanType\", \"broadband\"),\n                    Map.entry(\"ipConfig\", Map.ofEntries(\n                        Map.entry(\"type\", \"static\"),\n                        Map.entry(\"ip\", \"192.168.1.8\"),\n                        Map.entry(\"netmask\", \"/24\"),\n                        Map.entry(\"gateway\", \"192.168.1.1\")\n                    )),\n                    Map.entry(\"disableAutoneg\", false),\n                    Map.entry(\"speed\", \"auto\"),\n                    Map.entry(\"duplex\", \"auto\"),\n                    Map.entry(\"wanSourceNat\", Map.of(\"disabled\", false)),\n                    Map.entry(\"vpnPaths\", Map.of(\"SSR_HUB_DC-MPLS.OrgOverlay\", Map.ofEntries(\n                        Map.entry(\"key\", 0),\n                        Map.entry(\"role\", \"spoke\"),\n                        Map.entry(\"bfdProfile\", \"broadband\")\n                    )))\n                )),\n                Map.entry(\"ge-0/0/5\", Map.ofEntries(\n                    Map.entry(\"usage\", \"lan\"),\n                    Map.entry(\"critical\", false),\n                    Map.entry(\"aggregated\", true),\n                    Map.entry(\"aeDisableLacp\", false),\n                    Map.entry(\"aeLacpForceUp\", true),\n                    Map.entry(\"aeIdx\", 0),\n                    Map.entry(\"redundant\", false),\n                    Map.entry(\"networks\",                     \n                        \"PRD-Core\",\n                        \"PRD-Mgmt\",\n                        \"PRD-Lab\")\n                ))\n            ))\n            .ipConfigs(Map.ofEntries(\n                Map.entry(\"PRD-Core\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.100.9\"),\n                    Map.entry(\"netmask\", \"/24\")\n                )),\n                Map.entry(\"PRD-Mgmt\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.172.1\"),\n                    Map.entry(\"netmask\", \"/24\")\n                )),\n                Map.entry(\"PRD-Lab\", Map.ofEntries(\n                    Map.entry(\"type\", \"static\"),\n                    Map.entry(\"ip\", \"10.3.171.1\"),\n                    Map.entry(\"netmask\", \"/24\")\n                ))\n            ))\n            .servicePolicies(GatewaytemplateServicePolicyArgs.builder()\n                .name(\"Policy-14\")\n                .tenants(\"PRD-Core\")\n                .services(\"any\")\n                .action(\"allow\")\n                .path_preference(\"HUB\")\n                .idp(GatewaytemplateServicePolicyIdpArgs.builder()\n                    .enabled(true)\n                    .profile(\"critical\")\n                    .alertOnly(false)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gatewaytemplateOne:\n    type: junipermist:org:Gatewaytemplate\n    name: gatewaytemplate_one\n    properties:\n      type: spoke\n      name: gatewaytemplate_one\n      orgId: ${terraformTest.id}\n      portConfig:\n        ge-0/0/3:\n          name: FTTH\n          usage: wan\n          aggregated: false\n          redundant: false\n          critical: false\n          wanType: broadband\n          ipConfig:\n            type: static\n            ip: 192.168.1.8\n            netmask: /24\n            gateway: 192.168.1.1\n          disableAutoneg: false\n          speed: auto\n          duplex: auto\n          wanSourceNat:\n            disabled: false\n          vpnPaths:\n            SSR_HUB_DC-MPLS.OrgOverlay:\n              key: 0\n              role: spoke\n              bfdProfile: broadband\n        ge-0/0/5:\n          usage: lan\n          critical: false\n          aggregated: true\n          aeDisableLacp: false\n          aeLacpForceUp: true\n          aeIdx: 0\n          redundant: false\n          networks:\n            - PRD-Core\n            - PRD-Mgmt\n            - PRD-Lab\n      ipConfigs:\n        PRD-Core:\n          type: static\n          ip: 10.3.100.9\n          netmask: /24\n        PRD-Mgmt:\n          type: static\n          ip: 10.3.172.1\n          netmask: /24\n        PRD-Lab:\n          type: static\n          ip: 10.3.171.1\n          netmask: /24\n      servicePolicies:\n        - name: Policy-14\n          tenants:\n            - PRD-Core\n          services:\n            - any\n          action: allow\n          path_preference: HUB\n          idp:\n            enabled: true\n            profile: critical\n            alertOnly: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_gatewaytemplate` with:\n\nGateway Template can be imported by specifying the org_id and the gatewaytemplate_id\n\n```sh\n$ pulumi import junipermist:org/gatewaytemplate:Gatewaytemplate gatewaytemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateBgpConfig:GatewaytemplateBgpConfig"
                    }
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfig:GatewaytemplateDhcpdConfig"
                },
                "dnsOverride": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes:GatewaytemplateExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes6:GatewaytemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateIdpProfiles:GatewaytemplateIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateIpConfigs:GatewaytemplateIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetwork:GatewaytemplateNetwork"
                    }
                },
                "ntpOverride": {
                    "type": "boolean"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateOobIpConfig:GatewaytemplateOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePathPreferences:GatewaytemplatePathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePortConfig:GatewaytemplatePortConfig"
                    },
                    "description": "Property key is the Port Name (i.e. \"ge-0/0/0\"), the Ports Range (i.e. \"ge-0/0/0-10\"), the List of Ports (i.e.\n\"ge-0/0/0,ge-1/0/0\", only allowed for Aggregated or Redundant interfaces) or a Variable (i.e. \"{{myvar}}\").\n"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPolicies:GatewaytemplateRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicy:GatewaytemplateServicePolicy"
                    }
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigs:GatewaytemplateTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptions:GatewaytemplateTunnelProviderOptions"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `spoke`, `standalone`\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateVrfConfig:GatewaytemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateVrfInstances:GatewaytemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "required": [
                "dnsOverride",
                "name",
                "ntpOverride",
                "oobIpConfig",
                "orgId",
                "type"
            ],
            "inputProperties": {
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "bgpConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateBgpConfig:GatewaytemplateBgpConfig"
                    }
                },
                "dhcpdConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfig:GatewaytemplateDhcpdConfig"
                },
                "dnsOverride": {
                    "type": "boolean"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes:GatewaytemplateExtraRoutes"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes6:GatewaytemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "idpProfiles": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateIdpProfiles:GatewaytemplateIdpProfiles"
                    },
                    "description": "Property key is the profile name\n"
                },
                "ipConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateIpConfigs:GatewaytemplateIpConfigs"
                    },
                    "description": "Property key is the network name\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateNetwork:GatewaytemplateNetwork"
                    }
                },
                "ntpOverride": {
                    "type": "boolean"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "oobIpConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateOobIpConfig:GatewaytemplateOobIpConfig",
                    "description": "out-of-band (vme/em0/fxp0) IP config\n"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreferences": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePathPreferences:GatewaytemplatePathPreferences"
                    },
                    "description": "Property key is the path name\n"
                },
                "portConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplatePortConfig:GatewaytemplatePortConfig"
                    },
                    "description": "Property key is the Port Name (i.e. \"ge-0/0/0\"), the Ports Range (i.e. \"ge-0/0/0-10\"), the List of Ports (i.e.\n\"ge-0/0/0,ge-1/0/0\", only allowed for Aggregated or Redundant interfaces) or a Variable (i.e. \"{{myvar}}\").\n"
                },
                "routerId": {
                    "type": "string",
                    "description": "auto assigned if not set\n"
                },
                "routingPolicies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPolicies:GatewaytemplateRoutingPolicies"
                    },
                    "description": "Property key is the routing policy name\n"
                },
                "servicePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicy:GatewaytemplateServicePolicy"
                    }
                },
                "tunnelConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigs:GatewaytemplateTunnelConfigs"
                    },
                    "description": "Property key is the tunnel name\n"
                },
                "tunnelProviderOptions": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptions:GatewaytemplateTunnelProviderOptions"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `spoke`, `standalone`\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/GatewaytemplateVrfConfig:GatewaytemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateVrfInstances:GatewaytemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gatewaytemplate resources.\n",
                "properties": {
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "bgpConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateBgpConfig:GatewaytemplateBgpConfig"
                        }
                    },
                    "dhcpdConfig": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateDhcpdConfig:GatewaytemplateDhcpdConfig"
                    },
                    "dnsOverride": {
                        "type": "boolean"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes:GatewaytemplateExtraRoutes"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"10.0.0.0/8\")\n"
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateExtraRoutes6:GatewaytemplateExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "idpProfiles": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateIdpProfiles:GatewaytemplateIdpProfiles"
                        },
                        "description": "Property key is the profile name\n"
                    },
                    "ipConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateIpConfigs:GatewaytemplateIpConfigs"
                        },
                        "description": "Property key is the network name\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateNetwork:GatewaytemplateNetwork"
                        }
                    },
                    "ntpOverride": {
                        "type": "boolean"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                    },
                    "oobIpConfig": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateOobIpConfig:GatewaytemplateOobIpConfig",
                        "description": "out-of-band (vme/em0/fxp0) IP config\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "pathPreferences": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplatePathPreferences:GatewaytemplatePathPreferences"
                        },
                        "description": "Property key is the path name\n"
                    },
                    "portConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplatePortConfig:GatewaytemplatePortConfig"
                        },
                        "description": "Property key is the Port Name (i.e. \"ge-0/0/0\"), the Ports Range (i.e. \"ge-0/0/0-10\"), the List of Ports (i.e.\n\"ge-0/0/0,ge-1/0/0\", only allowed for Aggregated or Redundant interfaces) or a Variable (i.e. \"{{myvar}}\").\n"
                    },
                    "routerId": {
                        "type": "string",
                        "description": "auto assigned if not set\n"
                    },
                    "routingPolicies": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateRoutingPolicies:GatewaytemplateRoutingPolicies"
                        },
                        "description": "Property key is the routing policy name\n"
                    },
                    "servicePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateServicePolicy:GatewaytemplateServicePolicy"
                        }
                    },
                    "tunnelConfigs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateTunnelConfigs:GatewaytemplateTunnelConfigs"
                        },
                        "description": "Property key is the tunnel name\n"
                    },
                    "tunnelProviderOptions": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateTunnelProviderOptions:GatewaytemplateTunnelProviderOptions"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `spoke`, `standalone`\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:org/GatewaytemplateVrfConfig:GatewaytemplateVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/GatewaytemplateVrfInstances:GatewaytemplateVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/idpprofile:Idpprofile": {
            "description": "This resource manages WAN Assurance Idp Profiles.\nAn IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system.It specifies how the idp system should detect and respond to potential security threats or attacks on a network.The profile includes rules and policies that determine which types of traffic or attacks should be monitored,what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Idpprofile;\nimport com.pulumi.junipermist.org.IdpprofileArgs;\nimport com.pulumi.junipermist.org.inputs.IdpprofileOverwriteArgs;\nimport com.pulumi.junipermist.org.inputs.IdpprofileOverwriteMatchingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var idpprofileOne = new Idpprofile(\"idpprofileOne\", IdpprofileArgs.builder()\n            .orgId(terraformTest.id())\n            .baseProfile(\"standard\")\n            .overwrites(            \n                IdpprofileOverwriteArgs.builder()\n                    .name(\"server_bypass\")\n                    .matching(IdpprofileOverwriteMatchingArgs.builder()\n                        .severity()\n                        .dstSubnet()\n                        .attackName(\"SSL:OVERFLOW:KEY-ARG-NO-ENTROPY\")\n                        .build())\n                    .build(),\n                IdpprofileOverwriteArgs.builder()\n                    .name(\"guest-bypass\")\n                    .matching(IdpprofileOverwriteMatchingArgs.builder()\n                        .severity()\n                        .dstSubnet(\"8.8.8.8/32\")\n                        .attackName(\"UDP:ZERO-DATA\")\n                        .build())\n                    .build())\n            .name(\"idpprofile_one\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  idpprofileOne:\n    type: junipermist:org:Idpprofile\n    name: idpprofile_one\n    properties:\n      orgId: ${terraformTest.id}\n      baseProfile: standard\n      overwrites:\n        - name: server_bypass\n          matching:\n            severity: []\n            dstSubnet: []\n            attackName:\n              - SSL:OVERFLOW:KEY-ARG-NO-ENTROPY\n        - name: guest-bypass\n          matching:\n            severity: []\n            dstSubnet:\n              - 8.8.8.8/32\n            attackName:\n              - UDP:ZERO-DATA\n      name: idpprofile_one\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_idpprofile` with:\n\nIDP Profile can be imported by specifying the org_id and the idpprofile_id\n\n```sh\n$ pulumi import junipermist:org/idpprofile:Idpprofile idpprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/IdpprofileOverwrite:IdpprofileOverwrite"
                    }
                }
            },
            "required": [
                "baseProfile",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "baseProfile": {
                    "type": "string",
                    "description": "enum: `critical`, `standard`, `strict`\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/IdpprofileOverwrite:IdpprofileOverwrite"
                    }
                }
            },
            "requiredInputs": [
                "baseProfile",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Idpprofile resources.\n",
                "properties": {
                    "baseProfile": {
                        "type": "string",
                        "description": "enum: `critical`, `standard`, `strict`\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "overwrites": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/IdpprofileOverwrite:IdpprofileOverwrite"
                        }
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/inventory:Inventory": {
            "description": "This resource manages the Org Inventory.\nIt can be used to claim, unclaim, assign, unassign, reassign devices.\n\n-\u003eRemoving a device from the `devices` list or `inventory` map will NOT release it unless `unclaim_when_destroyed` is set to `true`\n\n\u003e **WARNING** The `devices` attribute (list) is deprecated and is replaced by the `inventory` attribute (map) as it can generate \"inconsistent result after apply\" errors. If this happen, is is required to force a refresh of the state to synchronise the new list.\n\nThe `devices` attribute will generate inconsistent result after apply when \n* a device other than the last one is removed from the list\n* a device is added somewhere other than the end of the list\n\n\n## Import\n\nUsing `pulumi import`, import `mist_org_inventory` with:\n\nOrg Inventory can be imported by specifying the org_id\n\n```sh\n$ pulumi import junipermist:org/inventory:Inventory inventory_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a\n```\n\n",
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/InventoryDevice:InventoryDevice"
                    },
                    "description": "**DEPRECATED** The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been\nreplaced with the `inventory` map and may be removed in future versions. Please update your configurations to use the\n`inventory` attribute. List of devices to manage. Exactly one of `claim_code` or `mac` field must be set\n",
                    "deprecationMessage": "The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.\nPlease update your configurations to use the `inventory` attribute."
                },
                "inventory": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/InventoryInventory:InventoryInventory"
                    },
                    "description": "Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist\nOrganization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device\nalready in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) \u003e\n",
                    "language": {
                        "csharp": {
                            "name": "InventoryDetails"
                        }
                    }
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "devices",
                "inventory",
                "orgId"
            ],
            "inputProperties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/InventoryDevice:InventoryDevice"
                    },
                    "description": "**DEPRECATED** The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been\nreplaced with the `inventory` map and may be removed in future versions. Please update your configurations to use the\n`inventory` attribute. List of devices to manage. Exactly one of `claim_code` or `mac` field must be set\n",
                    "deprecationMessage": "The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.\nPlease update your configurations to use the `inventory` attribute."
                },
                "inventory": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/InventoryInventory:InventoryInventory"
                    },
                    "description": "Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist\nOrganization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device\nalready in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) \u003e\n",
                    "language": {
                        "csharp": {
                            "name": "InventoryDetails"
                        }
                    }
                },
                "orgId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Inventory resources.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/InventoryDevice:InventoryDevice"
                        },
                        "description": "**DEPRECATED** The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been\nreplaced with the `inventory` map and may be removed in future versions. Please update your configurations to use the\n`inventory` attribute. List of devices to manage. Exactly one of `claim_code` or `mac` field must be set\n",
                        "deprecationMessage": "The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.\nPlease update your configurations to use the `inventory` attribute."
                    },
                    "inventory": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/InventoryInventory:InventoryInventory"
                        },
                        "description": "Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist\nOrganization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device\nalready in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) \u003e\n",
                        "language": {
                            "csharp": {
                                "name": "InventoryDetails"
                            }
                        }
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/nacidp:Nacidp": {
            "description": "This resource manages NAC IDPs (Identity Providers).\nThe NAC IDPs to validate NAC client accounts against an IDP with OAuth2.0, LDAP/LDAPS, or a local Mist Edge.\nMist Access Assurance can also retrieve group membership from the IDP, and use this information in the NAC Rules (`junipermist.org.Nacrule` resource)\n\nIMPORTANT:\n* Once created, the NAC IDP must be registered in the `junipermist.org.Setting` resource (full path: `mist_org_setting.mist_nac.idps`).\n* The associated REALMS are configured under `mist_org_setting.mist_nac.idps`\n* To make the IDP the Default IDP, set the IDP ID under `mist_org_setting.mist_nac.default_idp_id`\n\nFor SAML IDP, the NAC IDP Metadata can be retrieved with the `junipermist.org.getNacidpMetadata` data source.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\n// OAuth with Azure Example\nconst idpAzure = new junipermist.org.Nacidp(\"idp_azure\", {\n    orgId: terraformTest.id,\n    name: \"idp_azure\",\n    idpType: \"oauth\",\n    oauthCcClientId: \"client_id\",\n    oauthCcClientSecret: \"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n    oauthRopcClientId: \"ropc_client_id\",\n    oauthRopcClientSecret: \"ropc_client_secret\",\n    oauthTenantId: \"tenant_id\",\n    oauthType: \"azure\",\n});\n// Custom LDAP Example\nconst idpLdap = new junipermist.org.Nacidp(\"idp_ldap\", {\n    orgId: terraformTest.id,\n    name: \"idp_ldap\",\n    idpType: \"ldap\",\n    ldapType: \"custom\",\n    groupFilter: \"memberOf\",\n    memberFilter: \"memberOf\",\n    ldapUserFilter: \"(mail=%s)\",\n    ldapServerHosts: [\n        \"ldap.mycorp.com\",\n        \"1.2.3.4\",\n    ],\n    ldapBaseDn: \"DC=abc,DC=com\",\n    ldapBindDn: \"CN=admin,CN=users,DC=abc,DC=com\",\n    ldapBindPassword: \"secret!password\",\n    ldapCacerts: [\n        `-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----`,\n        `-----BEGIN CERTIFICATE-----\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----`,\n    ],\n    ldapClientCert: `-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----`,\n    ldapClientKey: \"-----BEGIN PRI...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\n# OAuth with Azure Example\nidp_azure = junipermist.org.Nacidp(\"idp_azure\",\n    org_id=terraform_test[\"id\"],\n    name=\"idp_azure\",\n    idp_type=\"oauth\",\n    oauth_cc_client_id=\"client_id\",\n    oauth_cc_client_secret=\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n    oauth_ropc_client_id=\"ropc_client_id\",\n    oauth_ropc_client_secret=\"ropc_client_secret\",\n    oauth_tenant_id=\"tenant_id\",\n    oauth_type=\"azure\")\n# Custom LDAP Example\nidp_ldap = junipermist.org.Nacidp(\"idp_ldap\",\n    org_id=terraform_test[\"id\"],\n    name=\"idp_ldap\",\n    idp_type=\"ldap\",\n    ldap_type=\"custom\",\n    group_filter=\"memberOf\",\n    member_filter=\"memberOf\",\n    ldap_user_filter=\"(mail=%s)\",\n    ldap_server_hosts=[\n        \"ldap.mycorp.com\",\n        \"1.2.3.4\",\n    ],\n    ldap_base_dn=\"DC=abc,DC=com\",\n    ldap_bind_dn=\"CN=admin,CN=users,DC=abc,DC=com\",\n    ldap_bind_password=\"secret!password\",\n    ldap_cacerts=[\n        \"\"\"-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----\"\"\",\n        \"\"\"-----BEGIN CERTIFICATE-----\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\"\"\",\n    ],\n    ldap_client_cert=\"\"\"-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----\"\"\",\n    ldap_client_key=\"-----BEGIN PRI...\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // OAuth with Azure Example\n    var idpAzure = new JuniperMist.Org.Nacidp(\"idp_azure\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"idp_azure\",\n        IdpType = \"oauth\",\n        OauthCcClientId = \"client_id\",\n        OauthCcClientSecret = \"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n        OauthRopcClientId = \"ropc_client_id\",\n        OauthRopcClientSecret = \"ropc_client_secret\",\n        OauthTenantId = \"tenant_id\",\n        OauthType = \"azure\",\n    });\n\n    // Custom LDAP Example\n    var idpLdap = new JuniperMist.Org.Nacidp(\"idp_ldap\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"idp_ldap\",\n        IdpType = \"ldap\",\n        LdapType = \"custom\",\n        GroupFilter = \"memberOf\",\n        MemberFilter = \"memberOf\",\n        LdapUserFilter = \"(mail=%s)\",\n        LdapServerHosts = new[]\n        {\n            \"ldap.mycorp.com\",\n            \"1.2.3.4\",\n        },\n        LdapBaseDn = \"DC=abc,DC=com\",\n        LdapBindDn = \"CN=admin,CN=users,DC=abc,DC=com\",\n        LdapBindPassword = \"secret!password\",\n        LdapCacerts = new[]\n        {\n            @\"-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----\",\n            @\"-----BEGIN CERTIFICATE-----\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\",\n        },\n        LdapClientCert = @\"-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----\",\n        LdapClientKey = \"-----BEGIN PRI...\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// OAuth with Azure Example\n\t\t_, err := org.NewNacidp(ctx, \"idp_azure\", \u0026org.NacidpArgs{\n\t\t\tOrgId:                 pulumi.Any(terraformTest.Id),\n\t\t\tName:                  pulumi.String(\"idp_azure\"),\n\t\t\tIdpType:               pulumi.String(\"oauth\"),\n\t\t\tOauthCcClientId:       pulumi.String(\"client_id\"),\n\t\t\tOauthCcClientSecret:   pulumi.String(\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\"),\n\t\t\tOauthRopcClientId:     pulumi.String(\"ropc_client_id\"),\n\t\t\tOauthRopcClientSecret: pulumi.String(\"ropc_client_secret\"),\n\t\t\tOauthTenantId:         pulumi.String(\"tenant_id\"),\n\t\t\tOauthType:             pulumi.String(\"azure\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Custom LDAP Example\n\t\t_, err = org.NewNacidp(ctx, \"idp_ldap\", \u0026org.NacidpArgs{\n\t\t\tOrgId:          pulumi.Any(terraformTest.Id),\n\t\t\tName:           pulumi.String(\"idp_ldap\"),\n\t\t\tIdpType:        pulumi.String(\"ldap\"),\n\t\t\tLdapType:       pulumi.String(\"custom\"),\n\t\t\tGroupFilter:    pulumi.String(\"memberOf\"),\n\t\t\tMemberFilter:   pulumi.String(\"memberOf\"),\n\t\t\tLdapUserFilter: pulumi.String(\"(mail=%s)\"),\n\t\t\tLdapServerHosts: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ldap.mycorp.com\"),\n\t\t\t\tpulumi.String(\"1.2.3.4\"),\n\t\t\t},\n\t\t\tLdapBaseDn:       pulumi.String(\"DC=abc,DC=com\"),\n\t\t\tLdapBindDn:       pulumi.String(\"CN=admin,CN=users,DC=abc,DC=com\"),\n\t\t\tLdapBindPassword: pulumi.String(\"secret!password\"),\n\t\t\tLdapCacerts: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"-----BEGIN CERTIFICATE-----\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----END CERTIFICATE-----\"),\n\t\t\t\tpulumi.String(\"-----BEGIN CERTIFICATE-----\\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\"),\n\t\t\t},\n\t\t\tLdapClientCert: pulumi.String(\"-----BEGIN CERTIFICATE-----\\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\\n-----END CERTIFICATE-----\"),\n\t\t\tLdapClientKey:  pulumi.String(\"-----BEGIN PRI...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Nacidp;\nimport com.pulumi.junipermist.org.NacidpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // OAuth with Azure Example\n        var idpAzure = new Nacidp(\"idpAzure\", NacidpArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"idp_azure\")\n            .idpType(\"oauth\")\n            .oauthCcClientId(\"client_id\")\n            .oauthCcClientSecret(\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\")\n            .oauthRopcClientId(\"ropc_client_id\")\n            .oauthRopcClientSecret(\"ropc_client_secret\")\n            .oauthTenantId(\"tenant_id\")\n            .oauthType(\"azure\")\n            .build());\n\n        // Custom LDAP Example\n        var idpLdap = new Nacidp(\"idpLdap\", NacidpArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"idp_ldap\")\n            .idpType(\"ldap\")\n            .ldapType(\"custom\")\n            .groupFilter(\"memberOf\")\n            .memberFilter(\"memberOf\")\n            .ldapUserFilter(\"(mail=%s)\")\n            .ldapServerHosts(            \n                \"ldap.mycorp.com\",\n                \"1.2.3.4\")\n            .ldapBaseDn(\"DC=abc,DC=com\")\n            .ldapBindDn(\"CN=admin,CN=users,DC=abc,DC=com\")\n            .ldapBindPassword(\"secret!password\")\n            .ldapCacerts(            \n                \"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----                \"\"\",\n                \"\"\"\n-----BEGIN CERTIFICATE-----\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----                \"\"\")\n            .ldapClientCert(\"\"\"\n-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----            \"\"\")\n            .ldapClientKey(\"-----BEGIN PRI...\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # OAuth with Azure Example\n  idpAzure:\n    type: junipermist:org:Nacidp\n    name: idp_azure\n    properties:\n      orgId: ${terraformTest.id}\n      name: idp_azure\n      idpType: oauth\n      oauthCcClientId: client_id\n      oauthCcClientSecret: '-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----'\n      oauthRopcClientId: ropc_client_id\n      oauthRopcClientSecret: ropc_client_secret\n      oauthTenantId: tenant_id\n      oauthType: azure\n  # Custom LDAP Example\n  idpLdap:\n    type: junipermist:org:Nacidp\n    name: idp_ldap\n    properties:\n      orgId: ${terraformTest.id}\n      name: idp_ldap\n      idpType: ldap\n      ldapType: custom\n      groupFilter: memberOf\n      memberFilter: memberOf\n      ldapUserFilter: (mail=%s)\n      ldapServerHosts:\n        - ldap.mycorp.com\n        - 1.2.3.4\n      ldapBaseDn: DC=abc,DC=com\n      ldapBindDn: CN=admin,CN=users,DC=abc,DC=com\n      ldapBindPassword: secret!password\n      ldapCacerts:\n        - |-\n          -----BEGIN CERTIFICATE-----\n          MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n          -----END CERTIFICATE-----\n        - |-\n          -----BEGIN CERTIFICATE-----\n          BhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\n      ldapClientCert: |-\n        -----BEGIN CERTIFICATE-----\n        MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n        -----END CERTIFICATE-----\n      ldapClientKey: '-----BEGIN PRI...'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_nacidp` with:\n\nOrg PSK can be imported by specifying the org_id and the nacidp_id\n\n```sh\n$ pulumi import junipermist:org/nacidp:Nacidp idp_azure 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "groupFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group\n"
                },
                "idpType": {
                    "type": "string",
                    "description": "enum: `ldap`, `mxedge_proxy`, `oauth`\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP\n"
                },
                "ldapBindPassword": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP\n"
                },
                "ldapCacerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate\n"
                },
                "ldapClientCert": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`, LDAPS Client certificate\n"
                },
                "ldapClientKey": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`, Key for the `ldap_client_cert`\n"
                },
                "ldapGroupAttr": {
                    "type": "string",
                    "description": "if `ldap_type`==`custom`\n"
                },
                "ldapGroupDn": {
                    "type": "string",
                    "description": "if `ldap_type`==`custom`\n"
                },
                "ldapResolveGroups": {
                    "type": "boolean",
                    "description": "if `idp_type`==`ldap`, whether to recursively resolve LDAP groups\n"
                },
                "ldapServerHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames\n"
                },
                "ldapType": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`\n"
                },
                "ldapUserFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user\n"
                },
                "memberFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member\n"
                },
                "name": {
                    "type": "string",
                    "description": "name\n"
                },
                "oauthCcClientId": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, Client Credentials\n"
                },
                "oauthCcClientSecret": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form \"-----BEGIN RSA PRIVATE KEY--....\"\n"
                },
                "oauthDiscoveryUrl": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`\n"
                },
                "oauthPingIdentityRegion": {
                    "type": "string",
                    "description": "enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)\n"
                },
                "oauthRopcClientId": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials\n"
                },
                "oauthRopcClientSecret": {
                    "type": "string",
                    "description": "if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty\n"
                },
                "oauthTenantId": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, oauth*tenant*id\n"
                },
                "oauthType": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "scimEnabled": {
                    "type": "boolean",
                    "description": "if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP\n"
                },
                "scimSecretToken": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scim_enabled`==`true`, empty string when `scim_enabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP\n"
                }
            },
            "required": [
                "idpType",
                "ldapResolveGroups",
                "name",
                "oauthPingIdentityRegion",
                "oauthType",
                "orgId",
                "scimEnabled",
                "scimSecretToken"
            ],
            "inputProperties": {
                "groupFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group\n"
                },
                "idpType": {
                    "type": "string",
                    "description": "enum: `ldap`, `mxedge_proxy`, `oauth`\n"
                },
                "ldapBaseDn": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree\n"
                },
                "ldapBindDn": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP\n"
                },
                "ldapBindPassword": {
                    "type": "string",
                    "description": "Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP\n"
                },
                "ldapCacerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate\n"
                },
                "ldapClientCert": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`, LDAPS Client certificate\n"
                },
                "ldapClientKey": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`, Key for the `ldap_client_cert`\n"
                },
                "ldapGroupAttr": {
                    "type": "string",
                    "description": "if `ldap_type`==`custom`\n"
                },
                "ldapGroupDn": {
                    "type": "string",
                    "description": "if `ldap_type`==`custom`\n"
                },
                "ldapResolveGroups": {
                    "type": "boolean",
                    "description": "if `idp_type`==`ldap`, whether to recursively resolve LDAP groups\n"
                },
                "ldapServerHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames\n"
                },
                "ldapType": {
                    "type": "string",
                    "description": "if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`\n"
                },
                "ldapUserFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user\n"
                },
                "memberFilter": {
                    "type": "string",
                    "description": "Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member\n"
                },
                "name": {
                    "type": "string",
                    "description": "name\n"
                },
                "oauthCcClientId": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, Client Credentials\n"
                },
                "oauthCcClientSecret": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form \"-----BEGIN RSA PRIVATE KEY--....\"\n"
                },
                "oauthDiscoveryUrl": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`\n"
                },
                "oauthPingIdentityRegion": {
                    "type": "string",
                    "description": "enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)\n"
                },
                "oauthRopcClientId": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials\n"
                },
                "oauthRopcClientSecret": {
                    "type": "string",
                    "description": "if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty\n"
                },
                "oauthTenantId": {
                    "type": "string",
                    "description": "Required if `idp_type`==`oauth`, oauth*tenant*id\n"
                },
                "oauthType": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "scimEnabled": {
                    "type": "boolean",
                    "description": "if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP\n"
                },
                "scimSecretToken": {
                    "type": "string",
                    "description": "if `idp_type`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scim_enabled`==`true`, empty string when `scim_enabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP\n"
                }
            },
            "requiredInputs": [
                "idpType",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nacidp resources.\n",
                "properties": {
                    "groupFilter": {
                        "type": "string",
                        "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group\n"
                    },
                    "idpType": {
                        "type": "string",
                        "description": "enum: `ldap`, `mxedge_proxy`, `oauth`\n"
                    },
                    "ldapBaseDn": {
                        "type": "string",
                        "description": "Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree\n"
                    },
                    "ldapBindDn": {
                        "type": "string",
                        "description": "Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP\n"
                    },
                    "ldapBindPassword": {
                        "type": "string",
                        "description": "Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP\n"
                    },
                    "ldapCacerts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate\n"
                    },
                    "ldapClientCert": {
                        "type": "string",
                        "description": "if `idp_type`==`ldap`, LDAPS Client certificate\n"
                    },
                    "ldapClientKey": {
                        "type": "string",
                        "description": "if `idp_type`==`ldap`, Key for the `ldap_client_cert`\n"
                    },
                    "ldapGroupAttr": {
                        "type": "string",
                        "description": "if `ldap_type`==`custom`\n"
                    },
                    "ldapGroupDn": {
                        "type": "string",
                        "description": "if `ldap_type`==`custom`\n"
                    },
                    "ldapResolveGroups": {
                        "type": "boolean",
                        "description": "if `idp_type`==`ldap`, whether to recursively resolve LDAP groups\n"
                    },
                    "ldapServerHosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames\n"
                    },
                    "ldapType": {
                        "type": "string",
                        "description": "if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`\n"
                    },
                    "ldapUserFilter": {
                        "type": "string",
                        "description": "Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user\n"
                    },
                    "memberFilter": {
                        "type": "string",
                        "description": "Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name\n"
                    },
                    "oauthCcClientId": {
                        "type": "string",
                        "description": "Required if `idp_type`==`oauth`, Client Credentials\n"
                    },
                    "oauthCcClientSecret": {
                        "type": "string",
                        "description": "Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form \"-----BEGIN RSA PRIVATE KEY--....\"\n"
                    },
                    "oauthDiscoveryUrl": {
                        "type": "string",
                        "description": "if `idp_type`==`oauth`\n"
                    },
                    "oauthPingIdentityRegion": {
                        "type": "string",
                        "description": "enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)\n"
                    },
                    "oauthRopcClientId": {
                        "type": "string",
                        "description": "if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials\n"
                    },
                    "oauthRopcClientSecret": {
                        "type": "string",
                        "description": "if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty\n"
                    },
                    "oauthTenantId": {
                        "type": "string",
                        "description": "Required if `idp_type`==`oauth`, oauth*tenant*id\n"
                    },
                    "oauthType": {
                        "type": "string",
                        "description": "if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "scimEnabled": {
                        "type": "boolean",
                        "description": "if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP\n"
                    },
                    "scimSecretToken": {
                        "type": "string",
                        "description": "if `idp_type`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scim_enabled`==`true`, empty string when `scim_enabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/nacrule:Nacrule": {
            "description": "This resource manages the NAC Rules (Auth Policies).\nA NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Nacrule;\nimport com.pulumi.junipermist.org.NacruleArgs;\nimport com.pulumi.junipermist.org.inputs.NacruleMatchingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nacruleOne = new Nacrule(\"nacruleOne\", NacruleArgs.builder()\n            .name(\"rule_one\")\n            .action(\"allow\")\n            .orgId(terraformTest.id())\n            .matching(NacruleMatchingArgs.builder()\n                .port_types(\"wired\")\n                .auth_type(\"mab\")\n                .nactags(\"c055c60b-351a-4311-8ee5-9b7be5e5f902\")\n                .build())\n            .applyTags(            \n                \"61c11327-5e1b-40ed-bbbf-5e95642c4f59\",\n                \"3f292454-ac5f-4a36-9aff-d0518d90b47a\")\n            .enabled(true)\n            .order(9)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nacruleOne:\n    type: junipermist:org:Nacrule\n    name: nacrule_one\n    properties:\n      name: rule_one\n      action: allow\n      orgId: ${terraformTest.id}\n      matching:\n        port_types:\n          - wired\n        auth_type: mab\n        nactags:\n          - c055c60b-351a-4311-8ee5-9b7be5e5f902\n      applyTags:\n        - 61c11327-5e1b-40ed-bbbf-5e95642c4f59\n        - 3f292454-ac5f-4a36-9aff-d0518d90b47a\n      enabled: true\n      order: 9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_nacrule` with:\n\nNAC Rule can be imported by specifying the org_id and the nacrule_id\n\n```sh\n$ pulumi import junipermist:org/nacrule:Nacrule nacrule_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "all optional, this goes into Access-Accept\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enabled or not\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/NacruleMatching:NacruleMatching"
                },
                "name": {
                    "type": "string"
                },
                "notMatching": {
                    "$ref": "#/types/junipermist:org/NacruleNotMatching:NacruleNotMatching"
                },
                "order": {
                    "type": "integer",
                    "description": "the order of the rule, lower value implies higher priority\n"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "action",
                "applyTags",
                "enabled",
                "name",
                "order",
                "orgId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "all optional, this goes into Access-Accept\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enabled or not\n"
                },
                "matching": {
                    "$ref": "#/types/junipermist:org/NacruleMatching:NacruleMatching"
                },
                "name": {
                    "type": "string"
                },
                "notMatching": {
                    "$ref": "#/types/junipermist:org/NacruleNotMatching:NacruleNotMatching"
                },
                "order": {
                    "type": "integer",
                    "description": "the order of the rule, lower value implies higher priority\n"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "action",
                "order",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nacrule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "enum: `allow`, `block`\n"
                    },
                    "applyTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "all optional, this goes into Access-Accept\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "enabled or not\n"
                    },
                    "matching": {
                        "$ref": "#/types/junipermist:org/NacruleMatching:NacruleMatching"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notMatching": {
                        "$ref": "#/types/junipermist:org/NacruleNotMatching:NacruleNotMatching"
                    },
                    "order": {
                        "type": "integer",
                        "description": "the order of the rule, lower value implies higher priority\n"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/nactag:Nactag": {
            "description": "This resource manages NAC Tags (Auth Policy Labels).\nThe NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst tagOne = new junipermist.org.Nactag(\"tag_one\", {\n    name: \"tag_one\",\n    type: \"match\",\n    match: \"client_mac\",\n    orgId: terraformTest.id,\n    values: [\"5c5b35*\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\ntag_one = junipermist.org.Nactag(\"tag_one\",\n    name=\"tag_one\",\n    type=\"match\",\n    match=\"client_mac\",\n    org_id=terraform_test[\"id\"],\n    values=[\"5c5b35*\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tagOne = new JuniperMist.Org.Nactag(\"tag_one\", new()\n    {\n        Name = \"tag_one\",\n        Type = \"match\",\n        Match = \"client_mac\",\n        OrgId = terraformTest.Id,\n        Values = new[]\n        {\n            \"5c5b35*\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewNactag(ctx, \"tag_one\", \u0026org.NactagArgs{\n\t\t\tName:  pulumi.String(\"tag_one\"),\n\t\t\tType:  pulumi.String(\"match\"),\n\t\t\tMatch: pulumi.String(\"client_mac\"),\n\t\t\tOrgId: pulumi.Any(terraformTest.Id),\n\t\t\tValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5c5b35*\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Nactag;\nimport com.pulumi.junipermist.org.NactagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tagOne = new Nactag(\"tagOne\", NactagArgs.builder()\n            .name(\"tag_one\")\n            .type(\"match\")\n            .match(\"client_mac\")\n            .orgId(terraformTest.id())\n            .values(\"5c5b35*\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tagOne:\n    type: junipermist:org:Nactag\n    name: tag_one\n    properties:\n      name: tag_one\n      type: match\n      match: client_mac\n      orgId: ${terraformTest.id}\n      values:\n        - 5c5b35*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_nactag` with:\n\nNAC Tag can be imported by specifying the org_id and the nactag_id\n\n```sh\n$ pulumi import junipermist:org/nactag:Nactag nactag_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "allowUsermacOverride": {
                    "type": "boolean",
                    "description": "can be set to true to allow the override by usermac result\n"
                },
                "egressVlanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`egress_vlan_names`, list of egress vlans to return\n"
                },
                "gbpTag": {
                    "type": "integer",
                    "description": "if `type`==`gbp_tag`\n"
                },
                "match": {
                    "type": "string",
                    "description": "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,\n`mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`\n"
                },
                "matchAll": {
                    "type": "boolean",
                    "description": "This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,\nmatch-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to\nset this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "radiusAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". It is\nthe responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note\nthat it is allowed to have more than one radius_attrs in the result of a given rule.\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "if `type`==`radius_group`\n"
                },
                "radiusVendorAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field\n\"radius_vendor_attrs\". It is the responsibility of the user to provide a syntactically correct string, otherwise it may\nnot work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.\n"
                },
                "sessionTimeout": {
                    "type": "integer",
                    "description": "if `type`==`session_timeout, in seconds\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,\n`vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`match`\n"
                },
                "vlan": {
                    "type": "string",
                    "description": "if `type`==`vlan`\n"
                }
            },
            "required": [
                "allowUsermacOverride",
                "matchAll",
                "name",
                "orgId",
                "type"
            ],
            "inputProperties": {
                "allowUsermacOverride": {
                    "type": "boolean",
                    "description": "can be set to true to allow the override by usermac result\n"
                },
                "egressVlanNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`egress_vlan_names`, list of egress vlans to return\n"
                },
                "gbpTag": {
                    "type": "integer",
                    "description": "if `type`==`gbp_tag`\n"
                },
                "match": {
                    "type": "string",
                    "description": "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,\n`mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`\n"
                },
                "matchAll": {
                    "type": "boolean",
                    "description": "This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,\nmatch-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to\nset this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "radiusAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". It is\nthe responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note\nthat it is allowed to have more than one radius_attrs in the result of a given rule.\n"
                },
                "radiusGroup": {
                    "type": "string",
                    "description": "if `type`==`radius_group`\n"
                },
                "radiusVendorAttrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field\n\"radius_vendor_attrs\". It is the responsibility of the user to provide a syntactically correct string, otherwise it may\nnot work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.\n"
                },
                "sessionTimeout": {
                    "type": "integer",
                    "description": "if `type`==`session_timeout, in seconds\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,\n`vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`match`\n"
                },
                "vlan": {
                    "type": "string",
                    "description": "if `type`==`vlan`\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nactag resources.\n",
                "properties": {
                    "allowUsermacOverride": {
                        "type": "boolean",
                        "description": "can be set to true to allow the override by usermac result\n"
                    },
                    "egressVlanNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`egress_vlan_names`, list of egress vlans to return\n"
                    },
                    "gbpTag": {
                        "type": "integer",
                        "description": "if `type`==`gbp_tag`\n"
                    },
                    "match": {
                        "type": "string",
                        "description": "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `client_mac`, `idp_role`,\n`mdm_status`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`\n"
                    },
                    "matchAll": {
                        "type": "boolean",
                        "description": "This field is applicable only when `type`==`match` * `false`: means it is sufficient to match any of the values (i.e.,\nmatch-any behavior) * `true`: means all values should be matched (i.e., match-all behavior) Currently it makes sense to\nset this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`'\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "radiusAttrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". It is\nthe responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected. Note\nthat it is allowed to have more than one radius_attrs in the result of a given rule.\n"
                    },
                    "radiusGroup": {
                        "type": "string",
                        "description": "if `type`==`radius_group`\n"
                    },
                    "radiusVendorAttrs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field\n\"radius_vendor_attrs\". It is the responsibility of the user to provide a syntactically correct string, otherwise it may\nnot work as expected. Note that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.\n"
                    },
                    "sessionTimeout": {
                        "type": "integer",
                        "description": "if `type`==`session_timeout, in seconds\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`,\n`vlan`\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`match`\n"
                    },
                    "vlan": {
                        "type": "string",
                        "description": "if `type`==`vlan`\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/network:Network": {
            "description": "This resource manages the WAN Assurance Networks.\nThe Networks are used in the `service_policies` from the Gateway configuration and Gateway templates\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst networkOne = new junipermist.org.Network(\"network_one\", {\n    orgId: terraformTest.id,\n    name: \"network_one\",\n    subnet: \"10.4.0.0/24\",\n    disallowMistServices: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nnetwork_one = junipermist.org.Network(\"network_one\",\n    org_id=terraform_test[\"id\"],\n    name=\"network_one\",\n    subnet=\"10.4.0.0/24\",\n    disallow_mist_services=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networkOne = new JuniperMist.Org.Network(\"network_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"network_one\",\n        Subnet = \"10.4.0.0/24\",\n        DisallowMistServices = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewNetwork(ctx, \"network_one\", \u0026org.NetworkArgs{\n\t\t\tOrgId:                pulumi.Any(terraformTest.Id),\n\t\t\tName:                 pulumi.String(\"network_one\"),\n\t\t\tSubnet:               pulumi.String(\"10.4.0.0/24\"),\n\t\t\tDisallowMistServices: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Network;\nimport com.pulumi.junipermist.org.NetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var networkOne = new Network(\"networkOne\", NetworkArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"network_one\")\n            .subnet(\"10.4.0.0/24\")\n            .disallowMistServices(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  networkOne:\n    type: junipermist:org:Network\n    name: network_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: network_one\n      subnet: 10.4.0.0/24\n      disallowMistServices: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_network` with:\n\nOrg Network can be imported by specifying the org_id and the network_id\n\n```sh\n$ pulumi import junipermist:org/network:Network network_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "disallowMistServices": {
                    "type": "boolean",
                    "description": "whether to disallow Mist Devices in the network\n"
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "internalAccess": {
                    "$ref": "#/types/junipermist:org/NetworkInternalAccess:NetworkInternalAccess"
                },
                "internetAccess": {
                    "$ref": "#/types/junipermist:org/NetworkInternetAccess:NetworkInternetAccess",
                    "description": "whether this network has direct internet access\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to allow clients in the network to talk to each other\n"
                },
                "multicast": {
                    "$ref": "#/types/junipermist:org/NetworkMulticast:NetworkMulticast",
                    "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "routedForNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                },
                "subnet": {
                    "type": "string"
                },
                "subnet6": {
                    "type": "string"
                },
                "tenants": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkTenants:NetworkTenants"
                    },
                    "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkVpnAccess:NetworkVpnAccess"
                    },
                    "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                }
            },
            "required": [
                "disallowMistServices",
                "name",
                "orgId",
                "subnet"
            ],
            "inputProperties": {
                "disallowMistServices": {
                    "type": "boolean",
                    "description": "whether to disallow Mist Devices in the network\n"
                },
                "gateway": {
                    "type": "string"
                },
                "gateway6": {
                    "type": "string"
                },
                "internalAccess": {
                    "$ref": "#/types/junipermist:org/NetworkInternalAccess:NetworkInternalAccess"
                },
                "internetAccess": {
                    "$ref": "#/types/junipermist:org/NetworkInternetAccess:NetworkInternetAccess",
                    "description": "whether this network has direct internet access\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to allow clients in the network to talk to each other\n"
                },
                "multicast": {
                    "$ref": "#/types/junipermist:org/NetworkMulticast:NetworkMulticast",
                    "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "routedForNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                },
                "subnet": {
                    "type": "string"
                },
                "subnet6": {
                    "type": "string"
                },
                "tenants": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkTenants:NetworkTenants"
                    },
                    "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vpnAccess": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworkVpnAccess:NetworkVpnAccess"
                    },
                    "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "disallowMistServices": {
                        "type": "boolean",
                        "description": "whether to disallow Mist Devices in the network\n"
                    },
                    "gateway": {
                        "type": "string"
                    },
                    "gateway6": {
                        "type": "string"
                    },
                    "internalAccess": {
                        "$ref": "#/types/junipermist:org/NetworkInternalAccess:NetworkInternalAccess"
                    },
                    "internetAccess": {
                        "$ref": "#/types/junipermist:org/NetworkInternetAccess:NetworkInternetAccess",
                        "description": "whether this network has direct internet access\n"
                    },
                    "isolation": {
                        "type": "boolean",
                        "description": "whether to allow clients in the network to talk to each other\n"
                    },
                    "multicast": {
                        "$ref": "#/types/junipermist:org/NetworkMulticast:NetworkMulticast",
                        "description": "whether to enable multicast support (only PIM-sparse mode is supported)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "routedForNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)\n"
                    },
                    "subnet": {
                        "type": "string"
                    },
                    "subnet6": {
                        "type": "string"
                    },
                    "tenants": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworkTenants:NetworkTenants"
                        },
                        "description": "Property key must be the user/tenant name (i.e. \"printer-1\") or a Variable (i.e. \"{{myvar}}\")\n"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vpnAccess": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworkVpnAccess:NetworkVpnAccess"
                        },
                        "description": "Property key is the VPN name. Whether this network can be accessed from vpn\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/networktemplate:Networktemplate": {
            "description": "This resource managed the Org Network Templates (Switch templates).\nA network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings. Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Networktemplate;\nimport com.pulumi.junipermist.org.NetworktemplateArgs;\nimport com.pulumi.junipermist.org.inputs.NetworktemplateRadiusConfigArgs;\nimport com.pulumi.junipermist.org.inputs.NetworktemplateSwitchMatchingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var networktemplateOne = new Networktemplate(\"networktemplateOne\", NetworktemplateArgs.builder()\n            .name(\"networktemplate_one\")\n            .orgId(terraformTest.id())\n            .dnsServers(            \n                \"8.8.8.8\",\n                \"1.1.1.1\")\n            .dnsSuffixes(\"mycorp.com\")\n            .ntpServers(\"pool.ntp.org\")\n            .additionalConfigCmds(            \n                \"set system hostnam test\",\n                \"set system services ssh root-login allow\")\n            .networks(Map.ofEntries(\n                Map.entry(\"network_one\", Map.of(\"vlanId\", 10)),\n                Map.entry(\"network_two\", Map.of(\"vlanId\", 11))\n            ))\n            .portUsages(Map.of(\"trunk\", Map.ofEntries(\n                Map.entry(\"allNetworks\", true),\n                Map.entry(\"enableQos\", true),\n                Map.entry(\"mode\", \"port_usage_one\"),\n                Map.entry(\"portNetwork\", \"network_one\")\n            )))\n            .radiusConfig(NetworktemplateRadiusConfigArgs.builder()\n                .acct_interim_interval(60)\n                .coa_enabled(true)\n                .network(\"network_one\")\n                .acct_servers(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .auth_servers(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .switchMatching(NetworktemplateSwitchMatchingArgs.builder()\n                .enable(true)\n                .rules(NetworktemplateSwitchMatchingRuleArgs.builder()\n                    .name(\"switch_rule_one\")\n                    .matchName(\"corp\")\n                    .matchNameOffset(3)\n                    .matchRole(\"core\")\n                    .portConfig(Map.of(\"ge-0/0/0-10\", Map.of(\"usage\", \"port_usage_one\")))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  networktemplateOne:\n    type: junipermist:org:Networktemplate\n    name: networktemplate_one\n    properties:\n      name: networktemplate_one\n      orgId: ${terraformTest.id}\n      dnsServers:\n        - 8.8.8.8\n        - 1.1.1.1\n      dnsSuffixes:\n        - mycorp.com\n      ntpServers:\n        - pool.ntp.org\n      additionalConfigCmds:\n        - set system hostnam test\n        - set system services ssh root-login allow\n      networks:\n        network_one:\n          vlanId: 10\n        network_two:\n          vlanId: 11\n      portUsages:\n        trunk:\n          allNetworks: true\n          enableQos: true\n          mode: port_usage_one\n          portNetwork: network_one\n      radiusConfig:\n        acct_interim_interval: 60\n        coa_enabled: true\n        network: network_one\n        acct_servers:\n          - host: 1.2.3.4\n            secret: secret\n        auth_servers:\n          - host: 1.2.3.4\n            secret: secret\n      switchMatching:\n        enable: true\n        rules:\n          - name: switch_rule_one\n            matchName: corp\n            matchNameOffset: 3\n            matchRole: core\n            portConfig:\n              ge-0/0/0-10:\n                usage: port_usage_one\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_networktemplate` with:\n\nOrg Network Template can be imported by specifying the org_id and the networktemplate_id\n\n```sh\n$ pulumi import junipermist:org/networktemplate:Networktemplate networktemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclTags:NetworktemplateAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:org/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/NetworktemplateMistNac:NetworktemplateMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateNetworks:NetworktemplateNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "orgId": {
                    "type": "string"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplatePortUsages:NetworktemplatePortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                },
                "switchMatching": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                    "description": "defines custom switch configuration based on different criterias\n"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "required": [
                "name",
                "orgId",
                "removeExistingConfigs"
            ],
            "inputProperties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateAclTags:NetworktemplateAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:org/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/NetworktemplateMistNac:NetworktemplateMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "name": {
                    "type": "string"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateNetworks:NetworktemplateNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                },
                "orgId": {
                    "type": "string"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplatePortUsages:NetworktemplatePortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                },
                "switchMatching": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                    "description": "defines custom switch configuration based on different criterias\n"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:org/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Networktemplate resources.\n",
                "properties": {
                    "aclPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                        }
                    },
                    "aclTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateAclTags:NetworktemplateAclTags"
                        },
                        "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                    },
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "dhcpSnooping": {
                        "$ref": "#/types/junipermist:org/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                        }
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:org/NetworktemplateMistNac:NetworktemplateMistNac",
                        "description": "enable mist_nac to use radsec\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networks": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateNetworks:NetworktemplateNetworks"
                        },
                        "description": "Property key is network name\n"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of NTP servers specific to this device. By default, those in Site Settings will be used\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "ospfAreas": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                        },
                        "description": "Junos OSPF areas\n"
                    },
                    "portMirroring": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                        },
                        "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                    },
                    "portUsages": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplatePortUsages:NetworktemplatePortUsages"
                        },
                        "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                    },
                    "radiusConfig": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                        "description": "Junos Radius config\n"
                    },
                    "remoteSyslog": {
                        "$ref": "#/types/junipermist:org/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                    },
                    "removeExistingConfigs": {
                        "type": "boolean",
                        "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                    },
                    "snmpConfig": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                    },
                    "switchMatching": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                        "description": "defines custom switch configuration based on different criterias\n"
                    },
                    "switchMgmt": {
                        "$ref": "#/types/junipermist:org/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                        "description": "Switch settings\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:org/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/psk:Psk": {
            "description": "This data source provides the list of Org PSKs.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst pskOne = new junipermist.org.Psk(\"psk_one\", {\n    orgId: terraformTest.id,\n    name: \"JNP-FR-PAR\",\n    passphrase: \"secretone\",\n    ssid: wlanOne.ssid,\n    usage: \"multi\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\npsk_one = junipermist.org.Psk(\"psk_one\",\n    org_id=terraform_test[\"id\"],\n    name=\"JNP-FR-PAR\",\n    passphrase=\"secretone\",\n    ssid=wlan_one[\"ssid\"],\n    usage=\"multi\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pskOne = new JuniperMist.Org.Psk(\"psk_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"JNP-FR-PAR\",\n        Passphrase = \"secretone\",\n        Ssid = wlanOne.Ssid,\n        Usage = \"multi\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewPsk(ctx, \"psk_one\", \u0026org.PskArgs{\n\t\t\tOrgId:      pulumi.Any(terraformTest.Id),\n\t\t\tName:       pulumi.String(\"JNP-FR-PAR\"),\n\t\t\tPassphrase: pulumi.String(\"secretone\"),\n\t\t\tSsid:       pulumi.Any(wlanOne.Ssid),\n\t\t\tUsage:      pulumi.String(\"multi\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Psk;\nimport com.pulumi.junipermist.org.PskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pskOne = new Psk(\"pskOne\", PskArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"JNP-FR-PAR\")\n            .passphrase(\"secretone\")\n            .ssid(wlanOne.ssid())\n            .usage(\"multi\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pskOne:\n    type: junipermist:org:Psk\n    name: psk_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: JNP-FR-PAR\n      passphrase: secretone\n      ssid: ${wlanOne.ssid}\n      usage: multi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_psk` with:\n\nOrg PSK can be imported by specifying the org_id and the psk_id\n\n```sh\n$ pulumi import junipermist:org/psk:Psk psk_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000\n"
                },
                "maxUsage": {
                    "type": "integer",
                    "description": "For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)\n"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n",
                    "secret": true
                },
                "orgId": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                    "secret": true
                },
                "role": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `macs`, `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "required": [
                "expireTime",
                "maxUsage",
                "name",
                "notifyExpiry",
                "orgId",
                "passphrase",
                "ssid",
                "usage"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "macs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000\n"
                },
                "maxUsage": {
                    "type": "integer",
                    "description": "For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)\n"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n",
                    "secret": true
                },
                "orgId": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                    "secret": true
                },
                "role": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `macs`, `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "orgId",
                "passphrase",
                "ssid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Psk resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "email to send psk expiring notifications to\n"
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                    },
                    "expiryNotificationTime": {
                        "type": "integer",
                        "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                    },
                    "macs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000\n"
                    },
                    "maxUsage": {
                        "type": "integer",
                        "description": "For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    },
                    "notifyExpiry": {
                        "type": "boolean",
                        "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                    },
                    "notifyOnCreateOrEdit": {
                        "type": "boolean",
                        "description": "If set to true, notification will be sent when psk is created or edited\n"
                    },
                    "oldPassphrase": {
                        "type": "string",
                        "description": "previous passphrase of the PSK if it has been rotated\n",
                        "secret": true
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                        "secret": true
                    },
                    "role": {
                        "type": "string"
                    },
                    "ssid": {
                        "type": "string",
                        "description": "SSID this PSK should be applicable to\n"
                    },
                    "usage": {
                        "type": "string",
                        "description": "enum: `macs`, `multi`, `single`\n"
                    },
                    "vlanId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/rftemplate:Rftemplate": {
            "description": "This manages the RF Templates.\nThe RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Rftemplate;\nimport com.pulumi.junipermist.org.RftemplateArgs;\nimport com.pulumi.junipermist.org.inputs.RftemplateBand5Args;\nimport com.pulumi.junipermist.org.inputs.RftemplateBand6Args;\nimport com.pulumi.junipermist.org.inputs.RftemplateBand24Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var rftempalteOne = new Rftemplate(\"rftempalteOne\", RftemplateArgs.builder()\n            .name(\"rftempalte_one\")\n            .orgId(terraformTest.id())\n            .band24Usage(\"auto\")\n            .band5(RftemplateBand5Args.builder()\n                .ant_gain(2)\n                .power(8)\n                .channels(                \n                    60,\n                    104,\n                    132)\n                .bandwidth(20)\n                .build())\n            .band6(RftemplateBand6Args.builder()\n                .ant_gain(2)\n                .power(8)\n                .build())\n            .band24(RftemplateBand24Args.builder()\n                .ant_gain(1)\n                .allow_rrm_disable(true)\n                .power_min(18)\n                .power_max(18)\n                .bandwidth(20)\n                .build())\n            .antGain5(2)\n            .antGain6(2)\n            .antGain24(1)\n            .countryCode(\"FR\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  rftempalteOne:\n    type: junipermist:org:Rftemplate\n    name: rftempalte_one\n    properties:\n      name: rftempalte_one\n      orgId: ${terraformTest.id}\n      band24Usage: auto\n      band5:\n        ant_gain: 2\n        power: 8\n        channels:\n          - 60\n          - 104\n          - 132\n        bandwidth: 20\n      band6:\n        ant_gain: 2\n        power: 8\n      band24:\n        ant_gain: 1\n        allow_rrm_disable: true\n        power_min: 18\n        power_max: 18\n        bandwidth: 20\n      antGain5: 2\n      antGain6: 2\n      antGain24: 1\n      countryCode: FR\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_rftemplate` with:\n\nOrg RF Template can be imported by specifying the org_id and the rftemplate_id\n\n```sh\n$ pulumi import junipermist:org/rftemplate:Rftemplate rftemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "antGain24": {
                    "type": "integer"
                },
                "antGain5": {
                    "type": "integer"
                },
                "antGain6": {
                    "type": "integer"
                },
                "band24": {
                    "$ref": "#/types/junipermist:org/RftemplateBand24:RftemplateBand24",
                    "description": "Radio Band AP settings\n"
                },
                "band24Usage": {
                    "type": "string",
                    "description": "enum: `24`, `5`, `6`, `auto`\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:org/RftemplateBand5:RftemplateBand5",
                    "description": "Radio Band AP settings\n"
                },
                "band5On24Radio": {
                    "$ref": "#/types/junipermist:org/RftemplateBand5On24Radio:RftemplateBand5On24Radio",
                    "description": "Radio Band AP settings\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:org/RftemplateBand6:RftemplateBand6",
                    "description": "Radio Band AP settings\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "optional, country code to use. If specified, this gets applied to all sites using the RF Template\n"
                },
                "modelSpecific": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/RftemplateModelSpecific:RftemplateModelSpecific"
                    },
                    "description": "overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. \"AP63\")\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RF template\n"
                },
                "orgId": {
                    "type": "string"
                },
                "scanningEnabled": {
                    "type": "boolean",
                    "description": "whether scanning radio is enabled\n"
                }
            },
            "required": [
                "antGain24",
                "antGain5",
                "antGain6",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "antGain24": {
                    "type": "integer"
                },
                "antGain5": {
                    "type": "integer"
                },
                "antGain6": {
                    "type": "integer"
                },
                "band24": {
                    "$ref": "#/types/junipermist:org/RftemplateBand24:RftemplateBand24",
                    "description": "Radio Band AP settings\n"
                },
                "band24Usage": {
                    "type": "string",
                    "description": "enum: `24`, `5`, `6`, `auto`\n"
                },
                "band5": {
                    "$ref": "#/types/junipermist:org/RftemplateBand5:RftemplateBand5",
                    "description": "Radio Band AP settings\n"
                },
                "band5On24Radio": {
                    "$ref": "#/types/junipermist:org/RftemplateBand5On24Radio:RftemplateBand5On24Radio",
                    "description": "Radio Band AP settings\n"
                },
                "band6": {
                    "$ref": "#/types/junipermist:org/RftemplateBand6:RftemplateBand6",
                    "description": "Radio Band AP settings\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "optional, country code to use. If specified, this gets applied to all sites using the RF Template\n"
                },
                "modelSpecific": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/RftemplateModelSpecific:RftemplateModelSpecific"
                    },
                    "description": "overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. \"AP63\")\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the RF template\n"
                },
                "orgId": {
                    "type": "string"
                },
                "scanningEnabled": {
                    "type": "boolean",
                    "description": "whether scanning radio is enabled\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rftemplate resources.\n",
                "properties": {
                    "antGain24": {
                        "type": "integer"
                    },
                    "antGain5": {
                        "type": "integer"
                    },
                    "antGain6": {
                        "type": "integer"
                    },
                    "band24": {
                        "$ref": "#/types/junipermist:org/RftemplateBand24:RftemplateBand24",
                        "description": "Radio Band AP settings\n"
                    },
                    "band24Usage": {
                        "type": "string",
                        "description": "enum: `24`, `5`, `6`, `auto`\n"
                    },
                    "band5": {
                        "$ref": "#/types/junipermist:org/RftemplateBand5:RftemplateBand5",
                        "description": "Radio Band AP settings\n"
                    },
                    "band5On24Radio": {
                        "$ref": "#/types/junipermist:org/RftemplateBand5On24Radio:RftemplateBand5On24Radio",
                        "description": "Radio Band AP settings\n"
                    },
                    "band6": {
                        "$ref": "#/types/junipermist:org/RftemplateBand6:RftemplateBand6",
                        "description": "Radio Band AP settings\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "optional, country code to use. If specified, this gets applied to all sites using the RF Template\n"
                    },
                    "modelSpecific": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/RftemplateModelSpecific:RftemplateModelSpecific"
                        },
                        "description": "overwrites for a specific model. If a band is specified, it will shadow the default. Property key is the model name (e.g. \"AP63\")\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the RF template\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "scanningEnabled": {
                        "type": "boolean",
                        "description": "whether scanning radio is enabled\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/service:Service": {
            "description": "This resource manages WAN Assurance Services (Applications).\nThe Services are used in the `service_policies` from the Gateway configuration and Gateway templates, or can be used in the Org Service Policies (`org_servicepolicy` resource).\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Service;\nimport com.pulumi.junipermist.org.ServiceArgs;\nimport com.pulumi.junipermist.org.inputs.ServiceSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceOne = new Service(\"serviceOne\", ServiceArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"service_one\")\n            .addresses(            \n                \"10.3.0.0/24\",\n                \"10.4.0.0/24\")\n            .type(\"custom\")\n            .specs(ServiceSpecArgs.builder()\n                .protocol(\"tcp\")\n                .port_range(\"443\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serviceOne:\n    type: junipermist:org:Service\n    name: service_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: service_one\n      addresses:\n        - 10.3.0.0/24\n        - 10.4.0.0/24\n      type: custom\n      specs:\n        - protocol: tcp\n          port_range: '443'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_service` with:\n\nOrg Service can be imported by specifying the org_id and the service_id\n\n```sh\n$ pulumi import junipermist:org/service:Service service_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)\n"
                },
                "appCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_categories\n"
                },
                "appSubcategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_subcategories\n"
                },
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`apps`, list of applications are available through: * /api/v1/const/applications *\n/api/v1/const/gateway_applications * /insight/top_app_by-bytes?wired=true\n"
                },
                "description": {
                    "type": "string"
                },
                "dscp": {
                    "type": "string"
                },
                "failoverPolicy": {
                    "type": "string",
                    "description": "enum: `non_revertable`, `none`, `revertable`\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`custom`, web filtering\n"
                },
                "maxJitter": {
                    "type": "string"
                },
                "maxLatency": {
                    "type": "string"
                },
                "maxLoss": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "sleEnabled": {
                    "type": "boolean",
                    "description": "whether to enable measure SLE\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ServiceSpec:ServiceSpec"
                    },
                    "description": "when `type`==`custom`, optional, if it doesn't exist, http and https is assumed\n"
                },
                "ssrRelaxedTcpStateEnforcement": {
                    "type": "boolean"
                },
                "trafficClass": {
                    "type": "string",
                    "description": "when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`\n"
                },
                "trafficType": {
                    "type": "string",
                    "description": "values from `/api/v1/consts/traffic_types`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `app_categories`, `apps`, `custom`, `urls`\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`urls`, no need for spec as URL can encode the ports being used\n"
                }
            },
            "required": [
                "addresses",
                "appCategories",
                "appSubcategories",
                "apps",
                "failoverPolicy",
                "hostnames",
                "name",
                "orgId",
                "sleEnabled",
                "ssrRelaxedTcpStateEnforcement",
                "trafficClass",
                "trafficType",
                "type",
                "urls"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)\n"
                },
                "appCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_categories\n"
                },
                "appSubcategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_subcategories\n"
                },
                "apps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`apps`, list of applications are available through: * /api/v1/const/applications *\n/api/v1/const/gateway_applications * /insight/top_app_by-bytes?wired=true\n"
                },
                "description": {
                    "type": "string"
                },
                "dscp": {
                    "type": "string"
                },
                "failoverPolicy": {
                    "type": "string",
                    "description": "enum: `non_revertable`, `none`, `revertable`\n"
                },
                "hostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `type`==`custom`, web filtering\n"
                },
                "maxJitter": {
                    "type": "string"
                },
                "maxLatency": {
                    "type": "string"
                },
                "maxLoss": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "sleEnabled": {
                    "type": "boolean",
                    "description": "whether to enable measure SLE\n"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ServiceSpec:ServiceSpec"
                    },
                    "description": "when `type`==`custom`, optional, if it doesn't exist, http and https is assumed\n"
                },
                "ssrRelaxedTcpStateEnforcement": {
                    "type": "boolean"
                },
                "trafficClass": {
                    "type": "string",
                    "description": "when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`\n"
                },
                "trafficType": {
                    "type": "string",
                    "description": "values from `/api/v1/consts/traffic_types`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `app_categories`, `apps`, `custom`, `urls`\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `type`==`urls`, no need for spec as URL can encode the ports being used\n"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)\n"
                    },
                    "appCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_categories\n"
                    },
                    "appSubcategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `type`==`app_categories`, list of application categories are available through /api/v1/const/app_subcategories\n"
                    },
                    "apps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `type`==`apps`, list of applications are available through: * /api/v1/const/applications *\n/api/v1/const/gateway_applications * /insight/top_app_by-bytes?wired=true\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dscp": {
                        "type": "string"
                    },
                    "failoverPolicy": {
                        "type": "string",
                        "description": "enum: `non_revertable`, `none`, `revertable`\n"
                    },
                    "hostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `type`==`custom`, web filtering\n"
                    },
                    "maxJitter": {
                        "type": "string"
                    },
                    "maxLatency": {
                        "type": "string"
                    },
                    "maxLoss": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "sleEnabled": {
                        "type": "boolean",
                        "description": "whether to enable measure SLE\n"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/ServiceSpec:ServiceSpec"
                        },
                        "description": "when `type`==`custom`, optional, if it doesn't exist, http and https is assumed\n"
                    },
                    "ssrRelaxedTcpStateEnforcement": {
                        "type": "boolean"
                    },
                    "trafficClass": {
                        "type": "string",
                        "description": "when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`\n"
                    },
                    "trafficType": {
                        "type": "string",
                        "description": "values from `/api/v1/consts/traffic_types`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `app_categories`, `apps`, `custom`, `urls`\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `type`==`urls`, no need for spec as URL can encode the ports being used\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/servicepolicy:Servicepolicy": {
            "description": "This resource manages WAN Assurance Service Policies (Application Policiess).\nThe Service Policies are used in the `servicepolicy_policies` from the Gateway configuration and Gateway templates.They can be used to manage common policies betweeen multiples configurations\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Servicepolicy;\nimport com.pulumi.junipermist.org.ServicepolicyArgs;\nimport com.pulumi.junipermist.org.inputs.ServicepolicyIdpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var servicepolicyOne = new Servicepolicy(\"servicepolicyOne\", ServicepolicyArgs.builder()\n            .orgId(terraformTest.id())\n            .tenants(\"guest\")\n            .services(\"guest-internet\")\n            .action(\"allow\")\n            .idp(ServicepolicyIdpArgs.builder()\n                .enabled(true)\n                .profile(\"standard\")\n                .alert_only(true)\n                .build())\n            .name(\"Guest-IDP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  servicepolicyOne:\n    type: junipermist:org:Servicepolicy\n    name: servicepolicy_one\n    properties:\n      orgId: ${terraformTest.id}\n      tenants:\n        - guest\n      services:\n        - guest-internet\n      action: allow\n      idp:\n        enabled: true\n        profile: standard\n        alert_only: true\n      name: Guest-IDP\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_servicepolicy` with:\n\nOrg Service Policy can be imported by specifying the org_id and the servicepolicy_id\n\n```sh\n$ pulumi import junipermist:org/servicepolicy:Servicepolicy servicepolicy_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:org/ServicepolicyAppqoe:ServicepolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ServicepolicyEwf:ServicepolicyEwf"
                    }
                },
                "idp": {
                    "$ref": "#/types/junipermist:org/ServicepolicyIdp:ServicepolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them\noptionally, you can customize by using `path_preference`\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "action",
                "localRouting",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "enum: `allow`, `deny`\n"
                },
                "appqoe": {
                    "$ref": "#/types/junipermist:org/ServicepolicyAppqoe:ServicepolicyAppqoe",
                    "description": "For SRX Only\n"
                },
                "ewfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/ServicepolicyEwf:ServicepolicyEwf"
                    }
                },
                "idp": {
                    "$ref": "#/types/junipermist:org/ServicepolicyIdp:ServicepolicyIdp"
                },
                "localRouting": {
                    "type": "boolean",
                    "description": "access within the same VRF\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "by default, we derive all paths available and use them\noptionally, you can customize by using `path_preference`\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Servicepolicy resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "enum: `allow`, `deny`\n"
                    },
                    "appqoe": {
                        "$ref": "#/types/junipermist:org/ServicepolicyAppqoe:ServicepolicyAppqoe",
                        "description": "For SRX Only\n"
                    },
                    "ewfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/ServicepolicyEwf:ServicepolicyEwf"
                        }
                    },
                    "idp": {
                        "$ref": "#/types/junipermist:org/ServicepolicyIdp:ServicepolicyIdp"
                    },
                    "localRouting": {
                        "type": "boolean",
                        "description": "access within the same VRF\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "pathPreference": {
                        "type": "string",
                        "description": "by default, we derive all paths available and use them\noptionally, you can customize by using `path_preference`\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/setting:Setting": {
            "description": "This resource manages the Org Settings.\nThe Org Settings can be used to customize the Org configuration\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  terraformTest:\n    type: junipermist:org:Setting\n    name: terraform_test\n    properties:\n      orgId: ${terraformTestMistOrg.id}\n      apUpdownThreshold: 10\n      cradlepoint:\n        cp_api_id: cp_api_id_test\n        cp_api_key: secret\n        ecm_api_id: ecm_api_id_test\n        ecm_api_key: secret\n      deviceUpdownThreshold: 10\n      disablePcap: false\n      disableRemoteShell: true\n      gatewayUpdownThreshold: 10\n      mxedgeMgmt:\n        mist_password: mist_secret_passowrd\n        root_password: root_secret_password\n        oob_ip_type: dhcp\n        oob_ip_type6: disabled\n      passwordPolicy:\n        enabled: true\n        freshness: 180\n        min_length: 12\n        requires_special_char: true\n        requires_two_factor_auth: false\n      security:\n        disable_local_ssh: true\n      switchUpdownThreshold: 10\n      syntheticTest:\n        disabled: false\n        vlans:\n          - vlanIds:\n              - '10'\n              - '30'\n            customTestUrls:\n              - http://www.abc.com/\n              - https://10.3.5.1:8080/about\n          - vlanIds:\n              - '20'\n            disabled: true\n      uiIdleTimeout: 120\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_setting` with:\n\nOrg Setting can be imported by specifying the org_id\n\n```sh\n$ pulumi import junipermist:org/setting:Setting setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a\n```\n\n",
            "properties": {
                "apUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                },
                "apiPolicy": {
                    "$ref": "#/types/junipermist:org/SettingApiPolicy:SettingApiPolicy"
                },
                "cacerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of PEM-encoded ca certs\n"
                },
                "celona": {
                    "$ref": "#/types/junipermist:org/SettingCelona:SettingCelona"
                },
                "cloudshark": {
                    "$ref": "#/types/junipermist:org/SettingCloudshark:SettingCloudshark"
                },
                "cradlepoint": {
                    "$ref": "#/types/junipermist:org/SettingCradlepoint:SettingCradlepoint"
                },
                "deviceCert": {
                    "$ref": "#/types/junipermist:org/SettingDeviceCert:SettingDeviceCert",
                    "description": "common device cert, optional\n"
                },
                "deviceUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send\nAP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger\nimmediate)\n"
                },
                "disablePcap": {
                    "type": "boolean",
                    "description": "whether to disallow Mist to analyze pcap files (this is required for marvis pcap)\n"
                },
                "disableRemoteShell": {
                    "type": "boolean",
                    "description": "whether to disable remote shell access for an entire org\n"
                },
                "gatewayUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "installer": {
                    "$ref": "#/types/junipermist:org/SettingInstaller:SettingInstaller"
                },
                "jcloud": {
                    "$ref": "#/types/junipermist:org/SettingJcloud:SettingJcloud"
                },
                "jcloudRa": {
                    "$ref": "#/types/junipermist:org/SettingJcloudRa:SettingJcloudRa",
                    "description": "JCloud Routing Assurance connexion\n"
                },
                "juniper": {
                    "$ref": "#/types/junipermist:org/SettingJuniper:SettingJuniper"
                },
                "mgmt": {
                    "$ref": "#/types/junipermist:org/SettingMgmt:SettingMgmt",
                    "description": "management-related properties\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/SettingMistNac:SettingMistNac"
                },
                "mxedgeFipsEnabled": {
                    "type": "boolean"
                },
                "mxedgeMgmt": {
                    "$ref": "#/types/junipermist:org/SettingMxedgeMgmt:SettingMxedgeMgmt"
                },
                "opticPortConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/SettingOpticPortConfig:SettingOpticPortConfig"
                    },
                    "description": "Property key is the interface name or range (e.g. `et-0/0/47`, `et-0/0/48-49`)\n"
                },
                "orgId": {
                    "type": "string"
                },
                "passwordPolicy": {
                    "$ref": "#/types/junipermist:org/SettingPasswordPolicy:SettingPasswordPolicy",
                    "description": "password policy\n"
                },
                "pcap": {
                    "$ref": "#/types/junipermist:org/SettingPcap:SettingPcap"
                },
                "security": {
                    "$ref": "#/types/junipermist:org/SettingSecurity:SettingSecurity"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:org/SettingSwitchMgmt:SettingSwitchMgmt"
                },
                "switchUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "syntheticTest": {
                    "$ref": "#/types/junipermist:org/SettingSyntheticTest:SettingSyntheticTest"
                },
                "uiIdleTimeout": {
                    "type": "integer",
                    "description": "automatically logout the user when UI session is inactive. `0` means disabled\n"
                },
                "vpnOptions": {
                    "$ref": "#/types/junipermist:org/SettingVpnOptions:SettingVpnOptions"
                },
                "wanPma": {
                    "$ref": "#/types/junipermist:org/SettingWanPma:SettingWanPma"
                },
                "wiredPma": {
                    "$ref": "#/types/junipermist:org/SettingWiredPma:SettingWiredPma"
                },
                "wirelessPma": {
                    "$ref": "#/types/junipermist:org/SettingWirelessPma:SettingWirelessPma"
                }
            },
            "required": [
                "apUpdownThreshold",
                "cacerts",
                "cradlepoint",
                "deviceUpdownThreshold",
                "disablePcap",
                "disableRemoteShell",
                "gatewayUpdownThreshold",
                "juniper",
                "mxedgeFipsEnabled",
                "orgId",
                "switchUpdownThreshold",
                "uiIdleTimeout"
            ],
            "inputProperties": {
                "apUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                },
                "apiPolicy": {
                    "$ref": "#/types/junipermist:org/SettingApiPolicy:SettingApiPolicy"
                },
                "cacerts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of PEM-encoded ca certs\n"
                },
                "celona": {
                    "$ref": "#/types/junipermist:org/SettingCelona:SettingCelona"
                },
                "cloudshark": {
                    "$ref": "#/types/junipermist:org/SettingCloudshark:SettingCloudshark"
                },
                "deviceCert": {
                    "$ref": "#/types/junipermist:org/SettingDeviceCert:SettingDeviceCert",
                    "description": "common device cert, optional\n"
                },
                "deviceUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send\nAP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger\nimmediate)\n"
                },
                "disablePcap": {
                    "type": "boolean",
                    "description": "whether to disallow Mist to analyze pcap files (this is required for marvis pcap)\n"
                },
                "disableRemoteShell": {
                    "type": "boolean",
                    "description": "whether to disable remote shell access for an entire org\n"
                },
                "gatewayUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "installer": {
                    "$ref": "#/types/junipermist:org/SettingInstaller:SettingInstaller"
                },
                "jcloud": {
                    "$ref": "#/types/junipermist:org/SettingJcloud:SettingJcloud"
                },
                "jcloudRa": {
                    "$ref": "#/types/junipermist:org/SettingJcloudRa:SettingJcloudRa",
                    "description": "JCloud Routing Assurance connexion\n"
                },
                "mgmt": {
                    "$ref": "#/types/junipermist:org/SettingMgmt:SettingMgmt",
                    "description": "management-related properties\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/SettingMistNac:SettingMistNac"
                },
                "mxedgeFipsEnabled": {
                    "type": "boolean"
                },
                "mxedgeMgmt": {
                    "$ref": "#/types/junipermist:org/SettingMxedgeMgmt:SettingMxedgeMgmt"
                },
                "opticPortConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/SettingOpticPortConfig:SettingOpticPortConfig"
                    },
                    "description": "Property key is the interface name or range (e.g. `et-0/0/47`, `et-0/0/48-49`)\n"
                },
                "orgId": {
                    "type": "string"
                },
                "passwordPolicy": {
                    "$ref": "#/types/junipermist:org/SettingPasswordPolicy:SettingPasswordPolicy",
                    "description": "password policy\n"
                },
                "pcap": {
                    "$ref": "#/types/junipermist:org/SettingPcap:SettingPcap"
                },
                "security": {
                    "$ref": "#/types/junipermist:org/SettingSecurity:SettingSecurity"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:org/SettingSwitchMgmt:SettingSwitchMgmt"
                },
                "switchUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "syntheticTest": {
                    "$ref": "#/types/junipermist:org/SettingSyntheticTest:SettingSyntheticTest"
                },
                "uiIdleTimeout": {
                    "type": "integer",
                    "description": "automatically logout the user when UI session is inactive. `0` means disabled\n"
                },
                "vpnOptions": {
                    "$ref": "#/types/junipermist:org/SettingVpnOptions:SettingVpnOptions"
                },
                "wanPma": {
                    "$ref": "#/types/junipermist:org/SettingWanPma:SettingWanPma"
                },
                "wiredPma": {
                    "$ref": "#/types/junipermist:org/SettingWiredPma:SettingWiredPma"
                },
                "wirelessPma": {
                    "$ref": "#/types/junipermist:org/SettingWirelessPma:SettingWirelessPma"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "apUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "apiPolicy": {
                        "$ref": "#/types/junipermist:org/SettingApiPolicy:SettingApiPolicy"
                    },
                    "cacerts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of PEM-encoded ca certs\n"
                    },
                    "celona": {
                        "$ref": "#/types/junipermist:org/SettingCelona:SettingCelona"
                    },
                    "cloudshark": {
                        "$ref": "#/types/junipermist:org/SettingCloudshark:SettingCloudshark"
                    },
                    "cradlepoint": {
                        "$ref": "#/types/junipermist:org/SettingCradlepoint:SettingCradlepoint"
                    },
                    "deviceCert": {
                        "$ref": "#/types/junipermist:org/SettingDeviceCert:SettingDeviceCert",
                        "description": "common device cert, optional\n"
                    },
                    "deviceUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send\nAP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger\nimmediate)\n"
                    },
                    "disablePcap": {
                        "type": "boolean",
                        "description": "whether to disallow Mist to analyze pcap files (this is required for marvis pcap)\n"
                    },
                    "disableRemoteShell": {
                        "type": "boolean",
                        "description": "whether to disable remote shell access for an entire org\n"
                    },
                    "gatewayUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "installer": {
                        "$ref": "#/types/junipermist:org/SettingInstaller:SettingInstaller"
                    },
                    "jcloud": {
                        "$ref": "#/types/junipermist:org/SettingJcloud:SettingJcloud"
                    },
                    "jcloudRa": {
                        "$ref": "#/types/junipermist:org/SettingJcloudRa:SettingJcloudRa",
                        "description": "JCloud Routing Assurance connexion\n"
                    },
                    "juniper": {
                        "$ref": "#/types/junipermist:org/SettingJuniper:SettingJuniper"
                    },
                    "mgmt": {
                        "$ref": "#/types/junipermist:org/SettingMgmt:SettingMgmt",
                        "description": "management-related properties\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:org/SettingMistNac:SettingMistNac"
                    },
                    "mxedgeFipsEnabled": {
                        "type": "boolean"
                    },
                    "mxedgeMgmt": {
                        "$ref": "#/types/junipermist:org/SettingMxedgeMgmt:SettingMxedgeMgmt"
                    },
                    "opticPortConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/SettingOpticPortConfig:SettingOpticPortConfig"
                        },
                        "description": "Property key is the interface name or range (e.g. `et-0/0/47`, `et-0/0/48-49`)\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "passwordPolicy": {
                        "$ref": "#/types/junipermist:org/SettingPasswordPolicy:SettingPasswordPolicy",
                        "description": "password policy\n"
                    },
                    "pcap": {
                        "$ref": "#/types/junipermist:org/SettingPcap:SettingPcap"
                    },
                    "security": {
                        "$ref": "#/types/junipermist:org/SettingSecurity:SettingSecurity"
                    },
                    "switchMgmt": {
                        "$ref": "#/types/junipermist:org/SettingSwitchMgmt:SettingSwitchMgmt"
                    },
                    "switchUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "syntheticTest": {
                        "$ref": "#/types/junipermist:org/SettingSyntheticTest:SettingSyntheticTest"
                    },
                    "uiIdleTimeout": {
                        "type": "integer",
                        "description": "automatically logout the user when UI session is inactive. `0` means disabled\n"
                    },
                    "vpnOptions": {
                        "$ref": "#/types/junipermist:org/SettingVpnOptions:SettingVpnOptions"
                    },
                    "wanPma": {
                        "$ref": "#/types/junipermist:org/SettingWanPma:SettingWanPma"
                    },
                    "wiredPma": {
                        "$ref": "#/types/junipermist:org/SettingWiredPma:SettingWiredPma"
                    },
                    "wirelessPma": {
                        "$ref": "#/types/junipermist:org/SettingWirelessPma:SettingWirelessPma"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/sitegroup:Sitegroup": {
            "description": "This resource managed the Org Site Groups (sitegroups).\nA site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices. Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst sitegroupOne = new junipermist.org.Sitegroup(\"sitegroup_one\", {\n    orgId: terraformTest.id,\n    name: \"sitegroup_one\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nsitegroup_one = junipermist.org.Sitegroup(\"sitegroup_one\",\n    org_id=terraform_test[\"id\"],\n    name=\"sitegroup_one\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sitegroupOne = new JuniperMist.Org.Sitegroup(\"sitegroup_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"sitegroup_one\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewSitegroup(ctx, \"sitegroup_one\", \u0026org.SitegroupArgs{\n\t\t\tOrgId: pulumi.Any(terraformTest.Id),\n\t\t\tName:  pulumi.String(\"sitegroup_one\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Sitegroup;\nimport com.pulumi.junipermist.org.SitegroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sitegroupOne = new Sitegroup(\"sitegroupOne\", SitegroupArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"sitegroup_one\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sitegroupOne:\n    type: junipermist:org:Sitegroup\n    name: sitegroup_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: sitegroup_one\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_sitegroup` with:\n\nOrg Site Group can be imported by specifying the org_id and the sitegroup_id\n\n```sh\n$ pulumi import junipermist:org/sitegroup:Sitegroup sitegroup_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "orgId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sitegroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/sso:Sso": {
            "description": "This resource manages Org API Tokens.\nOrg API token is a unique identifier used by an application to authenticate and access a service's API. These tokens are used to authenticate requests made to the API server and ensure secure access to the API. They are not bound to any specific user and provide access to the organization as a whole. \nOrganization tokens support different privileges and can only be used for the specific organization they are generated for.\nRate limiting is done on an individual token basis, so if one token reaches its rate limit, it does not impact other tokens.\n\nThe SSO Metadata can be retrieved with the `junipermist.org.getSsoMetadata` data source.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst ssoAdminOne = new junipermist.org.Sso(\"sso_admin_one\", {\n    orgId: terraformTest.id,\n    name: \"sso_admin_one\",\n    customLogoutUrl: \"https://idp.com/logout\",\n    idpCert: \"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n    idpSignAlgo: \"sha512\",\n    idpSsoUrl: \"https://idp.com/login\",\n    issuer: \"my_idp_issuer\",\n    nameidFormat: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nsso_admin_one = junipermist.org.Sso(\"sso_admin_one\",\n    org_id=terraform_test[\"id\"],\n    name=\"sso_admin_one\",\n    custom_logout_url=\"https://idp.com/logout\",\n    idp_cert=\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n    idp_sign_algo=\"sha512\",\n    idp_sso_url=\"https://idp.com/login\",\n    issuer=\"my_idp_issuer\",\n    nameid_format=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ssoAdminOne = new JuniperMist.Org.Sso(\"sso_admin_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"sso_admin_one\",\n        CustomLogoutUrl = \"https://idp.com/logout\",\n        IdpCert = \"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\",\n        IdpSignAlgo = \"sha512\",\n        IdpSsoUrl = \"https://idp.com/login\",\n        Issuer = \"my_idp_issuer\",\n        NameidFormat = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewSso(ctx, \"sso_admin_one\", \u0026org.SsoArgs{\n\t\t\tOrgId:           pulumi.Any(terraformTest.Id),\n\t\t\tName:            pulumi.String(\"sso_admin_one\"),\n\t\t\tCustomLogoutUrl: pulumi.String(\"https://idp.com/logout\"),\n\t\t\tIdpCert:         pulumi.String(\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\"),\n\t\t\tIdpSignAlgo:     pulumi.String(\"sha512\"),\n\t\t\tIdpSsoUrl:       pulumi.String(\"https://idp.com/login\"),\n\t\t\tIssuer:          pulumi.String(\"my_idp_issuer\"),\n\t\t\tNameidFormat:    pulumi.String(\"email\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Sso;\nimport com.pulumi.junipermist.org.SsoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ssoAdminOne = new Sso(\"ssoAdminOne\", SsoArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"sso_admin_one\")\n            .customLogoutUrl(\"https://idp.com/logout\")\n            .idpCert(\"-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----\")\n            .idpSignAlgo(\"sha512\")\n            .idpSsoUrl(\"https://idp.com/login\")\n            .issuer(\"my_idp_issuer\")\n            .nameidFormat(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ssoAdminOne:\n    type: junipermist:org:Sso\n    name: sso_admin_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: sso_admin_one\n      customLogoutUrl: https://idp.com/logout\n      idpCert: '-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----'\n      idpSignAlgo: sha512\n      idpSsoUrl: https://idp.com/login\n      issuer: my_idp_issuer\n      nameidFormat: email\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_sso` with:\n\nOrg PSK can be imported by specifying the org_id and the sso_id\n\n```sh\n$ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "customLogoutUrl": {
                    "type": "string",
                    "description": "a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is\ndifferent from SP-initiated SLO process)\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role\nmatched\n"
                },
                "domain": {
                    "type": "string",
                    "description": "random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =\n`/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =\n`/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)\n"
                },
                "idpCert": {
                    "type": "string",
                    "description": "IDP Cert (used to verify the signed response)\n"
                },
                "idpSignAlgo": {
                    "type": "string",
                    "description": "Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`\n"
                },
                "idpSsoUrl": {
                    "type": "string",
                    "description": "IDP Single-Sign-On URL\n"
                },
                "ignoreUnmatchedRoles": {
                    "type": "boolean",
                    "description": "ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "IDP issuer URL\n"
                },
                "name": {
                    "type": "string",
                    "description": "name\n"
                },
                "nameidFormat": {
                    "type": "string",
                    "description": "enum: `email`, `unspecified`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "roleAttrExtraction": {
                    "type": "string",
                    "description": "custom role attribute parsing scheme. Supported Role Parsing Schemes\n\u003ctable\u003e\u003ctr\u003e\u003cth\u003eName\u003c/th\u003e\u003cth\u003eScheme\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e`cn`\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003eThe expected role attribute format in SAML\nAssertion is “CN=cn,OU=ou1,OU=ou2,…”\u003c/li\u003e\u003cli\u003eCN (the key) is case insensitive and exactly 1 CN is expected (or the\nentire entry will be ignored)\u003c/li\u003e\u003cli\u003eE.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is\n“cn”\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n"
                },
                "roleAttrFrom": {
                    "type": "string",
                    "description": "name of the attribute in SAML Assertion to extract role from. Default: `Role`\n"
                }
            },
            "required": [
                "domain",
                "idpCert",
                "idpSignAlgo",
                "idpSsoUrl",
                "issuer",
                "name",
                "nameidFormat",
                "orgId",
                "roleAttrFrom"
            ],
            "inputProperties": {
                "customLogoutUrl": {
                    "type": "string",
                    "description": "a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is\ndifferent from SP-initiated SLO process)\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role\nmatched\n"
                },
                "idpCert": {
                    "type": "string",
                    "description": "IDP Cert (used to verify the signed response)\n"
                },
                "idpSignAlgo": {
                    "type": "string",
                    "description": "Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`\n"
                },
                "idpSsoUrl": {
                    "type": "string",
                    "description": "IDP Single-Sign-On URL\n"
                },
                "ignoreUnmatchedRoles": {
                    "type": "boolean",
                    "description": "ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "IDP issuer URL\n"
                },
                "name": {
                    "type": "string",
                    "description": "name\n"
                },
                "nameidFormat": {
                    "type": "string",
                    "description": "enum: `email`, `unspecified`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "roleAttrExtraction": {
                    "type": "string",
                    "description": "custom role attribute parsing scheme. Supported Role Parsing Schemes\n\u003ctable\u003e\u003ctr\u003e\u003cth\u003eName\u003c/th\u003e\u003cth\u003eScheme\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e`cn`\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003eThe expected role attribute format in SAML\nAssertion is “CN=cn,OU=ou1,OU=ou2,…”\u003c/li\u003e\u003cli\u003eCN (the key) is case insensitive and exactly 1 CN is expected (or the\nentire entry will be ignored)\u003c/li\u003e\u003cli\u003eE.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is\n“cn”\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n"
                },
                "roleAttrFrom": {
                    "type": "string",
                    "description": "name of the attribute in SAML Assertion to extract role from. Default: `Role`\n"
                }
            },
            "requiredInputs": [
                "idpCert",
                "idpSignAlgo",
                "idpSsoUrl",
                "issuer",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sso resources.\n",
                "properties": {
                    "customLogoutUrl": {
                        "type": "string",
                        "description": "a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is\ndifferent from SP-initiated SLO process)\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role\nmatched\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =\n`/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =\n`/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)\n"
                    },
                    "idpCert": {
                        "type": "string",
                        "description": "IDP Cert (used to verify the signed response)\n"
                    },
                    "idpSignAlgo": {
                        "type": "string",
                        "description": "Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`\n"
                    },
                    "idpSsoUrl": {
                        "type": "string",
                        "description": "IDP Single-Sign-On URL\n"
                    },
                    "ignoreUnmatchedRoles": {
                        "type": "boolean",
                        "description": "ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "IDP issuer URL\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name\n"
                    },
                    "nameidFormat": {
                        "type": "string",
                        "description": "enum: `email`, `unspecified`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "roleAttrExtraction": {
                        "type": "string",
                        "description": "custom role attribute parsing scheme. Supported Role Parsing Schemes\n\u003ctable\u003e\u003ctr\u003e\u003cth\u003eName\u003c/th\u003e\u003cth\u003eScheme\u003c/th\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e`cn`\u003c/td\u003e\u003ctd\u003e\u003cul\u003e\u003cli\u003eThe expected role attribute format in SAML\nAssertion is “CN=cn,OU=ou1,OU=ou2,…”\u003c/li\u003e\u003cli\u003eCN (the key) is case insensitive and exactly 1 CN is expected (or the\nentire entry will be ignored)\u003c/li\u003e\u003cli\u003eE.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is\n“cn”\u003c/li\u003e\u003c/ul\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n"
                    },
                    "roleAttrFrom": {
                        "type": "string",
                        "description": "name of the attribute in SAML Assertion to extract role from. Default: `Role`\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/ssoRole:SsoRole": {
            "description": "This resource manages Org SSO Roles for Admin Authantication.\nSSO roles refer to the different functions assigned to users within a Single Sign-On (SSO) system.\nThese roles determine the tasks and actions that users can perform within the SSO system. There are typically predefined roles and custom roles in an SSO system.\nRoles in SSO provide a well-defined separation of responsibility and visibility, allowing for granular-level access control on SSO objects..\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.SsoRole;\nimport com.pulumi.junipermist.org.SsoRoleArgs;\nimport com.pulumi.junipermist.org.inputs.SsoRolePrivilegeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ssoRoleOne = new SsoRole(\"ssoRoleOne\", SsoRoleArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"admin_sso\")\n            .privileges(SsoRolePrivilegeArgs.builder()\n                .scope(\"site\")\n                .role(\"read\")\n                .site_id(terraformSite.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ssoRoleOne:\n    type: junipermist:org:SsoRole\n    name: sso_role_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: admin_sso\n      privileges:\n        - scope: site\n          role: read\n          site_id: ${terraformSite.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_sso_role` with:\n\nOrg PSK can be imported by specifying the org_id and the sso_role_id\n\n```sh\n$ pulumi import junipermist:org/ssoRole:SsoRole sso_role_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/SsoRolePrivilege:SsoRolePrivilege"
                    }
                }
            },
            "required": [
                "name",
                "orgId",
                "privileges"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/SsoRolePrivilege:SsoRolePrivilege"
                    }
                }
            },
            "requiredInputs": [
                "orgId",
                "privileges"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SsoRole resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/SsoRolePrivilege:SsoRolePrivilege"
                        }
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/vpn:Vpn": {
            "description": "This resource manages the Org VPN.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Setting;\nimport com.pulumi.junipermist.org.SettingArgs;\nimport com.pulumi.junipermist.org.inputs.SettingPasswordPolicyArgs;\nimport com.pulumi.junipermist.org.inputs.SettingMistNacArgs;\nimport com.pulumi.junipermist.org.inputs.SettingSyntheticTestArgs;\nimport com.pulumi.junipermist.org.inputs.SettingApiPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var terraformTest = new Setting(\"terraformTest\", SettingArgs.builder()\n            .orgId(terraformTestMistOrg.id())\n            .passwordPolicy(SettingPasswordPolicyArgs.builder()\n                .enabled(true)\n                .min_length(8)\n                .requires_special_char(true)\n                .requires_two_factor_auth(true)\n                .build())\n            .mistNac(SettingMistNacArgs.builder()\n                .eu_only(true)\n                .build())\n            .syntheticTest(SettingSyntheticTestArgs.builder()\n                .disabled(false)\n                .vlans(SettingSyntheticTestVlanArgs.builder()\n                    .vlanIds(                    \n                        \"8\",\n                        \"999\")\n                    .disabled(true)\n                    .build())\n                .build())\n            .apiPolicy(SettingApiPolicyArgs.builder()\n                .no_reveal(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  terraformTest:\n    type: junipermist:org:Setting\n    name: terraform_test\n    properties:\n      orgId: ${terraformTestMistOrg.id}\n      passwordPolicy:\n        enabled: true\n        min_length: 8\n        requires_special_char: true\n        requires_two_factor_auth: true\n      mistNac:\n        eu_only: true\n      syntheticTest:\n        disabled: false\n        vlans:\n          - vlanIds:\n              - '8'\n              - '999'\n            disabled: true\n      apiPolicy:\n        no_reveal: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_vpn` with:\n\nOrg VPN can be imported by specifying the org_id and the vpn_id\n\n```sh\n$ pulumi import junipermist:org/vpn:Vpn vpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "paths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/VpnPaths:VpnPaths"
                    }
                }
            },
            "required": [
                "name",
                "orgId",
                "paths"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "paths": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/VpnPaths:VpnPaths"
                    }
                }
            },
            "requiredInputs": [
                "orgId",
                "paths"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vpn resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "paths": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/VpnPaths:VpnPaths"
                        }
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/webhook:Webhook": {
            "description": "This resource manages Org Webhooks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  webhookOne:\n    type: junipermist:org:Webhook\n    name: webhook_one\n    properties:\n      siteId: ${terraformTest.id}\n      name: webhook_one\n      type: http-post\n      url: https://myserver.com:4321/\n      verifyCert: false\n      enabled: true\n      topics:\n        - device-events\n        - alarms\n        - audits\n        - client-join\n        - client-info\n        - client-sessions\n        - device-updowns\n        - mxedge-events\n        - nac-events\n        - nac-accounting\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_webhook` with:\n\nOrg Webhook can be imported by specifying the org_id and the webhook_id\n\n```sh\n$ pulumi import junipermist:org/webhook:Webhook webhook_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                    "secret": true
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n",
                    "secret": true
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n",
                    "secret": true
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "orgId",
                "topics",
                "type",
                "url",
                "verifyCert"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                    "secret": true
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n",
                    "secret": true
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n",
                    "secret": true
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "topics",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "whether webhook is enabled\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the webhook\n"
                    },
                    "oauth2ClientId": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                    },
                    "oauth2ClientSecret": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                        "secret": true
                    },
                    "oauth2GrantType": {
                        "type": "string",
                        "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                    },
                    "oauth2Password": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`password`\n",
                        "secret": true
                    },
                    "oauth2Scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                    },
                    "oauth2TokenUrl": {
                        "type": "string",
                        "description": "required when `type`==`oauth2`\n"
                    },
                    "oauth2Username": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`password`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string",
                        "description": "only if `type`=`http-post`\n",
                        "secret": true
                    },
                    "splunkToken": {
                        "type": "string",
                        "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                        "secret": true
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                    },
                    "url": {
                        "type": "string"
                    },
                    "verifyCert": {
                        "type": "boolean",
                        "description": "when url uses HTTPS, whether to verify the certificate\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wlan:Wlan": {
            "description": "This resource manages the Org Wlans.\nThe WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wlanOne = new junipermist.org.Wlan(\"wlan_one\", {\n    ssid: \"wlan_one\",\n    orgId: terraformTest.id,\n    templateId: test101.id,\n    bands: [\n        \"5\",\n        \"6\",\n    ],\n    vlanEnabled: true,\n    vlanId: \"143\",\n    wlanLimitUp: 10000,\n    wlanLimitDown: 20000,\n    clientLimitUp: 512,\n    clientLimitDown: 1000,\n    auth: {\n        type: \"psk\",\n        psk: \"secretpsk\",\n    },\n    \"interface\": \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwlan_one = junipermist.org.Wlan(\"wlan_one\",\n    ssid=\"wlan_one\",\n    org_id=terraform_test[\"id\"],\n    template_id=test101[\"id\"],\n    bands=[\n        \"5\",\n        \"6\",\n    ],\n    vlan_enabled=True,\n    vlan_id=\"143\",\n    wlan_limit_up=10000,\n    wlan_limit_down=20000,\n    client_limit_up=512,\n    client_limit_down=1000,\n    auth={\n        \"type\": \"psk\",\n        \"psk\": \"secretpsk\",\n    },\n    interface=\"all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wlanOne = new JuniperMist.Org.Wlan(\"wlan_one\", new()\n    {\n        Ssid = \"wlan_one\",\n        OrgId = terraformTest.Id,\n        TemplateId = test101.Id,\n        Bands = new[]\n        {\n            \"5\",\n            \"6\",\n        },\n        VlanEnabled = true,\n        VlanId = \"143\",\n        WlanLimitUp = 10000,\n        WlanLimitDown = 20000,\n        ClientLimitUp = 512,\n        ClientLimitDown = 1000,\n        Auth = new JuniperMist.Org.Inputs.WlanAuthArgs\n        {\n            Type = \"psk\",\n            Psk = \"secretpsk\",\n        },\n        Interface = \"all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewWlan(ctx, \"wlan_one\", \u0026org.WlanArgs{\n\t\t\tSsid:       pulumi.String(\"wlan_one\"),\n\t\t\tOrgId:      pulumi.Any(terraformTest.Id),\n\t\t\tTemplateId: pulumi.Any(test101.Id),\n\t\t\tBands: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5\"),\n\t\t\t\tpulumi.String(\"6\"),\n\t\t\t},\n\t\t\tVlanEnabled:     pulumi.Bool(true),\n\t\t\tVlanId:          pulumi.String(\"143\"),\n\t\t\tWlanLimitUp:     pulumi.Int(10000),\n\t\t\tWlanLimitDown:   pulumi.Int(20000),\n\t\t\tClientLimitUp:   pulumi.Int(512),\n\t\t\tClientLimitDown: pulumi.Int(1000),\n\t\t\tAuth: \u0026org.WlanAuthArgs{\n\t\t\t\tType: pulumi.String(\"psk\"),\n\t\t\t\tPsk:  pulumi.String(\"secretpsk\"),\n\t\t\t},\n\t\t\tInterface: pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Wlan;\nimport com.pulumi.junipermist.org.WlanArgs;\nimport com.pulumi.junipermist.org.inputs.WlanAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlanOne = new Wlan(\"wlanOne\", WlanArgs.builder()\n            .ssid(\"wlan_one\")\n            .orgId(terraformTest.id())\n            .templateId(test101.id())\n            .bands(            \n                \"5\",\n                \"6\")\n            .vlanEnabled(true)\n            .vlanId(143)\n            .wlanLimitUp(10000)\n            .wlanLimitDown(20000)\n            .clientLimitUp(512)\n            .clientLimitDown(1000)\n            .auth(WlanAuthArgs.builder()\n                .type(\"psk\")\n                .psk(\"secretpsk\")\n                .build())\n            .interface_(\"all\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:org:Wlan\n    name: wlan_one\n    properties:\n      ssid: wlan_one\n      orgId: ${terraformTest.id}\n      templateId: ${test101.id}\n      bands:\n        - '5'\n        - '6'\n      vlanEnabled: true\n      vlanId: 143\n      wlanLimitUp: 10000\n      wlanLimitDown: 20000\n      clientLimitUp: 512\n      clientLimitDown: 1000\n      auth:\n        type: psk\n        psk: secretpsk\n      interface: all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_wlan` with:\n\nOrg WLAN can be imported by specifying the org_id and the wlan_id\n\n```sh\n$ pulumi import junipermist:org/wlan:Wlan wlan_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "acctImmediateUpdate": {
                    "type": "boolean",
                    "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                },
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanAcctServer:WlanAcctServer"
                    },
                    "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                },
                "airwatch": {
                    "$ref": "#/types/junipermist:org/WlanAirwatch:WlanAirwatch",
                    "description": "airwatch wlan settings\n"
                },
                "allowIpv6Ndp": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                },
                "allowMdns": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                },
                "allowSsdp": {
                    "type": "boolean",
                    "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                },
                "apIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device ids\n"
                },
                "appLimit": {
                    "$ref": "#/types/junipermist:org/WlanAppLimit:WlanAppLimit",
                    "description": "bandwidth limiting for apps (applies to up/down)\n"
                },
                "appQos": {
                    "$ref": "#/types/junipermist:org/WlanAppQos:WlanAppQos",
                    "description": "app qos wlan settings\n"
                },
                "applyTo": {
                    "type": "string",
                    "description": "enum: `aps`, `site`, `wxtags`\n"
                },
                "arpFilter": {
                    "type": "boolean",
                    "description": "whether to enable smart arp filter\n"
                },
                "auth": {
                    "$ref": "#/types/junipermist:org/WlanAuth:WlanAuth",
                    "description": "authentication wlan settings\n"
                },
                "authServerSelection": {
                    "type": "string",
                    "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanAuthServer:WlanAuthServer"
                    },
                    "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                },
                "authServersNasId": {
                    "type": "string",
                    "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                },
                "authServersNasIp": {
                    "type": "string",
                    "description": "optional, NAS-IP-ADDRESS to use\n"
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                },
                "bandSteer": {
                    "type": "boolean",
                    "description": "whether to enable band_steering, this works only when band==both\n"
                },
                "bandSteerForceBand5": {
                    "type": "boolean",
                    "description": "force dual_band capable client to connect to 5G\n"
                },
                "bands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                },
                "blockBlacklistClients": {
                    "type": "boolean",
                    "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                },
                "bonjour": {
                    "$ref": "#/types/junipermist:org/WlanBonjour:WlanBonjour",
                    "description": "bonjour gateway wlan settings\n"
                },
                "ciscoCwa": {
                    "$ref": "#/types/junipermist:org/WlanCiscoCwa:WlanCiscoCwa",
                    "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                },
                "clientLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting per-client is enabled\n"
                },
                "clientLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting per-client is enabled\n"
                },
                "coaServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanCoaServer:WlanCoaServer"
                    },
                    "description": "list of COA (change of authorization) servers, optional\n"
                },
                "disable11ax": {
                    "type": "boolean",
                    "description": "some old WLAN drivers may not be compatible\n"
                },
                "disableHtVhtRates": {
                    "type": "boolean",
                    "description": "to disable ht or vht rates\n"
                },
                "disableUapsd": {
                    "type": "boolean",
                    "description": "whether to disable U-APSD\n"
                },
                "disableV1RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableV2RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableWhenGatewayUnreachable": {
                    "type": "boolean",
                    "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                },
                "disableWhenMxtunnelDown": {
                    "type": "boolean"
                },
                "disableWmm": {
                    "type": "boolean",
                    "description": "whether to disable WMM\n"
                },
                "dnsServerRewrite": {
                    "$ref": "#/types/junipermist:org/WlanDnsServerRewrite:WlanDnsServerRewrite",
                    "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                },
                "dtim": {
                    "type": "integer"
                },
                "dynamicPsk": {
                    "$ref": "#/types/junipermist:org/WlanDynamicPsk:WlanDynamicPsk",
                    "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                },
                "dynamicVlan": {
                    "$ref": "#/types/junipermist:org/WlanDynamicVlan:WlanDynamicVlan",
                    "description": "for 802.1x\n"
                },
                "enableLocalKeycaching": {
                    "type": "boolean",
                    "description": "enable AP-AP keycaching via multicast\n"
                },
                "enableWirelessBridging": {
                    "type": "boolean",
                    "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                },
                "enableWirelessBridgingDhcpTracking": {
                    "type": "boolean",
                    "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if this wlan is enabled\n"
                },
                "fastDot1xTimers": {
                    "type": "boolean",
                    "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "whether to hide SSID in beacon\n"
                },
                "hostnameIe": {
                    "type": "boolean",
                    "description": "include hostname inside IE in AP beacons / probe responses\n"
                },
                "hotspot20": {
                    "$ref": "#/types/junipermist:org/WlanHotspot20:WlanHotspot20",
                    "description": "hostspot 2.0 wlan settings\n"
                },
                "injectDhcpOption82": {
                    "$ref": "#/types/junipermist:org/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                },
                "interface": {
                    "type": "string",
                    "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                },
                "legacyOverds": {
                    "type": "boolean",
                    "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                },
                "limitBcast": {
                    "type": "boolean",
                    "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                },
                "limitProbeResponse": {
                    "type": "boolean",
                    "description": "limit probe response base on some heuristic rules\n"
                },
                "maxIdletime": {
                    "type": "integer",
                    "description": "max idle time in seconds\n"
                },
                "maxNumClients": {
                    "type": "integer",
                    "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/WlanMistNac:WlanMistNac"
                },
                "mspId": {
                    "type": "string"
                },
                "mxtunnelIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                },
                "mxtunnelNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                },
                "noStaticDns": {
                    "type": "boolean",
                    "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                },
                "noStaticIp": {
                    "type": "boolean",
                    "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                },
                "orgId": {
                    "type": "string"
                },
                "portal": {
                    "$ref": "#/types/junipermist:org/WlanPortal:WlanPortal",
                    "description": "portal wlan settings\n"
                },
                "portalAllowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "portalAllowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "portalApiSecret": {
                    "type": "string",
                    "description": "api secret (auto-generated) that can be used to sign guest authorization requests\n"
                },
                "portalDeniedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                },
                "portalImage": {
                    "type": "string",
                    "description": "Url of portal background image\n"
                },
                "portalSsoUrl": {
                    "type": "string"
                },
                "qos": {
                    "$ref": "#/types/junipermist:org/WlanQos:WlanQos"
                },
                "radsec": {
                    "$ref": "#/types/junipermist:org/WlanRadsec:WlanRadsec",
                    "description": "Radsec settings\n"
                },
                "rateset": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/WlanRateset:WlanRateset"
                    },
                    "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                },
                "reconnectClientsWhenRoamingMxcluster": {
                    "type": "boolean",
                    "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                },
                "roamMode": {
                    "type": "string",
                    "description": "enum: `11r`, `OKC`, `NONE`\n"
                },
                "schedule": {
                    "$ref": "#/types/junipermist:org/WlanSchedule:WlanSchedule",
                    "description": "WLAN operating schedule, default is disabled\n"
                },
                "sleExcluded": {
                    "type": "boolean",
                    "description": "whether to exclude this WLAN from SLE metrics\n"
                },
                "ssid": {
                    "type": "string",
                    "description": "the name of the SSID\n"
                },
                "templateId": {
                    "type": "string"
                },
                "useEapolV1": {
                    "type": "boolean",
                    "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "if vlan tagging is enabled\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                },
                "vlanPooling": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                },
                "wlanLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting for whole wlan is enabled\n"
                },
                "wlanLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting for whole wlan is enabled\n"
                },
                "wxtagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of wxtag_ids\n"
                },
                "wxtunnelId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                },
                "wxtunnelRemoteId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                }
            },
            "required": [
                "acctImmediateUpdate",
                "acctInterimInterval",
                "acctServers",
                "airwatch",
                "allowIpv6Ndp",
                "allowMdns",
                "allowSsdp",
                "apIds",
                "appLimit",
                "appQos",
                "applyTo",
                "arpFilter",
                "authServerSelection",
                "authServers",
                "authServersNasId",
                "authServersNasIp",
                "authServersRetries",
                "authServersTimeout",
                "bandSteer",
                "bandSteerForceBand5",
                "blockBlacklistClients",
                "bonjour",
                "ciscoCwa",
                "clientLimitDown",
                "clientLimitDownEnabled",
                "clientLimitUp",
                "clientLimitUpEnabled",
                "coaServers",
                "disable11ax",
                "disableHtVhtRates",
                "disableUapsd",
                "disableV1RoamNotify",
                "disableV2RoamNotify",
                "disableWmm",
                "dnsServerRewrite",
                "dtim",
                "enableLocalKeycaching",
                "enableWirelessBridging",
                "enableWirelessBridgingDhcpTracking",
                "enabled",
                "fastDot1xTimers",
                "hideSsid",
                "hostnameIe",
                "hotspot20",
                "interface",
                "isolation",
                "l2Isolation",
                "legacyOverds",
                "limitBcast",
                "limitProbeResponse",
                "maxIdletime",
                "maxNumClients",
                "mistNac",
                "mspId",
                "mxtunnelIds",
                "mxtunnelNames",
                "noStaticDns",
                "noStaticIp",
                "orgId",
                "portal",
                "portalAllowedHostnames",
                "portalAllowedSubnets",
                "portalApiSecret",
                "portalDeniedHostnames",
                "portalImage",
                "portalSsoUrl",
                "qos",
                "radsec",
                "rateset",
                "roamMode",
                "schedule",
                "sleExcluded",
                "ssid",
                "templateId",
                "useEapolV1",
                "vlanEnabled",
                "vlanIds",
                "vlanPooling",
                "wlanLimitDown",
                "wlanLimitDownEnabled",
                "wlanLimitUp",
                "wlanLimitUpEnabled",
                "wxtagIds",
                "wxtunnelId",
                "wxtunnelRemoteId"
            ],
            "inputProperties": {
                "acctImmediateUpdate": {
                    "type": "boolean",
                    "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                },
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanAcctServer:WlanAcctServer"
                    },
                    "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                },
                "airwatch": {
                    "$ref": "#/types/junipermist:org/WlanAirwatch:WlanAirwatch",
                    "description": "airwatch wlan settings\n"
                },
                "allowIpv6Ndp": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                },
                "allowMdns": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                },
                "allowSsdp": {
                    "type": "boolean",
                    "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                },
                "apIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device ids\n"
                },
                "appLimit": {
                    "$ref": "#/types/junipermist:org/WlanAppLimit:WlanAppLimit",
                    "description": "bandwidth limiting for apps (applies to up/down)\n"
                },
                "appQos": {
                    "$ref": "#/types/junipermist:org/WlanAppQos:WlanAppQos",
                    "description": "app qos wlan settings\n"
                },
                "applyTo": {
                    "type": "string",
                    "description": "enum: `aps`, `site`, `wxtags`\n"
                },
                "arpFilter": {
                    "type": "boolean",
                    "description": "whether to enable smart arp filter\n"
                },
                "auth": {
                    "$ref": "#/types/junipermist:org/WlanAuth:WlanAuth",
                    "description": "authentication wlan settings\n"
                },
                "authServerSelection": {
                    "type": "string",
                    "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanAuthServer:WlanAuthServer"
                    },
                    "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                },
                "authServersNasId": {
                    "type": "string",
                    "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                },
                "authServersNasIp": {
                    "type": "string",
                    "description": "optional, NAS-IP-ADDRESS to use\n"
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                },
                "bandSteer": {
                    "type": "boolean",
                    "description": "whether to enable band_steering, this works only when band==both\n"
                },
                "bandSteerForceBand5": {
                    "type": "boolean",
                    "description": "force dual_band capable client to connect to 5G\n"
                },
                "bands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                },
                "blockBlacklistClients": {
                    "type": "boolean",
                    "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                },
                "bonjour": {
                    "$ref": "#/types/junipermist:org/WlanBonjour:WlanBonjour",
                    "description": "bonjour gateway wlan settings\n"
                },
                "ciscoCwa": {
                    "$ref": "#/types/junipermist:org/WlanCiscoCwa:WlanCiscoCwa",
                    "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                },
                "clientLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting per-client is enabled\n"
                },
                "clientLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting per-client is enabled\n"
                },
                "coaServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WlanCoaServer:WlanCoaServer"
                    },
                    "description": "list of COA (change of authorization) servers, optional\n"
                },
                "disable11ax": {
                    "type": "boolean",
                    "description": "some old WLAN drivers may not be compatible\n"
                },
                "disableHtVhtRates": {
                    "type": "boolean",
                    "description": "to disable ht or vht rates\n"
                },
                "disableUapsd": {
                    "type": "boolean",
                    "description": "whether to disable U-APSD\n"
                },
                "disableV1RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableV2RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableWhenGatewayUnreachable": {
                    "type": "boolean",
                    "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                },
                "disableWhenMxtunnelDown": {
                    "type": "boolean"
                },
                "disableWmm": {
                    "type": "boolean",
                    "description": "whether to disable WMM\n"
                },
                "dnsServerRewrite": {
                    "$ref": "#/types/junipermist:org/WlanDnsServerRewrite:WlanDnsServerRewrite",
                    "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                },
                "dtim": {
                    "type": "integer"
                },
                "dynamicPsk": {
                    "$ref": "#/types/junipermist:org/WlanDynamicPsk:WlanDynamicPsk",
                    "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                },
                "dynamicVlan": {
                    "$ref": "#/types/junipermist:org/WlanDynamicVlan:WlanDynamicVlan",
                    "description": "for 802.1x\n"
                },
                "enableLocalKeycaching": {
                    "type": "boolean",
                    "description": "enable AP-AP keycaching via multicast\n"
                },
                "enableWirelessBridging": {
                    "type": "boolean",
                    "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                },
                "enableWirelessBridgingDhcpTracking": {
                    "type": "boolean",
                    "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if this wlan is enabled\n"
                },
                "fastDot1xTimers": {
                    "type": "boolean",
                    "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "whether to hide SSID in beacon\n"
                },
                "hostnameIe": {
                    "type": "boolean",
                    "description": "include hostname inside IE in AP beacons / probe responses\n"
                },
                "hotspot20": {
                    "$ref": "#/types/junipermist:org/WlanHotspot20:WlanHotspot20",
                    "description": "hostspot 2.0 wlan settings\n"
                },
                "injectDhcpOption82": {
                    "$ref": "#/types/junipermist:org/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                },
                "interface": {
                    "type": "string",
                    "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                },
                "legacyOverds": {
                    "type": "boolean",
                    "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                },
                "limitBcast": {
                    "type": "boolean",
                    "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                },
                "limitProbeResponse": {
                    "type": "boolean",
                    "description": "limit probe response base on some heuristic rules\n"
                },
                "maxIdletime": {
                    "type": "integer",
                    "description": "max idle time in seconds\n"
                },
                "maxNumClients": {
                    "type": "integer",
                    "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:org/WlanMistNac:WlanMistNac"
                },
                "mxtunnelIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                },
                "mxtunnelNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                },
                "noStaticDns": {
                    "type": "boolean",
                    "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                },
                "noStaticIp": {
                    "type": "boolean",
                    "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                },
                "orgId": {
                    "type": "string"
                },
                "portal": {
                    "$ref": "#/types/junipermist:org/WlanPortal:WlanPortal",
                    "description": "portal wlan settings\n"
                },
                "portalAllowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "portalAllowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "portalDeniedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                },
                "qos": {
                    "$ref": "#/types/junipermist:org/WlanQos:WlanQos"
                },
                "radsec": {
                    "$ref": "#/types/junipermist:org/WlanRadsec:WlanRadsec",
                    "description": "Radsec settings\n"
                },
                "rateset": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:org/WlanRateset:WlanRateset"
                    },
                    "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                },
                "reconnectClientsWhenRoamingMxcluster": {
                    "type": "boolean",
                    "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                },
                "roamMode": {
                    "type": "string",
                    "description": "enum: `11r`, `OKC`, `NONE`\n"
                },
                "schedule": {
                    "$ref": "#/types/junipermist:org/WlanSchedule:WlanSchedule",
                    "description": "WLAN operating schedule, default is disabled\n"
                },
                "sleExcluded": {
                    "type": "boolean",
                    "description": "whether to exclude this WLAN from SLE metrics\n"
                },
                "ssid": {
                    "type": "string",
                    "description": "the name of the SSID\n"
                },
                "templateId": {
                    "type": "string"
                },
                "useEapolV1": {
                    "type": "boolean",
                    "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "if vlan tagging is enabled\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                },
                "vlanPooling": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                },
                "wlanLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting for whole wlan is enabled\n"
                },
                "wlanLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting for whole wlan is enabled\n"
                },
                "wxtagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of wxtag_ids\n"
                },
                "wxtunnelId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                },
                "wxtunnelRemoteId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "ssid",
                "templateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wlan resources.\n",
                "properties": {
                    "acctImmediateUpdate": {
                        "type": "boolean",
                        "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                    },
                    "acctInterimInterval": {
                        "type": "integer",
                        "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                    },
                    "acctServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/WlanAcctServer:WlanAcctServer"
                        },
                        "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                    },
                    "airwatch": {
                        "$ref": "#/types/junipermist:org/WlanAirwatch:WlanAirwatch",
                        "description": "airwatch wlan settings\n"
                    },
                    "allowIpv6Ndp": {
                        "type": "boolean",
                        "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                    },
                    "allowMdns": {
                        "type": "boolean",
                        "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                    },
                    "allowSsdp": {
                        "type": "boolean",
                        "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                    },
                    "apIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of device ids\n"
                    },
                    "appLimit": {
                        "$ref": "#/types/junipermist:org/WlanAppLimit:WlanAppLimit",
                        "description": "bandwidth limiting for apps (applies to up/down)\n"
                    },
                    "appQos": {
                        "$ref": "#/types/junipermist:org/WlanAppQos:WlanAppQos",
                        "description": "app qos wlan settings\n"
                    },
                    "applyTo": {
                        "type": "string",
                        "description": "enum: `aps`, `site`, `wxtags`\n"
                    },
                    "arpFilter": {
                        "type": "boolean",
                        "description": "whether to enable smart arp filter\n"
                    },
                    "auth": {
                        "$ref": "#/types/junipermist:org/WlanAuth:WlanAuth",
                        "description": "authentication wlan settings\n"
                    },
                    "authServerSelection": {
                        "type": "string",
                        "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                    },
                    "authServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/WlanAuthServer:WlanAuthServer"
                        },
                        "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                    },
                    "authServersNasId": {
                        "type": "string",
                        "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                    },
                    "authServersNasIp": {
                        "type": "string",
                        "description": "optional, NAS-IP-ADDRESS to use\n"
                    },
                    "authServersRetries": {
                        "type": "integer",
                        "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                    },
                    "authServersTimeout": {
                        "type": "integer",
                        "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                    },
                    "bandSteer": {
                        "type": "boolean",
                        "description": "whether to enable band_steering, this works only when band==both\n"
                    },
                    "bandSteerForceBand5": {
                        "type": "boolean",
                        "description": "force dual_band capable client to connect to 5G\n"
                    },
                    "bands": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                    },
                    "blockBlacklistClients": {
                        "type": "boolean",
                        "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                    },
                    "bonjour": {
                        "$ref": "#/types/junipermist:org/WlanBonjour:WlanBonjour",
                        "description": "bonjour gateway wlan settings\n"
                    },
                    "ciscoCwa": {
                        "$ref": "#/types/junipermist:org/WlanCiscoCwa:WlanCiscoCwa",
                        "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                    },
                    "clientLimitDown": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "clientLimitDownEnabled": {
                        "type": "boolean",
                        "description": "if downlink limiting per-client is enabled\n"
                    },
                    "clientLimitUp": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "clientLimitUpEnabled": {
                        "type": "boolean",
                        "description": "if uplink limiting per-client is enabled\n"
                    },
                    "coaServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/WlanCoaServer:WlanCoaServer"
                        },
                        "description": "list of COA (change of authorization) servers, optional\n"
                    },
                    "disable11ax": {
                        "type": "boolean",
                        "description": "some old WLAN drivers may not be compatible\n"
                    },
                    "disableHtVhtRates": {
                        "type": "boolean",
                        "description": "to disable ht or vht rates\n"
                    },
                    "disableUapsd": {
                        "type": "boolean",
                        "description": "whether to disable U-APSD\n"
                    },
                    "disableV1RoamNotify": {
                        "type": "boolean",
                        "description": "disable sending v2 roam notification messages\n"
                    },
                    "disableV2RoamNotify": {
                        "type": "boolean",
                        "description": "disable sending v2 roam notification messages\n"
                    },
                    "disableWhenGatewayUnreachable": {
                        "type": "boolean",
                        "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                    },
                    "disableWhenMxtunnelDown": {
                        "type": "boolean"
                    },
                    "disableWmm": {
                        "type": "boolean",
                        "description": "whether to disable WMM\n"
                    },
                    "dnsServerRewrite": {
                        "$ref": "#/types/junipermist:org/WlanDnsServerRewrite:WlanDnsServerRewrite",
                        "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                    },
                    "dtim": {
                        "type": "integer"
                    },
                    "dynamicPsk": {
                        "$ref": "#/types/junipermist:org/WlanDynamicPsk:WlanDynamicPsk",
                        "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                    },
                    "dynamicVlan": {
                        "$ref": "#/types/junipermist:org/WlanDynamicVlan:WlanDynamicVlan",
                        "description": "for 802.1x\n"
                    },
                    "enableLocalKeycaching": {
                        "type": "boolean",
                        "description": "enable AP-AP keycaching via multicast\n"
                    },
                    "enableWirelessBridging": {
                        "type": "boolean",
                        "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                    },
                    "enableWirelessBridgingDhcpTracking": {
                        "type": "boolean",
                        "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "if this wlan is enabled\n"
                    },
                    "fastDot1xTimers": {
                        "type": "boolean",
                        "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                    },
                    "hideSsid": {
                        "type": "boolean",
                        "description": "whether to hide SSID in beacon\n"
                    },
                    "hostnameIe": {
                        "type": "boolean",
                        "description": "include hostname inside IE in AP beacons / probe responses\n"
                    },
                    "hotspot20": {
                        "$ref": "#/types/junipermist:org/WlanHotspot20:WlanHotspot20",
                        "description": "hostspot 2.0 wlan settings\n"
                    },
                    "injectDhcpOption82": {
                        "$ref": "#/types/junipermist:org/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                    },
                    "interface": {
                        "type": "string",
                        "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                    },
                    "isolation": {
                        "type": "boolean",
                        "description": "whether to stop clients to talk to each other\n"
                    },
                    "l2Isolation": {
                        "type": "boolean",
                        "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                    },
                    "legacyOverds": {
                        "type": "boolean",
                        "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                    },
                    "limitBcast": {
                        "type": "boolean",
                        "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                    },
                    "limitProbeResponse": {
                        "type": "boolean",
                        "description": "limit probe response base on some heuristic rules\n"
                    },
                    "maxIdletime": {
                        "type": "integer",
                        "description": "max idle time in seconds\n"
                    },
                    "maxNumClients": {
                        "type": "integer",
                        "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:org/WlanMistNac:WlanMistNac"
                    },
                    "mspId": {
                        "type": "string"
                    },
                    "mxtunnelIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                    },
                    "mxtunnelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                    },
                    "noStaticDns": {
                        "type": "boolean",
                        "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                    },
                    "noStaticIp": {
                        "type": "boolean",
                        "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "portal": {
                        "$ref": "#/types/junipermist:org/WlanPortal:WlanPortal",
                        "description": "portal wlan settings\n"
                    },
                    "portalAllowedHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of hostnames without http(s):// (matched by substring)\n"
                    },
                    "portalAllowedSubnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDRs\n"
                    },
                    "portalApiSecret": {
                        "type": "string",
                        "description": "api secret (auto-generated) that can be used to sign guest authorization requests\n"
                    },
                    "portalDeniedHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                    },
                    "portalImage": {
                        "type": "string",
                        "description": "Url of portal background image\n"
                    },
                    "portalSsoUrl": {
                        "type": "string"
                    },
                    "qos": {
                        "$ref": "#/types/junipermist:org/WlanQos:WlanQos"
                    },
                    "radsec": {
                        "$ref": "#/types/junipermist:org/WlanRadsec:WlanRadsec",
                        "description": "Radsec settings\n"
                    },
                    "rateset": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:org/WlanRateset:WlanRateset"
                        },
                        "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                    },
                    "reconnectClientsWhenRoamingMxcluster": {
                        "type": "boolean",
                        "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                    },
                    "roamMode": {
                        "type": "string",
                        "description": "enum: `11r`, `OKC`, `NONE`\n"
                    },
                    "schedule": {
                        "$ref": "#/types/junipermist:org/WlanSchedule:WlanSchedule",
                        "description": "WLAN operating schedule, default is disabled\n"
                    },
                    "sleExcluded": {
                        "type": "boolean",
                        "description": "whether to exclude this WLAN from SLE metrics\n"
                    },
                    "ssid": {
                        "type": "string",
                        "description": "the name of the SSID\n"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "useEapolV1": {
                        "type": "boolean",
                        "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                    },
                    "vlanEnabled": {
                        "type": "boolean",
                        "description": "if vlan tagging is enabled\n"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                    },
                    "vlanPooling": {
                        "type": "boolean",
                        "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                    },
                    "wlanLimitDown": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "wlanLimitDownEnabled": {
                        "type": "boolean",
                        "description": "if downlink limiting for whole wlan is enabled\n"
                    },
                    "wlanLimitUp": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "wlanLimitUpEnabled": {
                        "type": "boolean",
                        "description": "if uplink limiting for whole wlan is enabled\n"
                    },
                    "wxtagIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of wxtag_ids\n"
                    },
                    "wxtunnelId": {
                        "type": "string",
                        "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                    },
                    "wxtunnelRemoteId": {
                        "type": "string",
                        "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wlanPortalImage:WlanPortalImage": {
            "description": "This resource is used to upload a WLAN Captive Web Portal background image.\nThe WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:org:WlanPortalImage\n    name: wlan_one\n    properties:\n      siteId: ${terraformTest.id}\n      wlanId: ${wlanOneMistOrg.id}\n      file: /Users/johndoe/Documents/image.jpg\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Org WLAN ID\n"
                }
            },
            "required": [
                "file",
                "orgId",
                "wlanId"
            ],
            "inputProperties": {
                "file": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Org WLAN ID\n"
                }
            },
            "requiredInputs": [
                "file",
                "orgId",
                "wlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WlanPortalImage resources.\n",
                "properties": {
                    "file": {
                        "type": "string",
                        "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "wlanId": {
                        "type": "string",
                        "description": "Org WLAN ID\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wlanPortalTemplate:WlanPortalTemplate": {
            "description": "This resource is used customize the WLAN Guest Portal.\nThe WLAN Portal Template can be used to define:\n* Guest Authentication methods and parameters (access duration, ...)\n* Default values of the text fields and labels on the portal\n* Values of the text fields and labels based on the User Agent (`locales` property)\n\n**Notes:**\n* There is no feedback from the API, so there is no possibility to validate the changes. The resource states is directly generated based on the resource plan.* There is no option to delete or revert the changes. Deleting the resource will just remove it from the states. Once removed, it is possible to create a new one. It will replace the previous template\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.WlanPortalTemplate;\nimport com.pulumi.junipermist.org.WlanPortalTemplateArgs;\nimport com.pulumi.junipermist.org.inputs.WlanPortalTemplatePortalTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlanOne = new WlanPortalTemplate(\"wlanOne\", WlanPortalTemplateArgs.builder()\n            .orgId(terraformTest.id())\n            .wlanId(wlanOneMistOrg.id())\n            .portalTemplate(WlanPortalTemplatePortalTemplateArgs.builder()\n                .sms_message_format(\"Code {{code}} expires in {{duration}} minutes.\")\n                .sms_validity_duration(\"10\")\n                .page_title(\"Welcome To My Demo Portal\")\n                .locales(Map.of(\"fr-FR\", Map.of(\"pageTitle\", \"Bienvenue sur mon portail de démo\")))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:org:WlanPortalTemplate\n    name: wlan_one\n    properties:\n      orgId: ${terraformTest.id}\n      wlanId: ${wlanOneMistOrg.id}\n      portalTemplate:\n        sms_message_format: Code {{code}} expires in {{duration}} minutes.\n        sms_validity_duration: '10'\n        page_title: Welcome To My Demo Portal\n        locales:\n          fr-FR:\n            pageTitle: Bienvenue sur mon portail de démo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "orgId": {
                    "type": "string"
                },
                "portalTemplate": {
                    "$ref": "#/types/junipermist:org/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                    "description": "portal template wlan settings\n"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Org WLAN ID\n"
                }
            },
            "required": [
                "orgId",
                "portalTemplate",
                "wlanId"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string"
                },
                "portalTemplate": {
                    "$ref": "#/types/junipermist:org/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                    "description": "portal template wlan settings\n"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Org WLAN ID\n"
                }
            },
            "requiredInputs": [
                "orgId",
                "portalTemplate",
                "wlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WlanPortalTemplate resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    },
                    "portalTemplate": {
                        "$ref": "#/types/junipermist:org/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                        "description": "portal template wlan settings\n"
                    },
                    "wlanId": {
                        "type": "string",
                        "description": "Org WLAN ID\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wlantemplate:Wlantemplate": {
            "description": "This resource manages the Org WLAN Templates.\nA WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level. WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles. They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Wlantemplate;\nimport com.pulumi.junipermist.org.WlantemplateArgs;\nimport com.pulumi.junipermist.org.inputs.WlantemplateAppliesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlantempalteOne = new Wlantemplate(\"wlantempalteOne\", WlantemplateArgs.builder()\n            .name(\"wlantempalte_one\")\n            .orgId(terraformTest.id())\n            .applies(WlantemplateAppliesArgs.builder()\n                .site_ids(terraformSite.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlantempalteOne:\n    type: junipermist:org:Wlantemplate\n    name: wlantempalte_one\n    properties:\n      name: wlantempalte_one\n      orgId: ${terraformTest.id}\n      applies:\n        site_ids:\n          - ${terraformSite.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_wlantemplate` with:\n\nOrg WLAN Template can be imported by specifying the org_id and the wlantemplate_id\n\n```sh\n$ pulumi import junipermist:org/wlantemplate:Wlantemplate wlantemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "applies": {
                    "$ref": "#/types/junipermist:org/WlantemplateApplies:WlantemplateApplies",
                    "description": "where this template should be applied to, can be org*id, site*ids, sitegroup_ids\n"
                },
                "deviceprofileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Device Profile ids\n"
                },
                "exceptions": {
                    "$ref": "#/types/junipermist:org/WlantemplateExceptions:WlantemplateExceptions",
                    "description": "where this template should not be applied to (takes precedence)\n"
                },
                "filterByDeviceprofile": {
                    "type": "boolean",
                    "description": "whether to further filter by Device Profile\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "required": [
                "applies",
                "deviceprofileIds",
                "exceptions",
                "filterByDeviceprofile",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "applies": {
                    "$ref": "#/types/junipermist:org/WlantemplateApplies:WlantemplateApplies",
                    "description": "where this template should be applied to, can be org*id, site*ids, sitegroup_ids\n"
                },
                "deviceprofileIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Device Profile ids\n"
                },
                "exceptions": {
                    "$ref": "#/types/junipermist:org/WlantemplateExceptions:WlantemplateExceptions",
                    "description": "where this template should not be applied to (takes precedence)\n"
                },
                "filterByDeviceprofile": {
                    "type": "boolean",
                    "description": "whether to further filter by Device Profile\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wlantemplate resources.\n",
                "properties": {
                    "applies": {
                        "$ref": "#/types/junipermist:org/WlantemplateApplies:WlantemplateApplies",
                        "description": "where this template should be applied to, can be org*id, site*ids, sitegroup_ids\n"
                    },
                    "deviceprofileIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Device Profile ids\n"
                    },
                    "exceptions": {
                        "$ref": "#/types/junipermist:org/WlantemplateExceptions:WlantemplateExceptions",
                        "description": "where this template should not be applied to (takes precedence)\n"
                    },
                    "filterByDeviceprofile": {
                        "type": "boolean",
                        "description": "whether to further filter by Device Profile\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wxrule:Wxrule": {
            "description": "This resource manages the Org WxRules (WxLAN policies).\nA WxLAN policy is a set of rules and settings that can be applied to devices in a network to determine how they are treated. it provides support for access policies, network segmentation, role-based policies, micro-segmentation, and least privilege. WxLAN policies are used to allow or deny specific users from accessing specific resources in a wireless network.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wxruleOne = new junipermist.org.Wxrule(\"wxrule_one\", {\n    orgId: terraformTest.id,\n    templateId: wlantempalteOne.id,\n    srcWxtags: [wxtagOne.id],\n    enabled: true,\n    action: \"allow\",\n    dstDenyWxtags: [wxtagTwo.id],\n    order: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwxrule_one = junipermist.org.Wxrule(\"wxrule_one\",\n    org_id=terraform_test[\"id\"],\n    template_id=wlantempalte_one[\"id\"],\n    src_wxtags=[wxtag_one[\"id\"]],\n    enabled=True,\n    action=\"allow\",\n    dst_deny_wxtags=[wxtag_two[\"id\"]],\n    order=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wxruleOne = new JuniperMist.Org.Wxrule(\"wxrule_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        TemplateId = wlantempalteOne.Id,\n        SrcWxtags = new[]\n        {\n            wxtagOne.Id,\n        },\n        Enabled = true,\n        Action = \"allow\",\n        DstDenyWxtags = new[]\n        {\n            wxtagTwo.Id,\n        },\n        Order = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewWxrule(ctx, \"wxrule_one\", \u0026org.WxruleArgs{\n\t\t\tOrgId:      pulumi.Any(terraformTest.Id),\n\t\t\tTemplateId: pulumi.Any(wlantempalteOne.Id),\n\t\t\tSrcWxtags: pulumi.StringArray{\n\t\t\t\twxtagOne.Id,\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tAction:  pulumi.String(\"allow\"),\n\t\t\tDstDenyWxtags: pulumi.StringArray{\n\t\t\t\twxtagTwo.Id,\n\t\t\t},\n\t\t\tOrder: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Wxrule;\nimport com.pulumi.junipermist.org.WxruleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wxruleOne = new Wxrule(\"wxruleOne\", WxruleArgs.builder()\n            .orgId(terraformTest.id())\n            .templateId(wlantempalteOne.id())\n            .srcWxtags(wxtagOne.id())\n            .enabled(true)\n            .action(\"allow\")\n            .dstDenyWxtags(wxtagTwo.id())\n            .order(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wxruleOne:\n    type: junipermist:org:Wxrule\n    name: wxrule_one\n    properties:\n      orgId: ${terraformTest.id}\n      templateId: ${wlantempalteOne.id}\n      srcWxtags:\n        - ${wxtagOne.id}\n      enabled: true\n      action: allow\n      dstDenyWxtags:\n        - ${wxtagTwo.id}\n      order: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_wxrule` with:\n\nOrg WxRule can be imported by specifying the org_id and the wxrule_id\n\n```sh\n$ pulumi import junipermist:org/wxrule:Wxrule wxrule_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "type of action, allow / block. enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blockedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                },
                "dstAllowWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                },
                "dstDenyWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                },
                "dstWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer",
                    "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                },
                "orgId": {
                    "type": "string"
                },
                "srcWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to determine if this rule would match\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Only for Org Level WxRule\n"
                }
            },
            "required": [
                "action",
                "dstAllowWxtags",
                "dstDenyWxtags",
                "dstWxtags",
                "enabled",
                "order",
                "orgId",
                "srcWxtags",
                "templateId"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "type of action, allow / block. enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blockedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                },
                "dstAllowWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                },
                "dstDenyWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                },
                "dstWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer",
                    "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                },
                "orgId": {
                    "type": "string"
                },
                "srcWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to determine if this rule would match\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Only for Org Level WxRule\n"
                }
            },
            "requiredInputs": [
                "action",
                "order",
                "orgId",
                "templateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wxrule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "type of action, allow / block. enum: `allow`, `block`\n"
                    },
                    "applyTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "blockedApps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                    },
                    "dstAllowWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                    },
                    "dstDenyWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                    },
                    "dstWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer",
                        "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "srcWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to determine if this rule would match\n"
                    },
                    "templateId": {
                        "type": "string",
                        "description": "Only for Org Level WxRule\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:org/wxtag:Wxtag": {
            "description": "This resource manages the Org WxLan tags (labels).\nA WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wtagOne = new junipermist.org.Wxtag(\"wtag_one\", {\n    orgId: terraformTest.id,\n    name: \"wtag_one\",\n    values: [\"10.3.0.0/16\"],\n    op: \"in\",\n    type: \"match\",\n    match: \"ip_range_subnet\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwtag_one = junipermist.org.Wxtag(\"wtag_one\",\n    org_id=terraform_test[\"id\"],\n    name=\"wtag_one\",\n    values=[\"10.3.0.0/16\"],\n    op=\"in\",\n    type=\"match\",\n    match=\"ip_range_subnet\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wtagOne = new JuniperMist.Org.Wxtag(\"wtag_one\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"wtag_one\",\n        Values = new[]\n        {\n            \"10.3.0.0/16\",\n        },\n        Op = \"in\",\n        Type = \"match\",\n        Match = \"ip_range_subnet\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.NewWxtag(ctx, \"wtag_one\", \u0026org.WxtagArgs{\n\t\t\tOrgId: pulumi.Any(terraformTest.Id),\n\t\t\tName:  pulumi.String(\"wtag_one\"),\n\t\t\tValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.3.0.0/16\"),\n\t\t\t},\n\t\t\tOp:    pulumi.String(\"in\"),\n\t\t\tType:  pulumi.String(\"match\"),\n\t\t\tMatch: pulumi.String(\"ip_range_subnet\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.Wxtag;\nimport com.pulumi.junipermist.org.WxtagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wtagOne = new Wxtag(\"wtagOne\", WxtagArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"wtag_one\")\n            .values(\"10.3.0.0/16\")\n            .op(\"in\")\n            .type(\"match\")\n            .match(\"ip_range_subnet\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wtagOne:\n    type: junipermist:org:Wxtag\n    name: wtag_one\n    properties:\n      orgId: ${terraformTest.id}\n      name: wtag_one\n      values:\n        - 10.3.0.0/16\n      op: in\n      type: match\n      match: ip_range_subnet\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_org_wxtag` with:\n\nOrg WxTag can be imported by specifying the org_id and the wxtag_id\n\n```sh\n$ pulumi import junipermist:org/wxtag:Wxtag wxtag_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "mac": {
                    "type": "string",
                    "description": "if `type`==`client`, Client MAC Address\n"
                },
                "match": {
                    "type": "string",
                    "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "op": {
                    "type": "string",
                    "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WxtagSpec:WxtagSpec"
                    },
                    "description": "if `type`==`spec`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "op",
                "orgId",
                "type"
            ],
            "inputProperties": {
                "mac": {
                    "type": "string",
                    "description": "if `type`==`client`, Client MAC Address\n"
                },
                "match": {
                    "type": "string",
                    "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "op": {
                    "type": "string",
                    "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:org/WxtagSpec:WxtagSpec"
                    },
                    "description": "if `type`==`spec`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "orgId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wxtag resources.\n",
                "properties": {
                    "mac": {
                        "type": "string",
                        "description": "if `type`==`client`, Client MAC Address\n"
                    },
                    "match": {
                        "type": "string",
                        "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name\n"
                    },
                    "op": {
                        "type": "string",
                        "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:org/WxtagSpec:WxtagSpec"
                        },
                        "description": "if `type`==`spec`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                    },
                    "vlanId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/base:base": {
            "description": "This resources manages the Site basic information.\nThis resource can be used to assign templates to a site, or to change basic information (e.g. Site Address)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst juniperFrance = new junipermist.site.Base(\"juniper_france\", {\n    orgId: terraformTest.id,\n    name: \"JNP-FR-PAR\",\n    countryCode: \"FR\",\n    timezone: \"Europe/Paris\",\n    address: \"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n    notes: \"Created with Terraform, Updated with Terraform\",\n    latlng: {\n        lat: 48.899268,\n        lng: 2.214447,\n    },\n    sitegroupIds: [\n        testGroup.id,\n        testGroup2.id,\n    ],\n    networktemplateId: networktemplateOne.id,\n    rftemplateId: rftemplateOne.id,\n    gatewaytemplateId: gatewaytemplateOne.id,\n    alarmtemplateId: alarmtemplateOne.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\njuniper_france = junipermist.site.Base(\"juniper_france\",\n    org_id=terraform_test[\"id\"],\n    name=\"JNP-FR-PAR\",\n    country_code=\"FR\",\n    timezone=\"Europe/Paris\",\n    address=\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n    notes=\"Created with Terraform, Updated with Terraform\",\n    latlng={\n        \"lat\": 48.899268,\n        \"lng\": 2.214447,\n    },\n    sitegroup_ids=[\n        test_group[\"id\"],\n        test_group2[\"id\"],\n    ],\n    networktemplate_id=networktemplate_one[\"id\"],\n    rftemplate_id=rftemplate_one[\"id\"],\n    gatewaytemplate_id=gatewaytemplate_one[\"id\"],\n    alarmtemplate_id=alarmtemplate_one[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var juniperFrance = new JuniperMist.Site.Base(\"juniper_france\", new()\n    {\n        OrgId = terraformTest.Id,\n        Name = \"JNP-FR-PAR\",\n        CountryCode = \"FR\",\n        Timezone = \"Europe/Paris\",\n        Address = \"41 Rue de Villiers, 92100 Neuilly sur Seine, France\",\n        Notes = \"Created with Terraform, Updated with Terraform\",\n        Latlng = new JuniperMist.Site.Inputs.BaseLatlngArgs\n        {\n            Lat = 48.899268,\n            Lng = 2.214447,\n        },\n        SitegroupIds = new[]\n        {\n            testGroup.Id,\n            testGroup2.Id,\n        },\n        NetworktemplateId = networktemplateOne.Id,\n        RftemplateId = rftemplateOne.Id,\n        GatewaytemplateId = gatewaytemplateOne.Id,\n        AlarmtemplateId = alarmtemplateOne.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.Newbase(ctx, \"juniper_france\", \u0026site.baseArgs{\n\t\t\tOrgId:       pulumi.Any(terraformTest.Id),\n\t\t\tName:        pulumi.String(\"JNP-FR-PAR\"),\n\t\t\tCountryCode: pulumi.String(\"FR\"),\n\t\t\tTimezone:    pulumi.String(\"Europe/Paris\"),\n\t\t\tAddress:     pulumi.String(\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\"),\n\t\t\tNotes:       pulumi.String(\"Created with Terraform, Updated with Terraform\"),\n\t\t\tLatlng: \u0026site.BaseLatlngArgs{\n\t\t\t\tLat: pulumi.Float64(48.899268),\n\t\t\t\tLng: pulumi.Float64(2.214447),\n\t\t\t},\n\t\t\tSitegroupIds: pulumi.StringArray{\n\t\t\t\ttestGroup.Id,\n\t\t\t\ttestGroup2.Id,\n\t\t\t},\n\t\t\tNetworktemplateId: pulumi.Any(networktemplateOne.Id),\n\t\t\tRftemplateId:      pulumi.Any(rftemplateOne.Id),\n\t\t\tGatewaytemplateId: pulumi.Any(gatewaytemplateOne.Id),\n\t\t\tAlarmtemplateId:   pulumi.Any(alarmtemplateOne.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.base;\nimport com.pulumi.junipermist.site.BaseArgs;\nimport com.pulumi.junipermist.site.inputs.BaseLatlngArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var juniperFrance = new Base(\"juniperFrance\", BaseArgs.builder()\n            .orgId(terraformTest.id())\n            .name(\"JNP-FR-PAR\")\n            .countryCode(\"FR\")\n            .timezone(\"Europe/Paris\")\n            .address(\"41 Rue de Villiers, 92100 Neuilly sur Seine, France\")\n            .notes(\"Created with Terraform, Updated with Terraform\")\n            .latlng(BaseLatlngArgs.builder()\n                .lat(48.899268)\n                .lng(2.214447)\n                .build())\n            .sitegroupIds(            \n                testGroup.id(),\n                testGroup2.id())\n            .networktemplateId(networktemplateOne.id())\n            .rftemplateId(rftemplateOne.id())\n            .gatewaytemplateId(gatewaytemplateOne.id())\n            .alarmtemplateId(alarmtemplateOne.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  juniperFrance:\n    type: junipermist:site:base\n    name: juniper_france\n    properties:\n      orgId: ${terraformTest.id}\n      name: JNP-FR-PAR\n      countryCode: FR\n      timezone: Europe/Paris\n      address: 41 Rue de Villiers, 92100 Neuilly sur Seine, France\n      notes: Created with Terraform, Updated with Terraform\n      latlng:\n        lat: 48.899268\n        lng: 2.214447\n      sitegroupIds:\n        - ${testGroup.id}\n        - ${testGroup2.id}\n      networktemplateId: ${networktemplateOne.id}\n      rftemplateId: ${rftemplateOne.id}\n      gatewaytemplateId: ${gatewaytemplateOne.id}\n      alarmtemplateId: ${alarmtemplateOne.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site` with:\n\nSite can be imported by specifying the site_id\n\n```sh\n$ pulumi import junipermist:site/base:base site_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "full address of the site\n"
                },
                "alarmtemplateId": {
                    "type": "string",
                    "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                },
                "aptemplateId": {
                    "type": "string",
                    "description": "AP Template ID, used by APs\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "country code for the site (for AP config generation), in two-character\n"
                },
                "gatewaytemplateId": {
                    "type": "string",
                    "description": "Gateway Template ID, used by gateways\n"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:site/baseLatlng:baseLatlng"
                },
                "name": {
                    "type": "string"
                },
                "networktemplateId": {
                    "type": "string",
                    "description": "Network Template ID, this takes precedence over Site Settings\n"
                },
                "notes": {
                    "type": "string",
                    "description": "optional, any notes about the site\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rftemplateId": {
                    "type": "string",
                    "description": "RF Template ID, this takes precedence over Site Settings\n"
                },
                "secpolicyId": {
                    "type": "string",
                    "description": "SecPolicy ID\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sitegroups this site belongs to\n"
                },
                "sitetemplateId": {
                    "type": "string",
                    "description": "Site Template ID\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone the site is at\n"
                }
            },
            "required": [
                "address",
                "name",
                "orgId",
                "timezone"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "full address of the site\n"
                },
                "alarmtemplateId": {
                    "type": "string",
                    "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                },
                "aptemplateId": {
                    "type": "string",
                    "description": "AP Template ID, used by APs\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "country code for the site (for AP config generation), in two-character\n"
                },
                "gatewaytemplateId": {
                    "type": "string",
                    "description": "Gateway Template ID, used by gateways\n"
                },
                "latlng": {
                    "$ref": "#/types/junipermist:site/baseLatlng:baseLatlng"
                },
                "name": {
                    "type": "string"
                },
                "networktemplateId": {
                    "type": "string",
                    "description": "Network Template ID, this takes precedence over Site Settings\n"
                },
                "notes": {
                    "type": "string",
                    "description": "optional, any notes about the site\n"
                },
                "orgId": {
                    "type": "string"
                },
                "rftemplateId": {
                    "type": "string",
                    "description": "RF Template ID, this takes precedence over Site Settings\n"
                },
                "secpolicyId": {
                    "type": "string",
                    "description": "SecPolicy ID\n"
                },
                "sitegroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "sitegroups this site belongs to\n"
                },
                "sitetemplateId": {
                    "type": "string",
                    "description": "Site Template ID\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone the site is at\n"
                }
            },
            "requiredInputs": [
                "address",
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering base resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "full address of the site\n"
                    },
                    "alarmtemplateId": {
                        "type": "string",
                        "description": "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id\n"
                    },
                    "aptemplateId": {
                        "type": "string",
                        "description": "AP Template ID, used by APs\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "country code for the site (for AP config generation), in two-character\n"
                    },
                    "gatewaytemplateId": {
                        "type": "string",
                        "description": "Gateway Template ID, used by gateways\n"
                    },
                    "latlng": {
                        "$ref": "#/types/junipermist:site/baseLatlng:baseLatlng"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networktemplateId": {
                        "type": "string",
                        "description": "Network Template ID, this takes precedence over Site Settings\n"
                    },
                    "notes": {
                        "type": "string",
                        "description": "optional, any notes about the site\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "rftemplateId": {
                        "type": "string",
                        "description": "RF Template ID, this takes precedence over Site Settings\n"
                    },
                    "secpolicyId": {
                        "type": "string",
                        "description": "SecPolicy ID\n"
                    },
                    "sitegroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "sitegroups this site belongs to\n"
                    },
                    "sitetemplateId": {
                        "type": "string",
                        "description": "Site Template ID\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone the site is at\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "junipermist:device/base:base"
                }
            ]
        },
        "junipermist:site/evpnTopology:EvpnTopology": {
            "description": "This resource manages the Site Evpn Topologys.\nEVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.\n\n\u003e To create or manage your EVPN Topology with the Mist Provider, please refer to the `How To - EVPN Topology` Guide.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mist from \"@pulumi/mist\";\n\nconst evpnOne = new mist.index.SiteSiteEvpnTopology(\"evpn_one\", {\n    siteId: terraformTest.id,\n    name: \"evpn_one\",\n    evpnOptions: {\n        routedAt: \"core\",\n        overlay: {\n            as: 65000,\n        },\n        coreAsBorder: true,\n        autoLoopbackSubnet: \"172.16.192.0/24\",\n        autoLoopbackSubnet6: \"fd33:ab00:2::/64\",\n        perVlanVgaV4Mac: false,\n        underlay: {\n            asBase: 65001,\n            useIpv6: false,\n            subnet: \"10.255.240.0/20\",\n        },\n        autoRouterIdSubnet: \"172.16.254.0/23\",\n    },\n    switches: [\n        {\n            mac: \"020004000001\",\n            role: \"core\",\n        },\n        {\n            mac: \"02000400002\",\n            role: \"core\",\n        },\n        {\n            mac: \"02000400003\",\n            role: \"distribution\",\n        },\n        {\n            mac: \"02000400004\",\n            role: \"distribution\",\n        },\n        {\n            mac: \"02000400005\",\n            role: \"access\",\n        },\n        {\n            mac: \"02000400006\",\n            role: \"access\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mist as mist\n\nevpn_one = mist.index.SiteSiteEvpnTopology(\"evpn_one\",\n    site_id=terraform_test.id,\n    name=evpn_one,\n    evpn_options={\n        routedAt: core,\n        overlay: {\n            as: 65000,\n        },\n        coreAsBorder: True,\n        autoLoopbackSubnet: 172.16.192.0/24,\n        autoLoopbackSubnet6: fd33:ab00:2::/64,\n        perVlanVgaV4Mac: False,\n        underlay: {\n            asBase: 65001,\n            useIpv6: False,\n            subnet: 10.255.240.0/20,\n        },\n        autoRouterIdSubnet: 172.16.254.0/23,\n    },\n    switches=[\n        {\n            mac: 020004000001,\n            role: core,\n        },\n        {\n            mac: 02000400002,\n            role: core,\n        },\n        {\n            mac: 02000400003,\n            role: distribution,\n        },\n        {\n            mac: 02000400004,\n            role: distribution,\n        },\n        {\n            mac: 02000400005,\n            role: access,\n        },\n        {\n            mac: 02000400006,\n            role: access,\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Mist = Pulumi.Mist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var evpnOne = new Mist.Index.SiteSiteEvpnTopology(\"evpn_one\", new()\n    {\n        SiteId = terraformTest.Id,\n        Name = \"evpn_one\",\n        EvpnOptions = \n        {\n            { \"routedAt\", \"core\" },\n            { \"overlay\", \n            {\n                { \"as\", 65000 },\n            } },\n            { \"coreAsBorder\", true },\n            { \"autoLoopbackSubnet\", \"172.16.192.0/24\" },\n            { \"autoLoopbackSubnet6\", \"fd33:ab00:2::/64\" },\n            { \"perVlanVgaV4Mac\", false },\n            { \"underlay\", \n            {\n                { \"asBase\", 65001 },\n                { \"useIpv6\", false },\n                { \"subnet\", \"10.255.240.0/20\" },\n            } },\n            { \"autoRouterIdSubnet\", \"172.16.254.0/23\" },\n        },\n        Switches = new[]\n        {\n            \n            {\n                { \"mac\", \"020004000001\" },\n                { \"role\", \"core\" },\n            },\n            \n            {\n                { \"mac\", \"02000400002\" },\n                { \"role\", \"core\" },\n            },\n            \n            {\n                { \"mac\", \"02000400003\" },\n                { \"role\", \"distribution\" },\n            },\n            \n            {\n                { \"mac\", \"02000400004\" },\n                { \"role\", \"distribution\" },\n            },\n            \n            {\n                { \"mac\", \"02000400005\" },\n                { \"role\", \"access\" },\n            },\n            \n            {\n                { \"mac\", \"02000400006\" },\n                { \"role\", \"access\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mist/sdk/go/mist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mist.NewSiteSiteEvpnTopology(ctx, \"evpn_one\", \u0026mist.SiteSiteEvpnTopologyArgs{\n\t\t\tSiteId: terraformTest.Id,\n\t\t\tName:   \"evpn_one\",\n\t\t\tEvpnOptions: map[string]interface{}{\n\t\t\t\t\"routedAt\": \"core\",\n\t\t\t\t\"overlay\": map[string]interface{}{\n\t\t\t\t\t\"as\": 65000,\n\t\t\t\t},\n\t\t\t\t\"coreAsBorder\":        true,\n\t\t\t\t\"autoLoopbackSubnet\":  \"172.16.192.0/24\",\n\t\t\t\t\"autoLoopbackSubnet6\": \"fd33:ab00:2::/64\",\n\t\t\t\t\"perVlanVgaV4Mac\":     false,\n\t\t\t\t\"underlay\": map[string]interface{}{\n\t\t\t\t\t\"asBase\":  65001,\n\t\t\t\t\t\"useIpv6\": false,\n\t\t\t\t\t\"subnet\":  \"10.255.240.0/20\",\n\t\t\t\t},\n\t\t\t\t\"autoRouterIdSubnet\": \"172.16.254.0/23\",\n\t\t\t},\n\t\t\tSwitches: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"020004000001\",\n\t\t\t\t\t\"role\": \"core\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400002\",\n\t\t\t\t\t\"role\": \"core\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400003\",\n\t\t\t\t\t\"role\": \"distribution\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400004\",\n\t\t\t\t\t\"role\": \"distribution\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400005\",\n\t\t\t\t\t\"role\": \"access\",\n\t\t\t\t},\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"mac\":  \"02000400006\",\n\t\t\t\t\t\"role\": \"access\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mist.siteSiteEvpnTopology;\nimport com.pulumi.mist.SiteSiteEvpnTopologyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var evpnOne = new SiteSiteEvpnTopology(\"evpnOne\", SiteSiteEvpnTopologyArgs.builder()\n            .siteId(terraformTest.id())\n            .name(\"evpn_one\")\n            .evpnOptions(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .switches(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  evpnOne:\n    type: mist:siteSiteEvpnTopology\n    name: evpn_one\n    properties:\n      siteId: ${terraformTest.id}\n      name: evpn_one\n      evpnOptions:\n        routedAt: core\n        overlay:\n          as: 65000\n        coreAsBorder: true\n        autoLoopbackSubnet: 172.16.192.0/24\n        autoLoopbackSubnet6: fd33:ab00:2::/64\n        perVlanVgaV4Mac: false\n        underlay:\n          asBase: 65001\n          useIpv6: false\n          subnet: 10.255.240.0/20\n        autoRouterIdSubnet: 172.16.254.0/23\n      switches:\n        - mac: '020004000001'\n          role: core\n        - mac: '02000400002'\n          role: core\n        - mac: '02000400003'\n          role: distribution\n        - mac: '02000400004'\n          role: distribution\n        - mac: '02000400005'\n          role: access\n        - mac: '02000400006'\n          role: access\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_evpn_topology` with:\n\nEVPN Topology can be imported by specifying the site_id and the evpn_topology_id\n\n```sh\n$ pulumi import junipermist:site/evpnTopology:EvpnTopology evpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "evpnOptions": {
                    "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                    "description": "EVPN Options\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "podNames": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Property key is the pod number\n"
                },
                "siteId": {
                    "type": "string"
                },
                "switches": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/EvpnTopologySwitches:EvpnTopologySwitches"
                    },
                    "description": "Property key can be the switch MAC Address\n"
                }
            },
            "required": [
                "name",
                "orgId",
                "podNames",
                "siteId",
                "switches"
            ],
            "inputProperties": {
                "evpnOptions": {
                    "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                    "description": "EVPN Options\n"
                },
                "name": {
                    "type": "string"
                },
                "podNames": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Property key is the pod number\n"
                },
                "siteId": {
                    "type": "string"
                },
                "switches": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/EvpnTopologySwitches:EvpnTopologySwitches"
                    },
                    "description": "Property key can be the switch MAC Address\n"
                }
            },
            "requiredInputs": [
                "siteId",
                "switches"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EvpnTopology resources.\n",
                "properties": {
                    "evpnOptions": {
                        "$ref": "#/types/junipermist:site/EvpnTopologyEvpnOptions:EvpnTopologyEvpnOptions",
                        "description": "EVPN Options\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "podNames": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Property key is the pod number\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "switches": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/EvpnTopologySwitches:EvpnTopologySwitches"
                        },
                        "description": "Property key can be the switch MAC Address\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/networktemplate:Networktemplate": {
            "description": "This resource manages the Site Network configuration (Switch configuration).\nThe Site Network template can be used to override the Org Network template assign to the site, or to configure common switch settings accross the site without having to create an Org Network template.\n\n\u003e When using the Mist APIs, all the switch settings defined at the site level are stored under the site settings with all the rest of the site configuration (`/api/v1/sites/{site_id}/setting` Mist API Endpoint). To simplify this resource, the `junipermist.site.Networktemplate` resource has been created to centralize all the site level switches related settings.\n\n!\u003e Only ONE `junipermist.site.Networktemplate` resource can be configured per site. If multiple ones are configured, only the last one defined we be succesfully deployed to Mist\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Networktemplate;\nimport com.pulumi.junipermist.site.NetworktemplateArgs;\nimport com.pulumi.junipermist.site.inputs.NetworktemplateRadiusConfigArgs;\nimport com.pulumi.junipermist.site.inputs.NetworktemplateSwitchMatchingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var networktemplateOne = new Networktemplate(\"networktemplateOne\", NetworktemplateArgs.builder()\n            .siteId(terraformTest.id())\n            .dnsServers(            \n                \"8.8.8.8\",\n                \"1.1.1.1\")\n            .dnsSuffixes(\"mycorp.com\")\n            .ntpServers(\"pool.ntp.org\")\n            .additionalConfigCmds(            \n                \"set system hostnam test\",\n                \"set system services ssh root-login allow\")\n            .networks(Map.ofEntries(\n                Map.entry(\"network_one\", Map.of(\"vlanId\", 10)),\n                Map.entry(\"network_two\", Map.of(\"vlanId\", 11))\n            ))\n            .portUsages(Map.of(\"trunk\", Map.ofEntries(\n                Map.entry(\"allNetworks\", true),\n                Map.entry(\"enableQos\", true),\n                Map.entry(\"mode\", \"port_usage_one\"),\n                Map.entry(\"portNetwork\", \"network_one\")\n            )))\n            .radiusConfig(NetworktemplateRadiusConfigArgs.builder()\n                .acct_interim_interval(60)\n                .coa_enabled(true)\n                .network(\"network_one\")\n                .acct_servers(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .auth_servers(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .switchMatching(NetworktemplateSwitchMatchingArgs.builder()\n                .enable(true)\n                .rules(NetworktemplateSwitchMatchingRuleArgs.builder()\n                    .name(\"switch_rule_one\")\n                    .matchName(\"corp\")\n                    .matchNameOffset(3)\n                    .matchRole(\"core\")\n                    .portConfig(Map.of(\"ge-0/0/0-10\", Map.of(\"usage\", \"port_usage_one\")))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  networktemplateOne:\n    type: junipermist:site:Networktemplate\n    name: networktemplate_one\n    properties:\n      siteId: ${terraformTest.id}\n      dnsServers:\n        - 8.8.8.8\n        - 1.1.1.1\n      dnsSuffixes:\n        - mycorp.com\n      ntpServers:\n        - pool.ntp.org\n      additionalConfigCmds:\n        - set system hostnam test\n        - set system services ssh root-login allow\n      networks:\n        network_one:\n          vlanId: 10\n        network_two:\n          vlanId: 11\n      portUsages:\n        trunk:\n          allNetworks: true\n          enableQos: true\n          mode: port_usage_one\n          portNetwork: network_one\n      radiusConfig:\n        acct_interim_interval: 60\n        coa_enabled: true\n        network: network_one\n        acct_servers:\n          - host: 1.2.3.4\n            secret: secret\n        auth_servers:\n          - host: 1.2.3.4\n            secret: secret\n      switchMatching:\n        enable: true\n        rules:\n          - name: switch_rule_one\n            matchName: corp\n            matchNameOffset: 3\n            matchRole: core\n            portConfig:\n              ge-0/0/0-10:\n                usage: port_usage_one\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_networktemplate` with:\n\nSite Network Template can be imported by specifying the site_id\n\n```sh\n$ pulumi import junipermist:site/networktemplate:Networktemplate networktemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a\n```\n\n",
            "properties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclTags:NetworktemplateAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:site/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                },
                "disabledSystemDefinedPortUsages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if some system-default port usages are not desired - namely, ap / iot / uplink\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:site/NetworktemplateMistNac:NetworktemplateMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateNetworks:NetworktemplateNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers\n"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplatePortUsages:NetworktemplatePortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Unique ID of the object instance in the Mist Organnization\n"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                },
                "switchMatching": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                    "description": "defines custom switch configuration based on different criterias\n"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "required": [
                "removeExistingConfigs",
                "siteId"
            ],
            "inputProperties": {
                "aclPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                    }
                },
                "aclTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateAclTags:NetworktemplateAclTags"
                    },
                    "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                },
                "additionalConfigCmds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                },
                "dhcpSnooping": {
                    "$ref": "#/types/junipermist:site/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                },
                "disabledSystemDefinedPortUsages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if some system-default port usages are not desired - namely, ap / iot / uplink\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "dnsSuffixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                },
                "extraRoutes": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                    }
                },
                "extraRoutes6": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                    },
                    "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:site/NetworktemplateMistNac:NetworktemplateMistNac",
                    "description": "enable mist_nac to use radsec\n"
                },
                "networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateNetworks:NetworktemplateNetworks"
                    },
                    "description": "Property key is network name\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of NTP servers\n"
                },
                "ospfAreas": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                    },
                    "description": "Junos OSPF areas\n"
                },
                "portMirroring": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                    },
                    "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                },
                "portUsages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplatePortUsages:NetworktemplatePortUsages"
                    },
                    "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                },
                "radiusConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                    "description": "Junos Radius config\n"
                },
                "remoteSyslog": {
                    "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "siteId": {
                    "type": "string",
                    "description": "Unique ID of the object instance in the Mist Organnization\n"
                },
                "snmpConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                },
                "switchMatching": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                    "description": "defines custom switch configuration based on different criterias\n"
                },
                "switchMgmt": {
                    "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                    "description": "Switch settings\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/junipermist:site/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                },
                "vrfInstances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                    },
                    "description": "Property key is the network name\n"
                }
            },
            "requiredInputs": [
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Networktemplate resources.\n",
                "properties": {
                    "aclPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:site/NetworktemplateAclPolicy:NetworktemplateAclPolicy"
                        }
                    },
                    "aclTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateAclTags:NetworktemplateAclTags"
                        },
                        "description": "ACL Tags to identify traffic source or destination. Key name is the tag name\n"
                    },
                    "additionalConfigCmds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "additional CLI commands to append to the generated Junos config. **Note**: no check is done\n"
                    },
                    "dhcpSnooping": {
                        "$ref": "#/types/junipermist:site/NetworktemplateDhcpSnooping:NetworktemplateDhcpSnooping"
                    },
                    "disabledSystemDefinedPortUsages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if some system-default port usages are not desired - namely, ap / iot / uplink\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "dnsSuffixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting\n"
                    },
                    "extraRoutes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes:NetworktemplateExtraRoutes"
                        }
                    },
                    "extraRoutes6": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateExtraRoutes6:NetworktemplateExtraRoutes6"
                        },
                        "description": "Property key is the destination CIDR (e.g. \"2a02:1234:420a:10c9::/64\")\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:site/NetworktemplateMistNac:NetworktemplateMistNac",
                        "description": "enable mist_nac to use radsec\n"
                    },
                    "networks": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateNetworks:NetworktemplateNetworks"
                        },
                        "description": "Property key is network name\n"
                    },
                    "ntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of NTP servers\n"
                    },
                    "ospfAreas": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateOspfAreas:NetworktemplateOspfAreas"
                        },
                        "description": "Junos OSPF areas\n"
                    },
                    "portMirroring": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplatePortMirroring:NetworktemplatePortMirroring"
                        },
                        "description": "Property key is the port mirroring instance name. `port_mirroring` can be added under device/site settings. It takes\ninterface and ports as input for ingress, interface as input for egress and can take interface and port as output. A\nmaximum 4 port mirrorings is allowed\n"
                    },
                    "portUsages": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplatePortUsages:NetworktemplatePortUsages"
                        },
                        "description": "Property key is the port usage name. Defines the profiles of port configuration configured on the switch\n"
                    },
                    "radiusConfig": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRadiusConfig:NetworktemplateRadiusConfig",
                        "description": "Junos Radius config\n"
                    },
                    "remoteSyslog": {
                        "$ref": "#/types/junipermist:site/NetworktemplateRemoteSyslog:NetworktemplateRemoteSyslog"
                    },
                    "removeExistingConfigs": {
                        "type": "boolean",
                        "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                    },
                    "siteId": {
                        "type": "string",
                        "description": "Unique ID of the object instance in the Mist Organnization\n"
                    },
                    "snmpConfig": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSnmpConfig:NetworktemplateSnmpConfig"
                    },
                    "switchMatching": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMatching:NetworktemplateSwitchMatching",
                        "description": "defines custom switch configuration based on different criterias\n"
                    },
                    "switchMgmt": {
                        "$ref": "#/types/junipermist:site/NetworktemplateSwitchMgmt:NetworktemplateSwitchMgmt",
                        "description": "Switch settings\n"
                    },
                    "vrfConfig": {
                        "$ref": "#/types/junipermist:site/NetworktemplateVrfConfig:NetworktemplateVrfConfig"
                    },
                    "vrfInstances": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/NetworktemplateVrfInstances:NetworktemplateVrfInstances"
                        },
                        "description": "Property key is the network name\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/psk:Psk": {
            "description": "This data source provides the list of Site PSKs.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst pskOne = new junipermist.site.Psk(\"psk_one\", {\n    siteId: terraformSite.id,\n    name: \"JNP-FR-PAR\",\n    passphrase: \"secretone\",\n    ssid: wlanOne.ssid,\n    usage: \"multi\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\npsk_one = junipermist.site.Psk(\"psk_one\",\n    site_id=terraform_site[\"id\"],\n    name=\"JNP-FR-PAR\",\n    passphrase=\"secretone\",\n    ssid=wlan_one[\"ssid\"],\n    usage=\"multi\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pskOne = new JuniperMist.Site.Psk(\"psk_one\", new()\n    {\n        SiteId = terraformSite.Id,\n        Name = \"JNP-FR-PAR\",\n        Passphrase = \"secretone\",\n        Ssid = wlanOne.Ssid,\n        Usage = \"multi\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewPsk(ctx, \"psk_one\", \u0026site.PskArgs{\n\t\t\tSiteId:     pulumi.Any(terraformSite.Id),\n\t\t\tName:       pulumi.String(\"JNP-FR-PAR\"),\n\t\t\tPassphrase: pulumi.String(\"secretone\"),\n\t\t\tSsid:       pulumi.Any(wlanOne.Ssid),\n\t\t\tUsage:      pulumi.String(\"multi\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Psk;\nimport com.pulumi.junipermist.site.PskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pskOne = new Psk(\"pskOne\", PskArgs.builder()\n            .siteId(terraformSite.id())\n            .name(\"JNP-FR-PAR\")\n            .passphrase(\"secretone\")\n            .ssid(wlanOne.ssid())\n            .usage(\"multi\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pskOne:\n    type: junipermist:site:Psk\n    name: psk_one\n    properties:\n      siteId: ${terraformSite.id}\n      name: JNP-FR-PAR\n      passphrase: secretone\n      ssid: ${wlanOne.ssid}\n      usage: multi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_psk` with:\n\nSite PSK can be imported by specifying the site_id and the psk_id\n\n```sh\n$ pulumi import junipermist:site/psk:Psk psk_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n",
                    "secret": true
                },
                "orgId": {
                    "type": "string"
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                    "secret": true
                },
                "role": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "required": [
                "expireTime",
                "name",
                "notifyExpiry",
                "orgId",
                "passphrase",
                "siteId",
                "ssid",
                "usage"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "email to send psk expiring notifications to\n"
                },
                "expireTime": {
                    "type": "integer",
                    "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                },
                "expiryNotificationTime": {
                    "type": "integer",
                    "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                },
                "mac": {
                    "type": "string",
                    "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                },
                "name": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "notifyExpiry": {
                    "type": "boolean",
                    "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                },
                "notifyOnCreateOrEdit": {
                    "type": "boolean",
                    "description": "If set to true, notification will be sent when psk is created or edited\n"
                },
                "oldPassphrase": {
                    "type": "string",
                    "description": "previous passphrase of the PSK if it has been rotated\n",
                    "secret": true
                },
                "passphrase": {
                    "type": "string",
                    "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                    "secret": true
                },
                "role": {
                    "type": "string"
                },
                "siteId": {
                    "type": "string"
                },
                "ssid": {
                    "type": "string",
                    "description": "SSID this PSK should be applicable to\n"
                },
                "usage": {
                    "type": "string",
                    "description": "enum: `multi`, `single`\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "passphrase",
                "siteId",
                "ssid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Psk resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "email to send psk expiring notifications to\n"
                    },
                    "expireTime": {
                        "type": "integer",
                        "description": "Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)\n"
                    },
                    "expiryNotificationTime": {
                        "type": "integer",
                        "description": "Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "note": {
                        "type": "string"
                    },
                    "notifyExpiry": {
                        "type": "boolean",
                        "description": "If set to true, reminder notification will be sent when psk is about to expire\n"
                    },
                    "notifyOnCreateOrEdit": {
                        "type": "boolean",
                        "description": "If set to true, notification will be sent when psk is created or edited\n"
                    },
                    "oldPassphrase": {
                        "type": "string",
                        "description": "previous passphrase of the PSK if it has been rotated\n",
                        "secret": true
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "passphrase": {
                        "type": "string",
                        "description": "passphrase of the PSK (8-63 character or 64 in hex)\n",
                        "secret": true
                    },
                    "role": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "ssid": {
                        "type": "string",
                        "description": "SSID this PSK should be applicable to\n"
                    },
                    "usage": {
                        "type": "string",
                        "description": "enum: `multi`, `single`\n"
                    },
                    "vlanId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/setting:Setting": {
            "description": "This resource manages the Site Settings.\nThe Site Settings can used to customize the Site configuration and assign Site Variables (Sites Variables can be reused in configuration templates)\n\n\u003e When using the Mist APIs, all the switch settings defined at the site level are stored under the site settings with all the rest of the site configuration (`/api/v1/sites/{site_id}/setting` Mist API Endpoint). To simplify this resource, all the site level switches related settings are moved into the `junipermist.site.Networktemplate` resource\n\n!\u003e Only ONE `junipermist.site.Setting` resource can be configured per site. If multiple ones are configured, only the last one defined we be succesfully deployed to Mist\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Setting;\nimport com.pulumi.junipermist.site.SettingArgs;\nimport com.pulumi.junipermist.site.inputs.SettingAutoUpgradeArgs;\nimport com.pulumi.junipermist.site.inputs.SettingProxyArgs;\nimport com.pulumi.junipermist.site.inputs.SettingRogueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var siteOne = new Setting(\"siteOne\", SettingArgs.builder()\n            .siteId(terraformSite.id())\n            .apUpdownThreshold(5)\n            .deviceUpdownThreshold(5)\n            .autoUpgrade(SettingAutoUpgradeArgs.builder()\n                .enabled(true)\n                .day_of_week(\"tue\")\n                .time_of_day(\"02:00\")\n                .version(\"beta\")\n                .build())\n            .configAutoRevert(true)\n            .persistConfigOnDevice(true)\n            .proxy(SettingProxyArgs.builder()\n                .url(\"http://myproxy:3128\")\n                .build())\n            .rogue(SettingRogueArgs.builder()\n                .enabled(true)\n                .honeypot_enabled(true)\n                .min_duration(5)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  siteOne:\n    type: junipermist:site:Setting\n    name: site_one\n    properties:\n      siteId: ${terraformSite.id}\n      apUpdownThreshold: 5\n      deviceUpdownThreshold: 5\n      autoUpgrade:\n        enabled: true\n        day_of_week: tue\n        time_of_day: 02:00\n        version: beta\n      configAutoRevert: true\n      persistConfigOnDevice: true\n      proxy:\n        url: http://myproxy:3128\n      rogue:\n        enabled: true\n        honeypot_enabled: true\n        min_duration: 5\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_setting` with:\n\nSite Setting can be imported by specifying the site_id\n\n```sh\n$ pulumi import junipermist:site/setting:Setting site_setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a\n```\n\n",
            "properties": {
                "analytic": {
                    "$ref": "#/types/junipermist:site/SettingAnalytic:SettingAnalytic"
                },
                "apUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/junipermist:site/SettingAutoUpgrade:SettingAutoUpgrade",
                    "description": "Auto Upgrade Settings\n"
                },
                "blacklistUrl": {
                    "type": "string"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:site/SettingBleConfig:SettingBleConfig",
                    "description": "BLE AP settings\n"
                },
                "configAutoRevert": {
                    "type": "boolean",
                    "description": "whether to enable ap auto config revert\n"
                },
                "configPushPolicy": {
                    "$ref": "#/types/junipermist:site/SettingConfigPushPolicy:SettingConfigPushPolicy",
                    "description": "mist also uses some heuristic rules to prevent destructive configs from being pushed\n"
                },
                "criticalUrlMonitoring": {
                    "$ref": "#/types/junipermist:site/SettingCriticalUrlMonitoring:SettingCriticalUrlMonitoring",
                    "description": "you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health\n"
                },
                "deviceUpdownThreshold": {
                    "type": "integer",
                    "description": "by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type\nis desired, use the following\n"
                },
                "engagement": {
                    "$ref": "#/types/junipermist:site/SettingEngagement:SettingEngagement",
                    "description": "**Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow\nmultiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged\n(14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,\nbounce = “Visitor”, engaged = “Associates”, stationed = “Assets”\n"
                },
                "gatewayMgmt": {
                    "$ref": "#/types/junipermist:site/SettingGatewayMgmt:SettingGatewayMgmt",
                    "description": "Gateway Site settings\n"
                },
                "gatewayUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:site/SettingLed:SettingLed",
                    "description": "LED AP settings\n"
                },
                "occupancy": {
                    "$ref": "#/types/junipermist:site/SettingOccupancy:SettingOccupancy",
                    "description": "Occupancy Analytics settings\n"
                },
                "persistConfigOnDevice": {
                    "type": "boolean",
                    "description": "whether to store the config on AP\n"
                },
                "proxy": {
                    "$ref": "#/types/junipermist:site/SettingProxy:SettingProxy",
                    "description": "Proxy Configuration to talk to Mist\n"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "reportGatt": {
                    "type": "boolean",
                    "description": "whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,\nserial number, battery %, temperature, humidity)\n"
                },
                "rogue": {
                    "$ref": "#/types/junipermist:site/SettingRogue:SettingRogue",
                    "description": "Rogue site settings\n"
                },
                "rtsa": {
                    "$ref": "#/types/junipermist:site/SettingRtsa:SettingRtsa",
                    "description": "managed mobility\n"
                },
                "simpleAlert": {
                    "$ref": "#/types/junipermist:site/SettingSimpleAlert:SettingSimpleAlert",
                    "description": "Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute\nwindow, there are more than Y distinct client encountring over X failures\n"
                },
                "siteId": {
                    "type": "string"
                },
                "skyatp": {
                    "$ref": "#/types/junipermist:site/SettingSkyatp:SettingSkyatp"
                },
                "srxApp": {
                    "$ref": "#/types/junipermist:site/SettingSrxApp:SettingSrxApp"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see\nOrg:Setting)\n"
                },
                "ssr": {
                    "$ref": "#/types/junipermist:site/SettingSsr:SettingSsr"
                },
                "switchUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "syntheticTest": {
                    "$ref": "#/types/junipermist:site/SettingSyntheticTest:SettingSyntheticTest"
                },
                "trackAnonymousDevices": {
                    "type": "boolean",
                    "description": "whether to track anonymous BLE assets (requires ‘track_asset’ enabled)\n"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:site/SettingUplinkPortConfig:SettingUplinkPortConfig"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "vna": {
                    "$ref": "#/types/junipermist:site/SettingVna:SettingVna"
                },
                "vsInstance": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/SettingVsInstance:SettingVsInstance"
                    },
                    "description": "optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name\n"
                },
                "wanVna": {
                    "$ref": "#/types/junipermist:site/SettingWanVna:SettingWanVna"
                },
                "watchedStationUrl": {
                    "type": "string"
                },
                "whitelistUrl": {
                    "type": "string"
                },
                "wids": {
                    "$ref": "#/types/junipermist:site/SettingWids:SettingWids",
                    "description": "WIDS site settings\n"
                },
                "wifi": {
                    "$ref": "#/types/junipermist:site/SettingWifi:SettingWifi",
                    "description": "Wi-Fi site settings\n"
                },
                "wiredVna": {
                    "$ref": "#/types/junipermist:site/SettingWiredVna:SettingWiredVna"
                },
                "zoneOccupancyAlert": {
                    "$ref": "#/types/junipermist:site/SettingZoneOccupancyAlert:SettingZoneOccupancyAlert",
                    "description": "Zone Occupancy alert site settings\n"
                }
            },
            "required": [
                "apUpdownThreshold",
                "blacklistUrl",
                "configAutoRevert",
                "deviceUpdownThreshold",
                "gatewayUpdownThreshold",
                "persistConfigOnDevice",
                "removeExistingConfigs",
                "reportGatt",
                "siteId",
                "sshKeys",
                "switchUpdownThreshold",
                "trackAnonymousDevices",
                "watchedStationUrl",
                "whitelistUrl"
            ],
            "inputProperties": {
                "analytic": {
                    "$ref": "#/types/junipermist:site/SettingAnalytic:SettingAnalytic"
                },
                "apUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                },
                "autoUpgrade": {
                    "$ref": "#/types/junipermist:site/SettingAutoUpgrade:SettingAutoUpgrade",
                    "description": "Auto Upgrade Settings\n"
                },
                "bleConfig": {
                    "$ref": "#/types/junipermist:site/SettingBleConfig:SettingBleConfig",
                    "description": "BLE AP settings\n"
                },
                "configAutoRevert": {
                    "type": "boolean",
                    "description": "whether to enable ap auto config revert\n"
                },
                "configPushPolicy": {
                    "$ref": "#/types/junipermist:site/SettingConfigPushPolicy:SettingConfigPushPolicy",
                    "description": "mist also uses some heuristic rules to prevent destructive configs from being pushed\n"
                },
                "criticalUrlMonitoring": {
                    "$ref": "#/types/junipermist:site/SettingCriticalUrlMonitoring:SettingCriticalUrlMonitoring",
                    "description": "you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health\n"
                },
                "deviceUpdownThreshold": {
                    "type": "integer",
                    "description": "by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type\nis desired, use the following\n"
                },
                "engagement": {
                    "$ref": "#/types/junipermist:site/SettingEngagement:SettingEngagement",
                    "description": "**Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow\nmultiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged\n(14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,\nbounce = “Visitor”, engaged = “Associates”, stationed = “Assets”\n"
                },
                "gatewayMgmt": {
                    "$ref": "#/types/junipermist:site/SettingGatewayMgmt:SettingGatewayMgmt",
                    "description": "Gateway Site settings\n"
                },
                "gatewayUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "led": {
                    "$ref": "#/types/junipermist:site/SettingLed:SettingLed",
                    "description": "LED AP settings\n"
                },
                "occupancy": {
                    "$ref": "#/types/junipermist:site/SettingOccupancy:SettingOccupancy",
                    "description": "Occupancy Analytics settings\n"
                },
                "persistConfigOnDevice": {
                    "type": "boolean",
                    "description": "whether to store the config on AP\n"
                },
                "proxy": {
                    "$ref": "#/types/junipermist:site/SettingProxy:SettingProxy",
                    "description": "Proxy Configuration to talk to Mist\n"
                },
                "removeExistingConfigs": {
                    "type": "boolean",
                    "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                },
                "reportGatt": {
                    "type": "boolean",
                    "description": "whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,\nserial number, battery %, temperature, humidity)\n"
                },
                "rogue": {
                    "$ref": "#/types/junipermist:site/SettingRogue:SettingRogue",
                    "description": "Rogue site settings\n"
                },
                "rtsa": {
                    "$ref": "#/types/junipermist:site/SettingRtsa:SettingRtsa",
                    "description": "managed mobility\n"
                },
                "simpleAlert": {
                    "$ref": "#/types/junipermist:site/SettingSimpleAlert:SettingSimpleAlert",
                    "description": "Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute\nwindow, there are more than Y distinct client encountring over X failures\n"
                },
                "siteId": {
                    "type": "string"
                },
                "skyatp": {
                    "$ref": "#/types/junipermist:site/SettingSkyatp:SettingSkyatp"
                },
                "srxApp": {
                    "$ref": "#/types/junipermist:site/SettingSrxApp:SettingSrxApp"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see\nOrg:Setting)\n"
                },
                "ssr": {
                    "$ref": "#/types/junipermist:site/SettingSsr:SettingSsr"
                },
                "switchUpdownThreshold": {
                    "type": "integer",
                    "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                },
                "syntheticTest": {
                    "$ref": "#/types/junipermist:site/SettingSyntheticTest:SettingSyntheticTest"
                },
                "trackAnonymousDevices": {
                    "type": "boolean",
                    "description": "whether to track anonymous BLE assets (requires ‘track_asset’ enabled)\n"
                },
                "uplinkPortConfig": {
                    "$ref": "#/types/junipermist:site/SettingUplinkPortConfig:SettingUplinkPortConfig"
                },
                "vars": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                },
                "vna": {
                    "$ref": "#/types/junipermist:site/SettingVna:SettingVna"
                },
                "vsInstance": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/SettingVsInstance:SettingVsInstance"
                    },
                    "description": "optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name\n"
                },
                "wanVna": {
                    "$ref": "#/types/junipermist:site/SettingWanVna:SettingWanVna"
                },
                "wids": {
                    "$ref": "#/types/junipermist:site/SettingWids:SettingWids",
                    "description": "WIDS site settings\n"
                },
                "wifi": {
                    "$ref": "#/types/junipermist:site/SettingWifi:SettingWifi",
                    "description": "Wi-Fi site settings\n"
                },
                "wiredVna": {
                    "$ref": "#/types/junipermist:site/SettingWiredVna:SettingWiredVna"
                },
                "zoneOccupancyAlert": {
                    "$ref": "#/types/junipermist:site/SettingZoneOccupancyAlert:SettingZoneOccupancyAlert",
                    "description": "Zone Occupancy alert site settings\n"
                }
            },
            "requiredInputs": [
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "analytic": {
                        "$ref": "#/types/junipermist:site/SettingAnalytic:SettingAnalytic"
                    },
                    "apUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "autoUpgrade": {
                        "$ref": "#/types/junipermist:site/SettingAutoUpgrade:SettingAutoUpgrade",
                        "description": "Auto Upgrade Settings\n"
                    },
                    "blacklistUrl": {
                        "type": "string"
                    },
                    "bleConfig": {
                        "$ref": "#/types/junipermist:site/SettingBleConfig:SettingBleConfig",
                        "description": "BLE AP settings\n"
                    },
                    "configAutoRevert": {
                        "type": "boolean",
                        "description": "whether to enable ap auto config revert\n"
                    },
                    "configPushPolicy": {
                        "$ref": "#/types/junipermist:site/SettingConfigPushPolicy:SettingConfigPushPolicy",
                        "description": "mist also uses some heuristic rules to prevent destructive configs from being pushed\n"
                    },
                    "criticalUrlMonitoring": {
                        "$ref": "#/types/junipermist:site/SettingCriticalUrlMonitoring:SettingCriticalUrlMonitoring",
                        "description": "you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health\n"
                    },
                    "deviceUpdownThreshold": {
                        "type": "integer",
                        "description": "by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type\nis desired, use the following\n"
                    },
                    "engagement": {
                        "$ref": "#/types/junipermist:site/SettingEngagement:SettingEngagement",
                        "description": "**Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow\nmultiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged\n(14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,\nbounce = “Visitor”, engaged = “Associates”, stationed = “Assets”\n"
                    },
                    "gatewayMgmt": {
                        "$ref": "#/types/junipermist:site/SettingGatewayMgmt:SettingGatewayMgmt",
                        "description": "Gateway Site settings\n"
                    },
                    "gatewayUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "led": {
                        "$ref": "#/types/junipermist:site/SettingLed:SettingLed",
                        "description": "LED AP settings\n"
                    },
                    "occupancy": {
                        "$ref": "#/types/junipermist:site/SettingOccupancy:SettingOccupancy",
                        "description": "Occupancy Analytics settings\n"
                    },
                    "persistConfigOnDevice": {
                        "type": "boolean",
                        "description": "whether to store the config on AP\n"
                    },
                    "proxy": {
                        "$ref": "#/types/junipermist:site/SettingProxy:SettingProxy",
                        "description": "Proxy Configuration to talk to Mist\n"
                    },
                    "removeExistingConfigs": {
                        "type": "boolean",
                        "description": "by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled\n"
                    },
                    "reportGatt": {
                        "type": "boolean",
                        "description": "whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,\nserial number, battery %, temperature, humidity)\n"
                    },
                    "rogue": {
                        "$ref": "#/types/junipermist:site/SettingRogue:SettingRogue",
                        "description": "Rogue site settings\n"
                    },
                    "rtsa": {
                        "$ref": "#/types/junipermist:site/SettingRtsa:SettingRtsa",
                        "description": "managed mobility\n"
                    },
                    "simpleAlert": {
                        "$ref": "#/types/junipermist:site/SettingSimpleAlert:SettingSimpleAlert",
                        "description": "Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute\nwindow, there are more than Y distinct client encountring over X failures\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "skyatp": {
                        "$ref": "#/types/junipermist:site/SettingSkyatp:SettingSkyatp"
                    },
                    "srxApp": {
                        "$ref": "#/types/junipermist:site/SettingSrxApp:SettingSrxApp"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see\nOrg:Setting)\n"
                    },
                    "ssr": {
                        "$ref": "#/types/junipermist:site/SettingSsr:SettingSsr"
                    },
                    "switchUpdownThreshold": {
                        "type": "integer",
                        "description": "enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and\n`device_updown_threshold` is ignored.\n"
                    },
                    "syntheticTest": {
                        "$ref": "#/types/junipermist:site/SettingSyntheticTest:SettingSyntheticTest"
                    },
                    "trackAnonymousDevices": {
                        "type": "boolean",
                        "description": "whether to track anonymous BLE assets (requires ‘track_asset’ enabled)\n"
                    },
                    "uplinkPortConfig": {
                        "$ref": "#/types/junipermist:site/SettingUplinkPortConfig:SettingUplinkPortConfig"
                    },
                    "vars": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "a dictionary of name-\u003evalue, the vars can then be used in Wlans. This can overwrite those from Site Vars\n"
                    },
                    "vna": {
                        "$ref": "#/types/junipermist:site/SettingVna:SettingVna"
                    },
                    "vsInstance": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/SettingVsInstance:SettingVsInstance"
                        },
                        "description": "optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name\n"
                    },
                    "wanVna": {
                        "$ref": "#/types/junipermist:site/SettingWanVna:SettingWanVna"
                    },
                    "watchedStationUrl": {
                        "type": "string"
                    },
                    "whitelistUrl": {
                        "type": "string"
                    },
                    "wids": {
                        "$ref": "#/types/junipermist:site/SettingWids:SettingWids",
                        "description": "WIDS site settings\n"
                    },
                    "wifi": {
                        "$ref": "#/types/junipermist:site/SettingWifi:SettingWifi",
                        "description": "Wi-Fi site settings\n"
                    },
                    "wiredVna": {
                        "$ref": "#/types/junipermist:site/SettingWiredVna:SettingWiredVna"
                    },
                    "zoneOccupancyAlert": {
                        "$ref": "#/types/junipermist:site/SettingZoneOccupancyAlert:SettingZoneOccupancyAlert",
                        "description": "Zone Occupancy alert site settings\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/webhook:Webhook": {
            "description": "This resource manages Site Webhooks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst webhookOne = new junipermist.site.Webhook(\"webhook_one\", {\n    siteId: terraformSite.id,\n    name: \"webhook_one\",\n    type: \"http-post\",\n    url: \"https://myserver.com:4321/\",\n    verifyCert: false,\n    enabled: true,\n    topics: [\n        \"device-events\",\n        \"alarms\",\n        \"audits\",\n        \"client-join\",\n        \"client-info\",\n        \"client-sessions\",\n        \"device-updowns\",\n        \"mxedge-events\",\n        \"nac-events\",\n        \"nac-accounting\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwebhook_one = junipermist.site.Webhook(\"webhook_one\",\n    site_id=terraform_site[\"id\"],\n    name=\"webhook_one\",\n    type=\"http-post\",\n    url=\"https://myserver.com:4321/\",\n    verify_cert=False,\n    enabled=True,\n    topics=[\n        \"device-events\",\n        \"alarms\",\n        \"audits\",\n        \"client-join\",\n        \"client-info\",\n        \"client-sessions\",\n        \"device-updowns\",\n        \"mxedge-events\",\n        \"nac-events\",\n        \"nac-accounting\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhookOne = new JuniperMist.Site.Webhook(\"webhook_one\", new()\n    {\n        SiteId = terraformSite.Id,\n        Name = \"webhook_one\",\n        Type = \"http-post\",\n        Url = \"https://myserver.com:4321/\",\n        VerifyCert = false,\n        Enabled = true,\n        Topics = new[]\n        {\n            \"device-events\",\n            \"alarms\",\n            \"audits\",\n            \"client-join\",\n            \"client-info\",\n            \"client-sessions\",\n            \"device-updowns\",\n            \"mxedge-events\",\n            \"nac-events\",\n            \"nac-accounting\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewWebhook(ctx, \"webhook_one\", \u0026site.WebhookArgs{\n\t\t\tSiteId:     pulumi.Any(terraformSite.Id),\n\t\t\tName:       pulumi.String(\"webhook_one\"),\n\t\t\tType:       pulumi.String(\"http-post\"),\n\t\t\tUrl:        pulumi.String(\"https://myserver.com:4321/\"),\n\t\t\tVerifyCert: pulumi.Bool(false),\n\t\t\tEnabled:    pulumi.Bool(true),\n\t\t\tTopics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"device-events\"),\n\t\t\t\tpulumi.String(\"alarms\"),\n\t\t\t\tpulumi.String(\"audits\"),\n\t\t\t\tpulumi.String(\"client-join\"),\n\t\t\t\tpulumi.String(\"client-info\"),\n\t\t\t\tpulumi.String(\"client-sessions\"),\n\t\t\t\tpulumi.String(\"device-updowns\"),\n\t\t\t\tpulumi.String(\"mxedge-events\"),\n\t\t\t\tpulumi.String(\"nac-events\"),\n\t\t\t\tpulumi.String(\"nac-accounting\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Webhook;\nimport com.pulumi.junipermist.site.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var webhookOne = new Webhook(\"webhookOne\", WebhookArgs.builder()\n            .siteId(terraformSite.id())\n            .name(\"webhook_one\")\n            .type(\"http-post\")\n            .url(\"https://myserver.com:4321/\")\n            .verifyCert(false)\n            .enabled(true)\n            .topics(            \n                \"device-events\",\n                \"alarms\",\n                \"audits\",\n                \"client-join\",\n                \"client-info\",\n                \"client-sessions\",\n                \"device-updowns\",\n                \"mxedge-events\",\n                \"nac-events\",\n                \"nac-accounting\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  webhookOne:\n    type: junipermist:site:Webhook\n    name: webhook_one\n    properties:\n      siteId: ${terraformSite.id}\n      name: webhook_one\n      type: http-post\n      url: https://myserver.com:4321/\n      verifyCert: false\n      enabled: true\n      topics:\n        - device-events\n        - alarms\n        - audits\n        - client-join\n        - client-info\n        - client-sessions\n        - device-updowns\n        - mxedge-events\n        - nac-events\n        - nac-accounting\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_webhook` with:\n\nSite Webhook can be imported by specifying the site_id and the webhook_id\n\n```sh\n$ pulumi import junipermist:site/webhook:Webhook webhook_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                    "secret": true
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n",
                    "secret": true
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "orgId": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n",
                    "secret": true
                },
                "siteId": {
                    "type": "string"
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "enum: `alarms`, `asset-raw`, `asset-raw-rssi`, `audits`, `client-info`, `client-join`, `client-latency`, `client-sessions`, `device-updowns`, `device-events`, `discovered-raw-rssi`, `location`, `location_asset`, `location_centrak`, `location_client`, `location_sdk`, `location_unclient`, `mxedge-events`, `nac-accounting`, `nac_events`, `occupancy-alerts`, `rssizone`, `sdkclient_scan_data`, `site_sle`, `vbeacon`, `wifi-conn-raw`, `wifi-unconn-raw`, `zone`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "orgId",
                "siteId",
                "topics",
                "type",
                "url",
                "verifyCert"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "whether webhook is enabled\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the webhook\n"
                },
                "oauth2ClientId": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                },
                "oauth2ClientSecret": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                    "secret": true
                },
                "oauth2GrantType": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                },
                "oauth2Password": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n",
                    "secret": true
                },
                "oauth2Scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                },
                "oauth2TokenUrl": {
                    "type": "string",
                    "description": "required when `type`==`oauth2`\n"
                },
                "oauth2Username": {
                    "type": "string",
                    "description": "required when `oauth2_grant_type`==`password`\n"
                },
                "secret": {
                    "type": "string",
                    "description": "only if `type`=`http-post`\n",
                    "secret": true
                },
                "siteId": {
                    "type": "string"
                },
                "splunkToken": {
                    "type": "string",
                    "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "enum: `alarms`, `asset-raw`, `asset-raw-rssi`, `audits`, `client-info`, `client-join`, `client-latency`, `client-sessions`, `device-updowns`, `device-events`, `discovered-raw-rssi`, `location`, `location_asset`, `location_centrak`, `location_client`, `location_sdk`, `location_unclient`, `mxedge-events`, `nac-accounting`, `nac_events`, `occupancy-alerts`, `rssizone`, `sdkclient_scan_data`, `site_sle`, `vbeacon`, `wifi-conn-raw`, `wifi-unconn-raw`, `zone`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                },
                "url": {
                    "type": "string"
                },
                "verifyCert": {
                    "type": "boolean",
                    "description": "when url uses HTTPS, whether to verify the certificate\n"
                }
            },
            "requiredInputs": [
                "siteId",
                "topics",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "whether webhook is enabled\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "if `type`=`http-post`, additional custom HTTP headers to add\nthe headers name and value must be string, total bytes of headers name and value must be less than 1000\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the webhook\n"
                    },
                    "oauth2ClientId": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`client_credentials`\n"
                    },
                    "oauth2ClientSecret": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`client_credentials`\n",
                        "secret": true
                    },
                    "oauth2GrantType": {
                        "type": "string",
                        "description": "required when `type`==`oauth2`. enum: `client_credentials`, `password`\n"
                    },
                    "oauth2Password": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`password`\n",
                        "secret": true
                    },
                    "oauth2Scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required when `type`==`oauth2`, if provided, will be used in the token request\n"
                    },
                    "oauth2TokenUrl": {
                        "type": "string",
                        "description": "required when `type`==`oauth2`\n"
                    },
                    "oauth2Username": {
                        "type": "string",
                        "description": "required when `oauth2_grant_type`==`password`\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string",
                        "description": "only if `type`=`http-post`\n",
                        "secret": true
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "splunkToken": {
                        "type": "string",
                        "description": "required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if\nthe webhook receiver is configured to accept it.'\n",
                        "secret": true
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "enum: `alarms`, `asset-raw`, `asset-raw-rssi`, `audits`, `client-info`, `client-join`, `client-latency`, `client-sessions`, `device-updowns`, `device-events`, `discovered-raw-rssi`, `location`, `location_asset`, `location_centrak`, `location_client`, `location_sdk`, `location_unclient`, `mxedge-events`, `nac-accounting`, `nac_events`, `occupancy-alerts`, `rssizone`, `sdkclient_scan_data`, `site_sle`, `vbeacon`, `wifi-conn-raw`, `wifi-unconn-raw`, `zone`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`\n"
                    },
                    "url": {
                        "type": "string"
                    },
                    "verifyCert": {
                        "type": "boolean",
                        "description": "when url uses HTTPS, whether to verify the certificate\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/wlan:Wlan": {
            "description": "This resource manages the Site Wlans.\nThe WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wlanOne = new junipermist.site.Wlan(\"wlan_one\", {\n    ssid: \"wlan_one\",\n    siteId: terraformTest.id,\n    bands: [\n        \"5\",\n        \"6\",\n    ],\n    vlanEnabled: true,\n    vlanId: \"143\",\n    wlanLimitUp: 10000,\n    wlanLimitDown: 20000,\n    clientLimitUp: 512,\n    clientLimitDown: 1000,\n    auth: {\n        type: \"psk\",\n        psk: \"secretpsk\",\n    },\n    \"interface\": \"all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwlan_one = junipermist.site.Wlan(\"wlan_one\",\n    ssid=\"wlan_one\",\n    site_id=terraform_test[\"id\"],\n    bands=[\n        \"5\",\n        \"6\",\n    ],\n    vlan_enabled=True,\n    vlan_id=\"143\",\n    wlan_limit_up=10000,\n    wlan_limit_down=20000,\n    client_limit_up=512,\n    client_limit_down=1000,\n    auth={\n        \"type\": \"psk\",\n        \"psk\": \"secretpsk\",\n    },\n    interface=\"all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wlanOne = new JuniperMist.Site.Wlan(\"wlan_one\", new()\n    {\n        Ssid = \"wlan_one\",\n        SiteId = terraformTest.Id,\n        Bands = new[]\n        {\n            \"5\",\n            \"6\",\n        },\n        VlanEnabled = true,\n        VlanId = \"143\",\n        WlanLimitUp = 10000,\n        WlanLimitDown = 20000,\n        ClientLimitUp = 512,\n        ClientLimitDown = 1000,\n        Auth = new JuniperMist.Site.Inputs.WlanAuthArgs\n        {\n            Type = \"psk\",\n            Psk = \"secretpsk\",\n        },\n        Interface = \"all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewWlan(ctx, \"wlan_one\", \u0026site.WlanArgs{\n\t\t\tSsid:   pulumi.String(\"wlan_one\"),\n\t\t\tSiteId: pulumi.Any(terraformTest.Id),\n\t\t\tBands: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"5\"),\n\t\t\t\tpulumi.String(\"6\"),\n\t\t\t},\n\t\t\tVlanEnabled:     pulumi.Bool(true),\n\t\t\tVlanId:          pulumi.String(\"143\"),\n\t\t\tWlanLimitUp:     pulumi.Int(10000),\n\t\t\tWlanLimitDown:   pulumi.Int(20000),\n\t\t\tClientLimitUp:   pulumi.Int(512),\n\t\t\tClientLimitDown: pulumi.Int(1000),\n\t\t\tAuth: \u0026site.WlanAuthArgs{\n\t\t\t\tType: pulumi.String(\"psk\"),\n\t\t\t\tPsk:  pulumi.String(\"secretpsk\"),\n\t\t\t},\n\t\t\tInterface: pulumi.String(\"all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Wlan;\nimport com.pulumi.junipermist.site.WlanArgs;\nimport com.pulumi.junipermist.site.inputs.WlanAuthArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlanOne = new Wlan(\"wlanOne\", WlanArgs.builder()\n            .ssid(\"wlan_one\")\n            .siteId(terraformTest.id())\n            .bands(            \n                \"5\",\n                \"6\")\n            .vlanEnabled(true)\n            .vlanId(143)\n            .wlanLimitUp(10000)\n            .wlanLimitDown(20000)\n            .clientLimitUp(512)\n            .clientLimitDown(1000)\n            .auth(WlanAuthArgs.builder()\n                .type(\"psk\")\n                .psk(\"secretpsk\")\n                .build())\n            .interface_(\"all\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:site:Wlan\n    name: wlan_one\n    properties:\n      ssid: wlan_one\n      siteId: ${terraformTest.id}\n      bands:\n        - '5'\n        - '6'\n      vlanEnabled: true\n      vlanId: 143\n      wlanLimitUp: 10000\n      wlanLimitDown: 20000\n      clientLimitUp: 512\n      clientLimitDown: 1000\n      auth:\n        type: psk\n        psk: secretpsk\n      interface: all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_wlan` with:\n\nSite WLAN can be imported by specifying the site_id and the wlan_id\n\n```sh\n$ pulumi import junipermist:site/wlan:Wlan wlan_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "acctImmediateUpdate": {
                    "type": "boolean",
                    "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                },
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanAcctServer:WlanAcctServer"
                    },
                    "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                },
                "airwatch": {
                    "$ref": "#/types/junipermist:site/WlanAirwatch:WlanAirwatch",
                    "description": "airwatch wlan settings\n"
                },
                "allowIpv6Ndp": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                },
                "allowMdns": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                },
                "allowSsdp": {
                    "type": "boolean",
                    "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                },
                "apIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device ids\n"
                },
                "appLimit": {
                    "$ref": "#/types/junipermist:site/WlanAppLimit:WlanAppLimit",
                    "description": "bandwidth limiting for apps (applies to up/down)\n"
                },
                "appQos": {
                    "$ref": "#/types/junipermist:site/WlanAppQos:WlanAppQos",
                    "description": "app qos wlan settings\n"
                },
                "applyTo": {
                    "type": "string",
                    "description": "enum: `aps`, `site`, `wxtags`\n"
                },
                "arpFilter": {
                    "type": "boolean",
                    "description": "whether to enable smart arp filter\n"
                },
                "auth": {
                    "$ref": "#/types/junipermist:site/WlanAuth:WlanAuth",
                    "description": "authentication wlan settings\n"
                },
                "authServerSelection": {
                    "type": "string",
                    "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanAuthServer:WlanAuthServer"
                    },
                    "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                },
                "authServersNasId": {
                    "type": "string",
                    "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                },
                "authServersNasIp": {
                    "type": "string",
                    "description": "optional, NAS-IP-ADDRESS to use\n"
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                },
                "bandSteer": {
                    "type": "boolean",
                    "description": "whether to enable band_steering, this works only when band==both\n"
                },
                "bandSteerForceBand5": {
                    "type": "boolean",
                    "description": "force dual_band capable client to connect to 5G\n"
                },
                "bands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                },
                "blockBlacklistClients": {
                    "type": "boolean",
                    "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                },
                "bonjour": {
                    "$ref": "#/types/junipermist:site/WlanBonjour:WlanBonjour",
                    "description": "bonjour gateway wlan settings\n"
                },
                "ciscoCwa": {
                    "$ref": "#/types/junipermist:site/WlanCiscoCwa:WlanCiscoCwa",
                    "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                },
                "clientLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting per-client is enabled\n"
                },
                "clientLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting per-client is enabled\n"
                },
                "coaServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanCoaServer:WlanCoaServer"
                    },
                    "description": "list of COA (change of authorization) servers, optional\n"
                },
                "disable11ax": {
                    "type": "boolean",
                    "description": "some old WLAN drivers may not be compatible\n"
                },
                "disableHtVhtRates": {
                    "type": "boolean",
                    "description": "to disable ht or vht rates\n"
                },
                "disableUapsd": {
                    "type": "boolean",
                    "description": "whether to disable U-APSD\n"
                },
                "disableV1RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableV2RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableWhenGatewayUnreachable": {
                    "type": "boolean",
                    "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                },
                "disableWhenMxtunnelDown": {
                    "type": "boolean"
                },
                "disableWmm": {
                    "type": "boolean",
                    "description": "whether to disable WMM\n"
                },
                "dnsServerRewrite": {
                    "$ref": "#/types/junipermist:site/WlanDnsServerRewrite:WlanDnsServerRewrite",
                    "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                },
                "dtim": {
                    "type": "integer"
                },
                "dynamicPsk": {
                    "$ref": "#/types/junipermist:site/WlanDynamicPsk:WlanDynamicPsk",
                    "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                },
                "dynamicVlan": {
                    "$ref": "#/types/junipermist:site/WlanDynamicVlan:WlanDynamicVlan",
                    "description": "for 802.1x\n"
                },
                "enableLocalKeycaching": {
                    "type": "boolean",
                    "description": "enable AP-AP keycaching via multicast\n"
                },
                "enableWirelessBridging": {
                    "type": "boolean",
                    "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                },
                "enableWirelessBridgingDhcpTracking": {
                    "type": "boolean",
                    "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if this wlan is enabled\n"
                },
                "fastDot1xTimers": {
                    "type": "boolean",
                    "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "whether to hide SSID in beacon\n"
                },
                "hostnameIe": {
                    "type": "boolean",
                    "description": "include hostname inside IE in AP beacons / probe responses\n"
                },
                "hotspot20": {
                    "$ref": "#/types/junipermist:site/WlanHotspot20:WlanHotspot20",
                    "description": "hostspot 2.0 wlan settings\n"
                },
                "injectDhcpOption82": {
                    "$ref": "#/types/junipermist:site/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                },
                "interface": {
                    "type": "string",
                    "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                },
                "legacyOverds": {
                    "type": "boolean",
                    "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                },
                "limitBcast": {
                    "type": "boolean",
                    "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                },
                "limitProbeResponse": {
                    "type": "boolean",
                    "description": "limit probe response base on some heuristic rules\n"
                },
                "maxIdletime": {
                    "type": "integer",
                    "description": "max idle time in seconds\n"
                },
                "maxNumClients": {
                    "type": "integer",
                    "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:site/WlanMistNac:WlanMistNac"
                },
                "mspId": {
                    "type": "string"
                },
                "mxtunnelIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                },
                "mxtunnelNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                },
                "noStaticDns": {
                    "type": "boolean",
                    "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                },
                "noStaticIp": {
                    "type": "boolean",
                    "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                },
                "orgId": {
                    "type": "string"
                },
                "portal": {
                    "$ref": "#/types/junipermist:site/WlanPortal:WlanPortal",
                    "description": "portal wlan settings\n"
                },
                "portalAllowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "portalAllowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "portalApiSecret": {
                    "type": "string",
                    "description": "api secret (auto-generated) that can be used to sign guest authorization requests\n"
                },
                "portalDeniedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                },
                "portalImage": {
                    "type": "string",
                    "description": "Url of portal background image\n"
                },
                "portalSsoUrl": {
                    "type": "string"
                },
                "qos": {
                    "$ref": "#/types/junipermist:site/WlanQos:WlanQos"
                },
                "radsec": {
                    "$ref": "#/types/junipermist:site/WlanRadsec:WlanRadsec",
                    "description": "Radsec settings\n"
                },
                "rateset": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/WlanRateset:WlanRateset"
                    },
                    "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                },
                "reconnectClientsWhenRoamingMxcluster": {
                    "type": "boolean",
                    "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                },
                "roamMode": {
                    "type": "string",
                    "description": "enum: `11r`, `OKC`, `NONE`\n"
                },
                "schedule": {
                    "$ref": "#/types/junipermist:site/WlanSchedule:WlanSchedule",
                    "description": "WLAN operating schedule, default is disabled\n"
                },
                "siteId": {
                    "type": "string"
                },
                "sleExcluded": {
                    "type": "boolean",
                    "description": "whether to exclude this WLAN from SLE metrics\n"
                },
                "ssid": {
                    "type": "string",
                    "description": "the name of the SSID\n"
                },
                "useEapolV1": {
                    "type": "boolean",
                    "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "if vlan tagging is enabled\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                },
                "vlanPooling": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                },
                "wlanLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting for whole wlan is enabled\n"
                },
                "wlanLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting for whole wlan is enabled\n"
                },
                "wxtagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of wxtag_ids\n"
                },
                "wxtunnelId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                },
                "wxtunnelRemoteId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                }
            },
            "required": [
                "acctImmediateUpdate",
                "acctInterimInterval",
                "acctServers",
                "airwatch",
                "allowIpv6Ndp",
                "allowMdns",
                "allowSsdp",
                "apIds",
                "appLimit",
                "appQos",
                "applyTo",
                "arpFilter",
                "authServerSelection",
                "authServers",
                "authServersNasId",
                "authServersNasIp",
                "authServersRetries",
                "authServersTimeout",
                "bandSteer",
                "bandSteerForceBand5",
                "blockBlacklistClients",
                "bonjour",
                "ciscoCwa",
                "clientLimitDown",
                "clientLimitDownEnabled",
                "clientLimitUp",
                "clientLimitUpEnabled",
                "coaServers",
                "disable11ax",
                "disableHtVhtRates",
                "disableUapsd",
                "disableV1RoamNotify",
                "disableV2RoamNotify",
                "disableWmm",
                "dnsServerRewrite",
                "dtim",
                "enableLocalKeycaching",
                "enableWirelessBridging",
                "enableWirelessBridgingDhcpTracking",
                "enabled",
                "fastDot1xTimers",
                "hideSsid",
                "hostnameIe",
                "hotspot20",
                "interface",
                "isolation",
                "l2Isolation",
                "legacyOverds",
                "limitBcast",
                "limitProbeResponse",
                "maxIdletime",
                "maxNumClients",
                "mistNac",
                "mspId",
                "mxtunnelIds",
                "mxtunnelNames",
                "noStaticDns",
                "noStaticIp",
                "orgId",
                "portal",
                "portalAllowedHostnames",
                "portalAllowedSubnets",
                "portalApiSecret",
                "portalDeniedHostnames",
                "portalImage",
                "portalSsoUrl",
                "qos",
                "radsec",
                "rateset",
                "roamMode",
                "schedule",
                "siteId",
                "sleExcluded",
                "ssid",
                "useEapolV1",
                "vlanEnabled",
                "vlanIds",
                "vlanPooling",
                "wlanLimitDown",
                "wlanLimitDownEnabled",
                "wlanLimitUp",
                "wlanLimitUpEnabled",
                "wxtagIds",
                "wxtunnelId",
                "wxtunnelRemoteId"
            ],
            "inputProperties": {
                "acctImmediateUpdate": {
                    "type": "boolean",
                    "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                },
                "acctInterimInterval": {
                    "type": "integer",
                    "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                },
                "acctServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanAcctServer:WlanAcctServer"
                    },
                    "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                },
                "airwatch": {
                    "$ref": "#/types/junipermist:site/WlanAirwatch:WlanAirwatch",
                    "description": "airwatch wlan settings\n"
                },
                "allowIpv6Ndp": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                },
                "allowMdns": {
                    "type": "boolean",
                    "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                },
                "allowSsdp": {
                    "type": "boolean",
                    "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                },
                "apIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of device ids\n"
                },
                "appLimit": {
                    "$ref": "#/types/junipermist:site/WlanAppLimit:WlanAppLimit",
                    "description": "bandwidth limiting for apps (applies to up/down)\n"
                },
                "appQos": {
                    "$ref": "#/types/junipermist:site/WlanAppQos:WlanAppQos",
                    "description": "app qos wlan settings\n"
                },
                "applyTo": {
                    "type": "string",
                    "description": "enum: `aps`, `site`, `wxtags`\n"
                },
                "arpFilter": {
                    "type": "boolean",
                    "description": "whether to enable smart arp filter\n"
                },
                "auth": {
                    "$ref": "#/types/junipermist:site/WlanAuth:WlanAuth",
                    "description": "authentication wlan settings\n"
                },
                "authServerSelection": {
                    "type": "string",
                    "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                },
                "authServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanAuthServer:WlanAuthServer"
                    },
                    "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                },
                "authServersNasId": {
                    "type": "string",
                    "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                },
                "authServersNasIp": {
                    "type": "string",
                    "description": "optional, NAS-IP-ADDRESS to use\n"
                },
                "authServersRetries": {
                    "type": "integer",
                    "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                },
                "authServersTimeout": {
                    "type": "integer",
                    "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                },
                "bandSteer": {
                    "type": "boolean",
                    "description": "whether to enable band_steering, this works only when band==both\n"
                },
                "bandSteerForceBand5": {
                    "type": "boolean",
                    "description": "force dual_band capable client to connect to 5G\n"
                },
                "bands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                },
                "blockBlacklistClients": {
                    "type": "boolean",
                    "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                },
                "bonjour": {
                    "$ref": "#/types/junipermist:site/WlanBonjour:WlanBonjour",
                    "description": "bonjour gateway wlan settings\n"
                },
                "ciscoCwa": {
                    "$ref": "#/types/junipermist:site/WlanCiscoCwa:WlanCiscoCwa",
                    "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                },
                "clientLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting per-client is enabled\n"
                },
                "clientLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "clientLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting per-client is enabled\n"
                },
                "coaServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WlanCoaServer:WlanCoaServer"
                    },
                    "description": "list of COA (change of authorization) servers, optional\n"
                },
                "disable11ax": {
                    "type": "boolean",
                    "description": "some old WLAN drivers may not be compatible\n"
                },
                "disableHtVhtRates": {
                    "type": "boolean",
                    "description": "to disable ht or vht rates\n"
                },
                "disableUapsd": {
                    "type": "boolean",
                    "description": "whether to disable U-APSD\n"
                },
                "disableV1RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableV2RoamNotify": {
                    "type": "boolean",
                    "description": "disable sending v2 roam notification messages\n"
                },
                "disableWhenGatewayUnreachable": {
                    "type": "boolean",
                    "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                },
                "disableWhenMxtunnelDown": {
                    "type": "boolean"
                },
                "disableWmm": {
                    "type": "boolean",
                    "description": "whether to disable WMM\n"
                },
                "dnsServerRewrite": {
                    "$ref": "#/types/junipermist:site/WlanDnsServerRewrite:WlanDnsServerRewrite",
                    "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                },
                "dtim": {
                    "type": "integer"
                },
                "dynamicPsk": {
                    "$ref": "#/types/junipermist:site/WlanDynamicPsk:WlanDynamicPsk",
                    "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                },
                "dynamicVlan": {
                    "$ref": "#/types/junipermist:site/WlanDynamicVlan:WlanDynamicVlan",
                    "description": "for 802.1x\n"
                },
                "enableLocalKeycaching": {
                    "type": "boolean",
                    "description": "enable AP-AP keycaching via multicast\n"
                },
                "enableWirelessBridging": {
                    "type": "boolean",
                    "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                },
                "enableWirelessBridgingDhcpTracking": {
                    "type": "boolean",
                    "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "if this wlan is enabled\n"
                },
                "fastDot1xTimers": {
                    "type": "boolean",
                    "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                },
                "hideSsid": {
                    "type": "boolean",
                    "description": "whether to hide SSID in beacon\n"
                },
                "hostnameIe": {
                    "type": "boolean",
                    "description": "include hostname inside IE in AP beacons / probe responses\n"
                },
                "hotspot20": {
                    "$ref": "#/types/junipermist:site/WlanHotspot20:WlanHotspot20",
                    "description": "hostspot 2.0 wlan settings\n"
                },
                "injectDhcpOption82": {
                    "$ref": "#/types/junipermist:site/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                },
                "interface": {
                    "type": "string",
                    "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                },
                "isolation": {
                    "type": "boolean",
                    "description": "whether to stop clients to talk to each other\n"
                },
                "l2Isolation": {
                    "type": "boolean",
                    "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                },
                "legacyOverds": {
                    "type": "boolean",
                    "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                },
                "limitBcast": {
                    "type": "boolean",
                    "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                },
                "limitProbeResponse": {
                    "type": "boolean",
                    "description": "limit probe response base on some heuristic rules\n"
                },
                "maxIdletime": {
                    "type": "integer",
                    "description": "max idle time in seconds\n"
                },
                "maxNumClients": {
                    "type": "integer",
                    "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                },
                "mistNac": {
                    "$ref": "#/types/junipermist:site/WlanMistNac:WlanMistNac"
                },
                "mxtunnelIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                },
                "mxtunnelNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                },
                "noStaticDns": {
                    "type": "boolean",
                    "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                },
                "noStaticIp": {
                    "type": "boolean",
                    "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                },
                "portal": {
                    "$ref": "#/types/junipermist:site/WlanPortal:WlanPortal",
                    "description": "portal wlan settings\n"
                },
                "portalAllowedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring)\n"
                },
                "portalAllowedSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of CIDRs\n"
                },
                "portalDeniedHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                },
                "qos": {
                    "$ref": "#/types/junipermist:site/WlanQos:WlanQos"
                },
                "radsec": {
                    "$ref": "#/types/junipermist:site/WlanRadsec:WlanRadsec",
                    "description": "Radsec settings\n"
                },
                "rateset": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/junipermist:site/WlanRateset:WlanRateset"
                    },
                    "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                },
                "reconnectClientsWhenRoamingMxcluster": {
                    "type": "boolean",
                    "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                },
                "roamMode": {
                    "type": "string",
                    "description": "enum: `11r`, `OKC`, `NONE`\n"
                },
                "schedule": {
                    "$ref": "#/types/junipermist:site/WlanSchedule:WlanSchedule",
                    "description": "WLAN operating schedule, default is disabled\n"
                },
                "siteId": {
                    "type": "string"
                },
                "sleExcluded": {
                    "type": "boolean",
                    "description": "whether to exclude this WLAN from SLE metrics\n"
                },
                "ssid": {
                    "type": "string",
                    "description": "the name of the SSID\n"
                },
                "useEapolV1": {
                    "type": "boolean",
                    "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                },
                "vlanEnabled": {
                    "type": "boolean",
                    "description": "if vlan tagging is enabled\n"
                },
                "vlanId": {
                    "type": "string"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                },
                "vlanPooling": {
                    "type": "boolean",
                    "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                },
                "wlanLimitDown": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitDownEnabled": {
                    "type": "boolean",
                    "description": "if downlink limiting for whole wlan is enabled\n"
                },
                "wlanLimitUp": {
                    "type": "integer",
                    "description": "kbps\n"
                },
                "wlanLimitUpEnabled": {
                    "type": "boolean",
                    "description": "if uplink limiting for whole wlan is enabled\n"
                },
                "wxtagIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of wxtag_ids\n"
                },
                "wxtunnelId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                },
                "wxtunnelRemoteId": {
                    "type": "string",
                    "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                }
            },
            "requiredInputs": [
                "siteId",
                "ssid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wlan resources.\n",
                "properties": {
                    "acctImmediateUpdate": {
                        "type": "boolean",
                        "description": "enable coa-immediate-update and address-change-immediate-update on the access profile.\n"
                    },
                    "acctInterimInterval": {
                        "type": "integer",
                        "description": "how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request\nfrom RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended\nwhen enabled\n"
                    },
                    "acctServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:site/WlanAcctServer:WlanAcctServer"
                        },
                        "description": "list of RADIUS accounting servers, optional, order matters where the first one is treated as primary\n"
                    },
                    "airwatch": {
                        "$ref": "#/types/junipermist:site/WlanAirwatch:WlanAirwatch",
                        "description": "airwatch wlan settings\n"
                    },
                    "allowIpv6Ndp": {
                        "type": "boolean",
                        "description": "only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through\n"
                    },
                    "allowMdns": {
                        "type": "boolean",
                        "description": "only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through\n"
                    },
                    "allowSsdp": {
                        "type": "boolean",
                        "description": "only applicable when `limit_bcast`==`true`, which allows SSDP\n"
                    },
                    "apIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of device ids\n"
                    },
                    "appLimit": {
                        "$ref": "#/types/junipermist:site/WlanAppLimit:WlanAppLimit",
                        "description": "bandwidth limiting for apps (applies to up/down)\n"
                    },
                    "appQos": {
                        "$ref": "#/types/junipermist:site/WlanAppQos:WlanAppQos",
                        "description": "app qos wlan settings\n"
                    },
                    "applyTo": {
                        "type": "string",
                        "description": "enum: `aps`, `site`, `wxtags`\n"
                    },
                    "arpFilter": {
                        "type": "boolean",
                        "description": "whether to enable smart arp filter\n"
                    },
                    "auth": {
                        "$ref": "#/types/junipermist:site/WlanAuth:WlanAuth",
                        "description": "authentication wlan settings\n"
                    },
                    "authServerSelection": {
                        "type": "string",
                        "description": "When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`\n"
                    },
                    "authServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:site/WlanAuthServer:WlanAuthServer"
                        },
                        "description": "list of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one\nis treated as primary\n"
                    },
                    "authServersNasId": {
                        "type": "string",
                        "description": "optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers\n"
                    },
                    "authServersNasIp": {
                        "type": "string",
                        "description": "optional, NAS-IP-ADDRESS to use\n"
                    },
                    "authServersRetries": {
                        "type": "integer",
                        "description": "radius auth session retries. Following fast timers are set if “fast_dot1x_timers” knob is enabled. ‘retries’ are\nset to value of auth_servers_retries. ‘max-requests’ is also set when setting auth_servers_retries and is set to\ndefault value to 3.\n"
                    },
                    "authServersTimeout": {
                        "type": "integer",
                        "description": "radius auth session timeout. Following fast timers are set if “fast_dot1x_timers” knob is enabled.\n‘quite-period’ and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’\nis also set when setting auth_servers_timeout and is set to default value of 10.\n"
                    },
                    "bandSteer": {
                        "type": "boolean",
                        "description": "whether to enable band_steering, this works only when band==both\n"
                    },
                    "bandSteerForceBand5": {
                        "type": "boolean",
                        "description": "force dual_band capable client to connect to 5G\n"
                    },
                    "bands": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of radios that the wlan should apply to. enum: `24`, `5`, `6`\n"
                    },
                    "blockBlacklistClients": {
                        "type": "boolean",
                        "description": "whether to block the clients in the blacklist (up to first 256 macs)\n"
                    },
                    "bonjour": {
                        "$ref": "#/types/junipermist:site/WlanBonjour:WlanBonjour",
                        "description": "bonjour gateway wlan settings\n"
                    },
                    "ciscoCwa": {
                        "$ref": "#/types/junipermist:site/WlanCiscoCwa:WlanCiscoCwa",
                        "description": "Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA:\nhttps://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html\n"
                    },
                    "clientLimitDown": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "clientLimitDownEnabled": {
                        "type": "boolean",
                        "description": "if downlink limiting per-client is enabled\n"
                    },
                    "clientLimitUp": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "clientLimitUpEnabled": {
                        "type": "boolean",
                        "description": "if uplink limiting per-client is enabled\n"
                    },
                    "coaServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:site/WlanCoaServer:WlanCoaServer"
                        },
                        "description": "list of COA (change of authorization) servers, optional\n"
                    },
                    "disable11ax": {
                        "type": "boolean",
                        "description": "some old WLAN drivers may not be compatible\n"
                    },
                    "disableHtVhtRates": {
                        "type": "boolean",
                        "description": "to disable ht or vht rates\n"
                    },
                    "disableUapsd": {
                        "type": "boolean",
                        "description": "whether to disable U-APSD\n"
                    },
                    "disableV1RoamNotify": {
                        "type": "boolean",
                        "description": "disable sending v2 roam notification messages\n"
                    },
                    "disableV2RoamNotify": {
                        "type": "boolean",
                        "description": "disable sending v2 roam notification messages\n"
                    },
                    "disableWhenGatewayUnreachable": {
                        "type": "boolean",
                        "description": "when any of the following is true, this WLAN will be disabled * cannot get IP * cannot obtain default gateway * cannot\nreach default gateway\n"
                    },
                    "disableWhenMxtunnelDown": {
                        "type": "boolean"
                    },
                    "disableWmm": {
                        "type": "boolean",
                        "description": "whether to disable WMM\n"
                    },
                    "dnsServerRewrite": {
                        "$ref": "#/types/junipermist:site/WlanDnsServerRewrite:WlanDnsServerRewrite",
                        "description": "for radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)\n"
                    },
                    "dtim": {
                        "type": "integer"
                    },
                    "dynamicPsk": {
                        "$ref": "#/types/junipermist:site/WlanDynamicPsk:WlanDynamicPsk",
                        "description": "for dynamic PSK where we get per_user PSK from Radius. dynamic_psk allows PSK to be selected at runtime depending on\ncontext (wlan/site/user/...) thus following configurations are assumed (currently) * PSK will come from RADIUS server *\nAP sends client MAC as username ans password (i.e. `enable_mac_auth` is assumed) * AP sends BSSID:SSID as\nCaller-Station-ID * `auth_servers` is required * PSK will come from cloud WLC if source is cloud_psks * default_psk will\nbe used if cloud WLC is not available * `multi_psk_only` and `psk` is ignored * `pairwise` can only be wpa2-ccmp (for\nnow, wpa3 support on the roadmap)\n"
                    },
                    "dynamicVlan": {
                        "$ref": "#/types/junipermist:site/WlanDynamicVlan:WlanDynamicVlan",
                        "description": "for 802.1x\n"
                    },
                    "enableLocalKeycaching": {
                        "type": "boolean",
                        "description": "enable AP-AP keycaching via multicast\n"
                    },
                    "enableWirelessBridging": {
                        "type": "boolean",
                        "description": "by default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where\nclient is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wireless_bridging can be enabled\n"
                    },
                    "enableWirelessBridgingDhcpTracking": {
                        "type": "boolean",
                        "description": "if the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcp_tracking will cut down DHCP response\npackets to be forwarded to wireless\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "if this wlan is enabled\n"
                    },
                    "fastDot1xTimers": {
                        "type": "boolean",
                        "description": "if set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and\n‘auth_server_retries’ .\n"
                    },
                    "hideSsid": {
                        "type": "boolean",
                        "description": "whether to hide SSID in beacon\n"
                    },
                    "hostnameIe": {
                        "type": "boolean",
                        "description": "include hostname inside IE in AP beacons / probe responses\n"
                    },
                    "hotspot20": {
                        "$ref": "#/types/junipermist:site/WlanHotspot20:WlanHotspot20",
                        "description": "hostspot 2.0 wlan settings\n"
                    },
                    "injectDhcpOption82": {
                        "$ref": "#/types/junipermist:site/WlanInjectDhcpOption82:WlanInjectDhcpOption82"
                    },
                    "interface": {
                        "type": "string",
                        "description": "where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `site_mxedge`, `wxtunnel`\n"
                    },
                    "isolation": {
                        "type": "boolean",
                        "description": "whether to stop clients to talk to each other\n"
                    },
                    "l2Isolation": {
                        "type": "boolean",
                        "description": "if isolation is enabled, whether to deny clients to talk to L2 on the LAN\n"
                    },
                    "legacyOverds": {
                        "type": "boolean",
                        "description": "legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning!\nEnabling this will cause problem for iOS devices.\n"
                    },
                    "limitBcast": {
                        "type": "boolean",
                        "description": "whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)\n"
                    },
                    "limitProbeResponse": {
                        "type": "boolean",
                        "description": "limit probe response base on some heuristic rules\n"
                    },
                    "maxIdletime": {
                        "type": "integer",
                        "description": "max idle time in seconds\n"
                    },
                    "maxNumClients": {
                        "type": "integer",
                        "description": "maximum number of client connected to the SSID. `0` means unlimited\n"
                    },
                    "mistNac": {
                        "$ref": "#/types/junipermist:site/WlanMistNac:WlanMistNac"
                    },
                    "mspId": {
                        "type": "string"
                    },
                    "mxtunnelIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `interface`=`mxtunnel`, id of the Mist Tunnel\n"
                    },
                    "mxtunnelNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "when `interface`=`site_medge`, name of the mxtunnel that in mxtunnels under Site Setting\n"
                    },
                    "noStaticDns": {
                        "type": "boolean",
                        "description": "whether to only allow client to use DNS that we’ve learned from DHCP response\n"
                    },
                    "noStaticIp": {
                        "type": "boolean",
                        "description": "whether to only allow client that we’ve learned from DHCP exchange to talk\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "portal": {
                        "$ref": "#/types/junipermist:site/WlanPortal:WlanPortal",
                        "description": "portal wlan settings\n"
                    },
                    "portalAllowedHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of hostnames without http(s):// (matched by substring)\n"
                    },
                    "portalAllowedSubnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of CIDRs\n"
                    },
                    "portalApiSecret": {
                        "type": "string",
                        "description": "api secret (auto-generated) that can be used to sign guest authorization requests\n"
                    },
                    "portalDeniedHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames\n"
                    },
                    "portalImage": {
                        "type": "string",
                        "description": "Url of portal background image\n"
                    },
                    "portalSsoUrl": {
                        "type": "string"
                    },
                    "qos": {
                        "$ref": "#/types/junipermist:site/WlanQos:WlanQos"
                    },
                    "radsec": {
                        "$ref": "#/types/junipermist:site/WlanRadsec:WlanRadsec",
                        "description": "Radsec settings\n"
                    },
                    "rateset": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/junipermist:site/WlanRateset:WlanRateset"
                        },
                        "description": "Property key is the RF band. enum: `24`, `5`, `6`\n"
                    },
                    "reconnectClientsWhenRoamingMxcluster": {
                        "type": "boolean",
                        "description": "when different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)\n"
                    },
                    "roamMode": {
                        "type": "string",
                        "description": "enum: `11r`, `OKC`, `NONE`\n"
                    },
                    "schedule": {
                        "$ref": "#/types/junipermist:site/WlanSchedule:WlanSchedule",
                        "description": "WLAN operating schedule, default is disabled\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "sleExcluded": {
                        "type": "boolean",
                        "description": "whether to exclude this WLAN from SLE metrics\n"
                    },
                    "ssid": {
                        "type": "string",
                        "description": "the name of the SSID\n"
                    },
                    "useEapolV1": {
                        "type": "boolean",
                        "description": "if `auth.type`==’eap’ or ‘psk’, should only be set for legacy client, such as pre-2004, 802.11b devices\n"
                    },
                    "vlanEnabled": {
                        "type": "boolean",
                        "description": "if vlan tagging is enabled\n"
                    },
                    "vlanId": {
                        "type": "string"
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "if `vlan_enabled`==`true` and `vlan_pooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool\n"
                    },
                    "vlanPooling": {
                        "type": "boolean",
                        "description": "Requires `vlan_enabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a\ndeterministic algorithm\n"
                    },
                    "wlanLimitDown": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "wlanLimitDownEnabled": {
                        "type": "boolean",
                        "description": "if downlink limiting for whole wlan is enabled\n"
                    },
                    "wlanLimitUp": {
                        "type": "integer",
                        "description": "kbps\n"
                    },
                    "wlanLimitUpEnabled": {
                        "type": "boolean",
                        "description": "if uplink limiting for whole wlan is enabled\n"
                    },
                    "wxtagIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of wxtag_ids\n"
                    },
                    "wxtunnelId": {
                        "type": "string",
                        "description": "when `interface`=`wxtunnel`, id of the WXLAN Tunnel\n"
                    },
                    "wxtunnelRemoteId": {
                        "type": "string",
                        "description": "when `interface`=`wxtunnel`, remote tunnel identifier\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/wlanPortalImage:WlanPortalImage": {
            "description": "This resource is used to upload a WLAN Captive Web Portal background image.\nThe WLAN object contains all the required configuration to broadcast an SSID (Authentication, VLAN, ...)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wlanOne = new junipermist.site.WlanPortalImage(\"wlan_one\", {\n    siteId: terraformTest.id,\n    wlanId: wlanOneMistSiteWlan.id,\n    file: \"/Users/johndoe/Documents/image.jpg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwlan_one = junipermist.site.WlanPortalImage(\"wlan_one\",\n    site_id=terraform_test[\"id\"],\n    wlan_id=wlan_one_mist_site_wlan[\"id\"],\n    file=\"/Users/johndoe/Documents/image.jpg\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wlanOne = new JuniperMist.Site.WlanPortalImage(\"wlan_one\", new()\n    {\n        SiteId = terraformTest.Id,\n        WlanId = wlanOneMistSiteWlan.Id,\n        File = \"/Users/johndoe/Documents/image.jpg\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewWlanPortalImage(ctx, \"wlan_one\", \u0026site.WlanPortalImageArgs{\n\t\t\tSiteId: pulumi.Any(terraformTest.Id),\n\t\t\tWlanId: pulumi.Any(wlanOneMistSiteWlan.Id),\n\t\t\tFile:   pulumi.String(\"/Users/johndoe/Documents/image.jpg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.WlanPortalImage;\nimport com.pulumi.junipermist.site.WlanPortalImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlanOne = new WlanPortalImage(\"wlanOne\", WlanPortalImageArgs.builder()\n            .siteId(terraformTest.id())\n            .wlanId(wlanOneMistSiteWlan.id())\n            .file(\"/Users/johndoe/Documents/image.jpg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:site:WlanPortalImage\n    name: wlan_one\n    properties:\n      siteId: ${terraformTest.id}\n      wlanId: ${wlanOneMistSiteWlan.id}\n      file: /Users/johndoe/Documents/image.jpg\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Site WLAN ID\n"
                }
            },
            "required": [
                "file",
                "siteId",
                "wlanId"
            ],
            "inputProperties": {
                "file": {
                    "type": "string",
                    "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Site WLAN ID\n"
                }
            },
            "requiredInputs": [
                "file",
                "siteId",
                "wlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WlanPortalImage resources.\n",
                "properties": {
                    "file": {
                        "type": "string",
                        "description": "path to the background image file. File must be a `jpeg`, `jpg` or `png` image`\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "wlanId": {
                        "type": "string",
                        "description": "Site WLAN ID\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/wlanPortalTemplate:WlanPortalTemplate": {
            "description": "This resource is used customize the WLAN Guest Portal.\nThe WLAN Portal Template can be used to define:\n* Guest Authentication methods and parameters (access duration, ...)\n* Default values of the text fields and labels on the portal\n* Values of the text fields and labels based on the User Agent (`locales` property)\n\n**Notes:**\n* There is no feedback from the API, so there is no possibility to validate the changes. The resource states is directly generated based on the resource plan.* There is no option to delete or revert the changes. Deleting the resource will just remove it from the states. Once removed, it is possible to create a new one. It will replace the previous template\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.WlanPortalTemplate;\nimport com.pulumi.junipermist.site.WlanPortalTemplateArgs;\nimport com.pulumi.junipermist.site.inputs.WlanPortalTemplatePortalTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wlanOne = new WlanPortalTemplate(\"wlanOne\", WlanPortalTemplateArgs.builder()\n            .siteId(terraformTest.id())\n            .wlanId(wlanOneMistSiteWlan.id())\n            .portalTemplate(WlanPortalTemplatePortalTemplateArgs.builder()\n                .sms_message_format(\"Code {{code}} expires in {{duration}} minutes.\")\n                .sms_validity_duration(\"10\")\n                .page_title(\"Welcome To My Demo Portal\")\n                .locales(Map.of(\"fr-FR\", Map.of(\"pageTitle\", \"Bienvenue sur mon portail de démo\")))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wlanOne:\n    type: junipermist:site:WlanPortalTemplate\n    name: wlan_one\n    properties:\n      siteId: ${terraformTest.id}\n      wlanId: ${wlanOneMistSiteWlan.id}\n      portalTemplate:\n        sms_message_format: Code {{code}} expires in {{duration}} minutes.\n        sms_validity_duration: '10'\n        page_title: Welcome To My Demo Portal\n        locales:\n          fr-FR:\n            pageTitle: Bienvenue sur mon portail de démo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "portalTemplate": {
                    "$ref": "#/types/junipermist:site/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                    "description": "portal template wlan settings\n"
                },
                "siteId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Site WLAN ID\n"
                }
            },
            "required": [
                "portalTemplate",
                "siteId",
                "wlanId"
            ],
            "inputProperties": {
                "portalTemplate": {
                    "$ref": "#/types/junipermist:site/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                    "description": "portal template wlan settings\n"
                },
                "siteId": {
                    "type": "string"
                },
                "wlanId": {
                    "type": "string",
                    "description": "Site WLAN ID\n"
                }
            },
            "requiredInputs": [
                "portalTemplate",
                "siteId",
                "wlanId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WlanPortalTemplate resources.\n",
                "properties": {
                    "portalTemplate": {
                        "$ref": "#/types/junipermist:site/WlanPortalTemplatePortalTemplate:WlanPortalTemplatePortalTemplate",
                        "description": "portal template wlan settings\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "wlanId": {
                        "type": "string",
                        "description": "Site WLAN ID\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/wxrule:Wxrule": {
            "description": "This resource manages the Site WxRules (WLAN policies).\nA WxLAN policy is a set of rules and settings that can be applied to devices in a network to determine how they are treated. it provides support for access policies, network segmentation, role-based policies, micro-segmentation, and least privilege. WxLAN policies are used to allow or deny specific users from accessing specific resources in a wireless network.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wxruleOne = new junipermist.site.Wxrule(\"wxrule_one\", {\n    siteId: terraformTest.id,\n    srcWxtags: [wxtagOne.id],\n    enabled: true,\n    action: \"allow\",\n    dstDenyWxtags: [wxtagTwo.id],\n    order: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwxrule_one = junipermist.site.Wxrule(\"wxrule_one\",\n    site_id=terraform_test[\"id\"],\n    src_wxtags=[wxtag_one[\"id\"]],\n    enabled=True,\n    action=\"allow\",\n    dst_deny_wxtags=[wxtag_two[\"id\"]],\n    order=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wxruleOne = new JuniperMist.Site.Wxrule(\"wxrule_one\", new()\n    {\n        SiteId = terraformTest.Id,\n        SrcWxtags = new[]\n        {\n            wxtagOne.Id,\n        },\n        Enabled = true,\n        Action = \"allow\",\n        DstDenyWxtags = new[]\n        {\n            wxtagTwo.Id,\n        },\n        Order = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewWxrule(ctx, \"wxrule_one\", \u0026site.WxruleArgs{\n\t\t\tSiteId: pulumi.Any(terraformTest.Id),\n\t\t\tSrcWxtags: pulumi.StringArray{\n\t\t\t\twxtagOne.Id,\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t\tAction:  pulumi.String(\"allow\"),\n\t\t\tDstDenyWxtags: pulumi.StringArray{\n\t\t\t\twxtagTwo.Id,\n\t\t\t},\n\t\t\tOrder: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Wxrule;\nimport com.pulumi.junipermist.site.WxruleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wxruleOne = new Wxrule(\"wxruleOne\", WxruleArgs.builder()\n            .siteId(terraformTest.id())\n            .srcWxtags(wxtagOne.id())\n            .enabled(true)\n            .action(\"allow\")\n            .dstDenyWxtags(wxtagTwo.id())\n            .order(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wxruleOne:\n    type: junipermist:site:Wxrule\n    name: wxrule_one\n    properties:\n      siteId: ${terraformTest.id}\n      srcWxtags:\n        - ${wxtagOne.id}\n      enabled: true\n      action: allow\n      dstDenyWxtags:\n        - ${wxtagTwo.id}\n      order: 1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_wxrule` with:\n\nSite WxRule can be imported by specifying the site_id and the wxrule_id\n\n```sh\n$ pulumi import junipermist:site/wxrule:Wxrule wxrule_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "type of action, allow / block. enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blockedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                },
                "dstAllowWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                },
                "dstDenyWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                },
                "dstWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer",
                    "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                },
                "siteId": {
                    "type": "string"
                },
                "srcWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to determine if this rule would match\n"
                }
            },
            "required": [
                "action",
                "dstAllowWxtags",
                "dstDenyWxtags",
                "dstWxtags",
                "enabled",
                "order",
                "siteId",
                "srcWxtags"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "type of action, allow / block. enum: `allow`, `block`\n"
                },
                "applyTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "blockedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                },
                "dstAllowWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                },
                "dstDenyWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                },
                "dstWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer",
                    "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                },
                "siteId": {
                    "type": "string"
                },
                "srcWxtags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of WxTag UUID to determine if this rule would match\n"
                }
            },
            "requiredInputs": [
                "action",
                "order",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wxrule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "type of action, allow / block. enum: `allow`, `block`\n"
                    },
                    "applyTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "blockedApps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "blocked apps (always blocking, ignoring action), the key of Get Application List\n"
                    },
                    "dstAllowWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to indicate these tags are allowed access\n"
                    },
                    "dstDenyWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to indicate these tags are blocked access\n"
                    },
                    "dstWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer",
                        "description": "the order how rules would be looked up, \u003e 0 and bigger order got matched first, -1 means LAST, uniqueness not checked\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "srcWxtags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of WxTag UUID to determine if this rule would match\n"
                    }
                },
                "type": "object"
            }
        },
        "junipermist:site/wxtag:Wxtag": {
            "description": "This resource manages the Site Wxlan tags (labels).\nA WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/juniper-mist\";\n\nconst wtagOne = new junipermist.site.Wxtag(\"wtag_one\", {\n    siteId: terraformTest.id,\n    name: \"wtag_one\",\n    values: [\"10.3.0.0/16\"],\n    op: \"in\",\n    type: \"match\",\n    match: \"ip_range_subnet\",\n});\n```\n```python\nimport pulumi\nimport pulumi_juniper_mist as junipermist\n\nwtag_one = junipermist.site.Wxtag(\"wtag_one\",\n    site_id=terraform_test[\"id\"],\n    name=\"wtag_one\",\n    values=[\"10.3.0.0/16\"],\n    op=\"in\",\n    type=\"match\",\n    match=\"ip_range_subnet\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var wtagOne = new JuniperMist.Site.Wxtag(\"wtag_one\", new()\n    {\n        SiteId = terraformTest.Id,\n        Name = \"wtag_one\",\n        Values = new[]\n        {\n            \"10.3.0.0/16\",\n        },\n        Op = \"in\",\n        Type = \"match\",\n        Match = \"ip_range_subnet\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.NewWxtag(ctx, \"wtag_one\", \u0026site.WxtagArgs{\n\t\t\tSiteId: pulumi.Any(terraformTest.Id),\n\t\t\tName:   pulumi.String(\"wtag_one\"),\n\t\t\tValues: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.3.0.0/16\"),\n\t\t\t},\n\t\t\tOp:    pulumi.String(\"in\"),\n\t\t\tType:  pulumi.String(\"match\"),\n\t\t\tMatch: pulumi.String(\"ip_range_subnet\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.Wxtag;\nimport com.pulumi.junipermist.site.WxtagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var wtagOne = new Wxtag(\"wtagOne\", WxtagArgs.builder()\n            .siteId(terraformTest.id())\n            .name(\"wtag_one\")\n            .values(\"10.3.0.0/16\")\n            .op(\"in\")\n            .type(\"match\")\n            .match(\"ip_range_subnet\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  wtagOne:\n    type: junipermist:site:Wxtag\n    name: wtag_one\n    properties:\n      siteId: ${terraformTest.id}\n      name: wtag_one\n      values:\n        - 10.3.0.0/16\n      op: in\n      type: match\n      match: ip_range_subnet\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsing `pulumi import`, import `mist_site_wxtag` with:\n\nSite WxTag can be imported by specifying the site_id and the wxtag_id\n\n```sh\n$ pulumi import junipermist:site/wxtag:Wxtag wxtag_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309\n```\n\n",
            "properties": {
                "mac": {
                    "type": "string",
                    "description": "if `type`==`client`, Client MAC Address\n"
                },
                "match": {
                    "type": "string",
                    "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "op": {
                    "type": "string",
                    "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WxtagSpec:WxtagSpec"
                    },
                    "description": "if `type`==`spec`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "op",
                "siteId",
                "type"
            ],
            "inputProperties": {
                "mac": {
                    "type": "string",
                    "description": "if `type`==`client`, Client MAC Address\n"
                },
                "match": {
                    "type": "string",
                    "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "op": {
                    "type": "string",
                    "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                },
                "siteId": {
                    "type": "string"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/junipermist:site/WxtagSpec:WxtagSpec"
                    },
                    "description": "if `type`==`spec`\n"
                },
                "type": {
                    "type": "string",
                    "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                },
                "vlanId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "siteId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Wxtag resources.\n",
                "properties": {
                    "mac": {
                        "type": "string",
                        "description": "if `type`==`client`, Client MAC Address\n"
                    },
                    "match": {
                        "type": "string",
                        "description": "required if `type`==`match`. enum: `ap_id`, `app`, `asset_mac`, `client_mac`, `hostname`, `ip_range_subnet`, `port`,\n`psk_name`, `psk_role`, `radius_attr`, `radius_class`, `radius_group`, `radius_username`, `sdkclient_uuid`, `wlan_id`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name\n"
                    },
                    "op": {
                        "type": "string",
                        "description": "required if `type`==`match`, type of tag (inclusive/exclusive). enum: `in`, `not_in`\n"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/junipermist:site/WxtagSpec:WxtagSpec"
                        },
                        "description": "if `type`==`spec`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "enum: `client`, `match`, `resource`, `spec`, `subnet`, `vlan`\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "required if `type`==`match` and * `match`==`ap_id`: list of AP IDs * `match`==`app`: list of Application Names *\n`match`==`asset_mac`: list of Asset MAC Addresses * `match`==`client_mac`: list of Client MAC Addresses *\n`match`==`hostname`: list of Resources Hostnames * `match`==`ip_range_subnet`: list of IP Addresses and/or CIDRs *\n`match`==`psk_name`: list of PSK Names * `match`==`psk_role`: list of PSK Roles * `match`==`port`: list of Ports or Port\nRanges * `match`==`radius_attr`: list of RADIUS Attributes. The values are [ “6=1”, “26=10.2.3.4” ], this\nsupport other RADIUS attributes where we know the type * `match`==`radius_class`: list of RADIUS Classes. This matches\nthe ATTR-Class(25) * `match`==`radius_group`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID,\nAirespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1) *\n`match`==`radius_username`: list of RADIUS Usernames. This matches the ATTR-User-Name(1) * `match`==`sdkclient_uuid`:\nlist of SDK UUIDs * `match`==`wlan_id`: list of WLAN IDs **Notes**: Variables are not allowed\n"
                    },
                    "vlanId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "junipermist:device/getApStats:getApStats": {
            "description": "This data source provides the list of Wireless Access Points with their statistics.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst apStats = junipermist.device.getApStats({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nap_stats = junipermist.device.get_ap_stats(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apStats = JuniperMist.Device.GetApStats.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.GetApStats(ctx, \u0026device.GetApStatsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.DeviceFunctions;\nimport com.pulumi.junipermist.device.inputs.GetApStatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apStats = DeviceFunctions.getApStats(GetApStatsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  apStats:\n    fn::invoke:\n      function: junipermist:device:getApStats\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApStats.\n",
                "properties": {
                    "duration": {
                        "type": "string",
                        "description": "duration like 7d, 2w\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApStats.\n",
                "properties": {
                    "deviceApStats": {
                        "items": {
                            "$ref": "#/types/junipermist:device/getApStatsDeviceApStat:getApStatsDeviceApStat"
                        },
                        "type": "array"
                    },
                    "duration": {
                        "description": "duration like 7d, 2w\n",
                        "type": "string"
                    },
                    "end": {
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n",
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "deviceApStats",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:device/getGatewayStats:getGatewayStats": {
            "description": "This data source provides the list of Gateways with their statistics.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst gatewayStats = junipermist.device.getGatewayStats({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ngateway_stats = junipermist.device.get_gateway_stats(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gatewayStats = JuniperMist.Device.GetGatewayStats.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.GetGatewayStats(ctx, \u0026device.GetGatewayStatsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.DeviceFunctions;\nimport com.pulumi.junipermist.device.inputs.GetGatewayStatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gatewayStats = DeviceFunctions.getGatewayStats(GetGatewayStatsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  gatewayStats:\n    fn::invoke:\n      function: junipermist:device:getGatewayStats\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayStats.\n",
                "properties": {
                    "duration": {
                        "type": "string",
                        "description": "duration like 7d, 2w\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayStats.\n",
                "properties": {
                    "deviceGatewayStats": {
                        "items": {
                            "$ref": "#/types/junipermist:device/getGatewayStatsDeviceGatewayStat:getGatewayStatsDeviceGatewayStat"
                        },
                        "type": "array"
                    },
                    "duration": {
                        "description": "duration like 7d, 2w\n",
                        "type": "string"
                    },
                    "end": {
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n",
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "deviceGatewayStats",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:device/getSwitchStats:getSwitchStats": {
            "description": "This data source provides the list of Switches with their statistics.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst switchStats = junipermist.device.getSwitchStats({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nswitch_stats = junipermist.device.get_switch_stats(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var switchStats = JuniperMist.Device.GetSwitchStats.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.GetSwitchStats(ctx, \u0026device.GetSwitchStatsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.DeviceFunctions;\nimport com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  switchStats:\n    fn::invoke:\n      function: junipermist:device:getSwitchStats\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSwitchStats.\n",
                "properties": {
                    "duration": {
                        "type": "string",
                        "description": "duration like 7d, 2w\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n"
                    },
                    "evpnUnused": {
                        "type": "string",
                        "description": "if `evpn_unused`==`true`, find EVPN eligible switches which don’t belong to any EVPN Topology yet\n"
                    },
                    "evpntopoId": {
                        "type": "string",
                        "description": "EVPN Topology ID\n"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "type": "integer",
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSwitchStats.\n",
                "properties": {
                    "deviceSwitchStats": {
                        "items": {
                            "$ref": "#/types/junipermist:device/getSwitchStatsDeviceSwitchStat:getSwitchStatsDeviceSwitchStat"
                        },
                        "type": "array"
                    },
                    "duration": {
                        "description": "duration like 7d, 2w\n",
                        "type": "string"
                    },
                    "end": {
                        "description": "end datetime, can be epoch or relative time like -1d, -2h; now if not specified\n",
                        "type": "integer"
                    },
                    "evpnUnused": {
                        "description": "if `evpn_unused`==`true`, find EVPN eligible switches which don’t belong to any EVPN Topology yet\n",
                        "type": "string"
                    },
                    "evpntopoId": {
                        "description": "EVPN Topology ID\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "mac": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "start": {
                        "description": "start datetime, can be epoch or relative time like -1d, -1w; -1d if not specified\n",
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "required": [
                    "deviceSwitchStats",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstAlarms:getConstAlarms": {
            "description": "This data source provides the list of  available Alarms.\nThe alarm `key` can be used to configure the `mist_org_alarmtemplate.rules`.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfAlarms = junipermist.getConstAlarms({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_alarms = junipermist.get_const_alarms()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfAlarms = JuniperMist.GetConstAlarms.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstAlarms(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfAlarms = JunipermistFunctions.getConstAlarms();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfAlarms:\n    fn::invoke:\n      function: junipermist:getConstAlarms\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstAlarms.\n",
                "properties": {
                    "constAlarms": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstAlarmsConstAlarm:getConstAlarmsConstAlarm"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constAlarms",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstAppCategories:getConstAppCategories": {
            "description": "This data source provides the of ConstAppCategories.\nThis information can be used as `app_categories` in the `junipermist.org.Service` resource\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfAppCategories = junipermist.getConstAppCategories({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_app_categories = junipermist.get_const_app_categories()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfAppCategories = JuniperMist.GetConstAppCategories.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstAppCategories(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfAppCategories = JunipermistFunctions.getConstAppCategories();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfAppCategories:\n    fn::invoke:\n      function: junipermist:getConstAppCategories\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstAppCategories.\n",
                "properties": {
                    "constAppCategories": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstAppCategoriesConstAppCategory:getConstAppCategoriesConstAppCategory"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constAppCategories",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstAppSubCategories:getConstAppSubCategories": {
            "description": "This data source provides the of ConstAppSubCategories.\nThis information can be used as `app_subcategories` in the `junipermist.org.Service` resource\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfAppSubCategories = junipermist.getConstAppSubCategories({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_app_sub_categories = junipermist.get_const_app_sub_categories()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfAppSubCategories = JuniperMist.GetConstAppSubCategories.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstAppSubCategories(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfAppSubCategories = JunipermistFunctions.getConstAppSubCategories();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfAppSubCategories:\n    fn::invoke:\n      function: junipermist:getConstAppSubCategories\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstAppSubCategories.\n",
                "properties": {
                    "constAppSubCategories": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstAppSubCategoriesConstAppSubCategory:getConstAppSubCategoriesConstAppSubCategory"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constAppSubCategories",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstApplications:getConstApplications": {
            "description": "This data source provides the of ConstApplications.\nThis information can be used as `apps` in the `junipermist.org.Service` resource, the `junipermist.site.Setting` resource (`mist_site_setting.gateway_mgmt.app_probing.apps`) or in the `junipermist.org.Setting` resource (`mist_org_setting.gateway_mgmt.app_probing.apps`)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfApplications = junipermist.getConstApplications({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_applications = junipermist.get_const_applications()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfApplications = JuniperMist.GetConstApplications.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstApplications(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfApplications = JunipermistFunctions.getConstApplications();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfApplications:\n    fn::invoke:\n      function: junipermist:getConstApplications\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstApplications.\n",
                "properties": {
                    "constApplications": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstApplicationsConstApplication:getConstApplicationsConstApplication"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constApplications",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstCountries:getConstCountries": {
            "description": "This data source provides the of ConstCountries.\nThis information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfCountries = junipermist.getConstCountries({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_countries = junipermist.get_const_countries()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfCountries = JuniperMist.GetConstCountries.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstCountries(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfCountries = JunipermistFunctions.getConstCountries();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfCountries:\n    fn::invoke:\n      function: junipermist:getConstCountries\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstCountries.\n",
                "properties": {
                    "constCountries": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstCountriesConstCountry:getConstCountriesConstCountry"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constCountries",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstTrafficTypes:getConstTrafficTypes": {
            "description": "This data source provides the of ConstTrafficTypes.\nThis information can be used to define the Country in the RF templates (`junipermist.org.Rftemplate`)\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfTrafficTypes = junipermist.getConstTrafficTypes({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_traffic_types = junipermist.get_const_traffic_types()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfTrafficTypes = JuniperMist.GetConstTrafficTypes.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstTrafficTypes(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfTrafficTypes = JunipermistFunctions.getConstTrafficTypes();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfTrafficTypes:\n    fn::invoke:\n      function: junipermist:getConstTrafficTypes\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstTrafficTypes.\n",
                "properties": {
                    "constTrafficTypes": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstTrafficTypesConstTrafficType:getConstTrafficTypesConstTrafficType"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constTrafficTypes",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getConstWebhooks:getConstWebhooks": {
            "description": "This data source provides the list of Webhook Topics.\nThis information can be used to configure webhooks at the Org level or at the Site level with the `junipermist.org.Webhook` resource or the `junipermist.site.Webhook` resource.\n\n\u003e Only the Webhook topics with `for_org`==` true` are supported at the Org level.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst listOfWebhooks = junipermist.getConstWebhooks({});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nlist_of_webhooks = junipermist.get_const_webhooks()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listOfWebhooks = JuniperMist.GetConstWebhooks.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetConstWebhooks(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listOfWebhooks = JunipermistFunctions.getConstWebhooks();\n\n    }\n}\n```\n```yaml\nvariables:\n  listOfWebhooks:\n    fn::invoke:\n      function: junipermist:getConstWebhooks\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getConstWebhooks.\n",
                "properties": {
                    "constWebhooks": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getConstWebhooksConstWebhook:getConstWebhooksConstWebhook"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "constWebhooks",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:index/getSites:getSites": {
            "description": "This datasource provides the list of sites in a Mist Organization.\nA site represents a project, a deployment. A site contains a set of Maps, Wlans, Policies, Zones, ...\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst sites = junipermist.getSites({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nsites = junipermist.get_sites(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sites = JuniperMist.GetSites.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := junipermist.GetSites(ctx, \u0026junipermist.GetSitesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.JunipermistFunctions;\nimport com.pulumi.junipermist.inputs.GetSitesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sites = JunipermistFunctions.getSites(GetSitesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sites:\n    fn::invoke:\n      function: junipermist:getSites\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSites.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSites.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "sites": {
                        "items": {
                            "$ref": "#/types/junipermist:index/getSitesSite:getSitesSite"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "sites",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp": {
            "description": "This data source provides the list of AP Device Profiles.\nAP Device profiles for aps are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They allow for efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst deviceprofile = junipermist.org.getDeviceprofilesAp({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ndeviceprofile = junipermist.org.get_deviceprofiles_ap(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deviceprofile = JuniperMist.Org.GetDeviceprofilesAp.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetDeviceprofilesAp(ctx, \u0026org.GetDeviceprofilesApArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetDeviceprofilesApArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var deviceprofile = OrgFunctions.getDeviceprofilesAp(GetDeviceprofilesApArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  deviceprofile:\n    fn::invoke:\n      function: junipermist:org:getDeviceprofilesAp\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceprofilesAp.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceprofilesAp.\n",
                "properties": {
                    "deviceprofiles": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getDeviceprofilesApDeviceprofile:getDeviceprofilesApDeviceprofile"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "deviceprofiles",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getDeviceprofilesGateway:getDeviceprofilesGateway": {
            "description": "This provides the list of Gateway Device Profiles (Hub Profile).\nA HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst deviceprofile = junipermist.org.getDeviceprofilesGateway({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ndeviceprofile = junipermist.org.get_deviceprofiles_gateway(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deviceprofile = JuniperMist.Org.GetDeviceprofilesGateway.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetDeviceprofilesGateway(ctx, \u0026org.GetDeviceprofilesGatewayArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetDeviceprofilesGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var deviceprofile = OrgFunctions.getDeviceprofilesGateway(GetDeviceprofilesGatewayArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  deviceprofile:\n    fn::invoke:\n      function: junipermist:org:getDeviceprofilesGateway\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceprofilesGateway.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceprofilesGateway.\n",
                "properties": {
                    "deviceprofiles": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getDeviceprofilesGatewayDeviceprofile:getDeviceprofilesGatewayDeviceprofile"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "deviceprofiles",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getGatewaytemplates:getGatewaytemplates": {
            "description": "This data source provides the list of Gateway Templates.\nA Gateway template can be used to define generic gateway configuration at the org level andbe applied to one or multiple Sites. It works like a blueprint of the network of the site.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst templates = junipermist.org.getGatewaytemplates({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ntemplates = junipermist.org.get_gatewaytemplates(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var templates = JuniperMist.Org.GetGatewaytemplates.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetGatewaytemplates(ctx, \u0026org.GetGatewaytemplatesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetGatewaytemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var templates = OrgFunctions.getGatewaytemplates(GetGatewaytemplatesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  templates:\n    fn::invoke:\n      function: junipermist:org:getGatewaytemplates\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGatewaytemplates.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewaytemplates.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgGatewaytemplates": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getGatewaytemplatesOrgGatewaytemplate:getGatewaytemplatesOrgGatewaytemplate"
                        },
                        "type": "array"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgGatewaytemplates",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getIdpprofiles:getIdpprofiles": {
            "description": "This data source provides the list of WAN Assurance IDP Profiles.\nAn IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system.It specifies how the idp system should detect and respond to potential security threats or attacks on a network.The profile includes rules and policies that determine which types of traffic or attacks should be monitored,what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst idpprofiles = junipermist.org.getIdpprofiles({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nidpprofiles = junipermist.org.get_idpprofiles(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var idpprofiles = JuniperMist.Org.GetIdpprofiles.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetIdpprofiles(ctx, \u0026org.GetIdpprofilesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetIdpprofilesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var idpprofiles = OrgFunctions.getIdpprofiles(GetIdpprofilesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  idpprofiles:\n    fn::invoke:\n      function: junipermist:org:getIdpprofiles\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpprofiles.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpprofiles.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgIdpprofiles": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getIdpprofilesOrgIdpprofile:getIdpprofilesOrgIdpprofile"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgIdpprofiles",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getInventory:getInventory": {
            "description": "This data source provides the list of Devices in the Org inventory.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst inventory = junipermist.org.getInventory({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ninventory = junipermist.org.get_inventory(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var inventory = JuniperMist.Org.GetInventory.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.LookupInventory(ctx, \u0026org.LookupInventoryArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetInventoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var inventory = OrgFunctions.getInventory(GetInventoryArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  inventory:\n    fn::invoke:\n      function: junipermist:org:getInventory\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInventory.\n",
                "properties": {
                    "mac": {
                        "type": "string",
                        "description": "MAC address\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "device model\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "serial": {
                        "type": "string",
                        "description": "device serial\n"
                    },
                    "siteId": {
                        "type": "string",
                        "description": "site id if assigned, null if not assigned\n"
                    },
                    "unassigned": {
                        "type": "boolean",
                        "description": "to display Unassigned devices\n"
                    },
                    "vc": {
                        "type": "boolean",
                        "description": "To display Virtual Chassis members\n"
                    },
                    "vcMac": {
                        "type": "string",
                        "description": "Virtual Chassis MAC Address\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getInventory.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "mac": {
                        "description": "MAC address\n",
                        "type": "string"
                    },
                    "model": {
                        "description": "device model\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgInventories": {
                        "description": "List of devices\n",
                        "items": {
                            "$ref": "#/types/junipermist:org/getInventoryOrgInventory:getInventoryOrgInventory"
                        },
                        "type": "array"
                    },
                    "serial": {
                        "description": "device serial\n",
                        "type": "string"
                    },
                    "siteId": {
                        "description": "site id if assigned, null if not assigned\n",
                        "type": "string"
                    },
                    "unassigned": {
                        "description": "to display Unassigned devices\n",
                        "type": "boolean"
                    },
                    "vc": {
                        "description": "To display Virtual Chassis members\n",
                        "type": "boolean"
                    },
                    "vcMac": {
                        "description": "Virtual Chassis MAC Address\n",
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "orgInventories",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getNacidpMetadata:getNacidpMetadata": {
            "description": "This data source provides the NAC IDP Metadata information.\nThe provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst samlIdp = junipermist.org.getNacidpMetadata({\n    orgId: terraformTest.id,\n    nacidpId: samlIdpOne.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nsaml_idp = junipermist.org.get_nacidp_metadata(org_id=terraform_test[\"id\"],\n    nacidp_id=saml_idp_one[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var samlIdp = JuniperMist.Org.GetNacidpMetadata.Invoke(new()\n    {\n        OrgId = terraformTest.Id,\n        NacidpId = samlIdpOne.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetNacidpMetadata(ctx, \u0026org.GetNacidpMetadataArgs{\n\t\t\tOrgId:    terraformTest.Id,\n\t\t\tNacidpId: samlIdpOne.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetNacidpMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var samlIdp = OrgFunctions.getNacidpMetadata(GetNacidpMetadataArgs.builder()\n            .orgId(terraformTest.id())\n            .nacidpId(samlIdpOne.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  samlIdp:\n    fn::invoke:\n      function: junipermist:org:getNacidpMetadata\n      arguments:\n        orgId: ${terraformTest.id}\n        nacidpId: ${samlIdpOne.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNacidpMetadata.\n",
                "properties": {
                    "nacidpId": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "nacidpId",
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNacidpMetadata.\n",
                "properties": {
                    "acsUrl": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "logoutUrl": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "nacidpId": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "required": [
                    "acsUrl",
                    "entityId",
                    "logoutUrl",
                    "metadata",
                    "nacidpId",
                    "orgId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getNacrules:getNacrules": {
            "description": "This data source provides the list of NAC Rules (Auth Policies).\nA NAC Rule defines a list of critera (NAC Tag) the network client must match to execute the Rule, an action (Allow/Deny)and a list of RADIUS Attributes (NAC Tags) to return\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst nacrules = junipermist.org.getNacrules({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nnacrules = junipermist.org.get_nacrules(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nacrules = JuniperMist.Org.GetNacrules.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetNacrules(ctx, \u0026org.GetNacrulesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetNacrulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nacrules = OrgFunctions.getNacrules(GetNacrulesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nacrules:\n    fn::invoke:\n      function: junipermist:org:getNacrules\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNacrules.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNacrules.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgNacrules": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getNacrulesOrgNacrule:getNacrulesOrgNacrule"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgNacrules",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getNactags:getNactags": {
            "description": "This data source provides the list of NAC Tags (Auth Policy Labels).\nThe NAC Tags can be used in the NAC Rules to define the matching criterias or the returned RADIUS Attributes\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst nactags = junipermist.org.getNactags({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nnactags = junipermist.org.get_nactags(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nactags = JuniperMist.Org.GetNactags.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetNactags(ctx, \u0026org.GetNactagsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetNactagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nactags = OrgFunctions.getNactags(GetNactagsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nactags:\n    fn::invoke:\n      function: junipermist:org:getNactags\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNactags.\n",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "match": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNactags.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "match": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgNactags": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getNactagsOrgNactag:getNactagsOrgNactag"
                        },
                        "type": "array"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "orgNactags",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getNetworks:getNetworks": {
            "description": "This data source provides the list of WAN Assurance Networks.\nThe Networks are used in the `service_policies` from the Gateway configuration and Gateway templates\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst networks = junipermist.org.getNetworks({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nnetworks = junipermist.org.get_networks(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var networks = JuniperMist.Org.GetNetworks.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetNetworks(ctx, \u0026org.GetNetworksArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetNetworksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var networks = OrgFunctions.getNetworks(GetNetworksArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  networks:\n    fn::invoke:\n      function: junipermist:org:getNetworks\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworks.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgNetworks": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getNetworksOrgNetwork:getNetworksOrgNetwork"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgNetworks",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getNetworktemplates:getNetworktemplates": {
            "description": "This data source provides the list of Org Network Templates (Switch templates).\nA network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings. Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst templates = junipermist.org.getNetworktemplates({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ntemplates = junipermist.org.get_networktemplates(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var templates = JuniperMist.Org.GetNetworktemplates.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetNetworktemplates(ctx, \u0026org.GetNetworktemplatesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetNetworktemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var templates = OrgFunctions.getNetworktemplates(GetNetworktemplatesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  templates:\n    fn::invoke:\n      function: junipermist:org:getNetworktemplates\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworktemplates.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworktemplates.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgNetworktemplates": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getNetworktemplatesOrgNetworktemplate:getNetworktemplatesOrgNetworktemplate"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgNetworktemplates",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getPsks:getPsks": {
            "description": "This data source provides the list of WAN Assurance Psks.\nThe Psks are used in the `service_policies` from the Gateway configuration and Gateway templates\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst psksVip = junipermist.org.getPsks({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    role: \"vip\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\npsks_vip = junipermist.org.get_psks(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    role=\"vip\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var psksVip = JuniperMist.Org.GetPsks.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n        Role = \"vip\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetPsks(ctx, \u0026org.GetPsksArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t\tRole:  pulumi.StringRef(\"vip\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetPsksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var psksVip = OrgFunctions.getPsks(GetPsksArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .role(\"vip\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  psksVip:\n    fn::invoke:\n      function: junipermist:org:getPsks\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n        role: vip\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPsks.\n",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "role": {
                        "type": "string"
                    },
                    "ssid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPsks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgPsks": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getPsksOrgPsk:getPsksOrgPsk"
                        },
                        "type": "array"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "role": {
                        "type": "string"
                    },
                    "ssid": {
                        "type": "string"
                    }
                },
                "required": [
                    "orgId",
                    "orgPsks",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getRftemplates:getRftemplates": {
            "description": "This resource provides the list of RF Templates.\nThe RF Templates can be used to define Wireless Access Points radio configuration, and can be assigned to the sites\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst templates = junipermist.org.getRftemplates({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ntemplates = junipermist.org.get_rftemplates(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var templates = JuniperMist.Org.GetRftemplates.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetRftemplates(ctx, \u0026org.GetRftemplatesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetRftemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var templates = OrgFunctions.getRftemplates(GetRftemplatesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  templates:\n    fn::invoke:\n      function: junipermist:org:getRftemplates\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRftemplates.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRftemplates.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgRftemplates": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getRftemplatesOrgRftemplate:getRftemplatesOrgRftemplate"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgRftemplates",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getServicepolicies:getServicepolicies": {
            "description": "This data source provides the list of WAN Assurance Service Policies (Application Policiess).\nThe Service Policies are used in the `servicepolicy_policies` from the Gateway configuration and Gateway templates.They can be used to manage common policies betweeen multiples configurations\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst servicepolicies = junipermist.org.getServicepolicies({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nservicepolicies = junipermist.org.get_servicepolicies(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var servicepolicies = JuniperMist.Org.GetServicepolicies.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetServicepolicies(ctx, \u0026org.GetServicepoliciesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetServicepoliciesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var servicepolicies = OrgFunctions.getServicepolicies(GetServicepoliciesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  servicepolicies:\n    fn::invoke:\n      function: junipermist:org:getServicepolicies\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServicepolicies.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServicepolicies.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgServicepolicies": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getServicepoliciesOrgServicepolicy:getServicepoliciesOrgServicepolicy"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgServicepolicies",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getServices:getServices": {
            "description": "This data source provides the list of WAN Assurance Services (Applications).\nThe Services are used in the `service_policies` from the Gateway configuration and Gateway templates\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst services = junipermist.org.getServices({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nservices = junipermist.org.get_services(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var services = JuniperMist.Org.GetServices.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetServices(ctx, \u0026org.GetServicesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetServicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var services = OrgFunctions.getServices(GetServicesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  services:\n    fn::invoke:\n      function: junipermist:org:getServices\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgServices": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getServicesOrgService:getServicesOrgService"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgServices",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getSitegroups:getSitegroups": {
            "description": "This data source provides the list of Org Site Groups (sitegroups).\nA site group is a feature that allows users to group multiple sites together based on regions, functions, or other parameters for efficient management of devices. Sites can exist in multiple groups simultaneously, and site groups can be used to ensure consistent settings, manage administrator access, and apply specific templates to groups of sites.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst sitegroups = junipermist.org.getSitegroups({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nsitegroups = junipermist.org.get_sitegroups(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sitegroups = JuniperMist.Org.GetSitegroups.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetSitegroups(ctx, \u0026org.GetSitegroupsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetSitegroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sitegroups = OrgFunctions.getSitegroups(GetSitegroupsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sitegroups:\n    fn::invoke:\n      function: junipermist:org:getSitegroups\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSitegroups.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSitegroups.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgSitegroups": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getSitegroupsOrgSitegroup:getSitegroupsOrgSitegroup"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgSitegroups",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getSsoMetadata:getSsoMetadata": {
            "description": "This data source provides the SSO Metadata information.\nThe provided information (`entity_id`, `acs_url`, `logout_url` and `metadata`) are the informationrequired to configure the IDP\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst ssoIdp = junipermist.org.getSsoMetadata({\n    orgId: terraformTest.id,\n    ssoId: ssoOne.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nsso_idp = junipermist.org.get_sso_metadata(org_id=terraform_test[\"id\"],\n    sso_id=sso_one[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ssoIdp = JuniperMist.Org.GetSsoMetadata.Invoke(new()\n    {\n        OrgId = terraformTest.Id,\n        SsoId = ssoOne.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetSsoMetadata(ctx, \u0026org.GetSsoMetadataArgs{\n\t\t\tOrgId: terraformTest.Id,\n\t\t\tSsoId: ssoOne.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetSsoMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ssoIdp = OrgFunctions.getSsoMetadata(GetSsoMetadataArgs.builder()\n            .orgId(terraformTest.id())\n            .ssoId(ssoOne.id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ssoIdp:\n    fn::invoke:\n      function: junipermist:org:getSsoMetadata\n      arguments:\n        orgId: ${terraformTest.id}\n        ssoId: ${ssoOne.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSsoMetadata.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    },
                    "ssoId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "ssoId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSsoMetadata.\n",
                "properties": {
                    "acsUrl": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "logoutUrl": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "ssoId": {
                        "type": "string"
                    }
                },
                "required": [
                    "acsUrl",
                    "entityId",
                    "logoutUrl",
                    "metadata",
                    "orgId",
                    "ssoId",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getVpns:getVpns": {
            "description": "This data source provide the list of the Org VPNs.\n\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpns.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpns.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgVpns": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getVpnsOrgVpn:getVpnsOrgVpn"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgVpns",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getWebhooks:getWebhooks": {
            "description": "This data source provides the list of Org Webhooks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst webhooks = junipermist.org.getWebhooks({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nwebhooks = junipermist.org.get_webhooks(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webhooks = JuniperMist.Org.GetWebhooks.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetWebhooks(ctx, \u0026org.GetWebhooksArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetWebhooksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webhooks = OrgFunctions.getWebhooks(GetWebhooksArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  webhooks:\n    fn::invoke:\n      function: junipermist:org:getWebhooks\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhooks.\n",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "page": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhooks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgWebhooks": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getWebhooksOrgWebhook:getWebhooksOrgWebhook"
                        },
                        "type": "array"
                    },
                    "page": {
                        "type": "integer"
                    }
                },
                "required": [
                    "orgId",
                    "orgWebhooks",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getWlantemplates:getWlantemplates": {
            "description": "This datasource provides the list of WLAN Templates in a Mist Organization.\nA WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level. WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles. They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst templates = junipermist.org.getWlantemplates({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\ntemplates = junipermist.org.get_wlantemplates(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var templates = JuniperMist.Org.GetWlantemplates.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := org.GetWlantemplates(ctx, \u0026org.GetWlantemplatesArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.org.OrgFunctions;\nimport com.pulumi.junipermist.org.inputs.GetWlantemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var templates = OrgFunctions.getWlantemplates(GetWlantemplatesArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  templates:\n    fn::invoke:\n      function: junipermist:org:getWlantemplates\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWlantemplates.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWlantemplates.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgWlantemplates": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getWlantemplatesOrgWlantemplate:getWlantemplatesOrgWlantemplate"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgWlantemplates",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:org/getWxtags:getWxtags": {
            "description": "This resource provides the list of Org WxLan tags (labels).\nA WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst switchStats = junipermist.device.getSwitchStats({\n    orgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\nswitch_stats = junipermist.device.get_switch_stats(org_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var switchStats = JuniperMist.Device.GetSwitchStats.Invoke(new()\n    {\n        OrgId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.GetSwitchStats(ctx, \u0026device.GetSwitchStatsArgs{\n\t\t\tOrgId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.device.DeviceFunctions;\nimport com.pulumi.junipermist.device.inputs.GetSwitchStatsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var switchStats = DeviceFunctions.getSwitchStats(GetSwitchStatsArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  switchStats:\n    fn::invoke:\n      function: junipermist:device:getSwitchStats\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWxtags.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWxtags.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "orgWxtags": {
                        "items": {
                            "$ref": "#/types/junipermist:org/getWxtagsOrgWxtag:getWxtagsOrgWxtag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "orgId",
                    "orgWxtags",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:site/getPsks:getPsks": {
            "description": "This data source provides the list of WAN Assurance Psks.\nThe Psks are used in the `service_policies` from the Gateway configuration and Gateway templates\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as junipermist from \"@pulumi/junipermist\";\n\nconst psksVip = junipermist.site.getPsks({\n    siteId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    role: \"vip\",\n});\n```\n```python\nimport pulumi\nimport pulumi_junipermist as junipermist\n\npsks_vip = junipermist.site.get_psks(site_id=\"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n    role=\"vip\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing JuniperMist = Pulumi.JuniperMist;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var psksVip = JuniperMist.Site.GetPsks.Invoke(new()\n    {\n        SiteId = \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n        Role = \"vip\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.GetPsks(ctx, \u0026site.GetPsksArgs{\n\t\t\tSiteId: \"15fca2ac-b1a6-47cc-9953-cc6906281550\",\n\t\t\tRole:   pulumi.StringRef(\"vip\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.SiteFunctions;\nimport com.pulumi.junipermist.site.inputs.GetPsksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var psksVip = SiteFunctions.getPsks(GetPsksArgs.builder()\n            .siteId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .role(\"vip\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  psksVip:\n    fn::invoke:\n      function: junipermist:site:getPsks\n      arguments:\n        siteId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n        role: vip\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPsks.\n",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "role": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "ssid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "siteId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPsks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "role": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "sitePsks": {
                        "items": {
                            "$ref": "#/types/junipermist:site/getPsksSitePsk:getPsksSitePsk"
                        },
                        "type": "array"
                    },
                    "ssid": {
                        "type": "string"
                    }
                },
                "required": [
                    "siteId",
                    "sitePsks",
                    "id"
                ],
                "type": "object"
            }
        },
        "junipermist:site/getWebhooks:getWebhooks": {
            "description": "This data source provides the list of Site Webhooks.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.junipermist.site.SiteFunctions;\nimport com.pulumi.junipermist.site.inputs.GetWebhooksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webhooks = SiteFunctions.getWebhooks(GetWebhooksArgs.builder()\n            .orgId(\"15fca2ac-b1a6-47cc-9953-cc6906281550\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  webhooks:\n    fn::invoke:\n      function: junipermist:site:getWebhooks\n      arguments:\n        orgId: 15fca2ac-b1a6-47cc-9953-cc6906281550\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhooks.\n",
                "properties": {
                    "limit": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "siteId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhooks.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "string"
                    },
                    "siteWebhooks": {
                        "items": {
                            "$ref": "#/types/junipermist:site/getWebhooksSiteWebhook:getWebhooksSiteWebhook"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "siteId",
                    "siteWebhooks",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}