// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Site Settings.
 *
 * The Site Settings can be used to customize the Site configuration and assign Site Variables (Sites Variables can be reused in configuration templates)
 *
 * > When using the Mist APIs, all the switch settings defined at the site level are stored under the site settings with all the rest of the site configuration (`/api/v1/sites/{site_id}/setting` Mist API Endpoint). To simplify this resource, all the site level switches related settings are moved into the `junipermist.site.Networktemplate` resource
 *
 * !> Only ONE `junipermist.site.Setting` resource can be configured per site. If multiple ones are configured, only the last one defined we be successfully deployed to Mist
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const siteOne = new junipermist.site.Setting("site_one", {
 *     siteId: terraformSite.id,
 *     apUpdownThreshold: 5,
 *     deviceUpdownThreshold: 5,
 *     autoUpgrade: {
 *         enabled: true,
 *         day_of_week: "tue",
 *         time_of_day: "02:00",
 *         version: "beta",
 *     },
 *     configAutoRevert: true,
 *     persistConfigOnDevice: true,
 *     proxy: {
 *         url: "http://myproxy:3128",
 *     },
 *     rogue: {
 *         enabled: true,
 *         honeypot_enabled: true,
 *         min_duration: 5,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_site_setting` with:
 *
 * Site Setting can be imported by specifying the site_id
 *
 * ```sh
 * $ pulumi import junipermist:site/setting:Setting site_setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
 * ```
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingState, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:site/setting:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    declare public readonly analytic: pulumi.Output<outputs.site.SettingAnalytic>;
    /**
     * Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `deviceUpdownThreshold` is ignored.
     */
    declare public readonly apUpdownThreshold: pulumi.Output<number | undefined>;
    /**
     * Auto Upgrade Settings
     */
    declare public readonly autoUpgrade: pulumi.Output<outputs.site.SettingAutoUpgrade>;
    /**
     * auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware upgrade
     */
    declare public readonly autoUpgradeEsl: pulumi.Output<outputs.site.SettingAutoUpgradeEsl | undefined>;
    /**
     * enable threshold-based bgp neighbor down delivery.
     */
    declare public readonly bgpNeighborUpdownThreshold: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly blacklistUrl: pulumi.Output<string>;
    /**
     * BLE AP settings
     */
    declare public readonly bleConfig: pulumi.Output<outputs.site.SettingBleConfig | undefined>;
    /**
     * Whether to enable ap auto config revert
     */
    declare public readonly configAutoRevert: pulumi.Output<boolean>;
    /**
     * Mist also uses some heuristic rules to prevent destructive configs from being pushed
     */
    declare public readonly configPushPolicy: pulumi.Output<outputs.site.SettingConfigPushPolicy | undefined>;
    /**
     * You can define some URLs that's critical to site operations the latency will be captured and considered for site health
     */
    declare public readonly criticalUrlMonitoring: pulumi.Output<outputs.site.SettingCriticalUrlMonitoring | undefined>;
    /**
     * Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     */
    declare public readonly defaultPortUsage: pulumi.Output<string>;
    /**
     * By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device type is desired, use the following
     */
    declare public readonly deviceUpdownThreshold: pulumi.Output<number | undefined>;
    declare public readonly enableUnii4: pulumi.Output<boolean>;
    /**
     * **Note**: if hours does not exist, it's treated as everyday of the week, 00:00-23:59. Currently, we don't allow multiple ranges for the same day
     */
    declare public readonly engagement: pulumi.Output<outputs.site.SettingEngagement>;
    /**
     * Gateway Site settings
     */
    declare public readonly gatewayMgmt: pulumi.Output<outputs.site.SettingGatewayMgmt>;
    /**
     * Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `deviceUpdownThreshold` is ignored.
     */
    declare public readonly gatewayUpdownThreshold: pulumi.Output<number | undefined>;
    declare public readonly juniperSrx: pulumi.Output<outputs.site.SettingJuniperSrx | undefined>;
    /**
     * LED AP settings
     */
    declare public readonly led: pulumi.Output<outputs.site.SettingLed>;
    declare public readonly marvis: pulumi.Output<outputs.site.SettingMarvis | undefined>;
    /**
     * Occupancy Analytics settings
     */
    declare public readonly occupancy: pulumi.Output<outputs.site.SettingOccupancy>;
    /**
     * Whether to store the config on AP
     */
    declare public readonly persistConfigOnDevice: pulumi.Output<boolean>;
    /**
     * Proxy Configuration to talk to Mist
     */
    declare public readonly proxy: pulumi.Output<outputs.site.SettingProxy | undefined>;
    /**
     * By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
     */
    declare public readonly removeExistingConfigs: pulumi.Output<boolean | undefined>;
    /**
     * Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
     */
    declare public readonly reportGatt: pulumi.Output<boolean | undefined>;
    /**
     * Rogue site settings
     */
    declare public readonly rogue: pulumi.Output<outputs.site.SettingRogue>;
    /**
     * Managed mobility
     */
    declare public readonly rtsa: pulumi.Output<outputs.site.SettingRtsa>;
    /**
     * Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute window, there are more than Y distinct client encountering over X failures
     */
    declare public readonly simpleAlert: pulumi.Output<outputs.site.SettingSimpleAlert | undefined>;
    declare public readonly siteId: pulumi.Output<string>;
    declare public readonly skyatp: pulumi.Output<outputs.site.SettingSkyatp | undefined>;
    declare public readonly sleThresholds: pulumi.Output<outputs.site.SettingSleThresholds | undefined>;
    declare public readonly srxApp: pulumi.Output<outputs.site.SettingSrxApp | undefined>;
    /**
     * When limitSshAccess = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
     */
    declare public readonly sshKeys: pulumi.Output<string[]>;
    declare public readonly ssr: pulumi.Output<outputs.site.SettingSsr>;
    /**
     * Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `deviceUpdownThreshold` is ignored.
     */
    declare public readonly switchUpdownThreshold: pulumi.Output<number | undefined>;
    declare public readonly syntheticTest: pulumi.Output<outputs.site.SettingSyntheticTest>;
    /**
     * Whether to track anonymous BLE assets (requires ‘track_asset’  enabled)
     */
    declare public readonly trackAnonymousDevices: pulumi.Output<boolean | undefined>;
    /**
     * AP Uplink port configuration
     */
    declare public readonly uplinkPortConfig: pulumi.Output<outputs.site.SettingUplinkPortConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    declare public readonly vars: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly vna: pulumi.Output<outputs.site.SettingVna | undefined>;
    /**
     * enable threshold-based vpn path down delivery.
     */
    declare public readonly vpnPathUpdownThreshold: pulumi.Output<number | undefined>;
    /**
     * enable threshold-based vpn peer down delivery.
     */
    declare public readonly vpnPeerUpdownThreshold: pulumi.Output<number | undefined>;
    /**
     * Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     */
    declare public readonly vsInstance: pulumi.Output<{[key: string]: outputs.site.SettingVsInstance} | undefined>;
    declare public readonly wanVna: pulumi.Output<outputs.site.SettingWanVna | undefined>;
    declare public /*out*/ readonly watchedStationUrl: pulumi.Output<string>;
    declare public /*out*/ readonly whitelistUrl: pulumi.Output<string>;
    /**
     * WIDS site settings
     */
    declare public readonly wids: pulumi.Output<outputs.site.SettingWids>;
    /**
     * Wi-Fi site settings
     */
    declare public readonly wifi: pulumi.Output<outputs.site.SettingWifi>;
    declare public readonly wiredVna: pulumi.Output<outputs.site.SettingWiredVna | undefined>;
    /**
     * Zone Occupancy alert site settings
     */
    declare public readonly zoneOccupancyAlert: pulumi.Output<outputs.site.SettingZoneOccupancyAlert>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingArgs | SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingState | undefined;
            resourceInputs["analytic"] = state?.analytic;
            resourceInputs["apUpdownThreshold"] = state?.apUpdownThreshold;
            resourceInputs["autoUpgrade"] = state?.autoUpgrade;
            resourceInputs["autoUpgradeEsl"] = state?.autoUpgradeEsl;
            resourceInputs["bgpNeighborUpdownThreshold"] = state?.bgpNeighborUpdownThreshold;
            resourceInputs["blacklistUrl"] = state?.blacklistUrl;
            resourceInputs["bleConfig"] = state?.bleConfig;
            resourceInputs["configAutoRevert"] = state?.configAutoRevert;
            resourceInputs["configPushPolicy"] = state?.configPushPolicy;
            resourceInputs["criticalUrlMonitoring"] = state?.criticalUrlMonitoring;
            resourceInputs["defaultPortUsage"] = state?.defaultPortUsage;
            resourceInputs["deviceUpdownThreshold"] = state?.deviceUpdownThreshold;
            resourceInputs["enableUnii4"] = state?.enableUnii4;
            resourceInputs["engagement"] = state?.engagement;
            resourceInputs["gatewayMgmt"] = state?.gatewayMgmt;
            resourceInputs["gatewayUpdownThreshold"] = state?.gatewayUpdownThreshold;
            resourceInputs["juniperSrx"] = state?.juniperSrx;
            resourceInputs["led"] = state?.led;
            resourceInputs["marvis"] = state?.marvis;
            resourceInputs["occupancy"] = state?.occupancy;
            resourceInputs["persistConfigOnDevice"] = state?.persistConfigOnDevice;
            resourceInputs["proxy"] = state?.proxy;
            resourceInputs["removeExistingConfigs"] = state?.removeExistingConfigs;
            resourceInputs["reportGatt"] = state?.reportGatt;
            resourceInputs["rogue"] = state?.rogue;
            resourceInputs["rtsa"] = state?.rtsa;
            resourceInputs["simpleAlert"] = state?.simpleAlert;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["skyatp"] = state?.skyatp;
            resourceInputs["sleThresholds"] = state?.sleThresholds;
            resourceInputs["srxApp"] = state?.srxApp;
            resourceInputs["sshKeys"] = state?.sshKeys;
            resourceInputs["ssr"] = state?.ssr;
            resourceInputs["switchUpdownThreshold"] = state?.switchUpdownThreshold;
            resourceInputs["syntheticTest"] = state?.syntheticTest;
            resourceInputs["trackAnonymousDevices"] = state?.trackAnonymousDevices;
            resourceInputs["uplinkPortConfig"] = state?.uplinkPortConfig;
            resourceInputs["vars"] = state?.vars;
            resourceInputs["vna"] = state?.vna;
            resourceInputs["vpnPathUpdownThreshold"] = state?.vpnPathUpdownThreshold;
            resourceInputs["vpnPeerUpdownThreshold"] = state?.vpnPeerUpdownThreshold;
            resourceInputs["vsInstance"] = state?.vsInstance;
            resourceInputs["wanVna"] = state?.wanVna;
            resourceInputs["watchedStationUrl"] = state?.watchedStationUrl;
            resourceInputs["whitelistUrl"] = state?.whitelistUrl;
            resourceInputs["wids"] = state?.wids;
            resourceInputs["wifi"] = state?.wifi;
            resourceInputs["wiredVna"] = state?.wiredVna;
            resourceInputs["zoneOccupancyAlert"] = state?.zoneOccupancyAlert;
        } else {
            const args = argsOrState as SettingArgs | undefined;
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["analytic"] = args?.analytic;
            resourceInputs["apUpdownThreshold"] = args?.apUpdownThreshold;
            resourceInputs["autoUpgrade"] = args?.autoUpgrade;
            resourceInputs["autoUpgradeEsl"] = args?.autoUpgradeEsl;
            resourceInputs["bgpNeighborUpdownThreshold"] = args?.bgpNeighborUpdownThreshold;
            resourceInputs["bleConfig"] = args?.bleConfig;
            resourceInputs["configAutoRevert"] = args?.configAutoRevert;
            resourceInputs["configPushPolicy"] = args?.configPushPolicy;
            resourceInputs["criticalUrlMonitoring"] = args?.criticalUrlMonitoring;
            resourceInputs["defaultPortUsage"] = args?.defaultPortUsage;
            resourceInputs["deviceUpdownThreshold"] = args?.deviceUpdownThreshold;
            resourceInputs["enableUnii4"] = args?.enableUnii4;
            resourceInputs["engagement"] = args?.engagement;
            resourceInputs["gatewayMgmt"] = args?.gatewayMgmt;
            resourceInputs["gatewayUpdownThreshold"] = args?.gatewayUpdownThreshold;
            resourceInputs["juniperSrx"] = args?.juniperSrx;
            resourceInputs["led"] = args?.led;
            resourceInputs["marvis"] = args?.marvis;
            resourceInputs["occupancy"] = args?.occupancy;
            resourceInputs["persistConfigOnDevice"] = args?.persistConfigOnDevice;
            resourceInputs["proxy"] = args?.proxy;
            resourceInputs["removeExistingConfigs"] = args?.removeExistingConfigs;
            resourceInputs["reportGatt"] = args?.reportGatt;
            resourceInputs["rogue"] = args?.rogue;
            resourceInputs["rtsa"] = args?.rtsa;
            resourceInputs["simpleAlert"] = args?.simpleAlert;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["skyatp"] = args?.skyatp;
            resourceInputs["sleThresholds"] = args?.sleThresholds;
            resourceInputs["srxApp"] = args?.srxApp;
            resourceInputs["sshKeys"] = args?.sshKeys;
            resourceInputs["ssr"] = args?.ssr;
            resourceInputs["switchUpdownThreshold"] = args?.switchUpdownThreshold;
            resourceInputs["syntheticTest"] = args?.syntheticTest;
            resourceInputs["trackAnonymousDevices"] = args?.trackAnonymousDevices;
            resourceInputs["uplinkPortConfig"] = args?.uplinkPortConfig;
            resourceInputs["vars"] = args?.vars;
            resourceInputs["vna"] = args?.vna;
            resourceInputs["vpnPathUpdownThreshold"] = args?.vpnPathUpdownThreshold;
            resourceInputs["vpnPeerUpdownThreshold"] = args?.vpnPeerUpdownThreshold;
            resourceInputs["vsInstance"] = args?.vsInstance;
            resourceInputs["wanVna"] = args?.wanVna;
            resourceInputs["wids"] = args?.wids;
            resourceInputs["wifi"] = args?.wifi;
            resourceInputs["wiredVna"] = args?.wiredVna;
            resourceInputs["zoneOccupancyAlert"] = args?.zoneOccupancyAlert;
            resourceInputs["blacklistUrl"] = undefined /*out*/;
            resourceInputs["watchedStationUrl"] = undefined /*out*/;
            resourceInputs["whitelistUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Setting resources.
 */
export interface SettingState {
    analytic?: pulumi.Input<inputs.site.SettingAnalytic>;
    /**
     * Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `deviceUpdownThreshold` is ignored.
     */
    apUpdownThreshold?: pulumi.Input<number>;
    /**
     * Auto Upgrade Settings
     */
    autoUpgrade?: pulumi.Input<inputs.site.SettingAutoUpgrade>;
    /**
     * auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware upgrade
     */
    autoUpgradeEsl?: pulumi.Input<inputs.site.SettingAutoUpgradeEsl>;
    /**
     * enable threshold-based bgp neighbor down delivery.
     */
    bgpNeighborUpdownThreshold?: pulumi.Input<number>;
    blacklistUrl?: pulumi.Input<string>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.site.SettingBleConfig>;
    /**
     * Whether to enable ap auto config revert
     */
    configAutoRevert?: pulumi.Input<boolean>;
    /**
     * Mist also uses some heuristic rules to prevent destructive configs from being pushed
     */
    configPushPolicy?: pulumi.Input<inputs.site.SettingConfigPushPolicy>;
    /**
     * You can define some URLs that's critical to site operations the latency will be captured and considered for site health
     */
    criticalUrlMonitoring?: pulumi.Input<inputs.site.SettingCriticalUrlMonitoring>;
    /**
     * Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     */
    defaultPortUsage?: pulumi.Input<string>;
    /**
     * By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device type is desired, use the following
     */
    deviceUpdownThreshold?: pulumi.Input<number>;
    enableUnii4?: pulumi.Input<boolean>;
    /**
     * **Note**: if hours does not exist, it's treated as everyday of the week, 00:00-23:59. Currently, we don't allow multiple ranges for the same day
     */
    engagement?: pulumi.Input<inputs.site.SettingEngagement>;
    /**
     * Gateway Site settings
     */
    gatewayMgmt?: pulumi.Input<inputs.site.SettingGatewayMgmt>;
    /**
     * Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `deviceUpdownThreshold` is ignored.
     */
    gatewayUpdownThreshold?: pulumi.Input<number>;
    juniperSrx?: pulumi.Input<inputs.site.SettingJuniperSrx>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.site.SettingLed>;
    marvis?: pulumi.Input<inputs.site.SettingMarvis>;
    /**
     * Occupancy Analytics settings
     */
    occupancy?: pulumi.Input<inputs.site.SettingOccupancy>;
    /**
     * Whether to store the config on AP
     */
    persistConfigOnDevice?: pulumi.Input<boolean>;
    /**
     * Proxy Configuration to talk to Mist
     */
    proxy?: pulumi.Input<inputs.site.SettingProxy>;
    /**
     * By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
     */
    removeExistingConfigs?: pulumi.Input<boolean>;
    /**
     * Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
     */
    reportGatt?: pulumi.Input<boolean>;
    /**
     * Rogue site settings
     */
    rogue?: pulumi.Input<inputs.site.SettingRogue>;
    /**
     * Managed mobility
     */
    rtsa?: pulumi.Input<inputs.site.SettingRtsa>;
    /**
     * Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute window, there are more than Y distinct client encountering over X failures
     */
    simpleAlert?: pulumi.Input<inputs.site.SettingSimpleAlert>;
    siteId?: pulumi.Input<string>;
    skyatp?: pulumi.Input<inputs.site.SettingSkyatp>;
    sleThresholds?: pulumi.Input<inputs.site.SettingSleThresholds>;
    srxApp?: pulumi.Input<inputs.site.SettingSrxApp>;
    /**
     * When limitSshAccess = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    ssr?: pulumi.Input<inputs.site.SettingSsr>;
    /**
     * Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `deviceUpdownThreshold` is ignored.
     */
    switchUpdownThreshold?: pulumi.Input<number>;
    syntheticTest?: pulumi.Input<inputs.site.SettingSyntheticTest>;
    /**
     * Whether to track anonymous BLE assets (requires ‘track_asset’  enabled)
     */
    trackAnonymousDevices?: pulumi.Input<boolean>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.site.SettingUplinkPortConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vna?: pulumi.Input<inputs.site.SettingVna>;
    /**
     * enable threshold-based vpn path down delivery.
     */
    vpnPathUpdownThreshold?: pulumi.Input<number>;
    /**
     * enable threshold-based vpn peer down delivery.
     */
    vpnPeerUpdownThreshold?: pulumi.Input<number>;
    /**
     * Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     */
    vsInstance?: pulumi.Input<{[key: string]: pulumi.Input<inputs.site.SettingVsInstance>}>;
    wanVna?: pulumi.Input<inputs.site.SettingWanVna>;
    watchedStationUrl?: pulumi.Input<string>;
    whitelistUrl?: pulumi.Input<string>;
    /**
     * WIDS site settings
     */
    wids?: pulumi.Input<inputs.site.SettingWids>;
    /**
     * Wi-Fi site settings
     */
    wifi?: pulumi.Input<inputs.site.SettingWifi>;
    wiredVna?: pulumi.Input<inputs.site.SettingWiredVna>;
    /**
     * Zone Occupancy alert site settings
     */
    zoneOccupancyAlert?: pulumi.Input<inputs.site.SettingZoneOccupancyAlert>;
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    analytic?: pulumi.Input<inputs.site.SettingAnalytic>;
    /**
     * Enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and `deviceUpdownThreshold` is ignored.
     */
    apUpdownThreshold?: pulumi.Input<number>;
    /**
     * Auto Upgrade Settings
     */
    autoUpgrade?: pulumi.Input<inputs.site.SettingAutoUpgrade>;
    /**
     * auto upgrade AP ESL. When both firmware and ESL auto-upgrade are enabled, ESL upgrade will be done only after firmware upgrade
     */
    autoUpgradeEsl?: pulumi.Input<inputs.site.SettingAutoUpgradeEsl>;
    /**
     * enable threshold-based bgp neighbor down delivery.
     */
    bgpNeighborUpdownThreshold?: pulumi.Input<number>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.site.SettingBleConfig>;
    /**
     * Whether to enable ap auto config revert
     */
    configAutoRevert?: pulumi.Input<boolean>;
    /**
     * Mist also uses some heuristic rules to prevent destructive configs from being pushed
     */
    configPushPolicy?: pulumi.Input<inputs.site.SettingConfigPushPolicy>;
    /**
     * You can define some URLs that's critical to site operations the latency will be captured and considered for site health
     */
    criticalUrlMonitoring?: pulumi.Input<inputs.site.SettingCriticalUrlMonitoring>;
    /**
     * Port usage to assign to switch ports without any port usage assigned. Default: `default` to preserve default behavior
     */
    defaultPortUsage?: pulumi.Input<string>;
    /**
     * By default, device_updown_threshold, if set, will apply to all devices types if different values for specific device type is desired, use the following
     */
    deviceUpdownThreshold?: pulumi.Input<number>;
    enableUnii4?: pulumi.Input<boolean>;
    /**
     * **Note**: if hours does not exist, it's treated as everyday of the week, 00:00-23:59. Currently, we don't allow multiple ranges for the same day
     */
    engagement?: pulumi.Input<inputs.site.SettingEngagement>;
    /**
     * Gateway Site settings
     */
    gatewayMgmt?: pulumi.Input<inputs.site.SettingGatewayMgmt>;
    /**
     * Enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and `deviceUpdownThreshold` is ignored.
     */
    gatewayUpdownThreshold?: pulumi.Input<number>;
    juniperSrx?: pulumi.Input<inputs.site.SettingJuniperSrx>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.site.SettingLed>;
    marvis?: pulumi.Input<inputs.site.SettingMarvis>;
    /**
     * Occupancy Analytics settings
     */
    occupancy?: pulumi.Input<inputs.site.SettingOccupancy>;
    /**
     * Whether to store the config on AP
     */
    persistConfigOnDevice?: pulumi.Input<boolean>;
    /**
     * Proxy Configuration to talk to Mist
     */
    proxy?: pulumi.Input<inputs.site.SettingProxy>;
    /**
     * By default, only the configuration generated by Mist is cleaned up during the configuration process. If `true`, all the existing configuration will be removed.
     */
    removeExistingConfigs?: pulumi.Input<boolean>;
    /**
     * Whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name, serial number, battery %, temperature, humidity)
     */
    reportGatt?: pulumi.Input<boolean>;
    /**
     * Rogue site settings
     */
    rogue?: pulumi.Input<inputs.site.SettingRogue>;
    /**
     * Managed mobility
     */
    rtsa?: pulumi.Input<inputs.site.SettingRtsa>;
    /**
     * Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute window, there are more than Y distinct client encountering over X failures
     */
    simpleAlert?: pulumi.Input<inputs.site.SettingSimpleAlert>;
    siteId: pulumi.Input<string>;
    skyatp?: pulumi.Input<inputs.site.SettingSkyatp>;
    sleThresholds?: pulumi.Input<inputs.site.SettingSleThresholds>;
    srxApp?: pulumi.Input<inputs.site.SettingSrxApp>;
    /**
     * When limitSshAccess = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see Org:Setting)
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    ssr?: pulumi.Input<inputs.site.SettingSsr>;
    /**
     * Enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and `deviceUpdownThreshold` is ignored.
     */
    switchUpdownThreshold?: pulumi.Input<number>;
    syntheticTest?: pulumi.Input<inputs.site.SettingSyntheticTest>;
    /**
     * Whether to track anonymous BLE assets (requires ‘track_asset’  enabled)
     */
    trackAnonymousDevices?: pulumi.Input<boolean>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.site.SettingUplinkPortConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vna?: pulumi.Input<inputs.site.SettingVna>;
    /**
     * enable threshold-based vpn path down delivery.
     */
    vpnPathUpdownThreshold?: pulumi.Input<number>;
    /**
     * enable threshold-based vpn peer down delivery.
     */
    vpnPeerUpdownThreshold?: pulumi.Input<number>;
    /**
     * Optional, for EX9200 only to segregate virtual-switches. Property key is the instance name
     */
    vsInstance?: pulumi.Input<{[key: string]: pulumi.Input<inputs.site.SettingVsInstance>}>;
    wanVna?: pulumi.Input<inputs.site.SettingWanVna>;
    /**
     * WIDS site settings
     */
    wids?: pulumi.Input<inputs.site.SettingWids>;
    /**
     * Wi-Fi site settings
     */
    wifi?: pulumi.Input<inputs.site.SettingWifi>;
    wiredVna?: pulumi.Input<inputs.site.SettingWiredVna>;
    /**
     * Zone Occupancy alert site settings
     */
    zoneOccupancyAlert?: pulumi.Input<inputs.site.SettingZoneOccupancyAlert>;
}
