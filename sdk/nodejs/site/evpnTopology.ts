// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Site Evpn Topology.
 *
 * EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.
 *
 * > To create or manage your EVPN Topology with the Mist Provider, please refer to the `How To - EVPN Topology` Guide.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mist from "@pulumi/mist";
 *
 * const evpnOne = new mist.index.SiteSiteEvpnTopology("evpn_one", {
 *     siteId: terraformTest.id,
 *     name: "evpn_one",
 *     evpnOptions: {
 *         routedAt: "core",
 *         overlay: {
 *             as: 65000,
 *         },
 *         coreAsBorder: true,
 *         autoLoopbackSubnet: "172.16.192.0/24",
 *         autoLoopbackSubnet6: "fd33:ab00:2::/64",
 *         perVlanVgaV4Mac: false,
 *         underlay: {
 *             asBase: 65001,
 *             useIpv6: false,
 *             subnet: "10.255.240.0/20",
 *         },
 *         autoRouterIdSubnet: "172.16.254.0/23",
 *     },
 *     switches: [
 *         {
 *             mac: "020004000001",
 *             role: "core",
 *         },
 *         {
 *             mac: "02000400002",
 *             role: "core",
 *         },
 *         {
 *             mac: "02000400003",
 *             role: "distribution",
 *         },
 *         {
 *             mac: "02000400004",
 *             role: "distribution",
 *         },
 *         {
 *             mac: "02000400005",
 *             role: "access",
 *         },
 *         {
 *             mac: "02000400006",
 *             role: "access",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_site_evpn_topology` with:
 *
 * EVPN Topology can be imported by specifying the site_id and the evpn_topology_id
 *
 * ```sh
 * $ pulumi import junipermist:site/evpnTopology:EvpnTopology evpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class EvpnTopology extends pulumi.CustomResource {
    /**
     * Get an existing EvpnTopology resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvpnTopologyState, opts?: pulumi.CustomResourceOptions): EvpnTopology {
        return new EvpnTopology(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:site/evpnTopology:EvpnTopology';

    /**
     * Returns true if the given object is an instance of EvpnTopology.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EvpnTopology {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EvpnTopology.__pulumiType;
    }

    /**
     * EVPN Options
     */
    public readonly evpnOptions!: pulumi.Output<outputs.site.EvpnTopologyEvpnOptions | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Property key is the pod number
     */
    public readonly podNames!: pulumi.Output<{[key: string]: string}>;
    public readonly siteId!: pulumi.Output<string>;
    /**
     * Property key can be the switch MAC Address
     */
    public readonly switches!: pulumi.Output<{[key: string]: outputs.site.EvpnTopologySwitches}>;

    /**
     * Create a EvpnTopology resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EvpnTopologyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvpnTopologyArgs | EvpnTopologyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvpnTopologyState | undefined;
            resourceInputs["evpnOptions"] = state ? state.evpnOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["podNames"] = state ? state.podNames : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["switches"] = state ? state.switches : undefined;
        } else {
            const args = argsOrState as EvpnTopologyArgs | undefined;
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.switches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switches'");
            }
            resourceInputs["evpnOptions"] = args ? args.evpnOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podNames"] = args ? args.podNames : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["switches"] = args ? args.switches : undefined;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EvpnTopology.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EvpnTopology resources.
 */
export interface EvpnTopologyState {
    /**
     * EVPN Options
     */
    evpnOptions?: pulumi.Input<inputs.site.EvpnTopologyEvpnOptions>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * Property key is the pod number
     */
    podNames?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    siteId?: pulumi.Input<string>;
    /**
     * Property key can be the switch MAC Address
     */
    switches?: pulumi.Input<{[key: string]: pulumi.Input<inputs.site.EvpnTopologySwitches>}>;
}

/**
 * The set of arguments for constructing a EvpnTopology resource.
 */
export interface EvpnTopologyArgs {
    /**
     * EVPN Options
     */
    evpnOptions?: pulumi.Input<inputs.site.EvpnTopologyEvpnOptions>;
    name?: pulumi.Input<string>;
    /**
     * Property key is the pod number
     */
    podNames?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    siteId: pulumi.Input<string>;
    /**
     * Property key can be the switch MAC Address
     */
    switches: pulumi.Input<{[key: string]: pulumi.Input<inputs.site.EvpnTopologySwitches>}>;
}
