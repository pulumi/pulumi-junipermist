// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource is used customize the WLAN Guest Portal.
 * The WLAN Portal Template can be used to define:
 * * Guest Authentication methods and parameters (access duration, ...)
 * * Default values of the text fields and labels on the portal
 * * Values of the text fields and labels based on the User Agent (`locales` property)
 *
 * **Notes:**
 * * There is no feedback from the API, so there is no possibility to validate the changes. The resource states is directly generated based on the resource plan.* There is no option to delete or revert the changes. Deleting the resource will just remove it from the states. Once removed, it is possible to create a new one. It will replace the previous template
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const wlanOne = new junipermist.site.WlanPortalTemplate("wlan_one", {
 *     siteId: terraformTest.id,
 *     wlanId: wlanOneMistSiteWlan.id,
 *     portalTemplate: {
 *         sms_message_format: "Code {{code}} expires in {{duration}} minutes.",
 *         sms_validity_duration: "10",
 *         page_title: "Welcome To My Demo Portal",
 *         locales: {
 *             "fr-FR": {
 *                 pageTitle: "Bienvenue sur mon portail de d√©mo",
 *             },
 *         },
 *     },
 * });
 * ```
 */
export class WlanPortalTemplate extends pulumi.CustomResource {
    /**
     * Get an existing WlanPortalTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WlanPortalTemplateState, opts?: pulumi.CustomResourceOptions): WlanPortalTemplate {
        return new WlanPortalTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:site/wlanPortalTemplate:WlanPortalTemplate';

    /**
     * Returns true if the given object is an instance of WlanPortalTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WlanPortalTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WlanPortalTemplate.__pulumiType;
    }

    /**
     * Portal template wlan settings
     */
    declare public readonly portalTemplate: pulumi.Output<outputs.site.WlanPortalTemplatePortalTemplate>;
    declare public readonly siteId: pulumi.Output<string>;
    /**
     * Site WLAN ID
     */
    declare public readonly wlanId: pulumi.Output<string>;

    /**
     * Create a WlanPortalTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WlanPortalTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WlanPortalTemplateArgs | WlanPortalTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WlanPortalTemplateState | undefined;
            resourceInputs["portalTemplate"] = state?.portalTemplate;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["wlanId"] = state?.wlanId;
        } else {
            const args = argsOrState as WlanPortalTemplateArgs | undefined;
            if (args?.portalTemplate === undefined && !opts.urn) {
                throw new Error("Missing required property 'portalTemplate'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if (args?.wlanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'wlanId'");
            }
            resourceInputs["portalTemplate"] = args?.portalTemplate;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["wlanId"] = args?.wlanId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WlanPortalTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WlanPortalTemplate resources.
 */
export interface WlanPortalTemplateState {
    /**
     * Portal template wlan settings
     */
    portalTemplate?: pulumi.Input<inputs.site.WlanPortalTemplatePortalTemplate>;
    siteId?: pulumi.Input<string>;
    /**
     * Site WLAN ID
     */
    wlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WlanPortalTemplate resource.
 */
export interface WlanPortalTemplateArgs {
    /**
     * Portal template wlan settings
     */
    portalTemplate: pulumi.Input<inputs.site.WlanPortalTemplatePortalTemplate>;
    siteId: pulumi.Input<string>;
    /**
     * Site WLAN ID
     */
    wlanId: pulumi.Input<string>;
}
