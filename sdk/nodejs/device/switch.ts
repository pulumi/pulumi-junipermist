// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Switch configuration.
 *
 * It can be used to define specific configuration at the device level or to override Org/Site Network template settings.
 *
 * > **WARNING** For **adopted** devices, make sure to set `managed`=`true` to allow Mist to manage the switch
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_device_switch` with:
 *
 * Switch Configuration can be imported by specifying the site_id and the device_id
 *
 * ```sh
 * $ pulumi import junipermist:device/switch:Switch switch_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Switch extends pulumi.CustomResource {
    /**
     * Get an existing Switch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchState, opts?: pulumi.CustomResourceOptions): Switch {
        return new Switch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:device/switch:Switch';

    /**
     * Returns true if the given object is an instance of Switch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Switch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Switch.__pulumiType;
    }

    declare public readonly aclPolicies: pulumi.Output<outputs.device.SwitchAclPolicy[] | undefined>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    declare public readonly aclTags: pulumi.Output<{[key: string]: outputs.device.SwitchAclTags} | undefined>;
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    declare public readonly additionalConfigCmds: pulumi.Output<string[] | undefined>;
    declare public readonly deviceId: pulumi.Output<string>;
    declare public readonly dhcpSnooping: pulumi.Output<outputs.device.SwitchDhcpSnooping | undefined>;
    declare public readonly dhcpdConfig: pulumi.Output<outputs.device.SwitchDhcpdConfig | undefined>;
    /**
     * This disables the default behavior of a cloud-ready switch/gateway being managed/configured by Mist. Setting this to `true` means you want to disable the default behavior and do not want the device to be Mist-managed.
     */
    declare public readonly disableAutoConfig: pulumi.Output<boolean>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    declare public readonly dnsServers: pulumi.Output<string[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    declare public readonly dnsSuffixes: pulumi.Output<string[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    declare public readonly extraRoutes: pulumi.Output<{[key: string]: outputs.device.SwitchExtraRoutes} | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    declare public readonly extraRoutes6: pulumi.Output<{[key: string]: outputs.device.SwitchExtraRoutes6} | undefined>;
    declare public /*out*/ readonly image1Url: pulumi.Output<string>;
    declare public /*out*/ readonly image2Url: pulumi.Output<string>;
    declare public /*out*/ readonly image3Url: pulumi.Output<string>;
    /**
     * Junos IP Config
     */
    declare public readonly ipConfig: pulumi.Output<outputs.device.SwitchIpConfig | undefined>;
    /**
     * Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    declare public readonly localPortConfig: pulumi.Output<{[key: string]: outputs.device.SwitchLocalPortConfig} | undefined>;
    /**
     * Device MAC address
     */
    declare public /*out*/ readonly mac: pulumi.Output<string>;
    /**
     * An adopted switch/gateway will not be managed/configured by Mist by default. Setting this parameter to `true` enables the adopted switch/gateway to be managed/configured by Mist.
     */
    declare public readonly managed: pulumi.Output<boolean>;
    /**
     * Map where the device belongs to
     */
    declare public readonly mapId: pulumi.Output<string | undefined>;
    /**
     * Enable mistNac to use RadSec
     */
    declare public readonly mistNac: pulumi.Output<outputs.device.SwitchMistNac | undefined>;
    /**
     * Device Model
     */
    declare public /*out*/ readonly model: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Property key is network name
     */
    declare public readonly networks: pulumi.Output<{[key: string]: outputs.device.SwitchNetworks} | undefined>;
    declare public readonly notes: pulumi.Output<string | undefined>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    declare public readonly ntpServers: pulumi.Output<string[]>;
    /**
     * Switch OOB IP Config:
     *   - If HA configuration: key parameter will be nodeX (eg: node1)
     *   - If there are 2 routing engines, re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
     */
    declare public readonly oobIpConfig: pulumi.Output<outputs.device.SwitchOobIpConfig | undefined>;
    declare public /*out*/ readonly orgId: pulumi.Output<string>;
    /**
     * Junos OSPF areas. Property key is the OSPF Area (Area should be a number (0-255) / IP address)
     */
    declare public readonly ospfAreas: pulumi.Output<{[key: string]: outputs.device.SwitchOspfAreas} | undefined>;
    declare public readonly ospfConfig: pulumi.Output<outputs.device.SwitchOspfConfig | undefined>;
    /**
     * Property key is the network name. Defines the additional IP Addresses configured on the device.
     */
    declare public readonly otherIpConfigs: pulumi.Output<{[key: string]: outputs.device.SwitchOtherIpConfigs} | undefined>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    declare public readonly portConfig: pulumi.Output<{[key: string]: outputs.device.SwitchPortConfig} | undefined>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10"). This can be used to override some attributes of the portUsage without having to create a new port_usage.
     */
    declare public readonly portConfigOverwrite: pulumi.Output<{[key: string]: outputs.device.SwitchPortConfigOverwrite} | undefined>;
    /**
     * Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 mirroring ports is allowed
     */
    declare public readonly portMirroring: pulumi.Output<{[key: string]: outputs.device.SwitchPortMirroring} | undefined>;
    /**
     * Property key is the port usage name. Defines the profiles of port configuration configured on the switch
     */
    declare public readonly portUsages: pulumi.Output<{[key: string]: outputs.device.SwitchPortUsages} | undefined>;
    /**
     * Junos Radius config
     */
    declare public readonly radiusConfig: pulumi.Output<outputs.device.SwitchRadiusConfig | undefined>;
    declare public readonly remoteSyslog: pulumi.Output<outputs.device.SwitchRemoteSyslog | undefined>;
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * Used for OSPF / BGP / EVPN
     */
    declare public readonly routerId: pulumi.Output<string>;
    /**
     * Device Serial
     */
    declare public /*out*/ readonly serial: pulumi.Output<string>;
    declare public readonly siteId: pulumi.Output<string>;
    declare public readonly snmpConfig: pulumi.Output<outputs.device.SwitchSnmpConfig | undefined>;
    declare public readonly stpConfig: pulumi.Output<outputs.device.SwitchStpConfig | undefined>;
    /**
     * Switch settings
     */
    declare public readonly switchMgmt: pulumi.Output<outputs.device.SwitchSwitchMgmt | undefined>;
    /**
     * Device Type. enum: `switch`
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Whether to use it for snmp / syslog / tacplus / radius
     */
    declare public readonly useRouterIdAsSourceIp: pulumi.Output<boolean>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    declare public readonly vars: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Required for preprovisioned Virtual Chassis
     */
    declare public readonly virtualChassis: pulumi.Output<outputs.device.SwitchVirtualChassis | undefined>;
    declare public readonly vrfConfig: pulumi.Output<outputs.device.SwitchVrfConfig | undefined>;
    /**
     * Property key is the network name
     */
    declare public readonly vrfInstances: pulumi.Output<{[key: string]: outputs.device.SwitchVrfInstances} | undefined>;
    /**
     * Junos VRRP config
     */
    declare public readonly vrrpConfig: pulumi.Output<outputs.device.SwitchVrrpConfig | undefined>;
    /**
     * X in pixel
     */
    declare public readonly x: pulumi.Output<number | undefined>;
    /**
     * Y in pixel
     */
    declare public readonly y: pulumi.Output<number | undefined>;

    /**
     * Create a Switch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchArgs | SwitchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchState | undefined;
            resourceInputs["aclPolicies"] = state?.aclPolicies;
            resourceInputs["aclTags"] = state?.aclTags;
            resourceInputs["additionalConfigCmds"] = state?.additionalConfigCmds;
            resourceInputs["deviceId"] = state?.deviceId;
            resourceInputs["dhcpSnooping"] = state?.dhcpSnooping;
            resourceInputs["dhcpdConfig"] = state?.dhcpdConfig;
            resourceInputs["disableAutoConfig"] = state?.disableAutoConfig;
            resourceInputs["dnsServers"] = state?.dnsServers;
            resourceInputs["dnsSuffixes"] = state?.dnsSuffixes;
            resourceInputs["extraRoutes"] = state?.extraRoutes;
            resourceInputs["extraRoutes6"] = state?.extraRoutes6;
            resourceInputs["image1Url"] = state?.image1Url;
            resourceInputs["image2Url"] = state?.image2Url;
            resourceInputs["image3Url"] = state?.image3Url;
            resourceInputs["ipConfig"] = state?.ipConfig;
            resourceInputs["localPortConfig"] = state?.localPortConfig;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["managed"] = state?.managed;
            resourceInputs["mapId"] = state?.mapId;
            resourceInputs["mistNac"] = state?.mistNac;
            resourceInputs["model"] = state?.model;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["ntpServers"] = state?.ntpServers;
            resourceInputs["oobIpConfig"] = state?.oobIpConfig;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["ospfAreas"] = state?.ospfAreas;
            resourceInputs["ospfConfig"] = state?.ospfConfig;
            resourceInputs["otherIpConfigs"] = state?.otherIpConfigs;
            resourceInputs["portConfig"] = state?.portConfig;
            resourceInputs["portConfigOverwrite"] = state?.portConfigOverwrite;
            resourceInputs["portMirroring"] = state?.portMirroring;
            resourceInputs["portUsages"] = state?.portUsages;
            resourceInputs["radiusConfig"] = state?.radiusConfig;
            resourceInputs["remoteSyslog"] = state?.remoteSyslog;
            resourceInputs["role"] = state?.role;
            resourceInputs["routerId"] = state?.routerId;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["snmpConfig"] = state?.snmpConfig;
            resourceInputs["stpConfig"] = state?.stpConfig;
            resourceInputs["switchMgmt"] = state?.switchMgmt;
            resourceInputs["type"] = state?.type;
            resourceInputs["useRouterIdAsSourceIp"] = state?.useRouterIdAsSourceIp;
            resourceInputs["vars"] = state?.vars;
            resourceInputs["virtualChassis"] = state?.virtualChassis;
            resourceInputs["vrfConfig"] = state?.vrfConfig;
            resourceInputs["vrfInstances"] = state?.vrfInstances;
            resourceInputs["vrrpConfig"] = state?.vrrpConfig;
            resourceInputs["x"] = state?.x;
            resourceInputs["y"] = state?.y;
        } else {
            const args = argsOrState as SwitchArgs | undefined;
            if (args?.deviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["aclPolicies"] = args?.aclPolicies;
            resourceInputs["aclTags"] = args?.aclTags;
            resourceInputs["additionalConfigCmds"] = args?.additionalConfigCmds;
            resourceInputs["deviceId"] = args?.deviceId;
            resourceInputs["dhcpSnooping"] = args?.dhcpSnooping;
            resourceInputs["dhcpdConfig"] = args?.dhcpdConfig;
            resourceInputs["disableAutoConfig"] = args?.disableAutoConfig;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["dnsSuffixes"] = args?.dnsSuffixes;
            resourceInputs["extraRoutes"] = args?.extraRoutes;
            resourceInputs["extraRoutes6"] = args?.extraRoutes6;
            resourceInputs["ipConfig"] = args?.ipConfig;
            resourceInputs["localPortConfig"] = args?.localPortConfig;
            resourceInputs["managed"] = args?.managed;
            resourceInputs["mapId"] = args?.mapId;
            resourceInputs["mistNac"] = args?.mistNac;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["ntpServers"] = args?.ntpServers;
            resourceInputs["oobIpConfig"] = args?.oobIpConfig;
            resourceInputs["ospfAreas"] = args?.ospfAreas;
            resourceInputs["ospfConfig"] = args?.ospfConfig;
            resourceInputs["otherIpConfigs"] = args?.otherIpConfigs;
            resourceInputs["portConfig"] = args?.portConfig;
            resourceInputs["portConfigOverwrite"] = args?.portConfigOverwrite;
            resourceInputs["portMirroring"] = args?.portMirroring;
            resourceInputs["portUsages"] = args?.portUsages;
            resourceInputs["radiusConfig"] = args?.radiusConfig;
            resourceInputs["remoteSyslog"] = args?.remoteSyslog;
            resourceInputs["role"] = args?.role;
            resourceInputs["routerId"] = args?.routerId;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["snmpConfig"] = args?.snmpConfig;
            resourceInputs["stpConfig"] = args?.stpConfig;
            resourceInputs["switchMgmt"] = args?.switchMgmt;
            resourceInputs["useRouterIdAsSourceIp"] = args?.useRouterIdAsSourceIp;
            resourceInputs["vars"] = args?.vars;
            resourceInputs["virtualChassis"] = args?.virtualChassis;
            resourceInputs["vrfConfig"] = args?.vrfConfig;
            resourceInputs["vrfInstances"] = args?.vrfInstances;
            resourceInputs["vrrpConfig"] = args?.vrrpConfig;
            resourceInputs["x"] = args?.x;
            resourceInputs["y"] = args?.y;
            resourceInputs["image1Url"] = undefined /*out*/;
            resourceInputs["image2Url"] = undefined /*out*/;
            resourceInputs["image3Url"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["model"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Switch.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Switch resources.
 */
export interface SwitchState {
    aclPolicies?: pulumi.Input<pulumi.Input<inputs.device.SwitchAclPolicy>[]>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    aclTags?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchAclTags>}>;
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    deviceId?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<inputs.device.SwitchDhcpSnooping>;
    dhcpdConfig?: pulumi.Input<inputs.device.SwitchDhcpdConfig>;
    /**
     * This disables the default behavior of a cloud-ready switch/gateway being managed/configured by Mist. Setting this to `true` means you want to disable the default behavior and do not want the device to be Mist-managed.
     */
    disableAutoConfig?: pulumi.Input<boolean>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchExtraRoutes6>}>;
    image1Url?: pulumi.Input<string>;
    image2Url?: pulumi.Input<string>;
    image3Url?: pulumi.Input<string>;
    /**
     * Junos IP Config
     */
    ipConfig?: pulumi.Input<inputs.device.SwitchIpConfig>;
    /**
     * Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    localPortConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchLocalPortConfig>}>;
    /**
     * Device MAC address
     */
    mac?: pulumi.Input<string>;
    /**
     * An adopted switch/gateway will not be managed/configured by Mist by default. Setting this parameter to `true` enables the adopted switch/gateway to be managed/configured by Mist.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    /**
     * Enable mistNac to use RadSec
     */
    mistNac?: pulumi.Input<inputs.device.SwitchMistNac>;
    /**
     * Device Model
     */
    model?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Property key is network name
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchNetworks>}>;
    notes?: pulumi.Input<string>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Switch OOB IP Config:
     *   - If HA configuration: key parameter will be nodeX (eg: node1)
     *   - If there are 2 routing engines, re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
     */
    oobIpConfig?: pulumi.Input<inputs.device.SwitchOobIpConfig>;
    orgId?: pulumi.Input<string>;
    /**
     * Junos OSPF areas. Property key is the OSPF Area (Area should be a number (0-255) / IP address)
     */
    ospfAreas?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchOspfAreas>}>;
    ospfConfig?: pulumi.Input<inputs.device.SwitchOspfConfig>;
    /**
     * Property key is the network name. Defines the additional IP Addresses configured on the device.
     */
    otherIpConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchOtherIpConfigs>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortConfig>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10"). This can be used to override some attributes of the portUsage without having to create a new port_usage.
     */
    portConfigOverwrite?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortConfigOverwrite>}>;
    /**
     * Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 mirroring ports is allowed
     */
    portMirroring?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortMirroring>}>;
    /**
     * Property key is the port usage name. Defines the profiles of port configuration configured on the switch
     */
    portUsages?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortUsages>}>;
    /**
     * Junos Radius config
     */
    radiusConfig?: pulumi.Input<inputs.device.SwitchRadiusConfig>;
    remoteSyslog?: pulumi.Input<inputs.device.SwitchRemoteSyslog>;
    role?: pulumi.Input<string>;
    /**
     * Used for OSPF / BGP / EVPN
     */
    routerId?: pulumi.Input<string>;
    /**
     * Device Serial
     */
    serial?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    snmpConfig?: pulumi.Input<inputs.device.SwitchSnmpConfig>;
    stpConfig?: pulumi.Input<inputs.device.SwitchStpConfig>;
    /**
     * Switch settings
     */
    switchMgmt?: pulumi.Input<inputs.device.SwitchSwitchMgmt>;
    /**
     * Device Type. enum: `switch`
     */
    type?: pulumi.Input<string>;
    /**
     * Whether to use it for snmp / syslog / tacplus / radius
     */
    useRouterIdAsSourceIp?: pulumi.Input<boolean>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required for preprovisioned Virtual Chassis
     */
    virtualChassis?: pulumi.Input<inputs.device.SwitchVirtualChassis>;
    vrfConfig?: pulumi.Input<inputs.device.SwitchVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchVrfInstances>}>;
    /**
     * Junos VRRP config
     */
    vrrpConfig?: pulumi.Input<inputs.device.SwitchVrrpConfig>;
    /**
     * X in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * Y in pixel
     */
    y?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Switch resource.
 */
export interface SwitchArgs {
    aclPolicies?: pulumi.Input<pulumi.Input<inputs.device.SwitchAclPolicy>[]>;
    /**
     * ACL Tags to identify traffic source or destination. Key name is the tag name
     */
    aclTags?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchAclTags>}>;
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    deviceId: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<inputs.device.SwitchDhcpSnooping>;
    dhcpdConfig?: pulumi.Input<inputs.device.SwitchDhcpdConfig>;
    /**
     * This disables the default behavior of a cloud-ready switch/gateway being managed/configured by Mist. Setting this to `true` means you want to disable the default behavior and do not want the device to be Mist-managed.
     */
    disableAutoConfig?: pulumi.Input<boolean>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchExtraRoutes6>}>;
    /**
     * Junos IP Config
     */
    ipConfig?: pulumi.Input<inputs.device.SwitchIpConfig>;
    /**
     * Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    localPortConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchLocalPortConfig>}>;
    /**
     * An adopted switch/gateway will not be managed/configured by Mist by default. Setting this parameter to `true` enables the adopted switch/gateway to be managed/configured by Mist.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * Map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    /**
     * Enable mistNac to use RadSec
     */
    mistNac?: pulumi.Input<inputs.device.SwitchMistNac>;
    name?: pulumi.Input<string>;
    /**
     * Property key is network name
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchNetworks>}>;
    notes?: pulumi.Input<string>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Switch OOB IP Config:
     *   - If HA configuration: key parameter will be nodeX (eg: node1)
     *   - If there are 2 routing engines, re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
     */
    oobIpConfig?: pulumi.Input<inputs.device.SwitchOobIpConfig>;
    /**
     * Junos OSPF areas. Property key is the OSPF Area (Area should be a number (0-255) / IP address)
     */
    ospfAreas?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchOspfAreas>}>;
    ospfConfig?: pulumi.Input<inputs.device.SwitchOspfConfig>;
    /**
     * Property key is the network name. Defines the additional IP Addresses configured on the device.
     */
    otherIpConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchOtherIpConfigs>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortConfig>}>;
    /**
     * Property key is the port name or range (e.g. "ge-0/0/0-10"). This can be used to override some attributes of the portUsage without having to create a new port_usage.
     */
    portConfigOverwrite?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortConfigOverwrite>}>;
    /**
     * Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 mirroring ports is allowed
     */
    portMirroring?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortMirroring>}>;
    /**
     * Property key is the port usage name. Defines the profiles of port configuration configured on the switch
     */
    portUsages?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchPortUsages>}>;
    /**
     * Junos Radius config
     */
    radiusConfig?: pulumi.Input<inputs.device.SwitchRadiusConfig>;
    remoteSyslog?: pulumi.Input<inputs.device.SwitchRemoteSyslog>;
    role?: pulumi.Input<string>;
    /**
     * Used for OSPF / BGP / EVPN
     */
    routerId?: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    snmpConfig?: pulumi.Input<inputs.device.SwitchSnmpConfig>;
    stpConfig?: pulumi.Input<inputs.device.SwitchStpConfig>;
    /**
     * Switch settings
     */
    switchMgmt?: pulumi.Input<inputs.device.SwitchSwitchMgmt>;
    /**
     * Whether to use it for snmp / syslog / tacplus / radius
     */
    useRouterIdAsSourceIp?: pulumi.Input<boolean>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Required for preprovisioned Virtual Chassis
     */
    virtualChassis?: pulumi.Input<inputs.device.SwitchVirtualChassis>;
    vrfConfig?: pulumi.Input<inputs.device.SwitchVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.SwitchVrfInstances>}>;
    /**
     * Junos VRRP config
     */
    vrrpConfig?: pulumi.Input<inputs.device.SwitchVrrpConfig>;
    /**
     * X in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * Y in pixel
     */
    y?: pulumi.Input<number>;
}
