// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource is used to upload a Device picture.
 * This resource can be used to add a picture to a Wireless Access point, a Switch or a Gateway. A Maximum of 3 pictures can be uploaded.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const deviceImageOne = new junipermist.device.Image("device_image_one", {
 *     deviceId: inventory.devices[1].id,
 *     siteId: inventory.devices[1].siteId,
 *     file: "/Users/johndoe/Documents/image.jpg",
 *     imageNumber: 1,
 * });
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:device/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public readonly deviceId!: pulumi.Output<string>;
    /**
     * path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
     */
    public readonly file!: pulumi.Output<string>;
    public readonly imageNumber!: pulumi.Output<number>;
    public readonly siteId!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["imageNumber"] = state ? state.imageNumber : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.file === undefined) && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            if ((!args || args.imageNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageNumber'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["imageNumber"] = args ? args.imageNumber : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    deviceId?: pulumi.Input<string>;
    /**
     * path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
     */
    file?: pulumi.Input<string>;
    imageNumber?: pulumi.Input<number>;
    siteId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    deviceId: pulumi.Input<string>;
    /**
     * path to the device image file to upload. File must be a `jpeg`, `jpg` or `png` image`
     */
    file: pulumi.Input<string>;
    imageNumber: pulumi.Input<number>;
    siteId: pulumi.Input<string>;
}
