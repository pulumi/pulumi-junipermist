// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Wireless Access Point configuration.
 *
 * It can be used to define specific configuration at the device level or to override AP Device Profile (`junipermist.org.DeviceprofileAp`).
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_device_ap` with:
 *
 * AP Configuration can be imported by specifying the site_id and the device_id
 *
 * ```sh
 * $ pulumi import junipermist:device/ap:Ap ap_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Ap extends pulumi.CustomResource {
    /**
     * Get an existing Ap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApState, opts?: pulumi.CustomResourceOptions): Ap {
        return new Ap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:device/ap:Ap';

    /**
     * Returns true if the given object is an instance of Ap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ap.__pulumiType;
    }

    /**
     * Aeroscout AP settings
     */
    declare public readonly aeroscout: pulumi.Output<outputs.device.ApAeroscout | undefined>;
    declare public readonly airista: pulumi.Output<outputs.device.ApAirista | undefined>;
    /**
     * BLE AP settings
     */
    declare public readonly bleConfig: pulumi.Output<outputs.device.ApBleConfig | undefined>;
    declare public readonly centrak: pulumi.Output<outputs.device.ApCentrak | undefined>;
    declare public readonly clientBridge: pulumi.Output<outputs.device.ApClientBridge | undefined>;
    declare public readonly deviceId: pulumi.Output<string>;
    /**
     * Whether to disable eth1 port
     */
    declare public readonly disableEth1: pulumi.Output<boolean>;
    /**
     * Whether to disable eth2 port
     */
    declare public readonly disableEth2: pulumi.Output<boolean>;
    /**
     * Whether to disable eth3 port
     */
    declare public readonly disableEth3: pulumi.Output<boolean>;
    /**
     * Whether to disable module port
     */
    declare public readonly disableModule: pulumi.Output<boolean>;
    declare public readonly eslConfig: pulumi.Output<outputs.device.ApEslConfig | undefined>;
    /**
     * For some AP models, flowControl can be enabled to address some switch compatibility issue
     */
    declare public readonly flowControl: pulumi.Output<boolean>;
    /**
     * Height, in meters, optional
     */
    declare public readonly height: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly image1Url: pulumi.Output<string>;
    declare public /*out*/ readonly image2Url: pulumi.Output<string>;
    declare public /*out*/ readonly image3Url: pulumi.Output<string>;
    /**
     * IP AP settings
     */
    declare public readonly ipConfig: pulumi.Output<outputs.device.ApIpConfig | undefined>;
    declare public readonly lacpConfig: pulumi.Output<outputs.device.ApLacpConfig | undefined>;
    /**
     * LED AP settings
     */
    declare public readonly led: pulumi.Output<outputs.device.ApLed | undefined>;
    /**
     * Whether this map is considered locked down
     */
    declare public readonly locked: pulumi.Output<boolean | undefined>;
    /**
     * Device MAC address
     */
    declare public /*out*/ readonly mac: pulumi.Output<string>;
    /**
     * Map where the device belongs to
     */
    declare public readonly mapId: pulumi.Output<string | undefined>;
    /**
     * Mesh AP settings
     */
    declare public readonly mesh: pulumi.Output<outputs.device.ApMesh | undefined>;
    /**
     * Device Model
     */
    declare public /*out*/ readonly model: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Any notes about this AP
     */
    declare public readonly notes: pulumi.Output<string | undefined>;
    declare public readonly ntpServers: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly orgId: pulumi.Output<string>;
    /**
     * Orientation, 0-359, in degrees, up is 0, right is 90.
     */
    declare public readonly orientation: pulumi.Output<number | undefined>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    declare public readonly poePassthrough: pulumi.Output<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If spcified, this takes predecence over switchConfig (switch_config requires user to configure all vlans manually, which is error-prone. thus deprecated)
     */
    declare public readonly portConfig: pulumi.Output<{[key: string]: outputs.device.ApPortConfig} | undefined>;
    /**
     * Power related configs
     */
    declare public readonly pwrConfig: pulumi.Output<outputs.device.ApPwrConfig | undefined>;
    /**
     * Radio AP settings
     */
    declare public readonly radioConfig: pulumi.Output<outputs.device.ApRadioConfig | undefined>;
    /**
     * Device Serial
     */
    declare public /*out*/ readonly serial: pulumi.Output<string>;
    declare public readonly siteId: pulumi.Output<string>;
    /**
     * Device Type. enum: `ap`
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * AP Uplink port configuration
     */
    declare public readonly uplinkPortConfig: pulumi.Output<outputs.device.ApUplinkPortConfig | undefined>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    declare public readonly usbConfig: pulumi.Output<outputs.device.ApUsbConfig | undefined>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    declare public readonly vars: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * X in pixel
     */
    declare public readonly x: pulumi.Output<number | undefined>;
    /**
     * Y in pixel
     */
    declare public readonly y: pulumi.Output<number | undefined>;

    /**
     * Create a Ap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApArgs | ApState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApState | undefined;
            resourceInputs["aeroscout"] = state?.aeroscout;
            resourceInputs["airista"] = state?.airista;
            resourceInputs["bleConfig"] = state?.bleConfig;
            resourceInputs["centrak"] = state?.centrak;
            resourceInputs["clientBridge"] = state?.clientBridge;
            resourceInputs["deviceId"] = state?.deviceId;
            resourceInputs["disableEth1"] = state?.disableEth1;
            resourceInputs["disableEth2"] = state?.disableEth2;
            resourceInputs["disableEth3"] = state?.disableEth3;
            resourceInputs["disableModule"] = state?.disableModule;
            resourceInputs["eslConfig"] = state?.eslConfig;
            resourceInputs["flowControl"] = state?.flowControl;
            resourceInputs["height"] = state?.height;
            resourceInputs["image1Url"] = state?.image1Url;
            resourceInputs["image2Url"] = state?.image2Url;
            resourceInputs["image3Url"] = state?.image3Url;
            resourceInputs["ipConfig"] = state?.ipConfig;
            resourceInputs["lacpConfig"] = state?.lacpConfig;
            resourceInputs["led"] = state?.led;
            resourceInputs["locked"] = state?.locked;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["mapId"] = state?.mapId;
            resourceInputs["mesh"] = state?.mesh;
            resourceInputs["model"] = state?.model;
            resourceInputs["name"] = state?.name;
            resourceInputs["notes"] = state?.notes;
            resourceInputs["ntpServers"] = state?.ntpServers;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["orientation"] = state?.orientation;
            resourceInputs["poePassthrough"] = state?.poePassthrough;
            resourceInputs["portConfig"] = state?.portConfig;
            resourceInputs["pwrConfig"] = state?.pwrConfig;
            resourceInputs["radioConfig"] = state?.radioConfig;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["type"] = state?.type;
            resourceInputs["uplinkPortConfig"] = state?.uplinkPortConfig;
            resourceInputs["usbConfig"] = state?.usbConfig;
            resourceInputs["vars"] = state?.vars;
            resourceInputs["x"] = state?.x;
            resourceInputs["y"] = state?.y;
        } else {
            const args = argsOrState as ApArgs | undefined;
            if (args?.deviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["aeroscout"] = args?.aeroscout;
            resourceInputs["airista"] = args?.airista;
            resourceInputs["bleConfig"] = args?.bleConfig;
            resourceInputs["centrak"] = args?.centrak;
            resourceInputs["clientBridge"] = args?.clientBridge;
            resourceInputs["deviceId"] = args?.deviceId;
            resourceInputs["disableEth1"] = args?.disableEth1;
            resourceInputs["disableEth2"] = args?.disableEth2;
            resourceInputs["disableEth3"] = args?.disableEth3;
            resourceInputs["disableModule"] = args?.disableModule;
            resourceInputs["eslConfig"] = args?.eslConfig;
            resourceInputs["flowControl"] = args?.flowControl;
            resourceInputs["height"] = args?.height;
            resourceInputs["ipConfig"] = args?.ipConfig;
            resourceInputs["lacpConfig"] = args?.lacpConfig;
            resourceInputs["led"] = args?.led;
            resourceInputs["locked"] = args?.locked;
            resourceInputs["mapId"] = args?.mapId;
            resourceInputs["mesh"] = args?.mesh;
            resourceInputs["name"] = args?.name;
            resourceInputs["notes"] = args?.notes;
            resourceInputs["ntpServers"] = args?.ntpServers;
            resourceInputs["orientation"] = args?.orientation;
            resourceInputs["poePassthrough"] = args?.poePassthrough;
            resourceInputs["portConfig"] = args?.portConfig;
            resourceInputs["pwrConfig"] = args?.pwrConfig;
            resourceInputs["radioConfig"] = args?.radioConfig;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["uplinkPortConfig"] = args?.uplinkPortConfig;
            resourceInputs["usbConfig"] = args?.usbConfig;
            resourceInputs["vars"] = args?.vars;
            resourceInputs["x"] = args?.x;
            resourceInputs["y"] = args?.y;
            resourceInputs["image1Url"] = undefined /*out*/;
            resourceInputs["image2Url"] = undefined /*out*/;
            resourceInputs["image3Url"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["model"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ap resources.
 */
export interface ApState {
    /**
     * Aeroscout AP settings
     */
    aeroscout?: pulumi.Input<inputs.device.ApAeroscout>;
    airista?: pulumi.Input<inputs.device.ApAirista>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.device.ApBleConfig>;
    centrak?: pulumi.Input<inputs.device.ApCentrak>;
    clientBridge?: pulumi.Input<inputs.device.ApClientBridge>;
    deviceId?: pulumi.Input<string>;
    /**
     * Whether to disable eth1 port
     */
    disableEth1?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth2 port
     */
    disableEth2?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth3 port
     */
    disableEth3?: pulumi.Input<boolean>;
    /**
     * Whether to disable module port
     */
    disableModule?: pulumi.Input<boolean>;
    eslConfig?: pulumi.Input<inputs.device.ApEslConfig>;
    /**
     * For some AP models, flowControl can be enabled to address some switch compatibility issue
     */
    flowControl?: pulumi.Input<boolean>;
    /**
     * Height, in meters, optional
     */
    height?: pulumi.Input<number>;
    image1Url?: pulumi.Input<string>;
    image2Url?: pulumi.Input<string>;
    image3Url?: pulumi.Input<string>;
    /**
     * IP AP settings
     */
    ipConfig?: pulumi.Input<inputs.device.ApIpConfig>;
    lacpConfig?: pulumi.Input<inputs.device.ApLacpConfig>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.device.ApLed>;
    /**
     * Whether this map is considered locked down
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Device MAC address
     */
    mac?: pulumi.Input<string>;
    /**
     * Map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    /**
     * Mesh AP settings
     */
    mesh?: pulumi.Input<inputs.device.ApMesh>;
    /**
     * Device Model
     */
    model?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Any notes about this AP
     */
    notes?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    orgId?: pulumi.Input<string>;
    /**
     * Orientation, 0-359, in degrees, up is 0, right is 90.
     */
    orientation?: pulumi.Input<number>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    poePassthrough?: pulumi.Input<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If spcified, this takes predecence over switchConfig (switch_config requires user to configure all vlans manually, which is error-prone. thus deprecated)
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.ApPortConfig>}>;
    /**
     * Power related configs
     */
    pwrConfig?: pulumi.Input<inputs.device.ApPwrConfig>;
    /**
     * Radio AP settings
     */
    radioConfig?: pulumi.Input<inputs.device.ApRadioConfig>;
    /**
     * Device Serial
     */
    serial?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    /**
     * Device Type. enum: `ap`
     */
    type?: pulumi.Input<string>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.device.ApUplinkPortConfig>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    usbConfig?: pulumi.Input<inputs.device.ApUsbConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * X in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * Y in pixel
     */
    y?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ap resource.
 */
export interface ApArgs {
    /**
     * Aeroscout AP settings
     */
    aeroscout?: pulumi.Input<inputs.device.ApAeroscout>;
    airista?: pulumi.Input<inputs.device.ApAirista>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.device.ApBleConfig>;
    centrak?: pulumi.Input<inputs.device.ApCentrak>;
    clientBridge?: pulumi.Input<inputs.device.ApClientBridge>;
    deviceId: pulumi.Input<string>;
    /**
     * Whether to disable eth1 port
     */
    disableEth1?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth2 port
     */
    disableEth2?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth3 port
     */
    disableEth3?: pulumi.Input<boolean>;
    /**
     * Whether to disable module port
     */
    disableModule?: pulumi.Input<boolean>;
    eslConfig?: pulumi.Input<inputs.device.ApEslConfig>;
    /**
     * For some AP models, flowControl can be enabled to address some switch compatibility issue
     */
    flowControl?: pulumi.Input<boolean>;
    /**
     * Height, in meters, optional
     */
    height?: pulumi.Input<number>;
    /**
     * IP AP settings
     */
    ipConfig?: pulumi.Input<inputs.device.ApIpConfig>;
    lacpConfig?: pulumi.Input<inputs.device.ApLacpConfig>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.device.ApLed>;
    /**
     * Whether this map is considered locked down
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Map where the device belongs to
     */
    mapId?: pulumi.Input<string>;
    /**
     * Mesh AP settings
     */
    mesh?: pulumi.Input<inputs.device.ApMesh>;
    name?: pulumi.Input<string>;
    /**
     * Any notes about this AP
     */
    notes?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Orientation, 0-359, in degrees, up is 0, right is 90.
     */
    orientation?: pulumi.Input<number>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    poePassthrough?: pulumi.Input<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If spcified, this takes predecence over switchConfig (switch_config requires user to configure all vlans manually, which is error-prone. thus deprecated)
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.device.ApPortConfig>}>;
    /**
     * Power related configs
     */
    pwrConfig?: pulumi.Input<inputs.device.ApPwrConfig>;
    /**
     * Radio AP settings
     */
    radioConfig?: pulumi.Input<inputs.device.ApRadioConfig>;
    siteId: pulumi.Input<string>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.device.ApUplinkPortConfig>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    usbConfig?: pulumi.Input<inputs.device.ApUsbConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * X in pixel
     */
    x?: pulumi.Input<number>;
    /**
     * Y in pixel
     */
    y?: pulumi.Input<number>;
}
