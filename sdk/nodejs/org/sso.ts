// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource manages Org SSO Configuration.
 *
 * Org SSO, or Single Sign-On, is a method of authentication that allows users to securely log in to multiple applications and websites with a single set of login credentials.\
 * It involves integrating the Org portal with an Identity Provider (IdP) using the Security Assertion Markup Language (SAML) framework.\
 * This enables users to authenticate themselves through their corporate IdP, eliminating the need to remember separate passwords or enter credentials each time they access the Org portal.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const ssoAdminOne = new junipermist.org.Sso("sso_admin_one", {
 *     orgId: terraformTest.id,
 *     name: "sso_admin_one",
 *     customLogoutUrl: "https://idp.com/logout",
 *     idpCert: "-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
 *     idpSignAlgo: "sha512",
 *     idpSsoUrl: "https://idp.com/login",
 *     issuer: "my_idp_issuer",
 *     nameidFormat: "email",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_sso` with:
 *
 * Org PSK can be imported by specifying the org_id and the sso_id
 *
 * ```sh
 * $ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Sso extends pulumi.CustomResource {
    /**
     * Get an existing Sso resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoState, opts?: pulumi.CustomResourceOptions): Sso {
        return new Sso(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/sso:Sso';

    /**
     * Returns true if the given object is an instance of Sso.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sso {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sso.__pulumiType;
    }

    /**
     * a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
     * different from SP-initiated SLO process)
     */
    public readonly customLogoutUrl!: pulumi.Output<string | undefined>;
    /**
     * default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
     * matched
     */
    public readonly defaultRole!: pulumi.Output<string | undefined>;
    /**
     * Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
     * `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
     * `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * IDP Cert (used to verify the signed response)
     */
    public readonly idpCert!: pulumi.Output<string>;
    /**
     * Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
     */
    public readonly idpSignAlgo!: pulumi.Output<string>;
    /**
     * IDP Single-Sign-On URL
     */
    public readonly idpSsoUrl!: pulumi.Output<string>;
    /**
     * ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
     */
    public readonly ignoreUnmatchedRoles!: pulumi.Output<boolean | undefined>;
    /**
     * IDP issuer URL
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * enum: `email`, `unspecified`
     */
    public readonly nameidFormat!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    /**
     * custom role attribute parsing scheme. Supported Role Parsing Schemes
     * <table><tr><th>Name</th><th>Scheme</th></tr><tr><td>`cn`</td><td><ul><li>The expected role attribute format in SAML
     * Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the
     * entire entry will be ignored)</li></ul>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
     * “cn”</td></tr></table>
     */
    public readonly roleAttrExtraction!: pulumi.Output<string | undefined>;
    /**
     * name of the attribute in SAML Assertion to extract role from. Default: `Role`
     */
    public readonly roleAttrFrom!: pulumi.Output<string>;

    /**
     * Create a Sso resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoArgs | SsoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoState | undefined;
            resourceInputs["customLogoutUrl"] = state ? state.customLogoutUrl : undefined;
            resourceInputs["defaultRole"] = state ? state.defaultRole : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["idpCert"] = state ? state.idpCert : undefined;
            resourceInputs["idpSignAlgo"] = state ? state.idpSignAlgo : undefined;
            resourceInputs["idpSsoUrl"] = state ? state.idpSsoUrl : undefined;
            resourceInputs["ignoreUnmatchedRoles"] = state ? state.ignoreUnmatchedRoles : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameidFormat"] = state ? state.nameidFormat : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["roleAttrExtraction"] = state ? state.roleAttrExtraction : undefined;
            resourceInputs["roleAttrFrom"] = state ? state.roleAttrFrom : undefined;
        } else {
            const args = argsOrState as SsoArgs | undefined;
            if ((!args || args.idpCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpCert'");
            }
            if ((!args || args.idpSignAlgo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpSignAlgo'");
            }
            if ((!args || args.idpSsoUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpSsoUrl'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["customLogoutUrl"] = args ? args.customLogoutUrl : undefined;
            resourceInputs["defaultRole"] = args ? args.defaultRole : undefined;
            resourceInputs["idpCert"] = args ? args.idpCert : undefined;
            resourceInputs["idpSignAlgo"] = args ? args.idpSignAlgo : undefined;
            resourceInputs["idpSsoUrl"] = args ? args.idpSsoUrl : undefined;
            resourceInputs["ignoreUnmatchedRoles"] = args ? args.ignoreUnmatchedRoles : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameidFormat"] = args ? args.nameidFormat : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["roleAttrExtraction"] = args ? args.roleAttrExtraction : undefined;
            resourceInputs["roleAttrFrom"] = args ? args.roleAttrFrom : undefined;
            resourceInputs["domain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sso.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sso resources.
 */
export interface SsoState {
    /**
     * a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
     * different from SP-initiated SLO process)
     */
    customLogoutUrl?: pulumi.Input<string>;
    /**
     * default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
     * matched
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
     * `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
     * `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
     */
    domain?: pulumi.Input<string>;
    /**
     * IDP Cert (used to verify the signed response)
     */
    idpCert?: pulumi.Input<string>;
    /**
     * Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
     */
    idpSignAlgo?: pulumi.Input<string>;
    /**
     * IDP Single-Sign-On URL
     */
    idpSsoUrl?: pulumi.Input<string>;
    /**
     * ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
     */
    ignoreUnmatchedRoles?: pulumi.Input<boolean>;
    /**
     * IDP issuer URL
     */
    issuer?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * enum: `email`, `unspecified`
     */
    nameidFormat?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * custom role attribute parsing scheme. Supported Role Parsing Schemes
     * <table><tr><th>Name</th><th>Scheme</th></tr><tr><td>`cn`</td><td><ul><li>The expected role attribute format in SAML
     * Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the
     * entire entry will be ignored)</li></ul>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
     * “cn”</td></tr></table>
     */
    roleAttrExtraction?: pulumi.Input<string>;
    /**
     * name of the attribute in SAML Assertion to extract role from. Default: `Role`
     */
    roleAttrFrom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sso resource.
 */
export interface SsoArgs {
    /**
     * a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
     * different from SP-initiated SLO process)
     */
    customLogoutUrl?: pulumi.Input<string>;
    /**
     * default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
     * matched
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * IDP Cert (used to verify the signed response)
     */
    idpCert: pulumi.Input<string>;
    /**
     * Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
     */
    idpSignAlgo: pulumi.Input<string>;
    /**
     * IDP Single-Sign-On URL
     */
    idpSsoUrl: pulumi.Input<string>;
    /**
     * ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
     */
    ignoreUnmatchedRoles?: pulumi.Input<boolean>;
    /**
     * IDP issuer URL
     */
    issuer: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * enum: `email`, `unspecified`
     */
    nameidFormat?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    /**
     * custom role attribute parsing scheme. Supported Role Parsing Schemes
     * <table><tr><th>Name</th><th>Scheme</th></tr><tr><td>`cn`</td><td><ul><li>The expected role attribute format in SAML
     * Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the
     * entire entry will be ignored)</li></ul>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
     * “cn”</td></tr></table>
     */
    roleAttrExtraction?: pulumi.Input<string>;
    /**
     * name of the attribute in SAML Assertion to extract role from. Default: `Role`
     */
    roleAttrFrom?: pulumi.Input<string>;
}
