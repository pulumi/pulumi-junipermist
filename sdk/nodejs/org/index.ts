// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BaseArgs, BaseState } from "./base";
export type Base = import("./base").Base;
export const Base: typeof import("./base").Base = null as any;
utilities.lazyLoad(exports, ["Base"], () => require("./base"));

export { DeviceprofileApArgs, DeviceprofileApState } from "./deviceprofileAp";
export type DeviceprofileAp = import("./deviceprofileAp").DeviceprofileAp;
export const DeviceprofileAp: typeof import("./deviceprofileAp").DeviceprofileAp = null as any;
utilities.lazyLoad(exports, ["DeviceprofileAp"], () => require("./deviceprofileAp"));

export { DeviceprofileAssignArgs, DeviceprofileAssignState } from "./deviceprofileAssign";
export type DeviceprofileAssign = import("./deviceprofileAssign").DeviceprofileAssign;
export const DeviceprofileAssign: typeof import("./deviceprofileAssign").DeviceprofileAssign = null as any;
utilities.lazyLoad(exports, ["DeviceprofileAssign"], () => require("./deviceprofileAssign"));

export { DeviceprofileGatewayArgs, DeviceprofileGatewayState } from "./deviceprofileGateway";
export type DeviceprofileGateway = import("./deviceprofileGateway").DeviceprofileGateway;
export const DeviceprofileGateway: typeof import("./deviceprofileGateway").DeviceprofileGateway = null as any;
utilities.lazyLoad(exports, ["DeviceprofileGateway"], () => require("./deviceprofileGateway"));

export { GatewaytemplateArgs, GatewaytemplateState } from "./gatewaytemplate";
export type Gatewaytemplate = import("./gatewaytemplate").Gatewaytemplate;
export const Gatewaytemplate: typeof import("./gatewaytemplate").Gatewaytemplate = null as any;
utilities.lazyLoad(exports, ["Gatewaytemplate"], () => require("./gatewaytemplate"));

export { GetDeviceprofilesApArgs, GetDeviceprofilesApResult, GetDeviceprofilesApOutputArgs } from "./getDeviceprofilesAp";
export const getDeviceprofilesAp: typeof import("./getDeviceprofilesAp").getDeviceprofilesAp = null as any;
export const getDeviceprofilesApOutput: typeof import("./getDeviceprofilesAp").getDeviceprofilesApOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceprofilesAp","getDeviceprofilesApOutput"], () => require("./getDeviceprofilesAp"));

export { GetDeviceprofilesGatewayArgs, GetDeviceprofilesGatewayResult, GetDeviceprofilesGatewayOutputArgs } from "./getDeviceprofilesGateway";
export const getDeviceprofilesGateway: typeof import("./getDeviceprofilesGateway").getDeviceprofilesGateway = null as any;
export const getDeviceprofilesGatewayOutput: typeof import("./getDeviceprofilesGateway").getDeviceprofilesGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceprofilesGateway","getDeviceprofilesGatewayOutput"], () => require("./getDeviceprofilesGateway"));

export { GetGatewaytemplatesArgs, GetGatewaytemplatesResult, GetGatewaytemplatesOutputArgs } from "./getGatewaytemplates";
export const getGatewaytemplates: typeof import("./getGatewaytemplates").getGatewaytemplates = null as any;
export const getGatewaytemplatesOutput: typeof import("./getGatewaytemplates").getGatewaytemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewaytemplates","getGatewaytemplatesOutput"], () => require("./getGatewaytemplates"));

export { GetIdpprofilesArgs, GetIdpprofilesResult, GetIdpprofilesOutputArgs } from "./getIdpprofiles";
export const getIdpprofiles: typeof import("./getIdpprofiles").getIdpprofiles = null as any;
export const getIdpprofilesOutput: typeof import("./getIdpprofiles").getIdpprofilesOutput = null as any;
utilities.lazyLoad(exports, ["getIdpprofiles","getIdpprofilesOutput"], () => require("./getIdpprofiles"));

export { GetInventoryArgs, GetInventoryResult, GetInventoryOutputArgs } from "./getInventory";
export const getInventory: typeof import("./getInventory").getInventory = null as any;
export const getInventoryOutput: typeof import("./getInventory").getInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getInventory","getInventoryOutput"], () => require("./getInventory"));

export { GetNacrulesArgs, GetNacrulesResult, GetNacrulesOutputArgs } from "./getNacrules";
export const getNacrules: typeof import("./getNacrules").getNacrules = null as any;
export const getNacrulesOutput: typeof import("./getNacrules").getNacrulesOutput = null as any;
utilities.lazyLoad(exports, ["getNacrules","getNacrulesOutput"], () => require("./getNacrules"));

export { GetNactagsArgs, GetNactagsResult, GetNactagsOutputArgs } from "./getNactags";
export const getNactags: typeof import("./getNactags").getNactags = null as any;
export const getNactagsOutput: typeof import("./getNactags").getNactagsOutput = null as any;
utilities.lazyLoad(exports, ["getNactags","getNactagsOutput"], () => require("./getNactags"));

export { GetNetworksArgs, GetNetworksResult, GetNetworksOutputArgs } from "./getNetworks";
export const getNetworks: typeof import("./getNetworks").getNetworks = null as any;
export const getNetworksOutput: typeof import("./getNetworks").getNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworks","getNetworksOutput"], () => require("./getNetworks"));

export { GetNetworktemplatesArgs, GetNetworktemplatesResult, GetNetworktemplatesOutputArgs } from "./getNetworktemplates";
export const getNetworktemplates: typeof import("./getNetworktemplates").getNetworktemplates = null as any;
export const getNetworktemplatesOutput: typeof import("./getNetworktemplates").getNetworktemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworktemplates","getNetworktemplatesOutput"], () => require("./getNetworktemplates"));

export { GetPsksArgs, GetPsksResult, GetPsksOutputArgs } from "./getPsks";
export const getPsks: typeof import("./getPsks").getPsks = null as any;
export const getPsksOutput: typeof import("./getPsks").getPsksOutput = null as any;
utilities.lazyLoad(exports, ["getPsks","getPsksOutput"], () => require("./getPsks"));

export { GetRftemplatesArgs, GetRftemplatesResult, GetRftemplatesOutputArgs } from "./getRftemplates";
export const getRftemplates: typeof import("./getRftemplates").getRftemplates = null as any;
export const getRftemplatesOutput: typeof import("./getRftemplates").getRftemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getRftemplates","getRftemplatesOutput"], () => require("./getRftemplates"));

export { GetServicepoliciesArgs, GetServicepoliciesResult, GetServicepoliciesOutputArgs } from "./getServicepolicies";
export const getServicepolicies: typeof import("./getServicepolicies").getServicepolicies = null as any;
export const getServicepoliciesOutput: typeof import("./getServicepolicies").getServicepoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getServicepolicies","getServicepoliciesOutput"], () => require("./getServicepolicies"));

export { GetServicesArgs, GetServicesResult, GetServicesOutputArgs } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { GetSitegroupsArgs, GetSitegroupsResult, GetSitegroupsOutputArgs } from "./getSitegroups";
export const getSitegroups: typeof import("./getSitegroups").getSitegroups = null as any;
export const getSitegroupsOutput: typeof import("./getSitegroups").getSitegroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSitegroups","getSitegroupsOutput"], () => require("./getSitegroups"));

export { GetVpnsArgs, GetVpnsResult, GetVpnsOutputArgs } from "./getVpns";
export const getVpns: typeof import("./getVpns").getVpns = null as any;
export const getVpnsOutput: typeof import("./getVpns").getVpnsOutput = null as any;
utilities.lazyLoad(exports, ["getVpns","getVpnsOutput"], () => require("./getVpns"));

export { GetWebhooksArgs, GetWebhooksResult, GetWebhooksOutputArgs } from "./getWebhooks";
export const getWebhooks: typeof import("./getWebhooks").getWebhooks = null as any;
export const getWebhooksOutput: typeof import("./getWebhooks").getWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooks","getWebhooksOutput"], () => require("./getWebhooks"));

export { GetWlantemplatesArgs, GetWlantemplatesResult, GetWlantemplatesOutputArgs } from "./getWlantemplates";
export const getWlantemplates: typeof import("./getWlantemplates").getWlantemplates = null as any;
export const getWlantemplatesOutput: typeof import("./getWlantemplates").getWlantemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getWlantemplates","getWlantemplatesOutput"], () => require("./getWlantemplates"));

export { GetWxtagsArgs, GetWxtagsResult, GetWxtagsOutputArgs } from "./getWxtags";
export const getWxtags: typeof import("./getWxtags").getWxtags = null as any;
export const getWxtagsOutput: typeof import("./getWxtags").getWxtagsOutput = null as any;
utilities.lazyLoad(exports, ["getWxtags","getWxtagsOutput"], () => require("./getWxtags"));

export { IdpprofileArgs, IdpprofileState } from "./idpprofile";
export type Idpprofile = import("./idpprofile").Idpprofile;
export const Idpprofile: typeof import("./idpprofile").Idpprofile = null as any;
utilities.lazyLoad(exports, ["Idpprofile"], () => require("./idpprofile"));

export { InventoryArgs, InventoryState } from "./inventory";
export type Inventory = import("./inventory").Inventory;
export const Inventory: typeof import("./inventory").Inventory = null as any;
utilities.lazyLoad(exports, ["Inventory"], () => require("./inventory"));

export { NacruleArgs, NacruleState } from "./nacrule";
export type Nacrule = import("./nacrule").Nacrule;
export const Nacrule: typeof import("./nacrule").Nacrule = null as any;
utilities.lazyLoad(exports, ["Nacrule"], () => require("./nacrule"));

export { NactagArgs, NactagState } from "./nactag";
export type Nactag = import("./nactag").Nactag;
export const Nactag: typeof import("./nactag").Nactag = null as any;
utilities.lazyLoad(exports, ["Nactag"], () => require("./nactag"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworktemplateArgs, NetworktemplateState } from "./networktemplate";
export type Networktemplate = import("./networktemplate").Networktemplate;
export const Networktemplate: typeof import("./networktemplate").Networktemplate = null as any;
utilities.lazyLoad(exports, ["Networktemplate"], () => require("./networktemplate"));

export { PskArgs, PskState } from "./psk";
export type Psk = import("./psk").Psk;
export const Psk: typeof import("./psk").Psk = null as any;
utilities.lazyLoad(exports, ["Psk"], () => require("./psk"));

export { RftemplateArgs, RftemplateState } from "./rftemplate";
export type Rftemplate = import("./rftemplate").Rftemplate;
export const Rftemplate: typeof import("./rftemplate").Rftemplate = null as any;
utilities.lazyLoad(exports, ["Rftemplate"], () => require("./rftemplate"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServicepolicyArgs, ServicepolicyState } from "./servicepolicy";
export type Servicepolicy = import("./servicepolicy").Servicepolicy;
export const Servicepolicy: typeof import("./servicepolicy").Servicepolicy = null as any;
utilities.lazyLoad(exports, ["Servicepolicy"], () => require("./servicepolicy"));

export { SettingArgs, SettingState } from "./setting";
export type Setting = import("./setting").Setting;
export const Setting: typeof import("./setting").Setting = null as any;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));

export { SitegroupArgs, SitegroupState } from "./sitegroup";
export type Sitegroup = import("./sitegroup").Sitegroup;
export const Sitegroup: typeof import("./sitegroup").Sitegroup = null as any;
utilities.lazyLoad(exports, ["Sitegroup"], () => require("./sitegroup"));

export { VpnArgs, VpnState } from "./vpn";
export type Vpn = import("./vpn").Vpn;
export const Vpn: typeof import("./vpn").Vpn = null as any;
utilities.lazyLoad(exports, ["Vpn"], () => require("./vpn"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));

export { WlanArgs, WlanState } from "./wlan";
export type Wlan = import("./wlan").Wlan;
export const Wlan: typeof import("./wlan").Wlan = null as any;
utilities.lazyLoad(exports, ["Wlan"], () => require("./wlan"));

export { WlantemplateArgs, WlantemplateState } from "./wlantemplate";
export type Wlantemplate = import("./wlantemplate").Wlantemplate;
export const Wlantemplate: typeof import("./wlantemplate").Wlantemplate = null as any;
utilities.lazyLoad(exports, ["Wlantemplate"], () => require("./wlantemplate"));

export { WxruleArgs, WxruleState } from "./wxrule";
export type Wxrule = import("./wxrule").Wxrule;
export const Wxrule: typeof import("./wxrule").Wxrule = null as any;
utilities.lazyLoad(exports, ["Wxrule"], () => require("./wxrule"));

export { WxtagArgs, WxtagState } from "./wxtag";
export type Wxtag = import("./wxtag").Wxtag;
export const Wxtag: typeof import("./wxtag").Wxtag = null as any;
utilities.lazyLoad(exports, ["Wxtag"], () => require("./wxtag"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "junipermist:org/base:base":
                return new Base(name, <any>undefined, { urn })
            case "junipermist:org/deviceprofileAp:DeviceprofileAp":
                return new DeviceprofileAp(name, <any>undefined, { urn })
            case "junipermist:org/deviceprofileAssign:DeviceprofileAssign":
                return new DeviceprofileAssign(name, <any>undefined, { urn })
            case "junipermist:org/deviceprofileGateway:DeviceprofileGateway":
                return new DeviceprofileGateway(name, <any>undefined, { urn })
            case "junipermist:org/gatewaytemplate:Gatewaytemplate":
                return new Gatewaytemplate(name, <any>undefined, { urn })
            case "junipermist:org/idpprofile:Idpprofile":
                return new Idpprofile(name, <any>undefined, { urn })
            case "junipermist:org/inventory:Inventory":
                return new Inventory(name, <any>undefined, { urn })
            case "junipermist:org/nacrule:Nacrule":
                return new Nacrule(name, <any>undefined, { urn })
            case "junipermist:org/nactag:Nactag":
                return new Nactag(name, <any>undefined, { urn })
            case "junipermist:org/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "junipermist:org/networktemplate:Networktemplate":
                return new Networktemplate(name, <any>undefined, { urn })
            case "junipermist:org/psk:Psk":
                return new Psk(name, <any>undefined, { urn })
            case "junipermist:org/rftemplate:Rftemplate":
                return new Rftemplate(name, <any>undefined, { urn })
            case "junipermist:org/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "junipermist:org/servicepolicy:Servicepolicy":
                return new Servicepolicy(name, <any>undefined, { urn })
            case "junipermist:org/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "junipermist:org/sitegroup:Sitegroup":
                return new Sitegroup(name, <any>undefined, { urn })
            case "junipermist:org/vpn:Vpn":
                return new Vpn(name, <any>undefined, { urn })
            case "junipermist:org/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            case "junipermist:org/wlan:Wlan":
                return new Wlan(name, <any>undefined, { urn })
            case "junipermist:org/wlantemplate:Wlantemplate":
                return new Wlantemplate(name, <any>undefined, { urn })
            case "junipermist:org/wxrule:Wxrule":
                return new Wxrule(name, <any>undefined, { urn })
            case "junipermist:org/wxtag:Wxtag":
                return new Wxtag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("junipermist", "org/base", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/deviceprofileAp", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/deviceprofileAssign", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/deviceprofileGateway", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/gatewaytemplate", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/idpprofile", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/inventory", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/nacrule", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/nactag", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/network", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/networktemplate", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/psk", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/rftemplate", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/service", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/servicepolicy", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/setting", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/sitegroup", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/vpn", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/webhook", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/wlan", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/wlantemplate", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/wxrule", _module)
pulumi.runtime.registerResourceModule("junipermist", "org/wxtag", _module)
