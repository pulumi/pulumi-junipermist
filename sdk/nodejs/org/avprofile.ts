// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource manages the Org Antivirus Profile.
 *
 * An Antivirus Profile is used to configure the Antivirus feature on SRX devices. It specifies which content the Antivirus should analyse and which content should be ignored.
 *
 * The Antivirus profiles can be used within the following resources:
 *  * `mist_org_servicepolicy.antivirus`
 *  * `mist_org_gatewaytemplate.service_policies.antivirus`
 *  * `mist_org_deviceprofile_gateway.service_policies.antivirus`
 *  * `mist_device_gateway.service_policies.antivirus`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const avprofileOne = new junipermist.org.Avprofile("avprofile_one", {
 *     orgId: terraformTest.id,
 *     fallbackAction: "block",
 *     maxFilesize: 5000,
 *     mimeWhitelists: ["image/png"],
 *     name: "avprofile_one",
 *     protocols: [
 *         "ftp",
 *         "http",
 *         "imap",
 *         "pop3",
 *         "smtp",
 *     ],
 *     urlWhitelists: ["www.google.fr"],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_avprofile` with:
 *
 * IDP Profile can be imported by specifying the org_id and the avprofile_id
 *
 * ```sh
 * $ pulumi import junipermist:org/avprofile:Avprofile avprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Avprofile extends pulumi.CustomResource {
    /**
     * Get an existing Avprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AvprofileState, opts?: pulumi.CustomResourceOptions): Avprofile {
        return new Avprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/avprofile:Avprofile';

    /**
     * Returns true if the given object is an instance of Avprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Avprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Avprofile.__pulumiType;
    }

    /**
     * enum: `block`, `permit`
     */
    public readonly fallbackAction!: pulumi.Output<string | undefined>;
    /**
     * In KB
     */
    public readonly maxFilesize!: pulumi.Output<number>;
    public readonly mimeWhitelists!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    /**
     * List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
     */
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly urlWhitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Avprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AvprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AvprofileArgs | AvprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AvprofileState | undefined;
            resourceInputs["fallbackAction"] = state ? state.fallbackAction : undefined;
            resourceInputs["maxFilesize"] = state ? state.maxFilesize : undefined;
            resourceInputs["mimeWhitelists"] = state ? state.mimeWhitelists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["urlWhitelists"] = state ? state.urlWhitelists : undefined;
        } else {
            const args = argsOrState as AvprofileArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.protocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocols'");
            }
            resourceInputs["fallbackAction"] = args ? args.fallbackAction : undefined;
            resourceInputs["maxFilesize"] = args ? args.maxFilesize : undefined;
            resourceInputs["mimeWhitelists"] = args ? args.mimeWhitelists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["urlWhitelists"] = args ? args.urlWhitelists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Avprofile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Avprofile resources.
 */
export interface AvprofileState {
    /**
     * enum: `block`, `permit`
     */
    fallbackAction?: pulumi.Input<string>;
    /**
     * In KB
     */
    maxFilesize?: pulumi.Input<number>;
    mimeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    urlWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Avprofile resource.
 */
export interface AvprofileArgs {
    /**
     * enum: `block`, `permit`
     */
    fallbackAction?: pulumi.Input<string>;
    /**
     * In KB
     */
    maxFilesize?: pulumi.Input<number>;
    mimeWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    /**
     * List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
     */
    protocols: pulumi.Input<pulumi.Input<string>[]>;
    urlWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
