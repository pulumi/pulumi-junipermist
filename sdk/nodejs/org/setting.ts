// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Org Settings.The Org Settings can be used to customize the Org configuration
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const vpnOne = new junipermist.org.Vpn("vpn_one", {
 *     orgId: terraformTest.id,
 *     name: "vpn_one",
 *     paths: {
 *         "AWS_Hub_Profile1-WAN1": {
 *             bfdProfile: "broadband",
 *         },
 *         "AWS_Hub_Profile1-WAN2": {},
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_setting` with:
 *
 * Org Setting can be imported by specifying the org_id
 *
 * ```sh
 * $ pulumi import junipermist:org/setting:Setting setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
 * ```
 */
export class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingState, opts?: pulumi.CustomResourceOptions): Setting {
        return new Setting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/setting:Setting';

    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Setting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }

    /**
     * enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
     * `deviceUpdownThreshold` is ignored.
     */
    public readonly apUpdownThreshold!: pulumi.Output<number>;
    public readonly apiPolicy!: pulumi.Output<outputs.org.SettingApiPolicy | undefined>;
    /**
     * list of PEM-encoded ca certs
     */
    public readonly cacerts!: pulumi.Output<string[]>;
    public readonly celona!: pulumi.Output<outputs.org.SettingCelona | undefined>;
    public readonly cloudshark!: pulumi.Output<outputs.org.SettingCloudshark | undefined>;
    public readonly cradlepoint!: pulumi.Output<outputs.org.SettingCradlepoint | undefined>;
    /**
     * common device cert, optional
     */
    public readonly deviceCert!: pulumi.Output<outputs.org.SettingDeviceCert | undefined>;
    /**
     * enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
     * AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
     * immediate)
     */
    public readonly deviceUpdownThreshold!: pulumi.Output<number>;
    /**
     * whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
     */
    public readonly disablePcap!: pulumi.Output<boolean>;
    /**
     * whether to disable remote shell access for an entire org
     */
    public readonly disableRemoteShell!: pulumi.Output<boolean>;
    /**
     * enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    public readonly gatewayUpdownThreshold!: pulumi.Output<number>;
    public readonly installer!: pulumi.Output<outputs.org.SettingInstaller | undefined>;
    public readonly jcloud!: pulumi.Output<outputs.org.SettingJcloud | undefined>;
    public /*out*/ readonly juniper!: pulumi.Output<outputs.org.SettingJuniper>;
    /**
     * management-related properties
     */
    public readonly mgmt!: pulumi.Output<outputs.org.SettingMgmt | undefined>;
    public readonly mistNac!: pulumi.Output<outputs.org.SettingMistNac | undefined>;
    public readonly mxedgeFipsEnabled!: pulumi.Output<boolean>;
    public readonly mxedgeMgmt!: pulumi.Output<outputs.org.SettingMxedgeMgmt | undefined>;
    public readonly orgId!: pulumi.Output<string>;
    /**
     * password policy
     */
    public readonly passwordPolicy!: pulumi.Output<outputs.org.SettingPasswordPolicy | undefined>;
    public readonly pcap!: pulumi.Output<outputs.org.SettingPcap | undefined>;
    public readonly portChannelization!: pulumi.Output<outputs.org.SettingPortChannelization | undefined>;
    public readonly security!: pulumi.Output<outputs.org.SettingSecurity | undefined>;
    public readonly switchMgmt!: pulumi.Output<outputs.org.SettingSwitchMgmt | undefined>;
    /**
     * enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    public readonly switchUpdownThreshold!: pulumi.Output<number>;
    public readonly syntheticTest!: pulumi.Output<outputs.org.SettingSyntheticTest | undefined>;
    /**
     * automatically logout the user when UI session is inactive. `0` means disabled
     */
    public readonly uiIdleTimeout!: pulumi.Output<number>;
    public readonly vpnOptions!: pulumi.Output<outputs.org.SettingVpnOptions | undefined>;

    /**
     * Create a Setting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingArgs | SettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingState | undefined;
            resourceInputs["apUpdownThreshold"] = state ? state.apUpdownThreshold : undefined;
            resourceInputs["apiPolicy"] = state ? state.apiPolicy : undefined;
            resourceInputs["cacerts"] = state ? state.cacerts : undefined;
            resourceInputs["celona"] = state ? state.celona : undefined;
            resourceInputs["cloudshark"] = state ? state.cloudshark : undefined;
            resourceInputs["cradlepoint"] = state ? state.cradlepoint : undefined;
            resourceInputs["deviceCert"] = state ? state.deviceCert : undefined;
            resourceInputs["deviceUpdownThreshold"] = state ? state.deviceUpdownThreshold : undefined;
            resourceInputs["disablePcap"] = state ? state.disablePcap : undefined;
            resourceInputs["disableRemoteShell"] = state ? state.disableRemoteShell : undefined;
            resourceInputs["gatewayUpdownThreshold"] = state ? state.gatewayUpdownThreshold : undefined;
            resourceInputs["installer"] = state ? state.installer : undefined;
            resourceInputs["jcloud"] = state ? state.jcloud : undefined;
            resourceInputs["juniper"] = state ? state.juniper : undefined;
            resourceInputs["mgmt"] = state ? state.mgmt : undefined;
            resourceInputs["mistNac"] = state ? state.mistNac : undefined;
            resourceInputs["mxedgeFipsEnabled"] = state ? state.mxedgeFipsEnabled : undefined;
            resourceInputs["mxedgeMgmt"] = state ? state.mxedgeMgmt : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["pcap"] = state ? state.pcap : undefined;
            resourceInputs["portChannelization"] = state ? state.portChannelization : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["switchMgmt"] = state ? state.switchMgmt : undefined;
            resourceInputs["switchUpdownThreshold"] = state ? state.switchUpdownThreshold : undefined;
            resourceInputs["syntheticTest"] = state ? state.syntheticTest : undefined;
            resourceInputs["uiIdleTimeout"] = state ? state.uiIdleTimeout : undefined;
            resourceInputs["vpnOptions"] = state ? state.vpnOptions : undefined;
        } else {
            const args = argsOrState as SettingArgs | undefined;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["apUpdownThreshold"] = args ? args.apUpdownThreshold : undefined;
            resourceInputs["apiPolicy"] = args ? args.apiPolicy : undefined;
            resourceInputs["cacerts"] = args ? args.cacerts : undefined;
            resourceInputs["celona"] = args ? args.celona : undefined;
            resourceInputs["cloudshark"] = args ? args.cloudshark : undefined;
            resourceInputs["cradlepoint"] = args ? args.cradlepoint : undefined;
            resourceInputs["deviceCert"] = args ? args.deviceCert : undefined;
            resourceInputs["deviceUpdownThreshold"] = args ? args.deviceUpdownThreshold : undefined;
            resourceInputs["disablePcap"] = args ? args.disablePcap : undefined;
            resourceInputs["disableRemoteShell"] = args ? args.disableRemoteShell : undefined;
            resourceInputs["gatewayUpdownThreshold"] = args ? args.gatewayUpdownThreshold : undefined;
            resourceInputs["installer"] = args ? args.installer : undefined;
            resourceInputs["jcloud"] = args ? args.jcloud : undefined;
            resourceInputs["mgmt"] = args ? args.mgmt : undefined;
            resourceInputs["mistNac"] = args ? args.mistNac : undefined;
            resourceInputs["mxedgeFipsEnabled"] = args ? args.mxedgeFipsEnabled : undefined;
            resourceInputs["mxedgeMgmt"] = args ? args.mxedgeMgmt : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["pcap"] = args ? args.pcap : undefined;
            resourceInputs["portChannelization"] = args ? args.portChannelization : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["switchMgmt"] = args ? args.switchMgmt : undefined;
            resourceInputs["switchUpdownThreshold"] = args ? args.switchUpdownThreshold : undefined;
            resourceInputs["syntheticTest"] = args ? args.syntheticTest : undefined;
            resourceInputs["uiIdleTimeout"] = args ? args.uiIdleTimeout : undefined;
            resourceInputs["vpnOptions"] = args ? args.vpnOptions : undefined;
            resourceInputs["juniper"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Setting resources.
 */
export interface SettingState {
    /**
     * enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
     * `deviceUpdownThreshold` is ignored.
     */
    apUpdownThreshold?: pulumi.Input<number>;
    apiPolicy?: pulumi.Input<inputs.org.SettingApiPolicy>;
    /**
     * list of PEM-encoded ca certs
     */
    cacerts?: pulumi.Input<pulumi.Input<string>[]>;
    celona?: pulumi.Input<inputs.org.SettingCelona>;
    cloudshark?: pulumi.Input<inputs.org.SettingCloudshark>;
    cradlepoint?: pulumi.Input<inputs.org.SettingCradlepoint>;
    /**
     * common device cert, optional
     */
    deviceCert?: pulumi.Input<inputs.org.SettingDeviceCert>;
    /**
     * enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
     * AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
     * immediate)
     */
    deviceUpdownThreshold?: pulumi.Input<number>;
    /**
     * whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
     */
    disablePcap?: pulumi.Input<boolean>;
    /**
     * whether to disable remote shell access for an entire org
     */
    disableRemoteShell?: pulumi.Input<boolean>;
    /**
     * enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    gatewayUpdownThreshold?: pulumi.Input<number>;
    installer?: pulumi.Input<inputs.org.SettingInstaller>;
    jcloud?: pulumi.Input<inputs.org.SettingJcloud>;
    juniper?: pulumi.Input<inputs.org.SettingJuniper>;
    /**
     * management-related properties
     */
    mgmt?: pulumi.Input<inputs.org.SettingMgmt>;
    mistNac?: pulumi.Input<inputs.org.SettingMistNac>;
    mxedgeFipsEnabled?: pulumi.Input<boolean>;
    mxedgeMgmt?: pulumi.Input<inputs.org.SettingMxedgeMgmt>;
    orgId?: pulumi.Input<string>;
    /**
     * password policy
     */
    passwordPolicy?: pulumi.Input<inputs.org.SettingPasswordPolicy>;
    pcap?: pulumi.Input<inputs.org.SettingPcap>;
    portChannelization?: pulumi.Input<inputs.org.SettingPortChannelization>;
    security?: pulumi.Input<inputs.org.SettingSecurity>;
    switchMgmt?: pulumi.Input<inputs.org.SettingSwitchMgmt>;
    /**
     * enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    switchUpdownThreshold?: pulumi.Input<number>;
    syntheticTest?: pulumi.Input<inputs.org.SettingSyntheticTest>;
    /**
     * automatically logout the user when UI session is inactive. `0` means disabled
     */
    uiIdleTimeout?: pulumi.Input<number>;
    vpnOptions?: pulumi.Input<inputs.org.SettingVpnOptions>;
}

/**
 * The set of arguments for constructing a Setting resource.
 */
export interface SettingArgs {
    /**
     * enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
     * `deviceUpdownThreshold` is ignored.
     */
    apUpdownThreshold?: pulumi.Input<number>;
    apiPolicy?: pulumi.Input<inputs.org.SettingApiPolicy>;
    /**
     * list of PEM-encoded ca certs
     */
    cacerts?: pulumi.Input<pulumi.Input<string>[]>;
    celona?: pulumi.Input<inputs.org.SettingCelona>;
    cloudshark?: pulumi.Input<inputs.org.SettingCloudshark>;
    cradlepoint?: pulumi.Input<inputs.org.SettingCradlepoint>;
    /**
     * common device cert, optional
     */
    deviceCert?: pulumi.Input<inputs.org.SettingDeviceCert>;
    /**
     * enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
     * AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
     * immediate)
     */
    deviceUpdownThreshold?: pulumi.Input<number>;
    /**
     * whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
     */
    disablePcap?: pulumi.Input<boolean>;
    /**
     * whether to disable remote shell access for an entire org
     */
    disableRemoteShell?: pulumi.Input<boolean>;
    /**
     * enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    gatewayUpdownThreshold?: pulumi.Input<number>;
    installer?: pulumi.Input<inputs.org.SettingInstaller>;
    jcloud?: pulumi.Input<inputs.org.SettingJcloud>;
    /**
     * management-related properties
     */
    mgmt?: pulumi.Input<inputs.org.SettingMgmt>;
    mistNac?: pulumi.Input<inputs.org.SettingMistNac>;
    mxedgeFipsEnabled?: pulumi.Input<boolean>;
    mxedgeMgmt?: pulumi.Input<inputs.org.SettingMxedgeMgmt>;
    orgId: pulumi.Input<string>;
    /**
     * password policy
     */
    passwordPolicy?: pulumi.Input<inputs.org.SettingPasswordPolicy>;
    pcap?: pulumi.Input<inputs.org.SettingPcap>;
    portChannelization?: pulumi.Input<inputs.org.SettingPortChannelization>;
    security?: pulumi.Input<inputs.org.SettingSecurity>;
    switchMgmt?: pulumi.Input<inputs.org.SettingSwitchMgmt>;
    /**
     * enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
     * `deviceUpdownThreshold` is ignored.
     */
    switchUpdownThreshold?: pulumi.Input<number>;
    syntheticTest?: pulumi.Input<inputs.org.SettingSyntheticTest>;
    /**
     * automatically logout the user when UI session is inactive. `0` means disabled
     */
    uiIdleTimeout?: pulumi.Input<number>;
    vpnOptions?: pulumi.Input<inputs.org.SettingVpnOptions>;
}
