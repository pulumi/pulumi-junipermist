// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the AP Device Profiles.
 * AP Device profiles for aps are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They allow for efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
 *
 * The AP Device Profile can be assigned to a gateway with the `junipermist.org.DeviceprofileAssign` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const deviceprofileApOne = new junipermist.org.DeviceprofileAp("deviceprofile_ap_one", {
 *     name: "deviceprofile_ap_one",
 *     orgId: terraformTest.id,
 *     eslConfig: {
 *         enabled: true,
 *         host: "1.2.3.4",
 *         type: "native",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_deviceprofile_ap` with:
 *
 * Device Profile can be imported by specifying the org_id and the deviceprofile_id
 *
 * ```sh
 * $ pulumi import junipermist:org/deviceprofileAp:DeviceprofileAp deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class DeviceprofileAp extends pulumi.CustomResource {
    /**
     * Get an existing DeviceprofileAp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceprofileApState, opts?: pulumi.CustomResourceOptions): DeviceprofileAp {
        return new DeviceprofileAp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/deviceprofileAp:DeviceprofileAp';

    /**
     * Returns true if the given object is an instance of DeviceprofileAp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceprofileAp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceprofileAp.__pulumiType;
    }

    /**
     * Aeroscout AP settings
     */
    declare public readonly aeroscout: pulumi.Output<outputs.org.DeviceprofileApAeroscout | undefined>;
    declare public readonly airista: pulumi.Output<outputs.org.DeviceprofileApAirista | undefined>;
    /**
     * BLE AP settings
     */
    declare public readonly bleConfig: pulumi.Output<outputs.org.DeviceprofileApBleConfig | undefined>;
    /**
     * Whether to disable eth1 port
     */
    declare public readonly disableEth1: pulumi.Output<boolean>;
    /**
     * Whether to disable eth2 port
     */
    declare public readonly disableEth2: pulumi.Output<boolean>;
    /**
     * Whether to disable eth3 port
     */
    declare public readonly disableEth3: pulumi.Output<boolean>;
    /**
     * Whether to disable module port
     */
    declare public readonly disableModule: pulumi.Output<boolean>;
    declare public readonly eslConfig: pulumi.Output<outputs.org.DeviceprofileApEslConfig | undefined>;
    /**
     * IP AP settings
     */
    declare public readonly ipConfig: pulumi.Output<outputs.org.DeviceprofileApIpConfig | undefined>;
    declare public readonly lacpConfig: pulumi.Output<outputs.org.DeviceprofileApLacpConfig | undefined>;
    /**
     * LED AP settings
     */
    declare public readonly led: pulumi.Output<outputs.org.DeviceprofileApLed | undefined>;
    /**
     * Mesh AP settings
     */
    declare public readonly mesh: pulumi.Output<outputs.org.DeviceprofileApMesh | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly ntpServers: pulumi.Output<string[] | undefined>;
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    declare public readonly poePassthrough: pulumi.Output<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes precedence over switchConfig (deprecated)
     */
    declare public readonly portConfig: pulumi.Output<{[key: string]: outputs.org.DeviceprofileApPortConfig} | undefined>;
    /**
     * Power related configs
     */
    declare public readonly pwrConfig: pulumi.Output<outputs.org.DeviceprofileApPwrConfig | undefined>;
    /**
     * Radio AP settings
     */
    declare public readonly radioConfig: pulumi.Output<outputs.org.DeviceprofileApRadioConfig | undefined>;
    declare public readonly siteId: pulumi.Output<string | undefined>;
    /**
     * Device Type. enum: `ap`
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * AP Uplink port configuration
     */
    declare public readonly uplinkPortConfig: pulumi.Output<outputs.org.DeviceprofileApUplinkPortConfig | undefined>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    declare public readonly usbConfig: pulumi.Output<outputs.org.DeviceprofileApUsbConfig | undefined>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    declare public readonly vars: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DeviceprofileAp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceprofileApArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceprofileApArgs | DeviceprofileApState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceprofileApState | undefined;
            resourceInputs["aeroscout"] = state?.aeroscout;
            resourceInputs["airista"] = state?.airista;
            resourceInputs["bleConfig"] = state?.bleConfig;
            resourceInputs["disableEth1"] = state?.disableEth1;
            resourceInputs["disableEth2"] = state?.disableEth2;
            resourceInputs["disableEth3"] = state?.disableEth3;
            resourceInputs["disableModule"] = state?.disableModule;
            resourceInputs["eslConfig"] = state?.eslConfig;
            resourceInputs["ipConfig"] = state?.ipConfig;
            resourceInputs["lacpConfig"] = state?.lacpConfig;
            resourceInputs["led"] = state?.led;
            resourceInputs["mesh"] = state?.mesh;
            resourceInputs["name"] = state?.name;
            resourceInputs["ntpServers"] = state?.ntpServers;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["poePassthrough"] = state?.poePassthrough;
            resourceInputs["portConfig"] = state?.portConfig;
            resourceInputs["pwrConfig"] = state?.pwrConfig;
            resourceInputs["radioConfig"] = state?.radioConfig;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["type"] = state?.type;
            resourceInputs["uplinkPortConfig"] = state?.uplinkPortConfig;
            resourceInputs["usbConfig"] = state?.usbConfig;
            resourceInputs["vars"] = state?.vars;
        } else {
            const args = argsOrState as DeviceprofileApArgs | undefined;
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["aeroscout"] = args?.aeroscout;
            resourceInputs["airista"] = args?.airista;
            resourceInputs["bleConfig"] = args?.bleConfig;
            resourceInputs["disableEth1"] = args?.disableEth1;
            resourceInputs["disableEth2"] = args?.disableEth2;
            resourceInputs["disableEth3"] = args?.disableEth3;
            resourceInputs["disableModule"] = args?.disableModule;
            resourceInputs["eslConfig"] = args?.eslConfig;
            resourceInputs["ipConfig"] = args?.ipConfig;
            resourceInputs["lacpConfig"] = args?.lacpConfig;
            resourceInputs["led"] = args?.led;
            resourceInputs["mesh"] = args?.mesh;
            resourceInputs["name"] = args?.name;
            resourceInputs["ntpServers"] = args?.ntpServers;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["poePassthrough"] = args?.poePassthrough;
            resourceInputs["portConfig"] = args?.portConfig;
            resourceInputs["pwrConfig"] = args?.pwrConfig;
            resourceInputs["radioConfig"] = args?.radioConfig;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["uplinkPortConfig"] = args?.uplinkPortConfig;
            resourceInputs["usbConfig"] = args?.usbConfig;
            resourceInputs["vars"] = args?.vars;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceprofileAp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceprofileAp resources.
 */
export interface DeviceprofileApState {
    /**
     * Aeroscout AP settings
     */
    aeroscout?: pulumi.Input<inputs.org.DeviceprofileApAeroscout>;
    airista?: pulumi.Input<inputs.org.DeviceprofileApAirista>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.org.DeviceprofileApBleConfig>;
    /**
     * Whether to disable eth1 port
     */
    disableEth1?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth2 port
     */
    disableEth2?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth3 port
     */
    disableEth3?: pulumi.Input<boolean>;
    /**
     * Whether to disable module port
     */
    disableModule?: pulumi.Input<boolean>;
    eslConfig?: pulumi.Input<inputs.org.DeviceprofileApEslConfig>;
    /**
     * IP AP settings
     */
    ipConfig?: pulumi.Input<inputs.org.DeviceprofileApIpConfig>;
    lacpConfig?: pulumi.Input<inputs.org.DeviceprofileApLacpConfig>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.org.DeviceprofileApLed>;
    /**
     * Mesh AP settings
     */
    mesh?: pulumi.Input<inputs.org.DeviceprofileApMesh>;
    name?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    orgId?: pulumi.Input<string>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    poePassthrough?: pulumi.Input<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes precedence over switchConfig (deprecated)
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileApPortConfig>}>;
    /**
     * Power related configs
     */
    pwrConfig?: pulumi.Input<inputs.org.DeviceprofileApPwrConfig>;
    /**
     * Radio AP settings
     */
    radioConfig?: pulumi.Input<inputs.org.DeviceprofileApRadioConfig>;
    siteId?: pulumi.Input<string>;
    /**
     * Device Type. enum: `ap`
     */
    type?: pulumi.Input<string>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.org.DeviceprofileApUplinkPortConfig>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    usbConfig?: pulumi.Input<inputs.org.DeviceprofileApUsbConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DeviceprofileAp resource.
 */
export interface DeviceprofileApArgs {
    /**
     * Aeroscout AP settings
     */
    aeroscout?: pulumi.Input<inputs.org.DeviceprofileApAeroscout>;
    airista?: pulumi.Input<inputs.org.DeviceprofileApAirista>;
    /**
     * BLE AP settings
     */
    bleConfig?: pulumi.Input<inputs.org.DeviceprofileApBleConfig>;
    /**
     * Whether to disable eth1 port
     */
    disableEth1?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth2 port
     */
    disableEth2?: pulumi.Input<boolean>;
    /**
     * Whether to disable eth3 port
     */
    disableEth3?: pulumi.Input<boolean>;
    /**
     * Whether to disable module port
     */
    disableModule?: pulumi.Input<boolean>;
    eslConfig?: pulumi.Input<inputs.org.DeviceprofileApEslConfig>;
    /**
     * IP AP settings
     */
    ipConfig?: pulumi.Input<inputs.org.DeviceprofileApIpConfig>;
    lacpConfig?: pulumi.Input<inputs.org.DeviceprofileApLacpConfig>;
    /**
     * LED AP settings
     */
    led?: pulumi.Input<inputs.org.DeviceprofileApLed>;
    /**
     * Mesh AP settings
     */
    mesh?: pulumi.Input<inputs.org.DeviceprofileApMesh>;
    name?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    orgId: pulumi.Input<string>;
    /**
     * Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
     */
    poePassthrough?: pulumi.Input<boolean>;
    /**
     * eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes precedence over switchConfig (deprecated)
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileApPortConfig>}>;
    /**
     * Power related configs
     */
    pwrConfig?: pulumi.Input<inputs.org.DeviceprofileApPwrConfig>;
    /**
     * Radio AP settings
     */
    radioConfig?: pulumi.Input<inputs.org.DeviceprofileApRadioConfig>;
    siteId?: pulumi.Input<string>;
    /**
     * AP Uplink port configuration
     */
    uplinkPortConfig?: pulumi.Input<inputs.org.DeviceprofileApUplinkPortConfig>;
    /**
     * USB AP settings
     *   - Note: if native imagotag is enabled, BLE will be disabled automatically
     *   - Note: legacy, new config moved to ESL Config.
     */
    usbConfig?: pulumi.Input<inputs.org.DeviceprofileApUsbConfig>;
    /**
     * Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
     */
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
