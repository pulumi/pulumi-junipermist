// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This data source provides the list Org Psks.
 *
 * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
 * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
 * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
 * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const psksVip = junipermist.org.getPsks({
 *     orgId: "15fca2ac-b1a6-47cc-9953-cc6906281550",
 *     name: "psk_one",
 *     role: "vip",
 *     ssid: "psk_ssid",
 * });
 * ```
 */
export function getPsks(args: GetPsksArgs, opts?: pulumi.InvokeOptions): Promise<GetPsksResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("junipermist:org/getPsks:getPsks", {
        "name": args.name,
        "orgId": args.orgId,
        "role": args.role,
        "ssid": args.ssid,
    }, opts);
}

/**
 * A collection of arguments for invoking getPsks.
 */
export interface GetPsksArgs {
    name?: string;
    orgId: string;
    role?: string;
    ssid?: string;
}

/**
 * A collection of values returned by getPsks.
 */
export interface GetPsksResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly orgId: string;
    readonly orgPsks: outputs.org.GetPsksOrgPsk[];
    readonly role?: string;
    readonly ssid?: string;
}
/**
 * This data source provides the list Org Psks.
 *
 * A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\
 * It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\
 * Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\
 * Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const psksVip = junipermist.org.getPsks({
 *     orgId: "15fca2ac-b1a6-47cc-9953-cc6906281550",
 *     name: "psk_one",
 *     role: "vip",
 *     ssid: "psk_ssid",
 * });
 * ```
 */
export function getPsksOutput(args: GetPsksOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPsksResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("junipermist:org/getPsks:getPsks", {
        "name": args.name,
        "orgId": args.orgId,
        "role": args.role,
        "ssid": args.ssid,
    }, opts);
}

/**
 * A collection of arguments for invoking getPsks.
 */
export interface GetPsksOutputArgs {
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
}
