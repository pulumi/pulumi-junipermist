// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource is used to upload a WLAN Captive Web Portal background image.
 */
export class WlanPortalImage extends pulumi.CustomResource {
    /**
     * Get an existing WlanPortalImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WlanPortalImageState, opts?: pulumi.CustomResourceOptions): WlanPortalImage {
        return new WlanPortalImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/wlanPortalImage:WlanPortalImage';

    /**
     * Returns true if the given object is an instance of WlanPortalImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WlanPortalImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WlanPortalImage.__pulumiType;
    }

    /**
     * path to the background image file. File must be a `jpeg`, `jpg` or `png` image`
     */
    declare public readonly file: pulumi.Output<string>;
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Org WLAN ID
     */
    declare public readonly wlanId: pulumi.Output<string>;

    /**
     * Create a WlanPortalImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WlanPortalImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WlanPortalImageArgs | WlanPortalImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WlanPortalImageState | undefined;
            resourceInputs["file"] = state?.file;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["wlanId"] = state?.wlanId;
        } else {
            const args = argsOrState as WlanPortalImageArgs | undefined;
            if (args?.file === undefined && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if (args?.wlanId === undefined && !opts.urn) {
                throw new Error("Missing required property 'wlanId'");
            }
            resourceInputs["file"] = args?.file;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["wlanId"] = args?.wlanId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WlanPortalImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WlanPortalImage resources.
 */
export interface WlanPortalImageState {
    /**
     * path to the background image file. File must be a `jpeg`, `jpg` or `png` image`
     */
    file?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * Org WLAN ID
     */
    wlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WlanPortalImage resource.
 */
export interface WlanPortalImageArgs {
    /**
     * path to the background image file. File must be a `jpeg`, `jpg` or `png` image`
     */
    file: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    /**
     * Org WLAN ID
     */
    wlanId: pulumi.Input<string>;
}
