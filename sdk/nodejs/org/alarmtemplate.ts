// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages Alarm Templates.
 *
 * An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.
 *
 * Once created, the Alarm template must be assigned with the `alarmtemplateId` attribute to one of the following:
 * * the whole org with the `junipermist.org.base` resource
 * * one or multiple sites with the `junipermist.site.base` resource
 *
 * It is possible to use the `junipermist.getConstAlarms` data source to get a list of the available alarms
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_alarmtemplate` with:
 *
 * Org RF Template can be imported by specifying the org_id and the alarmtemplate_id
 *
 * ```sh
 * $ pulumi import junipermist:org/alarmtemplate:Alarmtemplate alarmtemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Alarmtemplate extends pulumi.CustomResource {
    /**
     * Get an existing Alarmtemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlarmtemplateState, opts?: pulumi.CustomResourceOptions): Alarmtemplate {
        return new Alarmtemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/alarmtemplate:Alarmtemplate';

    /**
     * Returns true if the given object is an instance of Alarmtemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alarmtemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alarmtemplate.__pulumiType;
    }

    /**
     * Delivery object to configure the alarm delivery
     */
    public readonly delivery!: pulumi.Output<outputs.org.AlarmtemplateDelivery>;
    /**
     * Some string to name the alarm template
     */
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    /**
     * Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).
     */
    public readonly rules!: pulumi.Output<{[key: string]: outputs.org.AlarmtemplateRules}>;

    /**
     * Create a Alarmtemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlarmtemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlarmtemplateArgs | AlarmtemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlarmtemplateState | undefined;
            resourceInputs["delivery"] = state ? state.delivery : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as AlarmtemplateArgs | undefined;
            if ((!args || args.delivery === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delivery'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["delivery"] = args ? args.delivery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alarmtemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alarmtemplate resources.
 */
export interface AlarmtemplateState {
    /**
     * Delivery object to configure the alarm delivery
     */
    delivery?: pulumi.Input<inputs.org.AlarmtemplateDelivery>;
    /**
     * Some string to name the alarm template
     */
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    /**
     * Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).
     */
    rules?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.AlarmtemplateRules>}>;
}

/**
 * The set of arguments for constructing a Alarmtemplate resource.
 */
export interface AlarmtemplateArgs {
    /**
     * Delivery object to configure the alarm delivery
     */
    delivery: pulumi.Input<inputs.org.AlarmtemplateDelivery>;
    /**
     * Some string to name the alarm template
     */
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    /**
     * Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `junipermist.getConstAlarms` data source).
     */
    rules: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.AlarmtemplateRules>}>;
}
