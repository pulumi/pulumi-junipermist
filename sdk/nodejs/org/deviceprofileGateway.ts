// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages the Gateway Device Profiles (HUB Profiles).
 *
 * A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.
 *
 * The Gateway Device Profile can be assigned to a gateway with the `junipermist.org.DeviceprofileAssign` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as junipermist from "@pulumi/juniper-mist";
 *
 * const deviceprofileGwOne = new junipermist.org.DeviceprofileGateway("deviceprofile_gw_one", {
 *     name: "deviceprofile_gw_one",
 *     orgId: terraformTest.id,
 *     portConfig: {
 *         "ge-0/0/3": {
 *             name: "FTTH",
 *             usage: "wan",
 *             aggregated: false,
 *             redundant: false,
 *             critical: false,
 *             wanType: "broadband",
 *             ipConfig: {
 *                 type: "static",
 *                 ip: "192.168.1.8",
 *                 netmask: "/24",
 *                 gateway: "192.168.1.1",
 *             },
 *             disableAutoneg: false,
 *             speed: "auto",
 *             duplex: "auto",
 *             wanSourceNat: {
 *                 disabled: false,
 *             },
 *             vpnPaths: {
 *                 "SSR_HUB_DC-MPLS.OrgOverlay": {
 *                     key: 0,
 *                     role: "spoke",
 *                     bfdProfile: "broadband",
 *                 },
 *             },
 *         },
 *         "ge-0/0/5": {
 *             usage: "lan",
 *             critical: false,
 *             aggregated: true,
 *             aeDisableLacp: false,
 *             aeLacpForceUp: true,
 *             aeIdx: "0",
 *             redundant: false,
 *             networks: [
 *                 "PRD-Core",
 *                 "PRD-Mgmt",
 *                 "PRD-Lab",
 *             ],
 *         },
 *     },
 *     ipConfigs: {
 *         "PRD-Core": {
 *             type: "static",
 *             ip: "10.3.100.9",
 *             netmask: "/24",
 *         },
 *         "PRD-Mgmt": {
 *             type: "static",
 *             ip: "10.3.172.1",
 *             netmask: "/24",
 *         },
 *         "PRD-Lab": {
 *             type: "static",
 *             ip: "10.3.171.1",
 *             netmask: "/24",
 *         },
 *     },
 *     servicePolicies: [{
 *         name: "Policy-14",
 *         tenants: ["PRD-Core"],
 *         services: ["any"],
 *         action: "allow",
 *         path_preference: "HUB",
 *         idp: {
 *             enabled: true,
 *             profile: "critical",
 *             alertOnly: false,
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_deviceprofile_gateway` with:
 *
 * Device Profile can be imported by specifying the org_id and the deviceprofile_id
 *
 * ```sh
 * $ pulumi import junipermist:org/deviceprofileGateway:DeviceprofileGateway deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class DeviceprofileGateway extends pulumi.CustomResource {
    /**
     * Get an existing DeviceprofileGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceprofileGatewayState, opts?: pulumi.CustomResourceOptions): DeviceprofileGateway {
        return new DeviceprofileGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/deviceprofileGateway:DeviceprofileGateway';

    /**
     * Returns true if the given object is an instance of DeviceprofileGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceprofileGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceprofileGateway.__pulumiType;
    }

    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    declare public readonly additionalConfigCmds: pulumi.Output<string[] | undefined>;
    declare public readonly bgpConfig: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayBgpConfig} | undefined>;
    declare public readonly dhcpdConfig: pulumi.Output<outputs.org.DeviceprofileGatewayDhcpdConfig | undefined>;
    declare public readonly dnsOverride: pulumi.Output<boolean | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    declare public readonly dnsServers: pulumi.Output<string[] | undefined>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    declare public readonly dnsSuffixes: pulumi.Output<string[] | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    declare public readonly extraRoutes: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayExtraRoutes} | undefined>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    declare public readonly extraRoutes6: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayExtraRoutes6} | undefined>;
    /**
     * Property key is the profile name
     */
    declare public readonly idpProfiles: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayIdpProfiles} | undefined>;
    /**
     * Property key is the network name
     */
    declare public readonly ipConfigs: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayIpConfigs} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networks: pulumi.Output<outputs.org.DeviceprofileGatewayNetwork[] | undefined>;
    declare public readonly ntpOverride: pulumi.Output<boolean | undefined>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    declare public readonly ntpServers: pulumi.Output<string[] | undefined>;
    /**
     * Out-of-band (vme/em0/fxp0) IP config
     */
    declare public readonly oobIpConfig: pulumi.Output<outputs.org.DeviceprofileGatewayOobIpConfig>;
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * Property key is the path name
     */
    declare public readonly pathPreferences: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayPathPreferences} | undefined>;
    /**
     * Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
     */
    declare public readonly portConfig: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayPortConfig} | undefined>;
    /**
     * Auto assigned if not set
     */
    declare public readonly routerId: pulumi.Output<string | undefined>;
    /**
     * Property key is the routing policy name
     */
    declare public readonly routingPolicies: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayRoutingPolicies} | undefined>;
    declare public readonly servicePolicies: pulumi.Output<outputs.org.DeviceprofileGatewayServicePolicy[] | undefined>;
    /**
     * additional CLI commands to append to the generated SSR config. **Note**: no check is done
     */
    declare public readonly ssrAdditionalConfigCmds: pulumi.Output<string[] | undefined>;
    /**
     * Property key is the tunnel name
     */
    declare public readonly tunnelConfigs: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayTunnelConfigs} | undefined>;
    declare public readonly tunnelProviderOptions: pulumi.Output<outputs.org.DeviceprofileGatewayTunnelProviderOptions | undefined>;
    /**
     * Device Type. enum: `gateway`
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public readonly vrfConfig: pulumi.Output<outputs.org.DeviceprofileGatewayVrfConfig | undefined>;
    /**
     * Property key is the network name
     */
    declare public readonly vrfInstances: pulumi.Output<{[key: string]: outputs.org.DeviceprofileGatewayVrfInstances} | undefined>;

    /**
     * Create a DeviceprofileGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceprofileGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceprofileGatewayArgs | DeviceprofileGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceprofileGatewayState | undefined;
            resourceInputs["additionalConfigCmds"] = state?.additionalConfigCmds;
            resourceInputs["bgpConfig"] = state?.bgpConfig;
            resourceInputs["dhcpdConfig"] = state?.dhcpdConfig;
            resourceInputs["dnsOverride"] = state?.dnsOverride;
            resourceInputs["dnsServers"] = state?.dnsServers;
            resourceInputs["dnsSuffixes"] = state?.dnsSuffixes;
            resourceInputs["extraRoutes"] = state?.extraRoutes;
            resourceInputs["extraRoutes6"] = state?.extraRoutes6;
            resourceInputs["idpProfiles"] = state?.idpProfiles;
            resourceInputs["ipConfigs"] = state?.ipConfigs;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["ntpOverride"] = state?.ntpOverride;
            resourceInputs["ntpServers"] = state?.ntpServers;
            resourceInputs["oobIpConfig"] = state?.oobIpConfig;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["pathPreferences"] = state?.pathPreferences;
            resourceInputs["portConfig"] = state?.portConfig;
            resourceInputs["routerId"] = state?.routerId;
            resourceInputs["routingPolicies"] = state?.routingPolicies;
            resourceInputs["servicePolicies"] = state?.servicePolicies;
            resourceInputs["ssrAdditionalConfigCmds"] = state?.ssrAdditionalConfigCmds;
            resourceInputs["tunnelConfigs"] = state?.tunnelConfigs;
            resourceInputs["tunnelProviderOptions"] = state?.tunnelProviderOptions;
            resourceInputs["type"] = state?.type;
            resourceInputs["vrfConfig"] = state?.vrfConfig;
            resourceInputs["vrfInstances"] = state?.vrfInstances;
        } else {
            const args = argsOrState as DeviceprofileGatewayArgs | undefined;
            if (args?.orgId === undefined && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["additionalConfigCmds"] = args?.additionalConfigCmds;
            resourceInputs["bgpConfig"] = args?.bgpConfig;
            resourceInputs["dhcpdConfig"] = args?.dhcpdConfig;
            resourceInputs["dnsOverride"] = args?.dnsOverride;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["dnsSuffixes"] = args?.dnsSuffixes;
            resourceInputs["extraRoutes"] = args?.extraRoutes;
            resourceInputs["extraRoutes6"] = args?.extraRoutes6;
            resourceInputs["idpProfiles"] = args?.idpProfiles;
            resourceInputs["ipConfigs"] = args?.ipConfigs;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["ntpOverride"] = args?.ntpOverride;
            resourceInputs["ntpServers"] = args?.ntpServers;
            resourceInputs["oobIpConfig"] = args?.oobIpConfig;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["pathPreferences"] = args?.pathPreferences;
            resourceInputs["portConfig"] = args?.portConfig;
            resourceInputs["routerId"] = args?.routerId;
            resourceInputs["routingPolicies"] = args?.routingPolicies;
            resourceInputs["servicePolicies"] = args?.servicePolicies;
            resourceInputs["ssrAdditionalConfigCmds"] = args?.ssrAdditionalConfigCmds;
            resourceInputs["tunnelConfigs"] = args?.tunnelConfigs;
            resourceInputs["tunnelProviderOptions"] = args?.tunnelProviderOptions;
            resourceInputs["vrfConfig"] = args?.vrfConfig;
            resourceInputs["vrfInstances"] = args?.vrfInstances;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceprofileGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceprofileGateway resources.
 */
export interface DeviceprofileGatewayState {
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    bgpConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayBgpConfig>}>;
    dhcpdConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayDhcpdConfig>;
    dnsOverride?: pulumi.Input<boolean>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayExtraRoutes6>}>;
    /**
     * Property key is the profile name
     */
    idpProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayIdpProfiles>}>;
    /**
     * Property key is the network name
     */
    ipConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayIpConfigs>}>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.org.DeviceprofileGatewayNetwork>[]>;
    ntpOverride?: pulumi.Input<boolean>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Out-of-band (vme/em0/fxp0) IP config
     */
    oobIpConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayOobIpConfig>;
    orgId?: pulumi.Input<string>;
    /**
     * Property key is the path name
     */
    pathPreferences?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayPathPreferences>}>;
    /**
     * Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayPortConfig>}>;
    /**
     * Auto assigned if not set
     */
    routerId?: pulumi.Input<string>;
    /**
     * Property key is the routing policy name
     */
    routingPolicies?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayRoutingPolicies>}>;
    servicePolicies?: pulumi.Input<pulumi.Input<inputs.org.DeviceprofileGatewayServicePolicy>[]>;
    /**
     * additional CLI commands to append to the generated SSR config. **Note**: no check is done
     */
    ssrAdditionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the tunnel name
     */
    tunnelConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayTunnelConfigs>}>;
    tunnelProviderOptions?: pulumi.Input<inputs.org.DeviceprofileGatewayTunnelProviderOptions>;
    /**
     * Device Type. enum: `gateway`
     */
    type?: pulumi.Input<string>;
    vrfConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayVrfInstances>}>;
}

/**
 * The set of arguments for constructing a DeviceprofileGateway resource.
 */
export interface DeviceprofileGatewayArgs {
    /**
     * additional CLI commands to append to the generated Junos config. **Note**: no check is done
     */
    additionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    bgpConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayBgpConfig>}>;
    dhcpdConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayDhcpdConfig>;
    dnsOverride?: pulumi.Input<boolean>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
     */
    dnsSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the destination CIDR (e.g. "10.0.0.0/8"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    extraRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayExtraRoutes>}>;
    /**
     * Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64"), the destination Network name or a variable (e.g. "{{myvar}}")
     */
    extraRoutes6?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayExtraRoutes6>}>;
    /**
     * Property key is the profile name
     */
    idpProfiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayIdpProfiles>}>;
    /**
     * Property key is the network name
     */
    ipConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayIpConfigs>}>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.org.DeviceprofileGatewayNetwork>[]>;
    ntpOverride?: pulumi.Input<boolean>;
    /**
     * List of NTP servers specific to this device. By default, those in Site Settings will be used
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Out-of-band (vme/em0/fxp0) IP config
     */
    oobIpConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayOobIpConfig>;
    orgId: pulumi.Input<string>;
    /**
     * Property key is the path name
     */
    pathPreferences?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayPathPreferences>}>;
    /**
     * Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
     */
    portConfig?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayPortConfig>}>;
    /**
     * Auto assigned if not set
     */
    routerId?: pulumi.Input<string>;
    /**
     * Property key is the routing policy name
     */
    routingPolicies?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayRoutingPolicies>}>;
    servicePolicies?: pulumi.Input<pulumi.Input<inputs.org.DeviceprofileGatewayServicePolicy>[]>;
    /**
     * additional CLI commands to append to the generated SSR config. **Note**: no check is done
     */
    ssrAdditionalConfigCmds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property key is the tunnel name
     */
    tunnelConfigs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayTunnelConfigs>}>;
    tunnelProviderOptions?: pulumi.Input<inputs.org.DeviceprofileGatewayTunnelProviderOptions>;
    vrfConfig?: pulumi.Input<inputs.org.DeviceprofileGatewayVrfConfig>;
    /**
     * Property key is the network name
     */
    vrfInstances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.org.DeviceprofileGatewayVrfInstances>}>;
}
