// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * This resource manages WAN Assurance Idp Profiles.
 *
 * An IDP Profile is a configuration setting that defines the behavior and actions of an intrusion detection and prevention (IDP) system. It specifies how the idp system should detect and respond to potential security threats or attacks on a network.
 *
 * The profile includes rules and policies that determine which types of traffic or attacks should be monitored, what actions should be taken when a threat is detected, and any exceptions or exclusions for specific destinations or attack types.
 *
 * ## Import
 *
 * Using `pulumi import`, import `mist_org_idpprofile` with:
 *
 * IDP Profile can be imported by specifying the org_id and the idpprofile_id
 *
 * ```sh
 * $ pulumi import junipermist:org/idpprofile:Idpprofile idpprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
 * ```
 */
export class Idpprofile extends pulumi.CustomResource {
    /**
     * Get an existing Idpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpprofileState, opts?: pulumi.CustomResourceOptions): Idpprofile {
        return new Idpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'junipermist:org/idpprofile:Idpprofile';

    /**
     * Returns true if the given object is an instance of Idpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Idpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Idpprofile.__pulumiType;
    }

    /**
     * enum: `critical`, `standard`, `strict`
     */
    public readonly baseProfile!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly orgId!: pulumi.Output<string>;
    public readonly overwrites!: pulumi.Output<outputs.org.IdpprofileOverwrite[] | undefined>;

    /**
     * Create a Idpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpprofileArgs | IdpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpprofileState | undefined;
            resourceInputs["baseProfile"] = state ? state.baseProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["overwrites"] = state ? state.overwrites : undefined;
        } else {
            const args = argsOrState as IdpprofileArgs | undefined;
            if ((!args || args.baseProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseProfile'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["baseProfile"] = args ? args.baseProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["overwrites"] = args ? args.overwrites : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Idpprofile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Idpprofile resources.
 */
export interface IdpprofileState {
    /**
     * enum: `critical`, `standard`, `strict`
     */
    baseProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    overwrites?: pulumi.Input<pulumi.Input<inputs.org.IdpprofileOverwrite>[]>;
}

/**
 * The set of arguments for constructing a Idpprofile resource.
 */
export interface IdpprofileArgs {
    /**
     * enum: `critical`, `standard`, `strict`
     */
    baseProfile: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId: pulumi.Input<string>;
    overwrites?: pulumi.Input<pulumi.Input<inputs.org.IdpprofileOverwrite>[]>;
}
