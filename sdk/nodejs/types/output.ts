// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetConstAlarmsConstAlarm {
    /**
     * Description of the alarm type
     */
    display: string;
    /**
     * Group to which the alarm belongs
     */
    group: string;
    /**
     * Key name of the alarm type
     */
    key: string;
    /**
     * Severity of the alarm
     */
    severity: string;
}

export interface GetConstAppCategoriesConstAppCategory {
    /**
     * Description of the app category
     */
    display: string;
    filters: outputs.GetConstAppCategoriesConstAppCategoryFilters;
    /**
     * List of other App Categories contained by this one
     */
    includes: string[];
    /**
     * Key name of the app category
     */
    key: string;
}

export interface GetConstAppCategoriesConstAppCategoryFilters {
    srxes: string[];
    ssrs: string[];
}

export interface GetConstAppSubCategoriesConstAppSubCategory {
    /**
     * Description of the app subcategory
     */
    display: string;
    /**
     * Key name of the app subcategory
     */
    key: string;
    /**
     * Type of traffic (QoS) of the app subcategory
     */
    trafficType: string;
}

export interface GetConstApplicationsConstApplication {
    appId: boolean;
    appImageUrl: string;
    appProbe: boolean;
    category: string;
    group: string;
    key: string;
    name: string;
    signatureBased: boolean;
    ssrAppId: boolean;
}

export interface GetConstCountriesConstCountry {
    /**
     * country code, in two-character
     */
    alpha2: string;
    certified: boolean;
    name: string;
    /**
     * country code, ISO 3166-1 numeric
     */
    numeric: number;
}

export interface GetConstTrafficTypesConstTrafficType {
    display: string;
    dscp: number;
    failoverPolicy: string;
    maxJitter: number;
    maxLatency: number;
    maxLoss: number;
    name: string;
    trafficClass: string;
}

export interface GetConstWebhooksConstWebhook {
    /**
     * can be used in org webhooks, optional
     */
    forOrg: boolean;
    /**
     * supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search
     */
    hasDeliveryResults: boolean;
    /**
     * internal topic (not selectable in site/org webhooks)
     */
    internal: boolean;
    /**
     * webhook topic name
     */
    key: string;
}

export interface GetSitesSite {
    /**
     * full address of the site
     */
    address: string;
    /**
     * Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id
     */
    alarmtemplateId: string;
    /**
     * AP Template ID, used by APs
     */
    aptemplateId: string;
    /**
     * country code for the site (for AP config generation), in two-character
     */
    countryCode: string;
    createdTime: number;
    /**
     * Gateway Template ID, used by gateways
     */
    gatewaytemplateId: string;
    id: string;
    latlng: outputs.GetSitesSiteLatlng;
    modifiedTime: number;
    name: string;
    /**
     * Network Template ID, this takes precedence over Site Settings
     */
    networktemplateId: string;
    /**
     * optional, any notes about the site
     */
    notes: string;
    orgId: string;
    /**
     * RF Template ID, this takes precedence over Site Settings
     */
    rftemplateId: string;
    /**
     * SecPolicy ID
     */
    secpolicyId: string;
    /**
     * sitegroups this site belongs to
     */
    sitegroupIds: string[];
    /**
     * Site Template ID
     */
    sitetemplateId: string;
    /**
     * Timezone the site is at
     */
    timezone: string;
}

export interface GetSitesSiteLatlng {
    lat: number;
    lng: number;
}

export interface UpgradeDeviceFwupdate {
    progress: number;
    /**
     * enum: `inprogress`, `failed`, `upgraded`
     */
    status: string;
    statusId: number;
    timestamp: number;
    willRetry: boolean;
}

export namespace device {
    export interface ApAeroscout {
        /**
         * Whether to enable aeroscout config
         */
        enabled: boolean;
        /**
         * Required if enabled, aeroscout server host
         */
        host?: string;
        /**
         * Whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
         */
        locateConnected: boolean;
    }

    export interface ApBleConfig {
        /**
         * Whether Mist beacons is enabled
         */
        beaconEnabled: boolean;
        /**
         * Required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
         */
        beaconRate: number;
        /**
         * enum: `custom`, `default`
         */
        beaconRateMode: string;
        /**
         * List of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
         */
        beamDisableds?: number[];
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send custom packet
         */
        customBlePacketEnabled: boolean;
        /**
         * The custom frame to be sent out in this beacon. The frame must be a hexstring
         */
        customBlePacketFrame: string;
        /**
         * Frequency (msec) of data emitted by custom ble beacon
         */
        customBlePacketFreqMsec: number;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUidAdvPower: number;
        eddystoneUidBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
         */
        eddystoneUidEnabled: boolean;
        /**
         * Frequency (msec) of data emmit by Eddystone-UID beacon
         */
        eddystoneUidFreqMsec: number;
        /**
         * Eddystone-UID instance for the device
         */
        eddystoneUidInstance: string;
        /**
         * Eddystone-UID namespace
         */
        eddystoneUidNamespace: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUrlAdvPower: number;
        eddystoneUrlBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
         */
        eddystoneUrlEnabled: boolean;
        /**
         * Frequency (msec) of data emit by Eddystone-UID beacon
         */
        eddystoneUrlFreqMsec: number;
        /**
         * URL pointed by Eddystone-URL beacon
         */
        eddystoneUrlUrl: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        ibeaconAdvPower: number;
        ibeaconBeams: string;
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
         */
        ibeaconEnabled: boolean;
        /**
         * Frequency (msec) of data emmit for iBeacon
         */
        ibeaconFreqMsec: number;
        /**
         * Major number for iBeacon
         */
        ibeaconMajor: number;
        /**
         * Minor number for iBeacon
         */
        ibeaconMinor: number;
        /**
         * Optional, if not specified, the same UUID as the beacon will be used
         */
        ibeaconUuid: string;
        /**
         * Required if `powerMode`==`custom`; else use `powerMode` as default
         */
        power: number;
        /**
         * enum: `custom`, `default`
         */
        powerMode: string;
    }

    export interface ApCentrak {
        enabled: boolean;
    }

    export interface ApClientBridge {
        auth?: outputs.device.ApClientBridgeAuth;
        /**
         * When acted as client bridge:
         *   * only 5G radio can be used
         *   * will not serve as AP on any radios
         */
        enabled: boolean;
        ssid?: string;
    }

    export interface ApClientBridgeAuth {
        psk?: string;
        /**
         * wpa2-AES/CCMPp is assumed when `type`==`psk`. enum: `open`, `psk`
         */
        type: string;
    }

    export interface ApEslConfig {
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        cacert?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        channel?: number;
        /**
         * usb_config is ignored if eslConfig enabled
         */
        enabled: boolean;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        host?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        port?: number;
        /**
         * note: bleConfig will be ingored if eslConfig is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
         */
        type?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        verifyCert?: boolean;
        /**
         * Only if `type`==`solum` or `type`==`hanshow`
         */
        vlanId: number;
    }

    export interface ApIpConfig {
        /**
         * If `type`==`static`
         */
        dns: string[];
        /**
         * Required if `type`==`static`
         */
        dnsSuffixes: string[];
        /**
         * Required if `type`==`static`
         */
        gateway?: string;
        gateway6?: string;
        /**
         * Required if `type`==`static`
         */
        ip?: string;
        ip6?: string;
        mtu?: number;
        /**
         * Required if `type`==`static`
         */
        netmask?: string;
        netmask6?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * enum: `autoconf`, `dhcp`, `disabled`, `static`
         */
        type6: string;
        /**
         * Management VLAN id, default is 1 (untagged)
         */
        vlanId: number;
    }

    export interface ApLed {
        brightness: number;
        enabled: boolean;
    }

    export interface ApMesh {
        /**
         * Whether mesh is enabled on this AP
         */
        enabled: boolean;
        /**
         * Mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
         */
        group?: number;
        /**
         * enum: `base`, `remote`
         */
        role?: string;
    }

    export interface ApPwrConfig {
        /**
         * Additional power to request during negotiating with PSE over PoE, in mW
         */
        base: number;
        /**
         * Whether to enable power out to peripheral, meanwhile will reduce power to Wi-Fi (only for AP45 at power mode)
         */
        preferUsbOverWifi: boolean;
    }

    export interface ApRadioConfig {
        allowRrmDisable: boolean;
        /**
         * Antenna gain for 2.4G - for models with external antenna only
         */
        antGain24?: number;
        /**
         * Antenna gain for 5G - for models with external antenna only
         */
        antGain5?: number;
        /**
         * Antenna gain for 6G - for models with external antenna only
         */
        antGain6?: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * Radio Band AP settings
         */
        band24?: outputs.device.ApRadioConfigBand24;
        /**
         * enum: `24`, `5`, `6`, `auto`
         */
        band24Usage?: string;
        /**
         * Radio Band AP settings
         */
        band5?: outputs.device.ApRadioConfigBand5;
        /**
         * Radio Band AP settings
         */
        band5On24Radio?: outputs.device.ApRadioConfigBand5On24Radio;
        /**
         * Radio Band AP settings
         */
        band6?: outputs.device.ApRadioConfigBand6;
        /**
         * To make an outdoor operate indoor. For an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
         */
        indoorUse: boolean;
        /**
         * Whether scanning radio is enabled
         */
        scanningEnabled?: boolean;
    }

    export interface ApRadioConfigBand24 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 2.4GHz band. enum: `20`, `40`
         */
        bandwidth: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface ApRadioConfigBand5 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface ApRadioConfigBand5On24Radio {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface ApRadioConfigBand6 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
         */
        bandwidth: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
        /**
         * For 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed, and we'll fall back to Low Power Indoor if AFC failed
         */
        standardPower: boolean;
    }

    export interface ApUplinkPortConfig {
        /**
         * Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
         */
        dot1x: boolean;
        /**
         * By default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
         */
        keepWlansUpIfDown: boolean;
    }

    export interface ApUsbConfig {
        /**
         * Only if `type`==`imagotag`
         */
        cacert?: string;
        /**
         * Only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
         */
        channel?: number;
        /**
         * Whether to enable any usb config
         */
        enabled?: boolean;
        /**
         * Only if `type`==`imagotag`
         */
        host?: string;
        /**
         * Only if `type`==`imagotag`
         */
        port: number;
        /**
         * usb config type. enum: `hanshow`, `imagotag`, `solum`
         */
        type?: string;
        /**
         * Only if `type`==`imagotag`, whether to turn on SSL verification
         */
        verifyCert?: boolean;
        /**
         * Only if `type`==`solum` or `type`==`hanshow`
         */
        vlanId: number;
    }

    export interface BaseLatlng {
        lat: number;
        lng: number;
    }

    export interface GatewayBgpConfig {
        authKey?: string;
        /**
         * When bfdMultiplier is configured alone. Default:
         *   * 1000 if `type`==`external`
         *   * 350 `type`==`internal`
         */
        bfdMinimumInterval: number;
        /**
         * When bfdMinimumIntervalIsConfigured alone
         */
        bfdMultiplier: number;
        /**
         * BFD provides faster path failure detection and is enabled by default
         */
        disableBfd: boolean;
        export?: string;
        /**
         * Default export policies if no per-neighbor policies defined
         */
        exportPolicy?: string;
        /**
         * By default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
         */
        extendedV4Nexthop?: boolean;
        /**
         * `0` means disable
         */
        gracefulRestartTime: number;
        holdTime: number;
        import?: string;
        /**
         * Default import policies if no per-neighbor policies defined
         */
        importPolicy?: string;
        localAs?: number;
        neighborAs?: number;
        /**
         * If per-neighbor as is desired. Property key is the neighbor address
         */
        neighbors?: {[key: string]: outputs.device.GatewayBgpConfigNeighbors};
        /**
         * If `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
         */
        networks: string[];
        /**
         * By default, we'll re-advertise all learned BGP routers toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * If `type`==`tunnel`
         */
        tunnelName?: string;
        /**
         * enum: `external`, `internal`
         */
        type?: string;
        /**
         * network name. enum: `lan`, `tunnel`, `vpn`, `wan`
         */
        via: string;
        vpnName?: string;
        /**
         * If `via`==`wan`
         */
        wanName?: string;
    }

    export interface GatewayBgpConfigNeighbors {
        /**
         * If true, the BGP session to this neighbor will be administratively disabled/shutdown
         */
        disabled: boolean;
        exportPolicy?: string;
        holdTime: number;
        importPolicy?: string;
        /**
         * Assuming BGP neighbor is directly connected
         */
        multihopTtl?: number;
        neighborAs?: number;
    }

    export interface GatewayClusterNode {
        /**
         * Gateway MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
         */
        mac: string;
    }

    export interface GatewayDhcpdConfig {
        /**
         * Property key is the network name
         */
        config?: {[key: string]: outputs.device.GatewayDhcpdConfigConfig};
        /**
         * If set to `false`, disable the DHCP server
         */
        enabled: boolean;
    }

    export interface GatewayDhcpdConfigConfig {
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsServers: string[];
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsSuffixes: string[];
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
         */
        fixedBindings?: {[key: string]: outputs.device.GatewayDhcpdConfigConfigFixedBindings};
        /**
         * If `type`==`local` - optional, `ip` will be used if not provided
         */
        gateway?: string;
        /**
         * If `type`==`local`
         */
        ipEnd?: string;
        /**
         * If `type6`==`local`
         */
        ipEnd6?: string;
        /**
         * If `type`==`local`
         */
        ipStart?: string;
        /**
         * If `type6`==`local`
         */
        ipStart6?: string;
        /**
         * In seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
         */
        leaseTime: number;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the DHCP option number
         */
        options?: {[key: string]: outputs.device.GatewayDhcpdConfigConfigOptions};
        /**
         * `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
         * should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
         */
        serverIdOverride: boolean;
        /**
         * If `type`==`relay`
         */
        servers: string[];
        /**
         * If `type6`==`relay`
         */
        servers6s: string[];
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type: string;
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type6: string;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is <enterprise number>:<sub option code>, with
         *   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
         *   * sub option code: 1-255, sub-option code
         */
        vendorEncapsulated?: {[key: string]: outputs.device.GatewayDhcpdConfigConfigVendorEncapsulated};
    }

    export interface GatewayDhcpdConfigConfigFixedBindings {
        ip: string;
        name?: string;
    }

    export interface GatewayDhcpdConfigConfigOptions {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface GatewayDhcpdConfigConfigVendorEncapsulated {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface GatewayExtraRoutes {
        via: string;
    }

    export interface GatewayExtraRoutes6 {
        via: string;
    }

    export interface GatewayIdpProfiles {
        /**
         * enum: `critical`, `standard`, `strict`
         */
        baseProfile?: string;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id?: string;
        name?: string;
        orgId?: string;
        overwrites?: outputs.device.GatewayIdpProfilesOverwrite[];
    }

    export interface GatewayIdpProfilesOverwrite {
        /**
         * enum:
         *   * alert (default)
         *   * drop: siliently dropping packets
         *   * close: notify client/server to close connection
         */
        action: string;
        matching?: outputs.device.GatewayIdpProfilesOverwriteMatching;
        name?: string;
    }

    export interface GatewayIdpProfilesOverwriteMatching {
        attackNames?: string[];
        dstSubnets?: string[];
        severities?: string[];
    }

    export interface GatewayIpConfigs {
        ip: string;
        netmask: string;
        /**
         * Optional list of secondary IPs in CIDR format
         */
        secondaryIps: string[];
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface GatewayNetwork {
        /**
         * Whether to disallow Mist Devices in the network
         */
        disallowMistServices: boolean;
        gateway?: string;
        gateway6?: string;
        internalAccess?: outputs.device.GatewayNetworkInternalAccess;
        /**
         * Whether this network has direct internet access
         */
        internetAccess?: outputs.device.GatewayNetworkInternetAccess;
        /**
         * Whether to allow clients in the network to talk to each other
         */
        isolation?: boolean;
        /**
         * Whether to enable multicast support (only PIM-sparse mode is supported)
         */
        multicast?: outputs.device.GatewayNetworkMulticast;
        name: string;
        /**
         * For a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
         */
        routedForNetworks?: string[];
        subnet: string;
        subnet6?: string;
        /**
         * Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
         */
        tenants?: {[key: string]: outputs.device.GatewayNetworkTenants};
        vlanId?: string;
        /**
         * Property key is the VPN name. Whether this network can be accessed from vpn
         */
        vpnAccess?: {[key: string]: outputs.device.GatewayNetworkVpnAccess};
    }

    export interface GatewayNetworkInternalAccess {
        enabled?: boolean;
    }

    export interface GatewayNetworkInternetAccess {
        createSimpleServicePolicy: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.device.GatewayNetworkInternetAccessDestinationNat};
        enabled?: boolean;
        /**
         * By default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
         */
        restricted: boolean;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat?: {[key: string]: outputs.device.GatewayNetworkInternetAccessStaticNat};
    }

    export interface GatewayNetworkInternetAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        /**
         * The Destination NAT destination IP Address. Must be a Port (i.e. "443") or a Variable (i.e. "{{myvar}}")
         */
        port?: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity
         */
        wanName?: string;
    }

    export interface GatewayNetworkInternetAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. "{{myvar}}")
         */
        wanName?: string;
    }

    export interface GatewayNetworkMulticast {
        /**
         * If the network will only be the soruce of the multicast traffic, IGMP can be disabled
         */
        disableIgmp: boolean;
        enabled: boolean;
        /**
         * Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example "225.1.0.3/32")
         */
        groups?: {[key: string]: outputs.device.GatewayNetworkMulticastGroups};
    }

    export interface GatewayNetworkMulticastGroups {
        /**
         * RP (rendezvous point) IP Address
         */
        rpIp?: string;
    }

    export interface GatewayNetworkTenants {
        addresses?: string[];
    }

    export interface GatewayNetworkVpnAccess {
        /**
         * If `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
         */
        advertisedSubnet?: string;
        /**
         * Whether to allow ping from vpn into this routed network
         */
        allowPing?: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.device.GatewayNetworkVpnAccessDestinationNat};
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
         */
        natPool?: string;
        /**
         * toward LAN-side BGP peers
         */
        noReadvertiseToLanBgp: boolean;
        /**
         * toward LAN-side OSPF peers
         */
        noReadvertiseToLanOspf: boolean;
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        noReadvertiseToOverlay?: boolean;
        /**
         * By default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs
         */
        otherVrfs: string[];
        /**
         * Whether this network is routable
         */
        routed?: boolean;
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
         */
        sourceNat: outputs.device.GatewayNetworkVpnAccessSourceNat;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat: {[key: string]: outputs.device.GatewayNetworkVpnAccessStaticNat};
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        summarizedSubnet?: string;
        /**
         * toward LAN-side BGP peers
         */
        summarizedSubnetToLanBgp?: string;
        /**
         * toward LAN-side OSPF peers
         */
        summarizedSubnetToLanOspf?: string;
    }

    export interface GatewayNetworkVpnAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        port?: string;
    }

    export interface GatewayNetworkVpnAccessSourceNat {
        externalIp?: string;
    }

    export interface GatewayNetworkVpnAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
    }

    export interface GatewayOobIpConfig {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        /**
         * If `type`==`static`
         */
        ip?: string;
        /**
         * If `type`==`static`
         */
        netmask?: string;
        /**
         * For HA Cluster, node1 can have different IP Config
         */
        node1: outputs.device.GatewayOobIpConfigNode1;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface GatewayOobIpConfigNode1 {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`
         */
        netmask?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * Whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface GatewayPathPreferences {
        paths?: outputs.device.GatewayPathPreferencesPath[];
        /**
         * enum: `ecmp`, `ordered`, `weighted`
         */
        strategy: string;
    }

    export interface GatewayPathPreferencesPath {
        cost?: number;
        /**
         * For SSR Only. `true`, if this specific path is undesired
         */
        disabled?: boolean;
        /**
         * Only if `type`==`local`, if a different gateway is desired
         */
        gatewayIp?: string;
        /**
         * Only if `type`==`vpn`, if this vpn path can be used for internet
         */
        internetAccess?: boolean;
        /**
         * Required when 
         *   * `type`==`vpn`: the name of the VPN Path to use 
         *   * `type`==`wan`: the name of the WAN interface to use
         */
        name?: string;
        /**
         * Required when `type`==`local`
         */
        networks: string[];
        /**
         * If `type`==`local`, if destination IP is to be replaced
         */
        targetIps: string[];
        /**
         * enum: `local`, `tunnel`, `vpn`, `wan`
         */
        type?: string;
        /**
         * Optional if `type`==`vpn`
         */
        wanName?: string;
    }

    export interface GatewayPortConfig {
        /**
         * If `aggregated`==`true`. To disable LCP support for the AE interface
         */
        aeDisableLacp: boolean;
        /**
         * If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
         */
        aeIdx?: string;
        /**
         * For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
         */
        aeLacpForceUp: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm, set it to true
         */
        critical: boolean;
        /**
         * Interface Description. Can be a variable (i.e. "{{myvar}}")
         */
        description?: string;
        disableAutoneg: boolean;
        /**
         * Port admin up (true) / down (false)
         */
        disabled: boolean;
        /**
         * if `wanType`==`dsl`. enum: `adsl`, `vdsl`
         */
        dslType: string;
        /**
         * If `wanType`==`dsl`, 16 bit int
         */
        dslVci: number;
        /**
         * If `wanType`==`dsl`, 8 bit int
         */
        dslVpi: number;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Junos IP Config
         */
        ipConfig?: outputs.device.GatewayPortConfigIpConfig;
        /**
         * If `wanType`==`lte`
         */
        lteApn?: string;
        /**
         * if `wanType`==`lte`. enum: `chap`, `none`, `pap`
         */
        lteAuth: string;
        lteBackup?: boolean;
        /**
         * If `wanType`==`lte`
         */
        ltePassword?: string;
        /**
         * If `wanType`==`lte`
         */
        lteUsername?: string;
        mtu?: number;
        /**
         * Name that we'll use to derive config
         */
        name?: string;
        /**
         * if `usage`==`lan`, name of the `junipermist.org.Network` resource
         */
        networks: string[];
        /**
         * For Q-in-Q
         */
        outerVlanId?: number;
        poeDisabled: boolean;
        /**
         * Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
         */
        portNetwork?: string;
        /**
         * Whether to preserve dscp when sending traffic over VPN (SSR-only)
         */
        preserveDscp: boolean;
        /**
         * If HA mode
         */
        redundant: boolean;
        /**
         * If HA mode
         */
        rethIdx?: number;
        /**
         * If HA mode
         */
        rethNode?: string;
        /**
         * SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         */
        rethNodes: string[];
        speed: string;
        /**
         * When SSR is running as VM, this is required on certain hosting platforms
         */
        ssrNoVirtualMac: boolean;
        /**
         * For SSR only
         */
        svrPortRange: string;
        trafficShaping?: outputs.device.GatewayPortConfigTrafficShaping;
        /**
         * port usage name. enum: `haControl`, `haData`, `lan`, `wan`
         */
        usage: string;
        vlanId?: string;
        /**
         * Property key is the VPN name
         */
        vpnPaths?: {[key: string]: outputs.device.GatewayPortConfigVpnPaths};
        /**
         * Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
         */
        wanArpPolicer: string;
        /**
         * Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
         */
        wanExtIp?: string;
        /**
         * Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g "100.100.100.0/24")
         */
        wanExtraRoutes?: {[key: string]: outputs.device.GatewayPortConfigWanExtraRoutes};
        /**
         * Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         */
        wanNetworks: string[];
        /**
         * Only if `usage`==`wan`
         */
        wanProbeOverride?: outputs.device.GatewayPortConfigWanProbeOverride;
        /**
         * Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
         */
        wanSourceNat?: outputs.device.GatewayPortConfigWanSourceNat;
        /**
         * Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
         */
        wanType: string;
    }

    export interface GatewayPortConfigIpConfig {
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dns?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dnsSuffixes?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. "192.168.1.1") or a Variable (i.e. "{{myvar}}")
         */
        gateway?: string;
        /**
         * Interface IP Address (i.e. "192.168.1.8") or a Variable (i.e. "{{myvar}}")
         */
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. "/24") or a Variable (i.e. "{{myvar}}")
         */
        netmask?: string;
        /**
         * Optional, the network to be used for mgmt
         */
        network?: string;
        /**
         * If `type`==`pppoe`
         */
        poserPassword?: string;
        /**
         * if `type`==`pppoe`. enum: `chap`, `none`, `pap`
         */
        pppoeAuth: string;
        /**
         * If `type`==`pppoe`
         */
        pppoeUsername?: string;
        /**
         * enum: `dhcp`, `pppoe`, `static`
         */
        type: string;
    }

    export interface GatewayPortConfigTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface GatewayPortConfigVpnPaths {
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `broadband`, `lte`
         */
        bfdProfile: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. Whether to use tunnel mode. SSR only
         */
        bfdUseTunnelMode: boolean;
        /**
         * Only if the VPN `type`==`mesh`
         */
        linkName?: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
         */
        preference?: number;
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `hub`, `spoke`
         */
        role: string;
        trafficShaping?: outputs.device.GatewayPortConfigVpnPathsTrafficShaping;
    }

    export interface GatewayPortConfigVpnPathsTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface GatewayPortConfigWanExtraRoutes {
        via?: string;
    }

    export interface GatewayPortConfigWanProbeOverride {
        ips?: string[];
        /**
         * enum: `broadband`, `lte`
         */
        probeProfile: string;
    }

    export interface GatewayPortConfigWanSourceNat {
        /**
         * Or to disable the source-nat
         */
        disabled: boolean;
        /**
         * If alternative natPool is desired
         */
        natPool?: string;
    }

    export interface GatewayPortMirroring {
        portMirror?: outputs.device.GatewayPortMirroringPortMirror;
    }

    export interface GatewayPortMirroringPortMirror {
        familyType?: string;
        ingressPortIds?: string[];
        outputPortId?: string;
        rate?: number;
        runLength?: number;
    }

    export interface GatewayRoutingPolicies {
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        terms?: outputs.device.GatewayRoutingPoliciesTerm[];
    }

    export interface GatewayRoutingPoliciesTerm {
        /**
         * When used as import policy
         */
        action?: outputs.device.GatewayRoutingPoliciesTermAction;
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        matching?: outputs.device.GatewayRoutingPoliciesTermMatching;
    }

    export interface GatewayRoutingPoliciesTermAction {
        accept?: boolean;
        addCommunities?: string[];
        /**
         * For SSR, hub decides how VRF routes are leaked on spoke
         */
        addTargetVrfs?: string[];
        /**
         * route aggregation
         */
        aggregates?: string[];
        /**
         * When used as export policy, optional
         */
        communities?: string[];
        /**
         * When used as export policy, optional. To exclude certain AS
         */
        excludeAsPaths?: string[];
        excludeCommunities?: string[];
        /**
         * When used as export policy, optional
         */
        exportCommunitites?: string[];
        /**
         * Optional, for an import policy, localPreference can be changed
         */
        localPreference?: string;
        /**
         * When used as export policy, optional. By default, the local AS will be prepended, to change it
         */
        prependAsPaths?: string[];
    }

    export interface GatewayRoutingPoliciesTermMatching {
        /**
         * takes regular expression
         */
        asPaths?: string[];
        communities?: string[];
        networks?: string[];
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        prefixes?: string[];
        /**
         * `direct`, `bgp`, `osp`, ...
         */
        protocols?: string[];
        routeExists?: outputs.device.GatewayRoutingPoliciesTermMatchingRouteExists;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn)
         */
        vpnNeighborMacs?: string[];
        vpnPathSla?: outputs.device.GatewayRoutingPoliciesTermMatchingVpnPathSla;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn). ordered-
         */
        vpnPaths?: string[];
    }

    export interface GatewayRoutingPoliciesTermMatchingRouteExists {
        route?: string;
        /**
         * Name of the vrf instance, it can also be the name of the VPN or wan if they
         */
        vrfName: string;
    }

    export interface GatewayRoutingPoliciesTermMatchingVpnPathSla {
        maxJitter?: number;
        maxLatency?: number;
        maxLoss?: number;
    }

    export interface GatewayServicePolicy {
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`
         */
        action?: string;
        /**
         * For SRX-only
         */
        antivirus?: outputs.device.GatewayServicePolicyAntivirus;
        /**
         * For SRX Only
         */
        appqoe?: outputs.device.GatewayServicePolicyAppqoe;
        ewfs?: outputs.device.GatewayServicePolicyEwf[];
        idp?: outputs.device.GatewayServicePolicyIdp;
        /**
         * access within the same VRF
         */
        localRouting?: boolean;
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy name)
         */
        name?: string;
        /**
         * By default, we derive all paths available and use them. Optionally, you can customize by using `pathPreference`
         */
        pathPreference?: string;
        /**
         * Used to link servicepolicy defined at org level and overwrite some attributes
         */
        servicepolicyId?: string;
        /**
         * Required when `servicepolicyId` is not defined. List of Applications / Desctinations
         */
        services: string[];
        /**
         * For SRX-only
         */
        sslProxy?: outputs.device.GatewayServicePolicySslProxy;
        /**
         * Required when `servicepolicyId` is not defined. List of Networks / Users
         */
        tenants: string[];
    }

    export interface GatewayServicePolicyAntivirus {
        /**
         * org-level AV Profile can be used, this takes precendence over 'profile'
         */
        avprofileId?: string;
        enabled: boolean;
        /**
         * Default / noftp / httponly / or keys from av_profiles
         */
        profile?: string;
    }

    export interface GatewayServicePolicyAppqoe {
        enabled: boolean;
    }

    export interface GatewayServicePolicyEwf {
        alertOnly?: boolean;
        blockMessage?: string;
        enabled: boolean;
        /**
         * enum: `critical`, `standard`, `strict`
         */
        profile: string;
    }

    export interface GatewayServicePolicyIdp {
        alertOnly: boolean;
        enabled: boolean;
        /**
         * org_level IDP Profile can be used, this takes precedence over `profile`
         */
        idpprofileId?: string;
        /**
         * enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles
         */
        profile: string;
    }

    export interface GatewayServicePolicySslProxy {
        /**
         * enum: `medium`, `strong`, `weak`
         */
        ciphersCategory: string;
        enabled: boolean;
    }

    export interface GatewayTunnelConfigs {
        autoProvision?: outputs.device.GatewayTunnelConfigsAutoProvision;
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ikeLifetime?: number;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`
         */
        ikeMode: string;
        /**
         * If `provider`==`custom-ipsec`
         */
        ikeProposals?: outputs.device.GatewayTunnelConfigsIkeProposal[];
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ipsecLifetime?: number;
        /**
         * Only if  `provider`==`custom-ipsec`
         */
        ipsecProposals?: outputs.device.GatewayTunnelConfigsIpsecProposal[];
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        localId?: string;
        /**
         * Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`
         */
        mode: string;
        /**
         * If `provider`==`custom-ipsec`, networks reachable via this tunnel
         */
        networks: string[];
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        primary?: outputs.device.GatewayTunnelConfigsPrimary;
        /**
         * Only if `provider`==`custom-ipsec`
         */
        probe?: outputs.device.GatewayTunnelConfigsProbe;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`
         */
        protocol?: string;
        /**
         * Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
         */
        provider?: string;
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        psk?: string;
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        secondary?: outputs.device.GatewayTunnelConfigsSecondary;
        /**
         * Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`
         */
        version: string;
    }

    export interface GatewayTunnelConfigsAutoProvision {
        enable?: boolean;
        /**
         * API override for POP selection
         */
        latlng?: outputs.device.GatewayTunnelConfigsAutoProvisionLatlng;
        primary?: outputs.device.GatewayTunnelConfigsAutoProvisionPrimary;
        /**
         * enum: `jse-ipsec`, `zscaler-ipsec`
         */
        provider: string;
        /**
         * API override for POP selection
         */
        region?: string;
        secondary?: outputs.device.GatewayTunnelConfigsAutoProvisionSecondary;
    }

    export interface GatewayTunnelConfigsAutoProvisionLatlng {
        lat: number;
        lng: number;
    }

    export interface GatewayTunnelConfigsAutoProvisionPrimary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface GatewayTunnelConfigsAutoProvisionSecondary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface GatewayTunnelConfigsIkeProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface GatewayTunnelConfigsIpsecProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * Only if `provider`==`custom-ipsec`. enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface GatewayTunnelConfigsPrimary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface GatewayTunnelConfigsProbe {
        /**
         * How often to trigger the probe
         */
        interval?: number;
        /**
         * Number of consecutive misses before declaring the tunnel down
         */
        threshold?: number;
        /**
         * Time within which to complete the connectivity check
         */
        timeout?: number;
        /**
         * enum: `http`, `icmp`
         */
        type: string;
    }

    export interface GatewayTunnelConfigsSecondary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface GatewayTunnelProviderOptions {
        /**
         * For jse-ipsec, this allows provisioning of adequate resource on JSE. Make sure adequate licenses are added
         */
        jse?: outputs.device.GatewayTunnelProviderOptionsJse;
        /**
         * For zscaler-ipsec and zscaler-gre
         */
        zscaler?: outputs.device.GatewayTunnelProviderOptionsZscaler;
    }

    export interface GatewayTunnelProviderOptionsJse {
        numUsers?: number;
        /**
         * JSE Organization name
         */
        orgName?: string;
    }

    export interface GatewayTunnelProviderOptionsZscaler {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to enforce user authentication
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * `sub-locations` can be used for specific uses cases to define different configuration based on the user network
         */
        subLocations?: outputs.device.GatewayTunnelProviderOptionsZscalerSubLocation[];
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
        /**
         * Location uses proxy chaining to forward traffic
         */
        xffForwardEnabled?: boolean;
    }

    export interface GatewayTunnelProviderOptionsZscalerSubLocation {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to authenticate users
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * Network name
         */
        name?: string;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
    }

    export interface GatewayVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface GatewayVrfInstances {
        networks?: string[];
    }

    export interface GetApStatsDeviceApStat {
        autoPlacement: outputs.device.GetApStatsDeviceApStatAutoPlacement;
        autoUpgradeStat: outputs.device.GetApStatsDeviceApStatAutoUpgradeStat;
        bleStat: outputs.device.GetApStatsDeviceApStatBleStat;
        certExpiry: number;
        configReverted: boolean;
        cpuSystem: number;
        cpuUtil: number;
        createdTime: number;
        deviceprofileId: string;
        /**
         * device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
         */
        envStat: outputs.device.GetApStatsDeviceApStatEnvStat;
        eslStat: outputs.device.GetApStatsDeviceApStatEslStat;
        extIp: string;
        fwupdate: outputs.device.GetApStatsDeviceApStatFwupdate;
        hwRev: string;
        id: string;
        inactiveWiredVlans: number[];
        iotStat: {[key: string]: outputs.device.GetApStatsDeviceApStatIotStat};
        ip: string;
        /**
         * IP AP settings
         */
        ipConfig: outputs.device.GetApStatsDeviceApStatIpConfig;
        ipStat: outputs.device.GetApStatsDeviceApStatIpStat;
        /**
         * l2tp tunnel status (key is the wxtunnel*id)
         */
        l2tpStat: {[key: string]: outputs.device.GetApStatsDeviceApStatL2tpStat};
        /**
         * last seen timestamp
         */
        lastSeen: number;
        /**
         * last trouble code of switch
         */
        lastTrouble: outputs.device.GetApStatsDeviceApStatLastTrouble;
        /**
         * LED AP settings
         */
        led: outputs.device.GetApStatsDeviceApStatLed;
        /**
         * LLDP Stat (neighbor information, power negotiations)
         */
        lldpStat: outputs.device.GetApStatsDeviceApStatLldpStat;
        locating: boolean;
        /**
         * whether this AP is considered locked (placement / orientation has been vetted)
         */
        locked: boolean;
        /**
         * device mac
         */
        mac: string;
        mapId: string;
        memUsedKb: number;
        /**
         * Property key is the mesh downlink id (e.g `00000000-0000-0000-1000-5c5b35000010`)
         */
        meshDownlinks: {[key: string]: outputs.device.GetApStatsDeviceApStatMeshDownlinks};
        meshUplink: outputs.device.GetApStatsDeviceApStatMeshUplink;
        /**
         * device model
         */
        model: string;
        modifiedTime: number;
        mount: string;
        name: string;
        notes: string;
        /**
         * how many wireless clients are currently connected
         */
        numClients: number;
        orgId: string;
        /**
         * Property key is the port name (e.g. `eth0`)
         */
        portStat: {[key: string]: outputs.device.GetApStatsDeviceApStatPortStat};
        /**
         * in mW, surplus if positive or deficit if negative
         */
        powerBudget: number;
        /**
         * whether insufficient power
         */
        powerConstrained: boolean;
        /**
         * constrained mode
         */
        powerOpmode: string;
        /**
         * DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
         */
        powerSrc: string;
        radioStat: outputs.device.GetApStatsDeviceApStatRadioStat;
        rxBps: number;
        rxBytes: number;
        rxPkts: number;
        /**
         * serial
         */
        serial: string;
        siteId: string;
        status: string;
        switchRedundancy: outputs.device.GetApStatsDeviceApStatSwitchRedundancy;
        txBps: number;
        txBytes: number;
        txPkts: number;
        /**
         * how long, in seconds, has the device been up (or rebooted)
         */
        uptime: number;
        usbStat: outputs.device.GetApStatsDeviceApStatUsbStat;
        version: string;
        x: number;
        y: number;
    }

    export interface GetApStatsDeviceApStatAutoPlacement {
        /**
         * Additional information about auto placements AP data
         */
        info: outputs.device.GetApStatsDeviceApStatAutoPlacementInfo;
        /**
         * Flag to represent if AP is recommended as an anchor by auto placement service
         */
        recommendedAnchor: boolean;
        /**
         * Basic Placement Status
         */
        status: string;
        /**
         * Additional info about placement status
         */
        statusDetail: string;
        /**
         * Flag to represent if autoPlacement values are currently utilized
         */
        useAutoPlacement: boolean;
        /**
         * X Autoplaced Position in pixels
         */
        x: number;
        /**
         * X Autoplaced Position in meters
         */
        xM: number;
        /**
         * Y Autoplaced Position in pixels
         */
        y: number;
        /**
         * X Autoplaced Position in meters
         */
        yM: number;
    }

    export interface GetApStatsDeviceApStatAutoPlacementInfo {
        /**
         * All APs sharing a given cluster number can be placed relative to each other
         */
        clusterNumber: number;
        /**
         * The orientation of an AP
         */
        orientationStats: number;
        /**
         * Coordinates representing a circle where the AP is most likely exists in the event of an inaccurate placement result
         */
        probabilitySurface: outputs.device.GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurface;
    }

    export interface GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurface {
        /**
         * The radius representing placement uncertainty, measured in pixels
         */
        radius: number;
        /**
         * The radius representing placement uncertainty, measured in meters
         */
        radiusM: number;
        /**
         * Y-coordinate of the potential placement’s center, measured in pixels
         */
        x: number;
    }

    export interface GetApStatsDeviceApStatAutoUpgradeStat {
        lastcheck: number;
    }

    export interface GetApStatsDeviceApStatBleStat {
        beaconEnabled: boolean;
        beaconRate: number;
        eddystoneUidEnabled: boolean;
        eddystoneUidFreqMsec: number;
        eddystoneUidInstance: string;
        eddystoneUidNamespace: string;
        eddystoneUrlEnabled: boolean;
        /**
         * Frequency (msec) of data emmit by Eddystone-UID beacon
         */
        eddystoneUrlFreqMsec: number;
        eddystoneUrlUrl: string;
        ibeaconEnabled: boolean;
        ibeaconFreqMsec: number;
        ibeaconMajor: number;
        ibeaconMinor: number;
        ibeaconUuid: string;
        major: number;
        minors: number[];
        power: number;
        rxBytes: number;
        rxPkts: number;
        txBytes: number;
        txPkts: number;
        /**
         * resets due to tx hung
         */
        txResets: number;
        uuid: string;
    }

    export interface GetApStatsDeviceApStatEnvStat {
        accelX: number;
        accelY: number;
        accelZ: number;
        ambientTemp: number;
        attitude: number;
        cpuTemp: number;
        humidity: number;
        magneX: number;
        magneY: number;
        magneZ: number;
        pressure: number;
        vcoreVoltage: number;
    }

    export interface GetApStatsDeviceApStatEslStat {
        channel: number;
        connected: boolean;
        type: string;
        up: boolean;
    }

    export interface GetApStatsDeviceApStatFwupdate {
        progress: number;
        status: string;
        statusId: number;
        timestamp: number;
        willRetry: boolean;
    }

    export interface GetApStatsDeviceApStatIotStat {
        value: number;
    }

    export interface GetApStatsDeviceApStatIpConfig {
        /**
         * if `type`==`static`
         */
        dns: string[];
        /**
         * required if `type`==`static`
         */
        dnsSuffixes: string[];
        /**
         * required if `type`==`static`
         */
        gateway: string;
        gateway6: string;
        /**
         * required if `type`==`static`
         */
        ip: string;
        ip6: string;
        mtu: number;
        /**
         * required if `type`==`static`
         */
        netmask: string;
        netmask6: string;
        type: string;
        type6: string;
        /**
         * management vlan id, default is 1 (untagged)
         */
        vlanId: number;
    }

    export interface GetApStatsDeviceApStatIpStat {
        dhcpServer: string;
        dns: string[];
        dnsSuffixes: string[];
        gateway: string;
        gateway6: string;
        ip: string;
        ip6: string;
        ips: {[key: string]: string};
        netmask: string;
        netmask6: string;
    }

    export interface GetApStatsDeviceApStatL2tpStat {
        /**
         * list of sessions
         */
        sessions: outputs.device.GetApStatsDeviceApStatL2tpStatSession[];
        state: string;
        /**
         * uptime
         */
        uptime: number;
        /**
         * WxlanTunnel ID
         */
        wxtunnelId: string;
    }

    export interface GetApStatsDeviceApStatL2tpStatSession {
        /**
         * remote sessions id (dynamically unless Tunnel is said to be static)
         */
        localSid: number;
        /**
         * WxlanTunnel Remote ID (user-configured)
         */
        remoteId: string;
        /**
         * remote sessions id (dynamically unless Tunnel is said to be static)
         */
        remoteSid: number;
        state: string;
    }

    export interface GetApStatsDeviceApStatLastTrouble {
        /**
         * Code definitions list at /api/v1/consts/ap*led*status
         */
        code: string;
        timestamp: number;
    }

    export interface GetApStatsDeviceApStatLed {
        brightness: number;
        enabled: boolean;
    }

    export interface GetApStatsDeviceApStatLldpStat {
        chassisId: string;
        /**
         * whether it support LLDP-MED
         */
        lldpMedSupported: boolean;
        /**
         * switch’s management address (if advertised), can be IPv4, IPv6, or MAC
         */
        mgmtAddr: string;
        mgmtAddrs: string[];
        /**
         * ge-0/0/4
         */
        portDesc: string;
        portId: string;
        /**
         * in mW, provided/allocated by PSE
         */
        powerAllocated: number;
        /**
         * in mW, total power needed by PD
         */
        powerDraw: number;
        /**
         * number of negotiations, if it keeps increasing, we don’t have a stable power
         */
        powerRequestCount: number;
        /**
         * in mW, the current power requested by PD
         */
        powerRequested: number;
        /**
         * description provided by switch
         */
        systemDesc: string;
        /**
         * name of the switch
         */
        systemName: string;
    }

    export interface GetApStatsDeviceApStatMeshDownlinks {
        band: string;
        channel: number;
        idleTime: number;
        lastSeen: number;
        proto: string;
        rssi: number;
        rxBps: number;
        rxBytes: number;
        rxPackets: number;
        rxRate: number;
        rxRetries: number;
        siteId: string;
        snr: number;
        txBps: number;
        txBytes: number;
        txPackets: number;
        txRate: number;
        txRetries: number;
    }

    export interface GetApStatsDeviceApStatMeshUplink {
        band: string;
        channel: number;
        idleTime: number;
        lastSeen: number;
        proto: string;
        rssi: number;
        rxBps: number;
        rxBytes: number;
        rxPackets: number;
        rxRate: number;
        rxRetries: number;
        siteId: string;
        snr: number;
        txBps: number;
        txBytes: number;
        txPackets: number;
        txRate: number;
        txRetries: number;
        uplinkApId: string;
    }

    export interface GetApStatsDeviceApStatPortStat {
        fullDuplex: boolean;
        rxBytes: number;
        rxErrors: number;
        rxPkts: number;
        speed: number;
        txBytes: number;
        txPkts: number;
        up: boolean;
    }

    export interface GetApStatsDeviceApStatRadioStat {
        /**
         * radio stat
         */
        band24: outputs.device.GetApStatsDeviceApStatRadioStatBand24;
        /**
         * radio stat
         */
        band5: outputs.device.GetApStatsDeviceApStatRadioStatBand5;
        /**
         * radio stat
         */
        band6: outputs.device.GetApStatsDeviceApStatRadioStatBand6;
    }

    export interface GetApStatsDeviceApStatRadioStatBand24 {
        /**
         * channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
         */
        bandwidth: number;
        /**
         * current channel the radio is running on
         */
        channel: number;
        /**
         * Use dynamic chaining for downlink
         */
        dynamicChainingEnalbed: boolean;
        /**
         * radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
         */
        mac: string;
        noiseFloor: number;
        numClients: number;
        /**
         * transmit power (in dBm)
         */
        power: number;
        rxBytes: number;
        rxPkts: number;
        txBytes: number;
        txPkts: number;
        usage: string;
        /**
         * all utilization in percentage
         */
        utilAll: number;
        /**
         * reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
         */
        utilNonWifi: number;
        /**
         * reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
         */
        utilRxInBss: number;
        /**
         * reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
         */
        utilRxOtherBss: number;
        /**
         * transmission utilization in percentage
         */
        utilTx: number;
        /**
         * reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
         */
        utilUndecodableWifi: number;
        /**
         * reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
         */
        utilUnknownWifi: number;
    }

    export interface GetApStatsDeviceApStatRadioStatBand5 {
        /**
         * channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
         */
        bandwidth: number;
        /**
         * current channel the radio is running on
         */
        channel: number;
        /**
         * Use dynamic chaining for downlink
         */
        dynamicChainingEnalbed: boolean;
        /**
         * radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
         */
        mac: string;
        noiseFloor: number;
        numClients: number;
        /**
         * transmit power (in dBm)
         */
        power: number;
        rxBytes: number;
        rxPkts: number;
        txBytes: number;
        txPkts: number;
        usage: string;
        /**
         * all utilization in percentage
         */
        utilAll: number;
        /**
         * reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
         */
        utilNonWifi: number;
        /**
         * reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
         */
        utilRxInBss: number;
        /**
         * reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
         */
        utilRxOtherBss: number;
        /**
         * transmission utilization in percentage
         */
        utilTx: number;
        /**
         * reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
         */
        utilUndecodableWifi: number;
        /**
         * reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
         */
        utilUnknownWifi: number;
    }

    export interface GetApStatsDeviceApStatRadioStatBand6 {
        /**
         * channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
         */
        bandwidth: number;
        /**
         * current channel the radio is running on
         */
        channel: number;
        /**
         * Use dynamic chaining for downlink
         */
        dynamicChainingEnalbed: boolean;
        /**
         * radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
         */
        mac: string;
        noiseFloor: number;
        numClients: number;
        /**
         * transmit power (in dBm)
         */
        power: number;
        rxBytes: number;
        rxPkts: number;
        txBytes: number;
        txPkts: number;
        usage: string;
        /**
         * all utilization in percentage
         */
        utilAll: number;
        /**
         * reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
         */
        utilNonWifi: number;
        /**
         * reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
         */
        utilRxInBss: number;
        /**
         * reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
         */
        utilRxOtherBss: number;
        /**
         * transmission utilization in percentage
         */
        utilTx: number;
        /**
         * reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
         */
        utilUndecodableWifi: number;
        /**
         * reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
         */
        utilUnknownWifi: number;
    }

    export interface GetApStatsDeviceApStatSwitchRedundancy {
        numRedundantAps: number;
    }

    export interface GetApStatsDeviceApStatUsbStat {
        channel: number;
        connected: boolean;
        lastActivity: number;
        type: string;
        up: boolean;
    }

    export interface GetGatewayStatsDeviceGatewayStat {
        apRedundancy: outputs.device.GetGatewayStatsDeviceGatewayStatApRedundancy;
        arpTableStats: outputs.device.GetGatewayStatsDeviceGatewayStatArpTableStats;
        certExpiry: number;
        clusterConfig: outputs.device.GetGatewayStatsDeviceGatewayStatClusterConfig;
        clusterStat: outputs.device.GetGatewayStatsDeviceGatewayStatClusterStat;
        conductorName: string;
        configStatus: string;
        cpu2Stat: outputs.device.GetGatewayStatsDeviceGatewayStatCpu2Stat;
        cpuStat: outputs.device.GetGatewayStatsDeviceGatewayStatCpuStat;
        createdTime: number;
        deviceprofileId: string;
        /**
         * Property key is the network name
         */
        dhcpd2Stat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatDhcpd2Stat};
        /**
         * Property key is the network name
         */
        dhcpdStat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatDhcpdStat};
        /**
         * IP address
         */
        extIp: string;
        fwupdate: outputs.device.GetGatewayStatsDeviceGatewayStatFwupdate;
        hasPcap: boolean;
        /**
         * hostname reported by the device
         */
        hostname: string;
        /**
         * serial
         */
        id: string;
        /**
         * Property key is the interface name
         */
        if2Stat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatIf2Stat};
        /**
         * Property key is the interface name
         */
        ifStat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatIfStat};
        /**
         * IP address
         */
        ip: string;
        ip2Stat: outputs.device.GetGatewayStatsDeviceGatewayStatIp2Stat;
        ipStat: outputs.device.GetGatewayStatsDeviceGatewayStatIpStat;
        isHa: boolean;
        /**
         * last seen timestamp
         */
        lastSeen: number;
        /**
         * device mac
         */
        mac: string;
        /**
         * serial
         */
        mapId: string;
        /**
         * memory usage stat (for virtual chassis, memory usage of master RE)
         */
        memory2Stat: outputs.device.GetGatewayStatsDeviceGatewayStatMemory2Stat;
        /**
         * memory usage stat (for virtual chassis, memory usage of master RE)
         */
        memoryStat: outputs.device.GetGatewayStatsDeviceGatewayStatMemoryStat;
        /**
         * device model
         */
        model: string;
        modifiedTime: number;
        module2Stats: outputs.device.GetGatewayStatsDeviceGatewayStatModule2Stat[];
        moduleStats: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStat[];
        /**
         * device name if configured
         */
        name: string;
        nodeName: string;
        /**
         * serial
         */
        orgId: string;
        routeSummaryStats: outputs.device.GetGatewayStatsDeviceGatewayStatRouteSummaryStats;
        /**
         * device name if configured
         */
        routerName: string;
        /**
         * serial
         */
        serial: string;
        service2Stat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatService2Stat};
        serviceStat: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatServiceStat};
        serviceStatus: outputs.device.GetGatewayStatsDeviceGatewayStatServiceStatus;
        /**
         * serial
         */
        siteId: string;
        spu2Stats: outputs.device.GetGatewayStatsDeviceGatewayStatSpu2Stat[];
        spuStats: outputs.device.GetGatewayStatsDeviceGatewayStatSpuStat[];
        status: string;
        uptime: number;
        version: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatApRedundancy {
        /**
         * Property key is the node id
         */
        modules: {[key: string]: outputs.device.GetGatewayStatsDeviceGatewayStatApRedundancyModules};
        numAps: number;
        numApsWithSwitchRedundancy: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatApRedundancyModules {
        numAps: number;
        numApsWithSwitchRedundancy: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatArpTableStats {
        arpTableCount: number;
        maxEntriesSupported: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterConfig {
        configuration: string;
        controlLinkInfo: outputs.device.GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo;
        ethernetConnections: outputs.device.GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection[];
        fabricLinkInfo: outputs.device.GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo;
        lastStatusChangeReason: string;
        operational: string;
        primaryNodeHealth: string;
        redundancyGroupInformations: outputs.device.GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation[];
        secondaryNodeHealth: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfo {
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnection {
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfo {
        dataPlaneNotifiedStatus: string;
        interfaces: string[];
        internalStatus: string;
        state: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformation {
        id: number;
        monitoringFailure: string;
        threshold: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatClusterStat {
        state: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatCpu2Stat {
        /**
         * Percentage of CPU time that is idle
         */
        idle: number;
        /**
         * Percentage of CPU time being used by interrupts
         */
        interrupt: number;
        /**
         * Load averages for the last 1, 5, and 15 minutes
         */
        loadAvgs: number[];
        /**
         * Percentage of CPU time being used by system processes
         */
        system: number;
        /**
         * Percentage of CPU time being used by user processe
         */
        user: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatCpuStat {
        /**
         * Percentage of CPU time that is idle
         */
        idle: number;
        /**
         * Percentage of CPU time being used by interrupts
         */
        interrupt: number;
        /**
         * Load averages for the last 1, 5, and 15 minutes
         */
        loadAvgs: number[];
        /**
         * Percentage of CPU time being used by system processes
         */
        system: number;
        /**
         * Percentage of CPU time being used by user processe
         */
        user: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatDhcpd2Stat {
        numIps: number;
        numLeased: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatDhcpdStat {
        numIps: number;
        numLeased: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatFwupdate {
        progress: number;
        status: string;
        statusId: number;
        timestamp: number;
        willRetry: boolean;
    }

    export interface GetGatewayStatsDeviceGatewayStatIf2Stat {
        addressMode: string;
        ips: string[];
        natAddresses: string[];
        networkName: string;
        portId: string;
        portUsage: string;
        redundancyState: string;
        rxBytes: number;
        rxPkts: number;
        servpInfo: outputs.device.GetGatewayStatsDeviceGatewayStatIf2StatServpInfo;
        txBytes: number;
        txPkts: number;
        up: boolean;
        vlan: number;
        wanName: string;
        wanType: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatIf2StatServpInfo {
        asn: string;
        city: string;
        countryCode: string;
        latitude: number;
        longitude: number;
        org: string;
        regionCode: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatIfStat {
        addressMode: string;
        ips: string[];
        natAddresses: string[];
        networkName: string;
        portId: string;
        portUsage: string;
        redundancyState: string;
        rxBytes: number;
        rxPkts: number;
        servpInfo: outputs.device.GetGatewayStatsDeviceGatewayStatIfStatServpInfo;
        txBytes: number;
        txPkts: number;
        up: boolean;
        vlan: number;
        wanName: string;
        wanType: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatIfStatServpInfo {
        asn: string;
        city: string;
        countryCode: string;
        latitude: number;
        longitude: number;
        org: string;
        regionCode: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatIp2Stat {
        dhcpServer: string;
        dns: string[];
        dnsSuffixes: string[];
        gateway: string;
        gateway6: string;
        ip: string;
        ip6: string;
        ips: {[key: string]: string};
        netmask: string;
        netmask6: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatIpStat {
        dhcpServer: string;
        dns: string[];
        dnsSuffixes: string[];
        gateway: string;
        gateway6: string;
        ip: string;
        ip6: string;
        ips: {[key: string]: string};
        netmask: string;
        netmask6: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatMemory2Stat {
        usage: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatMemoryStat {
        usage: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2Stat {
        backupVersion: string;
        biosVersion: string;
        cpldVersion: string;
        /**
         * used to report all error states the device node is running into.
         * An error should always have `type` and `since` fields, and could have some other fields specific to that type.
         */
        errors: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatError[];
        fans: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatFan[];
        fpgaVersion: string;
        lastSeen: number;
        model: string;
        opticsCpldVersion: string;
        pendingVersion: string;
        pics: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatPic[];
        poe: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatPoe;
        poeVersion: string;
        powerCpldVersion: string;
        psuses: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatPsus[];
        reFpgaVersion: string;
        recoveryVersion: string;
        serial: string;
        status: string;
        temperatures: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatTemperature[];
        tmcFpgaVersion: string;
        ubootVersion: string;
        uptime: number;
        vcLinks: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatVcLink[];
        vcMode: string;
        /**
         * master / backup / linecard
         */
        vcRole: string;
        vcState: string;
        version: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatError {
        feature: string;
        minimumVersion: string;
        reason: string;
        since: number;
        type: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatFan {
        airflow: string;
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatPic {
        index: number;
        modelNumber: string;
        portGroups: outputs.device.GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroup[];
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroup {
        count: number;
        type: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatPoe {
        maxPower: number;
        powerDraw: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatPsus {
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatTemperature {
        celsius: number;
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModule2StatVcLink {
        neighborModuleIdx: number;
        neighborPortId: string;
        portId: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStat {
        backupVersion: string;
        biosVersion: string;
        cpldVersion: string;
        /**
         * used to report all error states the device node is running into.
         * An error should always have `type` and `since` fields, and could have some other fields specific to that type.
         */
        errors: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatError[];
        fans: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatFan[];
        fpgaVersion: string;
        lastSeen: number;
        model: string;
        opticsCpldVersion: string;
        pendingVersion: string;
        pics: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatPic[];
        poe: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatPoe;
        poeVersion: string;
        powerCpldVersion: string;
        psuses: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatPsus[];
        reFpgaVersion: string;
        recoveryVersion: string;
        serial: string;
        status: string;
        temperatures: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatTemperature[];
        tmcFpgaVersion: string;
        ubootVersion: string;
        uptime: number;
        vcLinks: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatVcLink[];
        vcMode: string;
        /**
         * master / backup / linecard
         */
        vcRole: string;
        vcState: string;
        version: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatError {
        feature: string;
        minimumVersion: string;
        reason: string;
        since: number;
        type: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatFan {
        airflow: string;
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatPic {
        index: number;
        modelNumber: string;
        portGroups: outputs.device.GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroup[];
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroup {
        count: number;
        type: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatPoe {
        maxPower: number;
        powerDraw: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatPsus {
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatTemperature {
        celsius: number;
        name: string;
        status: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatModuleStatVcLink {
        neighborModuleIdx: number;
        neighborPortId: string;
        portId: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatRouteSummaryStats {
        fibRoutes: number;
        maxUnicastRoutesSupported: number;
        ribRoutes: number;
        totalRoutes: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatService2Stat {
        ashVersion: string;
        ciaVersion: string;
        emberVersion: string;
        ipsecClientVersion: string;
        mistAgentVersion: string;
        packageVersion: string;
        testingToolsVersion: string;
        wheeljackVersion: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatServiceStat {
        ashVersion: string;
        ciaVersion: string;
        emberVersion: string;
        ipsecClientVersion: string;
        mistAgentVersion: string;
        packageVersion: string;
        testingToolsVersion: string;
        wheeljackVersion: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatServiceStatus {
        appidInstallResult: string;
        appidInstallTimestamp: string;
        appidStatus: string;
        appidVersion: number;
        ewfStatus: string;
        idpInstallResult: string;
        idpInstallTimestamp: string;
        idpPolicy: string;
        idpStatus: string;
        idpUpdateTimestamp: string;
    }

    export interface GetGatewayStatsDeviceGatewayStatSpu2Stat {
        spuCpu: number;
        spuCurrentSession: number;
        spuMaxSession: number;
        spuMemory: number;
        spuPendingSession: number;
        spuValidSession: number;
    }

    export interface GetGatewayStatsDeviceGatewayStatSpuStat {
        spuCpu: number;
        spuCurrentSession: number;
        spuMaxSession: number;
        spuMemory: number;
        spuPendingSession: number;
        spuValidSession: number;
    }

    export interface GetSwitchStatsDeviceSwitchStat {
        apRedundancy: outputs.device.GetSwitchStatsDeviceSwitchStatApRedundancy;
        arpTableStats: outputs.device.GetSwitchStatsDeviceSwitchStatArpTableStats;
        certExpiry: number;
        clients: outputs.device.GetSwitchStatsDeviceSwitchStatClient[];
        clientsStats: outputs.device.GetSwitchStatsDeviceSwitchStatClientsStats;
        configStatus: string;
        cpuStat: outputs.device.GetSwitchStatsDeviceSwitchStatCpuStat;
        createdTime: number;
        deviceprofileId: string;
        /**
         * Property key is the network name
         */
        dhcpdStat: {[key: string]: outputs.device.GetSwitchStatsDeviceSwitchStatDhcpdStat};
        evpntopoId: string;
        fwVersionsOutofsync: boolean;
        fwupdate: outputs.device.GetSwitchStatsDeviceSwitchStatFwupdate;
        /**
         * whether the switch supports packet capture
         */
        hasPcap: boolean;
        /**
         * hostname reported by the device
         */
        hostname: string;
        /**
         * device hardware revision number
         */
        hwRev: string;
        id: string;
        /**
         * Property key is the interface name
         */
        ifStat: {[key: string]: outputs.device.GetSwitchStatsDeviceSwitchStatIfStat};
        ip: string;
        ipStat: outputs.device.GetSwitchStatsDeviceSwitchStatIpStat;
        lastSeen: number;
        /**
         * last trouble code of switch
         */
        lastTrouble: outputs.device.GetSwitchStatsDeviceSwitchStatLastTrouble;
        mac: string;
        macTableStats: outputs.device.GetSwitchStatsDeviceSwitchStatMacTableStats;
        mapId: string;
        /**
         * memory usage stat (for virtual chassis, memory usage of master RE)
         */
        memoryStat: outputs.device.GetSwitchStatsDeviceSwitchStatMemoryStat;
        model: string;
        modifiedTime: number;
        moduleStats: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStat[];
        /**
         * device name if configured
         */
        name: string;
        orgId: string;
        routeSummaryStats: outputs.device.GetSwitchStatsDeviceSwitchStatRouteSummaryStats;
        serial: string;
        serviceStat: {[key: string]: outputs.device.GetSwitchStatsDeviceSwitchStatServiceStat};
        siteId: string;
        status: string;
        uptime: number;
        vcMac: string;
        vcSetupInfo: outputs.device.GetSwitchStatsDeviceSwitchStatVcSetupInfo;
        version: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatApRedundancy {
        /**
         * for a VC / stacked switches.
         */
        modules: {[key: string]: outputs.device.GetSwitchStatsDeviceSwitchStatApRedundancyModules};
        numAps: number;
        numApsWithSwitchRedundancy: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatApRedundancyModules {
        numAps: number;
        numApsWithSwitchRedundancy: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatArpTableStats {
        arpTableCount: number;
        maxEntriesSupported: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatClient {
        deviceMac: string;
        hostname: string;
        mac: string;
        portId: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatClientsStats {
        total: outputs.device.GetSwitchStatsDeviceSwitchStatClientsStatsTotal;
    }

    export interface GetSwitchStatsDeviceSwitchStatClientsStatsTotal {
        numAps: number[];
        numWiredClients: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatCpuStat {
        /**
         * Percentage of CPU time that is idle
         */
        idle: number;
        /**
         * Percentage of CPU time being used by interrupts
         */
        interrupt: number;
        /**
         * Load averages for the last 1, 5, and 15 minutes
         */
        loadAvgs: number[];
        /**
         * Percentage of CPU time being used by system processes
         */
        system: number;
        /**
         * Percentage of CPU time being used by user processe
         */
        user: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatDhcpdStat {
        numIps: number;
        numLeased: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatFwupdate {
        progress: number;
        status: string;
        statusId: number;
        timestamp: number;
        willRetry: boolean;
    }

    export interface GetSwitchStatsDeviceSwitchStatIfStat {
        addressMode: string;
        ips: string[];
        natAddresses: string[];
        networkName: string;
        portId: string;
        portUsage: string;
        redundancyState: string;
        rxBytes: number;
        rxPkts: number;
        servpInfo: outputs.device.GetSwitchStatsDeviceSwitchStatIfStatServpInfo;
        txBytes: number;
        txPkts: number;
        up: boolean;
        vlan: number;
        wanName: string;
        wanType: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatIfStatServpInfo {
        asn: string;
        city: string;
        countryCode: string;
        latitude: number;
        longitude: number;
        org: string;
        regionCode: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatIpStat {
        dhcpServer: string;
        dns: string[];
        dnsSuffixes: string[];
        gateway: string;
        gateway6: string;
        ip: string;
        ip6: string;
        ips: {[key: string]: string};
        netmask: string;
        netmask6: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatLastTrouble {
        /**
         * Code definitions list at /api/v1/consts/ap*led*status
         */
        code: string;
        timestamp: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatMacTableStats {
        macTableCount: number;
        maxMacEntriesSupported: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatMemoryStat {
        usage: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStat {
        backupVersion: string;
        biosVersion: string;
        cpldVersion: string;
        /**
         * used to report all error states the device node is running into.
         * An error should always have `type` and `since` fields, and could have some other fields specific to that type.
         */
        errors: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatError[];
        fans: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatFan[];
        fpcIdx: number;
        fpgaVersion: string;
        lastSeen: number;
        model: string;
        opticsCpldVersion: string;
        pendingVersion: string;
        pics: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatPic[];
        poe: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatPoe;
        poeVersion: string;
        powerCpldVersion: string;
        psuses: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatPsus[];
        reFpgaVersion: string;
        recoveryVersion: string;
        serial: string;
        status: string;
        temperatures: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatTemperature[];
        tmcFpgaVersion: string;
        ubootVersion: string;
        uptime: number;
        vcLinks: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatVcLink[];
        vcMode: string;
        /**
         * master / backup / linecard
         */
        vcRole: string;
        vcState: string;
        version: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatError {
        feature: string;
        minimumVersion: string;
        reason: string;
        since: number;
        type: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatFan {
        airflow: string;
        name: string;
        status: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatPic {
        index: number;
        modelNumber: string;
        portGroups: outputs.device.GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroup[];
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroup {
        count: number;
        type: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatPoe {
        maxPower: number;
        powerDraw: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatPsus {
        name: string;
        status: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatTemperature {
        celsius: number;
        name: string;
        status: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatModuleStatVcLink {
        neighborModuleIdx: number;
        neighborPortId: string;
        portId: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatRouteSummaryStats {
        fibRoutes: number;
        maxUnicastRoutesSupported: number;
        ribRoutes: number;
        totalRoutes: number;
    }

    export interface GetSwitchStatsDeviceSwitchStatServiceStat {
        ashVersion: string;
        ciaVersion: string;
        emberVersion: string;
        ipsecClientVersion: string;
        mistAgentVersion: string;
        packageVersion: string;
        testingToolsVersion: string;
        wheeljackVersion: string;
    }

    export interface GetSwitchStatsDeviceSwitchStatVcSetupInfo {
        configType: string;
        errMissingDevIdFpc: boolean;
    }

    export interface GetVersionsDeviceVersion {
        /**
         * Device model (as seen in the device stats)
         */
        model: string;
        /**
         * Annotation, stable / beta / alpha. Or it can be empty or nothing which is likely a dev build
         */
        tag: string;
        /**
         * Firmware version
         */
        version: string;
    }

    export interface SwitchAclPolicy {
        /**
         * ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        actions?: outputs.device.SwitchAclPolicyAction[];
        name?: string;
        /**
         * ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        srcTags?: string[];
    }

    export interface SwitchAclPolicyAction {
        /**
         * enum: `allow`, `deny`
         */
        action?: string;
        dstTag: string;
    }

    export interface SwitchAclTags {
        /**
         * Required if
         *   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
         *   - `type`==`gbpResource`
         *   - `type`==`staticGbp` (applying gbp tag against matching conditions)
         */
        gbpTag?: number;
        /**
         * Required if 
         * - `type`==`mac`
         * - `type`==`staticGbp` if from matching mac
         */
        macs: string[];
        /**
         * If:
         *   * `type`==`mac` (optional. default is `any`)
         *   * `type`==`subnet` (optional. default is `any`)
         *   * `type`==`network`
         *   * `type`==`resource` (optional. default is `any`)
         *   * `type`==`staticGbp` if from matching network (vlan)
         */
        network?: string;
        /**
         * Required if:
         *   * `type`==`radiusGroup`
         *   * `type`==`staticGbp`
         * if from matching radius_group
         */
        radiusGroup?: string;
        /**
         * If `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
         */
        specs?: outputs.device.SwitchAclTagsSpec[];
        /**
         * If 
         * - `type`==`subnet` 
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`staticGbp` if from matching subnet
         */
        subnets: string[];
        /**
         * enum: 
         *   * `any`: matching anything not identified
         *   * `dynamicGbp`: from the gbpTag received from RADIUS
         *   * `gbpResource`: can only be used in `dstTags`
         *   * `mac`
         *   * `network`
         *   * `radiusGroup`
         *   * `resource`: can only be used in `dstTags`
         *   * `staticGbp`: applying gbp tag against matching conditions
         *   * `subnet`'
         */
        type: string;
    }

    export interface SwitchAclTagsSpec {
        /**
         * Matched dst port, "0" means any
         */
        portRange: string;
        /**
         * `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
         */
        protocol: string;
    }

    export interface SwitchDhcpSnooping {
        allNetworks?: boolean;
        /**
         * Enable for dynamic ARP inspection check
         */
        enableArpSpoofCheck?: boolean;
        /**
         * Enable for check for forging source IP address
         */
        enableIpSourceGuard?: boolean;
        enabled?: boolean;
        /**
         * If `allNetworks`==`false`, list of network with DHCP snooping enabled
         */
        networks?: string[];
    }

    export interface SwitchDhcpdConfig {
        /**
         * Property key is the network name
         */
        config?: {[key: string]: outputs.device.SwitchDhcpdConfigConfig};
        /**
         * If set to `true`, enable the DHCP server
         */
        enabled: boolean;
    }

    export interface SwitchDhcpdConfigConfig {
        /**
         * If `type`==`server` or `type6`==`server` - optional, if not defined, system one will be used
         */
        dnsServers: string[];
        /**
         * If `type`==`server` or `type6`==`server` - optional, if not defined, system one will be used
         */
        dnsSuffixes: string[];
        /**
         * If `type`==`server` or `type6`==`server`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
         */
        fixedBindings?: {[key: string]: outputs.device.SwitchDhcpdConfigConfigFixedBindings};
        /**
         * If `type`==`server`  - optional, `ip` will be used if not provided
         */
        gateway?: string;
        /**
         * If `type`==`server`
         */
        ipEnd?: string;
        /**
         * If `type6`==`server`
         */
        ipEnd6?: string;
        /**
         * If `type`==`server`
         */
        ipStart?: string;
        /**
         * If `type6`==`server`
         */
        ipStart6?: string;
        /**
         * In seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
         */
        leaseTime: number;
        /**
         * If `type`==`server` or `type6`==`server`. Property key is the DHCP option number
         */
        options?: {[key: string]: outputs.device.SwitchDhcpdConfigConfigOptions};
        /**
         * `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
         * should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
         */
        serverIdOverride: boolean;
        /**
         * If `type`==`relay`
         */
        servers: string[];
        /**
         * If `type6`==`relay`
         */
        servers6s: string[];
        /**
         * enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
         */
        type?: string;
        /**
         * enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
         */
        type6: string;
        /**
         * If `type`==`server` or `type6`==`server`. Property key is <enterprise number>:<sub option code>, with
         *   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
         *   * sub option code: 1-255, sub-option code'
         */
        vendorEncapsulated?: {[key: string]: outputs.device.SwitchDhcpdConfigConfigVendorEncapsulated};
    }

    export interface SwitchDhcpdConfigConfigFixedBindings {
        ip: string;
        name?: string;
    }

    export interface SwitchDhcpdConfigConfigOptions {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface SwitchDhcpdConfigConfigVendorEncapsulated {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface SwitchExtraRoutes {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.device.SwitchExtraRoutesNextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface SwitchExtraRoutes6 {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.device.SwitchExtraRoutes6NextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface SwitchExtraRoutes6NextQualified {
        metric?: number;
        preference?: number;
    }

    export interface SwitchExtraRoutesNextQualified {
        metric?: number;
        preference?: number;
    }

    export interface SwitchIpConfig {
        /**
         * Required when `type`==`static`
         */
        dns: string[];
        dnsSuffixes: string[];
        gateway?: string;
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`
         */
        netmask?: string;
        /**
         * Network where this mgmt IP reside, this will be used as default network for outbound-ssh, dns, ntp, dns, tacplus, radius, syslog, snmp
         */
        network?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface SwitchLocalPortConfig {
        /**
         * Only if `mode`==`trunk` whether to trunk all network/vlans
         */
        allNetworks: boolean;
        /**
         * If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
         */
        allowDhcpd?: boolean;
        allowMultipleSupplicants: boolean;
        /**
         * Only if `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDown: boolean;
        /**
         * Only if `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDownForUnkownClient: boolean;
        description?: string;
        /**
         * Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * Whether the port is disabled
         */
        disabled: boolean;
        /**
         * link connection mode. enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Only if `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
         */
        dynamicVlanNetworks?: string[];
        /**
         * Only if `portAuth`==`dot1x` whether to enable MAC Auth
         */
        enableMacAuth: boolean;
        enableQos: boolean;
        /**
         * Only if `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
         */
        guestNetwork?: string;
        /**
         * inter_switch_link is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
         */
        interSwitchLink: boolean;
        /**
         * Only if `enableMacAuth`==`true`
         */
        macAuthOnly?: boolean;
        /**
         * Only if `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
         */
        macAuthPreferred?: boolean;
        /**
         * Only if `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
         */
        macAuthProtocol: string;
        /**
         * Max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
         */
        macLimit: number;
        /**
         * enum: `access`, `inet`, `trunk`
         */
        mode?: string;
        /**
         * Media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
         */
        mtu?: number;
        /**
         * Only if `mode`==`trunk`, the list of network/vlans
         */
        networks?: string[];
        /**
         * Additional note for the port config override
         */
        note?: string;
        /**
         * Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
         */
        persistMac: boolean;
        /**
         * Whether PoE capabilities are disabled for a port
         */
        poeDisabled: boolean;
        /**
         * if dot1x is desired, set to dot1x. enum: `dot1x`
         */
        portAuth?: string;
        /**
         * Native network/vlan for untagged traffic
         */
        portNetwork?: string;
        /**
         * Only if `portAuth`=`dot1x` reauthentication interval range
         */
        reauthInterval: number;
        /**
         * Only if `portAuth`==`dot1x` sets server fail fallback vlan
         */
        serverFailNetwork?: string;
        /**
         * Only if `portAuth`==`dot1x` when radius server reject / fails
         */
        serverRejectNetwork?: string;
        /**
         * enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Switch storm control
         */
        stormControl?: outputs.device.SwitchLocalPortConfigStormControl;
        /**
         * When enabled, the port is not expected to receive BPDU frames
         */
        stpEdge: boolean;
        stpNoRootPort: boolean;
        stpP2p: boolean;
        /**
         * Port usage name.
         */
        usage: string;
        /**
         * If this is connected to a vstp network
         */
        useVstp: boolean;
        /**
         * Network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
         */
        voipNetwork?: string;
    }

    export interface SwitchLocalPortConfigStormControl {
        /**
         * Whether to disable storm control on broadcast traffic
         */
        noBroadcast: boolean;
        /**
         * Whether to disable storm control on multicast traffic
         */
        noMulticast: boolean;
        /**
         * Whether to disable storm control on registered multicast traffic
         */
        noRegisteredMulticast: boolean;
        /**
         * Whether to disable storm control on unknown unicast traffic
         */
        noUnknownUnicast: boolean;
        /**
         * Bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
         */
        percentage: number;
    }

    export interface SwitchMistNac {
        enabled?: boolean;
        network?: string;
    }

    export interface SwitchNetworks {
        /**
         * Only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
         */
        gateway?: string;
        /**
         * Only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
         */
        gateway6?: string;
        /**
         * whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
         */
        isolation: boolean;
        isolationVlanId?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet6?: string;
        vlanId: string;
    }

    export interface SwitchOobIpConfig {
        gateway?: string;
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`
         */
        netmask?: string;
        /**
         * Optional, the network to be used for mgmt
         */
        network?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
    }

    export interface SwitchOspfAreas {
        includeLoopback: boolean;
        networks: {[key: string]: outputs.device.SwitchOspfAreasNetworks};
        /**
         * OSPF type. enum: `default`, `nssa`, `stub`
         */
        type: string;
    }

    export interface SwitchOspfAreasNetworks {
        /**
         * Required if `authType`==`md5`. Property key is the key number
         */
        authKeys: {[key: string]: string};
        /**
         * Required if `authType`==`password`, the password, max length is 8
         */
        authPassword?: string;
        /**
         * auth type. enum: `md5`, `none`, `password`
         */
        authType: string;
        bfdMinimumInterval?: number;
        deadInterval?: number;
        exportPolicy?: string;
        helloInterval?: number;
        importPolicy?: string;
        /**
         * interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
         */
        interfaceType: string;
        metric?: number;
        /**
         * By default, we'll re-advertise all learned OSPF routes toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * Whether to send OSPF-Hello
         */
        passive: boolean;
    }

    export interface SwitchOtherIpConfigs {
        /**
         * For EVPN, if anycast is desired
         */
        evpnAnycast: boolean;
        /**
         * Required if `type`==`static`
         */
        ip?: string;
        /**
         * Required if `type6`==`static`
         */
        ip6?: string;
        /**
         * Optional, `subnet` from `network` definition will be used if defined
         */
        netmask?: string;
        /**
         * Optional, `subnet` from `network` definition will be used if defined
         */
        netmask6?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * enum: `autoconf`, `dhcp`, `disabled`, `static`
         */
        type6: string;
    }

    export interface SwitchPortConfig {
        /**
         * To disable LACP support for the AE interface
         */
        aeDisableLacp?: boolean;
        /**
         * Users could force to use the designated AE name
         */
        aeIdx?: number;
        /**
         * To use fast timeout
         */
        aeLacpSlow?: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm
         */
        critical?: boolean;
        description?: string;
        /**
         * If `speed` and `duplex` are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Enable dynamic usage for this port. Set to `dynamic` to enable.
         */
        dynamicUsage?: string;
        esilag?: boolean;
        /**
         * Media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
         */
        mtu: number;
        /**
         * Prevent helpdesk to override the port config
         */
        noLocalOverwrite?: boolean;
        poeDisabled: boolean;
        /**
         * enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
         */
        usage: string;
    }

    export interface SwitchPortMirroring {
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputNetworksIngresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsEgresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsIngresses: string[];
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputNetwork?: string;
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputPortId?: string;
    }

    export interface SwitchPortUsages {
        /**
         * Only if `mode`==`trunk` whether to trunk all network/vlans
         */
        allNetworks: boolean;
        /**
         * Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
         */
        allowDhcpd?: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        allowMultipleSupplicants: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDown: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDownForUnkownClient: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        description?: string;
        /**
         * Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * Only if `mode`!=`dynamic` whether the port is disabled
         */
        disabled: boolean;
        /**
         * Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
         */
        dynamicVlanNetworks: string[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
         */
        enableMacAuth: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        enableQos: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
         */
        guestNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
         */
        interSwitchLink: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
         */
        macAuthOnly?: boolean;
        /**
         * Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
         */
        macAuthPreferred?: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
         */
        macAuthProtocol: string;
        /**
         * Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
         */
        macLimit: number;
        /**
         * `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
         */
        mode?: string;
        /**
         * Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
         */
        mtu?: number;
        /**
         * Only if `mode`==`trunk`, the list of network/vlans
         */
        networks: string[];
        /**
         * Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
         */
        persistMac: boolean;
        /**
         * Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
         */
        poeDisabled: boolean;
        /**
         * Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
         */
        portAuth?: string;
        /**
         * Only if `mode`!=`dynamic` native network/vlan for untagged traffic
         */
        portNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
         */
        reauthInterval: number;
        /**
         * Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
         */
        resetDefaultWhen: string;
        /**
         * Only if `mode`==`dynamic`
         */
        rules?: outputs.device.SwitchPortUsagesRule[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
         */
        serverFailNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
         */
        serverRejectNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Switch storm control. Only if `mode`!=`dynamic`
         */
        stormControl?: outputs.device.SwitchPortUsagesStormControl;
        /**
         * Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
         */
        stpEdge: boolean;
        stpNoRootPort: boolean;
        stpP2p: boolean;
        /**
         * If this is connected to a vstp network
         */
        useVstp: boolean;
        /**
         * Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
         */
        voipNetwork?: string;
    }

    export interface SwitchPortUsagesRule {
        equals?: string;
        /**
         * Use `equalsAny` to match any item in a list
         */
        equalsAnies?: string[];
        /**
         * "[0:3]":"abcdef" > "abc"
         * "split(.)[1]": "a.b.c" > "b"
         * "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
         */
        expression?: string;
        /**
         * enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
         */
        src: string;
        /**
         * `portUsage` name
         */
        usage?: string;
    }

    export interface SwitchPortUsagesStormControl {
        /**
         * Whether to disable storm control on broadcast traffic
         */
        noBroadcast: boolean;
        /**
         * Whether to disable storm control on multicast traffic
         */
        noMulticast: boolean;
        /**
         * Whether to disable storm control on registered multicast traffic
         */
        noRegisteredMulticast: boolean;
        /**
         * Whether to disable storm control on unknown unicast traffic
         */
        noUnknownUnicast: boolean;
        /**
         * Bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
         */
        percentage: number;
    }

    export interface SwitchRadiusConfig {
        /**
         * How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
         */
        acctInterimInterval: number;
        acctServers?: outputs.device.SwitchRadiusConfigAcctServer[];
        authServers?: outputs.device.SwitchRadiusConfigAuthServer[];
        /**
         * Radius auth session retries
         */
        authServersRetries: number;
        /**
         * Radius auth session timeout
         */
        authServersTimeout: number;
        /**
         * Use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
         */
        network?: string;
        /**
         * Use `network`or `sourceIp`
         */
        sourceIp?: string;
    }

    export interface SwitchRadiusConfigAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface SwitchRadiusConfigAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface SwitchRemoteSyslog {
        archive?: outputs.device.SwitchRemoteSyslogArchive;
        console?: outputs.device.SwitchRemoteSyslogConsole;
        enabled: boolean;
        files?: outputs.device.SwitchRemoteSyslogFile[];
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        network?: string;
        sendToAllServers: boolean;
        servers?: outputs.device.SwitchRemoteSyslogServer[];
        /**
         * enum: `millisecond`, `year`, `year millisecond`
         */
        timeFormat?: string;
        users?: outputs.device.SwitchRemoteSyslogUser[];
    }

    export interface SwitchRemoteSyslogArchive {
        files?: number;
        size?: string;
    }

    export interface SwitchRemoteSyslogConsole {
        contents?: outputs.device.SwitchRemoteSyslogConsoleContent[];
    }

    export interface SwitchRemoteSyslogConsoleContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface SwitchRemoteSyslogFile {
        archive?: outputs.device.SwitchRemoteSyslogFileArchive;
        contents?: outputs.device.SwitchRemoteSyslogFileContent[];
        explicitPriority?: boolean;
        file?: string;
        match?: string;
        structuredData?: boolean;
    }

    export interface SwitchRemoteSyslogFileArchive {
        files?: number;
        size?: string;
    }

    export interface SwitchRemoteSyslogFileContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface SwitchRemoteSyslogServer {
        contents?: outputs.device.SwitchRemoteSyslogServerContent[];
        explicitPriority?: boolean;
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        host?: string;
        match?: string;
        port: number;
        /**
         * enum: `tcp`, `udp`
         */
        protocol: string;
        routingInstance?: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        sourceAddress?: string;
        structuredData?: boolean;
        tag?: string;
    }

    export interface SwitchRemoteSyslogServerContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface SwitchRemoteSyslogUser {
        contents?: outputs.device.SwitchRemoteSyslogUserContent[];
        match?: string;
        user?: string;
    }

    export interface SwitchRemoteSyslogUserContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface SwitchSnmpConfig {
        clientLists?: outputs.device.SwitchSnmpConfigClientList[];
        contact?: string;
        description?: string;
        enabled: boolean;
        engineId?: string;
        location?: string;
        name?: string;
        network: string;
        trapGroups?: outputs.device.SwitchSnmpConfigTrapGroup[];
        v2cConfigs?: outputs.device.SwitchSnmpConfigV2cConfig[];
        v3Config?: outputs.device.SwitchSnmpConfigV3Config;
        views?: outputs.device.SwitchSnmpConfigView[];
    }

    export interface SwitchSnmpConfigClientList {
        clientListName?: string;
        clients?: string[];
    }

    export interface SwitchSnmpConfigTrapGroup {
        categories?: string[];
        /**
         * Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
         */
        groupName?: string;
        targets?: string[];
        /**
         * enum: `all`, `v1`, `v2`
         */
        version: string;
    }

    export interface SwitchSnmpConfigV2cConfig {
        authorization?: string;
        /**
         * Client_list_name here should refer to clientList above
         */
        clientListName?: string;
        communityName?: string;
        /**
         * View name here should be defined in views above
         */
        view?: string;
    }

    export interface SwitchSnmpConfigV3Config {
        notifies?: outputs.device.SwitchSnmpConfigV3ConfigNotify[];
        notifyFilters?: outputs.device.SwitchSnmpConfigV3ConfigNotifyFilter[];
        targetAddresses?: outputs.device.SwitchSnmpConfigV3ConfigTargetAddress[];
        targetParameters?: outputs.device.SwitchSnmpConfigV3ConfigTargetParameter[];
        usms?: outputs.device.SwitchSnmpConfigV3ConfigUsm[];
        vacm?: outputs.device.SwitchSnmpConfigV3ConfigVacm;
    }

    export interface SwitchSnmpConfigV3ConfigNotify {
        name: string;
        tag: string;
        /**
         * enum: `inform`, `trap`
         */
        type: string;
    }

    export interface SwitchSnmpConfigV3ConfigNotifyFilter {
        contents?: outputs.device.SwitchSnmpConfigV3ConfigNotifyFilterContent[];
        profileName?: string;
    }

    export interface SwitchSnmpConfigV3ConfigNotifyFilterContent {
        include?: boolean;
        oid: string;
    }

    export interface SwitchSnmpConfigV3ConfigTargetAddress {
        address: string;
        addressMask: string;
        port: string;
        /**
         * Refer to notify tag, can be multiple with blank
         */
        tagList?: string;
        targetAddressName: string;
        /**
         * Refer to notify target parameters name
         */
        targetParameters?: string;
    }

    export interface SwitchSnmpConfigV3ConfigTargetParameter {
        /**
         * enum: `v1`, `v2c`, `v3`
         */
        messageProcessingModel: string;
        name: string;
        /**
         * Refer to profile-name in notify_filter
         */
        notifyFilter?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * Refer to securityName in usm
         */
        securityName?: string;
    }

    export interface SwitchSnmpConfigV3ConfigUsm {
        /**
         * enum: `localEngine`, `remoteEngine`
         */
        engineType: string;
        /**
         * Required only if `engineType`==`remoteEngine`
         */
        remoteEngineId?: string;
        users?: outputs.device.SwitchSnmpConfigV3ConfigUsmUser[];
    }

    export interface SwitchSnmpConfigV3ConfigUsmUser {
        /**
         * Not required if `authenticationType`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
         */
        authenticationPassword?: string;
        /**
         * sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
         */
        authenticationType?: string;
        /**
         * Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
         */
        encryptionPassword?: string;
        /**
         * enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
         */
        encryptionType?: string;
        name?: string;
    }

    export interface SwitchSnmpConfigV3ConfigVacm {
        accesses?: outputs.device.SwitchSnmpConfigV3ConfigVacmAccess[];
        securityToGroup?: outputs.device.SwitchSnmpConfigV3ConfigVacmSecurityToGroup;
    }

    export interface SwitchSnmpConfigV3ConfigVacmAccess {
        groupName?: string;
        prefixLists?: outputs.device.SwitchSnmpConfigV3ConfigVacmAccessPrefixList[];
    }

    export interface SwitchSnmpConfigV3ConfigVacmAccessPrefixList {
        /**
         * Only required if `type`==`contextPrefix`
         */
        contextPrefix?: string;
        /**
         * Refer to view name
         */
        notifyView?: string;
        /**
         * Refer to view name
         */
        readView?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `any`, `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * enum: `contextPrefix`, `defaultContextPrefix`
         */
        type?: string;
        /**
         * Refer to view name
         */
        writeView?: string;
    }

    export interface SwitchSnmpConfigV3ConfigVacmSecurityToGroup {
        contents?: outputs.device.SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent[];
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
    }

    export interface SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent {
        /**
         * Refer to groupName under access
         */
        group?: string;
        securityName?: string;
    }

    export interface SwitchSnmpConfigView {
        /**
         * If the root oid configured is included
         */
        include?: boolean;
        oid?: string;
        viewName?: string;
    }

    export interface SwitchStpConfig {
        /**
         * Switch STP priority: from `0k` to `15k`
         */
        bridgePriority: string;
    }

    export interface SwitchSwitchMgmt {
        /**
         * AP_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default, this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
         */
        apAffinityThreshold: number;
        /**
         * Set Banners for switches. Allows markup formatting
         */
        cliBanner?: string;
        /**
         * Sets timeout for switches
         */
        cliIdleTimeout?: number;
        /**
         * Rollback timer for commit confirmed
         */
        configRevertTimer: number;
        /**
         * Enable to provide the FQDN with DHCP option 81
         */
        dhcpOptionFqdn: boolean;
        disableOobDownAlarm?: boolean;
        /**
         * Property key is the user name. For Local user authentication
         */
        localAccounts?: {[key: string]: outputs.device.SwitchSwitchMgmtLocalAccounts};
        mxedgeProxyHost?: string;
        mxedgeProxyPort: number;
        /**
         * Restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped 
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
         */
        protectRe?: outputs.device.SwitchSwitchMgmtProtectRe;
        rootPassword?: string;
        tacacs?: outputs.device.SwitchSwitchMgmtTacacs;
        /**
         * To use mxedge as proxy
         */
        useMxedgeProxy?: boolean;
    }

    export interface SwitchSwitchMgmtLocalAccounts {
        password?: string;
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        role: string;
    }

    export interface SwitchSwitchMgmtProtectRe {
        /**
         * optionally, services we'll allow. enum: `icmp`, `ssh`
         */
        allowedServices: string[];
        customs: outputs.device.SwitchSwitchMgmtProtectReCustom[];
        /**
         * When enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default
         *      if dhcpd is enabled, we'll make sure it works
         */
        enabled: boolean;
        /**
         * host/subnets we'll allow traffic to/from
         */
        trustedHosts: string[];
    }

    export interface SwitchSwitchMgmtProtectReCustom {
        /**
         * matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        portRange: string;
        /**
         * enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        protocol: string;
        subnets: string[];
    }

    export interface SwitchSwitchMgmtTacacs {
        acctServers?: outputs.device.SwitchSwitchMgmtTacacsAcctServer[];
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        defaultRole: string;
        enabled?: boolean;
        /**
         * Which network the TACACS server resides
         */
        network?: string;
        tacplusServers?: outputs.device.SwitchSwitchMgmtTacacsTacplusServer[];
    }

    export interface SwitchSwitchMgmtTacacsAcctServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface SwitchSwitchMgmtTacacsTacplusServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface SwitchVirtualChassis {
        /**
         * List of Virtual Chassis members
         */
        members?: outputs.device.SwitchVirtualChassisMember[];
        /**
         * To configure whether the VC is preprovisioned or nonprovisioned
         */
        preprovisioned: boolean;
    }

    export interface SwitchVirtualChassisMember {
        /**
         * fpc0, same as the mac of device_id
         */
        mac: string;
        memberId: number;
        /**
         * Both vcRole master and backup will be matched to routing-engine role in Junos preprovisioned VC config. enum: `backup`, `linecard`, `master`
         */
        vcRole: string;
    }

    export interface SwitchVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface SwitchVrfInstances {
        networks?: string[];
        /**
         * Property key is the destination CIDR (e.g. "10.0.0.0/8")
         */
        vrfExtraRoutes?: {[key: string]: outputs.device.SwitchVrfInstancesVrfExtraRoutes};
    }

    export interface SwitchVrfInstancesVrfExtraRoutes {
        /**
         * Next-hop address
         */
        via: string;
    }

    export interface SwitchVrrpConfig {
        enabled?: boolean;
        /**
         * Property key is the VRRP name
         */
        groups?: {[key: string]: outputs.device.SwitchVrrpConfigGroups};
    }

    export interface SwitchVrrpConfigGroups {
        priority?: number;
    }

}

export namespace org {
    export interface AlarmtemplateDelivery {
        /**
         * List of additional email string to deliver the alarms via emails
         */
        additionalEmails: string[];
        /**
         * Whether to enable the alarm delivery via emails or not
         */
        enabled: boolean;
        /**
         * Whether to deliver the alarms via emails to Org admins or not
         */
        toOrgAdmins?: boolean;
        /**
         * Whether to deliver the alarms via emails to Site admins or not
         */
        toSiteAdmins?: boolean;
    }

    export interface AlarmtemplateRules {
        /**
         * Delivery object to configure the alarm delivery
         */
        delivery?: outputs.org.AlarmtemplateRulesDelivery;
        enabled?: boolean;
    }

    export interface AlarmtemplateRulesDelivery {
        /**
         * List of additional email string to deliver the alarms via emails
         */
        additionalEmails: string[];
        /**
         * Whether to enable the alarm delivery via emails or not
         */
        enabled: boolean;
        /**
         * Whether to deliver the alarms via emails to Org admins or not
         */
        toOrgAdmins?: boolean;
        /**
         * Whether to deliver the alarms via emails to Site admins or not
         */
        toSiteAdmins?: boolean;
    }

    export interface ApitokenPrivilege {
        /**
         * access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
         */
        role: string;
        /**
         * enum: `org`, `site`, `sitegroup`
         */
        scope: string;
        /**
         * Required if `scope`==`site`
         */
        siteId?: string;
        /**
         * Required if `scope`==`sitegroup`
         */
        sitegroupId?: string;
    }

    export interface DeviceprofileApAeroscout {
        /**
         * Whether to enable aeroscout config
         */
        enabled: boolean;
        /**
         * Required if enabled, aeroscout server host
         */
        host?: string;
        /**
         * Whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
         */
        locateConnected: boolean;
    }

    export interface DeviceprofileApBleConfig {
        /**
         * Whether Mist beacons is enabled
         */
        beaconEnabled: boolean;
        /**
         * Required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
         */
        beaconRate: number;
        /**
         * enum: `custom`, `default`
         */
        beaconRateMode: string;
        /**
         * List of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
         */
        beamDisableds?: number[];
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send custom packet
         */
        customBlePacketEnabled: boolean;
        /**
         * The custom frame to be sent out in this beacon. The frame must be a hexstring
         */
        customBlePacketFrame: string;
        /**
         * Frequency (msec) of data emitted by custom ble beacon
         */
        customBlePacketFreqMsec: number;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUidAdvPower: number;
        eddystoneUidBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
         */
        eddystoneUidEnabled: boolean;
        /**
         * Frequency (msec) of data emmit by Eddystone-UID beacon
         */
        eddystoneUidFreqMsec: number;
        /**
         * Eddystone-UID instance for the device
         */
        eddystoneUidInstance: string;
        /**
         * Eddystone-UID namespace
         */
        eddystoneUidNamespace: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUrlAdvPower: number;
        eddystoneUrlBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
         */
        eddystoneUrlEnabled: boolean;
        /**
         * Frequency (msec) of data emit by Eddystone-UID beacon
         */
        eddystoneUrlFreqMsec: number;
        /**
         * URL pointed by Eddystone-URL beacon
         */
        eddystoneUrlUrl: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        ibeaconAdvPower: number;
        ibeaconBeams: string;
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
         */
        ibeaconEnabled: boolean;
        /**
         * Frequency (msec) of data emmit for iBeacon
         */
        ibeaconFreqMsec: number;
        /**
         * Major number for iBeacon
         */
        ibeaconMajor: number;
        /**
         * Minor number for iBeacon
         */
        ibeaconMinor: number;
        /**
         * Optional, if not specified, the same UUID as the beacon will be used
         */
        ibeaconUuid: string;
        /**
         * Required if `powerMode`==`custom`; else use `powerMode` as default
         */
        power: number;
        /**
         * enum: `custom`, `default`
         */
        powerMode: string;
    }

    export interface DeviceprofileApEslConfig {
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        cacert?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        channel?: number;
        /**
         * usb_config is ignored if eslConfig enabled
         */
        enabled: boolean;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        host?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        port?: number;
        /**
         * note: bleConfig will be ingored if eslConfig is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
         */
        type?: string;
        /**
         * Only if `type`==`imagotag` or `type`==`native`
         */
        verifyCert?: boolean;
        /**
         * Only if `type`==`solum` or `type`==`hanshow`
         */
        vlanId: number;
    }

    export interface DeviceprofileApIpConfig {
        /**
         * If `type`==`static`
         */
        dns: string[];
        /**
         * Required if `type`==`static`
         */
        dnsSuffixes: string[];
        /**
         * Required if `type`==`static`
         */
        gateway?: string;
        gateway6?: string;
        /**
         * Required if `type`==`static`
         */
        ip?: string;
        ip6?: string;
        mtu?: number;
        /**
         * Required if `type`==`static`
         */
        netmask?: string;
        netmask6?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * enum: `autoconf`, `dhcp`, `disabled`, `static`
         */
        type6: string;
        /**
         * Management VLAN id, default is 1 (untagged)
         */
        vlanId: number;
    }

    export interface DeviceprofileApLed {
        brightness: number;
        enabled: boolean;
    }

    export interface DeviceprofileApMesh {
        /**
         * Whether mesh is enabled on this AP
         */
        enabled: boolean;
        /**
         * Mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
         */
        group?: number;
        /**
         * enum: `base`, `remote`
         */
        role?: string;
    }

    export interface DeviceprofileApPwrConfig {
        /**
         * Additional power to request during negotiating with PSE over PoE, in mW
         */
        base: number;
        /**
         * Whether to enable power out to peripheral, meanwhile will reduce power to Wi-Fi (only for AP45 at power mode)
         */
        preferUsbOverWifi: boolean;
    }

    export interface DeviceprofileApRadioConfig {
        allowRrmDisable: boolean;
        /**
         * Antenna gain for 2.4G - for models with external antenna only
         */
        antGain24?: number;
        /**
         * Antenna gain for 5G - for models with external antenna only
         */
        antGain5?: number;
        /**
         * Antenna gain for 6G - for models with external antenna only
         */
        antGain6?: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * Radio Band AP settings
         */
        band24?: outputs.org.DeviceprofileApRadioConfigBand24;
        /**
         * enum: `24`, `5`, `6`, `auto`
         */
        band24Usage?: string;
        /**
         * Radio Band AP settings
         */
        band5?: outputs.org.DeviceprofileApRadioConfigBand5;
        /**
         * Radio Band AP settings
         */
        band5On24Radio?: outputs.org.DeviceprofileApRadioConfigBand5On24Radio;
        /**
         * Radio Band AP settings
         */
        band6?: outputs.org.DeviceprofileApRadioConfigBand6;
        /**
         * To make an outdoor operate indoor. For an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
         */
        indoorUse: boolean;
        /**
         * Whether scanning radio is enabled
         */
        scanningEnabled?: boolean;
    }

    export interface DeviceprofileApRadioConfigBand24 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 2.4GHz band. enum: `20`, `40`
         */
        bandwidth: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface DeviceprofileApRadioConfigBand5 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface DeviceprofileApRadioConfigBand5On24Radio {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface DeviceprofileApRadioConfigBand6 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
         */
        bandwidth: number;
        /**
         * For Device. (primary) channel for the band, 0 means using the Site Setting
         */
        channel: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
        /**
         * For 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed, and we'll fall back to Low Power Indoor if AFC failed
         */
        standardPower: boolean;
    }

    export interface DeviceprofileApUplinkPortConfig {
        /**
         * Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
         */
        dot1x: boolean;
        /**
         * By default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
         */
        keepWlansUpIfDown: boolean;
    }

    export interface DeviceprofileApUsbConfig {
        /**
         * Only if `type`==`imagotag`
         */
        cacert?: string;
        /**
         * Only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
         */
        channel?: number;
        /**
         * Whether to enable any usb config
         */
        enabled?: boolean;
        /**
         * Only if `type`==`imagotag`
         */
        host?: string;
        /**
         * Only if `type`==`imagotag`
         */
        port: number;
        /**
         * usb config type. enum: `hanshow`, `imagotag`, `solum`
         */
        type?: string;
        /**
         * Only if `type`==`imagotag`, whether to turn on SSL verification
         */
        verifyCert?: boolean;
        /**
         * Only if `type`==`solum` or `type`==`hanshow`
         */
        vlanId: number;
    }

    export interface DeviceprofileGatewayBgpConfig {
        authKey?: string;
        /**
         * When bfdMultiplier is configured alone. Default:
         *   * 1000 if `type`==`external`
         *   * 350 `type`==`internal`
         */
        bfdMinimumInterval: number;
        /**
         * When bfdMinimumIntervalIsConfigured alone
         */
        bfdMultiplier: number;
        /**
         * BFD provides faster path failure detection and is enabled by default
         */
        disableBfd: boolean;
        export?: string;
        /**
         * Default export policies if no per-neighbor policies defined
         */
        exportPolicy?: string;
        /**
         * By default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
         */
        extendedV4Nexthop?: boolean;
        /**
         * `0` means disable
         */
        gracefulRestartTime: number;
        holdTime: number;
        import?: string;
        /**
         * Default import policies if no per-neighbor policies defined
         */
        importPolicy?: string;
        localAs?: number;
        neighborAs?: number;
        /**
         * If per-neighbor as is desired. Property key is the neighbor address
         */
        neighbors?: {[key: string]: outputs.org.DeviceprofileGatewayBgpConfigNeighbors};
        /**
         * If `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
         */
        networks: string[];
        /**
         * By default, we'll re-advertise all learned BGP routers toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * If `type`==`tunnel`
         */
        tunnelName?: string;
        /**
         * enum: `external`, `internal`
         */
        type?: string;
        /**
         * network name. enum: `lan`, `tunnel`, `vpn`, `wan`
         */
        via: string;
        vpnName?: string;
        /**
         * If `via`==`wan`
         */
        wanName?: string;
    }

    export interface DeviceprofileGatewayBgpConfigNeighbors {
        /**
         * If true, the BGP session to this neighbor will be administratively disabled/shutdown
         */
        disabled: boolean;
        exportPolicy?: string;
        holdTime: number;
        importPolicy?: string;
        /**
         * Assuming BGP neighbor is directly connected
         */
        multihopTtl?: number;
        neighborAs?: number;
    }

    export interface DeviceprofileGatewayDhcpdConfig {
        /**
         * Property key is the network name
         */
        config?: {[key: string]: outputs.org.DeviceprofileGatewayDhcpdConfigConfig};
        /**
         * If set to `false`, disable the DHCP server
         */
        enabled: boolean;
    }

    export interface DeviceprofileGatewayDhcpdConfigConfig {
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsServers: string[];
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsSuffixes: string[];
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
         */
        fixedBindings?: {[key: string]: outputs.org.DeviceprofileGatewayDhcpdConfigConfigFixedBindings};
        /**
         * If `type`==`local` - optional, `ip` will be used if not provided
         */
        gateway?: string;
        /**
         * If `type`==`local`
         */
        ipEnd?: string;
        /**
         * If `type6`==`local`
         */
        ipEnd6?: string;
        /**
         * If `type`==`local`
         */
        ipStart?: string;
        /**
         * If `type6`==`local`
         */
        ipStart6?: string;
        /**
         * In seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
         */
        leaseTime: number;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the DHCP option number
         */
        options?: {[key: string]: outputs.org.DeviceprofileGatewayDhcpdConfigConfigOptions};
        /**
         * `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
         * should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
         */
        serverIdOverride: boolean;
        /**
         * If `type`==`relay`
         */
        servers: string[];
        /**
         * If `type6`==`relay`
         */
        servers6s: string[];
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type: string;
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type6: string;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is <enterprise number>:<sub option code>, with
         *   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
         *   * sub option code: 1-255, sub-option code
         */
        vendorEncapsulated?: {[key: string]: outputs.org.DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated};
    }

    export interface DeviceprofileGatewayDhcpdConfigConfigFixedBindings {
        ip: string;
        name?: string;
    }

    export interface DeviceprofileGatewayDhcpdConfigConfigOptions {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface DeviceprofileGatewayDhcpdConfigConfigVendorEncapsulated {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface DeviceprofileGatewayExtraRoutes {
        via: string;
    }

    export interface DeviceprofileGatewayExtraRoutes6 {
        via: string;
    }

    export interface DeviceprofileGatewayIdpProfiles {
        /**
         * enum: `critical`, `standard`, `strict`
         */
        baseProfile?: string;
        name?: string;
        orgId?: string;
        overwrites?: outputs.org.DeviceprofileGatewayIdpProfilesOverwrite[];
    }

    export interface DeviceprofileGatewayIdpProfilesOverwrite {
        /**
         * enum:
         *   * alert (default)
         *   * drop: siliently dropping packets
         *   * close: notify client/server to close connection
         */
        action: string;
        matching?: outputs.org.DeviceprofileGatewayIdpProfilesOverwriteMatching;
        name?: string;
    }

    export interface DeviceprofileGatewayIdpProfilesOverwriteMatching {
        attackNames?: string[];
        dstSubnets?: string[];
        severities?: string[];
    }

    export interface DeviceprofileGatewayIpConfigs {
        ip: string;
        netmask: string;
        /**
         * Optional list of secondary IPs in CIDR format
         */
        secondaryIps: string[];
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface DeviceprofileGatewayNetwork {
        /**
         * Whether to disallow Mist Devices in the network
         */
        disallowMistServices: boolean;
        gateway?: string;
        gateway6?: string;
        internalAccess?: outputs.org.DeviceprofileGatewayNetworkInternalAccess;
        /**
         * Whether this network has direct internet access
         */
        internetAccess?: outputs.org.DeviceprofileGatewayNetworkInternetAccess;
        /**
         * Whether to allow clients in the network to talk to each other
         */
        isolation?: boolean;
        /**
         * Whether to enable multicast support (only PIM-sparse mode is supported)
         */
        multicast?: outputs.org.DeviceprofileGatewayNetworkMulticast;
        name: string;
        /**
         * For a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
         */
        routedForNetworks?: string[];
        subnet: string;
        subnet6?: string;
        /**
         * Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
         */
        tenants?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkTenants};
        vlanId?: string;
        /**
         * Property key is the VPN name. Whether this network can be accessed from vpn
         */
        vpnAccess?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkVpnAccess};
    }

    export interface DeviceprofileGatewayNetworkInternalAccess {
        enabled?: boolean;
    }

    export interface DeviceprofileGatewayNetworkInternetAccess {
        createSimpleServicePolicy: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkInternetAccessDestinationNat};
        enabled?: boolean;
        /**
         * By default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
         */
        restricted: boolean;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkInternetAccessStaticNat};
    }

    export interface DeviceprofileGatewayNetworkInternetAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        /**
         * The Destination NAT destination IP Address. Must be a Port (i.e. "443") or a Variable (i.e. "{{myvar}}")
         */
        port?: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity
         */
        wanName?: string;
    }

    export interface DeviceprofileGatewayNetworkInternetAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. "{{myvar}}")
         */
        wanName?: string;
    }

    export interface DeviceprofileGatewayNetworkMulticast {
        /**
         * If the network will only be the soruce of the multicast traffic, IGMP can be disabled
         */
        disableIgmp: boolean;
        enabled: boolean;
        /**
         * Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example "225.1.0.3/32")
         */
        groups?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkMulticastGroups};
    }

    export interface DeviceprofileGatewayNetworkMulticastGroups {
        /**
         * RP (rendezvous point) IP Address
         */
        rpIp?: string;
    }

    export interface DeviceprofileGatewayNetworkTenants {
        addresses?: string[];
    }

    export interface DeviceprofileGatewayNetworkVpnAccess {
        /**
         * If `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
         */
        advertisedSubnet?: string;
        /**
         * Whether to allow ping from vpn into this routed network
         */
        allowPing?: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.DeviceprofileGatewayNetworkVpnAccessDestinationNat};
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
         */
        natPool?: string;
        /**
         * toward LAN-side BGP peers
         */
        noReadvertiseToLanBgp: boolean;
        /**
         * toward LAN-side OSPF peers
         */
        noReadvertiseToLanOspf: boolean;
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        noReadvertiseToOverlay?: boolean;
        /**
         * By default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs
         */
        otherVrfs: string[];
        /**
         * Whether this network is routable
         */
        routed?: boolean;
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
         */
        sourceNat: outputs.org.DeviceprofileGatewayNetworkVpnAccessSourceNat;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat: {[key: string]: outputs.org.DeviceprofileGatewayNetworkVpnAccessStaticNat};
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        summarizedSubnet?: string;
        /**
         * toward LAN-side BGP peers
         */
        summarizedSubnetToLanBgp?: string;
        /**
         * toward LAN-side OSPF peers
         */
        summarizedSubnetToLanOspf?: string;
    }

    export interface DeviceprofileGatewayNetworkVpnAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        port?: string;
    }

    export interface DeviceprofileGatewayNetworkVpnAccessSourceNat {
        externalIp?: string;
    }

    export interface DeviceprofileGatewayNetworkVpnAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
    }

    export interface DeviceprofileGatewayOobIpConfig {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        /**
         * If `type`==`static`
         */
        ip?: string;
        /**
         * If `type`==`static`
         */
        netmask?: string;
        /**
         * For HA Cluster, node1 can have different IP Config
         */
        node1: outputs.org.DeviceprofileGatewayOobIpConfigNode1;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface DeviceprofileGatewayOobIpConfigNode1 {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`
         */
        netmask?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * Whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface DeviceprofileGatewayPathPreferences {
        paths?: outputs.org.DeviceprofileGatewayPathPreferencesPath[];
        /**
         * enum: `ecmp`, `ordered`, `weighted`
         */
        strategy: string;
    }

    export interface DeviceprofileGatewayPathPreferencesPath {
        cost?: number;
        /**
         * For SSR Only. `true`, if this specific path is undesired
         */
        disabled?: boolean;
        /**
         * Only if `type`==`local`, if a different gateway is desired
         */
        gatewayIp?: string;
        /**
         * Only if `type`==`vpn`, if this vpn path can be used for internet
         */
        internetAccess?: boolean;
        /**
         * Required when 
         *   * `type`==`vpn`: the name of the VPN Path to use 
         *   * `type`==`wan`: the name of the WAN interface to use
         */
        name?: string;
        /**
         * Required when `type`==`local`
         */
        networks: string[];
        /**
         * If `type`==`local`, if destination IP is to be replaced
         */
        targetIps: string[];
        /**
         * enum: `local`, `tunnel`, `vpn`, `wan`
         */
        type?: string;
        /**
         * Optional if `type`==`vpn`
         */
        wanName?: string;
    }

    export interface DeviceprofileGatewayPortConfig {
        /**
         * If `aggregated`==`true`. To disable LCP support for the AE interface
         */
        aeDisableLacp: boolean;
        /**
         * If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
         */
        aeIdx?: string;
        /**
         * For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
         */
        aeLacpForceUp: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm, set it to true
         */
        critical: boolean;
        /**
         * Interface Description. Can be a variable (i.e. "{{myvar}}")
         */
        description?: string;
        disableAutoneg: boolean;
        /**
         * Port admin up (true) / down (false)
         */
        disabled: boolean;
        /**
         * if `wanType`==`dsl`. enum: `adsl`, `vdsl`
         */
        dslType: string;
        /**
         * If `wanType`==`dsl`, 16 bit int
         */
        dslVci: number;
        /**
         * If `wanType`==`dsl`, 8 bit int
         */
        dslVpi: number;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Junos IP Config
         */
        ipConfig?: outputs.org.DeviceprofileGatewayPortConfigIpConfig;
        /**
         * If `wanType`==`lte`
         */
        lteApn?: string;
        /**
         * if `wanType`==`lte`. enum: `chap`, `none`, `pap`
         */
        lteAuth: string;
        lteBackup?: boolean;
        /**
         * If `wanType`==`lte`
         */
        ltePassword?: string;
        /**
         * If `wanType`==`lte`
         */
        lteUsername?: string;
        mtu?: number;
        /**
         * Name that we'll use to derive config
         */
        name?: string;
        /**
         * if `usage`==`lan`, name of the `junipermist.org.Network` resource
         */
        networks: string[];
        /**
         * For Q-in-Q
         */
        outerVlanId?: number;
        poeDisabled: boolean;
        /**
         * Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
         */
        portNetwork?: string;
        /**
         * Whether to preserve dscp when sending traffic over VPN (SSR-only)
         */
        preserveDscp: boolean;
        /**
         * If HA mode
         */
        redundant: boolean;
        /**
         * If HA mode
         */
        rethIdx?: number;
        /**
         * If HA mode
         */
        rethNode?: string;
        /**
         * SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         */
        rethNodes: string[];
        speed: string;
        /**
         * When SSR is running as VM, this is required on certain hosting platforms
         */
        ssrNoVirtualMac: boolean;
        /**
         * For SSR only
         */
        svrPortRange: string;
        trafficShaping?: outputs.org.DeviceprofileGatewayPortConfigTrafficShaping;
        /**
         * port usage name. enum: `haControl`, `haData`, `lan`, `wan`
         */
        usage: string;
        vlanId?: string;
        /**
         * Property key is the VPN name
         */
        vpnPaths?: {[key: string]: outputs.org.DeviceprofileGatewayPortConfigVpnPaths};
        /**
         * Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
         */
        wanArpPolicer: string;
        /**
         * Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
         */
        wanExtIp?: string;
        /**
         * Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g "100.100.100.0/24")
         */
        wanExtraRoutes?: {[key: string]: outputs.org.DeviceprofileGatewayPortConfigWanExtraRoutes};
        /**
         * Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         */
        wanNetworks: string[];
        /**
         * Only if `usage`==`wan`
         */
        wanProbeOverride?: outputs.org.DeviceprofileGatewayPortConfigWanProbeOverride;
        /**
         * Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
         */
        wanSourceNat?: outputs.org.DeviceprofileGatewayPortConfigWanSourceNat;
        /**
         * Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
         */
        wanType: string;
    }

    export interface DeviceprofileGatewayPortConfigIpConfig {
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dns?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dnsSuffixes?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. "192.168.1.1") or a Variable (i.e. "{{myvar}}")
         */
        gateway?: string;
        /**
         * Interface IP Address (i.e. "192.168.1.8") or a Variable (i.e. "{{myvar}}")
         */
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. "/24") or a Variable (i.e. "{{myvar}}")
         */
        netmask?: string;
        /**
         * Optional, the network to be used for mgmt
         */
        network?: string;
        /**
         * If `type`==`pppoe`
         */
        poserPassword?: string;
        /**
         * if `type`==`pppoe`. enum: `chap`, `none`, `pap`
         */
        pppoeAuth: string;
        /**
         * If `type`==`pppoe`
         */
        pppoeUsername?: string;
        /**
         * enum: `dhcp`, `pppoe`, `static`
         */
        type: string;
    }

    export interface DeviceprofileGatewayPortConfigTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface DeviceprofileGatewayPortConfigVpnPaths {
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `broadband`, `lte`
         */
        bfdProfile: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. Whether to use tunnel mode. SSR only
         */
        bfdUseTunnelMode: boolean;
        /**
         * Only if the VPN `type`==`mesh`
         */
        linkName?: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
         */
        preference?: number;
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `hub`, `spoke`
         */
        role: string;
        trafficShaping?: outputs.org.DeviceprofileGatewayPortConfigVpnPathsTrafficShaping;
    }

    export interface DeviceprofileGatewayPortConfigVpnPathsTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface DeviceprofileGatewayPortConfigWanExtraRoutes {
        via?: string;
    }

    export interface DeviceprofileGatewayPortConfigWanProbeOverride {
        ips?: string[];
        /**
         * enum: `broadband`, `lte`
         */
        probeProfile: string;
    }

    export interface DeviceprofileGatewayPortConfigWanSourceNat {
        /**
         * Or to disable the source-nat
         */
        disabled: boolean;
        /**
         * If alternative natPool is desired
         */
        natPool?: string;
    }

    export interface DeviceprofileGatewayRoutingPolicies {
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        terms?: outputs.org.DeviceprofileGatewayRoutingPoliciesTerm[];
    }

    export interface DeviceprofileGatewayRoutingPoliciesTerm {
        /**
         * When used as import policy
         */
        action?: outputs.org.DeviceprofileGatewayRoutingPoliciesTermAction;
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        matching?: outputs.org.DeviceprofileGatewayRoutingPoliciesTermMatching;
    }

    export interface DeviceprofileGatewayRoutingPoliciesTermAction {
        accept?: boolean;
        addCommunities?: string[];
        /**
         * For SSR, hub decides how VRF routes are leaked on spoke
         */
        addTargetVrfs?: string[];
        /**
         * route aggregation
         */
        aggregates?: string[];
        /**
         * When used as export policy, optional
         */
        communities?: string[];
        /**
         * When used as export policy, optional. To exclude certain AS
         */
        excludeAsPaths?: string[];
        excludeCommunities?: string[];
        /**
         * When used as export policy, optional
         */
        exportCommunitites?: string[];
        /**
         * Optional, for an import policy, localPreference can be changed
         */
        localPreference?: string;
        /**
         * When used as export policy, optional. By default, the local AS will be prepended, to change it
         */
        prependAsPaths?: string[];
    }

    export interface DeviceprofileGatewayRoutingPoliciesTermMatching {
        /**
         * takes regular expression
         */
        asPaths?: string[];
        communities?: string[];
        networks?: string[];
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        prefixes?: string[];
        /**
         * `direct`, `bgp`, `osp`, ...
         */
        protocols?: string[];
        routeExists?: outputs.org.DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn)
         */
        vpnNeighborMacs?: string[];
        vpnPathSla?: outputs.org.DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn). ordered-
         */
        vpnPaths?: string[];
    }

    export interface DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists {
        route?: string;
        /**
         * Name of the vrf instance, it can also be the name of the VPN or wan if they
         */
        vrfName: string;
    }

    export interface DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla {
        maxJitter?: number;
        maxLatency?: number;
        maxLoss?: number;
    }

    export interface DeviceprofileGatewayServicePolicy {
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`
         */
        action?: string;
        /**
         * For SRX-only
         */
        antivirus?: outputs.org.DeviceprofileGatewayServicePolicyAntivirus;
        /**
         * For SRX Only
         */
        appqoe?: outputs.org.DeviceprofileGatewayServicePolicyAppqoe;
        ewfs?: outputs.org.DeviceprofileGatewayServicePolicyEwf[];
        idp?: outputs.org.DeviceprofileGatewayServicePolicyIdp;
        /**
         * access within the same VRF
         */
        localRouting?: boolean;
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy name)
         */
        name?: string;
        /**
         * By default, we derive all paths available and use them. Optionally, you can customize by using `pathPreference`
         */
        pathPreference?: string;
        /**
         * Used to link servicepolicy defined at org level and overwrite some attributes
         */
        servicepolicyId?: string;
        /**
         * Required when `servicepolicyId` is not defined. List of Applications / Desctinations
         */
        services: string[];
        /**
         * For SRX-only
         */
        sslProxy?: outputs.org.DeviceprofileGatewayServicePolicySslProxy;
        /**
         * Required when `servicepolicyId` is not defined. List of Networks / Users
         */
        tenants: string[];
    }

    export interface DeviceprofileGatewayServicePolicyAntivirus {
        /**
         * org-level AV Profile can be used, this takes precendence over 'profile'
         */
        avprofileId?: string;
        enabled: boolean;
        /**
         * Default / noftp / httponly / or keys from av_profiles
         */
        profile?: string;
    }

    export interface DeviceprofileGatewayServicePolicyAppqoe {
        enabled: boolean;
    }

    export interface DeviceprofileGatewayServicePolicyEwf {
        alertOnly?: boolean;
        blockMessage?: string;
        enabled: boolean;
        /**
         * enum: `critical`, `standard`, `strict`
         */
        profile: string;
    }

    export interface DeviceprofileGatewayServicePolicyIdp {
        alertOnly: boolean;
        enabled: boolean;
        /**
         * org_level IDP Profile can be used, this takes precedence over `profile`
         */
        idpprofileId?: string;
        /**
         * enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles
         */
        profile: string;
    }

    export interface DeviceprofileGatewayServicePolicySslProxy {
        /**
         * enum: `medium`, `strong`, `weak`
         */
        ciphersCategory: string;
        enabled: boolean;
    }

    export interface DeviceprofileGatewayTunnelConfigs {
        autoProvision?: outputs.org.DeviceprofileGatewayTunnelConfigsAutoProvision;
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ikeLifetime?: number;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`
         */
        ikeMode: string;
        /**
         * If `provider`==`custom-ipsec`
         */
        ikeProposals?: outputs.org.DeviceprofileGatewayTunnelConfigsIkeProposal[];
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ipsecLifetime?: number;
        /**
         * Only if  `provider`==`custom-ipsec`
         */
        ipsecProposals?: outputs.org.DeviceprofileGatewayTunnelConfigsIpsecProposal[];
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        localId?: string;
        /**
         * Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`
         */
        mode: string;
        /**
         * If `provider`==`custom-ipsec`, networks reachable via this tunnel
         */
        networks: string[];
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        primary?: outputs.org.DeviceprofileGatewayTunnelConfigsPrimary;
        /**
         * Only if `provider`==`custom-ipsec`
         */
        probe?: outputs.org.DeviceprofileGatewayTunnelConfigsProbe;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`
         */
        protocol?: string;
        /**
         * Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
         */
        provider?: string;
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        psk?: string;
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        secondary?: outputs.org.DeviceprofileGatewayTunnelConfigsSecondary;
        /**
         * Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`
         */
        version: string;
    }

    export interface DeviceprofileGatewayTunnelConfigsAutoProvision {
        enable?: boolean;
        /**
         * API override for POP selection
         */
        latlng?: outputs.org.DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng;
        primary?: outputs.org.DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary;
        /**
         * enum: `jse-ipsec`, `zscaler-ipsec`
         */
        provider: string;
        /**
         * API override for POP selection
         */
        region?: string;
        secondary?: outputs.org.DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary;
    }

    export interface DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng {
        lat: number;
        lng: number;
    }

    export interface DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface DeviceprofileGatewayTunnelConfigsIkeProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface DeviceprofileGatewayTunnelConfigsIpsecProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * Only if `provider`==`custom-ipsec`. enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface DeviceprofileGatewayTunnelConfigsPrimary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface DeviceprofileGatewayTunnelConfigsProbe {
        /**
         * How often to trigger the probe
         */
        interval?: number;
        /**
         * Number of consecutive misses before declaring the tunnel down
         */
        threshold?: number;
        /**
         * Time within which to complete the connectivity check
         */
        timeout?: number;
        /**
         * enum: `http`, `icmp`
         */
        type: string;
    }

    export interface DeviceprofileGatewayTunnelConfigsSecondary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface DeviceprofileGatewayTunnelProviderOptions {
        /**
         * For jse-ipsec, this allows provisioning of adequate resource on JSE. Make sure adequate licenses are added
         */
        jse?: outputs.org.DeviceprofileGatewayTunnelProviderOptionsJse;
        /**
         * For zscaler-ipsec and zscaler-gre
         */
        zscaler?: outputs.org.DeviceprofileGatewayTunnelProviderOptionsZscaler;
    }

    export interface DeviceprofileGatewayTunnelProviderOptionsJse {
        numUsers?: number;
        /**
         * JSE Organization name
         */
        orgName?: string;
    }

    export interface DeviceprofileGatewayTunnelProviderOptionsZscaler {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to enforce user authentication
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * `sub-locations` can be used for specific uses cases to define different configuration based on the user network
         */
        subLocations?: outputs.org.DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation[];
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
        /**
         * Location uses proxy chaining to forward traffic
         */
        xffForwardEnabled?: boolean;
    }

    export interface DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to authenticate users
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * Network name
         */
        name?: string;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
    }

    export interface DeviceprofileGatewayVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface DeviceprofileGatewayVrfInstances {
        networks?: string[];
    }

    export interface EvpnTopologyEvpnOptions {
        /**
         * optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
         */
        autoLoopbackSubnet: string;
        /**
         * optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
         */
        autoLoopbackSubnet6: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet6?: string;
        /**
         * optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
         * when `routedAt` != `core`, whether to do virtual-gateway at core as well
         */
        coreAsBorder: boolean;
        overlay?: outputs.org.EvpnTopologyEvpnOptionsOverlay;
        /**
         * by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
         * if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
         */
        perVlanVgaV4Mac: boolean;
        /**
         * optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
         */
        routedAt: string;
        underlay?: outputs.org.EvpnTopologyEvpnOptionsUnderlay;
        /**
         * optional, for EX9200 only to seggregate virtual-switches
         */
        vsInstances?: {[key: string]: outputs.org.EvpnTopologyEvpnOptionsVsInstances};
    }

    export interface EvpnTopologyEvpnOptionsOverlay {
        /**
         * Overlay BGP Local AS Number
         */
        as: number;
    }

    export interface EvpnTopologyEvpnOptionsUnderlay {
        /**
         * Underlay BGP Base AS Number
         */
        asBase: number;
        routedIdPrefix?: string;
        /**
         * underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
         */
        subnet?: string;
        /**
         * if v6 is desired for underlay
         */
        useIpv6: boolean;
    }

    export interface EvpnTopologyEvpnOptionsVsInstances {
        networks?: string[];
    }

    export interface EvpnTopologySwitches {
        deviceprofileId: string;
        evpnId: number;
        mac: string;
        model: string;
        /**
         * optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g. 
         *   * for CLOS, to group dist / access switches into pods
         *   * for ERB/CRB, to group dist / esilag-access into pods
         */
        pod: number;
        /**
         * by default, core switches are assumed to be connecting all pods. 
         * if you want to limit the pods, you can specify pods.
         */
        pods: number[];
        /**
         * use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
         */
        role: string;
        routerId: string;
        siteId: string;
    }

    export interface GatewaytemplateBgpConfig {
        authKey?: string;
        /**
         * When bfdMultiplier is configured alone. Default:
         *   * 1000 if `type`==`external`
         *   * 350 `type`==`internal`
         */
        bfdMinimumInterval: number;
        /**
         * When bfdMinimumIntervalIsConfigured alone
         */
        bfdMultiplier: number;
        /**
         * BFD provides faster path failure detection and is enabled by default
         */
        disableBfd: boolean;
        export?: string;
        /**
         * Default export policies if no per-neighbor policies defined
         */
        exportPolicy?: string;
        /**
         * By default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
         */
        extendedV4Nexthop?: boolean;
        /**
         * `0` means disable
         */
        gracefulRestartTime: number;
        holdTime: number;
        import?: string;
        /**
         * Default import policies if no per-neighbor policies defined
         */
        importPolicy?: string;
        localAs?: number;
        neighborAs?: number;
        /**
         * If per-neighbor as is desired. Property key is the neighbor address
         */
        neighbors?: {[key: string]: outputs.org.GatewaytemplateBgpConfigNeighbors};
        /**
         * If `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
         */
        networks: string[];
        /**
         * By default, we'll re-advertise all learned BGP routers toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * If `type`==`tunnel`
         */
        tunnelName?: string;
        /**
         * enum: `external`, `internal`
         */
        type?: string;
        /**
         * network name. enum: `lan`, `tunnel`, `vpn`, `wan`
         */
        via: string;
        vpnName?: string;
        /**
         * If `via`==`wan`
         */
        wanName?: string;
    }

    export interface GatewaytemplateBgpConfigNeighbors {
        /**
         * If true, the BGP session to this neighbor will be administratively disabled/shutdown
         */
        disabled: boolean;
        exportPolicy?: string;
        holdTime: number;
        importPolicy?: string;
        /**
         * Assuming BGP neighbor is directly connected
         */
        multihopTtl?: number;
        neighborAs?: number;
    }

    export interface GatewaytemplateDhcpdConfig {
        /**
         * Property key is the network name
         */
        config?: {[key: string]: outputs.org.GatewaytemplateDhcpdConfigConfig};
        /**
         * If set to `false`, disable the DHCP server
         */
        enabled: boolean;
    }

    export interface GatewaytemplateDhcpdConfigConfig {
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsServers: string[];
        /**
         * If `type`==`local` or `type6`==`local` - optional, if not defined, system one will be used
         */
        dnsSuffixes: string[];
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
         */
        fixedBindings?: {[key: string]: outputs.org.GatewaytemplateDhcpdConfigConfigFixedBindings};
        /**
         * If `type`==`local` - optional, `ip` will be used if not provided
         */
        gateway?: string;
        /**
         * If `type`==`local`
         */
        ipEnd?: string;
        /**
         * If `type6`==`local`
         */
        ipEnd6?: string;
        /**
         * If `type`==`local`
         */
        ipStart?: string;
        /**
         * If `type6`==`local`
         */
        ipStart6?: string;
        /**
         * In seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
         */
        leaseTime: number;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is the DHCP option number
         */
        options?: {[key: string]: outputs.org.GatewaytemplateDhcpdConfigConfigOptions};
        /**
         * `serverIdOverride`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
         * should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
         */
        serverIdOverride: boolean;
        /**
         * If `type`==`relay`
         */
        servers: string[];
        /**
         * If `type6`==`relay`
         */
        servers6s: string[];
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type: string;
        /**
         * enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
         */
        type6: string;
        /**
         * If `type`==`local` or `type6`==`local`. Property key is <enterprise number>:<sub option code>, with
         *   * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
         *   * sub option code: 1-255, sub-option code
         */
        vendorEncapsulated?: {[key: string]: outputs.org.GatewaytemplateDhcpdConfigConfigVendorEncapsulated};
    }

    export interface GatewaytemplateDhcpdConfigConfigFixedBindings {
        ip: string;
        name?: string;
    }

    export interface GatewaytemplateDhcpdConfigConfigOptions {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface GatewaytemplateDhcpdConfigConfigVendorEncapsulated {
        /**
         * enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
         */
        type?: string;
        value?: string;
    }

    export interface GatewaytemplateExtraRoutes {
        via: string;
    }

    export interface GatewaytemplateExtraRoutes6 {
        via: string;
    }

    export interface GatewaytemplateIdpProfiles {
        /**
         * enum: `critical`, `standard`, `strict`
         */
        baseProfile?: string;
        name?: string;
        orgId?: string;
        overwrites?: outputs.org.GatewaytemplateIdpProfilesOverwrite[];
    }

    export interface GatewaytemplateIdpProfilesOverwrite {
        /**
         * enum:
         *   * alert (default)
         *   * drop: siliently dropping packets
         *   * close: notify client/server to close connection
         */
        action: string;
        matching?: outputs.org.GatewaytemplateIdpProfilesOverwriteMatching;
        name?: string;
    }

    export interface GatewaytemplateIdpProfilesOverwriteMatching {
        attackNames?: string[];
        dstSubnets?: string[];
        severities?: string[];
    }

    export interface GatewaytemplateIpConfigs {
        ip: string;
        netmask: string;
        /**
         * Optional list of secondary IPs in CIDR format
         */
        secondaryIps: string[];
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface GatewaytemplateNetwork {
        /**
         * Whether to disallow Mist Devices in the network
         */
        disallowMistServices: boolean;
        gateway?: string;
        gateway6?: string;
        internalAccess?: outputs.org.GatewaytemplateNetworkInternalAccess;
        /**
         * Whether this network has direct internet access
         */
        internetAccess?: outputs.org.GatewaytemplateNetworkInternetAccess;
        /**
         * Whether to allow clients in the network to talk to each other
         */
        isolation?: boolean;
        /**
         * Whether to enable multicast support (only PIM-sparse mode is supported)
         */
        multicast?: outputs.org.GatewaytemplateNetworkMulticast;
        name: string;
        /**
         * For a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
         */
        routedForNetworks?: string[];
        subnet: string;
        subnet6?: string;
        /**
         * Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
         */
        tenants?: {[key: string]: outputs.org.GatewaytemplateNetworkTenants};
        vlanId?: string;
        /**
         * Property key is the VPN name. Whether this network can be accessed from vpn
         */
        vpnAccess?: {[key: string]: outputs.org.GatewaytemplateNetworkVpnAccess};
    }

    export interface GatewaytemplateNetworkInternalAccess {
        enabled?: boolean;
    }

    export interface GatewaytemplateNetworkInternetAccess {
        createSimpleServicePolicy: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.GatewaytemplateNetworkInternetAccessDestinationNat};
        enabled?: boolean;
        /**
         * By default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
         */
        restricted: boolean;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat?: {[key: string]: outputs.org.GatewaytemplateNetworkInternetAccessStaticNat};
    }

    export interface GatewaytemplateNetworkInternetAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        /**
         * The Destination NAT destination IP Address. Must be a Port (i.e. "443") or a Variable (i.e. "{{myvar}}")
         */
        port?: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity
         */
        wanName?: string;
    }

    export interface GatewaytemplateNetworkInternetAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. "{{myvar}}")
         */
        wanName?: string;
    }

    export interface GatewaytemplateNetworkMulticast {
        /**
         * If the network will only be the soruce of the multicast traffic, IGMP can be disabled
         */
        disableIgmp: boolean;
        enabled: boolean;
        /**
         * Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example "225.1.0.3/32")
         */
        groups?: {[key: string]: outputs.org.GatewaytemplateNetworkMulticastGroups};
    }

    export interface GatewaytemplateNetworkMulticastGroups {
        /**
         * RP (rendezvous point) IP Address
         */
        rpIp?: string;
    }

    export interface GatewaytemplateNetworkTenants {
        addresses?: string[];
    }

    export interface GatewaytemplateNetworkVpnAccess {
        /**
         * If `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
         */
        advertisedSubnet?: string;
        /**
         * Whether to allow ping from vpn into this routed network
         */
        allowPing?: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.GatewaytemplateNetworkVpnAccessDestinationNat};
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
         */
        natPool?: string;
        /**
         * toward LAN-side BGP peers
         */
        noReadvertiseToLanBgp: boolean;
        /**
         * toward LAN-side OSPF peers
         */
        noReadvertiseToLanOspf: boolean;
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        noReadvertiseToOverlay?: boolean;
        /**
         * By default, the routes are only readvertised toward the same vrf on spoke. To allow it to be leaked to other vrfs
         */
        otherVrfs: string[];
        /**
         * Whether this network is routable
         */
        routed?: boolean;
        /**
         * If `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
         */
        sourceNat: outputs.org.GatewaytemplateNetworkVpnAccessSourceNat;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat: {[key: string]: outputs.org.GatewaytemplateNetworkVpnAccessStaticNat};
        /**
         * toward overlay, how HUB should deal with routes it received from Spokes
         */
        summarizedSubnet?: string;
        /**
         * toward LAN-side BGP peers
         */
        summarizedSubnetToLanBgp?: string;
        /**
         * toward LAN-side OSPF peers
         */
        summarizedSubnetToLanOspf?: string;
    }

    export interface GatewaytemplateNetworkVpnAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        port?: string;
    }

    export interface GatewaytemplateNetworkVpnAccessSourceNat {
        externalIp?: string;
    }

    export interface GatewaytemplateNetworkVpnAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
    }

    export interface GatewaytemplateOobIpConfig {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        /**
         * If `type`==`static`
         */
        ip?: string;
        /**
         * If `type`==`static`
         */
        netmask?: string;
        /**
         * For HA Cluster, node1 can have different IP Config
         */
        node1: outputs.org.GatewaytemplateOobIpConfigNode1;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface GatewaytemplateOobIpConfigNode1 {
        /**
         * If `type`==`static`
         */
        gateway?: string;
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`
         */
        netmask?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf?: boolean;
        /**
         * Whether to use `mgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut?: boolean;
        vlanId?: string;
    }

    export interface GatewaytemplatePathPreferences {
        paths?: outputs.org.GatewaytemplatePathPreferencesPath[];
        /**
         * enum: `ecmp`, `ordered`, `weighted`
         */
        strategy: string;
    }

    export interface GatewaytemplatePathPreferencesPath {
        cost?: number;
        /**
         * For SSR Only. `true`, if this specific path is undesired
         */
        disabled?: boolean;
        /**
         * Only if `type`==`local`, if a different gateway is desired
         */
        gatewayIp?: string;
        /**
         * Only if `type`==`vpn`, if this vpn path can be used for internet
         */
        internetAccess?: boolean;
        /**
         * Required when 
         *   * `type`==`vpn`: the name of the VPN Path to use 
         *   * `type`==`wan`: the name of the WAN interface to use
         */
        name?: string;
        /**
         * Required when `type`==`local`
         */
        networks: string[];
        /**
         * If `type`==`local`, if destination IP is to be replaced
         */
        targetIps: string[];
        /**
         * enum: `local`, `tunnel`, `vpn`, `wan`
         */
        type?: string;
        /**
         * Optional if `type`==`vpn`
         */
        wanName?: string;
    }

    export interface GatewaytemplatePortConfig {
        /**
         * If `aggregated`==`true`. To disable LCP support for the AE interface
         */
        aeDisableLacp: boolean;
        /**
         * If `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
         */
        aeIdx?: string;
        /**
         * For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability. Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end. **Note:** Turning this on will enable force-up on one of the interfaces in the bundle only
         */
        aeLacpForceUp: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm, set it to true
         */
        critical: boolean;
        /**
         * Interface Description. Can be a variable (i.e. "{{myvar}}")
         */
        description?: string;
        disableAutoneg: boolean;
        /**
         * Port admin up (true) / down (false)
         */
        disabled: boolean;
        /**
         * if `wanType`==`dsl`. enum: `adsl`, `vdsl`
         */
        dslType: string;
        /**
         * If `wanType`==`dsl`, 16 bit int
         */
        dslVci: number;
        /**
         * If `wanType`==`dsl`, 8 bit int
         */
        dslVpi: number;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Junos IP Config
         */
        ipConfig?: outputs.org.GatewaytemplatePortConfigIpConfig;
        /**
         * If `wanType`==`lte`
         */
        lteApn?: string;
        /**
         * if `wanType`==`lte`. enum: `chap`, `none`, `pap`
         */
        lteAuth: string;
        lteBackup?: boolean;
        /**
         * If `wanType`==`lte`
         */
        ltePassword?: string;
        /**
         * If `wanType`==`lte`
         */
        lteUsername?: string;
        mtu?: number;
        /**
         * Name that we'll use to derive config
         */
        name?: string;
        /**
         * if `usage`==`lan`, name of the `junipermist.org.Network` resource
         */
        networks: string[];
        /**
         * For Q-in-Q
         */
        outerVlanId?: number;
        poeDisabled: boolean;
        /**
         * Only for SRX and if `usage`==`lan`, the name of the Network to be used as the Untagged VLAN
         */
        portNetwork?: string;
        /**
         * Whether to preserve dscp when sending traffic over VPN (SSR-only)
         */
        preserveDscp: boolean;
        /**
         * If HA mode
         */
        redundant: boolean;
        /**
         * If HA mode
         */
        rethIdx?: number;
        /**
         * If HA mode
         */
        rethNode?: string;
        /**
         * SSR only - supporting vlan-based redundancy (matching the size of `networks`)
         */
        rethNodes: string[];
        speed: string;
        /**
         * When SSR is running as VM, this is required on certain hosting platforms
         */
        ssrNoVirtualMac: boolean;
        /**
         * For SSR only
         */
        svrPortRange: string;
        trafficShaping?: outputs.org.GatewaytemplatePortConfigTrafficShaping;
        /**
         * port usage name. enum: `haControl`, `haData`, `lan`, `wan`
         */
        usage: string;
        vlanId?: string;
        /**
         * Property key is the VPN name
         */
        vpnPaths?: {[key: string]: outputs.org.GatewaytemplatePortConfigVpnPaths};
        /**
         * Only when `wanType`==`broadband`. enum: `default`, `max`, `recommended`
         */
        wanArpPolicer: string;
        /**
         * Only if `usage`==`wan`, optional. If spoke should reach this port by a different IP
         */
        wanExtIp?: string;
        /**
         * Only if `usage`==`wan`. Property Key is the destianation CIDR (e.g "100.100.100.0/24")
         */
        wanExtraRoutes?: {[key: string]: outputs.org.GatewaytemplatePortConfigWanExtraRoutes};
        /**
         * Only if `usage`==`wan`. If some networks are connected to this WAN port, it can be added here so policies can be defined
         */
        wanNetworks: string[];
        /**
         * Only if `usage`==`wan`
         */
        wanProbeOverride?: outputs.org.GatewaytemplatePortConfigWanProbeOverride;
        /**
         * Only if `usage`==`wan`, optional. By default, source-NAT is performed on all WAN Ports using the interface-ip
         */
        wanSourceNat?: outputs.org.GatewaytemplatePortConfigWanSourceNat;
        /**
         * Only if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
         */
        wanType: string;
    }

    export interface GatewaytemplatePortConfigIpConfig {
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dns?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0)
         */
        dnsSuffixes?: string[];
        /**
         * Except for out-of_band interface (vme/em0/fxp0). Interface Default Gateway IP Address (i.e. "192.168.1.1") or a Variable (i.e. "{{myvar}}")
         */
        gateway?: string;
        /**
         * Interface IP Address (i.e. "192.168.1.8") or a Variable (i.e. "{{myvar}}")
         */
        ip?: string;
        /**
         * Used only if `subnet` is not specified in `networks`. Interface Netmask (i.e. "/24") or a Variable (i.e. "{{myvar}}")
         */
        netmask?: string;
        /**
         * Optional, the network to be used for mgmt
         */
        network?: string;
        /**
         * If `type`==`pppoe`
         */
        poserPassword?: string;
        /**
         * if `type`==`pppoe`. enum: `chap`, `none`, `pap`
         */
        pppoeAuth: string;
        /**
         * If `type`==`pppoe`
         */
        pppoeUsername?: string;
        /**
         * enum: `dhcp`, `pppoe`, `static`
         */
        type: string;
    }

    export interface GatewaytemplatePortConfigTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface GatewaytemplatePortConfigVpnPaths {
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `broadband`, `lte`
         */
        bfdProfile: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. Whether to use tunnel mode. SSR only
         */
        bfdUseTunnelMode: boolean;
        /**
         * Only if the VPN `type`==`mesh`
         */
        linkName?: string;
        /**
         * Only if the VPN `type`==`hubSpoke`. For a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
         */
        preference?: number;
        /**
         * Only if the VPN `type`==`hubSpoke`. enum: `hub`, `spoke`
         */
        role: string;
        trafficShaping?: outputs.org.GatewaytemplatePortConfigVpnPathsTrafficShaping;
    }

    export interface GatewaytemplatePortConfigVpnPathsTrafficShaping {
        /**
         * percentages for differet class of traffic: high / medium / low / best-effort. Sum must be equal to 100
         */
        classPercentages?: number[];
        enabled: boolean;
        /**
         * Interface Transmit Cap in kbps
         */
        maxTxKbps?: number;
    }

    export interface GatewaytemplatePortConfigWanExtraRoutes {
        via?: string;
    }

    export interface GatewaytemplatePortConfigWanProbeOverride {
        ips?: string[];
        /**
         * enum: `broadband`, `lte`
         */
        probeProfile: string;
    }

    export interface GatewaytemplatePortConfigWanSourceNat {
        /**
         * Or to disable the source-nat
         */
        disabled: boolean;
        /**
         * If alternative natPool is desired
         */
        natPool?: string;
    }

    export interface GatewaytemplateRoutingPolicies {
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        terms?: outputs.org.GatewaytemplateRoutingPoliciesTerm[];
    }

    export interface GatewaytemplateRoutingPoliciesTerm {
        /**
         * When used as import policy
         */
        action?: outputs.org.GatewaytemplateRoutingPoliciesTermAction;
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        matching?: outputs.org.GatewaytemplateRoutingPoliciesTermMatching;
    }

    export interface GatewaytemplateRoutingPoliciesTermAction {
        accept?: boolean;
        addCommunities?: string[];
        /**
         * For SSR, hub decides how VRF routes are leaked on spoke
         */
        addTargetVrfs?: string[];
        /**
         * route aggregation
         */
        aggregates?: string[];
        /**
         * When used as export policy, optional
         */
        communities?: string[];
        /**
         * When used as export policy, optional. To exclude certain AS
         */
        excludeAsPaths?: string[];
        excludeCommunities?: string[];
        /**
         * When used as export policy, optional
         */
        exportCommunitites?: string[];
        /**
         * Optional, for an import policy, localPreference can be changed
         */
        localPreference?: string;
        /**
         * When used as export policy, optional. By default, the local AS will be prepended, to change it
         */
        prependAsPaths?: string[];
    }

    export interface GatewaytemplateRoutingPoliciesTermMatching {
        /**
         * takes regular expression
         */
        asPaths?: string[];
        communities?: string[];
        networks?: string[];
        /**
         * zero or more criteria/filter can be specified to match the term, all criteria have to be met
         */
        prefixes?: string[];
        /**
         * `direct`, `bgp`, `osp`, ...
         */
        protocols?: string[];
        routeExists?: outputs.org.GatewaytemplateRoutingPoliciesTermMatchingRouteExists;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn)
         */
        vpnNeighborMacs?: string[];
        vpnPathSla?: outputs.org.GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla;
        /**
         * overlay-facing criteria (used for bgpConfig where via=vpn). ordered-
         */
        vpnPaths?: string[];
    }

    export interface GatewaytemplateRoutingPoliciesTermMatchingRouteExists {
        route?: string;
        /**
         * Name of the vrf instance, it can also be the name of the VPN or wan if they
         */
        vrfName: string;
    }

    export interface GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla {
        maxJitter?: number;
        maxLatency?: number;
        maxLoss?: number;
    }

    export interface GatewaytemplateServicePolicy {
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`
         */
        action?: string;
        /**
         * For SRX-only
         */
        antivirus?: outputs.org.GatewaytemplateServicePolicyAntivirus;
        /**
         * For SRX Only
         */
        appqoe?: outputs.org.GatewaytemplateServicePolicyAppqoe;
        ewfs?: outputs.org.GatewaytemplateServicePolicyEwf[];
        idp?: outputs.org.GatewaytemplateServicePolicyIdp;
        /**
         * access within the same VRF
         */
        localRouting?: boolean;
        /**
         * Required when `servicepolicyId` is not defined, optional otherwise (override the servicepolicy name)
         */
        name?: string;
        /**
         * By default, we derive all paths available and use them. Optionally, you can customize by using `pathPreference`
         */
        pathPreference?: string;
        /**
         * Used to link servicepolicy defined at org level and overwrite some attributes
         */
        servicepolicyId?: string;
        /**
         * Required when `servicepolicyId` is not defined. List of Applications / Desctinations
         */
        services: string[];
        /**
         * For SRX-only
         */
        sslProxy?: outputs.org.GatewaytemplateServicePolicySslProxy;
        /**
         * Required when `servicepolicyId` is not defined. List of Networks / Users
         */
        tenants: string[];
    }

    export interface GatewaytemplateServicePolicyAntivirus {
        /**
         * org-level AV Profile can be used, this takes precendence over 'profile'
         */
        avprofileId?: string;
        enabled: boolean;
        /**
         * Default / noftp / httponly / or keys from av_profiles
         */
        profile?: string;
    }

    export interface GatewaytemplateServicePolicyAppqoe {
        enabled: boolean;
    }

    export interface GatewaytemplateServicePolicyEwf {
        alertOnly?: boolean;
        blockMessage?: string;
        enabled: boolean;
        /**
         * enum: `critical`, `standard`, `strict`
         */
        profile: string;
    }

    export interface GatewaytemplateServicePolicyIdp {
        alertOnly: boolean;
        enabled: boolean;
        /**
         * org_level IDP Profile can be used, this takes precedence over `profile`
         */
        idpprofileId?: string;
        /**
         * enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles
         */
        profile: string;
    }

    export interface GatewaytemplateServicePolicySslProxy {
        /**
         * enum: `medium`, `strong`, `weak`
         */
        ciphersCategory: string;
        enabled: boolean;
    }

    export interface GatewaytemplateTunnelConfigs {
        autoProvision?: outputs.org.GatewaytemplateTunnelConfigsAutoProvision;
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ikeLifetime?: number;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `aggressive`, `main`
         */
        ikeMode: string;
        /**
         * If `provider`==`custom-ipsec`
         */
        ikeProposals?: outputs.org.GatewaytemplateTunnelConfigsIkeProposal[];
        /**
         * Only if `provider`==`custom-ipsec`. Must be between 180 and 86400
         */
        ipsecLifetime?: number;
        /**
         * Only if  `provider`==`custom-ipsec`
         */
        ipsecProposals?: outputs.org.GatewaytemplateTunnelConfigsIpsecProposal[];
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        localId?: string;
        /**
         * Required if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`. enum: `active-active`, `active-standby`
         */
        mode: string;
        /**
         * If `provider`==`custom-ipsec`, networks reachable via this tunnel
         */
        networks: string[];
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        primary?: outputs.org.GatewaytemplateTunnelConfigsPrimary;
        /**
         * Only if `provider`==`custom-ipsec`
         */
        probe?: outputs.org.GatewaytemplateTunnelConfigsProbe;
        /**
         * Only if `provider`==`custom-ipsec`. enum: `gre`, `ipsec`
         */
        protocol?: string;
        /**
         * Only if `auto_provision.enabled`==`false`. enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
         */
        provider?: string;
        /**
         * Required if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        psk?: string;
        /**
         * Only if `provider`==`zscaler-ipsec`, `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        secondary?: outputs.org.GatewaytemplateTunnelConfigsSecondary;
        /**
         * Only if `provider`==`custom-gre` or `provider`==`custom-ipsec`. enum: `1`, `2`
         */
        version: string;
    }

    export interface GatewaytemplateTunnelConfigsAutoProvision {
        enable?: boolean;
        /**
         * API override for POP selection
         */
        latlng?: outputs.org.GatewaytemplateTunnelConfigsAutoProvisionLatlng;
        primary?: outputs.org.GatewaytemplateTunnelConfigsAutoProvisionPrimary;
        /**
         * enum: `jse-ipsec`, `zscaler-ipsec`
         */
        provider: string;
        /**
         * API override for POP selection
         */
        region?: string;
        secondary?: outputs.org.GatewaytemplateTunnelConfigsAutoProvisionSecondary;
    }

    export interface GatewaytemplateTunnelConfigsAutoProvisionLatlng {
        lat: number;
        lng: number;
    }

    export interface GatewaytemplateTunnelConfigsAutoProvisionPrimary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface GatewaytemplateTunnelConfigsAutoProvisionSecondary {
        probeIps?: string[];
        /**
         * Optional, only needed if `varsOnly`==`false`
         */
        wanNames?: string[];
    }

    export interface GatewaytemplateTunnelConfigsIkeProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface GatewaytemplateTunnelConfigsIpsecProposal {
        /**
         * enum: `md5`, `sha1`, `sha2`
         */
        authAlgo?: string;
        /**
         * Only if `provider`==`custom-ipsec`. enum:
         *   * 1
         *   * 2 (1024-bit)
         *   * 5
         *   * 14 (default, 2048-bit)
         *   * 15 (3072-bit)
         *   * 16 (4096-bit)
         *   * 19 (256-bit ECP)
         *   * 20 (384-bit ECP)
         *   * 21 (521-bit ECP)
         *   * 24 (2048-bit ECP)
         */
        dhGroup: string;
        /**
         * enum: `3des`, `aes128`, `aes256`, `aesGcm128`, `aesGcm256`
         */
        encAlgo: string;
    }

    export interface GatewaytemplateTunnelConfigsPrimary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface GatewaytemplateTunnelConfigsProbe {
        /**
         * How often to trigger the probe
         */
        interval?: number;
        /**
         * Number of consecutive misses before declaring the tunnel down
         */
        threshold?: number;
        /**
         * Time within which to complete the connectivity check
         */
        timeout?: number;
        /**
         * enum: `http`, `icmp`
         */
        type: string;
    }

    export interface GatewaytemplateTunnelConfigsSecondary {
        hosts: string[];
        /**
         * Only if `provider`==`zscaler-gre`, `provider`==`jse-ipsec`, `provider`==`custom-ipsec` or `provider`==`custom-gre`
         */
        internalIps?: string[];
        probeIps?: string[];
        /**
         * Only if  `provider`==`jse-ipsec` or `provider`==`custom-ipsec`
         */
        remoteIds?: string[];
        wanNames: string[];
    }

    export interface GatewaytemplateTunnelProviderOptions {
        /**
         * For jse-ipsec, this allows provisioning of adequate resource on JSE. Make sure adequate licenses are added
         */
        jse?: outputs.org.GatewaytemplateTunnelProviderOptionsJse;
        /**
         * For zscaler-ipsec and zscaler-gre
         */
        zscaler?: outputs.org.GatewaytemplateTunnelProviderOptionsZscaler;
    }

    export interface GatewaytemplateTunnelProviderOptionsJse {
        numUsers?: number;
        /**
         * JSE Organization name
         */
        orgName?: string;
    }

    export interface GatewaytemplateTunnelProviderOptionsZscaler {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to enforce user authentication
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * `sub-locations` can be used for specific uses cases to define different configuration based on the user network
         */
        subLocations?: outputs.org.GatewaytemplateTunnelProviderOptionsZscalerSubLocation[];
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
        /**
         * Location uses proxy chaining to forward traffic
         */
        xffForwardEnabled?: boolean;
    }

    export interface GatewaytemplateTunnelProviderOptionsZscalerSubLocation {
        aupBlockInternetUntilAccepted?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display Acceptable Use Policy (AUP)
         */
        aupEnabled?: boolean;
        /**
         * Proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
         */
        aupForceSslInspection?: boolean;
        /**
         * Required if `aupEnabled`==`true`. Days before AUP is requested again
         */
        aupTimeoutInDays?: number;
        /**
         * Enable this option to authenticate users
         */
        authRequired?: boolean;
        /**
         * Can only be `true` when `authRequired`==`false`, display caution notification for non-authenticated users
         */
        cautionEnabled?: boolean;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        dnBandwidth?: number;
        /**
         * Required if `surrogate_IP`==`true`, idle Time to Disassociation
         */
        idleTimeInMinutes?: number;
        /**
         * Network name
         */
        name?: string;
        /**
         * If `true`, enable the firewall control option
         */
        ofwEnabled?: boolean;
        /**
         * Can only be `true` when `authRequired`==`true`. Map a user to a private IP address so it applies the user's policies, instead of the location's policies
         */
        surrogateIp?: boolean;
        /**
         * Can only be `true` when `surrogate_IP`==`true`, enforce surrogate IP for known browsers
         */
        surrogateIpEnforcedForKnownBrowsers?: boolean;
        /**
         * Required if `surrogate_IP_enforced_for_known_browsers`==`true`, must be lower or equal than `idleTimeInMinutes`, refresh Time for re-validation of Surrogacy
         */
        surrogateRefreshTimeInMinutes?: number;
        /**
         * Download bandwidth cap of the link, in Mbps. Disabled if not set
         */
        upBandwidth?: number;
    }

    export interface GatewaytemplateVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface GatewaytemplateVrfInstances {
        networks?: string[];
    }

    export interface GetAlarmtemplatesOrgAlarmtemplate {
        /**
         * when the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Delivery object to configure the alarm delivery
         */
        delivery: outputs.org.GetAlarmtemplatesOrgAlarmtemplateDelivery;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * when the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        /**
         * Some string to name the alarm template
         */
        name: string;
        orgId: string;
        /**
         * Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name.
         */
        rules: {[key: string]: outputs.org.GetAlarmtemplatesOrgAlarmtemplateRules};
    }

    export interface GetAlarmtemplatesOrgAlarmtemplateDelivery {
        /**
         * List of additional email string to deliver the alarms via emails
         */
        additionalEmails: string[];
        /**
         * Whether to enable the alarm delivery via emails or not
         */
        enabled: boolean;
        /**
         * Whether to deliver the alarms via emails to Org admins or not
         */
        toOrgAdmins: boolean;
        /**
         * Whether to deliver the alarms via emails to Site admins or not
         */
        toSiteAdmins: boolean;
    }

    export interface GetAlarmtemplatesOrgAlarmtemplateRules {
        /**
         * Delivery object to configure the alarm delivery
         */
        delivery: outputs.org.GetAlarmtemplatesOrgAlarmtemplateRulesDelivery;
        enabled: boolean;
    }

    export interface GetAlarmtemplatesOrgAlarmtemplateRulesDelivery {
        /**
         * List of additional email string to deliver the alarms via emails
         */
        additionalEmails: string[];
        /**
         * Whether to enable the alarm delivery via emails or not
         */
        enabled: boolean;
        /**
         * Whether to deliver the alarms via emails to Org admins or not
         */
        toOrgAdmins: boolean;
        /**
         * Whether to deliver the alarms via emails to Site admins or not
         */
        toSiteAdmins: boolean;
    }

    export interface GetAvprofilesOrgAvprofile {
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * enum: `block`, `permit`
         */
        fallbackAction: string;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * In KB
         */
        maxFilesize: number;
        mimeWhitelists: string[];
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        orgId: string;
        /**
         * List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
         */
        protocols: string[];
        urlWhitelists: string[];
    }

    export interface GetDeviceprofilesApDeviceprofile {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetDeviceprofilesGatewayDeviceprofile {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetEvpnTopologiesOrgEvpnTopology {
        /**
         * when the object has been created, in epoch
         */
        createdTime: number;
        /**
         * EVPN Options
         */
        evpnOptions: outputs.org.GetEvpnTopologiesOrgEvpnTopologyEvpnOptions;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * when the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        orgId: string;
        /**
         * Property key is the pod number
         */
        podNames: {[key: string]: string};
    }

    export interface GetEvpnTopologiesOrgEvpnTopologyEvpnOptions {
        /**
         * optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
         */
        autoLoopbackSubnet: string;
        /**
         * optional, for dhcp*relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server*id-overrides
         */
        autoLoopbackSubnet6: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet6: string;
        /**
         * optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway. When `routedAt` != `core`, whether to do virtual-gateway at core as well
         */
        coreAsBorder: boolean;
        overlay: outputs.org.GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsOverlay;
        /**
         * only for by Core-Distribution architecture when `evpn_options.routed_at`==`core`. By default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4*mac. If enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan*id/256, YY=vlan_id%256)'
         */
        perVlanVgaV4Mac: boolean;
        /**
         * optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
         */
        routedAt: string;
        underlay: outputs.org.GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay;
        /**
         * optional, for EX9200 only to seggregate virtual-switches
         */
        vsInstances: {[key: string]: outputs.org.GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsVsInstances};
    }

    export interface GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsOverlay {
        /**
         * Overlay BGP Local AS Number
         */
        as: number;
    }

    export interface GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsUnderlay {
        /**
         * Underlay BGP Base AS Number
         */
        asBase: number;
        routedIdPrefix: string;
        /**
         * underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
         */
        subnet: string;
        /**
         * if v6 is desired for underlay
         */
        useIpv6: boolean;
    }

    export interface GetEvpnTopologiesOrgEvpnTopologyEvpnOptionsVsInstances {
        networks: string[];
    }

    export interface GetGatewaytemplatesOrgGatewaytemplate {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetIdpprofilesOrgIdpprofile {
        /**
         * enum: `critical`, `standard`, `strict`
         */
        baseProfile: string;
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        orgId: string;
        overwrites: outputs.org.GetIdpprofilesOrgIdpprofileOverwrite[];
    }

    export interface GetIdpprofilesOrgIdpprofileOverwrite {
        /**
         * enum:
         *   * alert (default)
         *   * drop: siliently dropping packets
         *   * close: notify client/server to close connection
         */
        action: string;
        matching: outputs.org.GetIdpprofilesOrgIdpprofileOverwriteMatching;
        name: string;
    }

    export interface GetIdpprofilesOrgIdpprofileOverwriteMatching {
        attackNames: string[];
        dstSubnets: string[];
        severities: string[];
    }

    export interface GetInventoryOrgInventory {
        /**
         * only if `type`==`switch` or `type`==`gateway`
         * whether the switch/gateway is adopted
         */
        adopted: boolean;
        /**
         * device claim code
         */
        claimCode: string;
        /**
         * whether the device is connected
         */
        connected: boolean;
        /**
         * deviceprofile id if assigned, null if not assigned
         */
        deviceprofileId: string;
        /**
         * hostname reported by the device
         */
        hostname: string;
        /**
         * device hardware revision number
         */
        hwRev: string;
        /**
         * device id
         */
        id: string;
        jsi: boolean;
        /**
         * device MAC address
         */
        mac: string;
        /**
         * device model
         */
        model: string;
        /**
         * device name if configured
         */
        name: string;
        orgId: string;
        /**
         * device serial
         */
        serial: string;
        /**
         * Site ID where the device is assigned to
         */
        siteId: string;
        /**
         * device stock keeping unit
         */
        sku: string;
        /**
         * enum: `ap`, `gateway`, `switch`
         */
        type: string;
        /**
         * if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Clust, MAC Address of the Cluster
         */
        vcMac: string;
    }

    export interface GetNacEndpointsOrgUsermac {
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        labels: string[];
        /**
         * only non-local-admin MAC is accepted
         */
        mac: string;
        name: string;
        notes: string;
        radiusGroup: string;
        vlan: string;
    }

    export interface GetNacrulesOrgNacrule {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetNactagsOrgNactag {
        /**
         * Can be set to true to allow the override by usermac result
         */
        allowUsermacOverride: boolean;
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * If `type`==`egressVlanNames`, list of egress vlans to return
         */
        egressVlanNames: string[];
        /**
         * If `type`==`gbpTag`
         */
        gbpTag: number;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * if `type`==`match`. enum: `certCn`, `certIssuer`, `certSan`, `certSerial`, `certSub`, `certTemplate`, `clientMac`, `idpRole`, `ingressVlan`, `mdmStatus`, `nasIp`, `radiusGroup`, `realm`, `ssid`, `userName`, `usermacLabel`
         */
        match: string;
        /**
         * This field is applicable only when `type`==`match`
         *   * `false`: means it is sufficient to match any of the values (i.e., match-any behavior)
         *   * `true`: means all values should be matched (i.e., match-all behavior)
         *
         *
         * Currently it makes sense to set this field to `true` only if the `match`==`idpRole` or `match`==`usermacLabel`
         */
        matchAll: boolean;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        orgId: string;
        /**
         * If `type`==`radiusAttrs`, user can specify a list of one or more standard attributes in the field "radiusAttrs". 
         * It is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.
         * Note that it is allowed to have more than one radiusAttrs in the result of a given rule.
         */
        radiusAttrs: string[];
        /**
         * If `type`==`radiusGroup`
         */
        radiusGroup: string;
        /**
         * If `type`==`radiusVendorAttrs`, user can specify a list of one or more vendor-specific attributes in the field "radiusVendorAttrs". 
         * It is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.
         * Note that it is allowed to have more than one radiusVendorAttrs in the result of a given rule.
         */
        radiusVendorAttrs: string[];
        /**
         * If `type`==`session_timeout, in seconds
         */
        sessionTimeout: number;
        /**
         * enum: `egressVlanNames`, `gbpTag`, `match`, `radiusAttrs`, `radiusGroup`, `radiusVendorAttrs`, `sessionTimeout`, `usernameAttr`, `vlan`
         */
        type: string;
        /**
         * enum: `automatic`, `cn`, `dns`, `email`, `upn`
         */
        usernameAttr: string;
        /**
         * If `type`==`match`
         */
        values: string[];
        /**
         * If `type`==`vlan`
         */
        vlan: string;
    }

    export interface GetNetworksOrgNetwork {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetNetworktemplatesOrgNetworktemplate {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetPsksOrgPsk {
        /**
         * sso id for psk created from psk portal
         */
        adminSsoId: string;
        /**
         * when the object has been created, in epoch
         */
        createdTime: number;
        /**
         * email to send psk expiring notifications to
         */
        email: string;
        /**
         * Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
         */
        expireTime: number;
        /**
         * Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
         */
        expiryNotificationTime: number;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
         */
        mac: string;
        /**
         * if `usage`==`macs`, this list contains N number of client mac addresses or mac patterns(11:22:*) or both. This list is capped at 5000
         */
        macs: string[];
        /**
         * For Org PSK Only. Max concurrent users for this PSK key. Default is 0 (unlimited)
         */
        maxUsage: number;
        /**
         * when the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        note: string;
        /**
         * If set to true, reminder notification will be sent when psk is about to expire
         */
        notifyExpiry: boolean;
        /**
         * If set to true, notification will be sent when psk is created or edited
         */
        notifyOnCreateOrEdit: boolean;
        /**
         * previous passphrase of the PSK if it has been rotated
         */
        oldPassphrase: string;
        orgId: string;
        /**
         * passphrase of the PSK (8-63 character or 64 in hex)
         */
        passphrase: string;
        role: string;
        /**
         * SSID this PSK should be applicable to
         */
        ssid: string;
        /**
         * enum: `macs`, `multi`, `single`
         */
        usage: string;
        vlanId: string;
    }

    export interface GetRftemplatesOrgRftemplate {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetServicepoliciesOrgServicepolicy {
        /**
         * enum: `allow`, `deny`
         */
        action: string;
        /**
         * For SRX Only
         */
        appqoe: outputs.org.GetServicepoliciesOrgServicepolicyAppqoe;
        createdTime: number;
        ewfs: outputs.org.GetServicepoliciesOrgServicepolicyEwf[];
        id: string;
        idp: outputs.org.GetServicepoliciesOrgServicepolicyIdp;
        /**
         * access within the same VRF
         */
        localRouting: boolean;
        modifiedTime: number;
        name: string;
        orgId: string;
        /**
         * by default, we derive all paths available and use them
         * optionally, you can customize by using `pathPreference`
         */
        pathPreference: string;
        services: string[];
        tenants: string[];
    }

    export interface GetServicepoliciesOrgServicepolicyAppqoe {
        enabled: boolean;
    }

    export interface GetServicepoliciesOrgServicepolicyEwf {
        alertOnly: boolean;
        blockMessage: string;
        enabled: boolean;
        /**
         * enum: `critical`, `standard`, `strict`
         */
        profile: string;
    }

    export interface GetServicepoliciesOrgServicepolicyIdp {
        alertOnly: boolean;
        enabled: boolean;
        /**
         * org_level IDP Profile can be used, this takes precedence over `profile`
         */
        idpprofileId: string;
        /**
         * `strict` (default) / `standard` / or keys from from idp_profiles
         */
        profile: string;
    }

    export interface GetServicesOrgService {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetSitegroupsOrgSitegroup {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
        siteIds: string[];
    }

    export interface GetSsoRolesOrgSsoRole {
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        orgId: string;
        privileges: outputs.org.GetSsoRolesOrgSsoRolePrivilege[];
    }

    export interface GetSsoRolesOrgSsoRolePrivilege {
        /**
         * access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
         */
        role: string;
        /**
         * enum: `org`, `site`, `sitegroup`
         */
        scope: string;
        /**
         * If `scope`==`site`
         */
        siteId: string;
        /**
         * If `scope`==`sitegroup`
         */
        sitegroupId: string;
        /**
         * Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users. Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  
         * You can define custom roles by adding the `views` attribute along with `role` when assigning privileges.  
         * Below are the list of supported UI views. Note that this is UI only feature.  
         *
         *   | UI View | Required Role | Description |
         *   | --- | --- | --- |
         *   | `reporting` | `read` | full access to all analytics tools |
         *   | `marketing` | `read` | can view analytics and location maps |
         *   | `superObserver` | `read` | can view all the organization except the subscription page |
         *   | `location` | `write` | can view and manage location maps, can view analytics |
         *   | `security` | `write` | can view and manage site labels, policies and security |
         *   | `switchAdmin` | `helpdesk` | can view and manage Switch ports, can view wired clients |
         *   | `mxedgeAdmin` | `admin` | can view and manage Mist edges and Mist tunnels |
         *   | `lobbyAdmin` | `admin` | full access to Org and Site Pre-shared keys |
         */
        views: string[];
    }

    export interface GetVpnsOrgVpn {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
        paths: {[key: string]: outputs.org.GetVpnsOrgVpnPaths};
    }

    export interface GetVpnsOrgVpnPaths {
        /**
         * enum: `broadband`, `lte`
         */
        bfdProfile: string;
        /**
         * if different from the wan port
         */
        ip: string;
        pod: number;
    }

    export interface GetWebhooksOrgWebhook {
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Whether webhook is enabled
         */
        enabled: boolean;
        /**
         * If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
         */
        headers: {[key: string]: string};
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        /**
         * Name of the webhook
         */
        name: string;
        /**
         * Required when `oauth2GrantType`==`clientCredentials`
         */
        oauth2ClientId: string;
        /**
         * Required when `oauth2GrantType`==`clientCredentials`
         */
        oauth2ClientSecret: string;
        /**
         * required when `type`==`oauth2`. enum: `clientCredentials`, `password`
         */
        oauth2GrantType: string;
        /**
         * Required when `oauth2GrantType`==`password`
         */
        oauth2Password: string;
        /**
         * Required when `type`==`oauth2`, if provided, will be used in the token request
         */
        oauth2Scopes: string[];
        /**
         * Required when `type`==`oauth2`
         */
        oauth2TokenUrl: string;
        /**
         * Required when `oauth2GrantType`==`password`
         */
        oauth2Username: string;
        orgId: string;
        /**
         * Only if `type`=`http-post`
         */
        secret: string;
        /**
         * Required if `type`=`splunk`. If splunkToken is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.
         */
        splunkToken: string;
        /**
         * List of supported webhook topics available with the API Call List Webhook Topics
         */
        topics: string[];
        /**
         * enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
         */
        type: string;
        url: string;
        /**
         * When url uses HTTPS, whether to verify the certificate
         */
        verifyCert: boolean;
    }

    export interface GetWlansOrgWlan {
        /**
         * Enable coa-immediate-update and address-change-immediate-update on the access profile.
         */
        acctImmediateUpdate: boolean;
        /**
         * How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
         */
        acctInterimInterval: number;
        /**
         * List of RADIUS accounting servers, optional, order matters where the first one is treated as primary
         */
        acctServers: outputs.org.GetWlansOrgWlanAcctServer[];
        /**
         * Airwatch wlan settings
         */
        airwatch: outputs.org.GetWlansOrgWlanAirwatch;
        /**
         * Only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through
         */
        allowIpv6Ndp: boolean;
        /**
         * Only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through
         */
        allowMdns: boolean;
        /**
         * Only applicable when `limitBcast`==`true`, which allows SSDP
         */
        allowSsdp: boolean;
        /**
         * List of device ids
         */
        apIds: string[];
        /**
         * Bandwidth limiting for apps (applies to up/down)
         */
        appLimit: outputs.org.GetWlansOrgWlanAppLimit;
        /**
         * APp qos wlan settings
         */
        appQos: outputs.org.GetWlansOrgWlanAppQos;
        /**
         * enum: `aps`, `site`, `wxtags`
         */
        applyTo: string;
        /**
         * Whether to enable smart arp filter
         */
        arpFilter: boolean;
        /**
         * Authentication wlan settings
         */
        auth: outputs.org.GetWlansOrgWlanAuth;
        /**
         * When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`
         */
        authServerSelection: string;
        /**
         * List of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one is treated as primary
         */
        authServers: outputs.org.GetWlansOrgWlanAuthServer[];
        /**
         * Optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers
         */
        authServersNasId: string;
        /**
         * Optional, NAS-IP-ADDRESS to use
         */
        authServersNasIp: string;
        /**
         * Radius auth session retries. Following fast timers are set if "fastDot1xTimers" knob is enabled. ‘retries’  are set to value of auth_servers_retries. ‘max-requests’ is also set when setting authServersRetries and is set to default value to 3.
         */
        authServersRetries: number;
        /**
         * Radius auth session timeout. Following fast timers are set if "fastDot1xTimers" knob is enabled. ‘quite-period’  and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’ is also set when setting authServersTimeout and is set to default value of 10.
         */
        authServersTimeout: number;
        /**
         * Whether to enable band_steering, this works only when band==both
         */
        bandSteer: boolean;
        /**
         * Force dualBand capable client to connect to 5G
         */
        bandSteerForceBand5: boolean;
        /**
         * List of radios that the wlan should apply to.
         */
        bands: string[];
        /**
         * Whether to block the clients in the blacklist (up to first 256 macs)
         */
        blockBlacklistClients: boolean;
        /**
         * Bonjour gateway wlan settings
         */
        bonjour: outputs.org.GetWlansOrgWlanBonjour;
        /**
         * Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA: https://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html
         */
        ciscoCwa: outputs.org.GetWlansOrgWlanCiscoCwa;
        /**
         * In kbps
         */
        clientLimitDown: number;
        /**
         * If downlink limiting per-client is enabled
         */
        clientLimitDownEnabled: boolean;
        /**
         * In kbps
         */
        clientLimitUp: number;
        /**
         * If uplink limiting per-client is enabled
         */
        clientLimitUpEnabled: boolean;
        /**
         * List of COA (change of authorization) servers, optional
         */
        coaServers: outputs.org.GetWlansOrgWlanCoaServer[];
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Some old WLAN drivers may not be compatible
         */
        disable11ax: boolean;
        /**
         * To disable ht or vht rates
         */
        disableHtVhtRates: boolean;
        /**
         * Whether to disable U-APSD
         */
        disableUapsd: boolean;
        /**
         * Disable sending v2 roam notification messages
         */
        disableV1RoamNotify: boolean;
        /**
         * Disable sending v2 roam notification messages
         */
        disableV2RoamNotify: boolean;
        /**
         * When any of the following is true, this WLAN will be disabled
         *    * cannot get IP
         *    * cannot obtain default gateway
         *    * cannot reach default gateway
         */
        disableWhenGatewayUnreachable: boolean;
        disableWhenMxtunnelDown: boolean;
        /**
         * Whether to disable WMM
         */
        disableWmm: boolean;
        /**
         * For radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)
         */
        dnsServerRewrite: outputs.org.GetWlansOrgWlanDnsServerRewrite;
        dtim: number;
        /**
         * For dynamic PSK where we get perUser PSK from Radius. dynamicPsk allows PSK to be selected at runtime depending on context (wlan/site/user/...) thus following configurations are assumed (currently)
         *   * PSK will come from RADIUS server
         *   * AP sends client MAC as username and password (i.e. `enableMacAuth` is assumed)
         *   * AP sends BSSID:SSID as Caller-Station-ID
         *   * `authServers` is required
         *   * PSK will come from cloud WLC if source is cloudPsks
         *   * defaultPsk will be used if cloud WLC is not available
         *   * `multiPskOnly` and `psk` is ignored
         *   * `pairwise` can only be wpa2-ccmp (for now, wpa3 support on the roadmap)
         */
        dynamicPsk: outputs.org.GetWlansOrgWlanDynamicPsk;
        /**
         * For 802.1x
         */
        dynamicVlan: outputs.org.GetWlansOrgWlanDynamicVlan;
        /**
         * Enable AP-AP keycaching via multicast
         */
        enableLocalKeycaching: boolean;
        /**
         * By default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where client is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wirelessBridging can be enabled
         */
        enableWirelessBridging: boolean;
        /**
         * If the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcpTracking will cut down DHCP response packets to be forwarded to wireless
         */
        enableWirelessBridgingDhcpTracking: boolean;
        /**
         * If this wlan is enabled
         */
        enabled: boolean;
        /**
         * If set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and ‘auth_server_retries’ .
         */
        fastDot1xTimers: boolean;
        /**
         * Whether to hide SSID in beacon
         */
        hideSsid: boolean;
        /**
         * Include hostname inside IE in AP beacons / probe responses
         */
        hostnameIe: boolean;
        /**
         * Hostspot 2.0 wlan settings
         */
        hotspot20: outputs.org.GetWlansOrgWlanHotspot20;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        injectDhcpOption82: outputs.org.GetWlansOrgWlanInjectDhcpOption82;
        /**
         * where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `siteMxedge`, `wxtunnel`
         */
        interface: string;
        /**
         * Whether to stop clients to talk to each other
         */
        isolation: boolean;
        /**
         * If isolation is enabled, whether to deny clients to talk to L2 on the LAN
         */
        l2Isolation: boolean;
        /**
         * Legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning! Enabling this will cause problem for iOS devices.
         */
        legacyOverds: boolean;
        /**
         * Whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)
         */
        limitBcast: boolean;
        /**
         * Limit probe response base on some heuristic rules
         */
        limitProbeResponse: boolean;
        /**
         * Max idle time in seconds
         */
        maxIdletime: number;
        /**
         * Maximum number of client connected to the SSID. `0` means unlimited
         */
        maxNumClients: number;
        mistNac: outputs.org.GetWlansOrgWlanMistNac;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        mspId: string;
        /**
         * When `interface`=`mxtunnel`, id of the Mist Tunnel
         */
        mxtunnelIds: string[];
        /**
         * When `interface`=`siteMedge`, name of the mxtunnel that in mxtunnels under Site Setting
         */
        mxtunnelNames: string[];
        /**
         * Whether to only allow client to use DNS that we’ve learned from DHCP response
         */
        noStaticDns: boolean;
        /**
         * Whether to only allow client that we’ve learned from DHCP exchange to talk
         */
        noStaticIp: boolean;
        orgId: string;
        /**
         * Portal wlan settings
         */
        portal: outputs.org.GetWlansOrgWlanPortal;
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        portalAllowedHostnames: string[];
        /**
         * List of CIDRs
         */
        portalAllowedSubnets: string[];
        /**
         * APi secret (auto-generated) that can be used to sign guest authorization requests
         */
        portalApiSecret: string;
        /**
         * List of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames
         */
        portalDeniedHostnames: string[];
        /**
         * Url of portal background image
         */
        portalImage: string;
        portalSsoUrl: string;
        qos: outputs.org.GetWlansOrgWlanQos;
        /**
         * RadSec settings
         */
        radsec: outputs.org.GetWlansOrgWlanRadsec;
        /**
         * Property key is the RF band. enum: `24`, `5`, `6`
         */
        rateset: {[key: string]: outputs.org.GetWlansOrgWlanRateset};
        /**
         * When different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)
         */
        reconnectClientsWhenRoamingMxcluster: boolean;
        /**
         * enum: `11r`, `OKC`, `NONE`
         */
        roamMode: string;
        /**
         * WLAN operating schedule, default is disabled
         */
        schedule: outputs.org.GetWlansOrgWlanSchedule;
        /**
         * Whether to exclude this WLAN from SLE metrics
         */
        sleExcluded: boolean;
        /**
         * Name of the SSID
         */
        ssid: string;
        templateId: string;
        /**
         * If `auth.type`==`eap` or `auth.type`==`psk`, should only be set for legacy client, such as pre-2004, 802.11b devices
         */
        useEapolV1: boolean;
        /**
         * If vlan tagging is enabled
         */
        vlanEnabled: boolean;
        vlanId: string;
        /**
         * if `vlanEnabled`==`true` and `vlanPooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool
         */
        vlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a deterministic algorithm
         */
        vlanPooling: boolean;
        /**
         * In kbps
         */
        wlanLimitDown: number;
        /**
         * If downlink limiting for whole wlan is enabled
         */
        wlanLimitDownEnabled: boolean;
        /**
         * In kbps
         */
        wlanLimitUp: number;
        /**
         * If uplink limiting for whole wlan is enabled
         */
        wlanLimitUpEnabled: boolean;
        /**
         * List of wxtag_ids
         */
        wxtagIds: string[];
        /**
         * When `interface`=`wxtunnel`, id of the WXLAN Tunnel
         */
        wxtunnelId: string;
        /**
         * When `interface`=`wxtunnel`, remote tunnel identifier
         */
        wxtunnelRemoteId: string;
    }

    export interface GetWlansOrgWlanAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat: string;
        keywrapKek: string;
        keywrapMack: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface GetWlansOrgWlanAirwatch {
        /**
         * API Key
         */
        apiKey: string;
        /**
         * Console URL
         */
        consoleUrl: string;
        enabled: boolean;
        /**
         * Password
         */
        password: string;
        /**
         * Username
         */
        username: string;
    }

    export interface GetWlansOrgWlanAppLimit {
        /**
         * Map from app key to bandwidth in kbps. 
         * Property key is the app key, defined in Get Application List
         */
        apps: {[key: string]: number};
        enabled: boolean;
        /**
         * Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
         */
        wxtagIds: {[key: string]: number};
    }

    export interface GetWlansOrgWlanAppQos {
        apps: {[key: string]: outputs.org.GetWlansOrgWlanAppQosApps};
        enabled: boolean;
        others: outputs.org.GetWlansOrgWlanAppQosOther[];
    }

    export interface GetWlansOrgWlanAppQosApps {
        dscp: number;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        dstSubnet: string;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        srcSubnet: string;
    }

    export interface GetWlansOrgWlanAppQosOther {
        dscp: number;
        dstSubnet: string;
        portRanges: string;
        protocol: string;
        srcSubnet: string;
    }

    export interface GetWlansOrgWlanAuth {
        /**
         * SAE anti-clogging token threshold
         */
        anticlogThreshold: number;
        /**
         * Whether to trigger EAP reauth when the session ends
         */
        eapReauth: boolean;
        /**
         * Whether to enable MAC Auth, uses the same auth_servers
         */
        enableMacAuth: boolean;
        /**
         * When `type`==`wep`
         */
        keyIdx: number;
        /**
         * When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
         */
        keys: string[];
        /**
         * When `type`==`psk`, whether to only use multi_psk
         */
        multiPskOnly: boolean;
        /**
         * if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
         */
        owe: string;
        /**
         * When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
         */
        pairwises: string[];
        /**
         * When `multiPskOnly`==`true`, whether private wlan is enabled
         */
        privateWlan: boolean;
        /**
         * When `type`==`psk`, 8-64 characters, or 64 hex characters
         */
        psk: string;
        /**
         * enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
         */
        type: string;
        /**
         * Enable WEP as secondary auth
         */
        wepAsSecondaryAuth: boolean;
    }

    export interface GetWlansOrgWlanAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat: string;
        keywrapKek: string;
        keywrapMack: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface GetWlansOrgWlanBonjour {
        /**
         * additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
         */
        additionalVlanIds: string[];
        /**
         * Whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
         */
        enabled: boolean;
        /**
         * What services are allowed. 
         * Property key is the service name
         */
        services: {[key: string]: outputs.org.GetWlansOrgWlanBonjourServices};
    }

    export interface GetWlansOrgWlanBonjourServices {
        /**
         * Whether to prevent wireless clients to discover bonjour devices on the same WLAN
         */
        disableLocal: boolean;
        /**
         * Optional, if the service is further restricted for certain RADIUS groups
         */
        radiusGroups: string[];
        /**
         * how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
         */
        scope: string;
    }

    export interface GetWlansOrgWlanCiscoCwa {
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        allowedHostnames: string[];
        /**
         * List of CIDRs
         */
        allowedSubnets: string[];
        /**
         * List of blocked CIDRs
         */
        blockedSubnets: string[];
        enabled: boolean;
    }

    export interface GetWlansOrgWlanCoaServer {
        /**
         * Whether to disable Event-Timestamp Check
         */
        disableEventTimestampCheck: boolean;
        enabled: boolean;
        ip: string;
        port: number;
        secret: string;
    }

    export interface GetWlansOrgWlanDnsServerRewrite {
        enabled: boolean;
        /**
         * Map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
         */
        radiusGroups: {[key: string]: string};
    }

    export interface GetWlansOrgWlanDynamicPsk {
        /**
         * Default PSK to use if cloud WLC is not available, 8-63 characters
         */
        defaultPsk: string;
        defaultVlanId: string;
        enabled: boolean;
        /**
         * When 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
         */
        forceLookup: boolean;
        /**
         * enum: `cloudPsks`, `radius`
         */
        source: string;
    }

    export interface GetWlansOrgWlanDynamicVlan {
        /**
         * Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
         */
        defaultVlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
         */
        enabled: boolean;
        /**
         * VLAN_ids to be locally bridged
         */
        localVlanIds: string[];
        /**
         * standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
         */
        type: string;
        /**
         * Map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
         *   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
         *   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
         */
        vlans: {[key: string]: string};
    }

    export interface GetWlansOrgWlanHotspot20 {
        domainNames: string[];
        /**
         * Whether to enable hotspot 2.0 config
         */
        enabled: boolean;
        naiRealms: string[];
        /**
         * List of operators to support
         */
        operators: string[];
        rcois: string[];
        /**
         * Venue name, default is site name
         */
        venueName: string;
    }

    export interface GetWlansOrgWlanInjectDhcpOption82 {
        /**
         * Information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
         *   * {{AP_MAC}}
         *   * {{AP_MAC_DASHED}}
         *   * {{AP_MODEL}}
         *   * {{AP_NAME}}
         *   * {{SITE_NAME}}
         *   * {{SSID}}
         */
        circuitId: string;
        /**
         * Whether to inject option 82 when forwarding DHCP packets
         */
        enabled: boolean;
    }

    export interface GetWlansOrgWlanMistNac {
        /**
         * When enabled:
         *   * `authServers` is ignored
         *   * `acctServers` is ignored
         *   * `auth_servers_*` are ignored
         *   * `coaServers` is ignored
         *   * `radsec` is ignored
         *   * `coaEnabled` is assumed
         */
        enabled: boolean;
    }

    export interface GetWlansOrgWlanPortal {
        /**
         * Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
         */
        allowWlanIdRoam: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        amazonClientId: string;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
         */
        amazonClientSecret: string;
        /**
         * Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        amazonEmailDomains: string[];
        /**
         * Whether amazon is enabled as a login method
         */
        amazonEnabled: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         */
        amazonExpire: number;
        /**
         * authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
         */
        auth: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client id
         */
        azureClientId: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client secret
         */
        azureClientSecret: string;
        /**
         * Whether Azure Active Directory is enabled as a login method
         */
        azureEnabled: boolean;
        /**
         * Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         */
        azureExpire: number;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory tenant id.
         */
        azureTenantId: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetPassword: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetSid: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetUserId: string;
        /**
         * Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         */
        bypassWhenCloudDown: boolean;
        /**
         * Required if `smsProvider`==`clickatell`
         */
        clickatellApiKey: string;
        /**
         * Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
         */
        crossSite: boolean;
        /**
         * Whether email (access code verification) is enabled as a login method
         */
        emailEnabled: boolean;
        /**
         * Whether guest portal is enabled
         */
        enabled: boolean;
        /**
         * How long to remain authorized, in minutes
         */
        expire: number;
        /**
         * Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         */
        externalPortalUrl: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        facebookClientId: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
         */
        facebookClientSecret: string;
        /**
         * Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        facebookEmailDomains: string[];
        /**
         * Whether facebook is enabled as a login method
         */
        facebookEnabled: boolean;
        /**
         * Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         */
        facebookExpire: number;
        /**
         * Whether to forward the user to another URL after authorized
         */
        forward: boolean;
        /**
         * URL to forward the user to
         */
        forwardUrl: string;
        /**
         * Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        googleClientId: string;
        /**
         * Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
         */
        googleClientSecret: string;
        /**
         * Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        googleEmailDomains: string[];
        /**
         * Whether Google is enabled as login method
         */
        googleEnabled: boolean;
        /**
         * Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         */
        googleExpire: number;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupPassword: string;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupUserid: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        microsoftClientId: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
         */
        microsoftClientSecret: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        microsoftEmailDomains: string[];
        /**
         * Whether microsoft 365 is enabled as a login method
         */
        microsoftEnabled: boolean;
        /**
         * Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         */
        microsoftExpire: number;
        /**
         * Whether password is enabled
         */
        passphraseEnabled: boolean;
        /**
         * Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         */
        passphraseExpire: number;
        /**
         * Required if `passphraseEnabled`==`true`.
         */
        password: string;
        /**
         * Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
         */
        predefinedSponsorsEnabled: boolean;
        /**
         * Whether to hide sponsor’s email from list of sponsors
         */
        predefinedSponsorsHideEmail: boolean;
        privacy: boolean;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelPassword: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelServiceId: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelUsername: string;
        /**
         * Whether sms is enabled as a login method
         */
        smsEnabled: boolean;
        /**
         * Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         */
        smsExpire: number;
        /**
         * Optional if `smsEnabled`==`true`. SMS Message format
         */
        smsMessageFormat: string;
        /**
         * Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
         */
        smsProvider: string;
        /**
         * Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
         */
        sponsorAutoApprove: boolean;
        /**
         * List of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
         */
        sponsorEmailDomains: string[];
        /**
         * Whether sponsor is enabled
         */
        sponsorEnabled: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         */
        sponsorExpire: number;
        /**
         * Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
         */
        sponsorLinkValidityDuration: string;
        /**
         * Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         */
        sponsorNotifyAll: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
         */
        sponsorStatusNotify: boolean;
        /**
         * object of allowed sponsors email with name. Required if `sponsorEnabled`
         *             is `true` and `sponsorEmailDomains` is empty.
         *
         *             Property key is the sponsor email, Property value is the sponsor name
         */
        sponsors: {[key: string]: string};
        /**
         * Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         */
        ssoDefaultRole: string;
        /**
         * Optionl if `wlanPortalAuth`==`sso`
         */
        ssoForcedRole: string;
        /**
         * Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
         */
        ssoIdpCert: string;
        /**
         * Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         */
        ssoIdpSignAlgo: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
         */
        ssoIdpSsoUrl: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP issuer URL
         */
        ssoIssuer: string;
        /**
         * Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
         */
        ssoNameidFormat: string;
        /**
         * Required if `smsProvider`==`telstra`, Client ID provided by Telstra
         */
        telstraClientId: string;
        /**
         * Required if `smsProvider`==`telstra`, Client secret provided by Telstra
         */
        telstraClientSecret: string;
        /**
         * Required if `smsProvider`==`twilio`, Auth token account with twilio account
         */
        twilioAuthToken: string;
        /**
         * Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         */
        twilioPhoneNumber: string;
        /**
         * Required if `smsProvider`==`twilio`, Account SID provided by Twilio
         */
        twilioSid: string;
    }

    export interface GetWlansOrgWlanQos {
        /**
         * enum: `background`, `bestEffort`, `video`, `voice`
         */
        class: string;
        /**
         * Whether to overwrite QoS
         */
        overwrite: boolean;
    }

    export interface GetWlansOrgWlanRadsec {
        coaEnabled: boolean;
        enabled: boolean;
        idleTimeout: number;
        /**
         * To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         */
        mxclusterIds: string[];
        /**
         * Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
         */
        proxyHosts: string[];
        /**
         * Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         */
        serverName: string;
        /**
         * List of RadSec Servers. Only if not Mist Edge.
         */
        servers: outputs.org.GetWlansOrgWlanRadsecServer[];
        /**
         * use mxedge(s) as RadSec Proxy
         */
        useMxedge: boolean;
        /**
         * To use Site mxedges when this WLAN does not use mxtunnel
         */
        useSiteMxedge: boolean;
    }

    export interface GetWlansOrgWlanRadsecServer {
        host: string;
        port: number;
    }

    export interface GetWlansOrgWlanRateset {
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
         */
        ht: string;
        /**
         * If `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values
         */
        legacies: string[];
        /**
         * Minimum RSSI for client to connect, 0 means not enforcing
         */
        minRssi: number;
        /**
         * Data Rates template to apply. enum: 
         *   * `no-legacy`: no 11b
         *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
         *   * `legacy-only`: disable 802.11n and 802.11ac
         *   * `high-density`: no 11b, no low rates
         *   * `custom`: user defined
         */
        template: string;
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
         */
        vht: string;
    }

    export interface GetWlansOrgWlanSchedule {
        enabled: boolean;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours: outputs.org.GetWlansOrgWlanScheduleHours;
    }

    export interface GetWlansOrgWlanScheduleHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface GetWlantemplatesOrgWlantemplate {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface GetWxtagsOrgWxtag {
        createdTime: number;
        id: string;
        modifiedTime: number;
        name: string;
        orgId: string;
    }

    export interface IdpprofileOverwrite {
        /**
         * enum:
         *   * alert (default)
         *   * drop: siliently dropping packets
         *   * close: notify client/server to close connection
         */
        action: string;
        matching?: outputs.org.IdpprofileOverwriteMatching;
        name: string;
    }

    export interface IdpprofileOverwriteMatching {
        attackNames?: string[];
        dstSubnets?: string[];
        severities?: string[];
    }

    export interface InventoryDevice {
        /**
         * used to claim the device to the Mist Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
         */
        claimCode: string;
        /**
         * deviceprofile id if assigned, null if not assigned
         */
        deviceprofileId: string;
        /**
         * hostname reported by the device
         */
        hostname: string;
        /**
         * device id
         */
        id: string;
        /**
         * used to managed a device already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
         */
        mac: string;
        /**
         * device model
         */
        model: string;
        orgId: string;
        /**
         * device serial
         */
        serial: string;
        /**
         * Site ID. Used to assign device to a Site
         */
        siteId?: string;
        /**
         * enum: `ap`, `gateway`, `switch`
         */
        type: string;
        /**
         * Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
         */
        unclaimWhenDestroyed: boolean;
        /**
         * if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
         */
        vcMac: string;
    }

    export interface InventoryInventory {
        /**
         * device claim code
         */
        claimCode: string;
        /**
         * deviceprofile id if assigned, null if not assigned
         */
        deviceprofileId: string;
        /**
         * hostname reported by the device
         */
        hostname: string;
        /**
         * device id
         */
        id: string;
        /**
         * device MAC address
         */
        mac: string;
        /**
         * device model
         */
        model: string;
        orgId: string;
        /**
         * device serial
         */
        serial: string;
        /**
         * Site ID. Used to assign device to a Site
         */
        siteId?: string;
        /**
         * enum: `ap`, `gateway`, `switch`
         */
        type: string;
        /**
         * Unclaim the device from the Mist Organization when removed from the provider inventory. Default is `false`
         */
        unclaimWhenDestroyed: boolean;
        /**
         * if `type`==`switch` and device part of a Virtual Chassis, MAC Address of the Virtual Chassis. if `type`==`gateway` and device part of a Cluster, MAC Address of the Cluster
         */
        vcMac: string;
    }

    export interface NacruleMatching {
        /**
         * enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
         */
        authType?: string;
        nactags: string[];
        portTypes: string[];
        /**
         * list of site ids to match
         */
        siteIds: string[];
        /**
         * list of sitegroup ids to match
         */
        sitegroupIds: string[];
        /**
         * list of vendors to match
         */
        vendors: string[];
    }

    export interface NacruleNotMatching {
        /**
         * enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
         */
        authType?: string;
        nactags: string[];
        portTypes: string[];
        /**
         * list of site ids to match
         */
        siteIds: string[];
        /**
         * list of sitegroup ids to match
         */
        sitegroupIds: string[];
        /**
         * list of vendors to match
         */
        vendors: string[];
    }

    export interface NetworkInternalAccess {
        enabled?: boolean;
    }

    export interface NetworkInternetAccess {
        createSimpleServicePolicy: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.NetworkInternetAccessDestinationNat};
        enabled?: boolean;
        /**
         * by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
         */
        restricted: boolean;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat?: {[key: string]: outputs.org.NetworkInternetAccessStaticNat};
    }

    export interface NetworkInternetAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        /**
         * The Destination NAT destination IP Address. Must be a Port (i.e. "443") or a Variable (i.e. "{{myvar}}")
         */
        port?: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity
         */
        wanName?: string;
    }

    export interface NetworkInternetAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
        /**
         * SRX Only. If not set, we configure the nat policies against all WAN ports for simplicity. Can be a Variable (i.e. "{{myvar}}")
         */
        wanName?: string;
    }

    export interface NetworkMulticast {
        /**
         * if the network will only be the soruce of the multicast traffic, IGMP can be disabled
         */
        disableIgmp: boolean;
        enabled: boolean;
        /**
         * Group address to RP (rendezvous point) mapping. Property Key is the CIDR (example "225.1.0.3/32")
         */
        groups?: {[key: string]: outputs.org.NetworkMulticastGroups};
    }

    export interface NetworkMulticastGroups {
        /**
         * RP (rendezvous point) IP Address
         */
        rpIp?: string;
    }

    export interface NetworkTenants {
        addresses?: string[];
    }

    export interface NetworkVpnAccess {
        /**
         * if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
         */
        advertisedSubnet?: string;
        /**
         * whether to allow ping from vpn into this routed network
         */
        allowPing?: boolean;
        /**
         * Property key can be an External IP (i.e. "63.16.0.3"), an External IP:Port (i.e. "63.16.0.3:443"), an External Port (i.e. ":443"), an External CIDR (i.e. "63.16.0.0/30"), an External CIDR:Port (i.e. "63.16.0.0/30:443") or a Variable (i.e. "{{myvar}}"). At least one of the `internalIp` or `port` must be defined
         */
        destinationNat?: {[key: string]: outputs.org.NetworkVpnAccessDestinationNat};
        /**
         * if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
         */
        natPool?: string;
        /**
         * toward LAN-side BGP peers
         */
        noReadvertiseToLanBgp: boolean;
        /**
         * toward LAN-side OSPF peers
         */
        noReadvertiseToLanOspf: boolean;
        /**
         * toward overlay
         * how HUB should deal with routes it received from Spokes
         */
        noReadvertiseToOverlay?: boolean;
        /**
         * by default, the routes are only readvertised toward the same vrf on spoke
         * to allow it to be leaked to other vrfs
         */
        otherVrfs: string[];
        /**
         * whether this network is routable
         */
        routed?: boolean;
        /**
         * if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
         */
        sourceNat: outputs.org.NetworkVpnAccessSourceNat;
        /**
         * Property key may be an External IP Address (i.e. "63.16.0.3"), a CIDR (i.e. "63.16.0.12/20") or a Variable (i.e. "{{myvar}}")
         */
        staticNat: {[key: string]: outputs.org.NetworkVpnAccessStaticNat};
        /**
         * toward overlay
         * how HUB should deal with routes it received from Spokes
         */
        summarizedSubnet?: string;
        /**
         * toward LAN-side BGP peers
         */
        summarizedSubnetToLanBgp?: string;
        /**
         * toward LAN-side OSPF peers
         */
        summarizedSubnetToLanOspf?: string;
    }

    export interface NetworkVpnAccessDestinationNat {
        /**
         * The Destination NAT destination IP Address. Must be an IP (i.e. "192.168.70.30") or a Variable (i.e. "{{myvar}}")
         */
        internalIp?: string;
        name?: string;
        port?: string;
    }

    export interface NetworkVpnAccessSourceNat {
        externalIp?: string;
    }

    export interface NetworkVpnAccessStaticNat {
        /**
         * The Static NAT destination IP Address. Must be an IP Address (i.e. "192.168.70.3") or a Variable (i.e. "{{myvar}}")
         */
        internalIp: string;
        name: string;
    }

    export interface NetworktemplateAclPolicy {
        /**
         * ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        actions?: outputs.org.NetworktemplateAclPolicyAction[];
        name?: string;
        /**
         * ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        srcTags?: string[];
    }

    export interface NetworktemplateAclPolicyAction {
        /**
         * enum: `allow`, `deny`
         */
        action?: string;
        dstTag: string;
    }

    export interface NetworktemplateAclTags {
        /**
         * Required if
         *   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
         *   - `type`==`gbpResource`
         *   - `type`==`staticGbp` (applying gbp tag against matching conditions)
         */
        gbpTag?: number;
        /**
         * Required if 
         * - `type`==`mac`
         * - `type`==`staticGbp` if from matching mac
         */
        macs: string[];
        /**
         * If:
         *   * `type`==`mac` (optional. default is `any`)
         *   * `type`==`subnet` (optional. default is `any`)
         *   * `type`==`network`
         *   * `type`==`resource` (optional. default is `any`)
         *   * `type`==`staticGbp` if from matching network (vlan)
         */
        network?: string;
        /**
         * Required if:
         *   * `type`==`radiusGroup`
         *   * `type`==`staticGbp`
         * if from matching radius_group
         */
        radiusGroup?: string;
        /**
         * If `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
         */
        specs?: outputs.org.NetworktemplateAclTagsSpec[];
        /**
         * If 
         * - `type`==`subnet` 
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`staticGbp` if from matching subnet
         */
        subnets: string[];
        /**
         * enum: 
         *   * `any`: matching anything not identified
         *   * `dynamicGbp`: from the gbpTag received from RADIUS
         *   * `gbpResource`: can only be used in `dstTags`
         *   * `mac`
         *   * `network`
         *   * `radiusGroup`
         *   * `resource`: can only be used in `dstTags`
         *   * `staticGbp`: applying gbp tag against matching conditions
         *   * `subnet`'
         */
        type: string;
    }

    export interface NetworktemplateAclTagsSpec {
        /**
         * Matched dst port, "0" means any
         */
        portRange: string;
        /**
         * `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
         */
        protocol: string;
    }

    export interface NetworktemplateDhcpSnooping {
        allNetworks?: boolean;
        /**
         * Enable for dynamic ARP inspection check
         */
        enableArpSpoofCheck?: boolean;
        /**
         * Enable for check for forging source IP address
         */
        enableIpSourceGuard?: boolean;
        enabled?: boolean;
        /**
         * If `allNetworks`==`false`, list of network with DHCP snooping enabled
         */
        networks?: string[];
    }

    export interface NetworktemplateExtraRoutes {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.org.NetworktemplateExtraRoutesNextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface NetworktemplateExtraRoutes6 {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.org.NetworktemplateExtraRoutes6NextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface NetworktemplateExtraRoutes6NextQualified {
        metric?: number;
        preference?: number;
    }

    export interface NetworktemplateExtraRoutesNextQualified {
        metric?: number;
        preference?: number;
    }

    export interface NetworktemplateMistNac {
        enabled?: boolean;
        network?: string;
    }

    export interface NetworktemplateNetworks {
        /**
         * Only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
         */
        gateway?: string;
        /**
         * Only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
         */
        gateway6?: string;
        /**
         * whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
         */
        isolation: boolean;
        isolationVlanId?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet6?: string;
        vlanId: string;
    }

    export interface NetworktemplateOspfAreas {
        includeLoopback: boolean;
        networks: {[key: string]: outputs.org.NetworktemplateOspfAreasNetworks};
        /**
         * OSPF type. enum: `default`, `nssa`, `stub`
         */
        type: string;
    }

    export interface NetworktemplateOspfAreasNetworks {
        /**
         * Required if `authType`==`md5`. Property key is the key number
         */
        authKeys: {[key: string]: string};
        /**
         * Required if `authType`==`password`, the password, max length is 8
         */
        authPassword?: string;
        /**
         * auth type. enum: `md5`, `none`, `password`
         */
        authType: string;
        bfdMinimumInterval?: number;
        deadInterval?: number;
        exportPolicy?: string;
        helloInterval?: number;
        importPolicy?: string;
        /**
         * interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
         */
        interfaceType: string;
        metric?: number;
        /**
         * By default, we'll re-advertise all learned OSPF routes toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * Whether to send OSPF-Hello
         */
        passive: boolean;
    }

    export interface NetworktemplatePortMirroring {
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputNetworksIngresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsEgresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsIngresses: string[];
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputNetwork?: string;
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputPortId?: string;
    }

    export interface NetworktemplatePortUsages {
        /**
         * Only if `mode`==`trunk` whether to trunk all network/vlans
         */
        allNetworks: boolean;
        /**
         * Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
         */
        allowDhcpd?: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        allowMultipleSupplicants: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDown: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDownForUnkownClient: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        description?: string;
        /**
         * Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * Only if `mode`!=`dynamic` whether the port is disabled
         */
        disabled: boolean;
        /**
         * Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
         */
        dynamicVlanNetworks: string[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
         */
        enableMacAuth: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        enableQos: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
         */
        guestNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
         */
        interSwitchLink: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
         */
        macAuthOnly?: boolean;
        /**
         * Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
         */
        macAuthPreferred?: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
         */
        macAuthProtocol: string;
        /**
         * Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
         */
        macLimit: number;
        /**
         * `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
         */
        mode?: string;
        /**
         * Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
         */
        mtu?: number;
        /**
         * Only if `mode`==`trunk`, the list of network/vlans
         */
        networks: string[];
        /**
         * Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
         */
        persistMac: boolean;
        /**
         * Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
         */
        poeDisabled: boolean;
        /**
         * Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
         */
        portAuth?: string;
        /**
         * Only if `mode`!=`dynamic` native network/vlan for untagged traffic
         */
        portNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
         */
        reauthInterval: number;
        /**
         * Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
         */
        resetDefaultWhen: string;
        /**
         * Only if `mode`==`dynamic`
         */
        rules?: outputs.org.NetworktemplatePortUsagesRule[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
         */
        serverFailNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
         */
        serverRejectNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Switch storm control. Only if `mode`!=`dynamic`
         */
        stormControl?: outputs.org.NetworktemplatePortUsagesStormControl;
        /**
         * Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
         */
        stpEdge: boolean;
        stpNoRootPort: boolean;
        stpP2p: boolean;
        /**
         * Optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
         */
        uiEvpntopoId?: string;
        /**
         * If this is connected to a vstp network
         */
        useVstp: boolean;
        /**
         * Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
         */
        voipNetwork?: string;
    }

    export interface NetworktemplatePortUsagesRule {
        equals?: string;
        /**
         * Use `equalsAny` to match any item in a list
         */
        equalsAnies?: string[];
        /**
         * "[0:3]":"abcdef" > "abc"
         * "split(.)[1]": "a.b.c" > "b"
         * "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
         */
        expression?: string;
        /**
         * enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
         */
        src: string;
        /**
         * `portUsage` name
         */
        usage?: string;
    }

    export interface NetworktemplatePortUsagesStormControl {
        /**
         * Whether to disable storm control on broadcast traffic
         */
        noBroadcast: boolean;
        /**
         * Whether to disable storm control on multicast traffic
         */
        noMulticast: boolean;
        /**
         * Whether to disable storm control on registered multicast traffic
         */
        noRegisteredMulticast: boolean;
        /**
         * Whether to disable storm control on unknown unicast traffic
         */
        noUnknownUnicast: boolean;
        /**
         * Bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
         */
        percentage: number;
    }

    export interface NetworktemplateRadiusConfig {
        /**
         * How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
         */
        acctInterimInterval: number;
        acctServers?: outputs.org.NetworktemplateRadiusConfigAcctServer[];
        authServers?: outputs.org.NetworktemplateRadiusConfigAuthServer[];
        /**
         * Radius auth session retries
         */
        authServersRetries: number;
        /**
         * Radius auth session timeout
         */
        authServersTimeout: number;
        /**
         * Use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
         */
        network?: string;
        /**
         * Use `network`or `sourceIp`
         */
        sourceIp?: string;
    }

    export interface NetworktemplateRadiusConfigAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface NetworktemplateRadiusConfigAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface NetworktemplateRemoteSyslog {
        archive?: outputs.org.NetworktemplateRemoteSyslogArchive;
        console?: outputs.org.NetworktemplateRemoteSyslogConsole;
        enabled: boolean;
        files?: outputs.org.NetworktemplateRemoteSyslogFile[];
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        network?: string;
        sendToAllServers: boolean;
        servers?: outputs.org.NetworktemplateRemoteSyslogServer[];
        /**
         * enum: `millisecond`, `year`, `year millisecond`
         */
        timeFormat?: string;
        users?: outputs.org.NetworktemplateRemoteSyslogUser[];
    }

    export interface NetworktemplateRemoteSyslogArchive {
        files?: number;
        size?: string;
    }

    export interface NetworktemplateRemoteSyslogConsole {
        contents?: outputs.org.NetworktemplateRemoteSyslogConsoleContent[];
    }

    export interface NetworktemplateRemoteSyslogConsoleContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogFile {
        archive?: outputs.org.NetworktemplateRemoteSyslogFileArchive;
        contents?: outputs.org.NetworktemplateRemoteSyslogFileContent[];
        explicitPriority?: boolean;
        file?: string;
        match?: string;
        structuredData?: boolean;
    }

    export interface NetworktemplateRemoteSyslogFileArchive {
        files?: number;
        size?: string;
    }

    export interface NetworktemplateRemoteSyslogFileContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogServer {
        contents?: outputs.org.NetworktemplateRemoteSyslogServerContent[];
        explicitPriority?: boolean;
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        host?: string;
        match?: string;
        port: number;
        /**
         * enum: `tcp`, `udp`
         */
        protocol: string;
        routingInstance?: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        sourceAddress?: string;
        structuredData?: boolean;
        tag?: string;
    }

    export interface NetworktemplateRemoteSyslogServerContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogUser {
        contents?: outputs.org.NetworktemplateRemoteSyslogUserContent[];
        match?: string;
        user?: string;
    }

    export interface NetworktemplateRemoteSyslogUserContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateSnmpConfig {
        clientLists?: outputs.org.NetworktemplateSnmpConfigClientList[];
        contact?: string;
        description?: string;
        enabled: boolean;
        engineId?: string;
        location?: string;
        name?: string;
        network: string;
        trapGroups?: outputs.org.NetworktemplateSnmpConfigTrapGroup[];
        v2cConfigs?: outputs.org.NetworktemplateSnmpConfigV2cConfig[];
        v3Config?: outputs.org.NetworktemplateSnmpConfigV3Config;
        views?: outputs.org.NetworktemplateSnmpConfigView[];
    }

    export interface NetworktemplateSnmpConfigClientList {
        clientListName?: string;
        clients?: string[];
    }

    export interface NetworktemplateSnmpConfigTrapGroup {
        categories?: string[];
        /**
         * Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
         */
        groupName?: string;
        targets?: string[];
        /**
         * enum: `all`, `v1`, `v2`
         */
        version: string;
    }

    export interface NetworktemplateSnmpConfigV2cConfig {
        authorization?: string;
        /**
         * Client_list_name here should refer to clientList above
         */
        clientListName?: string;
        communityName?: string;
        /**
         * View name here should be defined in views above
         */
        view?: string;
    }

    export interface NetworktemplateSnmpConfigV3Config {
        notifies?: outputs.org.NetworktemplateSnmpConfigV3ConfigNotify[];
        notifyFilters?: outputs.org.NetworktemplateSnmpConfigV3ConfigNotifyFilter[];
        targetAddresses?: outputs.org.NetworktemplateSnmpConfigV3ConfigTargetAddress[];
        targetParameters?: outputs.org.NetworktemplateSnmpConfigV3ConfigTargetParameter[];
        usms?: outputs.org.NetworktemplateSnmpConfigV3ConfigUsm[];
        vacm?: outputs.org.NetworktemplateSnmpConfigV3ConfigVacm;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotify {
        name: string;
        tag: string;
        /**
         * enum: `inform`, `trap`
         */
        type: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotifyFilter {
        contents?: outputs.org.NetworktemplateSnmpConfigV3ConfigNotifyFilterContent[];
        profileName?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
        include?: boolean;
        oid: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigTargetAddress {
        address: string;
        addressMask: string;
        port: string;
        /**
         * Refer to notify tag, can be multiple with blank
         */
        tagList?: string;
        targetAddressName: string;
        /**
         * Refer to notify target parameters name
         */
        targetParameters?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigTargetParameter {
        /**
         * enum: `v1`, `v2c`, `v3`
         */
        messageProcessingModel: string;
        name: string;
        /**
         * Refer to profile-name in notify_filter
         */
        notifyFilter?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * Refer to securityName in usm
         */
        securityName?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigUsm {
        /**
         * enum: `localEngine`, `remoteEngine`
         */
        engineType: string;
        /**
         * Required only if `engineType`==`remoteEngine`
         */
        remoteEngineId?: string;
        users?: outputs.org.NetworktemplateSnmpConfigV3ConfigUsmUser[];
    }

    export interface NetworktemplateSnmpConfigV3ConfigUsmUser {
        /**
         * Not required if `authenticationType`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
         */
        authenticationPassword?: string;
        /**
         * sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
         */
        authenticationType?: string;
        /**
         * Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
         */
        encryptionPassword?: string;
        /**
         * enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
         */
        encryptionType?: string;
        name?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacm {
        accesses?: outputs.org.NetworktemplateSnmpConfigV3ConfigVacmAccess[];
        securityToGroup?: outputs.org.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmAccess {
        groupName?: string;
        prefixLists?: outputs.org.NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList[];
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
        /**
         * Only required if `type`==`contextPrefix`
         */
        contextPrefix?: string;
        /**
         * Refer to view name
         */
        notifyView?: string;
        /**
         * Refer to view name
         */
        readView?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `any`, `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * enum: `contextPrefix`, `defaultContextPrefix`
         */
        type?: string;
        /**
         * Refer to view name
         */
        writeView?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
        contents?: outputs.org.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent[];
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
        /**
         * Refer to groupName under access
         */
        group?: string;
        securityName?: string;
    }

    export interface NetworktemplateSnmpConfigView {
        /**
         * If the root oid configured is included
         */
        include?: boolean;
        oid?: string;
        viewName?: string;
    }

    export interface NetworktemplateSwitchMatching {
        enable?: boolean;
        /**
         * list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
         */
        rules?: outputs.org.NetworktemplateSwitchMatchingRule[];
    }

    export interface NetworktemplateSwitchMatchingRule {
        /**
         * additional CLI commands to append to the generated Junos config. **Note**: no check is done
         */
        additionalConfigCmds: string[];
        /**
         * In-Band Management interface configuration
         */
        ipConfig?: outputs.org.NetworktemplateSwitchMatchingRuleIpConfig;
        /**
         * string the switch model must start with to use this rule. It is possible to combine with the `matchName` and `matchRole` attributes
         */
        matchModel: string;
        /**
         * string the switch name must start with to use this rule. Use the `matchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `matchModel` and `matchRole` attributes
         */
        matchName: string;
        /**
         * first character of the switch name to compare to the `matchName` value
         */
        matchNameOffset: number;
        /**
         * string the switch role must start with to use this rule. It is possible to combine with the `matchName` and `matchModel` attributes
         */
        matchRole?: string;
        /**
         * property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
         *
         * @deprecated The `matchType` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
Please update your configurations.
         */
        matchType: string;
        /**
         * @deprecated The `matchValue` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
Please update your configurations.
         */
        matchValue: string;
        name?: string;
        /**
         * Out-of-Band Management interface configuration
         */
        oobIpConfig?: outputs.org.NetworktemplateSwitchMatchingRuleOobIpConfig;
        /**
         * Propery key is the interface name or interface range
         */
        portConfig?: {[key: string]: outputs.org.NetworktemplateSwitchMatchingRulePortConfig};
        /**
         * Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
         */
        portMirroring?: {[key: string]: outputs.org.NetworktemplateSwitchMatchingRulePortMirroring};
    }

    export interface NetworktemplateSwitchMatchingRuleIpConfig {
        /**
         * VLAN Name for the management interface
         */
        network?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface NetworktemplateSwitchMatchingRuleOobIpConfig {
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut: boolean;
    }

    export interface NetworktemplateSwitchMatchingRulePortConfig {
        /**
         * To disable LACP support for the AE interface
         */
        aeDisableLacp?: boolean;
        /**
         * Users could force to use the designated AE name
         */
        aeIdx?: number;
        /**
         * To use fast timeout
         */
        aeLacpSlow?: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm
         */
        critical?: boolean;
        description?: string;
        /**
         * If `speed` and `duplex` are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Enable dynamic usage for this port. Set to `dynamic` to enable.
         */
        dynamicUsage?: string;
        esilag?: boolean;
        /**
         * Media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
         */
        mtu: number;
        /**
         * Prevent helpdesk to override the port config
         */
        noLocalOverwrite?: boolean;
        poeDisabled: boolean;
        /**
         * enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
         */
        usage: string;
    }

    export interface NetworktemplateSwitchMatchingRulePortMirroring {
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputNetworksIngresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsEgresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsIngresses: string[];
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputNetwork?: string;
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputPortId?: string;
    }

    export interface NetworktemplateSwitchMgmt {
        /**
         * AP_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default, this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
         */
        apAffinityThreshold: number;
        /**
         * Set Banners for switches. Allows markup formatting
         */
        cliBanner?: string;
        /**
         * Sets timeout for switches
         */
        cliIdleTimeout?: number;
        /**
         * Rollback timer for commit confirmed
         */
        configRevertTimer: number;
        /**
         * Enable to provide the FQDN with DHCP option 81
         */
        dhcpOptionFqdn: boolean;
        disableOobDownAlarm?: boolean;
        /**
         * Property key is the user name. For Local user authentication
         */
        localAccounts?: {[key: string]: outputs.org.NetworktemplateSwitchMgmtLocalAccounts};
        mxedgeProxyHost?: string;
        mxedgeProxyPort: number;
        /**
         * Restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped 
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
         */
        protectRe?: outputs.org.NetworktemplateSwitchMgmtProtectRe;
        rootPassword?: string;
        tacacs?: outputs.org.NetworktemplateSwitchMgmtTacacs;
        /**
         * To use mxedge as proxy
         */
        useMxedgeProxy?: boolean;
    }

    export interface NetworktemplateSwitchMgmtLocalAccounts {
        password?: string;
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        role: string;
    }

    export interface NetworktemplateSwitchMgmtProtectRe {
        /**
         * optionally, services we'll allow. enum: `icmp`, `ssh`
         */
        allowedServices: string[];
        customs: outputs.org.NetworktemplateSwitchMgmtProtectReCustom[];
        /**
         * When enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default
         *      if dhcpd is enabled, we'll make sure it works
         */
        enabled: boolean;
        /**
         * host/subnets we'll allow traffic to/from
         */
        trustedHosts: string[];
    }

    export interface NetworktemplateSwitchMgmtProtectReCustom {
        /**
         * matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        portRange: string;
        /**
         * enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        protocol: string;
        subnets: string[];
    }

    export interface NetworktemplateSwitchMgmtTacacs {
        acctServers?: outputs.org.NetworktemplateSwitchMgmtTacacsAcctServer[];
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        defaultRole: string;
        enabled?: boolean;
        /**
         * Which network the TACACS server resides
         */
        network?: string;
        tacplusServers?: outputs.org.NetworktemplateSwitchMgmtTacacsTacplusServer[];
    }

    export interface NetworktemplateSwitchMgmtTacacsAcctServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface NetworktemplateSwitchMgmtTacacsTacplusServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface NetworktemplateVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface NetworktemplateVrfInstances {
        /**
         * Property key is the destination CIDR (e.g. "10.0.0.0/8")
         */
        extraRoutes?: {[key: string]: outputs.org.NetworktemplateVrfInstancesExtraRoutes};
        networks?: string[];
    }

    export interface NetworktemplateVrfInstancesExtraRoutes {
        /**
         * Next-hop address
         */
        via: string;
    }

    export interface RftemplateBand24 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 2.4GHz band. enum: `20`, `40`
         */
        bandwidth: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateBand5 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateBand5On24Radio {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateBand6 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
         */
        bandwidth: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
        /**
         * For 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed, and we'll fall back to Low Power Indoor if AFC failed
         */
        standardPower: boolean;
    }

    export interface RftemplateModelSpecific {
        antGain24?: number;
        antGain5?: number;
        antGain6?: number;
        /**
         * Radio Band AP settings
         */
        band24?: outputs.org.RftemplateModelSpecificBand24;
        /**
         * enum: `24`, `5`, `6`, `auto`
         */
        band24Usage?: string;
        /**
         * Radio Band AP settings
         */
        band5?: outputs.org.RftemplateModelSpecificBand5;
        /**
         * Radio Band AP settings
         */
        band5On24Radio?: outputs.org.RftemplateModelSpecificBand5On24Radio;
        /**
         * Radio Band AP settings
         */
        band6?: outputs.org.RftemplateModelSpecificBand6;
    }

    export interface RftemplateModelSpecificBand24 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 2.4GHz band. enum: `20`, `40`
         */
        bandwidth: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateModelSpecificBand5 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateModelSpecificBand5On24Radio {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 5GHz band. enum: `20`, `40`, `80`
         */
        bandwidth?: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
    }

    export interface RftemplateModelSpecificBand6 {
        allowRrmDisable: boolean;
        antGain: number;
        /**
         * enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
         */
        antennaMode: string;
        /**
         * channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
         */
        bandwidth: number;
        /**
         * For RFTemplates. List of channels, null or empty array means auto
         */
        channels?: number[];
        /**
         * Whether to disable the radio
         */
        disabled: boolean;
        /**
         * Tx power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
         */
        power: number;
        /**
         * When power=0, max tx power to use, HW-specific values will be used if not set
         */
        powerMax: number;
        /**
         * When power=0, min tx power to use, HW-specific values will be used if not set
         */
        powerMin: number;
        /**
         * enum: `auto`, `long`, `short`
         */
        preamble: string;
        /**
         * For 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed, and we'll fall back to Low Power Indoor if AFC failed
         */
        standardPower: boolean;
    }

    export interface ServiceSpec {
        /**
         * port number, port range, or variable
         */
        portRange?: string;
        /**
         * `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
         * `protocolNumber` is between 1-254
         */
        protocol: string;
    }

    export interface ServicepolicyAntivirus {
        /**
         * org-level AV Profile can be used, this takes precendence over 'profile'
         */
        avprofileId?: string;
        enabled: boolean;
        /**
         * Default / noftp / httponly / or keys from av_profiles
         */
        profile?: string;
    }

    export interface ServicepolicyAppqoe {
        enabled: boolean;
    }

    export interface ServicepolicyEwf {
        alertOnly?: boolean;
        blockMessage?: string;
        enabled: boolean;
        /**
         * enum: `critical`, `standard`, `strict`
         */
        profile: string;
    }

    export interface ServicepolicyIdp {
        alertOnly?: boolean;
        enabled: boolean;
        /**
         * org_level IDP Profile can be used, this takes precedence over `profile`
         */
        idpprofileId?: string;
        /**
         * enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles
         */
        profile: string;
    }

    export interface ServicepolicySslProxy {
        /**
         * enum: `medium`, `strong`, `weak`
         */
        ciphersCategory: string;
        enabled: boolean;
    }

    export interface SettingApiPolicy {
        /**
         * By default, API hides password/secrets when the user doesn't have write access
         *   * `true`: API will hide passwords/secrets for all users
         *   * `false`: API will hide passwords/secrets for read-only users
         */
        noReveal: boolean;
    }

    export interface SettingCelona {
        apiKey: string;
        apiPrefix: string;
    }

    export interface SettingCloudshark {
        apitoken: string;
        /**
         * If using CS Enteprise
         */
        url?: string;
    }

    export interface SettingCradlepoint {
        cpApiId: string;
        cpApiKey: string;
        ecmApiId: string;
        ecmApiKey: string;
        enableLldp: boolean;
    }

    export interface SettingDeviceCert {
        cert: string;
        key: string;
    }

    export interface SettingInstaller {
        allowAllDevices?: boolean;
        allowAllSites?: boolean;
        extraSiteIds: string[];
        gracePeriod?: number;
    }

    export interface SettingJcloud {
        /**
         * JCloud Org Token
         */
        orgApitoken: string;
        /**
         * JCloud Org Token Name
         */
        orgApitokenName: string;
        /**
         * JCloud Org ID
         */
        orgId: string;
    }

    export interface SettingJcloudRa {
        /**
         * JCloud Routing Assurance Org Token
         */
        orgApitoken?: string;
        /**
         * JCloud Routing Assurance Org Token Name
         */
        orgApitokenName?: string;
        /**
         * JCloud Routing Assurance Org ID
         */
        orgId?: string;
    }

    export interface SettingJuniper {
        accounts: outputs.org.SettingJuniperAccount[];
    }

    export interface SettingJuniperAccount {
        linkedBy: string;
        name: string;
    }

    export interface SettingMgmt {
        /**
         * List of Mist Tunnels
         */
        mxtunnelIds: string[];
        /**
         * Whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
         */
        useMxtunnel: boolean;
        /**
         * Whether to use wxtunnel for mgmt connectivity
         */
        useWxtunnel: boolean;
    }

    export interface SettingMistNac {
        /**
         * List of PEM-encoded ca certs
         */
        cacerts: string[];
        /**
         * use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
         */
        defaultIdpId?: string;
        /**
         * to disable RSAE_PSS_SHA256, RSAE_PSS_SHA384, RSAE_PSS_SHA512 from server side. see https://www.openssl.org/docs/man3.0/man1/openssl-ciphers.html
         */
        disableRsaeAlgorithms: boolean;
        /**
         * eap ssl security level, see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
         */
        eapSslSecurityLevel: number;
        /**
         * By default, NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site. For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mistNac enabled
         */
        euOnly: boolean;
        /**
         * allow customer to choose the EAP-TLS client certificate's field to use for IDP Machine Groups lookup. enum: `automatic`, `cn`, `dns`
         */
        idpMachineCertLookupField: string;
        /**
         * allow customer to choose the EAP-TLS client certificate's field. To use for IDP User Groups lookup. enum: `automatic`, `cn`, `email`, `upn`
         */
        idpUserCertLookupField: string;
        idps: outputs.org.SettingMistNacIdp[];
        /**
         * radius server cert to be presented in EAP TLS
         */
        serverCert?: outputs.org.SettingMistNacServerCert;
        /**
         * by default, NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
         */
        useIpVersion: string;
        /**
         * By default, NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(RadSec) to reach mist-nac. Set `useSslPort`==`true` to override that port with TCP43 (ssl), This is an org level setting that is applicable to wlans, switch_templates, and mxedgeClusters that have mist-nac enabled
         */
        useSslPort: boolean;
    }

    export interface SettingMistNacIdp {
        /**
         * When the IDP of mxedgeProxy type, exclude the following realms from proxying in addition to other valid home realms in this org
         */
        excludeRealms: string[];
        /**
         * ID of the `mistNacidp`
         */
        id: string;
        /**
         * Which realm should trigger this IDP. User Realm is extracted from:
         *   * Username-AVP (`mist.com` from john@mist.com)
         *   * Cert CN
         */
        userRealms: string[];
    }

    export interface SettingMistNacServerCert {
        cert?: string;
        key?: string;
        /**
         * private key password (optional)
         */
        password?: string;
    }

    export interface SettingMxedgeMgmt {
        fipsEnabled: boolean;
        mistPassword?: string;
        /**
         * enum: `dhcp`, `disabled`, `static`
         */
        oobIpType: string;
        /**
         * enum: `autoconf`, `dhcp`, `disabled`, `static`
         */
        oobIpType6: string;
        rootPassword?: string;
    }

    export interface SettingOpticPortConfig {
        /**
         * Enable channelization
         */
        channelized: boolean;
        /**
         * Interface speed (e.g. `25g`, `50g`), use the chassis speed by default
         */
        speed?: string;
    }

    export interface SettingPasswordPolicy {
        /**
         * Whether the policy is enabled
         */
        enabled: boolean;
        /**
         * password expiry in days
         */
        expiryInDays?: number;
        /**
         * Required password length
         */
        minLength: number;
        /**
         * Whether to require special character
         */
        requiresSpecialChar: boolean;
        /**
         * Whether to require two-factor auth
         */
        requiresTwoFactorAuth: boolean;
    }

    export interface SettingPcap {
        bucket?: string;
        /**
         * Max_len of non-management packets to capture
         */
        maxPktLen: number;
    }

    export interface SettingSecurity {
        /**
         * Whether to disable local SSH (by default, local SSH is enabled with allowMist in Org is enabled
         */
        disableLocalSsh?: boolean;
        /**
         * password required to zeroize devices (FIPS) on site level
         */
        fipsZeroizePassword?: string;
        /**
         * Whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
         */
        limitSshAccess: boolean;
    }

    export interface SettingSwitchMgmt {
        /**
         * If the field is set in both site/setting and org/setting, the value from site/setting will be used.
         */
        apAffinityThreshold: number;
    }

    export interface SettingSyntheticTest {
        disabled: boolean;
        vlans?: outputs.org.SettingSyntheticTestVlan[];
        wanSpeedtest?: outputs.org.SettingSyntheticTestWanSpeedtest;
    }

    export interface SettingSyntheticTestVlan {
        customTestUrls: string[];
        /**
         * For some vlans where we don't want this to run
         */
        disabled: boolean;
        vlanIds: string[];
    }

    export interface SettingSyntheticTestWanSpeedtest {
        enabled?: boolean;
        /**
         * `any` / HH:MM (24-hour format)
         */
        timeOfDay: string;
    }

    export interface SettingVpnOptions {
        asBase?: number;
        /**
         * equiring /12 or bigger to support 16 private IPs for 65535 gateways
         */
        stSubnet: string;
    }

    export interface SettingWanPma {
        enabled: boolean;
    }

    export interface SettingWiredPma {
        enabled: boolean;
    }

    export interface SettingWirelessPma {
        enabled: boolean;
    }

    export interface SsoRolePrivilege {
        /**
         * access permissions. enum: `admin`, `helpdesk`, `installer`, `read`, `write`
         */
        role: string;
        /**
         * enum: `org`, `site`, `sitegroup`
         */
        scope: string;
        /**
         * Required if `scope`==`site`
         */
        siteId?: string;
        /**
         * Required if `scope`==`sitegroup`
         */
        sitegroupId?: string;
        /**
         * Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users. Custom roles restrict Org users to specific UI views. This is useful for limiting UI access of Org users.  
         * You can define custom roles by adding the `views` attribute along with `role` when assigning privileges.  
         * Below are the list of supported UI views. Note that this is UI only feature.  
         *
         *   | UI View | Required Role | Description |
         *   | --- | --- | --- |
         *   | `reporting` | `read` | full access to all analytics tools |
         *   | `marketing` | `read` | can view analytics and location maps |
         *   | `superObserver` | `read` | can view all the organization except the subscription page |
         *   | `location` | `write` | can view and manage location maps, can view analytics |
         *   | `security` | `write` | can view and manage site labels, policies and security |
         *   | `switchAdmin` | `helpdesk` | can view and manage Switch ports, can view wired clients |
         *   | `mxedgeAdmin` | `admin` | can view and manage Mist edges and Mist tunnels |
         *   | `lobbyAdmin` | `admin` | full access to Org and Site Pre-shared keys |
         */
        views: string[];
    }

    export interface VpnPaths {
        /**
         * enum: `broadband`, `lte`
         */
        bfdProfile: string;
        /**
         * if different from the wan port
         */
        ip?: string;
        pod: number;
    }

    export interface WlanAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface WlanAirwatch {
        /**
         * API Key
         */
        apiKey: string;
        /**
         * Console URL
         */
        consoleUrl: string;
        enabled: boolean;
        /**
         * Password
         */
        password: string;
        /**
         * Username
         */
        username: string;
    }

    export interface WlanAppLimit {
        /**
         * Map from app key to bandwidth in kbps. 
         * Property key is the app key, defined in Get Application List
         */
        apps?: {[key: string]: number};
        enabled: boolean;
        /**
         * Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
         */
        wxtagIds: {[key: string]: number};
    }

    export interface WlanAppQos {
        apps?: {[key: string]: outputs.org.WlanAppQosApps};
        enabled: boolean;
        others?: outputs.org.WlanAppQosOther[];
    }

    export interface WlanAppQosApps {
        dscp?: number;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        dstSubnet?: string;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        srcSubnet?: string;
    }

    export interface WlanAppQosOther {
        dscp?: number;
        dstSubnet?: string;
        portRanges?: string;
        protocol?: string;
        srcSubnet?: string;
    }

    export interface WlanAuth {
        /**
         * SAE anti-clogging token threshold
         */
        anticlogThreshold?: number;
        /**
         * Whether to trigger EAP reauth when the session ends
         */
        eapReauth: boolean;
        /**
         * Whether to enable MAC Auth, uses the same auth_servers
         */
        enableMacAuth: boolean;
        /**
         * When `type`==`wep`
         */
        keyIdx: number;
        /**
         * When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
         */
        keys: string[];
        /**
         * When `type`==`psk`, whether to only use multi_psk
         */
        multiPskOnly: boolean;
        /**
         * if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
         */
        owe?: string;
        /**
         * When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
         */
        pairwises: string[];
        /**
         * When `multiPskOnly`==`true`, whether private wlan is enabled
         */
        privateWlan: boolean;
        /**
         * When `type`==`psk`, 8-64 characters, or 64 hex characters
         */
        psk: string;
        /**
         * enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
         */
        type: string;
        /**
         * Enable WEP as secondary auth
         */
        wepAsSecondaryAuth?: boolean;
    }

    export interface WlanAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface WlanBonjour {
        /**
         * additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
         */
        additionalVlanIds: string[];
        /**
         * Whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
         */
        enabled: boolean;
        /**
         * What services are allowed. 
         * Property key is the service name
         */
        services: {[key: string]: outputs.org.WlanBonjourServices};
    }

    export interface WlanBonjourServices {
        /**
         * Whether to prevent wireless clients to discover bonjour devices on the same WLAN
         */
        disableLocal: boolean;
        /**
         * Optional, if the service is further restricted for certain RADIUS groups
         */
        radiusGroups?: string[];
        /**
         * how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
         */
        scope: string;
    }

    export interface WlanCiscoCwa {
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        allowedHostnames?: string[];
        /**
         * List of CIDRs
         */
        allowedSubnets?: string[];
        /**
         * List of blocked CIDRs
         */
        blockedSubnets?: string[];
        enabled: boolean;
    }

    export interface WlanCoaServer {
        /**
         * Whether to disable Event-Timestamp Check
         */
        disableEventTimestampCheck: boolean;
        enabled: boolean;
        ip: string;
        port: number;
        secret: string;
    }

    export interface WlanDnsServerRewrite {
        enabled: boolean;
        /**
         * Map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
         */
        radiusGroups?: {[key: string]: string};
    }

    export interface WlanDynamicPsk {
        /**
         * Default PSK to use if cloud WLC is not available, 8-63 characters
         */
        defaultPsk?: string;
        defaultVlanId?: string;
        enabled: boolean;
        /**
         * When 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
         */
        forceLookup: boolean;
        /**
         * enum: `cloudPsks`, `radius`
         */
        source: string;
    }

    export interface WlanDynamicVlan {
        /**
         * Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
         */
        defaultVlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
         */
        enabled: boolean;
        /**
         * VLAN_ids to be locally bridged
         */
        localVlanIds: string[];
        /**
         * standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
         */
        type: string;
        /**
         * Map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
         *   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
         *   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
         */
        vlans?: {[key: string]: string};
    }

    export interface WlanHotspot20 {
        domainNames?: string[];
        /**
         * Whether to enable hotspot 2.0 config
         */
        enabled?: boolean;
        naiRealms?: string[];
        /**
         * List of operators to support
         */
        operators?: string[];
        rcois?: string[];
        /**
         * Venue name, default is site name
         */
        venueName?: string;
    }

    export interface WlanInjectDhcpOption82 {
        /**
         * Information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
         *   * {{AP_MAC}}
         *   * {{AP_MAC_DASHED}}
         *   * {{AP_MODEL}}
         *   * {{AP_NAME}}
         *   * {{SITE_NAME}}
         *   * {{SSID}}
         */
        circuitId?: string;
        /**
         * Whether to inject option 82 when forwarding DHCP packets
         */
        enabled: boolean;
    }

    export interface WlanMistNac {
        /**
         * When enabled:
         *   * `authServers` is ignored
         *   * `acctServers` is ignored
         *   * `auth_servers_*` are ignored
         *   * `coaServers` is ignored
         *   * `radsec` is ignored
         *   * `coaEnabled` is assumed
         */
        enabled: boolean;
    }

    export interface WlanPortal {
        /**
         * Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
         */
        allowWlanIdRoam?: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        amazonClientId: string;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
         */
        amazonClientSecret: string;
        /**
         * Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        amazonEmailDomains: string[];
        /**
         * Whether amazon is enabled as a login method
         */
        amazonEnabled: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         */
        amazonExpire?: number;
        /**
         * authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
         */
        auth: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client id
         */
        azureClientId: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client secret
         */
        azureClientSecret: string;
        /**
         * Whether Azure Active Directory is enabled as a login method
         */
        azureEnabled: boolean;
        /**
         * Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         */
        azureExpire?: number;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory tenant id.
         */
        azureTenantId: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetPassword: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetSid?: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetUserId?: string;
        /**
         * Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         */
        bypassWhenCloudDown: boolean;
        /**
         * Required if `smsProvider`==`clickatell`
         */
        clickatellApiKey?: string;
        /**
         * Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
         */
        crossSite?: boolean;
        /**
         * Whether email (access code verification) is enabled as a login method
         */
        emailEnabled: boolean;
        /**
         * Whether guest portal is enabled
         */
        enabled: boolean;
        /**
         * How long to remain authorized, in minutes
         */
        expire: number;
        /**
         * Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         */
        externalPortalUrl: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        facebookClientId: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
         */
        facebookClientSecret: string;
        /**
         * Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        facebookEmailDomains: string[];
        /**
         * Whether facebook is enabled as a login method
         */
        facebookEnabled: boolean;
        /**
         * Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         */
        facebookExpire?: number;
        /**
         * Whether to forward the user to another URL after authorized
         */
        forward: boolean;
        /**
         * URL to forward the user to
         */
        forwardUrl: string;
        /**
         * Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        googleClientId: string;
        /**
         * Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
         */
        googleClientSecret: string;
        /**
         * Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        googleEmailDomains: string[];
        /**
         * Whether Google is enabled as login method
         */
        googleEnabled: boolean;
        /**
         * Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         */
        googleExpire?: number;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupPassword?: string;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupUserid?: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        microsoftClientId: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
         */
        microsoftClientSecret: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        microsoftEmailDomains: string[];
        /**
         * Whether microsoft 365 is enabled as a login method
         */
        microsoftEnabled: boolean;
        /**
         * Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         */
        microsoftExpire?: number;
        /**
         * Whether password is enabled
         */
        passphraseEnabled: boolean;
        /**
         * Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         */
        passphraseExpire?: number;
        /**
         * Required if `passphraseEnabled`==`true`.
         */
        password: string;
        /**
         * Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
         */
        predefinedSponsorsEnabled: boolean;
        /**
         * Whether to hide sponsor’s email from list of sponsors
         */
        predefinedSponsorsHideEmail: boolean;
        privacy: boolean;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelPassword?: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelServiceId?: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelUsername?: string;
        /**
         * Whether sms is enabled as a login method
         */
        smsEnabled: boolean;
        /**
         * Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         */
        smsExpire?: number;
        /**
         * Optional if `smsEnabled`==`true`. SMS Message format
         */
        smsMessageFormat: string;
        /**
         * Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
         */
        smsProvider: string;
        /**
         * Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
         */
        sponsorAutoApprove?: boolean;
        /**
         * List of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
         */
        sponsorEmailDomains: string[];
        /**
         * Whether sponsor is enabled
         */
        sponsorEnabled: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         */
        sponsorExpire?: number;
        /**
         * Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
         */
        sponsorLinkValidityDuration: string;
        /**
         * Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         */
        sponsorNotifyAll: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
         */
        sponsorStatusNotify: boolean;
        /**
         * object of allowed sponsors email with name. Required if `sponsorEnabled`
         *             is `true` and `sponsorEmailDomains` is empty.
         *
         *             Property key is the sponsor email, Property value is the sponsor name
         */
        sponsors: {[key: string]: string};
        /**
         * Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         */
        ssoDefaultRole: string;
        /**
         * Optionl if `wlanPortalAuth`==`sso`
         */
        ssoForcedRole: string;
        /**
         * Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
         */
        ssoIdpCert: string;
        /**
         * Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         */
        ssoIdpSignAlgo: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
         */
        ssoIdpSsoUrl: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP issuer URL
         */
        ssoIssuer: string;
        /**
         * Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
         */
        ssoNameidFormat: string;
        /**
         * Required if `smsProvider`==`telstra`, Client ID provided by Telstra
         */
        telstraClientId?: string;
        /**
         * Required if `smsProvider`==`telstra`, Client secret provided by Telstra
         */
        telstraClientSecret?: string;
        /**
         * Required if `smsProvider`==`twilio`, Auth token account with twilio account
         */
        twilioAuthToken?: string;
        /**
         * Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         */
        twilioPhoneNumber?: string;
        /**
         * Required if `smsProvider`==`twilio`, Account SID provided by Twilio
         */
        twilioSid?: string;
    }

    export interface WlanPortalTemplatePortalTemplate {
        accessCodeAlternateEmail: string;
        /**
         * defines alignment on portal. enum: `center`, `left`, `right`
         */
        alignment: string;
        /**
         * Label for Amazon auth button
         */
        authButtonAmazon: string;
        /**
         * Label for Azure auth button
         */
        authButtonAzure: string;
        /**
         * Label for Email auth button
         */
        authButtonEmail: string;
        /**
         * Label for Facebook auth button
         */
        authButtonFacebook: string;
        /**
         * Label for Google auth button
         */
        authButtonGoogle: string;
        /**
         * Label for Microsoft auth button
         */
        authButtonMicrosoft: string;
        /**
         * Label for passphrase auth button
         */
        authButtonPassphrase: string;
        /**
         * Label for SMS auth button
         */
        authButtonSms: string;
        /**
         * Label for Sponsor auth button
         */
        authButtonSponsor: string;
        authLabel: string;
        /**
         * Label of the link to go back to /logon
         */
        backLink?: string;
        /**
         * Portal main color
         */
        color: string;
        colorDark: string;
        colorLight: string;
        /**
         * Whether company field is required
         */
        company: boolean;
        /**
         * Error message when company not provided
         */
        companyError: string;
        /**
         * Label of company field
         */
        companyLabel: string;
        /**
         * Whether email field is required
         */
        email: boolean;
        /**
         * Error message when a user has valid social login but doesn't match specified email domains.
         */
        emailAccessDomainError: string;
        /**
         * Label for cancel confirmation code submission using email auth
         */
        emailCancel: string;
        emailCodeCancel: string;
        emailCodeError: string;
        emailCodeFieldLabel: string;
        emailCodeMessage: string;
        emailCodeSubmit: string;
        emailCodeTitle: string;
        /**
         * Error message when email not provided
         */
        emailError: string;
        emailFieldLabel: string;
        /**
         * Label of email field
         */
        emailLabel: string;
        emailMessage: string;
        /**
         * Label for confirmation code submit button using email auth
         */
        emailSubmit: string;
        /**
         * Title for the Email registration
         */
        emailTitle: string;
        /**
         * Whether to ask field1
         */
        field1: boolean;
        /**
         * Error message when field1 not provided
         */
        field1error: string;
        /**
         * Label of field1
         */
        field1label: string;
        /**
         * Whether field1 is required field
         */
        field1required?: boolean;
        /**
         * Whether to ask field2
         */
        field2: boolean;
        /**
         * Error message when field2 not provided
         */
        field2error: string;
        /**
         * Label of field2
         */
        field2label: string;
        /**
         * Whether field2 is required field
         */
        field2required?: boolean;
        /**
         * Whether to ask field3
         */
        field3: boolean;
        /**
         * Error message when field3 not provided
         */
        field3error: string;
        /**
         * Label of field3
         */
        field3label: string;
        /**
         * Whether field3 is required field
         */
        field3required?: boolean;
        /**
         * Whether to ask field4
         */
        field4: boolean;
        /**
         * Error message when field4 not provided
         */
        field4error: string;
        /**
         * Label of field4
         */
        field4label: string;
        /**
         * Whether field4 is required field
         */
        field4required?: boolean;
        /**
         * Can be used to localize the portal based on the User Agent. Allowed property key values are:
         *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
         *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
         *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
         *   `zh-Hans`, `zh-Hant`
         */
        locales?: {[key: string]: outputs.org.WlanPortalTemplatePortalTemplateLocales};
        /**
         * path to the background image file. File must be a `png` image less than 100kB and image dimension must be less 500px x 200px (width x height).
         */
        logo: string;
        message: string;
        multiAuth: boolean;
        /**
         * Whether name field is required
         */
        name: boolean;
        /**
         * Error message when name not provided
         */
        nameError: string;
        /**
         * Label of name field
         */
        nameLabel: string;
        /**
         * Default value for the `Do not store` checkbox
         */
        optOutDefault: boolean;
        /**
         * Whether to display Do Not Store My Personal Information
         */
        optout: boolean;
        /**
         * Label for Do Not Store My Personal Information
         */
        optoutLabel: string;
        pageTitle: string;
        /**
         * Label for the Passphrase cancel button
         */
        passphraseCancel: string;
        /**
         * Error message when invalid passphrase is provided
         */
        passphraseError: string;
        /**
         * Passphrase
         */
        passphraseLabel: string;
        passphraseMessage: string;
        /**
         * Label for the Passphrase submit button
         */
        passphraseSubmit: string;
        /**
         * Title for passphrase details page
         */
        passphraseTitle: string;
        /**
         * Whether to show \"Powered by Mist\"
         */
        poweredBy: boolean;
        /**
         * Whether to require the Privacy Term acceptance
         */
        privacy: boolean;
        /**
         * Prefix of the label of the link to go to Privacy Policy
         */
        privacyPolicyAcceptLabel: string;
        /**
         * Error message when Privacy Policy not accepted
         */
        privacyPolicyError: string;
        /**
         * Label of the link to go to Privacy Policy
         */
        privacyPolicyLink: string;
        /**
         * Text of the Privacy Policy
         */
        privacyPolicyText: string;
        /**
         * Label to denote required field
         */
        requiredFieldLabel: string;
        responsiveLayout: boolean;
        /**
         * Label of the button to /signin
         */
        signInLabel: string;
        smsCarrierDefault: string;
        smsCarrierError: string;
        /**
         * Label for mobile carrier drop-down list
         */
        smsCarrierFieldLabel: string;
        /**
         * Label for cancel confirmation code submission
         */
        smsCodeCancel: string;
        /**
         * Error message when confirmation code is invalid
         */
        smsCodeError: string;
        smsCodeFieldLabel: string;
        smsCodeMessage: string;
        /**
         * Label for confirmation code submit button
         */
        smsCodeSubmit: string;
        smsCodeTitle: string;
        smsCountryFieldLabel: string;
        smsCountryFormat: string;
        /**
         * Label for checkbox to specify that the user has access code
         */
        smsHaveAccessCode: string;
        smsIsTwilio: boolean;
        /**
         * Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         */
        smsMessageFormat?: string;
        /**
         * Label for canceling mobile details for SMS auth
         */
        smsNumberCancel: string;
        smsNumberError: string;
        /**
         * Label for field to provide mobile number
         */
        smsNumberFieldLabel: string;
        smsNumberFormat: string;
        smsNumberMessage: string;
        /**
         * Label for submit button for code generation
         */
        smsNumberSubmit: string;
        /**
         * Title for phone number details
         */
        smsNumberTitle: string;
        smsUsernameFormat: string;
        /**
         * How long confirmation code should be considered valid (in minutes)
         */
        smsValidityDuration?: number;
        sponsorBackLink: string;
        sponsorCancel: string;
        /**
         * Label for Sponsor Email
         */
        sponsorEmail: string;
        sponsorEmailError: string;
        /**
         * HTML template to replace/override default sponsor email template 
         * Sponsor Email Template supports following template variables:
         *   * `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
         *   * `denyUrl`: Renders URL to reject the request
         *   * `guestEmail`: Renders Email ID of the guest
         *   * `guestName`: Renders Name of the guest
         *   * `field1`: Renders value of the Custom Field 1
         *   * `field2`: Renders value of the Custom Field 2
         *   * `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
         *   * `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
         */
        sponsorEmailTemplate: string;
        sponsorInfoApproved: string;
        sponsorInfoDenied: string;
        sponsorInfoPending: string;
        /**
         * Label for Sponsor Name
         */
        sponsorName: string;
        sponsorNameError: string;
        sponsorNotePending: string;
        /**
         * Submit button label request Wifi Access and notify sponsor about guest request
         */
        sponsorRequestAccess: string;
        /**
         * Text to display if sponsor approves request
         */
        sponsorStatusApproved: string;
        /**
         * Text to display when sponsor denies request
         */
        sponsorStatusDenied: string;
        /**
         * Text to display if request is still pending
         */
        sponsorStatusPending: string;
        /**
         * Submit button label to notify sponsor about guest request
         */
        sponsorSubmit: string;
        sponsorsError: string;
        sponsorsFieldLabel: string;
        tos: boolean;
        /**
         * Prefix of the label of the link to go to tos
         */
        tosAcceptLabel: string;
        /**
         * Error message when tos not accepted
         */
        tosError: string;
        /**
         * Label of the link to go to tos
         */
        tosLink: string;
        /**
         * Text of the Terms of Service
         */
        tosText: string;
    }

    export interface WlanPortalTemplatePortalTemplateLocales {
        /**
         * Label for Amazon auth button
         */
        authButtonAmazon?: string;
        /**
         * Label for Azure auth button
         */
        authButtonAzure?: string;
        /**
         * Label for Email auth button
         */
        authButtonEmail?: string;
        /**
         * Label for Facebook auth button
         */
        authButtonFacebook?: string;
        /**
         * Label for Google auth button
         */
        authButtonGoogle?: string;
        /**
         * Label for Microsoft auth button
         */
        authButtonMicrosoft?: string;
        /**
         * Label for passphrase auth button
         */
        authButtonPassphrase?: string;
        /**
         * Label for SMS auth button
         */
        authButtonSms?: string;
        /**
         * Label for Sponsor auth button
         */
        authButtonSponsor?: string;
        authLabel?: string;
        /**
         * Label of the link to go back to /logon
         */
        backLink?: string;
        /**
         * Error message when company not provided
         */
        companyError?: string;
        /**
         * Label of company field
         */
        companyLabel?: string;
        /**
         * Error message when a user has valid social login but doesn't match specified email domains.
         */
        emailAccessDomainError?: string;
        /**
         * Label for cancel confirmation code submission using email auth
         */
        emailCancel?: string;
        emailCodeCancel?: string;
        emailCodeError?: string;
        emailCodeFieldLabel?: string;
        emailCodeMessage?: string;
        emailCodeSubmit?: string;
        emailCodeTitle?: string;
        /**
         * Error message when email not provided
         */
        emailError?: string;
        emailFieldLabel?: string;
        /**
         * Label of email field
         */
        emailLabel?: string;
        emailMessage?: string;
        /**
         * Label for confirmation code submit button using email auth
         */
        emailSubmit?: string;
        /**
         * Title for the Email registration
         */
        emailTitle?: string;
        /**
         * Error message when field1 not provided
         */
        field1error?: string;
        /**
         * Label of field1
         */
        field1label?: string;
        /**
         * Error message when field2 not provided
         */
        field2error?: string;
        /**
         * Label of field2
         */
        field2label?: string;
        /**
         * Error message when field3 not provided
         */
        field3error?: string;
        /**
         * Label of field3
         */
        field3label?: string;
        /**
         * Error message when field4 not provided
         */
        field4error?: string;
        /**
         * Label of field4
         */
        field4label?: string;
        message?: string;
        /**
         * Error message when name not provided
         */
        nameError?: string;
        /**
         * Label of name field
         */
        nameLabel?: string;
        /**
         * Label for Do Not Store My Personal Information
         */
        optoutLabel?: string;
        pageTitle?: string;
        /**
         * Label for the Passphrase cancel button
         */
        passphraseCancel?: string;
        /**
         * Error message when invalid passphrase is provided
         */
        passphraseError?: string;
        /**
         * Passphrase
         */
        passphraseLabel?: string;
        passphraseMessage?: string;
        /**
         * Label for the Passphrase submit button
         */
        passphraseSubmit?: string;
        /**
         * Title for passphrase details page
         */
        passphraseTitle?: string;
        /**
         * Prefix of the label of the link to go to Privacy Policy
         */
        privacyPolicyAcceptLabel?: string;
        /**
         * Error message when Privacy Policy not accepted
         */
        privacyPolicyError?: string;
        /**
         * Label of the link to go to Privacy Policy
         */
        privacyPolicyLink?: string;
        /**
         * Text of the Privacy Policy
         */
        privacyPolicyText?: string;
        /**
         * Label to denote required field
         */
        requiredFieldLabel?: string;
        /**
         * Label of the button to /signin
         */
        signInLabel?: string;
        smsCarrierDefault?: string;
        smsCarrierError?: string;
        /**
         * Label for mobile carrier drop-down list
         */
        smsCarrierFieldLabel?: string;
        /**
         * Label for cancel confirmation code submission
         */
        smsCodeCancel?: string;
        /**
         * Error message when confirmation code is invalid
         */
        smsCodeError?: string;
        smsCodeFieldLabel?: string;
        smsCodeMessage?: string;
        /**
         * Label for confirmation code submit button
         */
        smsCodeSubmit?: string;
        smsCodeTitle?: string;
        smsCountryFieldLabel?: string;
        smsCountryFormat?: string;
        /**
         * Label for checkbox to specify that the user has access code
         */
        smsHaveAccessCode?: string;
        /**
         * Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         */
        smsMessageFormat?: string;
        /**
         * Label for canceling mobile details for SMS auth
         */
        smsNumberCancel?: string;
        smsNumberError?: string;
        /**
         * Label for field to provide mobile number
         */
        smsNumberFieldLabel?: string;
        smsNumberFormat?: string;
        smsNumberMessage?: string;
        /**
         * Label for submit button for code generation
         */
        smsNumberSubmit?: string;
        /**
         * Title for phone number details
         */
        smsNumberTitle?: string;
        smsUsernameFormat?: string;
        sponsorBackLink?: string;
        sponsorCancel?: string;
        /**
         * Label for Sponsor Email
         */
        sponsorEmail?: string;
        sponsorEmailError?: string;
        sponsorInfoApproved?: string;
        sponsorInfoDenied?: string;
        sponsorInfoPending?: string;
        /**
         * Label for Sponsor Name
         */
        sponsorName?: string;
        sponsorNameError?: string;
        sponsorNotePending?: string;
        /**
         * Submit button label request Wifi Access and notify sponsor about guest request
         */
        sponsorRequestAccess?: string;
        /**
         * Text to display if sponsor approves request
         */
        sponsorStatusApproved?: string;
        /**
         * Text to display when sponsor denies request
         */
        sponsorStatusDenied?: string;
        /**
         * Text to display if request is still pending
         */
        sponsorStatusPending?: string;
        /**
         * Submit button label to notify sponsor about guest request
         */
        sponsorSubmit?: string;
        sponsorsError?: string;
        sponsorsFieldLabel?: string;
        /**
         * Prefix of the label of the link to go to tos
         */
        tosAcceptLabel?: string;
        /**
         * Error message when tos not accepted
         */
        tosError?: string;
        /**
         * Label of the link to go to tos
         */
        tosLink?: string;
        /**
         * Text of the Terms of Service
         */
        tosText?: string;
    }

    export interface WlanQos {
        /**
         * enum: `background`, `bestEffort`, `video`, `voice`
         */
        class: string;
        /**
         * Whether to overwrite QoS
         */
        overwrite: boolean;
    }

    export interface WlanRadsec {
        coaEnabled: boolean;
        enabled?: boolean;
        idleTimeout?: number;
        /**
         * To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         */
        mxclusterIds: string[];
        /**
         * Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
         */
        proxyHosts: string[];
        /**
         * Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         */
        serverName?: string;
        /**
         * List of RadSec Servers. Only if not Mist Edge.
         */
        servers?: outputs.org.WlanRadsecServer[];
        /**
         * use mxedge(s) as RadSec Proxy
         */
        useMxedge?: boolean;
        /**
         * To use Site mxedges when this WLAN does not use mxtunnel
         */
        useSiteMxedge: boolean;
    }

    export interface WlanRadsecServer {
        host?: string;
        port?: number;
    }

    export interface WlanRateset {
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
         */
        ht?: string;
        /**
         * if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`
         */
        legacies: string[];
        /**
         * Minimum RSSI for client to connect, 0 means not enforcing
         */
        minRssi: number;
        /**
         * Data Rates template to apply. enum: 
         *   * `no-legacy`: no 11b
         *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
         *   * `legacy-only`: disable 802.11n and 802.11ac
         *   * `high-density`: no 11b, no low rates
         *   * `custom`: user defined
         */
        template: string;
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
         */
        vht?: string;
    }

    export interface WlanSchedule {
        enabled: boolean;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours?: outputs.org.WlanScheduleHours;
    }

    export interface WlanScheduleHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface WlantemplateApplies {
        orgId?: string;
        /**
         * list of site ids
         */
        siteIds: string[];
        /**
         * list of sitegroup ids
         */
        sitegroupIds: string[];
    }

    export interface WlantemplateExceptions {
        /**
         * list of site ids
         */
        siteIds: string[];
        /**
         * list of sitegroup ids
         */
        sitegroupIds: string[];
    }

    export interface WxtagSpec {
        /**
         * matched destination port, "0" means any
         */
        portRange: string;
        /**
         * tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
         */
        protocol: string;
        /**
         * matched destination subnets and/or IP Addresses
         */
        subnets: string[];
    }

}

export namespace site {
    export interface BaseLatlng {
        lat: number;
        lng: number;
    }

    export interface EvpnTopologyEvpnOptions {
        /**
         * optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
         */
        autoLoopbackSubnet: string;
        /**
         * optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
         */
        autoLoopbackSubnet6: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet: string;
        /**
         * optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
         */
        autoRouterIdSubnet6?: string;
        /**
         * optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
         * when `routedAt` != `core`, whether to do virtual-gateway at core as well
         */
        coreAsBorder: boolean;
        overlay?: outputs.site.EvpnTopologyEvpnOptionsOverlay;
        /**
         * by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
         * if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
         */
        perVlanVgaV4Mac: boolean;
        /**
         * optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
         */
        routedAt: string;
        underlay?: outputs.site.EvpnTopologyEvpnOptionsUnderlay;
        /**
         * optional, for EX9200 only to seggregate virtual-switches
         */
        vsInstances?: {[key: string]: outputs.site.EvpnTopologyEvpnOptionsVsInstances};
    }

    export interface EvpnTopologyEvpnOptionsOverlay {
        /**
         * Overlay BGP Local AS Number
         */
        as: number;
    }

    export interface EvpnTopologyEvpnOptionsUnderlay {
        /**
         * Underlay BGP Base AS Number
         */
        asBase: number;
        routedIdPrefix?: string;
        /**
         * underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
         */
        subnet?: string;
        /**
         * if v6 is desired for underlay
         */
        useIpv6: boolean;
    }

    export interface EvpnTopologyEvpnOptionsVsInstances {
        networks?: string[];
    }

    export interface EvpnTopologySwitches {
        deviceprofileId: string;
        evpnId: number;
        mac: string;
        model: string;
        /**
         * optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g. 
         *   * for CLOS, to group dist / access switches into pods
         *   * for ERB/CRB, to group dist / esilag-access into pods
         */
        pod: number;
        /**
         * by default, core switches are assumed to be connecting all pods. 
         * if you want to limit the pods, you can specify pods.
         */
        pods: number[];
        /**
         * use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
         */
        role: string;
        routerId: string;
        siteId: string;
    }

    export interface GetPsksSitePsk {
        /**
         * sso id for psk created from psk portal
         */
        adminSsoId: string;
        /**
         * when the object has been created, in epoch
         */
        createdTime: number;
        /**
         * email to send psk expiring notifications to
         */
        email: string;
        /**
         * Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
         */
        expireTime: number;
        /**
         * Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
         */
        expiryNotificationTime: number;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
         */
        mac: string;
        /**
         * when the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        name: string;
        note: string;
        /**
         * If set to true, reminder notification will be sent when psk is about to expire
         */
        notifyExpiry: boolean;
        /**
         * If set to true, notification will be sent when psk is created or edited
         */
        notifyOnCreateOrEdit: boolean;
        /**
         * previous passphrase of the PSK if it has been rotated
         */
        oldPassphrase: string;
        orgId: string;
        /**
         * passphrase of the PSK (8-63 character or 64 in hex)
         */
        passphrase: string;
        role: string;
        siteId: string;
        /**
         * SSID this PSK should be applicable to
         */
        ssid: string;
        /**
         * enum: `macs`, `multi`, `single`
         */
        usage: string;
        vlanId: string;
    }

    export interface GetWebhooksSiteWebhook {
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Whether webhook is enabled
         */
        enabled: boolean;
        /**
         * If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
         */
        headers: {[key: string]: string};
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        /**
         * Name of the webhook
         */
        name: string;
        /**
         * Required when `oauth2GrantType`==`clientCredentials`
         */
        oauth2ClientId: string;
        /**
         * Required when `oauth2GrantType`==`clientCredentials`
         */
        oauth2ClientSecret: string;
        /**
         * required when `type`==`oauth2`. enum: `clientCredentials`, `password`
         */
        oauth2GrantType: string;
        /**
         * Required when `oauth2GrantType`==`password`
         */
        oauth2Password: string;
        /**
         * Required when `type`==`oauth2`, if provided, will be used in the token request
         */
        oauth2Scopes: string[];
        /**
         * Required when `type`==`oauth2`
         */
        oauth2TokenUrl: string;
        /**
         * Required when `oauth2GrantType`==`password`
         */
        oauth2Username: string;
        orgId: string;
        /**
         * Only if `type`=`http-post`
         */
        secret: string;
        siteId: string;
        /**
         * Required if `type`=`splunk`. If splunkToken is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.
         */
        splunkToken: string;
        /**
         * List of supported webhook topics available with the API Call List Webhook Topics
         */
        topics: string[];
        /**
         * enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
         */
        type: string;
        url: string;
        /**
         * When url uses HTTPS, whether to verify the certificate
         */
        verifyCert: boolean;
    }

    export interface GetWlansSiteWlan {
        /**
         * Enable coa-immediate-update and address-change-immediate-update on the access profile.
         */
        acctImmediateUpdate: boolean;
        /**
         * How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
         */
        acctInterimInterval: number;
        /**
         * List of RADIUS accounting servers, optional, order matters where the first one is treated as primary
         */
        acctServers: outputs.site.GetWlansSiteWlanAcctServer[];
        /**
         * Airwatch wlan settings
         */
        airwatch: outputs.site.GetWlansSiteWlanAirwatch;
        /**
         * Only applicable when limit_bcast==true, which allows or disallows ipv6 Neighbor Discovery packets to go through
         */
        allowIpv6Ndp: boolean;
        /**
         * Only applicable when limit_bcast==true, which allows mDNS / Bonjour packets to go through
         */
        allowMdns: boolean;
        /**
         * Only applicable when `limitBcast`==`true`, which allows SSDP
         */
        allowSsdp: boolean;
        /**
         * List of device ids
         */
        apIds: string[];
        /**
         * Bandwidth limiting for apps (applies to up/down)
         */
        appLimit: outputs.site.GetWlansSiteWlanAppLimit;
        /**
         * APp qos wlan settings
         */
        appQos: outputs.site.GetWlansSiteWlanAppQos;
        /**
         * enum: `aps`, `site`, `wxtags`
         */
        applyTo: string;
        /**
         * Whether to enable smart arp filter
         */
        arpFilter: boolean;
        /**
         * Authentication wlan settings
         */
        auth: outputs.site.GetWlansSiteWlanAuth;
        /**
         * When ordered, AP will prefer and go back to the first server if possible. enum: `ordered`, `unordered`
         */
        authServerSelection: string;
        /**
         * List of RADIUS authentication servers, at least one is needed if `auth type`==`eap`, order matters where the first one is treated as primary
         */
        authServers: outputs.site.GetWlansSiteWlanAuthServer[];
        /**
         * Optional, up to 48 bytes, will be dynamically generated if not provided. used only for authentication servers
         */
        authServersNasId: string;
        /**
         * Optional, NAS-IP-ADDRESS to use
         */
        authServersNasIp: string;
        /**
         * Radius auth session retries. Following fast timers are set if "fastDot1xTimers" knob is enabled. ‘retries’  are set to value of auth_servers_retries. ‘max-requests’ is also set when setting authServersRetries and is set to default value to 3.
         */
        authServersRetries: number;
        /**
         * Radius auth session timeout. Following fast timers are set if "fastDot1xTimers" knob is enabled. ‘quite-period’  and ‘transmit-period’ are set to half the value of auth_servers_timeout. ‘supplicant-timeout’ is also set when setting authServersTimeout and is set to default value of 10.
         */
        authServersTimeout: number;
        /**
         * Whether to enable band_steering, this works only when band==both
         */
        bandSteer: boolean;
        /**
         * Force dualBand capable client to connect to 5G
         */
        bandSteerForceBand5: boolean;
        /**
         * List of radios that the wlan should apply to.
         */
        bands: string[];
        /**
         * Whether to block the clients in the blacklist (up to first 256 macs)
         */
        blockBlacklistClients: boolean;
        /**
         * Bonjour gateway wlan settings
         */
        bonjour: outputs.site.GetWlansSiteWlanBonjour;
        /**
         * Cisco CWA (central web authentication) required RADIUS with COA in order to work. See CWA: https://www.cisco.com/c/en/us/support/docs/security/identity-services-engine/115732-central-web-auth-00.html
         */
        ciscoCwa: outputs.site.GetWlansSiteWlanCiscoCwa;
        /**
         * In kbps
         */
        clientLimitDown: number;
        /**
         * If downlink limiting per-client is enabled
         */
        clientLimitDownEnabled: boolean;
        /**
         * In kbps
         */
        clientLimitUp: number;
        /**
         * If uplink limiting per-client is enabled
         */
        clientLimitUpEnabled: boolean;
        /**
         * List of COA (change of authorization) servers, optional
         */
        coaServers: outputs.site.GetWlansSiteWlanCoaServer[];
        /**
         * When the object has been created, in epoch
         */
        createdTime: number;
        /**
         * Some old WLAN drivers may not be compatible
         */
        disable11ax: boolean;
        /**
         * To disable ht or vht rates
         */
        disableHtVhtRates: boolean;
        /**
         * Whether to disable U-APSD
         */
        disableUapsd: boolean;
        /**
         * Disable sending v2 roam notification messages
         */
        disableV1RoamNotify: boolean;
        /**
         * Disable sending v2 roam notification messages
         */
        disableV2RoamNotify: boolean;
        /**
         * When any of the following is true, this WLAN will be disabled
         *    * cannot get IP
         *    * cannot obtain default gateway
         *    * cannot reach default gateway
         */
        disableWhenGatewayUnreachable: boolean;
        disableWhenMxtunnelDown: boolean;
        /**
         * Whether to disable WMM
         */
        disableWmm: boolean;
        /**
         * For radius_group-based DNS server (rewrite DNS request depending on the Group RADIUS server returns)
         */
        dnsServerRewrite: outputs.site.GetWlansSiteWlanDnsServerRewrite;
        dtim: number;
        /**
         * For dynamic PSK where we get perUser PSK from Radius. dynamicPsk allows PSK to be selected at runtime depending on context (wlan/site/user/...) thus following configurations are assumed (currently)
         *   * PSK will come from RADIUS server
         *   * AP sends client MAC as username and password (i.e. `enableMacAuth` is assumed)
         *   * AP sends BSSID:SSID as Caller-Station-ID
         *   * `authServers` is required
         *   * PSK will come from cloud WLC if source is cloudPsks
         *   * defaultPsk will be used if cloud WLC is not available
         *   * `multiPskOnly` and `psk` is ignored
         *   * `pairwise` can only be wpa2-ccmp (for now, wpa3 support on the roadmap)
         */
        dynamicPsk: outputs.site.GetWlansSiteWlanDynamicPsk;
        /**
         * For 802.1x
         */
        dynamicVlan: outputs.site.GetWlansSiteWlanDynamicVlan;
        /**
         * Enable AP-AP keycaching via multicast
         */
        enableLocalKeycaching: boolean;
        /**
         * By default, we'd inspect all DHCP packets and drop those unrelated to the wireless client itself in the case where client is a wireless bridge (DHCP packets for other MACs will need to be orwarded), wirelessBridging can be enabled
         */
        enableWirelessBridging: boolean;
        /**
         * If the client bridge is doing DHCP on behalf of other devices (L2-NAT), enable dhcpTracking will cut down DHCP response packets to be forwarded to wireless
         */
        enableWirelessBridgingDhcpTracking: boolean;
        /**
         * If this wlan is enabled
         */
        enabled: boolean;
        /**
         * If set to true, sets default fast-timers with values calculated from ‘auth_servers_timeout’ and ‘auth_server_retries’ .
         */
        fastDot1xTimers: boolean;
        /**
         * Whether to hide SSID in beacon
         */
        hideSsid: boolean;
        /**
         * Include hostname inside IE in AP beacons / probe responses
         */
        hostnameIe: boolean;
        /**
         * Hostspot 2.0 wlan settings
         */
        hotspot20: outputs.site.GetWlansSiteWlanHotspot20;
        /**
         * Unique ID of the object instance in the Mist Organnization
         */
        id: string;
        injectDhcpOption82: outputs.site.GetWlansSiteWlanInjectDhcpOption82;
        /**
         * where this WLAN will be connected to. enum: `all`, `eth0`, `eth1`, `eth2`, `eth3`, `mxtunnel`, `siteMxedge`, `wxtunnel`
         */
        interface: string;
        /**
         * Whether to stop clients to talk to each other
         */
        isolation: boolean;
        /**
         * If isolation is enabled, whether to deny clients to talk to L2 on the LAN
         */
        l2Isolation: boolean;
        /**
         * Legacy devices requires the Over-DS (for Fast BSS Transition) bit set (while our chip doesn’t support it). Warning! Enabling this will cause problem for iOS devices.
         */
        legacyOverds: boolean;
        /**
         * Whether to limit broadcast packets going to wireless (i.e. only allow certain bcast packets to go through)
         */
        limitBcast: boolean;
        /**
         * Limit probe response base on some heuristic rules
         */
        limitProbeResponse: boolean;
        /**
         * Max idle time in seconds
         */
        maxIdletime: number;
        /**
         * Maximum number of client connected to the SSID. `0` means unlimited
         */
        maxNumClients: number;
        mistNac: outputs.site.GetWlansSiteWlanMistNac;
        /**
         * When the object has been modified for the last time, in epoch
         */
        modifiedTime: number;
        mspId: string;
        /**
         * When `interface`=`mxtunnel`, id of the Mist Tunnel
         */
        mxtunnelIds: string[];
        /**
         * When `interface`=`siteMedge`, name of the mxtunnel that in mxtunnels under Site Setting
         */
        mxtunnelNames: string[];
        /**
         * Whether to only allow client to use DNS that we’ve learned from DHCP response
         */
        noStaticDns: boolean;
        /**
         * Whether to only allow client that we’ve learned from DHCP exchange to talk
         */
        noStaticIp: boolean;
        orgId: string;
        /**
         * Portal wlan settings
         */
        portal: outputs.site.GetWlansSiteWlanPortal;
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        portalAllowedHostnames: string[];
        /**
         * List of CIDRs
         */
        portalAllowedSubnets: string[];
        /**
         * APi secret (auto-generated) that can be used to sign guest authorization requests
         */
        portalApiSecret: string;
        /**
         * List of hostnames without http(s):// (matched by substring), this takes precedence over portal_allowed_hostnames
         */
        portalDeniedHostnames: string[];
        /**
         * Url of portal background image
         */
        portalImage: string;
        portalSsoUrl: string;
        qos: outputs.site.GetWlansSiteWlanQos;
        /**
         * RadSec settings
         */
        radsec: outputs.site.GetWlansSiteWlanRadsec;
        /**
         * Property key is the RF band. enum: `24`, `5`, `6`
         */
        rateset: {[key: string]: outputs.site.GetWlansSiteWlanRateset};
        /**
         * When different mxcluster is on different subnet, we'd want to disconnect clients (so they'll reconnect and get new IPs)
         */
        reconnectClientsWhenRoamingMxcluster: boolean;
        /**
         * enum: `11r`, `OKC`, `NONE`
         */
        roamMode: string;
        /**
         * WLAN operating schedule, default is disabled
         */
        schedule: outputs.site.GetWlansSiteWlanSchedule;
        siteId: string;
        /**
         * Whether to exclude this WLAN from SLE metrics
         */
        sleExcluded: boolean;
        /**
         * Name of the SSID
         */
        ssid: string;
        /**
         * If `auth.type`==`eap` or `auth.type`==`psk`, should only be set for legacy client, such as pre-2004, 802.11b devices
         */
        useEapolV1: boolean;
        /**
         * If vlan tagging is enabled
         */
        vlanEnabled: boolean;
        vlanId: string;
        /**
         * if `vlanEnabled`==`true` and `vlanPooling`==`true`. List of VLAN IDs (comma separeted) to be used in the VLAN Pool
         */
        vlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Vlan pooling allows AP to place client on different VLAN using a deterministic algorithm
         */
        vlanPooling: boolean;
        /**
         * In kbps
         */
        wlanLimitDown: number;
        /**
         * If downlink limiting for whole wlan is enabled
         */
        wlanLimitDownEnabled: boolean;
        /**
         * In kbps
         */
        wlanLimitUp: number;
        /**
         * If uplink limiting for whole wlan is enabled
         */
        wlanLimitUpEnabled: boolean;
        /**
         * List of wxtag_ids
         */
        wxtagIds: string[];
        /**
         * When `interface`=`wxtunnel`, id of the WXLAN Tunnel
         */
        wxtunnelId: string;
        /**
         * When `interface`=`wxtunnel`, remote tunnel identifier
         */
        wxtunnelRemoteId: string;
    }

    export interface GetWlansSiteWlanAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat: string;
        keywrapKek: string;
        keywrapMack: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface GetWlansSiteWlanAirwatch {
        /**
         * API Key
         */
        apiKey: string;
        /**
         * Console URL
         */
        consoleUrl: string;
        enabled: boolean;
        /**
         * Password
         */
        password: string;
        /**
         * Username
         */
        username: string;
    }

    export interface GetWlansSiteWlanAppLimit {
        /**
         * Map from app key to bandwidth in kbps. 
         * Property key is the app key, defined in Get Application List
         */
        apps: {[key: string]: number};
        enabled: boolean;
        /**
         * Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
         */
        wxtagIds: {[key: string]: number};
    }

    export interface GetWlansSiteWlanAppQos {
        apps: {[key: string]: outputs.site.GetWlansSiteWlanAppQosApps};
        enabled: boolean;
        others: outputs.site.GetWlansSiteWlanAppQosOther[];
    }

    export interface GetWlansSiteWlanAppQosApps {
        dscp: number;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        dstSubnet: string;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        srcSubnet: string;
    }

    export interface GetWlansSiteWlanAppQosOther {
        dscp: number;
        dstSubnet: string;
        portRanges: string;
        protocol: string;
        srcSubnet: string;
    }

    export interface GetWlansSiteWlanAuth {
        /**
         * SAE anti-clogging token threshold
         */
        anticlogThreshold: number;
        /**
         * Whether to trigger EAP reauth when the session ends
         */
        eapReauth: boolean;
        /**
         * Whether to enable MAC Auth, uses the same auth_servers
         */
        enableMacAuth: boolean;
        /**
         * When `type`==`wep`
         */
        keyIdx: number;
        /**
         * When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
         */
        keys: string[];
        /**
         * When `type`==`psk`, whether to only use multi_psk
         */
        multiPskOnly: boolean;
        /**
         * if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
         */
        owe: string;
        /**
         * When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
         */
        pairwises: string[];
        /**
         * When `multiPskOnly`==`true`, whether private wlan is enabled
         */
        privateWlan: boolean;
        /**
         * When `type`==`psk`, 8-64 characters, or 64 hex characters
         */
        psk: string;
        /**
         * enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
         */
        type: string;
        /**
         * Enable WEP as secondary auth
         */
        wepAsSecondaryAuth: boolean;
    }

    export interface GetWlansSiteWlanAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat: string;
        keywrapKek: string;
        keywrapMack: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface GetWlansSiteWlanBonjour {
        /**
         * additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
         */
        additionalVlanIds: string[];
        /**
         * Whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
         */
        enabled: boolean;
        /**
         * What services are allowed. 
         * Property key is the service name
         */
        services: {[key: string]: outputs.site.GetWlansSiteWlanBonjourServices};
    }

    export interface GetWlansSiteWlanBonjourServices {
        /**
         * Whether to prevent wireless clients to discover bonjour devices on the same WLAN
         */
        disableLocal: boolean;
        /**
         * Optional, if the service is further restricted for certain RADIUS groups
         */
        radiusGroups: string[];
        /**
         * how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
         */
        scope: string;
    }

    export interface GetWlansSiteWlanCiscoCwa {
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        allowedHostnames: string[];
        /**
         * List of CIDRs
         */
        allowedSubnets: string[];
        /**
         * List of blocked CIDRs
         */
        blockedSubnets: string[];
        enabled: boolean;
    }

    export interface GetWlansSiteWlanCoaServer {
        /**
         * Whether to disable Event-Timestamp Check
         */
        disableEventTimestampCheck: boolean;
        enabled: boolean;
        ip: string;
        port: number;
        secret: string;
    }

    export interface GetWlansSiteWlanDnsServerRewrite {
        enabled: boolean;
        /**
         * Map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
         */
        radiusGroups: {[key: string]: string};
    }

    export interface GetWlansSiteWlanDynamicPsk {
        /**
         * Default PSK to use if cloud WLC is not available, 8-63 characters
         */
        defaultPsk: string;
        defaultVlanId: string;
        enabled: boolean;
        /**
         * When 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
         */
        forceLookup: boolean;
        /**
         * enum: `cloudPsks`, `radius`
         */
        source: string;
    }

    export interface GetWlansSiteWlanDynamicVlan {
        /**
         * Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
         */
        defaultVlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
         */
        enabled: boolean;
        /**
         * VLAN_ids to be locally bridged
         */
        localVlanIds: string[];
        /**
         * standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
         */
        type: string;
        /**
         * Map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
         *   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
         *   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
         */
        vlans: {[key: string]: string};
    }

    export interface GetWlansSiteWlanHotspot20 {
        domainNames: string[];
        /**
         * Whether to enable hotspot 2.0 config
         */
        enabled: boolean;
        naiRealms: string[];
        /**
         * List of operators to support
         */
        operators: string[];
        rcois: string[];
        /**
         * Venue name, default is site name
         */
        venueName: string;
    }

    export interface GetWlansSiteWlanInjectDhcpOption82 {
        /**
         * Information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
         *   * {{AP_MAC}}
         *   * {{AP_MAC_DASHED}}
         *   * {{AP_MODEL}}
         *   * {{AP_NAME}}
         *   * {{SITE_NAME}}
         *   * {{SSID}}
         */
        circuitId: string;
        /**
         * Whether to inject option 82 when forwarding DHCP packets
         */
        enabled: boolean;
    }

    export interface GetWlansSiteWlanMistNac {
        /**
         * When enabled:
         *   * `authServers` is ignored
         *   * `acctServers` is ignored
         *   * `auth_servers_*` are ignored
         *   * `coaServers` is ignored
         *   * `radsec` is ignored
         *   * `coaEnabled` is assumed
         */
        enabled: boolean;
    }

    export interface GetWlansSiteWlanPortal {
        /**
         * Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
         */
        allowWlanIdRoam: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        amazonClientId: string;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
         */
        amazonClientSecret: string;
        /**
         * Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        amazonEmailDomains: string[];
        /**
         * Whether amazon is enabled as a login method
         */
        amazonEnabled: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         */
        amazonExpire: number;
        /**
         * authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
         */
        auth: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client id
         */
        azureClientId: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client secret
         */
        azureClientSecret: string;
        /**
         * Whether Azure Active Directory is enabled as a login method
         */
        azureEnabled: boolean;
        /**
         * Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         */
        azureExpire: number;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory tenant id.
         */
        azureTenantId: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetPassword: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetSid: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetUserId: string;
        /**
         * Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         */
        bypassWhenCloudDown: boolean;
        /**
         * Required if `smsProvider`==`clickatell`
         */
        clickatellApiKey: string;
        /**
         * Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
         */
        crossSite: boolean;
        /**
         * Whether email (access code verification) is enabled as a login method
         */
        emailEnabled: boolean;
        /**
         * Whether guest portal is enabled
         */
        enabled: boolean;
        /**
         * How long to remain authorized, in minutes
         */
        expire: number;
        /**
         * Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         */
        externalPortalUrl: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        facebookClientId: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
         */
        facebookClientSecret: string;
        /**
         * Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        facebookEmailDomains: string[];
        /**
         * Whether facebook is enabled as a login method
         */
        facebookEnabled: boolean;
        /**
         * Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         */
        facebookExpire: number;
        /**
         * Whether to forward the user to another URL after authorized
         */
        forward: boolean;
        /**
         * URL to forward the user to
         */
        forwardUrl: string;
        /**
         * Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        googleClientId: string;
        /**
         * Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
         */
        googleClientSecret: string;
        /**
         * Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        googleEmailDomains: string[];
        /**
         * Whether Google is enabled as login method
         */
        googleEnabled: boolean;
        /**
         * Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         */
        googleExpire: number;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupPassword: string;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupUserid: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        microsoftClientId: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
         */
        microsoftClientSecret: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        microsoftEmailDomains: string[];
        /**
         * Whether microsoft 365 is enabled as a login method
         */
        microsoftEnabled: boolean;
        /**
         * Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         */
        microsoftExpire: number;
        /**
         * Whether password is enabled
         */
        passphraseEnabled: boolean;
        /**
         * Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         */
        passphraseExpire: number;
        /**
         * Required if `passphraseEnabled`==`true`.
         */
        password: string;
        /**
         * Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
         */
        predefinedSponsorsEnabled: boolean;
        /**
         * Whether to hide sponsor’s email from list of sponsors
         */
        predefinedSponsorsHideEmail: boolean;
        privacy: boolean;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelPassword: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelServiceId: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelUsername: string;
        /**
         * Whether sms is enabled as a login method
         */
        smsEnabled: boolean;
        /**
         * Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         */
        smsExpire: number;
        /**
         * Optional if `smsEnabled`==`true`. SMS Message format
         */
        smsMessageFormat: string;
        /**
         * Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
         */
        smsProvider: string;
        /**
         * Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
         */
        sponsorAutoApprove: boolean;
        /**
         * List of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
         */
        sponsorEmailDomains: string[];
        /**
         * Whether sponsor is enabled
         */
        sponsorEnabled: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         */
        sponsorExpire: number;
        /**
         * Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
         */
        sponsorLinkValidityDuration: string;
        /**
         * Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         */
        sponsorNotifyAll: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
         */
        sponsorStatusNotify: boolean;
        /**
         * object of allowed sponsors email with name. Required if `sponsorEnabled`
         *             is `true` and `sponsorEmailDomains` is empty.
         *
         *             Property key is the sponsor email, Property value is the sponsor name
         */
        sponsors: {[key: string]: string};
        /**
         * Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         */
        ssoDefaultRole: string;
        /**
         * Optionl if `wlanPortalAuth`==`sso`
         */
        ssoForcedRole: string;
        /**
         * Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
         */
        ssoIdpCert: string;
        /**
         * Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         */
        ssoIdpSignAlgo: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
         */
        ssoIdpSsoUrl: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP issuer URL
         */
        ssoIssuer: string;
        /**
         * Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
         */
        ssoNameidFormat: string;
        /**
         * Required if `smsProvider`==`telstra`, Client ID provided by Telstra
         */
        telstraClientId: string;
        /**
         * Required if `smsProvider`==`telstra`, Client secret provided by Telstra
         */
        telstraClientSecret: string;
        /**
         * Required if `smsProvider`==`twilio`, Auth token account with twilio account
         */
        twilioAuthToken: string;
        /**
         * Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         */
        twilioPhoneNumber: string;
        /**
         * Required if `smsProvider`==`twilio`, Account SID provided by Twilio
         */
        twilioSid: string;
    }

    export interface GetWlansSiteWlanQos {
        /**
         * enum: `background`, `bestEffort`, `video`, `voice`
         */
        class: string;
        /**
         * Whether to overwrite QoS
         */
        overwrite: boolean;
    }

    export interface GetWlansSiteWlanRadsec {
        coaEnabled: boolean;
        enabled: boolean;
        idleTimeout: number;
        /**
         * To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         */
        mxclusterIds: string[];
        /**
         * Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
         */
        proxyHosts: string[];
        /**
         * Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         */
        serverName: string;
        /**
         * List of RadSec Servers. Only if not Mist Edge.
         */
        servers: outputs.site.GetWlansSiteWlanRadsecServer[];
        /**
         * use mxedge(s) as RadSec Proxy
         */
        useMxedge: boolean;
        /**
         * To use Site mxedges when this WLAN does not use mxtunnel
         */
        useSiteMxedge: boolean;
    }

    export interface GetWlansSiteWlanRadsecServer {
        host: string;
        port: number;
    }

    export interface GetWlansSiteWlanRateset {
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
         */
        ht: string;
        /**
         * If `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values
         */
        legacies: string[];
        /**
         * Minimum RSSI for client to connect, 0 means not enforcing
         */
        minRssi: number;
        /**
         * Data Rates template to apply. enum: 
         *   * `no-legacy`: no 11b
         *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
         *   * `legacy-only`: disable 802.11n and 802.11ac
         *   * `high-density`: no 11b, no low rates
         *   * `custom`: user defined
         */
        template: string;
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
         */
        vht: string;
    }

    export interface GetWlansSiteWlanSchedule {
        enabled: boolean;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours: outputs.site.GetWlansSiteWlanScheduleHours;
    }

    export interface GetWlansSiteWlanScheduleHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface NetworktemplateAclPolicy {
        /**
         * ACL Policy Actions:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        actions?: outputs.site.NetworktemplateAclPolicyAction[];
        name?: string;
        /**
         * ACL Policy Source Tags:
         *   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
         *   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
         */
        srcTags?: string[];
    }

    export interface NetworktemplateAclPolicyAction {
        /**
         * enum: `allow`, `deny`
         */
        action?: string;
        dstTag: string;
    }

    export interface NetworktemplateAclTags {
        /**
         * Required if
         *   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
         *   - `type`==`gbpResource`
         *   - `type`==`staticGbp` (applying gbp tag against matching conditions)
         */
        gbpTag?: number;
        /**
         * Required if 
         * - `type`==`mac`
         * - `type`==`staticGbp` if from matching mac
         */
        macs: string[];
        /**
         * If:
         *   * `type`==`mac` (optional. default is `any`)
         *   * `type`==`subnet` (optional. default is `any`)
         *   * `type`==`network`
         *   * `type`==`resource` (optional. default is `any`)
         *   * `type`==`staticGbp` if from matching network (vlan)
         */
        network?: string;
        /**
         * Required if:
         *   * `type`==`radiusGroup`
         *   * `type`==`staticGbp`
         * if from matching radius_group
         */
        radiusGroup?: string;
        /**
         * If `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
         */
        specs?: outputs.site.NetworktemplateAclTagsSpec[];
        /**
         * If 
         * - `type`==`subnet` 
         * - `type`==`resource` (optional. default is `any`)
         * - `type`==`staticGbp` if from matching subnet
         */
        subnets: string[];
        /**
         * enum: 
         *   * `any`: matching anything not identified
         *   * `dynamicGbp`: from the gbpTag received from RADIUS
         *   * `gbpResource`: can only be used in `dstTags`
         *   * `mac`
         *   * `network`
         *   * `radiusGroup`
         *   * `resource`: can only be used in `dstTags`
         *   * `staticGbp`: applying gbp tag against matching conditions
         *   * `subnet`'
         */
        type: string;
    }

    export interface NetworktemplateAclTagsSpec {
        /**
         * Matched dst port, "0" means any
         */
        portRange: string;
        /**
         * `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
         */
        protocol: string;
    }

    export interface NetworktemplateDhcpSnooping {
        allNetworks?: boolean;
        /**
         * Enable for dynamic ARP inspection check
         */
        enableArpSpoofCheck?: boolean;
        /**
         * Enable for check for forging source IP address
         */
        enableIpSourceGuard?: boolean;
        enabled?: boolean;
        /**
         * If `allNetworks`==`false`, list of network with DHCP snooping enabled
         */
        networks?: string[];
    }

    export interface NetworktemplateExtraRoutes {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.site.NetworktemplateExtraRoutesNextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface NetworktemplateExtraRoutes6 {
        /**
         * This takes precedence
         */
        discard: boolean;
        metric?: number;
        nextQualified?: {[key: string]: outputs.site.NetworktemplateExtraRoutes6NextQualified};
        noResolve: boolean;
        preference?: number;
        /**
         * Next-hop IP Address
         */
        via: string;
    }

    export interface NetworktemplateExtraRoutes6NextQualified {
        metric?: number;
        preference?: number;
    }

    export interface NetworktemplateExtraRoutesNextQualified {
        metric?: number;
        preference?: number;
    }

    export interface NetworktemplateMistNac {
        enabled?: boolean;
        network?: string;
    }

    export interface NetworktemplateNetworks {
        /**
         * Only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
         */
        gateway?: string;
        /**
         * Only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
         */
        gateway6?: string;
        /**
         * whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
         */
        isolation: boolean;
        isolationVlanId?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet?: string;
        /**
         * Optional for pure switching, required when L3 / routing features are used
         */
        subnet6?: string;
        vlanId: string;
    }

    export interface NetworktemplateOspfAreas {
        includeLoopback: boolean;
        ospfNetworks: {[key: string]: outputs.site.NetworktemplateOspfAreasOspfNetworks};
        /**
         * OSPF type. enum: `default`, `nssa`, `stub`
         */
        type: string;
    }

    export interface NetworktemplateOspfAreasOspfNetworks {
        /**
         * Required if `authType`==`md5`. Property key is the key number
         */
        authKeys: {[key: string]: string};
        /**
         * Required if `authType`==`password`, the password, max length is 8
         */
        authPassword?: string;
        /**
         * auth type. enum: `md5`, `none`, `password`
         */
        authType: string;
        bfdMinimumInterval?: number;
        deadInterval?: number;
        exportPolicy?: string;
        helloInterval?: number;
        importPolicy?: string;
        /**
         * interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
         */
        interfaceType: string;
        metric?: number;
        /**
         * By default, we'll re-advertise all learned OSPF routes toward overlay
         */
        noReadvertiseToOverlay: boolean;
        /**
         * Whether to send OSPF-Hello
         */
        passive: boolean;
    }

    export interface NetworktemplatePortMirroring {
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputNetworksIngresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsEgresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsIngresses: string[];
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputNetwork?: string;
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputPortId?: string;
    }

    export interface NetworktemplatePortUsages {
        /**
         * Only if `mode`==`trunk` whether to trunk all network/vlans
         */
        allNetworks: boolean;
        /**
         * Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
         */
        allowDhcpd?: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        allowMultipleSupplicants: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDown: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
         */
        bypassAuthWhenServerDownForUnkownClient: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        description?: string;
        /**
         * Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * Only if `mode`!=`dynamic` whether the port is disabled
         */
        disabled: boolean;
        /**
         * Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
         */
        dynamicVlanNetworks: string[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
         */
        enableMacAuth: boolean;
        /**
         * Only if `mode`!=`dynamic`
         */
        enableQos: boolean;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
         */
        guestNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
         */
        interSwitchLink: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
         */
        macAuthOnly?: boolean;
        /**
         * Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
         */
        macAuthPreferred?: boolean;
        /**
         * Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
         */
        macAuthProtocol: string;
        /**
         * Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
         */
        macLimit: number;
        /**
         * `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
         */
        mode?: string;
        /**
         * Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
         */
        mtu?: number;
        /**
         * Only if `mode`==`trunk`, the list of network/vlans
         */
        networks: string[];
        /**
         * Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
         */
        persistMac: boolean;
        /**
         * Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
         */
        poeDisabled: boolean;
        /**
         * Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
         */
        portAuth?: string;
        /**
         * Only if `mode`!=`dynamic` native network/vlan for untagged traffic
         */
        portNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
         */
        reauthInterval: number;
        /**
         * Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
         */
        resetDefaultWhen: string;
        /**
         * Only if `mode`==`dynamic`
         */
        rules?: outputs.site.NetworktemplatePortUsagesRule[];
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
         */
        serverFailNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
         */
        serverRejectNetwork?: string;
        /**
         * Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Switch storm control. Only if `mode`!=`dynamic`
         */
        stormControl?: outputs.site.NetworktemplatePortUsagesStormControl;
        /**
         * Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
         */
        stpEdge: boolean;
        stpNoRootPort: boolean;
        stpP2p: boolean;
        /**
         * Optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
         */
        uiEvpntopoId?: string;
        /**
         * If this is connected to a vstp network
         */
        useVstp: boolean;
        /**
         * Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
         */
        voipNetwork?: string;
    }

    export interface NetworktemplatePortUsagesRule {
        equals?: string;
        /**
         * Use `equalsAny` to match any item in a list
         */
        equalsAnies?: string[];
        /**
         * "[0:3]":"abcdef" > "abc"
         * "split(.)[1]": "a.b.c" > "b"
         * "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
         */
        expression?: string;
        /**
         * enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
         */
        src: string;
        /**
         * `portUsage` name
         */
        usage?: string;
    }

    export interface NetworktemplatePortUsagesStormControl {
        /**
         * Whether to disable storm control on broadcast traffic
         */
        noBroadcast: boolean;
        /**
         * Whether to disable storm control on multicast traffic
         */
        noMulticast: boolean;
        /**
         * Whether to disable storm control on registered multicast traffic
         */
        noRegisteredMulticast: boolean;
        /**
         * Whether to disable storm control on unknown unicast traffic
         */
        noUnknownUnicast: boolean;
        /**
         * Bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
         */
        percentage: number;
    }

    export interface NetworktemplateRadiusConfig {
        /**
         * How frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
         */
        acctInterimInterval: number;
        acctServers?: outputs.site.NetworktemplateRadiusConfigAcctServer[];
        authServers?: outputs.site.NetworktemplateRadiusConfigAuthServer[];
        /**
         * Radius auth session retries
         */
        authServersRetries: number;
        /**
         * Radius auth session timeout
         */
        authServersTimeout: number;
        /**
         * Use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
         */
        network?: string;
        /**
         * Use `network`or `sourceIp`
         */
        sourceIp?: string;
    }

    export interface NetworktemplateRadiusConfigAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface NetworktemplateRadiusConfigAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface NetworktemplateRemoteSyslog {
        archive?: outputs.site.NetworktemplateRemoteSyslogArchive;
        console?: outputs.site.NetworktemplateRemoteSyslogConsole;
        enabled: boolean;
        files?: outputs.site.NetworktemplateRemoteSyslogFile[];
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        network?: string;
        sendToAllServers: boolean;
        servers?: outputs.site.NetworktemplateRemoteSyslogServer[];
        /**
         * enum: `millisecond`, `year`, `year millisecond`
         */
        timeFormat?: string;
        users?: outputs.site.NetworktemplateRemoteSyslogUser[];
    }

    export interface NetworktemplateRemoteSyslogArchive {
        files?: number;
        size?: string;
    }

    export interface NetworktemplateRemoteSyslogConsole {
        contents?: outputs.site.NetworktemplateRemoteSyslogConsoleContent[];
    }

    export interface NetworktemplateRemoteSyslogConsoleContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogFile {
        archive?: outputs.site.NetworktemplateRemoteSyslogFileArchive;
        contents?: outputs.site.NetworktemplateRemoteSyslogFileContent[];
        explicitPriority?: boolean;
        file?: string;
        match?: string;
        structuredData?: boolean;
    }

    export interface NetworktemplateRemoteSyslogFileArchive {
        files?: number;
        size?: string;
    }

    export interface NetworktemplateRemoteSyslogFileContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogServer {
        contents?: outputs.site.NetworktemplateRemoteSyslogServerContent[];
        explicitPriority?: boolean;
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        host?: string;
        match?: string;
        port: number;
        /**
         * enum: `tcp`, `udp`
         */
        protocol: string;
        routingInstance?: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
        /**
         * If sourceAddress is configured, will use the vlan firstly otherwise use source_ip
         */
        sourceAddress?: string;
        structuredData?: boolean;
        tag?: string;
    }

    export interface NetworktemplateRemoteSyslogServerContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateRemoteSyslogUser {
        contents?: outputs.site.NetworktemplateRemoteSyslogUserContent[];
        match?: string;
        user?: string;
    }

    export interface NetworktemplateRemoteSyslogUserContent {
        /**
         * enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
         */
        facility: string;
        /**
         * enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
         */
        severity: string;
    }

    export interface NetworktemplateSnmpConfig {
        clientLists?: outputs.site.NetworktemplateSnmpConfigClientList[];
        contact?: string;
        description?: string;
        enabled: boolean;
        engineId?: string;
        location?: string;
        name?: string;
        network: string;
        trapGroups?: outputs.site.NetworktemplateSnmpConfigTrapGroup[];
        v2cConfigs?: outputs.site.NetworktemplateSnmpConfigV2cConfig[];
        v3Config?: outputs.site.NetworktemplateSnmpConfigV3Config;
        views?: outputs.site.NetworktemplateSnmpConfigView[];
    }

    export interface NetworktemplateSnmpConfigClientList {
        clientListName?: string;
        clients?: string[];
    }

    export interface NetworktemplateSnmpConfigTrapGroup {
        categories?: string[];
        /**
         * Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
         */
        groupName?: string;
        targets?: string[];
        /**
         * enum: `all`, `v1`, `v2`
         */
        version: string;
    }

    export interface NetworktemplateSnmpConfigV2cConfig {
        authorization?: string;
        /**
         * Client_list_name here should refer to clientList above
         */
        clientListName?: string;
        communityName?: string;
        /**
         * View name here should be defined in views above
         */
        view?: string;
    }

    export interface NetworktemplateSnmpConfigV3Config {
        notifies?: outputs.site.NetworktemplateSnmpConfigV3ConfigNotify[];
        notifyFilters?: outputs.site.NetworktemplateSnmpConfigV3ConfigNotifyFilter[];
        targetAddresses?: outputs.site.NetworktemplateSnmpConfigV3ConfigTargetAddress[];
        targetParameters?: outputs.site.NetworktemplateSnmpConfigV3ConfigTargetParameter[];
        usms?: outputs.site.NetworktemplateSnmpConfigV3ConfigUsm[];
        vacm?: outputs.site.NetworktemplateSnmpConfigV3ConfigVacm;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotify {
        name: string;
        tag: string;
        /**
         * enum: `inform`, `trap`
         */
        type: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotifyFilter {
        contents?: outputs.site.NetworktemplateSnmpConfigV3ConfigNotifyFilterContent[];
        profileName?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
        include?: boolean;
        oid: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigTargetAddress {
        address: string;
        addressMask: string;
        port: string;
        /**
         * Refer to notify tag, can be multiple with blank
         */
        tagList?: string;
        targetAddressName: string;
        /**
         * Refer to notify target parameters name
         */
        targetParameters?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigTargetParameter {
        /**
         * enum: `v1`, `v2c`, `v3`
         */
        messageProcessingModel: string;
        name: string;
        /**
         * Refer to profile-name in notify_filter
         */
        notifyFilter?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * Refer to securityName in usm
         */
        securityName?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigUsm {
        /**
         * enum: `localEngine`, `remoteEngine`
         */
        engineType: string;
        /**
         * Required only if `engineType`==`remoteEngine`
         */
        remoteEngineId?: string;
        users?: outputs.site.NetworktemplateSnmpConfigV3ConfigUsmUser[];
    }

    export interface NetworktemplateSnmpConfigV3ConfigUsmUser {
        /**
         * Not required if `authenticationType`==`authentication-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
         */
        authenticationPassword?: string;
        /**
         * sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication-md5`, `authentication-none`, `authentication-sha`, `authentication-sha224`, `authentication-sha256`, `authentication-sha384`, `authentication-sha512`
         */
        authenticationType?: string;
        /**
         * Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
         */
        encryptionPassword?: string;
        /**
         * enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
         */
        encryptionType?: string;
        name?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacm {
        accesses?: outputs.site.NetworktemplateSnmpConfigV3ConfigVacmAccess[];
        securityToGroup?: outputs.site.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmAccess {
        groupName?: string;
        prefixLists?: outputs.site.NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList[];
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
        /**
         * Only required if `type`==`contextPrefix`
         */
        contextPrefix?: string;
        /**
         * Refer to view name
         */
        notifyView?: string;
        /**
         * Refer to view name
         */
        readView?: string;
        /**
         * enum: `authentication`, `none`, `privacy`
         */
        securityLevel?: string;
        /**
         * enum: `any`, `usm`, `v1`, `v2c`
         */
        securityModel?: string;
        /**
         * enum: `contextPrefix`, `defaultContextPrefix`
         */
        type?: string;
        /**
         * Refer to view name
         */
        writeView?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
        contents?: outputs.site.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent[];
        /**
         * enum: `usm`, `v1`, `v2c`
         */
        securityModel?: string;
    }

    export interface NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
        /**
         * Refer to groupName under access
         */
        group?: string;
        securityName?: string;
    }

    export interface NetworktemplateSnmpConfigView {
        /**
         * If the root oid configured is included
         */
        include?: boolean;
        oid?: string;
        viewName?: string;
    }

    export interface NetworktemplateSwitchMatching {
        enable?: boolean;
        /**
         * list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
         */
        rules?: outputs.site.NetworktemplateSwitchMatchingRule[];
    }

    export interface NetworktemplateSwitchMatchingRule {
        /**
         * additional CLI commands to append to the generated Junos config. **Note**: no check is done
         */
        additionalConfigCmds: string[];
        /**
         * In-Band Management interface configuration
         */
        ipConfig?: outputs.site.NetworktemplateSwitchMatchingRuleIpConfig;
        /**
         * string the switch model must start with to use this rule. It is possible to combine with the `matchName` and `matchRole` attributes
         */
        matchModel: string;
        /**
         * string the switch name must start with to use this rule. Use the `matchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `matchModel` and `matchRole` attributes
         */
        matchName: string;
        /**
         * first character of the switch name to compare to the `matchName` value
         */
        matchNameOffset: number;
        /**
         * string the switch role must start with to use this rule. It is possible to combine with the `matchName` and `matchModel` attributes
         */
        matchRole?: string;
        /**
         * property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
         *
         * @deprecated The `matchType` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
Please update your configurations.
         */
        matchType: string;
        /**
         * @deprecated The `matchValue` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
Please update your configurations.
         */
        matchValue: string;
        name?: string;
        /**
         * Out-of-Band Management interface configuration
         */
        oobIpConfig?: outputs.site.NetworktemplateSwitchMatchingRuleOobIpConfig;
        /**
         * Propery key is the interface name or interface range
         */
        portConfig?: {[key: string]: outputs.site.NetworktemplateSwitchMatchingRulePortConfig};
        /**
         * Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
         */
        portMirroring?: {[key: string]: outputs.site.NetworktemplateSwitchMatchingRulePortMirroring};
    }

    export interface NetworktemplateSwitchMatchingRuleIpConfig {
        /**
         * VLAN Name for the management interface
         */
        network?: string;
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
    }

    export interface NetworktemplateSwitchMatchingRuleOobIpConfig {
        /**
         * enum: `dhcp`, `static`
         */
        type: string;
        /**
         * If supported on the platform. If enabled, DNS will be using this routing-instance, too
         */
        useMgmtVrf: boolean;
        /**
         * For host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
         */
        useMgmtVrfForHostOut: boolean;
    }

    export interface NetworktemplateSwitchMatchingRulePortConfig {
        /**
         * To disable LACP support for the AE interface
         */
        aeDisableLacp?: boolean;
        /**
         * Users could force to use the designated AE name
         */
        aeIdx?: number;
        /**
         * To use fast timeout
         */
        aeLacpSlow?: boolean;
        aggregated: boolean;
        /**
         * To generate port up/down alarm
         */
        critical?: boolean;
        description?: string;
        /**
         * If `speed` and `duplex` are specified, whether to disable autonegotiation
         */
        disableAutoneg: boolean;
        /**
         * enum: `auto`, `full`, `half`
         */
        duplex: string;
        /**
         * Enable dynamic usage for this port. Set to `dynamic` to enable.
         */
        dynamicUsage?: string;
        esilag?: boolean;
        /**
         * Media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
         */
        mtu: number;
        /**
         * Prevent helpdesk to override the port config
         */
        noLocalOverwrite?: boolean;
        poeDisabled: boolean;
        /**
         * enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
         */
        speed: string;
        /**
         * Port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
         */
        usage: string;
    }

    export interface NetworktemplateSwitchMatchingRulePortMirroring {
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputNetworksIngresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsEgresses: string[];
        /**
         * At least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or `inputNetworksIngress ` should be specified
         */
        inputPortIdsIngresses: string[];
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputNetwork?: string;
        /**
         * Exaclty one of the `outputPortId` or `outputNetwork` should be provided
         */
        outputPortId?: string;
    }

    export interface NetworktemplateSwitchMgmt {
        /**
         * AP_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default, this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
         */
        apAffinityThreshold: number;
        /**
         * Set Banners for switches. Allows markup formatting
         */
        cliBanner?: string;
        /**
         * Sets timeout for switches
         */
        cliIdleTimeout?: number;
        /**
         * Rollback timer for commit confirmed
         */
        configRevertTimer: number;
        /**
         * Enable to provide the FQDN with DHCP option 81
         */
        dhcpOptionFqdn: boolean;
        disableOobDownAlarm?: boolean;
        /**
         * Property key is the user name. For Local user authentication
         */
        localAccounts?: {[key: string]: outputs.site.NetworktemplateSwitchMgmtLocalAccounts};
        mxedgeProxyHost?: string;
        mxedgeProxyPort: number;
        /**
         * Restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped 
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
         */
        protectRe?: outputs.site.NetworktemplateSwitchMgmtProtectRe;
        rootPassword?: string;
        tacacs?: outputs.site.NetworktemplateSwitchMgmtTacacs;
        /**
         * To use mxedge as proxy
         */
        useMxedgeProxy?: boolean;
    }

    export interface NetworktemplateSwitchMgmtLocalAccounts {
        password?: string;
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        role: string;
    }

    export interface NetworktemplateSwitchMgmtProtectRe {
        /**
         * optionally, services we'll allow. enum: `icmp`, `ssh`
         */
        allowedServices: string[];
        customs: outputs.site.NetworktemplateSwitchMgmtProtectReCustom[];
        /**
         * When enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default
         *      if dhcpd is enabled, we'll make sure it works
         */
        enabled: boolean;
        /**
         * host/subnets we'll allow traffic to/from
         */
        trustedHosts: string[];
    }

    export interface NetworktemplateSwitchMgmtProtectReCustom {
        /**
         * matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        portRange: string;
        /**
         * enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        protocol: string;
        subnets: string[];
    }

    export interface NetworktemplateSwitchMgmtTacacs {
        acctServers?: outputs.site.NetworktemplateSwitchMgmtTacacsAcctServer[];
        /**
         * enum: `admin`, `helpdesk`, `none`, `read`
         */
        defaultRole: string;
        enabled?: boolean;
        /**
         * Which network the TACACS server resides
         */
        network?: string;
        tacplusServers?: outputs.site.NetworktemplateSwitchMgmtTacacsTacplusServer[];
    }

    export interface NetworktemplateSwitchMgmtTacacsAcctServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface NetworktemplateSwitchMgmtTacacsTacplusServer {
        host?: string;
        port?: string;
        secret?: string;
        timeout: number;
    }

    export interface NetworktemplateVrfConfig {
        /**
         * Whether to enable VRF (when supported on the device)
         */
        enabled?: boolean;
    }

    export interface NetworktemplateVrfInstances {
        /**
         * Property key is the destination CIDR (e.g. "10.0.0.0/8")
         */
        extraRoutes?: {[key: string]: outputs.site.NetworktemplateVrfInstancesExtraRoutes};
        networks?: string[];
    }

    export interface NetworktemplateVrfInstancesExtraRoutes {
        /**
         * Next-hop address
         */
        via: string;
    }

    export interface SettingAnalytic {
        /**
         * Enable Advanced Analytic feature (using SUB-ANA license)
         */
        enabled: boolean;
    }

    export interface SettingAutoUpgrade {
        /**
         * Custom versions for different models. Property key is the model name (e.g. "AP41")
         */
        customVersions: {[key: string]: string};
        /**
         * enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
         */
        dayOfWeek?: string;
        /**
         * Whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
         */
        enabled: boolean;
        /**
         * `any` / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
         */
        timeOfDay?: string;
        /**
         * desired version. enum: `beta`, `custom`, `stable`
         */
        version: string;
    }

    export interface SettingBleConfig {
        /**
         * Whether Mist beacons is enabled
         */
        beaconEnabled: boolean;
        /**
         * Required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
         */
        beaconRate: number;
        /**
         * enum: `custom`, `default`
         */
        beaconRateMode: string;
        /**
         * List of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
         */
        beamDisableds?: number[];
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send custom packet
         */
        customBlePacketEnabled: boolean;
        /**
         * The custom frame to be sent out in this beacon. The frame must be a hexstring
         */
        customBlePacketFrame: string;
        /**
         * Frequency (msec) of data emitted by custom ble beacon
         */
        customBlePacketFreqMsec: number;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUidAdvPower: number;
        eddystoneUidBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
         */
        eddystoneUidEnabled: boolean;
        /**
         * Frequency (msec) of data emmit by Eddystone-UID beacon
         */
        eddystoneUidFreqMsec: number;
        /**
         * Eddystone-UID instance for the device
         */
        eddystoneUidInstance: string;
        /**
         * Eddystone-UID namespace
         */
        eddystoneUidNamespace: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        eddystoneUrlAdvPower: number;
        eddystoneUrlBeams: string;
        /**
         * Only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
         */
        eddystoneUrlEnabled: boolean;
        /**
         * Frequency (msec) of data emit by Eddystone-UID beacon
         */
        eddystoneUrlFreqMsec: number;
        /**
         * URL pointed by Eddystone-URL beacon
         */
        eddystoneUrlUrl: string;
        /**
         * Advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
         */
        ibeaconAdvPower: number;
        ibeaconBeams: string;
        /**
         * Can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
         */
        ibeaconEnabled: boolean;
        /**
         * Frequency (msec) of data emmit for iBeacon
         */
        ibeaconFreqMsec: number;
        /**
         * Major number for iBeacon
         */
        ibeaconMajor: number;
        /**
         * Minor number for iBeacon
         */
        ibeaconMinor: number;
        /**
         * Optional, if not specified, the same UUID as the beacon will be used
         */
        ibeaconUuid: string;
        /**
         * Required if `powerMode`==`custom`; else use `powerMode` as default
         */
        power: number;
        /**
         * enum: `custom`, `default`
         */
        powerMode: string;
    }

    export interface SettingConfigPushPolicy {
        /**
         * Stop any new config from being pushed to the device
         */
        noPush: boolean;
        /**
         * If enabled, new config will only be pushed to device within the specified time window
         */
        pushWindow?: outputs.site.SettingConfigPushPolicyPushWindow;
    }

    export interface SettingConfigPushPolicyPushWindow {
        enabled: boolean;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours?: outputs.site.SettingConfigPushPolicyPushWindowHours;
    }

    export interface SettingConfigPushPolicyPushWindowHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface SettingCriticalUrlMonitoring {
        enabled: boolean;
        monitors: outputs.site.SettingCriticalUrlMonitoringMonitor[];
    }

    export interface SettingCriticalUrlMonitoringMonitor {
        url?: string;
        vlanId?: string;
    }

    export interface SettingEngagement {
        /**
         * Name associated to each tag
         */
        dwellTagNames?: outputs.site.SettingEngagementDwellTagNames;
        /**
         * add tags to visits within the duration (in seconds)
         */
        dwellTags?: outputs.site.SettingEngagementDwellTags;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours?: outputs.site.SettingEngagementHours;
        /**
         * Max time, default is 43200(12h), max is 68400 (18h)
         */
        maxDwell: number;
        /**
         * min time
         */
        minDwell?: number;
    }

    export interface SettingEngagementDwellTagNames {
        /**
         * Default to `Visitor`
         */
        bounce: string;
        /**
         * Default to `Associates`
         */
        engaged: string;
        /**
         * Default to `Passerby`
         */
        passerby: string;
        /**
         * Default to `Assets`
         */
        stationed: string;
    }

    export interface SettingEngagementDwellTags {
        /**
         * Default to `301-14400`
         */
        bounce: string;
        /**
         * Default to `14401-28800`
         */
        engaged: string;
        /**
         * Default to `1-300`
         */
        passerby: string;
        /**
         * Default to `28801-42000`
         */
        stationed: string;
    }

    export interface SettingEngagementHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface SettingGatewayMgmt {
        /**
         * For SSR only, as direct root access is not allowed
         */
        adminSshkeys: string[];
        appProbing?: outputs.site.SettingGatewayMgmtAppProbing;
        /**
         * Consumes uplink bandwidth, requires WA license
         */
        appUsage?: boolean;
        autoSignatureUpdate?: outputs.site.SettingGatewayMgmtAutoSignatureUpdate;
        /**
         * Rollback timer for commit confirmed
         */
        configRevertTimer: number;
        /**
         * For both SSR and SRX disable console port
         */
        disableConsole: boolean;
        /**
         * For both SSR and SRX disable management interface
         */
        disableOob: boolean;
        probeHosts: string[];
        /**
         * Restrict inbound-traffic to host
         * when enabled, all traffic that is not essential to our operation will be dropped 
         * e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
         */
        protectRe?: outputs.site.SettingGatewayMgmtProtectRe;
        /**
         * For SRX only
         */
        rootPassword?: string;
        securityLogSourceAddress?: string;
        securityLogSourceInterface?: string;
    }

    export interface SettingGatewayMgmtAppProbing {
        /**
         * APp-keys from /api/v1/const/applications
         */
        apps?: string[];
        customApps?: outputs.site.SettingGatewayMgmtAppProbingCustomApp[];
        enabled?: boolean;
    }

    export interface SettingGatewayMgmtAppProbingCustomApp {
        address: string;
        appType?: string;
        /**
         * Only 1 entry is allowed:
         *     * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
         *     * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
         */
        hostnames: string[];
        key: string;
        name: string;
        network?: string;
        /**
         * If `protocol`==`icmp`
         */
        packetSize?: number;
        /**
         * enum: `http`, `icmp`
         */
        protocol: string;
        url: string;
        vrf?: string;
    }

    export interface SettingGatewayMgmtAutoSignatureUpdate {
        /**
         * enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
         */
        dayOfWeek?: string;
        enable: boolean;
        /**
         * Optional, Mist will decide the timing
         */
        timeOfDay?: string;
    }

    export interface SettingGatewayMgmtProtectRe {
        /**
         * optionally, services we'll allow. enum: `icmp`, `ssh`
         */
        allowedServices: string[];
        customs: outputs.site.SettingGatewayMgmtProtectReCustom[];
        /**
         * When enabled, all traffic that is not essential to our operation will be dropped
         * e.g. ntp / dns / traffic to mist will be allowed by default
         *      if dhcpd is enabled, we'll make sure it works
         */
        enabled: boolean;
        /**
         * host/subnets we'll allow traffic to/from
         */
        trustedHosts: string[];
    }

    export interface SettingGatewayMgmtProtectReCustom {
        /**
         * matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        portRange: string;
        /**
         * enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
         */
        protocol: string;
        subnets: string[];
    }

    export interface SettingJuniperSrx {
        gateways?: outputs.site.SettingJuniperSrxGateway[];
        sendMistNacUserInfo?: boolean;
    }

    export interface SettingJuniperSrxGateway {
        apiKey?: string;
        apiUrl?: string;
    }

    export interface SettingLed {
        brightness: number;
        enabled: boolean;
    }

    export interface SettingOccupancy {
        /**
         * Indicate whether named BLE assets should be included in the zone occupancy calculation
         */
        assetsEnabled: boolean;
        /**
         * Indicate whether connected Wi-Fi clients should be included in the zone occupancy calculation
         */
        clientsEnabled: boolean;
        /**
         * Minimum duration
         */
        minDuration: number;
        /**
         * Indicate whether SDK clients should be included in the zone occupancy calculation
         */
        sdkclientsEnabled: boolean;
        /**
         * Indicate whether unconnected Wi-Fi clients should be included in the zone occupancy calculation
         */
        unconnectedClientsEnabled: boolean;
    }

    export interface SettingProxy {
        url?: string;
    }

    export interface SettingRogue {
        /**
         * Whether rogue detection is enabled
         */
        enabled: boolean;
        /**
         * Whether honeypot detection is enabled
         */
        honeypotEnabled: boolean;
        /**
         * Minimum duration for a bssid to be considered rogue
         */
        minDuration: number;
        /**
         * Minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
         */
        minRssi: number;
        /**
         * list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
         */
        whitelistedBssids: string[];
        /**
         * List of SSIDs to whitelist
         */
        whitelistedSsids: string[];
    }

    export interface SettingRtsa {
        appWaking: boolean;
        disableDeadReckoning?: boolean;
        disablePressureSensor: boolean;
        enabled?: boolean;
        /**
         * Asset tracking related
         */
        trackAsset: boolean;
    }

    export interface SettingSimpleAlert {
        arpFailure?: outputs.site.SettingSimpleAlertArpFailure;
        dhcpFailure?: outputs.site.SettingSimpleAlertDhcpFailure;
        dnsFailure?: outputs.site.SettingSimpleAlertDnsFailure;
    }

    export interface SettingSimpleAlertArpFailure {
        clientCount: number;
        /**
         * failing within minutes
         */
        duration: number;
        incidentCount: number;
    }

    export interface SettingSimpleAlertDhcpFailure {
        clientCount: number;
        /**
         * failing within minutes
         */
        duration: number;
        incidentCount: number;
    }

    export interface SettingSimpleAlertDnsFailure {
        clientCount: number;
        /**
         * failing within minutes
         */
        duration: number;
        incidentCount: number;
    }

    export interface SettingSkyatp {
        enabled?: boolean;
        /**
         * Whether to send IP-MAC mapping to SkyATP
         */
        sendIpMacMapping: boolean;
    }

    export interface SettingSrxApp {
        enabled: boolean;
    }

    export interface SettingSsr {
        conductorHosts?: string[];
        disableStats?: boolean;
    }

    export interface SettingSyntheticTest {
        disabled: boolean;
        vlans?: outputs.site.SettingSyntheticTestVlan[];
        wanSpeedtest?: outputs.site.SettingSyntheticTestWanSpeedtest;
    }

    export interface SettingSyntheticTestVlan {
        customTestUrls: string[];
        /**
         * For some vlans where we don't want this to run
         */
        disabled: boolean;
        vlanIds: string[];
    }

    export interface SettingSyntheticTestWanSpeedtest {
        enabled?: boolean;
        /**
         * `any` / HH:MM (24-hour format)
         */
        timeOfDay: string;
    }

    export interface SettingUplinkPortConfig {
        /**
         * Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
         */
        dot1x: boolean;
        /**
         * By default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
         */
        keepWlansUpIfDown: boolean;
    }

    export interface SettingVna {
        /**
         * Enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
         */
        enabled: boolean;
    }

    export interface SettingVsInstance {
        networks: string[];
    }

    export interface SettingWanVna {
        enabled: boolean;
    }

    export interface SettingWids {
        repeatedAuthFailures?: outputs.site.SettingWidsRepeatedAuthFailures;
    }

    export interface SettingWidsRepeatedAuthFailures {
        /**
         * Window where a trigger will be detected and action to be taken (in seconds)
         */
        duration?: number;
        /**
         * Count of events to trigger
         */
        threshold?: number;
    }

    export interface SettingWifi {
        ciscoEnabled: boolean;
        /**
         * Whether to disable 11k
         */
        disable11k: boolean;
        disableRadiosWhenPowerConstrained: boolean;
        /**
         * When proxyArp is enabled, check for arp spoofing.
         */
        enableArpSpoofCheck: boolean;
        enableSharedRadioScanning: boolean;
        /**
         * Enable Wi-Fi feature (using SUB-MAN license)
         */
        enabled: boolean;
        /**
         * Whether to locate connected clients
         */
        locateConnected: boolean;
        /**
         * Whether to locate unconnected clients
         */
        locateUnconnected: boolean;
        /**
         * Whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
         */
        meshAllowDfs: boolean;
        /**
         * Used to enable/disable CRM
         */
        meshEnableCrm: boolean;
        /**
         * Whether to enable Mesh feature for the site
         */
        meshEnabled: boolean;
        /**
         * Optional passphrase of mesh networking, default is generated randomly
         */
        meshPsk?: string;
        /**
         * Optional ssid of mesh networking, default is based on site_id
         */
        meshSsid?: string;
        /**
         * enum: `default`, `disabled`, `enabled`
         */
        proxyArp?: string;
    }

    export interface SettingWiredVna {
        enabled: boolean;
    }

    export interface SettingZoneOccupancyAlert {
        /**
         * List of email addresses to send email notifications when the alert threshold is reached
         */
        emailNotifiers?: string[];
        /**
         * Indicate whether zone occupancy alert is enabled for the site
         */
        enabled: boolean;
        /**
         * Sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
         */
        threshold: number;
    }

    export interface WlanAcctServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Acct port of RADIUS server
         */
        port: number;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface WlanAirwatch {
        /**
         * API Key
         */
        apiKey: string;
        /**
         * Console URL
         */
        consoleUrl: string;
        enabled: boolean;
        /**
         * Password
         */
        password: string;
        /**
         * Username
         */
        username: string;
    }

    export interface WlanAppLimit {
        /**
         * Map from app key to bandwidth in kbps. 
         * Property key is the app key, defined in Get Application List
         */
        apps?: {[key: string]: number};
        enabled: boolean;
        /**
         * Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
         */
        wxtagIds: {[key: string]: number};
    }

    export interface WlanAppQos {
        apps?: {[key: string]: outputs.site.WlanAppQosApps};
        enabled: boolean;
        others?: outputs.site.WlanAppQosOther[];
    }

    export interface WlanAppQosApps {
        dscp?: number;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        dstSubnet?: string;
        /**
         * Subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
         */
        srcSubnet?: string;
    }

    export interface WlanAppQosOther {
        dscp?: number;
        dstSubnet?: string;
        portRanges?: string;
        protocol?: string;
        srcSubnet?: string;
    }

    export interface WlanAuth {
        /**
         * SAE anti-clogging token threshold
         */
        anticlogThreshold?: number;
        /**
         * Whether to trigger EAP reauth when the session ends
         */
        eapReauth: boolean;
        /**
         * Whether to enable MAC Auth, uses the same auth_servers
         */
        enableMacAuth: boolean;
        /**
         * When `type`==`wep`
         */
        keyIdx: number;
        /**
         * When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
         */
        keys: string[];
        /**
         * When `type`==`psk`, whether to only use multi_psk
         */
        multiPskOnly: boolean;
        /**
         * if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
         */
        owe?: string;
        /**
         * When `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
         */
        pairwises: string[];
        /**
         * When `multiPskOnly`==`true`, whether private wlan is enabled
         */
        privateWlan: boolean;
        /**
         * When `type`==`psk`, 8-64 characters, or 64 hex characters
         */
        psk: string;
        /**
         * enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
         */
        type: string;
        /**
         * Enable WEP as secondary auth
         */
        wepAsSecondaryAuth?: boolean;
    }

    export interface WlanAuthServer {
        /**
         * IP/ hostname of RADIUS server
         */
        host: string;
        keywrapEnabled?: boolean;
        /**
         * enum: `ascii`, `hex`
         */
        keywrapFormat?: string;
        keywrapKek?: string;
        keywrapMack?: string;
        /**
         * Auth port of RADIUS server
         */
        port: number;
        /**
         * Whether to require Message-Authenticator in requests
         */
        requireMessageAuthenticator: boolean;
        /**
         * Secretof RADIUS server
         */
        secret: string;
    }

    export interface WlanBonjour {
        /**
         * additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
         */
        additionalVlanIds: string[];
        /**
         * Whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
         */
        enabled: boolean;
        /**
         * What services are allowed. 
         * Property key is the service name
         */
        services: {[key: string]: outputs.site.WlanBonjourServices};
    }

    export interface WlanBonjourServices {
        /**
         * Whether to prevent wireless clients to discover bonjour devices on the same WLAN
         */
        disableLocal: boolean;
        /**
         * Optional, if the service is further restricted for certain RADIUS groups
         */
        radiusGroups?: string[];
        /**
         * how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
         */
        scope: string;
    }

    export interface WlanCiscoCwa {
        /**
         * List of hostnames without http(s):// (matched by substring)
         */
        allowedHostnames?: string[];
        /**
         * List of CIDRs
         */
        allowedSubnets?: string[];
        /**
         * List of blocked CIDRs
         */
        blockedSubnets?: string[];
        enabled: boolean;
    }

    export interface WlanCoaServer {
        /**
         * Whether to disable Event-Timestamp Check
         */
        disableEventTimestampCheck: boolean;
        enabled: boolean;
        ip: string;
        port: number;
        secret: string;
    }

    export interface WlanDnsServerRewrite {
        enabled: boolean;
        /**
         * Map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
         */
        radiusGroups?: {[key: string]: string};
    }

    export interface WlanDynamicPsk {
        /**
         * Default PSK to use if cloud WLC is not available, 8-63 characters
         */
        defaultPsk?: string;
        defaultVlanId?: string;
        enabled: boolean;
        /**
         * When 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
         */
        forceLookup: boolean;
        /**
         * enum: `cloudPsks`, `radius`
         */
        source: string;
    }

    export interface WlanDynamicVlan {
        /**
         * Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
         */
        defaultVlanIds: string[];
        /**
         * Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
         */
        enabled: boolean;
        /**
         * VLAN_ids to be locally bridged
         */
        localVlanIds: string[];
        /**
         * standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
         */
        type: string;
        /**
         * Map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
         *   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
         *   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
         */
        vlans?: {[key: string]: string};
    }

    export interface WlanHotspot20 {
        domainNames?: string[];
        /**
         * Whether to enable hotspot 2.0 config
         */
        enabled?: boolean;
        naiRealms?: string[];
        /**
         * List of operators to support
         */
        operators?: string[];
        rcois?: string[];
        /**
         * Venue name, default is site name
         */
        venueName?: string;
    }

    export interface WlanInjectDhcpOption82 {
        /**
         * Information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
         *   * {{AP_MAC}}
         *   * {{AP_MAC_DASHED}}
         *   * {{AP_MODEL}}
         *   * {{AP_NAME}}
         *   * {{SITE_NAME}}
         *   * {{SSID}}
         */
        circuitId?: string;
        /**
         * Whether to inject option 82 when forwarding DHCP packets
         */
        enabled: boolean;
    }

    export interface WlanMistNac {
        /**
         * When enabled:
         *   * `authServers` is ignored
         *   * `acctServers` is ignored
         *   * `auth_servers_*` are ignored
         *   * `coaServers` is ignored
         *   * `radsec` is ignored
         *   * `coaEnabled` is assumed
         */
        enabled: boolean;
    }

    export interface WlanPortal {
        /**
         * Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
         */
        allowWlanIdRoam?: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        amazonClientId: string;
        /**
         * Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
         */
        amazonClientSecret: string;
        /**
         * Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        amazonEmailDomains: string[];
        /**
         * Whether amazon is enabled as a login method
         */
        amazonEnabled: boolean;
        /**
         * Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
         */
        amazonExpire?: number;
        /**
         * authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
         */
        auth: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client id
         */
        azureClientId: string;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory app client secret
         */
        azureClientSecret: string;
        /**
         * Whether Azure Active Directory is enabled as a login method
         */
        azureEnabled: boolean;
        /**
         * Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
         */
        azureExpire?: number;
        /**
         * Required if `azureEnabled`==`true`. Azure active directory tenant id.
         */
        azureTenantId: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetPassword: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetSid?: string;
        /**
         * Required if `smsProvider`==`broadnet`
         */
        broadnetUserId?: string;
        /**
         * Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
         */
        bypassWhenCloudDown: boolean;
        /**
         * Required if `smsProvider`==`clickatell`
         */
        clickatellApiKey?: string;
        /**
         * Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
         */
        crossSite?: boolean;
        /**
         * Whether email (access code verification) is enabled as a login method
         */
        emailEnabled: boolean;
        /**
         * Whether guest portal is enabled
         */
        enabled: boolean;
        /**
         * How long to remain authorized, in minutes
         */
        expire: number;
        /**
         * Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
         */
        externalPortalUrl: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        facebookClientId: string;
        /**
         * Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
         */
        facebookClientSecret: string;
        /**
         * Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        facebookEmailDomains: string[];
        /**
         * Whether facebook is enabled as a login method
         */
        facebookEnabled: boolean;
        /**
         * Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
         */
        facebookExpire?: number;
        /**
         * Whether to forward the user to another URL after authorized
         */
        forward: boolean;
        /**
         * URL to forward the user to
         */
        forwardUrl: string;
        /**
         * Google OAuth2 app id. This is optional. If not provided, it will use a default one.
         */
        googleClientId: string;
        /**
         * Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
         */
        googleClientSecret: string;
        /**
         * Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        googleEmailDomains: string[];
        /**
         * Whether Google is enabled as login method
         */
        googleEnabled: boolean;
        /**
         * Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
         */
        googleExpire?: number;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupPassword?: string;
        /**
         * Required if `smsProvider`==`gupshup`
         */
        gupshupUserid?: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
         */
        microsoftClientId: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
         */
        microsoftClientSecret: string;
        /**
         * Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
         */
        microsoftEmailDomains: string[];
        /**
         * Whether microsoft 365 is enabled as a login method
         */
        microsoftEnabled: boolean;
        /**
         * Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
         */
        microsoftExpire?: number;
        /**
         * Whether password is enabled
         */
        passphraseEnabled: boolean;
        /**
         * Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
         */
        passphraseExpire?: number;
        /**
         * Required if `passphraseEnabled`==`true`.
         */
        password: string;
        /**
         * Whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
         */
        predefinedSponsorsEnabled: boolean;
        /**
         * Whether to hide sponsor’s email from list of sponsors
         */
        predefinedSponsorsHideEmail: boolean;
        privacy: boolean;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelPassword?: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelServiceId?: string;
        /**
         * Required if `smsProvider`==`puzzel`
         */
        puzzelUsername?: string;
        /**
         * Whether sms is enabled as a login method
         */
        smsEnabled: boolean;
        /**
         * Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
         */
        smsExpire?: number;
        /**
         * Optional if `smsEnabled`==`true`. SMS Message format
         */
        smsMessageFormat: string;
        /**
         * Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
         */
        smsProvider: string;
        /**
         * Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
         */
        sponsorAutoApprove?: boolean;
        /**
         * List of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
         */
        sponsorEmailDomains: string[];
        /**
         * Whether sponsor is enabled
         */
        sponsorEnabled: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
         */
        sponsorExpire?: number;
        /**
         * Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
         */
        sponsorLinkValidityDuration: string;
        /**
         * Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
         */
        sponsorNotifyAll: boolean;
        /**
         * Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
         */
        sponsorStatusNotify: boolean;
        /**
         * object of allowed sponsors email with name. Required if `sponsorEnabled`
         *             is `true` and `sponsorEmailDomains` is empty.
         *
         *             Property key is the sponsor email, Property value is the sponsor name
         */
        sponsors: {[key: string]: string};
        /**
         * Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
         */
        ssoDefaultRole: string;
        /**
         * Optionl if `wlanPortalAuth`==`sso`
         */
        ssoForcedRole: string;
        /**
         * Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
         */
        ssoIdpCert: string;
        /**
         * Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
         */
        ssoIdpSignAlgo: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
         */
        ssoIdpSsoUrl: string;
        /**
         * Required if `wlanPortalAuth`==`sso`, IDP issuer URL
         */
        ssoIssuer: string;
        /**
         * Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
         */
        ssoNameidFormat: string;
        /**
         * Required if `smsProvider`==`telstra`, Client ID provided by Telstra
         */
        telstraClientId?: string;
        /**
         * Required if `smsProvider`==`telstra`, Client secret provided by Telstra
         */
        telstraClientSecret?: string;
        /**
         * Required if `smsProvider`==`twilio`, Auth token account with twilio account
         */
        twilioAuthToken?: string;
        /**
         * Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
         */
        twilioPhoneNumber?: string;
        /**
         * Required if `smsProvider`==`twilio`, Account SID provided by Twilio
         */
        twilioSid?: string;
    }

    export interface WlanPortalTemplatePortalTemplate {
        accessCodeAlternateEmail: string;
        /**
         * defines alignment on portal. enum: `center`, `left`, `right`
         */
        alignment: string;
        /**
         * Label for Amazon auth button
         */
        authButtonAmazon: string;
        /**
         * Label for Azure auth button
         */
        authButtonAzure: string;
        /**
         * Label for Email auth button
         */
        authButtonEmail: string;
        /**
         * Label for Facebook auth button
         */
        authButtonFacebook: string;
        /**
         * Label for Google auth button
         */
        authButtonGoogle: string;
        /**
         * Label for Microsoft auth button
         */
        authButtonMicrosoft: string;
        /**
         * Label for passphrase auth button
         */
        authButtonPassphrase: string;
        /**
         * Label for SMS auth button
         */
        authButtonSms: string;
        /**
         * Label for Sponsor auth button
         */
        authButtonSponsor: string;
        authLabel: string;
        /**
         * Label of the link to go back to /logon
         */
        backLink?: string;
        /**
         * Portal main color
         */
        color: string;
        colorDark: string;
        colorLight: string;
        /**
         * Whether company field is required
         */
        company: boolean;
        /**
         * Error message when company not provided
         */
        companyError: string;
        /**
         * Label of company field
         */
        companyLabel: string;
        /**
         * Whether email field is required
         */
        email: boolean;
        /**
         * Error message when a user has valid social login but doesn't match specified email domains.
         */
        emailAccessDomainError: string;
        /**
         * Label for cancel confirmation code submission using email auth
         */
        emailCancel: string;
        emailCodeCancel: string;
        emailCodeError: string;
        emailCodeFieldLabel: string;
        emailCodeMessage: string;
        emailCodeSubmit: string;
        emailCodeTitle: string;
        /**
         * Error message when email not provided
         */
        emailError: string;
        emailFieldLabel: string;
        /**
         * Label of email field
         */
        emailLabel: string;
        emailMessage: string;
        /**
         * Label for confirmation code submit button using email auth
         */
        emailSubmit: string;
        /**
         * Title for the Email registration
         */
        emailTitle: string;
        /**
         * Whether to ask field1
         */
        field1: boolean;
        /**
         * Error message when field1 not provided
         */
        field1error: string;
        /**
         * Label of field1
         */
        field1label: string;
        /**
         * Whether field1 is required field
         */
        field1required?: boolean;
        /**
         * Whether to ask field2
         */
        field2: boolean;
        /**
         * Error message when field2 not provided
         */
        field2error: string;
        /**
         * Label of field2
         */
        field2label: string;
        /**
         * Whether field2 is required field
         */
        field2required?: boolean;
        /**
         * Whether to ask field3
         */
        field3: boolean;
        /**
         * Error message when field3 not provided
         */
        field3error: string;
        /**
         * Label of field3
         */
        field3label: string;
        /**
         * Whether field3 is required field
         */
        field3required?: boolean;
        /**
         * Whether to ask field4
         */
        field4: boolean;
        /**
         * Error message when field4 not provided
         */
        field4error: string;
        /**
         * Label of field4
         */
        field4label: string;
        /**
         * Whether field4 is required field
         */
        field4required?: boolean;
        /**
         * Can be used to localize the portal based on the User Agent. Allowed property key values are:
         *   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
         *   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
         *   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
         *   `zh-Hans`, `zh-Hant`
         */
        locales?: {[key: string]: outputs.site.WlanPortalTemplatePortalTemplateLocales};
        /**
         * path to the background image file. File must be a `png` image`
         */
        logo: string;
        message: string;
        multiAuth: boolean;
        /**
         * Whether name field is required
         */
        name: boolean;
        /**
         * Error message when name not provided
         */
        nameError: string;
        /**
         * Label of name field
         */
        nameLabel: string;
        /**
         * Default value for the `Do not store` checkbox
         */
        optOutDefault: boolean;
        /**
         * Whether to display Do Not Store My Personal Information
         */
        optout: boolean;
        /**
         * Label for Do Not Store My Personal Information
         */
        optoutLabel: string;
        pageTitle: string;
        /**
         * Label for the Passphrase cancel button
         */
        passphraseCancel: string;
        /**
         * Error message when invalid passphrase is provided
         */
        passphraseError: string;
        /**
         * Passphrase
         */
        passphraseLabel: string;
        passphraseMessage: string;
        /**
         * Label for the Passphrase submit button
         */
        passphraseSubmit: string;
        /**
         * Title for passphrase details page
         */
        passphraseTitle: string;
        /**
         * Whether to show \"Powered by Mist\"
         */
        poweredBy: boolean;
        /**
         * Whether to require the Privacy Term acceptance
         */
        privacy: boolean;
        /**
         * Prefix of the label of the link to go to Privacy Policy
         */
        privacyPolicyAcceptLabel: string;
        /**
         * Error message when Privacy Policy not accepted
         */
        privacyPolicyError: string;
        /**
         * Label of the link to go to Privacy Policy
         */
        privacyPolicyLink: string;
        /**
         * Text of the Privacy Policy
         */
        privacyPolicyText: string;
        /**
         * Label to denote required field
         */
        requiredFieldLabel: string;
        responsiveLayout: boolean;
        /**
         * Label of the button to /signin
         */
        signInLabel: string;
        smsCarrierDefault: string;
        smsCarrierError: string;
        /**
         * Label for mobile carrier drop-down list
         */
        smsCarrierFieldLabel: string;
        /**
         * Label for cancel confirmation code submission
         */
        smsCodeCancel: string;
        /**
         * Error message when confirmation code is invalid
         */
        smsCodeError: string;
        smsCodeFieldLabel: string;
        smsCodeMessage: string;
        /**
         * Label for confirmation code submit button
         */
        smsCodeSubmit: string;
        smsCodeTitle: string;
        smsCountryFieldLabel: string;
        smsCountryFormat: string;
        /**
         * Label for checkbox to specify that the user has access code
         */
        smsHaveAccessCode: string;
        smsIsTwilio: boolean;
        /**
         * Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         */
        smsMessageFormat?: string;
        /**
         * Label for canceling mobile details for SMS auth
         */
        smsNumberCancel: string;
        smsNumberError: string;
        /**
         * Label for field to provide mobile number
         */
        smsNumberFieldLabel: string;
        smsNumberFormat: string;
        smsNumberMessage: string;
        /**
         * Label for submit button for code generation
         */
        smsNumberSubmit: string;
        /**
         * Title for phone number details
         */
        smsNumberTitle: string;
        smsUsernameFormat: string;
        /**
         * How long confirmation code should be considered valid (in minutes)
         */
        smsValidityDuration?: number;
        sponsorBackLink: string;
        sponsorCancel: string;
        /**
         * Label for Sponsor Email
         */
        sponsorEmail: string;
        sponsorEmailError: string;
        /**
         * HTML template to replace/override default sponsor email template 
         * Sponsor Email Template supports following template variables:
         *   * `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
         *   * `denyUrl`: Renders URL to reject the request
         *   * `guestEmail`: Renders Email ID of the guest
         *   * `guestName`: Renders Name of the guest
         *   * `field1`: Renders value of the Custom Field 1
         *   * `field2`: Renders value of the Custom Field 2
         *   * `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
         *   * `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
         */
        sponsorEmailTemplate: string;
        sponsorInfoApproved: string;
        sponsorInfoDenied: string;
        sponsorInfoPending: string;
        /**
         * Label for Sponsor Name
         */
        sponsorName: string;
        sponsorNameError: string;
        sponsorNotePending: string;
        /**
         * Submit button label request Wifi Access and notify sponsor about guest request
         */
        sponsorRequestAccess: string;
        /**
         * Text to display if sponsor approves request
         */
        sponsorStatusApproved: string;
        /**
         * Text to display when sponsor denies request
         */
        sponsorStatusDenied: string;
        /**
         * Text to display if request is still pending
         */
        sponsorStatusPending: string;
        /**
         * Submit button label to notify sponsor about guest request
         */
        sponsorSubmit: string;
        sponsorsError: string;
        sponsorsFieldLabel: string;
        tos: boolean;
        /**
         * Prefix of the label of the link to go to tos
         */
        tosAcceptLabel: string;
        /**
         * Error message when tos not accepted
         */
        tosError: string;
        /**
         * Label of the link to go to tos
         */
        tosLink: string;
        /**
         * Text of the Terms of Service
         */
        tosText: string;
    }

    export interface WlanPortalTemplatePortalTemplateLocales {
        /**
         * Label for Amazon auth button
         */
        authButtonAmazon?: string;
        /**
         * Label for Azure auth button
         */
        authButtonAzure?: string;
        /**
         * Label for Email auth button
         */
        authButtonEmail?: string;
        /**
         * Label for Facebook auth button
         */
        authButtonFacebook?: string;
        /**
         * Label for Google auth button
         */
        authButtonGoogle?: string;
        /**
         * Label for Microsoft auth button
         */
        authButtonMicrosoft?: string;
        /**
         * Label for passphrase auth button
         */
        authButtonPassphrase?: string;
        /**
         * Label for SMS auth button
         */
        authButtonSms?: string;
        /**
         * Label for Sponsor auth button
         */
        authButtonSponsor?: string;
        authLabel?: string;
        /**
         * Label of the link to go back to /logon
         */
        backLink?: string;
        /**
         * Error message when company not provided
         */
        companyError?: string;
        /**
         * Label of company field
         */
        companyLabel?: string;
        /**
         * Error message when a user has valid social login but doesn't match specified email domains.
         */
        emailAccessDomainError?: string;
        /**
         * Label for cancel confirmation code submission using email auth
         */
        emailCancel?: string;
        emailCodeCancel?: string;
        emailCodeError?: string;
        emailCodeFieldLabel?: string;
        emailCodeMessage?: string;
        emailCodeSubmit?: string;
        emailCodeTitle?: string;
        /**
         * Error message when email not provided
         */
        emailError?: string;
        emailFieldLabel?: string;
        /**
         * Label of email field
         */
        emailLabel?: string;
        emailMessage?: string;
        /**
         * Label for confirmation code submit button using email auth
         */
        emailSubmit?: string;
        /**
         * Title for the Email registration
         */
        emailTitle?: string;
        /**
         * Error message when field1 not provided
         */
        field1error?: string;
        /**
         * Label of field1
         */
        field1label?: string;
        /**
         * Error message when field2 not provided
         */
        field2error?: string;
        /**
         * Label of field2
         */
        field2label?: string;
        /**
         * Error message when field3 not provided
         */
        field3error?: string;
        /**
         * Label of field3
         */
        field3label?: string;
        /**
         * Error message when field4 not provided
         */
        field4error?: string;
        /**
         * Label of field4
         */
        field4label?: string;
        message?: string;
        /**
         * Error message when name not provided
         */
        nameError?: string;
        /**
         * Label of name field
         */
        nameLabel?: string;
        /**
         * Label for Do Not Store My Personal Information
         */
        optoutLabel?: string;
        pageTitle?: string;
        /**
         * Label for the Passphrase cancel button
         */
        passphraseCancel?: string;
        /**
         * Error message when invalid passphrase is provided
         */
        passphraseError?: string;
        /**
         * Passphrase
         */
        passphraseLabel?: string;
        passphraseMessage?: string;
        /**
         * Label for the Passphrase submit button
         */
        passphraseSubmit?: string;
        /**
         * Title for passphrase details page
         */
        passphraseTitle?: string;
        /**
         * Prefix of the label of the link to go to Privacy Policy
         */
        privacyPolicyAcceptLabel?: string;
        /**
         * Error message when Privacy Policy not accepted
         */
        privacyPolicyError?: string;
        /**
         * Label of the link to go to Privacy Policy
         */
        privacyPolicyLink?: string;
        /**
         * Text of the Privacy Policy
         */
        privacyPolicyText?: string;
        /**
         * Label to denote required field
         */
        requiredFieldLabel?: string;
        /**
         * Label of the button to /signin
         */
        signInLabel?: string;
        smsCarrierDefault?: string;
        smsCarrierError?: string;
        /**
         * Label for mobile carrier drop-down list
         */
        smsCarrierFieldLabel?: string;
        /**
         * Label for cancel confirmation code submission
         */
        smsCodeCancel?: string;
        /**
         * Error message when confirmation code is invalid
         */
        smsCodeError?: string;
        smsCodeFieldLabel?: string;
        smsCodeMessage?: string;
        /**
         * Label for confirmation code submit button
         */
        smsCodeSubmit?: string;
        smsCodeTitle?: string;
        smsCountryFieldLabel?: string;
        smsCountryFormat?: string;
        /**
         * Label for checkbox to specify that the user has access code
         */
        smsHaveAccessCode?: string;
        /**
         * Format of access code sms message. {{code}} and {{duration}} are placeholders and should be retained as is.
         */
        smsMessageFormat?: string;
        /**
         * Label for canceling mobile details for SMS auth
         */
        smsNumberCancel?: string;
        smsNumberError?: string;
        /**
         * Label for field to provide mobile number
         */
        smsNumberFieldLabel?: string;
        smsNumberFormat?: string;
        smsNumberMessage?: string;
        /**
         * Label for submit button for code generation
         */
        smsNumberSubmit?: string;
        /**
         * Title for phone number details
         */
        smsNumberTitle?: string;
        smsUsernameFormat?: string;
        sponsorBackLink?: string;
        sponsorCancel?: string;
        /**
         * Label for Sponsor Email
         */
        sponsorEmail?: string;
        sponsorEmailError?: string;
        sponsorInfoApproved?: string;
        sponsorInfoDenied?: string;
        sponsorInfoPending?: string;
        /**
         * Label for Sponsor Name
         */
        sponsorName?: string;
        sponsorNameError?: string;
        sponsorNotePending?: string;
        /**
         * Submit button label request Wifi Access and notify sponsor about guest request
         */
        sponsorRequestAccess?: string;
        /**
         * Text to display if sponsor approves request
         */
        sponsorStatusApproved?: string;
        /**
         * Text to display when sponsor denies request
         */
        sponsorStatusDenied?: string;
        /**
         * Text to display if request is still pending
         */
        sponsorStatusPending?: string;
        /**
         * Submit button label to notify sponsor about guest request
         */
        sponsorSubmit?: string;
        sponsorsError?: string;
        sponsorsFieldLabel?: string;
        /**
         * Prefix of the label of the link to go to tos
         */
        tosAcceptLabel?: string;
        /**
         * Error message when tos not accepted
         */
        tosError?: string;
        /**
         * Label of the link to go to tos
         */
        tosLink?: string;
        /**
         * Text of the Terms of Service
         */
        tosText?: string;
    }

    export interface WlanQos {
        /**
         * enum: `background`, `bestEffort`, `video`, `voice`
         */
        class: string;
        /**
         * Whether to overwrite QoS
         */
        overwrite: boolean;
    }

    export interface WlanRadsec {
        coaEnabled: boolean;
        enabled?: boolean;
        idleTimeout?: number;
        /**
         * To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
         */
        mxclusterIds: string[];
        /**
         * Default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
         */
        proxyHosts: string[];
        /**
         * Name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
         */
        serverName?: string;
        /**
         * List of RadSec Servers. Only if not Mist Edge.
         */
        servers?: outputs.site.WlanRadsecServer[];
        /**
         * use mxedge(s) as RadSec Proxy
         */
        useMxedge?: boolean;
        /**
         * To use Site mxedges when this WLAN does not use mxtunnel
         */
        useSiteMxedge: boolean;
    }

    export interface WlanRadsecServer {
        host?: string;
        port?: number;
    }

    export interface WlanRateset {
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
         */
        ht?: string;
        /**
         * if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`
         */
        legacies: string[];
        /**
         * Minimum RSSI for client to connect, 0 means not enforcing
         */
        minRssi: number;
        /**
         * Data Rates template to apply. enum: 
         *   * `no-legacy`: no 11b
         *   * `compatible`: all, like before, default setting that Broadcom/Atheros used
         *   * `legacy-only`: disable 802.11n and 802.11ac
         *   * `high-density`: no 11b, no low rates
         *   * `custom`: user defined
         */
        template: string;
        /**
         * If `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
         */
        vht?: string;
    }

    export interface WlanSchedule {
        enabled: boolean;
        /**
         * Days/Hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun)
         */
        hours?: outputs.site.WlanScheduleHours;
    }

    export interface WlanScheduleHours {
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        fri: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        mon: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sat: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        sun: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        thu: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        tue: string;
        /**
         * Hour range of the day (e.g. `09:00-17:00`). If the hour is not defined then it's treated as 00:00-23:59.
         */
        wed: string;
    }

    export interface WxtagSpec {
        /**
         * matched destination port, "0" means any
         */
        portRange: string;
        /**
         * tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
         */
        protocol: string;
        /**
         * matched destination subnets and/or IP Addresses
         */
        subnets: string[];
    }

}
