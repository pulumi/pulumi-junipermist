// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site
{
    /// <summary>
    /// This resource manages the Site WxRules (WLAN policies).A WxLAN policy is a set of rules and settings that can be applied to devices in a network to determine how they are treated. it provides support for access policies, network segmentation, role-based policies, micro-segmentation, and least privilege. WxLAN policies are used to allow or deny specific users from accessing specific resources in a wireless network.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var wxruleOne = new JuniperMist.Site.Wxrule("wxrule_one", new()
    ///     {
    ///         SiteId = terraformTest.Id,
    ///         SrcWxtags = new[]
    ///         {
    ///             wxtagOne.Id,
    ///         },
    ///         Enabled = true,
    ///         Action = "allow",
    ///         DstDenyWxtags = new[]
    ///         {
    ///             wxtagTwo.Id,
    ///         },
    ///         Order = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_site_wxrule` with:
    /// 
    /// Site WxRule can be imported by specifying the site_id and the wxrule_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:site/wxrule:Wxrule wxrule_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:site/wxrule:Wxrule")]
    public partial class Wxrule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// type of action, allow / block. enum: `allow`, `block`
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        [Output("applyTags")]
        public Output<ImmutableArray<string>> ApplyTags { get; private set; } = null!;

        /// <summary>
        /// blocked apps (always blocking, ignoring action), the key of Get Application List
        /// </summary>
        [Output("blockedApps")]
        public Output<ImmutableArray<string>> BlockedApps { get; private set; } = null!;

        /// <summary>
        /// tag list to indicate these tags are allowed access
        /// </summary>
        [Output("dstAllowWxtags")]
        public Output<ImmutableArray<string>> DstAllowWxtags { get; private set; } = null!;

        /// <summary>
        /// tag list to indicate these tags are blocked access
        /// </summary>
        [Output("dstDenyWxtags")]
        public Output<ImmutableArray<string>> DstDenyWxtags { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// the order how rules would be looked up, &gt; 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// tag list to determine if this rule would match
        /// </summary>
        [Output("srcWxtags")]
        public Output<ImmutableArray<string>> SrcWxtags { get; private set; } = null!;

        /// <summary>
        /// Only for Org Level WxRule
        /// </summary>
        [Output("templateId")]
        public Output<string?> TemplateId { get; private set; } = null!;


        /// <summary>
        /// Create a Wxrule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Wxrule(string name, WxruleArgs args, CustomResourceOptions? options = null)
            : base("junipermist:site/wxrule:Wxrule", name, args ?? new WxruleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Wxrule(string name, Input<string> id, WxruleState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:site/wxrule:Wxrule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Wxrule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Wxrule Get(string name, Input<string> id, WxruleState? state = null, CustomResourceOptions? options = null)
        {
            return new Wxrule(name, id, state, options);
        }
    }

    public sealed class WxruleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// type of action, allow / block. enum: `allow`, `block`
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("applyTags")]
        private InputList<string>? _applyTags;
        public InputList<string> ApplyTags
        {
            get => _applyTags ?? (_applyTags = new InputList<string>());
            set => _applyTags = value;
        }

        [Input("blockedApps")]
        private InputList<string>? _blockedApps;

        /// <summary>
        /// blocked apps (always blocking, ignoring action), the key of Get Application List
        /// </summary>
        public InputList<string> BlockedApps
        {
            get => _blockedApps ?? (_blockedApps = new InputList<string>());
            set => _blockedApps = value;
        }

        [Input("dstAllowWxtags")]
        private InputList<string>? _dstAllowWxtags;

        /// <summary>
        /// tag list to indicate these tags are allowed access
        /// </summary>
        public InputList<string> DstAllowWxtags
        {
            get => _dstAllowWxtags ?? (_dstAllowWxtags = new InputList<string>());
            set => _dstAllowWxtags = value;
        }

        [Input("dstDenyWxtags")]
        private InputList<string>? _dstDenyWxtags;

        /// <summary>
        /// tag list to indicate these tags are blocked access
        /// </summary>
        public InputList<string> DstDenyWxtags
        {
            get => _dstDenyWxtags ?? (_dstDenyWxtags = new InputList<string>());
            set => _dstDenyWxtags = value;
        }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// the order how rules would be looked up, &gt; 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("srcWxtags", required: true)]
        private InputList<string>? _srcWxtags;

        /// <summary>
        /// tag list to determine if this rule would match
        /// </summary>
        public InputList<string> SrcWxtags
        {
            get => _srcWxtags ?? (_srcWxtags = new InputList<string>());
            set => _srcWxtags = value;
        }

        /// <summary>
        /// Only for Org Level WxRule
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        public WxruleArgs()
        {
        }
        public static new WxruleArgs Empty => new WxruleArgs();
    }

    public sealed class WxruleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// type of action, allow / block. enum: `allow`, `block`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("applyTags")]
        private InputList<string>? _applyTags;
        public InputList<string> ApplyTags
        {
            get => _applyTags ?? (_applyTags = new InputList<string>());
            set => _applyTags = value;
        }

        [Input("blockedApps")]
        private InputList<string>? _blockedApps;

        /// <summary>
        /// blocked apps (always blocking, ignoring action), the key of Get Application List
        /// </summary>
        public InputList<string> BlockedApps
        {
            get => _blockedApps ?? (_blockedApps = new InputList<string>());
            set => _blockedApps = value;
        }

        [Input("dstAllowWxtags")]
        private InputList<string>? _dstAllowWxtags;

        /// <summary>
        /// tag list to indicate these tags are allowed access
        /// </summary>
        public InputList<string> DstAllowWxtags
        {
            get => _dstAllowWxtags ?? (_dstAllowWxtags = new InputList<string>());
            set => _dstAllowWxtags = value;
        }

        [Input("dstDenyWxtags")]
        private InputList<string>? _dstDenyWxtags;

        /// <summary>
        /// tag list to indicate these tags are blocked access
        /// </summary>
        public InputList<string> DstDenyWxtags
        {
            get => _dstDenyWxtags ?? (_dstDenyWxtags = new InputList<string>());
            set => _dstDenyWxtags = value;
        }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// the order how rules would be looked up, &gt; 0 and bigger order got matched first, -1 means LAST, uniqueness not checked
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        [Input("srcWxtags")]
        private InputList<string>? _srcWxtags;

        /// <summary>
        /// tag list to determine if this rule would match
        /// </summary>
        public InputList<string> SrcWxtags
        {
            get => _srcWxtags ?? (_srcWxtags = new InputList<string>());
            set => _srcWxtags = value;
        }

        /// <summary>
        /// Only for Org Level WxRule
        /// </summary>
        [Input("templateId")]
        public Input<string>? TemplateId { get; set; }

        public WxruleState()
        {
        }
        public static new WxruleState Empty => new WxruleState();
    }
}
