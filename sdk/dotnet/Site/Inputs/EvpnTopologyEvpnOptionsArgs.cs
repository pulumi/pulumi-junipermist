// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Inputs
{

    public sealed class EvpnTopologyEvpnOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
        /// </summary>
        [Input("autoLoopbackSubnet")]
        public Input<string>? AutoLoopbackSubnet { get; set; }

        /// <summary>
        /// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
        /// </summary>
        [Input("autoLoopbackSubnet6")]
        public Input<string>? AutoLoopbackSubnet6 { get; set; }

        /// <summary>
        /// optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
        /// </summary>
        [Input("autoRouterIdSubnet")]
        public Input<string>? AutoRouterIdSubnet { get; set; }

        /// <summary>
        /// optional, this generates router_id automatically, if specified, `router_id_prefix` is ignored
        /// </summary>
        [Input("autoRouterIdSubnet6")]
        public Input<string>? AutoRouterIdSubnet6 { get; set; }

        /// <summary>
        /// optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
        /// when `routed_at` != `core`, whether to do virtual-gateway at core as well
        /// </summary>
        [Input("coreAsBorder")]
        public Input<bool>? CoreAsBorder { get; set; }

        [Input("overlay")]
        public Input<Inputs.EvpnTopologyEvpnOptionsOverlayArgs>? Overlay { get; set; }

        /// <summary>
        /// by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4_mac
        /// if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
        /// </summary>
        [Input("perVlanVgaV4Mac")]
        public Input<bool>? PerVlanVgaV4Mac { get; set; }

        /// <summary>
        /// optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
        /// </summary>
        [Input("routedAt")]
        public Input<string>? RoutedAt { get; set; }

        [Input("underlay")]
        public Input<Inputs.EvpnTopologyEvpnOptionsUnderlayArgs>? Underlay { get; set; }

        [Input("vsInstances")]
        private InputMap<Inputs.EvpnTopologyEvpnOptionsVsInstancesArgs>? _vsInstances;

        /// <summary>
        /// optional, for EX9200 only to seggregate virtual-switches
        /// </summary>
        public InputMap<Inputs.EvpnTopologyEvpnOptionsVsInstancesArgs> VsInstances
        {
            get => _vsInstances ?? (_vsInstances = new InputMap<Inputs.EvpnTopologyEvpnOptionsVsInstancesArgs>());
            set => _vsInstances = value;
        }

        public EvpnTopologyEvpnOptionsArgs()
        {
        }
        public static new EvpnTopologyEvpnOptionsArgs Empty => new EvpnTopologyEvpnOptionsArgs();
    }
}
