// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Inputs
{

    public sealed class NetworktemplatePortUsagesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Only if `Mode`==`Trunk` whether to trunk all network/vlans
        /// </summary>
        [Input("allNetworks")]
        public Input<bool>? AllNetworks { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that AllowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
        /// </summary>
        [Input("allowDhcpd")]
        public Input<bool>? AllowDhcpd { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        [Input("allowMultipleSupplicants")]
        public Input<bool>? AllowMultipleSupplicants { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x` bypass auth for known clients if set to true when RADIUS server is down
        /// </summary>
        [Input("bypassAuthWhenServerDown")]
        public Input<bool>? BypassAuthWhenServerDown { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`=`Dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        /// </summary>
        [Input("bypassAuthWhenServerDownForUnknownClient")]
        public Input<bool>? BypassAuthWhenServerDownForUnknownClient { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`. To be used together with `Isolation` under networks. Signaling that this port connects to the networks isolated but wired clients belong to the same community can talk to each other
        /// </summary>
        [Input("communityVlanId")]
        public Input<int>? CommunityVlanId { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` if speed and duplex are specified, whether to disable autonegotiation
        /// </summary>
        [Input("disableAutoneg")]
        public Input<bool>? DisableAutoneg { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` whether the port is disabled
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`, link connection mode. enum: `Auto`, `Full`, `Half`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        [Input("dynamicVlanNetworks")]
        private InputList<string>? _dynamicVlanNetworks;

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        /// </summary>
        public InputList<string> DynamicVlanNetworks
        {
            get => _dynamicVlanNetworks ?? (_dynamicVlanNetworks = new InputList<string>());
            set => _dynamicVlanNetworks = value;
        }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x` whether to enable MAC Auth
        /// </summary>
        [Input("enableMacAuth")]
        public Input<bool>? EnableMacAuth { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        [Input("enableQos")]
        public Input<bool>? EnableQos { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        /// </summary>
        [Input("guestNetwork")]
        public Input<string>? GuestNetwork { get; set; }

        /// <summary>
        /// `InterSwitchLink` is used together with `Isolation` under networks. NOTE: `InterSwitchLink` works only between Juniper device. This has to be applied to both ports connected together
        /// </summary>
        [Input("interIsolationNetworkLink")]
        public Input<bool>? InterIsolationNetworkLink { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` InterSwitchLink is used together with "isolation" under networks. NOTE: InterSwitchLink works only between Juniper device. This has to be applied to both ports connected together
        /// </summary>
        [Input("interSwitchLink")]
        public Input<bool>? InterSwitchLink { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `EnableMacAuth`==`True`
        /// </summary>
        [Input("macAuthOnly")]
        public Input<bool>? MacAuthOnly { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` + `EnableMacAuth`==`True` + `MacAuthOnly`==`False`, dot1x will be given priority then mac_auth. Enable this to prefer MacAuth over dot1x.
        /// </summary>
        [Input("macAuthPreferred")]
        public Input<bool>? MacAuthPreferred { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `EnableMacAuth` ==`True`. This type is ignored if MistNac is enabled. enum: `eap-md5`, `eap-peap`, `Pap`
        /// </summary>
        [Input("macAuthProtocol")]
        public Input<string>? MacAuthProtocol { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 to 16383 (upper bound constrained by platform)
        /// </summary>
        [Input("macLimit")]
        public Input<string>? MacLimit { get; set; }

        /// <summary>
        /// `Mode`==`Dynamic` must only be used if the port usage name is `Dynamic`. enum: `Access`, `Dynamic`, `Inet`, `Trunk`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. Value between 256 and 9216, default value is 1514.
        /// </summary>
        [Input("mtu")]
        public Input<string>? Mtu { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// Only if `Mode`==`Trunk`, the list of network/vlans
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        /// <summary>
        /// Only if `Mode`==`Access` and `PortAuth`!=`Dot1x` whether the port should retain dynamically learned MAC addresses
        /// </summary>
        [Input("persistMac")]
        public Input<bool>? PersistMac { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` whether PoE capabilities are disabled for a port
        /// </summary>
        [Input("poeDisabled")]
        public Input<bool>? PoeDisabled { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` if dot1x is desired, set to dot1x. enum: `Dot1x`
        /// </summary>
        [Input("portAuth")]
        public Input<string>? PortAuth { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` native network/vlan for untagged traffic
        /// </summary>
        [Input("portNetwork")]
        public Input<string>? PortNetwork { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`=`Dot1x` reauthentication interval range between 10 and 65535 (default: 3600)
        /// </summary>
        [Input("reauthInterval")]
        public Input<string>? ReauthInterval { get; set; }

        /// <summary>
        /// Only if `Mode`==`Dynamic` Control when the DPC port should be changed to the default port usage. enum: `LinkDown`, `None` (let the DPC port keep at the current port usage)
        /// </summary>
        [Input("resetDefaultWhen")]
        public Input<string>? ResetDefaultWhen { get; set; }

        [Input("rules")]
        private InputList<Inputs.NetworktemplatePortUsagesRuleArgs>? _rules;

        /// <summary>
        /// Only if `Mode`==`Dynamic`
        /// </summary>
        public InputList<Inputs.NetworktemplatePortUsagesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.NetworktemplatePortUsagesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x` sets server fail fallback vlan
        /// </summary>
        [Input("serverFailNetwork")]
        public Input<string>? ServerFailNetwork { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x` when radius server reject / fails
        /// </summary>
        [Input("serverRejectNetwork")]
        public Input<string>? ServerRejectNetwork { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic`, Port speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`Auto`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Switch storm control. Only if `Mode`!=`Dynamic`
        /// </summary>
        [Input("stormControl")]
        public Input<Inputs.NetworktemplatePortUsagesStormControlArgs>? StormControl { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` when enabled, the port is not expected to receive BPDU frames
        /// </summary>
        [Input("stpEdge")]
        public Input<bool>? StpEdge { get; set; }

        [Input("stpNoRootPort")]
        public Input<bool>? StpNoRootPort { get; set; }

        [Input("stpP2p")]
        public Input<bool>? StpP2p { get; set; }

        /// <summary>
        /// Optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
        /// </summary>
        [Input("uiEvpntopoId")]
        public Input<string>? UiEvpntopoId { get; set; }

        /// <summary>
        /// If this is connected to a vstp network
        /// </summary>
        [Input("useVstp")]
        public Input<bool>? UseVstp { get; set; }

        /// <summary>
        /// Only if `Mode`!=`Dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        /// </summary>
        [Input("voipNetwork")]
        public Input<string>? VoipNetwork { get; set; }

        public NetworktemplatePortUsagesArgs()
        {
        }
        public static new NetworktemplatePortUsagesArgs Empty => new NetworktemplatePortUsagesArgs();
    }
}
