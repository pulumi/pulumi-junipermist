// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Inputs
{

    public sealed class WlanAuthGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// SAE anti-clogging token threshold
        /// </summary>
        [Input("anticlogThreshold")]
        public Input<int>? AnticlogThreshold { get; set; }

        /// <summary>
        /// Whether to trigger EAP reauth when the session ends
        /// </summary>
        [Input("eapReauth")]
        public Input<bool>? EapReauth { get; set; }

        /// <summary>
        /// Whether to enable MAC Auth, uses the same auth_servers
        /// </summary>
        [Input("enableMacAuth")]
        public Input<bool>? EnableMacAuth { get; set; }

        /// <summary>
        /// When `Type`==`Wep`
        /// </summary>
        [Input("keyIdx")]
        public Input<int>? KeyIdx { get; set; }

        [Input("keys")]
        private InputList<string>? _keys;

        /// <summary>
        /// When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        /// </summary>
        public InputList<string> Keys
        {
            get => _keys ?? (_keys = new InputList<string>());
            set => _keys = value;
        }

        /// <summary>
        /// When `Type`==`Psk`, whether to only use multi_psk
        /// </summary>
        [Input("multiPskOnly")]
        public Input<bool>? MultiPskOnly { get; set; }

        /// <summary>
        /// if `Type`==`Open`. enum: `Disabled`, `Enabled` (means transition mode), `Required`
        /// </summary>
        [Input("owe")]
        public Input<string>? Owe { get; set; }

        [Input("pairwises")]
        private InputList<string>? _pairwises;

        /// <summary>
        /// When `Type`=`Psk` or `Type`=`Eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `Wpa3`
        /// </summary>
        public InputList<string> Pairwises
        {
            get => _pairwises ?? (_pairwises = new InputList<string>());
            set => _pairwises = value;
        }

        /// <summary>
        /// When `MultiPskOnly`==`True`, whether private wlan is enabled
        /// </summary>
        [Input("privateWlan")]
        public Input<bool>? PrivateWlan { get; set; }

        [Input("psk")]
        private Input<string>? _psk;

        /// <summary>
        /// When `Type`==`Psk`, 8-64 characters, or 64 hex characters
        /// </summary>
        public Input<string>? Psk
        {
            get => _psk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// enum: `Eap`, `Eap192`, `Open`, `Psk`, `psk-tkip`, `psk-wpa2-tkip`, `Wep`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Enable WEP as secondary auth
        /// </summary>
        [Input("wepAsSecondaryAuth")]
        public Input<bool>? WepAsSecondaryAuth { get; set; }

        public WlanAuthGetArgs()
        {
        }
        public static new WlanAuthGetArgs Empty => new WlanAuthGetArgs();
    }
}
