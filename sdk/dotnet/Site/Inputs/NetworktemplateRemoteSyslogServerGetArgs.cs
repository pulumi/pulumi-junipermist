// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Inputs
{

    public sealed class NetworktemplateRemoteSyslogServerGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("contents")]
        private InputList<Inputs.NetworktemplateRemoteSyslogServerContentGetArgs>? _contents;
        public InputList<Inputs.NetworktemplateRemoteSyslogServerContentGetArgs> Contents
        {
            get => _contents ?? (_contents = new InputList<Inputs.NetworktemplateRemoteSyslogServerContentGetArgs>());
            set => _contents = value;
        }

        [Input("explicitPriority")]
        public Input<bool>? ExplicitPriority { get; set; }

        /// <summary>
        /// enum: `Any`, `Authorization`, `change-log`, `Config`, `conflict-log`, `Daemon`, `Dfc`, `External`, `Firewall`, `Ftp`, `interactive-commands`, `Kernel`, `Ntp`, `Pfe`, `Security`, `User`
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("match")]
        public Input<string>? Match { get; set; }

        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// enum: `Tcp`, `Udp`
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("routingInstance")]
        public Input<string>? RoutingInstance { get; set; }

        /// <summary>
        /// Name of the server
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// enum: `Alert`, `Any`, `Critical`, `Emergency`, `Error`, `Info`, `Notice`, `Warning`
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// If SourceAddress is configured, will use the vlan firstly otherwise use source_ip
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        [Input("structuredData")]
        public Input<bool>? StructuredData { get; set; }

        [Input("tag")]
        public Input<string>? Tag { get; set; }

        public NetworktemplateRemoteSyslogServerGetArgs()
        {
        }
        public static new NetworktemplateRemoteSyslogServerGetArgs Empty => new NetworktemplateRemoteSyslogServerGetArgs();
    }
}
