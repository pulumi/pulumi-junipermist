// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Inputs
{

    public sealed class NetworktemplateSwitchMatchingRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalConfigCmds")]
        private InputList<string>? _additionalConfigCmds;

        /// <summary>
        /// additional CLI commands to append to the generated Junos config. **Note**: no check is done
        /// </summary>
        public InputList<string> AdditionalConfigCmds
        {
            get => _additionalConfigCmds ?? (_additionalConfigCmds = new InputList<string>());
            set => _additionalConfigCmds = value;
        }

        /// <summary>
        /// In-Band Management interface configuration
        /// </summary>
        [Input("ipConfig")]
        public Input<Inputs.NetworktemplateSwitchMatchingRuleIpConfigArgs>? IpConfig { get; set; }

        /// <summary>
        /// string the switch model must start with to use this rule. It is possible to combine with the `MatchName` and `MatchRole` attributes
        /// </summary>
        [Input("matchModel")]
        public Input<string>? MatchModel { get; set; }

        /// <summary>
        /// string the switch name must start with to use this rule. Use the `MatchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `MatchModel` and `MatchRole` attributes
        /// </summary>
        [Input("matchName")]
        public Input<string>? MatchName { get; set; }

        /// <summary>
        /// first character of the switch name to compare to the `MatchName` value
        /// </summary>
        [Input("matchNameOffset")]
        public Input<int>? MatchNameOffset { get; set; }

        /// <summary>
        /// string the switch role must start with to use this rule. It is possible to combine with the `MatchName` and `MatchModel` attributes
        /// </summary>
        [Input("matchRole")]
        public Input<string>? MatchRole { get; set; }

        /// <summary>
        /// Rule name. WARNING: the name `Default` is reserved and can only be used for the last rule in the list
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Out-of-Band Management interface configuration
        /// </summary>
        [Input("oobIpConfig")]
        public Input<Inputs.NetworktemplateSwitchMatchingRuleOobIpConfigArgs>? OobIpConfig { get; set; }

        [Input("portConfig")]
        private InputMap<Inputs.NetworktemplateSwitchMatchingRulePortConfigArgs>? _portConfig;

        /// <summary>
        /// Property key is the port name or range (e.g. "ge-0/0/0-10")
        /// </summary>
        public InputMap<Inputs.NetworktemplateSwitchMatchingRulePortConfigArgs> PortConfig
        {
            get => _portConfig ?? (_portConfig = new InputMap<Inputs.NetworktemplateSwitchMatchingRulePortConfigArgs>());
            set => _portConfig = value;
        }

        [Input("portMirroring")]
        private InputMap<Inputs.NetworktemplateSwitchMatchingRulePortMirroringArgs>? _portMirroring;

        /// <summary>
        /// Property key is the port mirroring instance name. `PortMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 mirroring ports is allowed
        /// </summary>
        public InputMap<Inputs.NetworktemplateSwitchMatchingRulePortMirroringArgs> PortMirroring
        {
            get => _portMirroring ?? (_portMirroring = new InputMap<Inputs.NetworktemplateSwitchMatchingRulePortMirroringArgs>());
            set => _portMirroring = value;
        }

        [Input("stpConfig")]
        public Input<Inputs.NetworktemplateSwitchMatchingRuleStpConfigArgs>? StpConfig { get; set; }

        public NetworktemplateSwitchMatchingRuleArgs()
        {
        }
        public static new NetworktemplateSwitchMatchingRuleArgs Empty => new NetworktemplateSwitchMatchingRuleArgs();
    }
}
