// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Outputs
{

    [OutputType]
    public sealed class NetworktemplateRemoteSyslogServer
    {
        public readonly ImmutableArray<Outputs.NetworktemplateRemoteSyslogServerContent> Contents;
        public readonly bool? ExplicitPriority;
        /// <summary>
        /// enum: `Any`, `Authorization`, `change-log`, `Config`, `conflict-log`, `Daemon`, `Dfc`, `External`, `Firewall`, `Ftp`, `interactive-commands`, `Kernel`, `Ntp`, `Pfe`, `Security`, `User`
        /// </summary>
        public readonly string? Facility;
        public readonly string? Host;
        public readonly string? Match;
        public readonly string? Port;
        /// <summary>
        /// enum: `Tcp`, `Udp`
        /// </summary>
        public readonly string? Protocol;
        public readonly string? RoutingInstance;
        /// <summary>
        /// Name of the server
        /// </summary>
        public readonly string? ServerName;
        /// <summary>
        /// enum: `Alert`, `Any`, `Critical`, `Emergency`, `Error`, `Info`, `Notice`, `Warning`
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// If SourceAddress is configured, will use the vlan firstly otherwise use source_ip
        /// </summary>
        public readonly string? SourceAddress;
        public readonly bool? StructuredData;
        public readonly string? Tag;

        [OutputConstructor]
        private NetworktemplateRemoteSyslogServer(
            ImmutableArray<Outputs.NetworktemplateRemoteSyslogServerContent> contents,

            bool? explicitPriority,

            string? facility,

            string? host,

            string? match,

            string? port,

            string? protocol,

            string? routingInstance,

            string? serverName,

            string? severity,

            string? sourceAddress,

            bool? structuredData,

            string? tag)
        {
            Contents = contents;
            ExplicitPriority = explicitPriority;
            Facility = facility;
            Host = host;
            Match = match;
            Port = port;
            Protocol = protocol;
            RoutingInstance = routingInstance;
            ServerName = serverName;
            Severity = severity;
            SourceAddress = sourceAddress;
            StructuredData = structuredData;
            Tag = tag;
        }
    }
}
