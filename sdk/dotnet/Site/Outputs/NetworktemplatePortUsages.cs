// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site.Outputs
{

    [OutputType]
    public sealed class NetworktemplatePortUsages
    {
        /// <summary>
        /// Only if `Mode`==`Trunk`. Whether to trunk all network/vlans
        /// </summary>
        public readonly bool? AllNetworks;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that AllowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is an access or trunk port.
        /// </summary>
        public readonly bool? AllowDhcpd;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly bool? AllowMultipleSupplicants;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`. Bypass auth for known clients if set to true when RADIUS server is down
        /// </summary>
        public readonly bool? BypassAuthWhenServerDown;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`=`Dot1x`. Bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        /// </summary>
        public readonly bool? BypassAuthWhenServerDownForUnknownClient;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. To be used together with `Isolation` under networks. Signaling that this port connects to the networks isolated but wired clients belong to the same community can talk to each other
        /// </summary>
        public readonly int? CommunityVlanId;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. If speed and duplex are specified, whether to disable autonegotiation
        /// </summary>
        public readonly bool? DisableAutoneg;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Whether the port is disabled
        /// </summary>
        public readonly bool? Disabled;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Link connection mode. enum: `Auto`, `Full`, `Half`
        /// </summary>
        public readonly string? Duplex;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        /// </summary>
        public readonly ImmutableArray<string> DynamicVlanNetworks;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`. Whether to enable MAC Auth
        /// </summary>
        public readonly bool? EnableMacAuth;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly bool? EnableQos;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`. Which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        /// </summary>
        public readonly string? GuestNetwork;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. `InterSwitchLink` is used together with `Isolation` under networks. NOTE: `InterSwitchLink` works only between Juniper device. This has to be applied to both ports connected together
        /// </summary>
        public readonly bool? InterIsolationNetworkLink;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. `InterSwitchLink` is used together with `Isolation` under networks. NOTE: InterSwitchLink works only between Juniper device. This has to be applied to both ports connected together
        /// </summary>
        public readonly bool? InterSwitchLink;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `EnableMacAuth`==`True`
        /// </summary>
        public readonly bool? MacAuthOnly;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` + `EnableMacAuth`==`True` + `MacAuthOnly`==`False`, dot1x will be given priority then mac_auth. Enable this to prefer MacAuth over dot1x.
        /// </summary>
        public readonly bool? MacAuthPreferred;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `EnableMacAuth` ==`True`. This type is ignored if MistNac is enabled. enum: `eap-md5`, `eap-peap`, `Pap`
        /// </summary>
        public readonly string? MacAuthProtocol;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 to 16383 (upper bound constrained by platform)
        /// </summary>
        public readonly string? MacLimit;
        /// <summary>
        /// `Mode`==`Dynamic` must only be used if the port usage name is `Dynamic`. enum: `Access`, `Dynamic`, `Inet`, `Trunk`
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. Value between 256 and 9216, default value is 1514.
        /// </summary>
        public readonly string? Mtu;
        /// <summary>
        /// Only if `Mode`==`Trunk`, the list of network/vlans
        /// </summary>
        public readonly ImmutableArray<string> Networks;
        /// <summary>
        /// Only if `Mode`==`Access` and `PortAuth`!=`Dot1x`. Whether the port should retain dynamically learned MAC addresses
        /// </summary>
        public readonly bool? PersistMac;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Whether PoE capabilities are disabled for a port
        /// </summary>
        public readonly bool? PoeDisabled;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. If dot1x is desired, set to dot1x. enum: `Dot1x`
        /// </summary>
        public readonly string? PortAuth;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Native network/vlan for untagged traffic
        /// </summary>
        public readonly string? PortNetwork;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`=`Dot1x` reauthentication interval range between 10 and 65535 (default: 3600)
        /// </summary>
        public readonly string? ReauthInterval;
        /// <summary>
        /// Only if `Mode`==`Dynamic` Control when the DPC port should be changed to the default port usage. enum: `LinkDown`, `None` (let the DPC port keep at the current port usage)
        /// </summary>
        public readonly string? ResetDefaultWhen;
        /// <summary>
        /// Only if `Mode`==`Dynamic`
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworktemplatePortUsagesRule> Rules;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`. Sets server fail fallback vlan
        /// </summary>
        public readonly string? ServerFailNetwork;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `PortAuth`==`Dot1x`. When radius server reject / fails
        /// </summary>
        public readonly string? ServerRejectNetwork;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`, Port speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`Auto`
        /// </summary>
        public readonly string? Speed;
        /// <summary>
        /// Switch storm control. Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly Outputs.NetworktemplatePortUsagesStormControl? StormControl;
        /// <summary>
        /// Only if `Mode`!=`Dynamic` and `StpRequired`==`False`. Drop bridge protocol data units (BPDUs ) that enter any interface or a specified interface
        /// </summary>
        public readonly bool? StpDisable;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. When enabled, the port is not expected to receive BPDU frames
        /// </summary>
        public readonly bool? StpEdge;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly bool? StpNoRootPort;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`
        /// </summary>
        public readonly bool? StpP2p;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Whether to remain in block state if no BPDU is received
        /// </summary>
        public readonly bool? StpRequired;
        /// <summary>
        /// Optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
        /// </summary>
        public readonly string? UiEvpntopoId;
        /// <summary>
        /// If this is connected to a vstp network
        /// </summary>
        public readonly bool? UseVstp;
        /// <summary>
        /// Only if `Mode`!=`Dynamic`. Network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        /// </summary>
        public readonly string? VoipNetwork;

        [OutputConstructor]
        private NetworktemplatePortUsages(
            bool? allNetworks,

            bool? allowDhcpd,

            bool? allowMultipleSupplicants,

            bool? bypassAuthWhenServerDown,

            bool? bypassAuthWhenServerDownForUnknownClient,

            int? communityVlanId,

            string? description,

            bool? disableAutoneg,

            bool? disabled,

            string? duplex,

            ImmutableArray<string> dynamicVlanNetworks,

            bool? enableMacAuth,

            bool? enableQos,

            string? guestNetwork,

            bool? interIsolationNetworkLink,

            bool? interSwitchLink,

            bool? macAuthOnly,

            bool? macAuthPreferred,

            string? macAuthProtocol,

            string? macLimit,

            string? mode,

            string? mtu,

            ImmutableArray<string> networks,

            bool? persistMac,

            bool? poeDisabled,

            string? portAuth,

            string? portNetwork,

            string? reauthInterval,

            string? resetDefaultWhen,

            ImmutableArray<Outputs.NetworktemplatePortUsagesRule> rules,

            string? serverFailNetwork,

            string? serverRejectNetwork,

            string? speed,

            Outputs.NetworktemplatePortUsagesStormControl? stormControl,

            bool? stpDisable,

            bool? stpEdge,

            bool? stpNoRootPort,

            bool? stpP2p,

            bool? stpRequired,

            string? uiEvpntopoId,

            bool? useVstp,

            string? voipNetwork)
        {
            AllNetworks = allNetworks;
            AllowDhcpd = allowDhcpd;
            AllowMultipleSupplicants = allowMultipleSupplicants;
            BypassAuthWhenServerDown = bypassAuthWhenServerDown;
            BypassAuthWhenServerDownForUnknownClient = bypassAuthWhenServerDownForUnknownClient;
            CommunityVlanId = communityVlanId;
            Description = description;
            DisableAutoneg = disableAutoneg;
            Disabled = disabled;
            Duplex = duplex;
            DynamicVlanNetworks = dynamicVlanNetworks;
            EnableMacAuth = enableMacAuth;
            EnableQos = enableQos;
            GuestNetwork = guestNetwork;
            InterIsolationNetworkLink = interIsolationNetworkLink;
            InterSwitchLink = interSwitchLink;
            MacAuthOnly = macAuthOnly;
            MacAuthPreferred = macAuthPreferred;
            MacAuthProtocol = macAuthProtocol;
            MacLimit = macLimit;
            Mode = mode;
            Mtu = mtu;
            Networks = networks;
            PersistMac = persistMac;
            PoeDisabled = poeDisabled;
            PortAuth = portAuth;
            PortNetwork = portNetwork;
            ReauthInterval = reauthInterval;
            ResetDefaultWhen = resetDefaultWhen;
            Rules = rules;
            ServerFailNetwork = serverFailNetwork;
            ServerRejectNetwork = serverRejectNetwork;
            Speed = speed;
            StormControl = stormControl;
            StpDisable = stpDisable;
            StpEdge = stpEdge;
            StpNoRootPort = stpNoRootPort;
            StpP2p = stpP2p;
            StpRequired = stpRequired;
            UiEvpntopoId = uiEvpntopoId;
            UseVstp = useVstp;
            VoipNetwork = voipNetwork;
        }
    }
}
