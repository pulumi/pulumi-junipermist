// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Site
{
    public static class GetPsks
    {
        /// <summary>
        /// This data source provides the list of Site Psks.
        /// 
        /// A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.  
        /// It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.  
        /// Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.  
        /// Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var psksVip = JuniperMist.Site.GetPsks.Invoke(new()
        ///     {
        ///         SiteId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///         Name = "psk_one",
        ///         Role = "vip",
        ///         Ssid = "psk_ssid",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPsksResult> InvokeAsync(GetPsksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPsksResult>("junipermist:site/getPsks:getPsks", args ?? new GetPsksArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Site Psks.
        /// 
        /// A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.  
        /// It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.  
        /// Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.  
        /// Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var psksVip = JuniperMist.Site.GetPsks.Invoke(new()
        ///     {
        ///         SiteId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///         Name = "psk_one",
        ///         Role = "vip",
        ///         Ssid = "psk_ssid",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPsksResult> Invoke(GetPsksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPsksResult>("junipermist:site/getPsks:getPsks", args ?? new GetPsksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of Site Psks.
        /// 
        /// A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.  
        /// It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.  
        /// Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.  
        /// Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var psksVip = JuniperMist.Site.GetPsks.Invoke(new()
        ///     {
        ///         SiteId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///         Name = "psk_one",
        ///         Role = "vip",
        ///         Ssid = "psk_ssid",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPsksResult> Invoke(GetPsksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPsksResult>("junipermist:site/getPsks:getPsks", args ?? new GetPsksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPsksArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("role")]
        public string? Role { get; set; }

        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        [Input("ssid")]
        public string? Ssid { get; set; }

        public GetPsksArgs()
        {
        }
        public static new GetPsksArgs Empty => new GetPsksArgs();
    }

    public sealed class GetPsksInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("ssid")]
        public Input<string>? Ssid { get; set; }

        public GetPsksInvokeArgs()
        {
        }
        public static new GetPsksInvokeArgs Empty => new GetPsksInvokeArgs();
    }


    [OutputType]
    public sealed class GetPsksResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? Role;
        public readonly string SiteId;
        public readonly ImmutableArray<Outputs.GetPsksSitePskResult> SitePsks;
        public readonly string? Ssid;

        [OutputConstructor]
        private GetPsksResult(
            string id,

            string? name,

            string? role,

            string siteId,

            ImmutableArray<Outputs.GetPsksSitePskResult> sitePsks,

            string? ssid)
        {
            Id = id;
            Name = name;
            Role = role;
            SiteId = siteId;
            SitePsks = sitePsks;
            Ssid = ssid;
        }
    }
}
