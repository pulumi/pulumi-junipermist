// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist
{
    /// <summary>
    /// This resource can be used to upgrade the firmware of a single device (Wi-Fi Access Points, Switches and SRX/SSR Gateways).
    /// 
    /// The resource will send the upgrade command to Mist, which will take care of deploying the new firmware version to the device, and reboot it if required.
    /// 
    /// The time required to upgrade a device depends on the type of device and its hardware. By default, the resource will track the upgrade process and only return the result once the device is upgraded and rebooted (unless `Reboot`==`False` or `RebootAt` is set).\
    /// If required it is possible to run the upgrade in async mode (attribute `Sync`=`False`). In this case, the resource will only trigger the upgrade and return the Mist response, but will not track the upgrade progress.
    /// 
    /// The list of available firmware versions can be retrieved with the `junipermist.device.getVersions` data source.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apUpgrade = new JuniperMist.UpgradeDevice("ap_upgrade", new()
    ///     {
    ///         SiteId = terraformTest.Id,
    ///         DeviceId = apOne.Id,
    ///         TargetVersion = "0.14.29543",
    ///     });
    /// 
    ///     var switchUpgrade = new JuniperMist.UpgradeDevice("switch_upgrade", new()
    ///     {
    ///         SiteId = terraformTest.Id,
    ///         DeviceId = switchOne.Id,
    ///         TargetVersion = "24.2R1-S1.10",
    ///         Reboot = true,
    ///         SyncUpgradeTimeout = 3600,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:index/upgradeDevice:UpgradeDevice")]
    public partial class UpgradeDevice : global::Pulumi.CustomResource
    {
        [Output("deviceId")]
        public Output<string> DeviceId { get; private set; } = null!;

        /// <summary>
        /// current device firmware version
        /// </summary>
        [Output("deviceVersion")]
        public Output<string> DeviceVersion { get; private set; } = null!;

        [Output("fwupdate")]
        public Output<Outputs.UpgradeDeviceFwupdate> Fwupdate { get; private set; } = null!;

        /// <summary>
        /// For Switches and Gateways only (APs are automatically rebooted). Reboot device immediately after upgrade is completed
        /// </summary>
        [Output("reboot")]
        public Output<bool> Reboot { get; private set; } = null!;

        /// <summary>
        /// For Switches and Gateways only and if `Reboot`==`True`. Reboot start time in epoch seconds, default is `StartTime`
        /// </summary>
        [Output("rebootAt")]
        public Output<int?> RebootAt { get; private set; } = null!;

        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// For Junos devices only. Perform recovery snapshot after device is rebooted
        /// </summary>
        [Output("snapshot")]
        public Output<bool> Snapshot { get; private set; } = null!;

        /// <summary>
        /// Firmware download start time in epoch
        /// </summary>
        [Output("startTime")]
        public Output<int?> StartTime { get; private set; } = null!;

        /// <summary>
        /// enum: `Error`, `Inprogress`, `Scheduled`, `Starting`, `Success`
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// if set to `False`, the provider will just trigger the upgrade and not wait for the end of the upgrade process. Default is `True`
        /// </summary>
        [Output("syncUpgrade")]
        public Output<bool> SyncUpgrade { get; private set; } = null!;

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait between each refresh of the upgrade status, in seconds. Default is 30, minimum is 15
        /// </summary>
        [Output("syncUpgradeRefreshInterval")]
        public Output<int> SyncUpgradeRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to start before raising an error, in seconds. Default is 60, minimum is 60
        /// </summary>
        [Output("syncUpgradeStartTimeout")]
        public Output<int> SyncUpgradeStartTimeout { get; private set; } = null!;

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to end before raising an error, in seconds. Default is 1800
        /// </summary>
        [Output("syncUpgradeTimeout")]
        public Output<int> SyncUpgradeTimeout { get; private set; } = null!;

        /// <summary>
        /// firmware version to deploy to the device. Use the `junipermist.device.getVersions` datasource to get the list of available firmware versions
        /// </summary>
        [Output("targetVersion")]
        public Output<string> TargetVersion { get; private set; } = null!;

        /// <summary>
        /// Epoch (seconds)
        /// </summary>
        [Output("timestamp")]
        public Output<double> Timestamp { get; private set; } = null!;


        /// <summary>
        /// Create a UpgradeDevice resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UpgradeDevice(string name, UpgradeDeviceArgs args, CustomResourceOptions? options = null)
            : base("junipermist:index/upgradeDevice:UpgradeDevice", name, args ?? new UpgradeDeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UpgradeDevice(string name, Input<string> id, UpgradeDeviceState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:index/upgradeDevice:UpgradeDevice", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UpgradeDevice resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UpgradeDevice Get(string name, Input<string> id, UpgradeDeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new UpgradeDevice(name, id, state, options);
        }
    }

    public sealed class UpgradeDeviceArgs : global::Pulumi.ResourceArgs
    {
        [Input("deviceId", required: true)]
        public Input<string> DeviceId { get; set; } = null!;

        /// <summary>
        /// For Switches and Gateways only (APs are automatically rebooted). Reboot device immediately after upgrade is completed
        /// </summary>
        [Input("reboot")]
        public Input<bool>? Reboot { get; set; }

        /// <summary>
        /// For Switches and Gateways only and if `Reboot`==`True`. Reboot start time in epoch seconds, default is `StartTime`
        /// </summary>
        [Input("rebootAt")]
        public Input<int>? RebootAt { get; set; }

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// For Junos devices only. Perform recovery snapshot after device is rebooted
        /// </summary>
        [Input("snapshot")]
        public Input<bool>? Snapshot { get; set; }

        /// <summary>
        /// Firmware download start time in epoch
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// if set to `False`, the provider will just trigger the upgrade and not wait for the end of the upgrade process. Default is `True`
        /// </summary>
        [Input("syncUpgrade")]
        public Input<bool>? SyncUpgrade { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait between each refresh of the upgrade status, in seconds. Default is 30, minimum is 15
        /// </summary>
        [Input("syncUpgradeRefreshInterval")]
        public Input<int>? SyncUpgradeRefreshInterval { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to start before raising an error, in seconds. Default is 60, minimum is 60
        /// </summary>
        [Input("syncUpgradeStartTimeout")]
        public Input<int>? SyncUpgradeStartTimeout { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to end before raising an error, in seconds. Default is 1800
        /// </summary>
        [Input("syncUpgradeTimeout")]
        public Input<int>? SyncUpgradeTimeout { get; set; }

        /// <summary>
        /// firmware version to deploy to the device. Use the `junipermist.device.getVersions` datasource to get the list of available firmware versions
        /// </summary>
        [Input("targetVersion", required: true)]
        public Input<string> TargetVersion { get; set; } = null!;

        public UpgradeDeviceArgs()
        {
        }
        public static new UpgradeDeviceArgs Empty => new UpgradeDeviceArgs();
    }

    public sealed class UpgradeDeviceState : global::Pulumi.ResourceArgs
    {
        [Input("deviceId")]
        public Input<string>? DeviceId { get; set; }

        /// <summary>
        /// current device firmware version
        /// </summary>
        [Input("deviceVersion")]
        public Input<string>? DeviceVersion { get; set; }

        [Input("fwupdate")]
        public Input<Inputs.UpgradeDeviceFwupdateGetArgs>? Fwupdate { get; set; }

        /// <summary>
        /// For Switches and Gateways only (APs are automatically rebooted). Reboot device immediately after upgrade is completed
        /// </summary>
        [Input("reboot")]
        public Input<bool>? Reboot { get; set; }

        /// <summary>
        /// For Switches and Gateways only and if `Reboot`==`True`. Reboot start time in epoch seconds, default is `StartTime`
        /// </summary>
        [Input("rebootAt")]
        public Input<int>? RebootAt { get; set; }

        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// For Junos devices only. Perform recovery snapshot after device is rebooted
        /// </summary>
        [Input("snapshot")]
        public Input<bool>? Snapshot { get; set; }

        /// <summary>
        /// Firmware download start time in epoch
        /// </summary>
        [Input("startTime")]
        public Input<int>? StartTime { get; set; }

        /// <summary>
        /// enum: `Error`, `Inprogress`, `Scheduled`, `Starting`, `Success`
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// if set to `False`, the provider will just trigger the upgrade and not wait for the end of the upgrade process. Default is `True`
        /// </summary>
        [Input("syncUpgrade")]
        public Input<bool>? SyncUpgrade { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait between each refresh of the upgrade status, in seconds. Default is 30, minimum is 15
        /// </summary>
        [Input("syncUpgradeRefreshInterval")]
        public Input<int>? SyncUpgradeRefreshInterval { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to start before raising an error, in seconds. Default is 60, minimum is 60
        /// </summary>
        [Input("syncUpgradeStartTimeout")]
        public Input<int>? SyncUpgradeStartTimeout { get; set; }

        /// <summary>
        /// if set to `SyncUpgrade`==`True`, how long to wait for the upgrade to end before raising an error, in seconds. Default is 1800
        /// </summary>
        [Input("syncUpgradeTimeout")]
        public Input<int>? SyncUpgradeTimeout { get; set; }

        /// <summary>
        /// firmware version to deploy to the device. Use the `junipermist.device.getVersions` datasource to get the list of available firmware versions
        /// </summary>
        [Input("targetVersion")]
        public Input<string>? TargetVersion { get; set; }

        /// <summary>
        /// Epoch (seconds)
        /// </summary>
        [Input("timestamp")]
        public Input<double>? Timestamp { get; set; }

        public UpgradeDeviceState()
        {
        }
        public static new UpgradeDeviceState Empty => new UpgradeDeviceState();
    }
}
