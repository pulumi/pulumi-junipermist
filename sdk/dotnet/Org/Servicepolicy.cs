// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages WAN Assurance Service Policies (Application Policies).
    /// 
    /// The Service Policies can be used in the `ServicePolicies` object by referencing the Service Policy ID as the `ServicepolicyId` in:
    /// * the Gateway configuration (`mist_device_gateway.service_policies`)
    /// * the Gateway Templates (`mist_org_gatewaytemplate.service_policies`)
    /// * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies`)
    ///   They can be used to manage common policies between multiples configurations
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var servicepolicyOne = new JuniperMist.Org.Servicepolicy("servicepolicy_one", new()
    ///     {
    ///         OrgId = terraformTest.Id,
    ///         Tenants = new[]
    ///         {
    ///             "guest",
    ///         },
    ///         Services = new[]
    ///         {
    ///             "guest-internet",
    ///         },
    ///         Action = "allow",
    ///         Idp = new JuniperMist.Org.Inputs.ServicepolicyIdpArgs
    ///         {
    ///             Enabled = true,
    ///             Profile = "standard",
    ///             Alert_only = true,
    ///         },
    ///         Name = "Guest-IDP",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_servicepolicy` with:
    /// 
    /// Org Service Policy can be imported by specifying the org_id and the servicepolicy_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/servicepolicy:Servicepolicy servicepolicy_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/servicepolicy:Servicepolicy")]
    public partial class Servicepolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// For SRX Only
        /// </summary>
        [Output("aamw")]
        public Output<Outputs.ServicepolicyAamw?> Aamw { get; private set; } = null!;

        /// <summary>
        /// enum: `Allow`, `Deny`
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Output("antivirus")]
        public Output<Outputs.ServicepolicyAntivirus?> Antivirus { get; private set; } = null!;

        /// <summary>
        /// For SRX Only
        /// </summary>
        [Output("appqoe")]
        public Output<Outputs.ServicepolicyAppqoe?> Appqoe { get; private set; } = null!;

        [Output("ewfs")]
        public Output<ImmutableArray<Outputs.ServicepolicyEwf>> Ewfs { get; private set; } = null!;

        [Output("idp")]
        public Output<Outputs.ServicepolicyIdp?> Idp { get; private set; } = null!;

        /// <summary>
        /// access within the same VRF
        /// </summary>
        [Output("localRouting")]
        public Output<bool?> LocalRouting { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// By default, we derive all paths available and use them, optionally, you can customize by using `PathPreference`
        /// </summary>
        [Output("pathPreference")]
        public Output<string?> PathPreference { get; private set; } = null!;

        [Output("services")]
        public Output<ImmutableArray<string>> Services { get; private set; } = null!;

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Output("sslProxy")]
        public Output<Outputs.ServicepolicySslProxy?> SslProxy { get; private set; } = null!;

        [Output("tenants")]
        public Output<ImmutableArray<string>> Tenants { get; private set; } = null!;


        /// <summary>
        /// Create a Servicepolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Servicepolicy(string name, ServicepolicyArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/servicepolicy:Servicepolicy", name, args ?? new ServicepolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Servicepolicy(string name, Input<string> id, ServicepolicyState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/servicepolicy:Servicepolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Servicepolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Servicepolicy Get(string name, Input<string> id, ServicepolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Servicepolicy(name, id, state, options);
        }
    }

    public sealed class ServicepolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For SRX Only
        /// </summary>
        [Input("aamw")]
        public Input<Inputs.ServicepolicyAamwArgs>? Aamw { get; set; }

        /// <summary>
        /// enum: `Allow`, `Deny`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Input("antivirus")]
        public Input<Inputs.ServicepolicyAntivirusArgs>? Antivirus { get; set; }

        /// <summary>
        /// For SRX Only
        /// </summary>
        [Input("appqoe")]
        public Input<Inputs.ServicepolicyAppqoeArgs>? Appqoe { get; set; }

        [Input("ewfs")]
        private InputList<Inputs.ServicepolicyEwfArgs>? _ewfs;
        public InputList<Inputs.ServicepolicyEwfArgs> Ewfs
        {
            get => _ewfs ?? (_ewfs = new InputList<Inputs.ServicepolicyEwfArgs>());
            set => _ewfs = value;
        }

        [Input("idp")]
        public Input<Inputs.ServicepolicyIdpArgs>? Idp { get; set; }

        /// <summary>
        /// access within the same VRF
        /// </summary>
        [Input("localRouting")]
        public Input<bool>? LocalRouting { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// By default, we derive all paths available and use them, optionally, you can customize by using `PathPreference`
        /// </summary>
        [Input("pathPreference")]
        public Input<string>? PathPreference { get; set; }

        [Input("services")]
        private InputList<string>? _services;
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Input("sslProxy")]
        public Input<Inputs.ServicepolicySslProxyArgs>? SslProxy { get; set; }

        [Input("tenants")]
        private InputList<string>? _tenants;
        public InputList<string> Tenants
        {
            get => _tenants ?? (_tenants = new InputList<string>());
            set => _tenants = value;
        }

        public ServicepolicyArgs()
        {
        }
        public static new ServicepolicyArgs Empty => new ServicepolicyArgs();
    }

    public sealed class ServicepolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For SRX Only
        /// </summary>
        [Input("aamw")]
        public Input<Inputs.ServicepolicyAamwGetArgs>? Aamw { get; set; }

        /// <summary>
        /// enum: `Allow`, `Deny`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Input("antivirus")]
        public Input<Inputs.ServicepolicyAntivirusGetArgs>? Antivirus { get; set; }

        /// <summary>
        /// For SRX Only
        /// </summary>
        [Input("appqoe")]
        public Input<Inputs.ServicepolicyAppqoeGetArgs>? Appqoe { get; set; }

        [Input("ewfs")]
        private InputList<Inputs.ServicepolicyEwfGetArgs>? _ewfs;
        public InputList<Inputs.ServicepolicyEwfGetArgs> Ewfs
        {
            get => _ewfs ?? (_ewfs = new InputList<Inputs.ServicepolicyEwfGetArgs>());
            set => _ewfs = value;
        }

        [Input("idp")]
        public Input<Inputs.ServicepolicyIdpGetArgs>? Idp { get; set; }

        /// <summary>
        /// access within the same VRF
        /// </summary>
        [Input("localRouting")]
        public Input<bool>? LocalRouting { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// By default, we derive all paths available and use them, optionally, you can customize by using `PathPreference`
        /// </summary>
        [Input("pathPreference")]
        public Input<string>? PathPreference { get; set; }

        [Input("services")]
        private InputList<string>? _services;
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        /// <summary>
        /// For SRX-only
        /// </summary>
        [Input("sslProxy")]
        public Input<Inputs.ServicepolicySslProxyGetArgs>? SslProxy { get; set; }

        [Input("tenants")]
        private InputList<string>? _tenants;
        public InputList<string> Tenants
        {
            get => _tenants ?? (_tenants = new InputList<string>());
            set => _tenants = value;
        }

        public ServicepolicyState()
        {
        }
        public static new ServicepolicyState Empty => new ServicepolicyState();
    }
}
