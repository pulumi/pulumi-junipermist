// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages Org SSO Configuration.
    /// 
    /// Org SSO, or Single Sign-On, is a method of authentication that allows users to securely log in to multiple applications and websites with a single set of login credentials.\
    /// It involves integrating the Org portal with an Identity Provider (IdP) using the Security Assertion Markup Language (SAML) framework.\
    /// This enables users to authenticate themselves through their corporate IdP, eliminating the need to remember separate passwords or enter credentials each time they access the Org portal.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ssoAdminOne = new JuniperMist.Org.Sso("sso_admin_one", new()
    ///     {
    ///         OrgId = terraformTest.Id,
    ///         Name = "sso_admin_one",
    ///         CustomLogoutUrl = "https://idp.com/logout",
    ///         IdpCert = "-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
    ///         IdpSignAlgo = "sha512",
    ///         IdpSsoUrl = "https://idp.com/login",
    ///         Issuer = "my_idp_issuer",
    ///         NameidFormat = "email",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_sso` with:
    /// 
    /// Org PSK can be imported by specifying the org_id and the sso_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/sso:Sso")]
    public partial class Sso : global::Pulumi.CustomResource
    {
        /// <summary>
        /// a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        /// different from SP-initiated SLO process)
        /// </summary>
        [Output("customLogoutUrl")]
        public Output<string?> CustomLogoutUrl { get; private set; } = null!;

        /// <summary>
        /// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        /// matched
        /// </summary>
        [Output("defaultRole")]
        public Output<string?> DefaultRole { get; private set; } = null!;

        /// <summary>
        /// Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
        /// `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
        /// `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// IDP Cert (used to verify the signed response)
        /// </summary>
        [Output("idpCert")]
        public Output<string> IdpCert { get; private set; } = null!;

        /// <summary>
        /// Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        /// </summary>
        [Output("idpSignAlgo")]
        public Output<string> IdpSignAlgo { get; private set; } = null!;

        /// <summary>
        /// IDP Single-Sign-On URL
        /// </summary>
        [Output("idpSsoUrl")]
        public Output<string> IdpSsoUrl { get; private set; } = null!;

        /// <summary>
        /// ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        /// </summary>
        [Output("ignoreUnmatchedRoles")]
        public Output<bool?> IgnoreUnmatchedRoles { get; private set; } = null!;

        /// <summary>
        /// IDP issuer URL
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// enum: `email`, `unspecified`
        /// </summary>
        [Output("nameidFormat")]
        public Output<string> NameidFormat { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// custom role attribute parsing scheme. Supported Role Parsing Schemes
        /// &lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`cn`&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;The expected role attribute format in SAML
        /// Assertion is “CN=cn,OU=ou1,OU=ou2,…”&lt;/li&gt;&lt;li&gt;CN (the key) is case insensitive and exactly 1 CN is expected (or the
        /// entire entry will be ignored)&lt;/li&gt;&lt;/ul&gt;E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
        /// “cn”&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        [Output("roleAttrExtraction")]
        public Output<string?> RoleAttrExtraction { get; private set; } = null!;

        /// <summary>
        /// name of the attribute in SAML Assertion to extract role from. Default: `Role`
        /// </summary>
        [Output("roleAttrFrom")]
        public Output<string> RoleAttrFrom { get; private set; } = null!;


        /// <summary>
        /// Create a Sso resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sso(string name, SsoArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/sso:Sso", name, args ?? new SsoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sso(string name, Input<string> id, SsoState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/sso:Sso", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sso resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sso Get(string name, Input<string> id, SsoState? state = null, CustomResourceOptions? options = null)
        {
            return new Sso(name, id, state, options);
        }
    }

    public sealed class SsoArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        /// different from SP-initiated SLO process)
        /// </summary>
        [Input("customLogoutUrl")]
        public Input<string>? CustomLogoutUrl { get; set; }

        /// <summary>
        /// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        /// matched
        /// </summary>
        [Input("defaultRole")]
        public Input<string>? DefaultRole { get; set; }

        /// <summary>
        /// IDP Cert (used to verify the signed response)
        /// </summary>
        [Input("idpCert", required: true)]
        public Input<string> IdpCert { get; set; } = null!;

        /// <summary>
        /// Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        /// </summary>
        [Input("idpSignAlgo", required: true)]
        public Input<string> IdpSignAlgo { get; set; } = null!;

        /// <summary>
        /// IDP Single-Sign-On URL
        /// </summary>
        [Input("idpSsoUrl", required: true)]
        public Input<string> IdpSsoUrl { get; set; } = null!;

        /// <summary>
        /// ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        /// </summary>
        [Input("ignoreUnmatchedRoles")]
        public Input<bool>? IgnoreUnmatchedRoles { get; set; }

        /// <summary>
        /// IDP issuer URL
        /// </summary>
        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// enum: `email`, `unspecified`
        /// </summary>
        [Input("nameidFormat")]
        public Input<string>? NameidFormat { get; set; }

        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// custom role attribute parsing scheme. Supported Role Parsing Schemes
        /// &lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`cn`&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;The expected role attribute format in SAML
        /// Assertion is “CN=cn,OU=ou1,OU=ou2,…”&lt;/li&gt;&lt;li&gt;CN (the key) is case insensitive and exactly 1 CN is expected (or the
        /// entire entry will be ignored)&lt;/li&gt;&lt;/ul&gt;E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
        /// “cn”&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        [Input("roleAttrExtraction")]
        public Input<string>? RoleAttrExtraction { get; set; }

        /// <summary>
        /// name of the attribute in SAML Assertion to extract role from. Default: `Role`
        /// </summary>
        [Input("roleAttrFrom")]
        public Input<string>? RoleAttrFrom { get; set; }

        public SsoArgs()
        {
        }
        public static new SsoArgs Empty => new SsoArgs();
    }

    public sealed class SsoState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        /// different from SP-initiated SLO process)
        /// </summary>
        [Input("customLogoutUrl")]
        public Input<string>? CustomLogoutUrl { get; set; }

        /// <summary>
        /// default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        /// matched
        /// </summary>
        [Input("defaultRole")]
        public Input<string>? DefaultRole { get; set; }

        /// <summary>
        /// Random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
        /// `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
        /// `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// IDP Cert (used to verify the signed response)
        /// </summary>
        [Input("idpCert")]
        public Input<string>? IdpCert { get; set; }

        /// <summary>
        /// Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        /// </summary>
        [Input("idpSignAlgo")]
        public Input<string>? IdpSignAlgo { get; set; }

        /// <summary>
        /// IDP Single-Sign-On URL
        /// </summary>
        [Input("idpSsoUrl")]
        public Input<string>? IdpSsoUrl { get; set; }

        /// <summary>
        /// ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        /// </summary>
        [Input("ignoreUnmatchedRoles")]
        public Input<bool>? IgnoreUnmatchedRoles { get; set; }

        /// <summary>
        /// IDP issuer URL
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// enum: `email`, `unspecified`
        /// </summary>
        [Input("nameidFormat")]
        public Input<string>? NameidFormat { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// custom role attribute parsing scheme. Supported Role Parsing Schemes
        /// &lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Scheme&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;`cn`&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;The expected role attribute format in SAML
        /// Assertion is “CN=cn,OU=ou1,OU=ou2,…”&lt;/li&gt;&lt;li&gt;CN (the key) is case insensitive and exactly 1 CN is expected (or the
        /// entire entry will be ignored)&lt;/li&gt;&lt;/ul&gt;E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is
        /// “cn”&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
        /// </summary>
        [Input("roleAttrExtraction")]
        public Input<string>? RoleAttrExtraction { get; set; }

        /// <summary>
        /// name of the attribute in SAML Assertion to extract role from. Default: `Role`
        /// </summary>
        [Input("roleAttrFrom")]
        public Input<string>? RoleAttrFrom { get; set; }

        public SsoState()
        {
        }
        public static new SsoState Empty => new SsoState();
    }
}
