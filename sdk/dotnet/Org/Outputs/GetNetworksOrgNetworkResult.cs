// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GetNetworksOrgNetworkResult
    {
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        /// <summary>
        /// Whether to disallow Mist Devices in the network
        /// </summary>
        public readonly bool DisallowMistServices;
        public readonly string Gateway;
        public readonly string Gateway6;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetNetworksOrgNetworkInternalAccessResult InternalAccess;
        /// <summary>
        /// Whether this network has direct internet access
        /// </summary>
        public readonly Outputs.GetNetworksOrgNetworkInternetAccessResult InternetAccess;
        /// <summary>
        /// Whether to allow clients in the network to talk to each other
        /// </summary>
        public readonly bool Isolation;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        /// <summary>
        /// Whether to enable multicast support (only PIM-sparse mode is supported)
        /// </summary>
        public readonly Outputs.GetNetworksOrgNetworkMulticastResult Multicast;
        public readonly string Name;
        public readonly string OrgId;
        /// <summary>
        /// For a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        /// </summary>
        public readonly ImmutableArray<string> RoutedForNetworks;
        public readonly string Subnet;
        public readonly string Subnet6;
        /// <summary>
        /// Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetNetworksOrgNetworkTenantsResult> Tenants;
        public readonly string VlanId;
        /// <summary>
        /// Property key is the VPN name. Whether this network can be accessed from vpn
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetNetworksOrgNetworkVpnAccessResult> VpnAccess;

        [OutputConstructor]
        private GetNetworksOrgNetworkResult(
            double createdTime,

            bool disallowMistServices,

            string gateway,

            string gateway6,

            string id,

            Outputs.GetNetworksOrgNetworkInternalAccessResult internalAccess,

            Outputs.GetNetworksOrgNetworkInternetAccessResult internetAccess,

            bool isolation,

            double modifiedTime,

            Outputs.GetNetworksOrgNetworkMulticastResult multicast,

            string name,

            string orgId,

            ImmutableArray<string> routedForNetworks,

            string subnet,

            string subnet6,

            ImmutableDictionary<string, Outputs.GetNetworksOrgNetworkTenantsResult> tenants,

            string vlanId,

            ImmutableDictionary<string, Outputs.GetNetworksOrgNetworkVpnAccessResult> vpnAccess)
        {
            CreatedTime = createdTime;
            DisallowMistServices = disallowMistServices;
            Gateway = gateway;
            Gateway6 = gateway6;
            Id = id;
            InternalAccess = internalAccess;
            InternetAccess = internetAccess;
            Isolation = isolation;
            ModifiedTime = modifiedTime;
            Multicast = multicast;
            Name = name;
            OrgId = orgId;
            RoutedForNetworks = routedForNetworks;
            Subnet = subnet;
            Subnet6 = subnet6;
            Tenants = tenants;
            VlanId = vlanId;
            VpnAccess = vpnAccess;
        }
    }
}
