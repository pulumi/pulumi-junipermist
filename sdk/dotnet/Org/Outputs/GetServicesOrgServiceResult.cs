// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GetServicesOrgServiceResult
    {
        /// <summary>
        /// If `Type`==`Custom`, ip subnets (e.g. 10.0.0.0/8)
        /// </summary>
        public readonly ImmutableArray<string> Addresses;
        /// <summary>
        /// When `Type`==`AppCategories`, list of application categories are available through List App Category Definitions
        /// </summary>
        public readonly ImmutableArray<string> AppCategories;
        /// <summary>
        /// When `Type`==`AppCategories`, list of application categories are available through List App Sub Category Definitions
        /// </summary>
        public readonly ImmutableArray<string> AppSubcategories;
        /// <summary>
        /// When `Type`==`Apps`, list of applications are available through:
        ///   * List Applications
        ///   * List Gateway Applications
        ///   * /insight/top_app_by-bytes?wired=true
        /// </summary>
        public readonly ImmutableArray<string> Apps;
        /// <summary>
        /// 0 means unlimited
        /// </summary>
        public readonly int ClientLimitDown;
        /// <summary>
        /// 0 means unlimited
        /// </summary>
        public readonly int ClientLimitUp;
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        public readonly string Description;
        public readonly string Dscp;
        /// <summary>
        /// enum: `NonRevertable`, `None`, `Revertable`
        /// </summary>
        public readonly string FailoverPolicy;
        /// <summary>
        /// If `Type`==`Custom`, web filtering
        /// </summary>
        public readonly ImmutableArray<string> Hostnames;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        public readonly string MaxJitter;
        public readonly string MaxLatency;
        public readonly string MaxLoss;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        public readonly string Name;
        public readonly string OrgId;
        /// <summary>
        /// 0 means unlimited
        /// </summary>
        public readonly int ServiceLimitDown;
        /// <summary>
        /// 0 means unlimited
        /// </summary>
        public readonly int ServiceLimitUp;
        /// <summary>
        /// Whether to enable measure SLE
        /// </summary>
        public readonly bool SleEnabled;
        /// <summary>
        /// When `Type`==`Custom`, optional, if it doesn't exist, http and https is assumed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServicesOrgServiceSpecResult> Specs;
        public readonly bool SsrRelaxedTcpStateEnforcement;
        /// <summary>
        /// when `TrafficType`==`Custom`. enum: `BestEffort`, `High`, `Low`, `Medium`
        /// </summary>
        public readonly string TrafficClass;
        /// <summary>
        /// values from List Traffic Types
        /// </summary>
        public readonly string TrafficType;
        /// <summary>
        /// enum: `AppCategories`, `Apps`, `Custom`, `Urls`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// When `Type`==`Urls`, no need for spec as URL can encode the ports being used
        /// </summary>
        public readonly ImmutableArray<string> Urls;

        [OutputConstructor]
        private GetServicesOrgServiceResult(
            ImmutableArray<string> addresses,

            ImmutableArray<string> appCategories,

            ImmutableArray<string> appSubcategories,

            ImmutableArray<string> apps,

            int clientLimitDown,

            int clientLimitUp,

            double createdTime,

            string description,

            string dscp,

            string failoverPolicy,

            ImmutableArray<string> hostnames,

            string id,

            string maxJitter,

            string maxLatency,

            string maxLoss,

            double modifiedTime,

            string name,

            string orgId,

            int serviceLimitDown,

            int serviceLimitUp,

            bool sleEnabled,

            ImmutableArray<Outputs.GetServicesOrgServiceSpecResult> specs,

            bool ssrRelaxedTcpStateEnforcement,

            string trafficClass,

            string trafficType,

            string type,

            ImmutableArray<string> urls)
        {
            Addresses = addresses;
            AppCategories = appCategories;
            AppSubcategories = appSubcategories;
            Apps = apps;
            ClientLimitDown = clientLimitDown;
            ClientLimitUp = clientLimitUp;
            CreatedTime = createdTime;
            Description = description;
            Dscp = dscp;
            FailoverPolicy = failoverPolicy;
            Hostnames = hostnames;
            Id = id;
            MaxJitter = maxJitter;
            MaxLatency = maxLatency;
            MaxLoss = maxLoss;
            ModifiedTime = modifiedTime;
            Name = name;
            OrgId = orgId;
            ServiceLimitDown = serviceLimitDown;
            ServiceLimitUp = serviceLimitUp;
            SleEnabled = sleEnabled;
            Specs = specs;
            SsrRelaxedTcpStateEnforcement = ssrRelaxedTcpStateEnforcement;
            TrafficClass = trafficClass;
            TrafficType = trafficType;
            Type = type;
            Urls = urls;
        }
    }
}
