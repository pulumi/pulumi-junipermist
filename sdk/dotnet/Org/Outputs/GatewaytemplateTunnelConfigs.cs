// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GatewaytemplateTunnelConfigs
    {
        public readonly Outputs.GatewaytemplateTunnelConfigsAutoProvision? AutoProvision;
        /// <summary>
        /// Only if `provider`== `custom-ipsec`
        /// </summary>
        public readonly int? IkeLifetime;
        /// <summary>
        /// Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        /// </summary>
        public readonly string? IkeMode;
        /// <summary>
        /// if `provider`== `custom-ipsec`
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaytemplateTunnelConfigsIkeProposal> IkeProposals;
        /// <summary>
        /// if `provider`== `custom-ipsec`
        /// </summary>
        public readonly int? IpsecLifetime;
        /// <summary>
        /// Only if  `provider`== `custom-ipsec`
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaytemplateTunnelConfigsIpsecProposal> IpsecProposals;
        /// <summary>
        /// Only if:
        ///   * `provider`== `zscaler-ipsec`
        ///   * `provider`==`jse-ipsec`
        ///   * `provider`== `custom-ipsec`
        /// </summary>
        public readonly string? LocalId;
        /// <summary>
        /// enum: `active-active`, `active-standby`
        /// </summary>
        public readonly string? Mode;
        public readonly Outputs.GatewaytemplateTunnelConfigsPrimary? Primary;
        /// <summary>
        /// Only if `provider`== `custom-ipsec`
        /// </summary>
        public readonly Outputs.GatewaytemplateTunnelConfigsProbe? Probe;
        /// <summary>
        /// Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        /// </summary>
        public readonly string? Provider;
        /// <summary>
        /// Only if:
        ///   * `provider`== `zscaler-ipsec`
        ///   * `provider`==`jse-ipsec`
        ///   * `provider`== `custom-ipsec`
        /// </summary>
        public readonly string? Psk;
        public readonly Outputs.GatewaytemplateTunnelConfigsSecondary? Secondary;
        /// <summary>
        /// Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private GatewaytemplateTunnelConfigs(
            Outputs.GatewaytemplateTunnelConfigsAutoProvision? autoProvision,

            int? ikeLifetime,

            string? ikeMode,

            ImmutableArray<Outputs.GatewaytemplateTunnelConfigsIkeProposal> ikeProposals,

            int? ipsecLifetime,

            ImmutableArray<Outputs.GatewaytemplateTunnelConfigsIpsecProposal> ipsecProposals,

            string? localId,

            string? mode,

            Outputs.GatewaytemplateTunnelConfigsPrimary? primary,

            Outputs.GatewaytemplateTunnelConfigsProbe? probe,

            string? protocol,

            string? provider,

            string? psk,

            Outputs.GatewaytemplateTunnelConfigsSecondary? secondary,

            string? version)
        {
            AutoProvision = autoProvision;
            IkeLifetime = ikeLifetime;
            IkeMode = ikeMode;
            IkeProposals = ikeProposals;
            IpsecLifetime = ipsecLifetime;
            IpsecProposals = ipsecProposals;
            LocalId = localId;
            Mode = mode;
            Primary = primary;
            Probe = probe;
            Protocol = protocol;
            Provider = provider;
            Psk = psk;
            Secondary = secondary;
            Version = version;
        }
    }
}
