// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class WlanPortal
    {
        /// <summary>
        /// Optional if `AmazonEnabled`==`True`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable RandomMac for seamless roaming)
        /// </summary>
        public readonly bool? AllowWlanIdRoam;
        /// <summary>
        /// Optional if `AmazonEnabled`==`True`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        /// </summary>
        public readonly string? AmazonClientId;
        /// <summary>
        /// Optional if `AmazonEnabled`==`True`. Amazon OAuth2 client secret. If AmazonClientId was provided, provide a corresponding value. Else leave blank.
        /// </summary>
        public readonly string? AmazonClientSecret;
        /// <summary>
        /// Optional if `AmazonEnabled`==`True`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        /// </summary>
        public readonly ImmutableArray<string> AmazonEmailDomains;
        /// <summary>
        /// Whether amazon is enabled as a login method
        /// </summary>
        public readonly bool? AmazonEnabled;
        /// <summary>
        /// Optional if `AmazonEnabled`==`True`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? AmazonExpire;
        /// <summary>
        /// authentication scheme. enum: `Amazon`, `Azure`, `Email`, `External`, `Facebook`, `Google`, `Microsoft`, `Multi`, `None`, `Password`, `Sms`, `Sponsor`, `Sso`
        /// </summary>
        public readonly string? Auth;
        /// <summary>
        /// Required if `AzureEnabled`==`True`. Azure active directory app client id
        /// </summary>
        public readonly string? AzureClientId;
        /// <summary>
        /// Required if `AzureEnabled`==`True`. Azure active directory app client secret
        /// </summary>
        public readonly string? AzureClientSecret;
        /// <summary>
        /// Whether Azure Active Directory is enabled as a login method
        /// </summary>
        public readonly bool? AzureEnabled;
        /// <summary>
        /// Interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? AzureExpire;
        /// <summary>
        /// Required if `AzureEnabled`==`True`. Azure active directory tenant id.
        /// </summary>
        public readonly string? AzureTenantId;
        /// <summary>
        /// Required if `SmsProvider`==`Broadnet`
        /// </summary>
        public readonly string? BroadnetPassword;
        /// <summary>
        /// Required if `SmsProvider`==`Broadnet`
        /// </summary>
        public readonly string? BroadnetSid;
        /// <summary>
        /// Required if `SmsProvider`==`Broadnet`
        /// </summary>
        public readonly string? BroadnetUserId;
        /// <summary>
        /// Whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        /// </summary>
        public readonly bool? BypassWhenCloudDown;
        /// <summary>
        /// Required if `SmsProvider`==`Clickatell`
        /// </summary>
        public readonly string? ClickatellApiKey;
        /// <summary>
        /// Whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable RandomMac for seamless roaming)
        /// </summary>
        public readonly bool? CrossSite;
        /// <summary>
        /// Whether email (access code verification) is enabled as a login method
        /// </summary>
        public readonly bool? EmailEnabled;
        /// <summary>
        /// Whether guest portal is enabled
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// How long to remain authorized, in minutes
        /// </summary>
        public readonly int? Expire;
        /// <summary>
        /// Required if `WlanPortalAuth`==`External`. External portal URL (e.g. https://host/url) where we can append our query parameters to
        /// </summary>
        public readonly string? ExternalPortalUrl;
        /// <summary>
        /// Required if `FacebookEnabled`==`True`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        /// </summary>
        public readonly string? FacebookClientId;
        /// <summary>
        /// Required if `FacebookEnabled`==`True`. Facebook OAuth2 app secret. If FacebookClientId was provided, provide a corresponding value. Else leave blank.
        /// </summary>
        public readonly string? FacebookClientSecret;
        /// <summary>
        /// Optional if `FacebookEnabled`==`True`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        /// </summary>
        public readonly ImmutableArray<string> FacebookEmailDomains;
        /// <summary>
        /// Whether facebook is enabled as a login method
        /// </summary>
        public readonly bool? FacebookEnabled;
        /// <summary>
        /// Optional if `FacebookEnabled`==`True`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? FacebookExpire;
        /// <summary>
        /// Whether to forward the user to another URL after authorized
        /// </summary>
        public readonly bool? Forward;
        /// <summary>
        /// URL to forward the user to
        /// </summary>
        public readonly string? ForwardUrl;
        /// <summary>
        /// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        /// </summary>
        public readonly string? GoogleClientId;
        /// <summary>
        /// Optional if `GoogleEnabled`==`True`. Google OAuth2 app secret. If GoogleClientId was provided, provide a corresponding value. Else leave blank.
        /// </summary>
        public readonly string? GoogleClientSecret;
        /// <summary>
        /// Optional if `GoogleEnabled`==`True`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        /// </summary>
        public readonly ImmutableArray<string> GoogleEmailDomains;
        /// <summary>
        /// Whether Google is enabled as login method
        /// </summary>
        public readonly bool? GoogleEnabled;
        /// <summary>
        /// Optional if `GoogleEnabled`==`True`. Interval for which guest remains authorized using Google Auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? GoogleExpire;
        /// <summary>
        /// Required if `SmsProvider`==`Gupshup`
        /// </summary>
        public readonly string? GupshupPassword;
        /// <summary>
        /// Required if `SmsProvider`==`Gupshup`
        /// </summary>
        public readonly string? GupshupUserid;
        /// <summary>
        /// Optional if `MicrosoftEnabled`==`True`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        /// </summary>
        public readonly string? MicrosoftClientId;
        /// <summary>
        /// Optional if `MicrosoftEnabled`==`True`. Microsoft 365 OAuth2 client secret. If MicrosoftClientId was provided, provide a corresponding value. Else leave blank.
        /// </summary>
        public readonly string? MicrosoftClientSecret;
        /// <summary>
        /// Optional if `MicrosoftEnabled`==`True`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        /// </summary>
        public readonly ImmutableArray<string> MicrosoftEmailDomains;
        /// <summary>
        /// Whether microsoft 365 is enabled as a login method
        /// </summary>
        public readonly bool? MicrosoftEnabled;
        /// <summary>
        /// Optional if `MicrosoftEnabled`==`True`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? MicrosoftExpire;
        /// <summary>
        /// Whether password is enabled
        /// </summary>
        public readonly bool? PassphraseEnabled;
        /// <summary>
        /// Optional if `PassphraseEnabled`==`True`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `Expire`
        /// </summary>
        public readonly int? PassphraseExpire;
        /// <summary>
        /// Required if `PassphraseEnabled`==`True`.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Whether to show list of sponsor emails mentioned in `Sponsors` object as a dropdown. If both `SponsorNotifyAll` and `PredefinedSponsorsEnabled` are false, behavior is acc to `SponsorEmailDomains`
        /// </summary>
        public readonly bool? PredefinedSponsorsEnabled;
        /// <summary>
        /// Whether to hide sponsorâ€™s email from list of sponsors
        /// </summary>
        public readonly bool? PredefinedSponsorsHideEmail;
        public readonly bool? Privacy;
        /// <summary>
        /// Required if `SmsProvider`==`Puzzel`
        /// </summary>
        public readonly string? PuzzelPassword;
        /// <summary>
        /// Required if `SmsProvider`==`Puzzel`
        /// </summary>
        public readonly string? PuzzelServiceId;
        /// <summary>
        /// Required if `SmsProvider`==`Puzzel`
        /// </summary>
        public readonly string? PuzzelUsername;
        /// <summary>
        /// Whether sms is enabled as a login method
        /// </summary>
        public readonly bool? SmsEnabled;
        /// <summary>
        /// Optional if `SmsEnabled`==`True`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? SmsExpire;
        /// <summary>
        /// Optional if `SmsEnabled`==`True`. SMS Message format
        /// </summary>
        public readonly string? SmsMessageFormat;
        /// <summary>
        /// Optional if `SmsEnabled`==`True`. enum: `Broadnet`, `Clickatell`, `Gupshup`, `Manual`, `Puzzel`, `Smsglobal`, `Telstra`, `Twilio`
        /// </summary>
        public readonly string? SmsProvider;
        /// <summary>
        /// Required if `SmsProvider`==`Smsglobal`, Client API Key
        /// </summary>
        public readonly string? SmsglobalApiKey;
        /// <summary>
        /// Required if `SmsProvider`==`Smsglobal`, Client secret
        /// </summary>
        public readonly string? SmsglobalApiSecret;
        /// <summary>
        /// Optional if `SponsorEnabled`==`True`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs PredefinedSponsorsEnabled enabled and SponsorNotifyAll disabled
        /// </summary>
        public readonly bool? SponsorAutoApprove;
        /// <summary>
        /// List of domain allowed for sponsor email. Required if `SponsorEnabled` is `True` and `Sponsors` is empty.
        /// </summary>
        public readonly ImmutableArray<string> SponsorEmailDomains;
        /// <summary>
        /// Whether sponsor is enabled
        /// </summary>
        public readonly bool? SponsorEnabled;
        /// <summary>
        /// Optional if `SponsorEnabled`==`True`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        /// </summary>
        public readonly int? SponsorExpire;
        /// <summary>
        /// Optional if `SponsorEnabled`==`True`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes. Default is 60 minutes.
        /// </summary>
        public readonly string? SponsorLinkValidityDuration;
        /// <summary>
        /// Optional if `SponsorEnabled`==`True`. whether to notify all sponsors that are mentioned in `Sponsors` object. Both `SponsorNotifyAll` and `PredefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        /// </summary>
        public readonly bool? SponsorNotifyAll;
        /// <summary>
        /// Optional if `SponsorEnabled`==`True`. If enabled, guest will get email about sponsor's action (approve/deny)
        /// </summary>
        public readonly bool? SponsorStatusNotify;
        /// <summary>
        /// object of allowed sponsors email with name. Required if `SponsorEnabled`
        ///             is `True` and `SponsorEmailDomains` is empty.
        /// 
        ///             Property key is the sponsor email, Property value is the sponsor name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Sponsors;
        /// <summary>
        /// Optional if `WlanPortalAuth`==`Sso`, default role to assign if thereâ€™s no match. By default, an assertion is treated as invalid when thereâ€™s no role matched
        /// </summary>
        public readonly string? SsoDefaultRole;
        /// <summary>
        /// Optional if `WlanPortalAuth`==`Sso`
        /// </summary>
        public readonly string? SsoForcedRole;
        /// <summary>
        /// Required if `WlanPortalAuth`==`Sso`. IDP Cert (used to verify the signed response)
        /// </summary>
        public readonly string? SsoIdpCert;
        /// <summary>
        /// Optional if `WlanPortalAuth`==`Sso`, Signing algorithm for SAML Assertion. enum: `Sha1`, `Sha256`, `Sha384`, `Sha512`
        /// </summary>
        public readonly string? SsoIdpSignAlgo;
        /// <summary>
        /// Required if `WlanPortalAuth`==`Sso`, IDP Single-Sign-On URL
        /// </summary>
        public readonly string? SsoIdpSsoUrl;
        /// <summary>
        /// Required if `WlanPortalAuth`==`Sso`, IDP issuer URL
        /// </summary>
        public readonly string? SsoIssuer;
        /// <summary>
        /// Optional if `WlanPortalAuth`==`Sso`. enum: `Email`, `Unspecified`
        /// </summary>
        public readonly string? SsoNameidFormat;
        /// <summary>
        /// Required if `SmsProvider`==`Telstra`, Client ID provided by Telstra
        /// </summary>
        public readonly string? TelstraClientId;
        /// <summary>
        /// Required if `SmsProvider`==`Telstra`, Client secret provided by Telstra
        /// </summary>
        public readonly string? TelstraClientSecret;
        /// <summary>
        /// Required if `SmsProvider`==`Twilio`, Auth token account with twilio account
        /// </summary>
        public readonly string? TwilioAuthToken;
        /// <summary>
        /// Required if `SmsProvider`==`Twilio`, Twilio phone number associated with the account. See example for accepted format.
        /// </summary>
        public readonly string? TwilioPhoneNumber;
        /// <summary>
        /// Required if `SmsProvider`==`Twilio`, Account SID provided by Twilio
        /// </summary>
        public readonly string? TwilioSid;

        [OutputConstructor]
        private WlanPortal(
            bool? allowWlanIdRoam,

            string? amazonClientId,

            string? amazonClientSecret,

            ImmutableArray<string> amazonEmailDomains,

            bool? amazonEnabled,

            int? amazonExpire,

            string? auth,

            string? azureClientId,

            string? azureClientSecret,

            bool? azureEnabled,

            int? azureExpire,

            string? azureTenantId,

            string? broadnetPassword,

            string? broadnetSid,

            string? broadnetUserId,

            bool? bypassWhenCloudDown,

            string? clickatellApiKey,

            bool? crossSite,

            bool? emailEnabled,

            bool? enabled,

            int? expire,

            string? externalPortalUrl,

            string? facebookClientId,

            string? facebookClientSecret,

            ImmutableArray<string> facebookEmailDomains,

            bool? facebookEnabled,

            int? facebookExpire,

            bool? forward,

            string? forwardUrl,

            string? googleClientId,

            string? googleClientSecret,

            ImmutableArray<string> googleEmailDomains,

            bool? googleEnabled,

            int? googleExpire,

            string? gupshupPassword,

            string? gupshupUserid,

            string? microsoftClientId,

            string? microsoftClientSecret,

            ImmutableArray<string> microsoftEmailDomains,

            bool? microsoftEnabled,

            int? microsoftExpire,

            bool? passphraseEnabled,

            int? passphraseExpire,

            string? password,

            bool? predefinedSponsorsEnabled,

            bool? predefinedSponsorsHideEmail,

            bool? privacy,

            string? puzzelPassword,

            string? puzzelServiceId,

            string? puzzelUsername,

            bool? smsEnabled,

            int? smsExpire,

            string? smsMessageFormat,

            string? smsProvider,

            string? smsglobalApiKey,

            string? smsglobalApiSecret,

            bool? sponsorAutoApprove,

            ImmutableArray<string> sponsorEmailDomains,

            bool? sponsorEnabled,

            int? sponsorExpire,

            string? sponsorLinkValidityDuration,

            bool? sponsorNotifyAll,

            bool? sponsorStatusNotify,

            ImmutableDictionary<string, string>? sponsors,

            string? ssoDefaultRole,

            string? ssoForcedRole,

            string? ssoIdpCert,

            string? ssoIdpSignAlgo,

            string? ssoIdpSsoUrl,

            string? ssoIssuer,

            string? ssoNameidFormat,

            string? telstraClientId,

            string? telstraClientSecret,

            string? twilioAuthToken,

            string? twilioPhoneNumber,

            string? twilioSid)
        {
            AllowWlanIdRoam = allowWlanIdRoam;
            AmazonClientId = amazonClientId;
            AmazonClientSecret = amazonClientSecret;
            AmazonEmailDomains = amazonEmailDomains;
            AmazonEnabled = amazonEnabled;
            AmazonExpire = amazonExpire;
            Auth = auth;
            AzureClientId = azureClientId;
            AzureClientSecret = azureClientSecret;
            AzureEnabled = azureEnabled;
            AzureExpire = azureExpire;
            AzureTenantId = azureTenantId;
            BroadnetPassword = broadnetPassword;
            BroadnetSid = broadnetSid;
            BroadnetUserId = broadnetUserId;
            BypassWhenCloudDown = bypassWhenCloudDown;
            ClickatellApiKey = clickatellApiKey;
            CrossSite = crossSite;
            EmailEnabled = emailEnabled;
            Enabled = enabled;
            Expire = expire;
            ExternalPortalUrl = externalPortalUrl;
            FacebookClientId = facebookClientId;
            FacebookClientSecret = facebookClientSecret;
            FacebookEmailDomains = facebookEmailDomains;
            FacebookEnabled = facebookEnabled;
            FacebookExpire = facebookExpire;
            Forward = forward;
            ForwardUrl = forwardUrl;
            GoogleClientId = googleClientId;
            GoogleClientSecret = googleClientSecret;
            GoogleEmailDomains = googleEmailDomains;
            GoogleEnabled = googleEnabled;
            GoogleExpire = googleExpire;
            GupshupPassword = gupshupPassword;
            GupshupUserid = gupshupUserid;
            MicrosoftClientId = microsoftClientId;
            MicrosoftClientSecret = microsoftClientSecret;
            MicrosoftEmailDomains = microsoftEmailDomains;
            MicrosoftEnabled = microsoftEnabled;
            MicrosoftExpire = microsoftExpire;
            PassphraseEnabled = passphraseEnabled;
            PassphraseExpire = passphraseExpire;
            Password = password;
            PredefinedSponsorsEnabled = predefinedSponsorsEnabled;
            PredefinedSponsorsHideEmail = predefinedSponsorsHideEmail;
            Privacy = privacy;
            PuzzelPassword = puzzelPassword;
            PuzzelServiceId = puzzelServiceId;
            PuzzelUsername = puzzelUsername;
            SmsEnabled = smsEnabled;
            SmsExpire = smsExpire;
            SmsMessageFormat = smsMessageFormat;
            SmsProvider = smsProvider;
            SmsglobalApiKey = smsglobalApiKey;
            SmsglobalApiSecret = smsglobalApiSecret;
            SponsorAutoApprove = sponsorAutoApprove;
            SponsorEmailDomains = sponsorEmailDomains;
            SponsorEnabled = sponsorEnabled;
            SponsorExpire = sponsorExpire;
            SponsorLinkValidityDuration = sponsorLinkValidityDuration;
            SponsorNotifyAll = sponsorNotifyAll;
            SponsorStatusNotify = sponsorStatusNotify;
            Sponsors = sponsors;
            SsoDefaultRole = ssoDefaultRole;
            SsoForcedRole = ssoForcedRole;
            SsoIdpCert = ssoIdpCert;
            SsoIdpSignAlgo = ssoIdpSignAlgo;
            SsoIdpSsoUrl = ssoIdpSsoUrl;
            SsoIssuer = ssoIssuer;
            SsoNameidFormat = ssoNameidFormat;
            TelstraClientId = telstraClientId;
            TelstraClientSecret = telstraClientSecret;
            TwilioAuthToken = twilioAuthToken;
            TwilioPhoneNumber = twilioPhoneNumber;
            TwilioSid = twilioSid;
        }
    }
}
