// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GetWxtagsOrgWxtagResult
    {
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> LastIps;
        /// <summary>
        /// If `Type`==`Client`, Client MAC Address
        /// </summary>
        public readonly string Mac;
        /// <summary>
        /// required if `Type`==`Match`. enum: `ApId`, `App`, `AssetMac`, `ClientMac`, `Hostname`, `IpRangeSubnet`, `Port`, `PskName`, `PskRole`, `RadiusAttr`, `RadiusClass`, `RadiusGroup`, `RadiusUsername`, `SdkclientUuid`, `WlanId`
        /// </summary>
        public readonly string Match;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        /// <summary>
        /// The name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// required if `Type`==`Match`, type of tag (inclusive/exclusive). enum: `In`, `NotIn`
        /// </summary>
        public readonly string Op;
        public readonly string OrgId;
        public readonly string ResourceMac;
        public readonly ImmutableArray<string> Services;
        public readonly string SiteId;
        /// <summary>
        /// If `Type`==`Spec`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWxtagsOrgWxtagSpecResult> Specs;
        public readonly string Subnet;
        /// <summary>
        /// enum: `Client`, `Match`, `Resource`, `Spec`, `Subnet`, `Vlan`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Required if `Type`==`Match` and
        ///   * `Match`==`ApId`: list of AP IDs
        ///   * `Match`==`App`: list of Application Names
        ///   * `Match`==`AssetMac`: list of Asset MAC Addresses
        ///   * `Match`==`ClientMac`: list of Client MAC Addresses
        ///   * `Match`==`Hostname`: list of Resources Hostnames
        ///   * `Match`==`IpRangeSubnet`: list of IP Addresses and/or CIDRs
        ///   * `Match`==`PskName`: list of PSK Names
        ///   * `Match`==`PskRole`: list of PSK Roles
        ///   * `Match`==`Port`: list of Ports or Port Ranges
        ///   * `Match`==`RadiusAttr`: list of RADIUS Attributes. The values are [ "6=1", "26=10.2.3.4" ], this support other RADIUS attributes where we know the type
        ///   * `Match`==`RadiusClass`: list of RADIUS Classes. This matches the ATTR-Class(25)
        ///   * `Match`==`RadiusGroup`: list of RADIUS Groups. This is a smart tag that matches RADIUS-Filter-ID, Airespace-ACL-Name (VendorID=14179, VendorType=6) / Aruba-User-Role (VendorID=14823, VendorType=1)
        ///   * `Match`==`RadiusUsername`: list of RADIUS Usernames. This matches the ATTR-User-Name(1)
        ///   * `Match`==`SdkclientUuid`: list of SDK UUIDs
        ///   * `Match`==`WlanId`: list of WLAN IDs
        /// 
        /// **Notes**:
        /// Variables are not allowed
        /// </summary>
        public readonly ImmutableArray<string> Values;
        public readonly string VlanId;

        [OutputConstructor]
        private GetWxtagsOrgWxtagResult(
            double createdTime,

            string id,

            ImmutableArray<string> lastIps,

            string mac,

            string match,

            double modifiedTime,

            string name,

            string op,

            string orgId,

            string resourceMac,

            ImmutableArray<string> services,

            string siteId,

            ImmutableArray<Outputs.GetWxtagsOrgWxtagSpecResult> specs,

            string subnet,

            string type,

            ImmutableArray<string> values,

            string vlanId)
        {
            CreatedTime = createdTime;
            Id = id;
            LastIps = lastIps;
            Mac = mac;
            Match = match;
            ModifiedTime = modifiedTime;
            Name = name;
            Op = op;
            OrgId = orgId;
            ResourceMac = resourceMac;
            Services = services;
            SiteId = siteId;
            Specs = specs;
            Subnet = subnet;
            Type = type;
            Values = values;
            VlanId = vlanId;
        }
    }
}
