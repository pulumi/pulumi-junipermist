// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GetWlansOrgWlanAuthResult
    {
        /// <summary>
        /// SAE anti-clogging token threshold
        /// </summary>
        public readonly int AnticlogThreshold;
        /// <summary>
        /// Whether to trigger EAP reauth when the session ends
        /// </summary>
        public readonly bool EapReauth;
        /// <summary>
        /// Whether to enable MAC Auth, uses the same auth_servers
        /// </summary>
        public readonly bool EnableMacAuth;
        /// <summary>
        /// When `Type`==`Wep`
        /// </summary>
        public readonly int KeyIdx;
        /// <summary>
        /// When type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        /// </summary>
        public readonly ImmutableArray<string> Keys;
        /// <summary>
        /// When `Type`==`Psk`, whether to only use multi_psk
        /// </summary>
        public readonly bool MultiPskOnly;
        /// <summary>
        /// if `Type`==`Open`. enum: `Disabled`, `Enabled` (means transition mode), `Required`
        /// </summary>
        public readonly string Owe;
        /// <summary>
        /// When `Type`=`Psk` or `Type`=`Eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `Wpa3`
        /// </summary>
        public readonly ImmutableArray<string> Pairwises;
        /// <summary>
        /// When `MultiPskOnly`==`True`, whether private wlan is enabled
        /// </summary>
        public readonly bool PrivateWlan;
        /// <summary>
        /// When `Type`==`Psk`, 8-64 characters, or 64 hex characters
        /// </summary>
        public readonly string Psk;
        /// <summary>
        /// enum: `Eap`, `Eap192`, `Open`, `Psk`, `psk-tkip`, `psk-wpa2-tkip`, `Wep`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Enable WEP as secondary auth
        /// </summary>
        public readonly bool WepAsSecondaryAuth;

        [OutputConstructor]
        private GetWlansOrgWlanAuthResult(
            int anticlogThreshold,

            bool eapReauth,

            bool enableMacAuth,

            int keyIdx,

            ImmutableArray<string> keys,

            bool multiPskOnly,

            string owe,

            ImmutableArray<string> pairwises,

            bool privateWlan,

            string psk,

            string type,

            bool wepAsSecondaryAuth)
        {
            AnticlogThreshold = anticlogThreshold;
            EapReauth = eapReauth;
            EnableMacAuth = enableMacAuth;
            KeyIdx = keyIdx;
            Keys = keys;
            MultiPskOnly = multiPskOnly;
            Owe = owe;
            Pairwises = pairwises;
            PrivateWlan = privateWlan;
            Psk = psk;
            Type = type;
            WepAsSecondaryAuth = wepAsSecondaryAuth;
        }
    }
}
