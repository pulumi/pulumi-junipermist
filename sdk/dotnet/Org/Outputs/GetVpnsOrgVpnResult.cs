// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class GetVpnsOrgVpnResult
    {
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        public readonly string Name;
        public readonly string OrgId;
        /// <summary>
        /// Only if `Type`==`HubSpoke`
        /// </summary>
        public readonly Outputs.GetVpnsOrgVpnPathSelectionResult PathSelection;
        /// <summary>
        /// For `Type`==`HubSpoke`, Property key is the VPN name. For `Type`==`Mesh`, Property key is the Interface name
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetVpnsOrgVpnPathsResult> Paths;
        /// <summary>
        /// enum: `HubSpoke`, `Mesh`
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetVpnsOrgVpnResult(
            double createdTime,

            string id,

            double modifiedTime,

            string name,

            string orgId,

            Outputs.GetVpnsOrgVpnPathSelectionResult pathSelection,

            ImmutableDictionary<string, Outputs.GetVpnsOrgVpnPathsResult> paths,

            string type)
        {
            CreatedTime = createdTime;
            Id = id;
            ModifiedTime = modifiedTime;
            Name = name;
            OrgId = orgId;
            PathSelection = pathSelection;
            Paths = paths;
            Type = type;
        }
    }
}
