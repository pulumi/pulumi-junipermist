// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class NetworktemplateAclTags
    {
        /// <summary>
        /// Can only be used under dst tags.
        /// </summary>
        public readonly ImmutableArray<string> EtherTypes;
        /// <summary>
        /// Required if
        ///   - `Type`==`DynamicGbp` (gbp_tag received from RADIUS)
        ///   - `Type`==`GbpResource`
        ///   - `Type`==`StaticGbp` (applying gbp tag against matching conditions)
        /// </summary>
        public readonly int? GbpTag;
        /// <summary>
        /// Required if 
        /// - `Type`==`Mac`
        /// - `Type`==`StaticGbp` if from matching mac
        /// </summary>
        public readonly ImmutableArray<string> Macs;
        /// <summary>
        /// If:
        ///   * `Type`==`Mac` (optional. default is `Any`)
        ///   * `Type`==`Subnet` (optional. default is `Any`)
        ///   * `Type`==`Network`
        ///   * `Type`==`Resource` (optional. default is `Any`)
        ///   * `Type`==`StaticGbp` if from matching network (vlan)
        /// </summary>
        public readonly string? Network;
        /// <summary>
        /// Required if `Type`==`PortUsage`
        /// </summary>
        public readonly string? PortUsage;
        /// <summary>
        /// Required if:
        ///   * `Type`==`RadiusGroup`
        ///   * `Type`==`StaticGbp`
        /// if from matching radius_group
        /// </summary>
        public readonly string? RadiusGroup;
        /// <summary>
        /// If `Type`==`Resource`, `Type`==`RadiusGroup`, `Type`==`PortUsage` or `Type`==`GbpResource`. Empty means unrestricted, i.e. any
        /// </summary>
        public readonly ImmutableArray<Outputs.NetworktemplateAclTagsSpec> Specs;
        /// <summary>
        /// If 
        /// - `Type`==`Subnet` 
        /// - `Type`==`Resource` (optional. default is `Any`)
        /// - `Type`==`StaticGbp` if from matching subnet
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// enum: 
        ///   * `Any`: matching anything not identified
        ///   * `DynamicGbp`: from the GbpTag received from RADIUS
        ///   * `GbpResource`: can only be used in `DstTags`
        ///   * `Mac`
        ///   * `Network`
        ///   * `PortUsage`
        ///   * `RadiusGroup`
        ///   * `Resource`: can only be used in `DstTags`
        ///   * `StaticGbp`: applying gbp tag against matching conditions
        ///   * `Subnet`'
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private NetworktemplateAclTags(
            ImmutableArray<string> etherTypes,

            int? gbpTag,

            ImmutableArray<string> macs,

            string? network,

            string? portUsage,

            string? radiusGroup,

            ImmutableArray<Outputs.NetworktemplateAclTagsSpec> specs,

            ImmutableArray<string> subnets,

            string type)
        {
            EtherTypes = etherTypes;
            GbpTag = gbpTag;
            Macs = macs;
            Network = network;
            PortUsage = portUsage;
            RadiusGroup = radiusGroup;
            Specs = specs;
            Subnets = subnets;
            Type = type;
        }
    }
}
