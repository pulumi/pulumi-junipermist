// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Outputs
{

    [OutputType]
    public sealed class DeviceprofileApPortConfig
    {
        public readonly bool? Disabled;
        /// <summary>
        /// Optional dynamic vlan
        /// </summary>
        public readonly Outputs.DeviceprofileApPortConfigDynamicVlan? DynamicVlan;
        public readonly bool? EnableMacAuth;
        /// <summary>
        /// enum: 
        ///   * `all`: local breakout, All VLANs
        ///   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
        ///   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
        ///   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
        ///   * `wxtunnel`': central breakout to an Org WxTunnel (requires `wxtunnel_id`)
        /// </summary>
        public readonly string? Forwarding;
        /// <summary>
        /// When `true`, we'll do dot1x then mac_auth. enable this to prefer mac_auth
        /// </summary>
        public readonly bool? MacAuthPreferred;
        /// <summary>
        /// if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
        /// </summary>
        public readonly string? MacAuthProtocol;
        public readonly Outputs.DeviceprofileApPortConfigMistNac? MistNac;
        /// <summary>
        /// If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
        /// </summary>
        public readonly string? MxTunnelId;
        /// <summary>
        /// If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
        /// </summary>
        public readonly string? MxtunnelName;
        /// <summary>
        /// When doing port auth. enum: `dot1x`, `none`
        /// </summary>
        public readonly string? PortAuth;
        /// <summary>
        /// If `forwarding`==`limited`
        /// </summary>
        public readonly int? PortVlanId;
        /// <summary>
        /// Junos Radius config
        /// </summary>
        public readonly Outputs.DeviceprofileApPortConfigRadiusConfig? RadiusConfig;
        /// <summary>
        /// RadSec settings
        /// </summary>
        public readonly Outputs.DeviceprofileApPortConfigRadsec? Radsec;
        /// <summary>
        /// Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
        ///   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
        ///   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
        /// </summary>
        public readonly int? VlanId;
        /// <summary>
        /// If `forwarding`==`limited`
        /// </summary>
        public readonly ImmutableArray<int> VlanIds;
        /// <summary>
        /// If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        public readonly string? WxtunnelId;
        /// <summary>
        /// If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        public readonly string? WxtunnelRemoteId;

        [OutputConstructor]
        private DeviceprofileApPortConfig(
            bool? disabled,

            Outputs.DeviceprofileApPortConfigDynamicVlan? dynamicVlan,

            bool? enableMacAuth,

            string? forwarding,

            bool? macAuthPreferred,

            string? macAuthProtocol,

            Outputs.DeviceprofileApPortConfigMistNac? mistNac,

            string? mxTunnelId,

            string? mxtunnelName,

            string? portAuth,

            int? portVlanId,

            Outputs.DeviceprofileApPortConfigRadiusConfig? radiusConfig,

            Outputs.DeviceprofileApPortConfigRadsec? radsec,

            int? vlanId,

            ImmutableArray<int> vlanIds,

            string? wxtunnelId,

            string? wxtunnelRemoteId)
        {
            Disabled = disabled;
            DynamicVlan = dynamicVlan;
            EnableMacAuth = enableMacAuth;
            Forwarding = forwarding;
            MacAuthPreferred = macAuthPreferred;
            MacAuthProtocol = macAuthProtocol;
            MistNac = mistNac;
            MxTunnelId = mxTunnelId;
            MxtunnelName = mxtunnelName;
            PortAuth = portAuth;
            PortVlanId = portVlanId;
            RadiusConfig = radiusConfig;
            Radsec = radsec;
            VlanId = vlanId;
            VlanIds = vlanIds;
            WxtunnelId = wxtunnelId;
            WxtunnelRemoteId = wxtunnelRemoteId;
        }
    }
}
