// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages Org Webhooks.
    /// 
    /// A Webhook is a configuration that allows real-time events and data from the Org to be pushed to a provided url.\
    /// It enables the collection of information about various topics such as device events, alarms, and audits updates at the org level.\
    /// The Webhook can be set up and customized using the Mist API, allowing users to receive and analyze specific data from a particular site.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_webhook` with:
    /// 
    /// Org Webhook can be imported by specifying the org_id and the webhook_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/webhook:Webhook webhook_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/webhook:Webhook")]
    public partial class Webhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether webhook is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
        /// </summary>
        [Output("headers")]
        public Output<ImmutableDictionary<string, string>?> Headers { get; private set; } = null!;

        /// <summary>
        /// Name of the webhook
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        [Output("oauth2ClientId")]
        public Output<string?> Oauth2ClientId { get; private set; } = null!;

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        [Output("oauth2ClientSecret")]
        public Output<string?> Oauth2ClientSecret { get; private set; } = null!;

        /// <summary>
        /// required when `type`==`oauth2`. enum: `client_credentials`, `password`
        /// </summary>
        [Output("oauth2GrantType")]
        public Output<string?> Oauth2GrantType { get; private set; } = null!;

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        [Output("oauth2Password")]
        public Output<string?> Oauth2Password { get; private set; } = null!;

        /// <summary>
        /// Required when `type`==`oauth2`, if provided, will be used in the token request
        /// </summary>
        [Output("oauth2Scopes")]
        public Output<ImmutableArray<string>> Oauth2Scopes { get; private set; } = null!;

        /// <summary>
        /// Required when `type`==`oauth2`
        /// </summary>
        [Output("oauth2TokenUrl")]
        public Output<string?> Oauth2TokenUrl { get; private set; } = null!;

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        [Output("oauth2Username")]
        public Output<string?> Oauth2Username { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Only if `type`=`http-post`
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        /// <summary>
        /// Some solutions may not be able to parse multiple events from a single message (e.g. IBM Qradar, DSM). When set to
        /// `true`, only a single event will be sent per message. this feature is only available on certain topics (see List Webhook
        /// Topics)
        /// </summary>
        [Output("singleEventPerMessage")]
        public Output<bool?> SingleEventPerMessage { get; private set; } = null!;

        /// <summary>
        /// Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        /// the webhook receiver is configured to accept it.
        /// </summary>
        [Output("splunkToken")]
        public Output<string?> SplunkToken { get; private set; } = null!;

        /// <summary>
        /// enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-events`, `device-updowns`, `guest-authorizations`, `mxedge-events`, `nac-accounting`, `nac-events`
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<string>> Topics { get; private set; } = null!;

        /// <summary>
        /// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// When url uses HTTPS, whether to verify the certificate
        /// </summary>
        [Output("verifyCert")]
        public Output<bool> VerifyCert { get; private set; } = null!;


        /// <summary>
        /// Create a Webhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Webhook(string name, WebhookArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/webhook:Webhook", name, args ?? new WebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Webhook(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/webhook:Webhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
                AdditionalSecretOutputs =
                {
                    "oauth2ClientSecret",
                    "oauth2Password",
                    "secret",
                    "splunkToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Webhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Webhook Get(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new Webhook(name, id, state, options);
        }
    }

    public sealed class WebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether webhook is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        /// <summary>
        /// Name of the webhook
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        [Input("oauth2ClientId")]
        public Input<string>? Oauth2ClientId { get; set; }

        [Input("oauth2ClientSecret")]
        private Input<string>? _oauth2ClientSecret;

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        public Input<string>? Oauth2ClientSecret
        {
            get => _oauth2ClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2ClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// required when `type`==`oauth2`. enum: `client_credentials`, `password`
        /// </summary>
        [Input("oauth2GrantType")]
        public Input<string>? Oauth2GrantType { get; set; }

        [Input("oauth2Password")]
        private Input<string>? _oauth2Password;

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        public Input<string>? Oauth2Password
        {
            get => _oauth2Password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2Password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oauth2Scopes")]
        private InputList<string>? _oauth2Scopes;

        /// <summary>
        /// Required when `type`==`oauth2`, if provided, will be used in the token request
        /// </summary>
        public InputList<string> Oauth2Scopes
        {
            get => _oauth2Scopes ?? (_oauth2Scopes = new InputList<string>());
            set => _oauth2Scopes = value;
        }

        /// <summary>
        /// Required when `type`==`oauth2`
        /// </summary>
        [Input("oauth2TokenUrl")]
        public Input<string>? Oauth2TokenUrl { get; set; }

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        [Input("oauth2Username")]
        public Input<string>? Oauth2Username { get; set; }

        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Only if `type`=`http-post`
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Some solutions may not be able to parse multiple events from a single message (e.g. IBM Qradar, DSM). When set to
        /// `true`, only a single event will be sent per message. this feature is only available on certain topics (see List Webhook
        /// Topics)
        /// </summary>
        [Input("singleEventPerMessage")]
        public Input<bool>? SingleEventPerMessage { get; set; }

        [Input("splunkToken")]
        private Input<string>? _splunkToken;

        /// <summary>
        /// Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        /// the webhook receiver is configured to accept it.
        /// </summary>
        public Input<string>? SplunkToken
        {
            get => _splunkToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _splunkToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("topics", required: true)]
        private InputList<string>? _topics;

        /// <summary>
        /// enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-events`, `device-updowns`, `guest-authorizations`, `mxedge-events`, `nac-accounting`, `nac-events`
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// When url uses HTTPS, whether to verify the certificate
        /// </summary>
        [Input("verifyCert")]
        public Input<bool>? VerifyCert { get; set; }

        public WebhookArgs()
        {
        }
        public static new WebhookArgs Empty => new WebhookArgs();
    }

    public sealed class WebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether webhook is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        /// <summary>
        /// Name of the webhook
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        [Input("oauth2ClientId")]
        public Input<string>? Oauth2ClientId { get; set; }

        [Input("oauth2ClientSecret")]
        private Input<string>? _oauth2ClientSecret;

        /// <summary>
        /// Required when `oauth2_grant_type`==`client_credentials`
        /// </summary>
        public Input<string>? Oauth2ClientSecret
        {
            get => _oauth2ClientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2ClientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// required when `type`==`oauth2`. enum: `client_credentials`, `password`
        /// </summary>
        [Input("oauth2GrantType")]
        public Input<string>? Oauth2GrantType { get; set; }

        [Input("oauth2Password")]
        private Input<string>? _oauth2Password;

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        public Input<string>? Oauth2Password
        {
            get => _oauth2Password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2Password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oauth2Scopes")]
        private InputList<string>? _oauth2Scopes;

        /// <summary>
        /// Required when `type`==`oauth2`, if provided, will be used in the token request
        /// </summary>
        public InputList<string> Oauth2Scopes
        {
            get => _oauth2Scopes ?? (_oauth2Scopes = new InputList<string>());
            set => _oauth2Scopes = value;
        }

        /// <summary>
        /// Required when `type`==`oauth2`
        /// </summary>
        [Input("oauth2TokenUrl")]
        public Input<string>? Oauth2TokenUrl { get; set; }

        /// <summary>
        /// Required when `oauth2_grant_type`==`password`
        /// </summary>
        [Input("oauth2Username")]
        public Input<string>? Oauth2Username { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Only if `type`=`http-post`
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Some solutions may not be able to parse multiple events from a single message (e.g. IBM Qradar, DSM). When set to
        /// `true`, only a single event will be sent per message. this feature is only available on certain topics (see List Webhook
        /// Topics)
        /// </summary>
        [Input("singleEventPerMessage")]
        public Input<bool>? SingleEventPerMessage { get; set; }

        [Input("splunkToken")]
        private Input<string>? _splunkToken;

        /// <summary>
        /// Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        /// the webhook receiver is configured to accept it.
        /// </summary>
        public Input<string>? SplunkToken
        {
            get => _splunkToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _splunkToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-events`, `device-updowns`, `guest-authorizations`, `mxedge-events`, `nac-accounting`, `nac-events`
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// When url uses HTTPS, whether to verify the certificate
        /// </summary>
        [Input("verifyCert")]
        public Input<bool>? VerifyCert { get; set; }

        public WebhookState()
        {
        }
        public static new WebhookState Empty => new WebhookState();
    }
}
