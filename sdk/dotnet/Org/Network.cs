// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages the WAN Assurance Networks.
    /// 
    /// The Networks are used in the `service_policies` from the Gateway configuration, Gateway templates or HUB Profiles
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var networkOne = new JuniperMist.Org.Network("network_one", new()
    ///     {
    ///         OrgId = terraformTest.Id,
    ///         Name = "network_one",
    ///         Subnet = "10.4.0.0/24",
    ///         DisallowMistServices = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_network` with:
    /// 
    /// Org Network can be imported by specifying the org_id and the network_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/network:Network network_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/network:Network")]
    public partial class Network : global::Pulumi.CustomResource
    {
        /// <summary>
        /// whether to disallow Mist Devices in the network
        /// </summary>
        [Output("disallowMistServices")]
        public Output<bool> DisallowMistServices { get; private set; } = null!;

        [Output("gateway")]
        public Output<string?> Gateway { get; private set; } = null!;

        [Output("gateway6")]
        public Output<string?> Gateway6 { get; private set; } = null!;

        [Output("internalAccess")]
        public Output<Outputs.NetworkInternalAccess?> InternalAccess { get; private set; } = null!;

        /// <summary>
        /// whether this network has direct internet access
        /// </summary>
        [Output("internetAccess")]
        public Output<Outputs.NetworkInternetAccess?> InternetAccess { get; private set; } = null!;

        /// <summary>
        /// whether to allow clients in the network to talk to each other
        /// </summary>
        [Output("isolation")]
        public Output<bool?> Isolation { get; private set; } = null!;

        /// <summary>
        /// whether to enable multicast support (only PIM-sparse mode is supported)
        /// </summary>
        [Output("multicast")]
        public Output<Outputs.NetworkMulticast?> Multicast { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        /// </summary>
        [Output("routedForNetworks")]
        public Output<ImmutableArray<string>> RoutedForNetworks { get; private set; } = null!;

        [Output("subnet")]
        public Output<string> Subnet { get; private set; } = null!;

        [Output("subnet6")]
        public Output<string?> Subnet6 { get; private set; } = null!;

        /// <summary>
        /// Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
        /// </summary>
        [Output("tenants")]
        public Output<ImmutableDictionary<string, Outputs.NetworkTenants>?> Tenants { get; private set; } = null!;

        [Output("vlanId")]
        public Output<string?> VlanId { get; private set; } = null!;

        /// <summary>
        /// Property key is the VPN name. Whether this network can be accessed from vpn
        /// </summary>
        [Output("vpnAccess")]
        public Output<ImmutableDictionary<string, Outputs.NetworkVpnAccess>?> VpnAccess { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether to disallow Mist Devices in the network
        /// </summary>
        [Input("disallowMistServices")]
        public Input<bool>? DisallowMistServices { get; set; }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("gateway6")]
        public Input<string>? Gateway6 { get; set; }

        [Input("internalAccess")]
        public Input<Inputs.NetworkInternalAccessArgs>? InternalAccess { get; set; }

        /// <summary>
        /// whether this network has direct internet access
        /// </summary>
        [Input("internetAccess")]
        public Input<Inputs.NetworkInternetAccessArgs>? InternetAccess { get; set; }

        /// <summary>
        /// whether to allow clients in the network to talk to each other
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// whether to enable multicast support (only PIM-sparse mode is supported)
        /// </summary>
        [Input("multicast")]
        public Input<Inputs.NetworkMulticastArgs>? Multicast { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("routedForNetworks")]
        private InputList<string>? _routedForNetworks;

        /// <summary>
        /// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        /// </summary>
        public InputList<string> RoutedForNetworks
        {
            get => _routedForNetworks ?? (_routedForNetworks = new InputList<string>());
            set => _routedForNetworks = value;
        }

        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        [Input("subnet6")]
        public Input<string>? Subnet6 { get; set; }

        [Input("tenants")]
        private InputMap<Inputs.NetworkTenantsArgs>? _tenants;

        /// <summary>
        /// Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
        /// </summary>
        public InputMap<Inputs.NetworkTenantsArgs> Tenants
        {
            get => _tenants ?? (_tenants = new InputMap<Inputs.NetworkTenantsArgs>());
            set => _tenants = value;
        }

        [Input("vlanId")]
        public Input<string>? VlanId { get; set; }

        [Input("vpnAccess")]
        private InputMap<Inputs.NetworkVpnAccessArgs>? _vpnAccess;

        /// <summary>
        /// Property key is the VPN name. Whether this network can be accessed from vpn
        /// </summary>
        public InputMap<Inputs.NetworkVpnAccessArgs> VpnAccess
        {
            get => _vpnAccess ?? (_vpnAccess = new InputMap<Inputs.NetworkVpnAccessArgs>());
            set => _vpnAccess = value;
        }

        public NetworkArgs()
        {
        }
        public static new NetworkArgs Empty => new NetworkArgs();
    }

    public sealed class NetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether to disallow Mist Devices in the network
        /// </summary>
        [Input("disallowMistServices")]
        public Input<bool>? DisallowMistServices { get; set; }

        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("gateway6")]
        public Input<string>? Gateway6 { get; set; }

        [Input("internalAccess")]
        public Input<Inputs.NetworkInternalAccessGetArgs>? InternalAccess { get; set; }

        /// <summary>
        /// whether this network has direct internet access
        /// </summary>
        [Input("internetAccess")]
        public Input<Inputs.NetworkInternetAccessGetArgs>? InternetAccess { get; set; }

        /// <summary>
        /// whether to allow clients in the network to talk to each other
        /// </summary>
        [Input("isolation")]
        public Input<bool>? Isolation { get; set; }

        /// <summary>
        /// whether to enable multicast support (only PIM-sparse mode is supported)
        /// </summary>
        [Input("multicast")]
        public Input<Inputs.NetworkMulticastGetArgs>? Multicast { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("routedForNetworks")]
        private InputList<string>? _routedForNetworks;

        /// <summary>
        /// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        /// </summary>
        public InputList<string> RoutedForNetworks
        {
            get => _routedForNetworks ?? (_routedForNetworks = new InputList<string>());
            set => _routedForNetworks = value;
        }

        [Input("subnet")]
        public Input<string>? Subnet { get; set; }

        [Input("subnet6")]
        public Input<string>? Subnet6 { get; set; }

        [Input("tenants")]
        private InputMap<Inputs.NetworkTenantsGetArgs>? _tenants;

        /// <summary>
        /// Property key must be the user/tenant name (i.e. "printer-1") or a Variable (i.e. "{{myvar}}")
        /// </summary>
        public InputMap<Inputs.NetworkTenantsGetArgs> Tenants
        {
            get => _tenants ?? (_tenants = new InputMap<Inputs.NetworkTenantsGetArgs>());
            set => _tenants = value;
        }

        [Input("vlanId")]
        public Input<string>? VlanId { get; set; }

        [Input("vpnAccess")]
        private InputMap<Inputs.NetworkVpnAccessGetArgs>? _vpnAccess;

        /// <summary>
        /// Property key is the VPN name. Whether this network can be accessed from vpn
        /// </summary>
        public InputMap<Inputs.NetworkVpnAccessGetArgs> VpnAccess
        {
            get => _vpnAccess ?? (_vpnAccess = new InputMap<Inputs.NetworkVpnAccessGetArgs>());
            set => _vpnAccess = value;
        }

        public NetworkState()
        {
        }
        public static new NetworkState Empty => new NetworkState();
    }
}
