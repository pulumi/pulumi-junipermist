// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    public static class GetWxtags
    {
        /// <summary>
        /// This resource provides the list of Org WxLan tags (labels).A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var switchStats = JuniperMist.Device.GetSwitchStats.Invoke(new()
        ///     {
        ///         OrgId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWxtagsResult> InvokeAsync(GetWxtagsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWxtagsResult>("junipermist:org/getWxtags:getWxtags", args ?? new GetWxtagsArgs(), options.WithDefaults());

        /// <summary>
        /// This resource provides the list of Org WxLan tags (labels).A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var switchStats = JuniperMist.Device.GetSwitchStats.Invoke(new()
        ///     {
        ///         OrgId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWxtagsResult> Invoke(GetWxtagsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWxtagsResult>("junipermist:org/getWxtags:getWxtags", args ?? new GetWxtagsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWxtagsArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetWxtagsArgs()
        {
        }
        public static new GetWxtagsArgs Empty => new GetWxtagsArgs();
    }

    public sealed class GetWxtagsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetWxtagsInvokeArgs()
        {
        }
        public static new GetWxtagsInvokeArgs Empty => new GetWxtagsInvokeArgs();
    }


    [OutputType]
    public sealed class GetWxtagsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrgId;
        public readonly ImmutableArray<Outputs.GetWxtagsOrgWxtagResult> OrgWxtags;

        [OutputConstructor]
        private GetWxtagsResult(
            string id,

            string orgId,

            ImmutableArray<Outputs.GetWxtagsOrgWxtagResult> orgWxtags)
        {
            Id = id;
            OrgId = orgId;
            OrgWxtags = orgWxtags;
        }
    }
}
