// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    public static class GetDeviceprofilesAp
    {
        /// <summary>
        /// This data source provides the list of AP Device Profiles.
        /// 
        /// AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var deviceprofile = JuniperMist.Org.GetDeviceprofilesAp.Invoke(new()
        ///     {
        ///         OrgId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDeviceprofilesApResult> InvokeAsync(GetDeviceprofilesApArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDeviceprofilesApResult>("junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp", args ?? new GetDeviceprofilesApArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of AP Device Profiles.
        /// 
        /// AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var deviceprofile = JuniperMist.Org.GetDeviceprofilesAp.Invoke(new()
        ///     {
        ///         OrgId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeviceprofilesApResult> Invoke(GetDeviceprofilesApInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceprofilesApResult>("junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp", args ?? new GetDeviceprofilesApInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides the list of AP Device Profiles.
        /// 
        /// AP Device profiles are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They are providing efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.
        /// 
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using JuniperMist = Pulumi.JuniperMist;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var deviceprofile = JuniperMist.Org.GetDeviceprofilesAp.Invoke(new()
        ///     {
        ///         OrgId = "15fca2ac-b1a6-47cc-9953-cc6906281550",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDeviceprofilesApResult> Invoke(GetDeviceprofilesApInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDeviceprofilesApResult>("junipermist:org/getDeviceprofilesAp:getDeviceprofilesAp", args ?? new GetDeviceprofilesApInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceprofilesApArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        public GetDeviceprofilesApArgs()
        {
        }
        public static new GetDeviceprofilesApArgs Empty => new GetDeviceprofilesApArgs();
    }

    public sealed class GetDeviceprofilesApInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        public GetDeviceprofilesApInvokeArgs()
        {
        }
        public static new GetDeviceprofilesApInvokeArgs Empty => new GetDeviceprofilesApInvokeArgs();
    }


    [OutputType]
    public sealed class GetDeviceprofilesApResult
    {
        public readonly ImmutableArray<Outputs.GetDeviceprofilesApDeviceprofileResult> Deviceprofiles;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OrgId;

        [OutputConstructor]
        private GetDeviceprofilesApResult(
            ImmutableArray<Outputs.GetDeviceprofilesApDeviceprofileResult> deviceprofiles,

            string id,

            string orgId)
        {
            Deviceprofiles = deviceprofiles;
            Id = id;
            OrgId = orgId;
        }
    }
}
