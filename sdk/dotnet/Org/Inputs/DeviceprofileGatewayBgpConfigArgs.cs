// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Inputs
{

    public sealed class DeviceprofileGatewayBgpConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`
        /// </summary>
        [Input("authKey")]
        public Input<string>? AuthKey { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`, when BfdMultiplier is configured alone. Default:
        ///   * 1000 if `Type`==`External`
        ///   * 350 `Type`==`Internal`
        /// </summary>
        [Input("bfdMinimumInterval")]
        public Input<int>? BfdMinimumInterval { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`, when BfdMinimumIntervalIsConfigured alone
        /// </summary>
        [Input("bfdMultiplier")]
        public Input<int>? BfdMultiplier { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. BFD provides faster path failure detection and is enabled by default
        /// </summary>
        [Input("disableBfd")]
        public Input<bool>? DisableBfd { get; set; }

        [Input("export")]
        public Input<string>? Export { get; set; }

        /// <summary>
        /// Default export policies if no per-neighbor policies defined
        /// </summary>
        [Input("exportPolicy")]
        public Input<string>? ExportPolicy { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. By default, either inet/net6 unicast depending on neighbor IP family (v4 or v6). For v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        /// </summary>
        [Input("extendedV4Nexthop")]
        public Input<bool>? ExtendedV4Nexthop { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. `0` means disable
        /// </summary>
        [Input("gracefulRestartTime")]
        public Input<int>? GracefulRestartTime { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. Default is 90.
        /// </summary>
        [Input("holdTime")]
        public Input<int>? HoldTime { get; set; }

        [Input("import")]
        public Input<string>? Import { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. Default import policies if no per-neighbor policies defined
        /// </summary>
        [Input("importPolicy")]
        public Input<string>? ImportPolicy { get; set; }

        /// <summary>
        /// Required if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. BGPLocal AS. Value must be in range 1-4294967295 or a variable (e.g. `{{as_variable}}`)
        /// </summary>
        [Input("localAs")]
        public Input<string>? LocalAs { get; set; }

        /// <summary>
        /// Neighbor AS. If `Type`==`Internal`, must be equal to `LocalAs`. Value must be in range 1-4294967295 or a variable (e.g. `{{as_variable}}`)
        /// </summary>
        [Input("neighborAs")]
        public Input<string>? NeighborAs { get; set; }

        [Input("neighbors")]
        private InputMap<Inputs.DeviceprofileGatewayBgpConfigNeighborsArgs>? _neighbors;

        /// <summary>
        /// Required if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. If per-neighbor as is desired. Property key is the neighbor address
        /// </summary>
        public InputMap<Inputs.DeviceprofileGatewayBgpConfigNeighborsArgs> Neighbors
        {
            get => _neighbors ?? (_neighbors = new InputMap<Inputs.DeviceprofileGatewayBgpConfigNeighborsArgs>());
            set => _neighbors = value;
        }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// Optional if `Via`==`Lan`. List of networks where we expect BGP neighbor to connect to/from
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. If true, we will not advertise private ASNs (AS 64512-65534) to this neighbor
        /// </summary>
        [Input("noPrivateAs")]
        public Input<bool>? NoPrivateAs { get; set; }

        /// <summary>
        /// Optional if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. By default, we'll re-advertise all learned BGP routers toward overlay
        /// </summary>
        [Input("noReadvertiseToOverlay")]
        public Input<bool>? NoReadvertiseToOverlay { get; set; }

        /// <summary>
        /// Optional if `Via`==`Tunnel`
        /// </summary>
        [Input("tunnelName")]
        public Input<string>? TunnelName { get; set; }

        /// <summary>
        /// Required if `Via`==`Lan`, `Via`==`Tunnel` or `Via`==`Wan`. enum: `External`, `Internal`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// enum: `Lan`, `Tunnel`, `Vpn`, `Wan`
        /// </summary>
        [Input("via", required: true)]
        public Input<string> Via { get; set; } = null!;

        /// <summary>
        /// Optional if `Via`==`Vpn`
        /// </summary>
        [Input("vpnName")]
        public Input<string>? VpnName { get; set; }

        /// <summary>
        /// Optional if `Via`==`Wan`
        /// </summary>
        [Input("wanName")]
        public Input<string>? WanName { get; set; }

        public DeviceprofileGatewayBgpConfigArgs()
        {
        }
        public static new DeviceprofileGatewayBgpConfigArgs Empty => new DeviceprofileGatewayBgpConfigArgs();
    }
}
