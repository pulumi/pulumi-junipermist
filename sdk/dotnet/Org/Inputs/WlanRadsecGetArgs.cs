// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Inputs
{

    public sealed class WlanRadsecGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("coaEnabled")]
        public Input<bool>? CoaEnabled { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        [Input("mxclusterIds")]
        private InputList<string>? _mxclusterIds;

        /// <summary>
        /// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
        /// </summary>
        public InputList<string> MxclusterIds
        {
            get => _mxclusterIds ?? (_mxclusterIds = new InputList<string>());
            set => _mxclusterIds = value;
        }

        [Input("proxyHosts")]
        private InputList<string>? _proxyHosts;

        /// <summary>
        /// default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `use_site_mxedge`
        /// </summary>
        public InputList<string> ProxyHosts
        {
            get => _proxyHosts ?? (_proxyHosts = new InputList<string>());
            set => _proxyHosts = value;
        }

        /// <summary>
        /// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        [Input("servers")]
        private InputList<Inputs.WlanRadsecServerGetArgs>? _servers;

        /// <summary>
        /// List of Radsec Servers. Only if not Mist Edge.
        /// </summary>
        public InputList<Inputs.WlanRadsecServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.WlanRadsecServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// use mxedge(s) as radsecproxy
        /// </summary>
        [Input("useMxedge")]
        public Input<bool>? UseMxedge { get; set; }

        /// <summary>
        /// To use Site mxedges when this WLAN does not use mxtunnel
        /// </summary>
        [Input("useSiteMxedge")]
        public Input<bool>? UseSiteMxedge { get; set; }

        public WlanRadsecGetArgs()
        {
        }
        public static new WlanRadsecGetArgs Empty => new WlanRadsecGetArgs();
    }
}
