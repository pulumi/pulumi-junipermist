// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org.Inputs
{

    public sealed class NetworktemplateAclTagsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("etherTypes")]
        private InputList<string>? _etherTypes;

        /// <summary>
        /// Can only be used under dst tags.
        /// </summary>
        public InputList<string> EtherTypes
        {
            get => _etherTypes ?? (_etherTypes = new InputList<string>());
            set => _etherTypes = value;
        }

        /// <summary>
        /// Required if
        ///   - `Type`==`DynamicGbp` (gbp_tag received from RADIUS)
        ///   - `Type`==`GbpResource`
        ///   - `Type`==`StaticGbp` (applying gbp tag against matching conditions)
        /// </summary>
        [Input("gbpTag")]
        public Input<int>? GbpTag { get; set; }

        [Input("macs")]
        private InputList<string>? _macs;

        /// <summary>
        /// Required if 
        /// - `Type`==`Mac`
        /// - `Type`==`StaticGbp` if from matching mac
        /// </summary>
        public InputList<string> Macs
        {
            get => _macs ?? (_macs = new InputList<string>());
            set => _macs = value;
        }

        /// <summary>
        /// If:
        ///   * `Type`==`Mac` (optional. default is `Any`)
        ///   * `Type`==`Subnet` (optional. default is `Any`)
        ///   * `Type`==`Network`
        ///   * `Type`==`Resource` (optional. default is `Any`)
        ///   * `Type`==`StaticGbp` if from matching network (vlan)
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// Required if `Type`==`PortUsage`
        /// </summary>
        [Input("portUsage")]
        public Input<string>? PortUsage { get; set; }

        /// <summary>
        /// Required if:
        ///   * `Type`==`RadiusGroup`
        ///   * `Type`==`StaticGbp`
        /// if from matching radius_group
        /// </summary>
        [Input("radiusGroup")]
        public Input<string>? RadiusGroup { get; set; }

        [Input("specs")]
        private InputList<Inputs.NetworktemplateAclTagsSpecGetArgs>? _specs;

        /// <summary>
        /// If `Type`==`Resource`, `Type`==`RadiusGroup`, `Type`==`PortUsage` or `Type`==`GbpResource`. Empty means unrestricted, i.e. any
        /// </summary>
        public InputList<Inputs.NetworktemplateAclTagsSpecGetArgs> Specs
        {
            get => _specs ?? (_specs = new InputList<Inputs.NetworktemplateAclTagsSpecGetArgs>());
            set => _specs = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// If 
        /// - `Type`==`Subnet` 
        /// - `Type`==`Resource` (optional. default is `Any`)
        /// - `Type`==`StaticGbp` if from matching subnet
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// enum: 
        ///   * `Any`: matching anything not identified
        ///   * `DynamicGbp`: from the GbpTag received from RADIUS
        ///   * `GbpResource`: can only be used in `DstTags`
        ///   * `Mac`
        ///   * `Network`
        ///   * `PortUsage`
        ///   * `RadiusGroup`
        ///   * `Resource`: can only be used in `DstTags`
        ///   * `StaticGbp`: applying gbp tag against matching conditions
        ///   * `Subnet`'
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public NetworktemplateAclTagsGetArgs()
        {
        }
        public static new NetworktemplateAclTagsGetArgs Empty => new NetworktemplateAclTagsGetArgs();
    }
}
