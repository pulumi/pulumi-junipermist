// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages the Org VPN.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var terraformTest = new JuniperMist.Org.Setting("terraform_test", new()
    ///     {
    ///         OrgId = terraformTestMistOrg.Id,
    ///         PasswordPolicy = new JuniperMist.Org.Inputs.SettingPasswordPolicyArgs
    ///         {
    ///             Enabled = true,
    ///             Min_length = 8,
    ///             Requires_special_char = true,
    ///             Requires_two_factor_auth = true,
    ///         },
    ///         MistNac = new JuniperMist.Org.Inputs.SettingMistNacArgs
    ///         {
    ///             Eu_only = true,
    ///         },
    ///         SyntheticTest = new JuniperMist.Org.Inputs.SettingSyntheticTestArgs
    ///         {
    ///             Disabled = false,
    ///             Vlans = new[]
    ///             {
    ///                 new JuniperMist.Org.Inputs.SettingSyntheticTestVlanArgs
    ///                 {
    ///                     VlanIds = new[]
    ///                     {
    ///                         "8",
    ///                         "999",
    ///                     },
    ///                     Disabled = true,
    ///                 },
    ///             },
    ///         },
    ///         ApiPolicy = new JuniperMist.Org.Inputs.SettingApiPolicyArgs
    ///         {
    ///             No_reveal = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_vpn` with:
    /// 
    /// Org VPN can be imported by specifying the org_id and the vpn_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/vpn:Vpn vpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/vpn:Vpn")]
    public partial class Vpn : global::Pulumi.CustomResource
    {
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Only if `Type`==`HubSpoke`
        /// </summary>
        [Output("pathSelection")]
        public Output<Outputs.VpnPathSelection?> PathSelection { get; private set; } = null!;

        /// <summary>
        /// For `Type`==`HubSpoke`, Property key is the VPN name. For `Type`==`Mesh`, Property key is the Interface name
        /// </summary>
        [Output("paths")]
        public Output<ImmutableDictionary<string, Outputs.VpnPaths>> Paths { get; private set; } = null!;

        /// <summary>
        /// enum: `HubSpoke`, `Mesh`
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Vpn resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vpn(string name, VpnArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/vpn:Vpn", name, args ?? new VpnArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vpn(string name, Input<string> id, VpnState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/vpn:Vpn", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vpn resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vpn Get(string name, Input<string> id, VpnState? state = null, CustomResourceOptions? options = null)
        {
            return new Vpn(name, id, state, options);
        }
    }

    public sealed class VpnArgs : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Only if `Type`==`HubSpoke`
        /// </summary>
        [Input("pathSelection")]
        public Input<Inputs.VpnPathSelectionArgs>? PathSelection { get; set; }

        [Input("paths", required: true)]
        private InputMap<Inputs.VpnPathsArgs>? _paths;

        /// <summary>
        /// For `Type`==`HubSpoke`, Property key is the VPN name. For `Type`==`Mesh`, Property key is the Interface name
        /// </summary>
        public InputMap<Inputs.VpnPathsArgs> Paths
        {
            get => _paths ?? (_paths = new InputMap<Inputs.VpnPathsArgs>());
            set => _paths = value;
        }

        /// <summary>
        /// enum: `HubSpoke`, `Mesh`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public VpnArgs()
        {
        }
        public static new VpnArgs Empty => new VpnArgs();
    }

    public sealed class VpnState : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Only if `Type`==`HubSpoke`
        /// </summary>
        [Input("pathSelection")]
        public Input<Inputs.VpnPathSelectionGetArgs>? PathSelection { get; set; }

        [Input("paths")]
        private InputMap<Inputs.VpnPathsGetArgs>? _paths;

        /// <summary>
        /// For `Type`==`HubSpoke`, Property key is the VPN name. For `Type`==`Mesh`, Property key is the Interface name
        /// </summary>
        public InputMap<Inputs.VpnPathsGetArgs> Paths
        {
            get => _paths ?? (_paths = new InputMap<Inputs.VpnPathsGetArgs>());
            set => _paths = value;
        }

        /// <summary>
        /// enum: `HubSpoke`, `Mesh`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public VpnState()
        {
        }
        public static new VpnState Empty => new VpnState();
    }
}
