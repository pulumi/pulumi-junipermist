// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Org
{
    /// <summary>
    /// This resource manages the Org Antivirus Profile.
    /// 
    /// An Antivirus Profile is used to configure the Antivirus feature on SRX devices. It specifies which content the Antivirus should analyse and which content should be ignored.
    /// 
    /// The Antivirus profiles can be used within the following resources:
    ///  * `mist_org_servicepolicy.antivirus`
    ///  * `mist_org_gatewaytemplate.service_policies.antivirus`
    ///  * `mist_org_deviceprofile_gateway.service_policies.antivirus`
    ///  * `mist_device_gateway.service_policies.antivirus`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using JuniperMist = Pulumi.JuniperMist;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var avprofileOne = new JuniperMist.Org.Avprofile("avprofile_one", new()
    ///     {
    ///         OrgId = terraformTest.Id,
    ///         FallbackAction = "block",
    ///         MaxFilesize = 5000,
    ///         MimeWhitelists = new[]
    ///         {
    ///             "image/png",
    ///         },
    ///         Name = "avprofile_one",
    ///         Protocols = new[]
    ///         {
    ///             "ftp",
    ///             "http",
    ///             "imap",
    ///             "pop3",
    ///             "smtp",
    ///         },
    ///         UrlWhitelists = new[]
    ///         {
    ///             "www.google.fr",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `mist_org_avprofile` with:
    /// 
    /// IDP Profile can be imported by specifying the org_id and the avprofile_id
    /// 
    /// ```sh
    /// $ pulumi import junipermist:org/avprofile:Avprofile avprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
    /// ```
    /// </summary>
    [JuniperMistResourceType("junipermist:org/avprofile:Avprofile")]
    public partial class Avprofile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// enum: `block`, `permit`
        /// </summary>
        [Output("fallbackAction")]
        public Output<string?> FallbackAction { get; private set; } = null!;

        /// <summary>
        /// In KB
        /// </summary>
        [Output("maxFilesize")]
        public Output<int> MaxFilesize { get; private set; } = null!;

        [Output("mimeWhitelists")]
        public Output<ImmutableArray<string>> MimeWhitelists { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        [Output("urlWhitelists")]
        public Output<ImmutableArray<string>> UrlWhitelists { get; private set; } = null!;


        /// <summary>
        /// Create a Avprofile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Avprofile(string name, AvprofileArgs args, CustomResourceOptions? options = null)
            : base("junipermist:org/avprofile:Avprofile", name, args ?? new AvprofileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Avprofile(string name, Input<string> id, AvprofileState? state = null, CustomResourceOptions? options = null)
            : base("junipermist:org/avprofile:Avprofile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumi/pulumi-junipermist",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Avprofile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Avprofile Get(string name, Input<string> id, AvprofileState? state = null, CustomResourceOptions? options = null)
        {
            return new Avprofile(name, id, state, options);
        }
    }

    public sealed class AvprofileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// enum: `block`, `permit`
        /// </summary>
        [Input("fallbackAction")]
        public Input<string>? FallbackAction { get; set; }

        /// <summary>
        /// In KB
        /// </summary>
        [Input("maxFilesize")]
        public Input<int>? MaxFilesize { get; set; }

        [Input("mimeWhitelists")]
        private InputList<string>? _mimeWhitelists;
        public InputList<string> MimeWhitelists
        {
            get => _mimeWhitelists ?? (_mimeWhitelists = new InputList<string>());
            set => _mimeWhitelists = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("protocols", required: true)]
        private InputList<string>? _protocols;

        /// <summary>
        /// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("urlWhitelists")]
        private InputList<string>? _urlWhitelists;
        public InputList<string> UrlWhitelists
        {
            get => _urlWhitelists ?? (_urlWhitelists = new InputList<string>());
            set => _urlWhitelists = value;
        }

        public AvprofileArgs()
        {
        }
        public static new AvprofileArgs Empty => new AvprofileArgs();
    }

    public sealed class AvprofileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// enum: `block`, `permit`
        /// </summary>
        [Input("fallbackAction")]
        public Input<string>? FallbackAction { get; set; }

        /// <summary>
        /// In KB
        /// </summary>
        [Input("maxFilesize")]
        public Input<int>? MaxFilesize { get; set; }

        [Input("mimeWhitelists")]
        private InputList<string>? _mimeWhitelists;
        public InputList<string> MimeWhitelists
        {
            get => _mimeWhitelists ?? (_mimeWhitelists = new InputList<string>());
            set => _mimeWhitelists = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("urlWhitelists")]
        private InputList<string>? _urlWhitelists;
        public InputList<string> UrlWhitelists
        {
            get => _urlWhitelists ?? (_urlWhitelists = new InputList<string>());
            set => _urlWhitelists = value;
        }

        public AvprofileState()
        {
        }
        public static new AvprofileState Empty => new AvprofileState();
    }
}
