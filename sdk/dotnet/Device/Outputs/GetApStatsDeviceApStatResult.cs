// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Outputs
{

    [OutputType]
    public sealed class GetApStatsDeviceApStatResult
    {
        public readonly Outputs.GetApStatsDeviceApStatAutoPlacementResult AutoPlacement;
        public readonly Outputs.GetApStatsDeviceApStatAutoUpgradeStatResult AutoUpgradeStat;
        public readonly Outputs.GetApStatsDeviceApStatBleStatResult BleStat;
        public readonly double CertExpiry;
        public readonly bool ConfigReverted;
        public readonly int CpuSystem;
        public readonly int CpuUtil;
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        public readonly string DeviceprofileId;
        /// <summary>
        /// Device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
        /// </summary>
        public readonly Outputs.GetApStatsDeviceApStatEnvStatResult EnvStat;
        public readonly Outputs.GetApStatsDeviceApStatEslStatResult EslStat;
        public readonly string ExtIp;
        public readonly Outputs.GetApStatsDeviceApStatFwupdateResult Fwupdate;
        public readonly Outputs.GetApStatsDeviceApStatGpsResult Gps;
        public readonly string HwRev;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<int> InactiveWiredVlans;
        public readonly ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatIotStatResult> IotStat;
        public readonly string Ip;
        /// <summary>
        /// IP AP settings
        /// </summary>
        public readonly Outputs.GetApStatsDeviceApStatIpConfigResult IpConfig;
        public readonly Outputs.GetApStatsDeviceApStatIpStatResult IpStat;
        /// <summary>
        /// L2TP tunnel status (key is the wxtunnel_id)
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatL2tpStatResult> L2tpStat;
        /// <summary>
        /// Last seen timestamp
        /// </summary>
        public readonly double LastSeen;
        /// <summary>
        /// Last trouble code of switch
        /// </summary>
        public readonly Outputs.GetApStatsDeviceApStatLastTroubleResult LastTrouble;
        /// <summary>
        /// LED AP settings
        /// </summary>
        public readonly Outputs.GetApStatsDeviceApStatLedResult Led;
        /// <summary>
        /// LLDP Stat (neighbor information, power negotiations)
        /// </summary>
        public readonly Outputs.GetApStatsDeviceApStatLldpStatResult LldpStat;
        public readonly bool Locating;
        /// <summary>
        /// Whether this AP is considered locked (placement / orientation has been vetted)
        /// </summary>
        public readonly bool Locked;
        /// <summary>
        /// Device mac
        /// </summary>
        public readonly string Mac;
        public readonly string MapId;
        public readonly int MemUsedKb;
        /// <summary>
        /// Property key is the mesh downlink id (e.g. `00000000-0000-0000-1000-5c5b35000010`)
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatMeshDownlinksResult> MeshDownlinks;
        public readonly Outputs.GetApStatsDeviceApStatMeshUplinkResult MeshUplink;
        /// <summary>
        /// Device model
        /// </summary>
        public readonly string Model;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        public readonly string Mount;
        public readonly string Name;
        public readonly string Notes;
        /// <summary>
        /// How many wireless clients are currently connected
        /// </summary>
        public readonly int NumClients;
        /// <summary>
        /// How many WLANs are applied to the device
        /// </summary>
        public readonly int NumWlans;
        public readonly string OrgId;
        /// <summary>
        /// Property key is the port name (e.g. `Eth0`)
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatPortStatResult> PortStat;
        /// <summary>
        /// In mW, surplus if positive or deficit if negative
        /// </summary>
        public readonly int PowerBudget;
        /// <summary>
        /// Whether insufficient power
        /// </summary>
        public readonly bool PowerConstrained;
        /// <summary>
        /// Constrained mode
        /// </summary>
        public readonly string PowerOpmode;
        /// <summary>
        /// DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
        /// </summary>
        public readonly string PowerSrc;
        public readonly Outputs.GetApStatsDeviceApStatRadioStatResult RadioStat;
        /// <summary>
        /// Rate of receiving traffic, bits/seconds, last known
        /// </summary>
        public readonly int RxBps;
        /// <summary>
        /// Amount of traffic received since connection
        /// </summary>
        public readonly int RxBytes;
        /// <summary>
        /// Amount of packets received since connection
        /// </summary>
        public readonly int RxPkts;
        /// <summary>
        /// Serial Number
        /// </summary>
        public readonly string Serial;
        public readonly string SiteId;
        public readonly string Status;
        public readonly Outputs.GetApStatsDeviceApStatSwitchRedundancyResult SwitchRedundancy;
        /// <summary>
        /// Rate of transmitting traffic, bits/seconds, last known
        /// </summary>
        public readonly int TxBps;
        /// <summary>
        /// Amount of traffic sent since connection
        /// </summary>
        public readonly int TxBytes;
        /// <summary>
        /// Amount of packets sent since connection
        /// </summary>
        public readonly int TxPkts;
        /// <summary>
        /// How long, in seconds, has the device been up (or rebooted)
        /// </summary>
        public readonly double Uptime;
        public readonly Outputs.GetApStatsDeviceApStatUsbStatResult UsbStat;
        public readonly string Version;
        public readonly double X;
        public readonly double Y;

        [OutputConstructor]
        private GetApStatsDeviceApStatResult(
            Outputs.GetApStatsDeviceApStatAutoPlacementResult autoPlacement,

            Outputs.GetApStatsDeviceApStatAutoUpgradeStatResult autoUpgradeStat,

            Outputs.GetApStatsDeviceApStatBleStatResult bleStat,

            double certExpiry,

            bool configReverted,

            int cpuSystem,

            int cpuUtil,

            double createdTime,

            string deviceprofileId,

            Outputs.GetApStatsDeviceApStatEnvStatResult envStat,

            Outputs.GetApStatsDeviceApStatEslStatResult eslStat,

            string extIp,

            Outputs.GetApStatsDeviceApStatFwupdateResult fwupdate,

            Outputs.GetApStatsDeviceApStatGpsResult gps,

            string hwRev,

            string id,

            ImmutableArray<int> inactiveWiredVlans,

            ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatIotStatResult> iotStat,

            string ip,

            Outputs.GetApStatsDeviceApStatIpConfigResult ipConfig,

            Outputs.GetApStatsDeviceApStatIpStatResult ipStat,

            ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatL2tpStatResult> l2tpStat,

            double lastSeen,

            Outputs.GetApStatsDeviceApStatLastTroubleResult lastTrouble,

            Outputs.GetApStatsDeviceApStatLedResult led,

            Outputs.GetApStatsDeviceApStatLldpStatResult lldpStat,

            bool locating,

            bool locked,

            string mac,

            string mapId,

            int memUsedKb,

            ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatMeshDownlinksResult> meshDownlinks,

            Outputs.GetApStatsDeviceApStatMeshUplinkResult meshUplink,

            string model,

            double modifiedTime,

            string mount,

            string name,

            string notes,

            int numClients,

            int numWlans,

            string orgId,

            ImmutableDictionary<string, Outputs.GetApStatsDeviceApStatPortStatResult> portStat,

            int powerBudget,

            bool powerConstrained,

            string powerOpmode,

            string powerSrc,

            Outputs.GetApStatsDeviceApStatRadioStatResult radioStat,

            int rxBps,

            int rxBytes,

            int rxPkts,

            string serial,

            string siteId,

            string status,

            Outputs.GetApStatsDeviceApStatSwitchRedundancyResult switchRedundancy,

            int txBps,

            int txBytes,

            int txPkts,

            double uptime,

            Outputs.GetApStatsDeviceApStatUsbStatResult usbStat,

            string version,

            double x,

            double y)
        {
            AutoPlacement = autoPlacement;
            AutoUpgradeStat = autoUpgradeStat;
            BleStat = bleStat;
            CertExpiry = certExpiry;
            ConfigReverted = configReverted;
            CpuSystem = cpuSystem;
            CpuUtil = cpuUtil;
            CreatedTime = createdTime;
            DeviceprofileId = deviceprofileId;
            EnvStat = envStat;
            EslStat = eslStat;
            ExtIp = extIp;
            Fwupdate = fwupdate;
            Gps = gps;
            HwRev = hwRev;
            Id = id;
            InactiveWiredVlans = inactiveWiredVlans;
            IotStat = iotStat;
            Ip = ip;
            IpConfig = ipConfig;
            IpStat = ipStat;
            L2tpStat = l2tpStat;
            LastSeen = lastSeen;
            LastTrouble = lastTrouble;
            Led = led;
            LldpStat = lldpStat;
            Locating = locating;
            Locked = locked;
            Mac = mac;
            MapId = mapId;
            MemUsedKb = memUsedKb;
            MeshDownlinks = meshDownlinks;
            MeshUplink = meshUplink;
            Model = model;
            ModifiedTime = modifiedTime;
            Mount = mount;
            Name = name;
            Notes = notes;
            NumClients = numClients;
            NumWlans = numWlans;
            OrgId = orgId;
            PortStat = portStat;
            PowerBudget = powerBudget;
            PowerConstrained = powerConstrained;
            PowerOpmode = powerOpmode;
            PowerSrc = powerSrc;
            RadioStat = radioStat;
            RxBps = rxBps;
            RxBytes = rxBytes;
            RxPkts = rxPkts;
            Serial = serial;
            SiteId = siteId;
            Status = status;
            SwitchRedundancy = switchRedundancy;
            TxBps = txBps;
            TxBytes = txBytes;
            TxPkts = txPkts;
            Uptime = uptime;
            UsbStat = usbStat;
            Version = version;
            X = x;
            Y = y;
        }
    }
}
