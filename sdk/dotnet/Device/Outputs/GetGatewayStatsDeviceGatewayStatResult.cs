// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Outputs
{

    [OutputType]
    public sealed class GetGatewayStatsDeviceGatewayStatResult
    {
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatApRedundancyResult ApRedundancy;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatArpTableStatsResult ArpTableStats;
        /// <summary>
        /// Only present when `bgp_peers` in `fields` query parameter. Each port object is same as `GET /api/v1/sites/{site_id}/stats/bgp_peers/search` result object, except that org*id, site*id, mac, model are removed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatBgpPeerResult> BgpPeers;
        public readonly int CertExpiry;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatClusterConfigResult ClusterConfig;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatClusterStatResult ClusterStat;
        public readonly string ConductorName;
        public readonly string ConfigStatus;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatCpu2StatResult Cpu2Stat;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatCpuStatResult CpuStat;
        /// <summary>
        /// When the object has been created, in epoch
        /// </summary>
        public readonly double CreatedTime;
        public readonly string DeviceprofileId;
        /// <summary>
        /// Property key is the network name
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatDhcpd2StatResult> Dhcpd2Stat;
        /// <summary>
        /// Property key is the network name
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatDhcpdStatResult> DhcpdStat;
        /// <summary>
        /// IP address
        /// </summary>
        public readonly string ExtIp;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatFwupdateResult Fwupdate;
        public readonly bool HasPcap;
        /// <summary>
        /// Hostname reported by the device
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// Unique ID of the object instance in the Mist Organization
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Property key is the interface name
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatIf2StatResult> If2Stat;
        /// <summary>
        /// Property key is the interface name
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatIfStatResult> IfStat;
        /// <summary>
        /// IP address
        /// </summary>
        public readonly string Ip;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatIp2StatResult Ip2Stat;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatIpStatResult IpStat;
        public readonly bool IsHa;
        /// <summary>
        /// Last seen timestamp
        /// </summary>
        public readonly double LastSeen;
        /// <summary>
        /// Device mac
        /// </summary>
        public readonly string Mac;
        /// <summary>
        /// Serial Number
        /// </summary>
        public readonly string MapId;
        /// <summary>
        /// Memory usage stat (for virtual chassis, memory usage of master RE)
        /// </summary>
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatMemory2StatResult Memory2Stat;
        /// <summary>
        /// Memory usage stat (for virtual chassis, memory usage of master RE)
        /// </summary>
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatMemoryStatResult MemoryStat;
        /// <summary>
        /// Device model
        /// </summary>
        public readonly string Model;
        /// <summary>
        /// When the object has been modified for the last time, in epoch
        /// </summary>
        public readonly double ModifiedTime;
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatModule2StatResult> Module2Stats;
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatModuleStatResult> ModuleStats;
        /// <summary>
        /// Device name if configured
        /// </summary>
        public readonly string Name;
        public readonly string NodeName;
        public readonly string OrgId;
        /// <summary>
        /// Only present when `ports` in `fields` query parameter. Each port object is same as `GET /api/v1/sites/{site_id}/stats/ports/search` result object, except that org*id, site*id, mac, model are removed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatPortResult> Ports;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult RouteSummaryStats;
        /// <summary>
        /// Device name if configured
        /// </summary>
        public readonly string RouterName;
        /// <summary>
        /// Serial Number
        /// </summary>
        public readonly string Serial;
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatService2StatResult> Service2Stat;
        public readonly ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatServiceStatResult> ServiceStat;
        public readonly Outputs.GetGatewayStatsDeviceGatewayStatServiceStatusResult ServiceStatus;
        public readonly string SiteId;
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatSpu2StatResult> Spu2Stats;
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatSpuStatResult> SpuStats;
        public readonly string Status;
        /// <summary>
        /// Only present when `tunnels` in `fields` query parameter. Each port object is same as `GET /api/v1/sites/{site_id}/stats/tunnels/search` result object, except that org*id, site*id, mac, model are removed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatTunnelResult> Tunnels;
        public readonly double Uptime;
        public readonly string Version;
        /// <summary>
        /// Only present when `vpn_peers` in `fields` query parameter. Each port object is same as `GET /api/v1/sites/{site_id}/stats/vpn_peers/search` result object, except that org*id, site*id, mac, model are removed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatVpnPeerResult> VpnPeers;

        [OutputConstructor]
        private GetGatewayStatsDeviceGatewayStatResult(
            Outputs.GetGatewayStatsDeviceGatewayStatApRedundancyResult apRedundancy,

            Outputs.GetGatewayStatsDeviceGatewayStatArpTableStatsResult arpTableStats,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatBgpPeerResult> bgpPeers,

            int certExpiry,

            Outputs.GetGatewayStatsDeviceGatewayStatClusterConfigResult clusterConfig,

            Outputs.GetGatewayStatsDeviceGatewayStatClusterStatResult clusterStat,

            string conductorName,

            string configStatus,

            Outputs.GetGatewayStatsDeviceGatewayStatCpu2StatResult cpu2Stat,

            Outputs.GetGatewayStatsDeviceGatewayStatCpuStatResult cpuStat,

            double createdTime,

            string deviceprofileId,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatDhcpd2StatResult> dhcpd2Stat,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatDhcpdStatResult> dhcpdStat,

            string extIp,

            Outputs.GetGatewayStatsDeviceGatewayStatFwupdateResult fwupdate,

            bool hasPcap,

            string hostname,

            string id,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatIf2StatResult> if2Stat,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatIfStatResult> ifStat,

            string ip,

            Outputs.GetGatewayStatsDeviceGatewayStatIp2StatResult ip2Stat,

            Outputs.GetGatewayStatsDeviceGatewayStatIpStatResult ipStat,

            bool isHa,

            double lastSeen,

            string mac,

            string mapId,

            Outputs.GetGatewayStatsDeviceGatewayStatMemory2StatResult memory2Stat,

            Outputs.GetGatewayStatsDeviceGatewayStatMemoryStatResult memoryStat,

            string model,

            double modifiedTime,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatModule2StatResult> module2Stats,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatModuleStatResult> moduleStats,

            string name,

            string nodeName,

            string orgId,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatPortResult> ports,

            Outputs.GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult routeSummaryStats,

            string routerName,

            string serial,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatService2StatResult> service2Stat,

            ImmutableDictionary<string, Outputs.GetGatewayStatsDeviceGatewayStatServiceStatResult> serviceStat,

            Outputs.GetGatewayStatsDeviceGatewayStatServiceStatusResult serviceStatus,

            string siteId,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatSpu2StatResult> spu2Stats,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatSpuStatResult> spuStats,

            string status,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatTunnelResult> tunnels,

            double uptime,

            string version,

            ImmutableArray<Outputs.GetGatewayStatsDeviceGatewayStatVpnPeerResult> vpnPeers)
        {
            ApRedundancy = apRedundancy;
            ArpTableStats = arpTableStats;
            BgpPeers = bgpPeers;
            CertExpiry = certExpiry;
            ClusterConfig = clusterConfig;
            ClusterStat = clusterStat;
            ConductorName = conductorName;
            ConfigStatus = configStatus;
            Cpu2Stat = cpu2Stat;
            CpuStat = cpuStat;
            CreatedTime = createdTime;
            DeviceprofileId = deviceprofileId;
            Dhcpd2Stat = dhcpd2Stat;
            DhcpdStat = dhcpdStat;
            ExtIp = extIp;
            Fwupdate = fwupdate;
            HasPcap = hasPcap;
            Hostname = hostname;
            Id = id;
            If2Stat = if2Stat;
            IfStat = ifStat;
            Ip = ip;
            Ip2Stat = ip2Stat;
            IpStat = ipStat;
            IsHa = isHa;
            LastSeen = lastSeen;
            Mac = mac;
            MapId = mapId;
            Memory2Stat = memory2Stat;
            MemoryStat = memoryStat;
            Model = model;
            ModifiedTime = modifiedTime;
            Module2Stats = module2Stats;
            ModuleStats = moduleStats;
            Name = name;
            NodeName = nodeName;
            OrgId = orgId;
            Ports = ports;
            RouteSummaryStats = routeSummaryStats;
            RouterName = routerName;
            Serial = serial;
            Service2Stat = service2Stat;
            ServiceStat = serviceStat;
            ServiceStatus = serviceStatus;
            SiteId = siteId;
            Spu2Stats = spu2Stats;
            SpuStats = spuStats;
            Status = status;
            Tunnels = tunnels;
            Uptime = uptime;
            Version = version;
            VpnPeers = vpnPeers;
        }
    }
}
