// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Outputs
{

    [OutputType]
    public sealed class SwitchPortConfig
    {
        /// <summary>
        /// To disable LACP support for the AE interface
        /// </summary>
        public readonly bool? AeDisableLacp;
        /// <summary>
        /// Users could force to use the designated AE name
        /// </summary>
        public readonly int? AeIdx;
        /// <summary>
        /// To use fast timeout
        /// </summary>
        public readonly bool? AeLacpSlow;
        public readonly bool? Aggregated;
        /// <summary>
        /// To generate port up/down alarm
        /// </summary>
        public readonly bool? Critical;
        public readonly string? Description;
        /// <summary>
        /// If `speed` and `duplex` are specified, whether to disable autonegotiation
        /// </summary>
        public readonly bool? DisableAutoneg;
        /// <summary>
        /// enum: `auto`, `full`, `half`
        /// </summary>
        public readonly string? Duplex;
        /// <summary>
        /// Enable dynamic usage for this port. Set to `dynamic` to enable.
        /// </summary>
        public readonly string? DynamicUsage;
        public readonly bool? Esilag;
        /// <summary>
        /// Media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        /// </summary>
        public readonly int? Mtu;
        /// <summary>
        /// Prevent helpdesk to override the port config
        /// </summary>
        public readonly bool? NoLocalOverwrite;
        public readonly bool? PoeDisabled;
        /// <summary>
        /// Required if `usage`==`vlan_tunnel`. Q-in-Q tunneling using All-in-one bundling. This also enables standard L2PT for interfaces that are not encapsulation tunnel interfaces and uses MAC rewrite operation. [View more information](https://www.juniper.net/documentation/us/en/software/junos/multicast-l2/topics/topic-map/q-in-q.html#id-understanding-qinq-tunneling-and-vlan-translation)
        /// </summary>
        public readonly string? PortNetwork;
        /// <summary>
        /// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
        /// </summary>
        public readonly string? Speed;
        /// <summary>
        /// Port usage name. For Q-in-Q, use `vlan_tunnel`. If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        /// </summary>
        public readonly string Usage;

        [OutputConstructor]
        private SwitchPortConfig(
            bool? aeDisableLacp,

            int? aeIdx,

            bool? aeLacpSlow,

            bool? aggregated,

            bool? critical,

            string? description,

            bool? disableAutoneg,

            string? duplex,

            string? dynamicUsage,

            bool? esilag,

            int? mtu,

            bool? noLocalOverwrite,

            bool? poeDisabled,

            string? portNetwork,

            string? speed,

            string usage)
        {
            AeDisableLacp = aeDisableLacp;
            AeIdx = aeIdx;
            AeLacpSlow = aeLacpSlow;
            Aggregated = aggregated;
            Critical = critical;
            Description = description;
            DisableAutoneg = disableAutoneg;
            Duplex = duplex;
            DynamicUsage = dynamicUsage;
            Esilag = esilag;
            Mtu = mtu;
            NoLocalOverwrite = noLocalOverwrite;
            PoeDisabled = poeDisabled;
            PortNetwork = portNetwork;
            Speed = speed;
            Usage = usage;
        }
    }
}
