// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Inputs
{

    public sealed class GatewayOobIpConfigNode1GetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `Type`==`Static`
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Used only if `Subnet` is not specified in `Networks`
        /// </summary>
        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        /// <summary>
        /// enum: `Dhcp`, `Static`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// If supported on the platform. If enabled, DNS will be using this routing-instance, too
        /// </summary>
        [Input("useMgmtVrf")]
        public Input<bool>? UseMgmtVrf { get; set; }

        /// <summary>
        /// Whether to use `MgmtJunos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        /// </summary>
        [Input("useMgmtVrfForHostOut")]
        public Input<bool>? UseMgmtVrfForHostOut { get; set; }

        [Input("vlanId")]
        public Input<string>? VlanId { get; set; }

        public GatewayOobIpConfigNode1GetArgs()
        {
        }
        public static new GatewayOobIpConfigNode1GetArgs Empty => new GatewayOobIpConfigNode1GetArgs();
    }
}
