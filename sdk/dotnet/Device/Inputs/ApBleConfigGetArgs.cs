// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Inputs
{

    public sealed class ApBleConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// whether Mist beacons is enabled
        /// </summary>
        [Input("beaconEnabled")]
        public Input<bool>? BeaconEnabled { get; set; }

        /// <summary>
        /// required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        /// </summary>
        [Input("beaconRate")]
        public Input<int>? BeaconRate { get; set; }

        /// <summary>
        /// enum: `custom`, `default`
        /// </summary>
        [Input("beaconRateMode")]
        public Input<string>? BeaconRateMode { get; set; }

        [Input("beamDisableds")]
        private InputList<int>? _beamDisableds;

        /// <summary>
        /// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        /// </summary>
        public InputList<int> BeamDisableds
        {
            get => _beamDisableds ?? (_beamDisableds = new InputList<int>());
            set => _beamDisableds = value;
        }

        /// <summary>
        /// can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        /// </summary>
        [Input("customBlePacketEnabled")]
        public Input<bool>? CustomBlePacketEnabled { get; set; }

        /// <summary>
        /// The custom frame to be sent out in this beacon. The frame must be a hexstring
        /// </summary>
        [Input("customBlePacketFrame")]
        public Input<string>? CustomBlePacketFrame { get; set; }

        /// <summary>
        /// Frequency (msec) of data emitted by custom ble beacon
        /// </summary>
        [Input("customBlePacketFreqMsec")]
        public Input<int>? CustomBlePacketFreqMsec { get; set; }

        /// <summary>
        /// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        /// </summary>
        [Input("eddystoneUidAdvPower")]
        public Input<int>? EddystoneUidAdvPower { get; set; }

        [Input("eddystoneUidBeams")]
        public Input<string>? EddystoneUidBeams { get; set; }

        /// <summary>
        /// only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        /// </summary>
        [Input("eddystoneUidEnabled")]
        public Input<bool>? EddystoneUidEnabled { get; set; }

        /// <summary>
        /// Frequency (msec) of data emmit by Eddystone-UID beacon
        /// </summary>
        [Input("eddystoneUidFreqMsec")]
        public Input<int>? EddystoneUidFreqMsec { get; set; }

        /// <summary>
        /// Eddystone-UID instance for the device
        /// </summary>
        [Input("eddystoneUidInstance")]
        public Input<string>? EddystoneUidInstance { get; set; }

        /// <summary>
        /// Eddystone-UID namespace
        /// </summary>
        [Input("eddystoneUidNamespace")]
        public Input<string>? EddystoneUidNamespace { get; set; }

        /// <summary>
        /// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        /// </summary>
        [Input("eddystoneUrlAdvPower")]
        public Input<int>? EddystoneUrlAdvPower { get; set; }

        [Input("eddystoneUrlBeams")]
        public Input<string>? EddystoneUrlBeams { get; set; }

        /// <summary>
        /// only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        /// </summary>
        [Input("eddystoneUrlEnabled")]
        public Input<bool>? EddystoneUrlEnabled { get; set; }

        /// <summary>
        /// Frequency (msec) of data emit by Eddystone-UID beacon
        /// </summary>
        [Input("eddystoneUrlFreqMsec")]
        public Input<int>? EddystoneUrlFreqMsec { get; set; }

        /// <summary>
        /// URL pointed by Eddystone-URL beacon
        /// </summary>
        [Input("eddystoneUrlUrl")]
        public Input<string>? EddystoneUrlUrl { get; set; }

        /// <summary>
        /// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        /// </summary>
        [Input("ibeaconAdvPower")]
        public Input<int>? IbeaconAdvPower { get; set; }

        [Input("ibeaconBeams")]
        public Input<string>? IbeaconBeams { get; set; }

        /// <summary>
        /// can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        /// </summary>
        [Input("ibeaconEnabled")]
        public Input<bool>? IbeaconEnabled { get; set; }

        /// <summary>
        /// Frequency (msec) of data emmit for iBeacon
        /// </summary>
        [Input("ibeaconFreqMsec")]
        public Input<int>? IbeaconFreqMsec { get; set; }

        /// <summary>
        /// Major number for iBeacon
        /// </summary>
        [Input("ibeaconMajor")]
        public Input<int>? IbeaconMajor { get; set; }

        /// <summary>
        /// Minor number for iBeacon
        /// </summary>
        [Input("ibeaconMinor")]
        public Input<int>? IbeaconMinor { get; set; }

        /// <summary>
        /// optional, if not specified, the same UUID as the beacon will be used
        /// </summary>
        [Input("ibeaconUuid")]
        public Input<string>? IbeaconUuid { get; set; }

        /// <summary>
        /// required if `power_mode`==`custom`
        /// </summary>
        [Input("power")]
        public Input<int>? Power { get; set; }

        /// <summary>
        /// enum: `custom`, `default`
        /// </summary>
        [Input("powerMode")]
        public Input<string>? PowerMode { get; set; }

        public ApBleConfigGetArgs()
        {
        }
        public static new ApBleConfigGetArgs Empty => new ApBleConfigGetArgs();
    }
}
