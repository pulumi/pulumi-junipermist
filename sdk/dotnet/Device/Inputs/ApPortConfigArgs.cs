// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Inputs
{

    public sealed class ApPortConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Optional dynamic vlan
        /// </summary>
        [Input("dynamicVlan")]
        public Input<Inputs.ApPortConfigDynamicVlanArgs>? DynamicVlan { get; set; }

        [Input("enableMacAuth")]
        public Input<bool>? EnableMacAuth { get; set; }

        /// <summary>
        /// enum: 
        ///   * `All`: local breakout, All VLANs
        ///   * `Limited`: local breakout, only the VLANs configured in `PortVlanId` and `VlanIds`
        ///   * `Mxtunnel`: central breakout to an Org Mist Edge (requires `MxtunnelId`)
        ///   * `SiteMxedge`: central breakout to a Site Mist Edge (requires `MxtunnelName`)
        ///   * `Wxtunnel`': central breakout to an Org WxTunnel (requires `WxtunnelId`)
        /// </summary>
        [Input("forwarding")]
        public Input<string>? Forwarding { get; set; }

        /// <summary>
        /// When `True`, we'll do dot1x then mac_auth. enable this to prefer mac_auth
        /// </summary>
        [Input("macAuthPreferred")]
        public Input<bool>? MacAuthPreferred { get; set; }

        /// <summary>
        /// if `EnableMacAuth`==`True`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `Pap`
        /// </summary>
        [Input("macAuthProtocol")]
        public Input<string>? MacAuthProtocol { get; set; }

        [Input("mistNac")]
        public Input<Inputs.ApPortConfigMistNacArgs>? MistNac { get; set; }

        /// <summary>
        /// If `Forwarding`==`Mxtunnel`, VlanIds comes from mxtunnel
        /// </summary>
        [Input("mxTunnelId")]
        public Input<string>? MxTunnelId { get; set; }

        /// <summary>
        /// If `Forwarding`==`SiteMxedge`, VlanIds comes from SiteMxedge (`Mxtunnels` under site setting)
        /// </summary>
        [Input("mxtunnelName")]
        public Input<string>? MxtunnelName { get; set; }

        /// <summary>
        /// When doing port auth. enum: `Dot1x`, `None`
        /// </summary>
        [Input("portAuth")]
        public Input<string>? PortAuth { get; set; }

        /// <summary>
        /// If `Forwarding`==`Limited`
        /// </summary>
        [Input("portVlanId")]
        public Input<int>? PortVlanId { get; set; }

        /// <summary>
        /// Junos Radius config
        /// </summary>
        [Input("radiusConfig")]
        public Input<Inputs.ApPortConfigRadiusConfigArgs>? RadiusConfig { get; set; }

        /// <summary>
        /// RadSec settings
        /// </summary>
        [Input("radsec")]
        public Input<Inputs.ApPortConfigRadsecArgs>? Radsec { get; set; }

        /// <summary>
        /// Optional to specify the vlan id for a tunnel if forwarding is for `Wxtunnel`, `Mxtunnel` or `SiteMxedge`.
        ///   * if VlanId is not specified then it will use first one in vlan_ids[] of the mxtunnel.
        ///   * if forwarding == site_mxedge, VlanIds comes from SiteMxedge (`Mxtunnels` under site setting)
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        [Input("vlanIds")]
        private InputList<int>? _vlanIds;

        /// <summary>
        /// If `Forwarding`==`Limited`
        /// </summary>
        public InputList<int> VlanIds
        {
            get => _vlanIds ?? (_vlanIds = new InputList<int>());
            set => _vlanIds = value;
        }

        /// <summary>
        /// If `Forwarding`==`Wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        [Input("wxtunnelId")]
        public Input<string>? WxtunnelId { get; set; }

        /// <summary>
        /// If `Forwarding`==`Wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        [Input("wxtunnelRemoteId")]
        public Input<string>? WxtunnelRemoteId { get; set; }

        public ApPortConfigArgs()
        {
        }
        public static new ApPortConfigArgs Empty => new ApPortConfigArgs();
    }
}
