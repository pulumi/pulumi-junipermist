// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.JuniperMist.Device.Inputs
{

    public sealed class ApPortConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Optional dynamic vlan
        /// </summary>
        [Input("dynamicVlan")]
        public Input<Inputs.ApPortConfigDynamicVlanGetArgs>? DynamicVlan { get; set; }

        [Input("enableMacAuth")]
        public Input<bool>? EnableMacAuth { get; set; }

        /// <summary>
        /// enum: 
        ///   * `all`: local breakout, All VLANs
        ///   * `limited`: local breakout, only the VLANs configured in `port_vlan_id` and `vlan_ids`
        ///   * `mxtunnel`: central breakout to an Org Mist Edge (requires `mxtunnel_id`)
        ///   * `site_mxedge`: central breakout to a Site Mist Edge (requires `mxtunnel_name`)
        ///   * `wxtunnel`': central breakout to an Org WxTunnel (requires `wxtunnel_id`)
        /// </summary>
        [Input("forwarding")]
        public Input<string>? Forwarding { get; set; }

        /// <summary>
        /// When `true`, we'll do dot1x then mac_auth. enable this to prefer mac_auth
        /// </summary>
        [Input("macAuthPreferred")]
        public Input<bool>? MacAuthPreferred { get; set; }

        /// <summary>
        /// if `enable_mac_auth`==`true`, allows user to select an authentication protocol. enum: `eap-md5`, `eap-peap`, `pap`
        /// </summary>
        [Input("macAuthProtocol")]
        public Input<string>? MacAuthProtocol { get; set; }

        [Input("mistNac")]
        public Input<Inputs.ApPortConfigMistNacGetArgs>? MistNac { get; set; }

        /// <summary>
        /// If `forwarding`==`mxtunnel`, vlan_ids comes from mxtunnel
        /// </summary>
        [Input("mxTunnelId")]
        public Input<string>? MxTunnelId { get; set; }

        /// <summary>
        /// If `forwarding`==`site_mxedge`, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
        /// </summary>
        [Input("mxtunnelName")]
        public Input<string>? MxtunnelName { get; set; }

        /// <summary>
        /// When doing port auth. enum: `dot1x`, `none`
        /// </summary>
        [Input("portAuth")]
        public Input<string>? PortAuth { get; set; }

        /// <summary>
        /// If `forwarding`==`limited`
        /// </summary>
        [Input("portVlanId")]
        public Input<int>? PortVlanId { get; set; }

        /// <summary>
        /// Junos Radius config
        /// </summary>
        [Input("radiusConfig")]
        public Input<Inputs.ApPortConfigRadiusConfigGetArgs>? RadiusConfig { get; set; }

        /// <summary>
        /// RadSec settings
        /// </summary>
        [Input("radsec")]
        public Input<Inputs.ApPortConfigRadsecGetArgs>? Radsec { get; set; }

        /// <summary>
        /// Optional to specify the vlan id for a tunnel if forwarding is for `wxtunnel`, `mxtunnel` or `site_mxedge`.
        ///   * if vlan_id is not specified then it will use first one in vlan_ids[] of the mxtunnel.
        ///   * if forwarding == site_mxedge, vlan_ids comes from site_mxedge (`mxtunnels` under site setting)
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        [Input("vlanIds")]
        private InputList<int>? _vlanIds;

        /// <summary>
        /// If `forwarding`==`limited`
        /// </summary>
        public InputList<int> VlanIds
        {
            get => _vlanIds ?? (_vlanIds = new InputList<int>());
            set => _vlanIds = value;
        }

        /// <summary>
        /// If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        [Input("wxtunnelId")]
        public Input<string>? WxtunnelId { get; set; }

        /// <summary>
        /// If `forwarding`==`wxtunnel`, the port is bridged to the vlan of the session
        /// </summary>
        [Input("wxtunnelRemoteId")]
        public Input<string>? WxtunnelRemoteId { get; set; }

        public ApPortConfigGetArgs()
        {
        }
        public static new ApPortConfigGetArgs Empty => new ApPortConfigGetArgs();
    }
}
