// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.JuniperMist
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("junipermist");

        private static readonly __Value<bool?> _apiDebug = new __Value<bool?>(() => __config.GetBoolean("apiDebug"));
        /// <summary>
        /// Enable API request/response debugging. When enabled, request and response bodies, headers, and other sensitive data may be logged. Can also be set via the `MIST_API_DEBUG` environment variable. Default: `False`.
        /// </summary>
        public static bool? ApiDebug
        {
            get => _apiDebug.Get();
            set => _apiDebug.Set(value);
        }

        private static readonly __Value<double?> _apiTimeout = new __Value<double?>(() => __config.GetDouble("apiTimeout"));
        /// <summary>
        /// Timeout in seconds for API requests. Set to 0 for infinite timeout. Can also be set via the `MIST_API_TIMEOUT` environment variable. Default: `10` seconds.
        /// </summary>
        public static double? ApiTimeout
        {
            get => _apiTimeout.Get();
            set => _apiTimeout.Set(value);
        }

        private static readonly __Value<string?> _apitoken = new __Value<string?>(() => __config.Get("apitoken"));
        /// <summary>
        /// Mist API Token for authentication. Can also be set via the `MIST_APITOKEN` environment variable. This is the recommended authentication method.
        /// </summary>
        public static string? Apitoken
        {
            get => _apitoken.Get();
            set => _apitoken.Set(value);
        }

        private static readonly __Value<string?> _host = new __Value<string?>(() => __config.Get("host"));
        /// <summary>
        /// URL of the Mist Cloud (e.g., `api.mist.com`). Can also be set via the `MIST_HOST` environment variable.
        /// </summary>
        public static string? Host
        {
            get => _host.Get();
            set => _host.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Mist Account password for basic authentication. Can also be set via the `MIST_PASSWORD` environment variable. Requires `Username` to be set.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _proxy = new __Value<string?>(() => __config.Get("proxy"));
        /// <summary>
        /// Proxy configuration for API requests. The value may be either a complete URL or `[username:password@]host[:port]` format. Supported schemes: `Http`, `Https`, and `Socks5`. If no scheme is provided, `Http` is assumed. Can also be set via the `MIST_PROXY` environment variable.
        /// </summary>
        public static string? Proxy
        {
            get => _proxy.Get();
            set => _proxy.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// Mist Account username for basic authentication. Can also be set via the `MIST_USERNAME` environment variable. Requires `Password` to be set and 2FA to be disabled.
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

    }
}
