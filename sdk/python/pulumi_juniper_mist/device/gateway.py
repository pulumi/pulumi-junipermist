# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[str],
                 site_id: pulumi.Input[str],
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]] = None,
                 dhcpd_config: Optional[pulumi.Input['GatewayDhcpdConfigArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 msp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['GatewayOobIpConfigArgs']] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input['GatewayPortMirroringArgs']] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vrf_config: Optional[pulumi.Input['GatewayVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a Gateway resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]] ip_configs: Property key is the network name
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input['GatewayOobIpConfigArgs'] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]] vrf_instances: Property key is the network name
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "site_id", site_id)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if bgp_config is not None:
            pulumi.set(__self__, "bgp_config", bgp_config)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if idp_profiles is not None:
            pulumi.set(__self__, "idp_profiles", idp_profiles)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if msp_id is not None:
            pulumi.set(__self__, "msp_id", msp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if path_preferences is not None:
            pulumi.set(__self__, "path_preferences", path_preferences)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if service_policies is not None:
            pulumi.set(__self__, "service_policies", service_policies)
        if tunnel_configs is not None:
            pulumi.set(__self__, "tunnel_configs", tunnel_configs)
        if tunnel_provider_options is not None:
            pulumi.set(__self__, "tunnel_provider_options", tunnel_provider_options)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]]:
        return pulumi.get(self, "bgp_config")

    @bgp_config.setter
    def bgp_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]]):
        pulumi.set(self, "bgp_config", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['GatewayDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['GatewayDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @idp_profiles.setter
    def idp_profiles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]]):
        pulumi.set(self, "idp_profiles", value)

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_id", value)

    @property
    @pulumi.getter(name="mspId")
    def msp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msp_id")

    @msp_id.setter
    def msp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['GatewayOobIpConfigArgs']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['GatewayOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @path_preferences.setter
    def path_preferences(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]]):
        pulumi.set(self, "path_preferences", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input['GatewayPortMirroringArgs']]:
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input['GatewayPortMirroringArgs']]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]]):
        pulumi.set(self, "routing_policies", value)

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]]:
        return pulumi.get(self, "service_policies")

    @service_policies.setter
    def service_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]]):
        pulumi.set(self, "service_policies", value)

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @tunnel_configs.setter
    def tunnel_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]]):
        pulumi.set(self, "tunnel_configs", value)

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']]:
        return pulumi.get(self, "tunnel_provider_options")

    @tunnel_provider_options.setter
    def tunnel_provider_options(self, value: Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']]):
        pulumi.set(self, "tunnel_provider_options", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['GatewayVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['GatewayVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class _GatewayState:
    def __init__(__self__, *,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcpd_config: Optional[pulumi.Input['GatewayDhcpdConfigArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]] = None,
                 image1_url: Optional[pulumi.Input[str]] = None,
                 image2_url: Optional[pulumi.Input[str]] = None,
                 image3_url: Optional[pulumi.Input[str]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 msp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['GatewayOobIpConfigArgs']] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input['GatewayPortMirroringArgs']] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vrf_config: Optional[pulumi.Input['GatewayVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Gateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]] ip_configs: Property key is the network name
        :param pulumi.Input[str] mac: device MAC address
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input[str] model: device Model
        :param pulumi.Input['GatewayOobIpConfigArgs'] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[str] serial: device Serial
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[str] type: Device Type. enum: `gateway`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]] vrf_instances: Property key is the network name
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if bgp_config is not None:
            pulumi.set(__self__, "bgp_config", bgp_config)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if idp_profiles is not None:
            pulumi.set(__self__, "idp_profiles", idp_profiles)
        if image1_url is not None:
            pulumi.set(__self__, "image1_url", image1_url)
        if image2_url is not None:
            pulumi.set(__self__, "image2_url", image2_url)
        if image3_url is not None:
            pulumi.set(__self__, "image3_url", image3_url)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if msp_id is not None:
            pulumi.set(__self__, "msp_id", msp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if path_preferences is not None:
            pulumi.set(__self__, "path_preferences", path_preferences)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if service_policies is not None:
            pulumi.set(__self__, "service_policies", service_policies)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tunnel_configs is not None:
            pulumi.set(__self__, "tunnel_configs", tunnel_configs)
        if tunnel_provider_options is not None:
            pulumi.set(__self__, "tunnel_provider_options", tunnel_provider_options)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]]:
        return pulumi.get(self, "bgp_config")

    @bgp_config.setter
    def bgp_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayBgpConfigArgs']]]]):
        pulumi.set(self, "bgp_config", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['GatewayDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['GatewayDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @idp_profiles.setter
    def idp_profiles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIdpProfilesArgs']]]]):
        pulumi.set(self, "idp_profiles", value)

    @property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image1_url")

    @image1_url.setter
    def image1_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image1_url", value)

    @property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image2_url")

    @image2_url.setter
    def image2_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image2_url", value)

    @property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image3_url")

    @image3_url.setter
    def image3_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image3_url", value)

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayIpConfigsArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        device MAC address
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_id", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        device Model
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="mspId")
    def msp_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "msp_id")

    @msp_id.setter
    def msp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['GatewayOobIpConfigArgs']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['GatewayOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @path_preferences.setter
    def path_preferences(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPathPreferencesArgs']]]]):
        pulumi.set(self, "path_preferences", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input['GatewayPortMirroringArgs']]:
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input['GatewayPortMirroringArgs']]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayRoutingPoliciesArgs']]]]):
        pulumi.set(self, "routing_policies", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        device Serial
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]]:
        return pulumi.get(self, "service_policies")

    @service_policies.setter
    def service_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayServicePolicyArgs']]]]):
        pulumi.set(self, "service_policies", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @tunnel_configs.setter
    def tunnel_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTunnelConfigsArgs']]]]):
        pulumi.set(self, "tunnel_configs", value)

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']]:
        return pulumi.get(self, "tunnel_provider_options")

    @tunnel_provider_options.setter
    def tunnel_provider_options(self, value: Optional[pulumi.Input['GatewayTunnelProviderOptionsArgs']]):
        pulumi.set(self, "tunnel_provider_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Device Type. enum: `gateway`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['GatewayVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['GatewayVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayBgpConfigArgs', 'GatewayBgpConfigArgsDict']]]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['GatewayDhcpdConfigArgs', 'GatewayDhcpdConfigArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutesArgs', 'GatewayExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutes6Args', 'GatewayExtraRoutes6ArgsDict']]]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIdpProfilesArgs', 'GatewayIdpProfilesArgsDict']]]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIpConfigsArgs', 'GatewayIpConfigsArgsDict']]]]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 msp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayNetworkArgs', 'GatewayNetworkArgsDict']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['GatewayOobIpConfigArgs', 'GatewayOobIpConfigArgsDict']]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPathPreferencesArgs', 'GatewayPathPreferencesArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPortConfigArgs', 'GatewayPortConfigArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Union['GatewayPortMirroringArgs', 'GatewayPortMirroringArgsDict']]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayRoutingPoliciesArgs', 'GatewayRoutingPoliciesArgsDict']]]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayServicePolicyArgs', 'GatewayServicePolicyArgsDict']]]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayTunnelConfigsArgs', 'GatewayTunnelConfigsArgsDict']]]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input[Union['GatewayTunnelProviderOptionsArgs', 'GatewayTunnelProviderOptionsArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vrf_config: Optional[pulumi.Input[Union['GatewayVrfConfigArgs', 'GatewayVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayVrfInstancesArgs', 'GatewayVrfInstancesArgsDict']]]]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        This resource manages the Gateway configuration.
        It can be used to define specific configuration at the device level or to override Org Gateway template settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        gateway_one = junipermist.device.Gateway("gateway_one",
            name="gateway_one",
            device_id=cluster_one["deviceId"],
            site_id=cluster_one["siteId"],
            oob_ip_config={
                "type": "dhcp",
            },
            dns_servers=["8.8.8.8"],
            additional_config_cmds=[
                "annotate system \\" -- custom-main -- Template level --\\"",
                "delete apply-groups custom-main",
                "delete groups custom-main",
                "set groups custom-main",
                "set groups custom-main system services ssh root-login allow",
                "set apply-groups custom-main",
            ])
        ```

        ## Import

        Using `pulumi import`, import `mist_device_gateway` with:

        Gateway Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/gateway:Gateway gateway_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutesArgs', 'GatewayExtraRoutesArgsDict']]]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutes6Args', 'GatewayExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIdpProfilesArgs', 'GatewayIdpProfilesArgsDict']]]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIpConfigsArgs', 'GatewayIpConfigsArgsDict']]]] ip_configs: Property key is the network name
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input[Union['GatewayOobIpConfigArgs', 'GatewayOobIpConfigArgsDict']] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPathPreferencesArgs', 'GatewayPathPreferencesArgsDict']]]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPortConfigArgs', 'GatewayPortConfigArgsDict']]]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayRoutingPoliciesArgs', 'GatewayRoutingPoliciesArgsDict']]]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayTunnelConfigsArgs', 'GatewayTunnelConfigsArgsDict']]]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayVrfInstancesArgs', 'GatewayVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Gateway configuration.
        It can be used to define specific configuration at the device level or to override Org Gateway template settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        gateway_one = junipermist.device.Gateway("gateway_one",
            name="gateway_one",
            device_id=cluster_one["deviceId"],
            site_id=cluster_one["siteId"],
            oob_ip_config={
                "type": "dhcp",
            },
            dns_servers=["8.8.8.8"],
            additional_config_cmds=[
                "annotate system \\" -- custom-main -- Template level --\\"",
                "delete apply-groups custom-main",
                "delete groups custom-main",
                "set groups custom-main",
                "set groups custom-main system services ssh root-login allow",
                "set apply-groups custom-main",
            ])
        ```

        ## Import

        Using `pulumi import`, import `mist_device_gateway` with:

        Gateway Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/gateway:Gateway gateway_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayBgpConfigArgs', 'GatewayBgpConfigArgsDict']]]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['GatewayDhcpdConfigArgs', 'GatewayDhcpdConfigArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutesArgs', 'GatewayExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutes6Args', 'GatewayExtraRoutes6ArgsDict']]]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIdpProfilesArgs', 'GatewayIdpProfilesArgsDict']]]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIpConfigsArgs', 'GatewayIpConfigsArgsDict']]]]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 msp_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayNetworkArgs', 'GatewayNetworkArgsDict']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['GatewayOobIpConfigArgs', 'GatewayOobIpConfigArgsDict']]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPathPreferencesArgs', 'GatewayPathPreferencesArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPortConfigArgs', 'GatewayPortConfigArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Union['GatewayPortMirroringArgs', 'GatewayPortMirroringArgsDict']]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayRoutingPoliciesArgs', 'GatewayRoutingPoliciesArgsDict']]]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayServicePolicyArgs', 'GatewayServicePolicyArgsDict']]]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayTunnelConfigsArgs', 'GatewayTunnelConfigsArgsDict']]]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input[Union['GatewayTunnelProviderOptionsArgs', 'GatewayTunnelProviderOptionsArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vrf_config: Optional[pulumi.Input[Union['GatewayVrfConfigArgs', 'GatewayVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayVrfInstancesArgs', 'GatewayVrfInstancesArgsDict']]]]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            __props__.__dict__["additional_config_cmds"] = additional_config_cmds
            __props__.__dict__["bgp_config"] = bgp_config
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["dhcpd_config"] = dhcpd_config
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["dns_suffixes"] = dns_suffixes
            __props__.__dict__["extra_routes"] = extra_routes
            __props__.__dict__["extra_routes6"] = extra_routes6
            __props__.__dict__["idp_profiles"] = idp_profiles
            __props__.__dict__["ip_configs"] = ip_configs
            __props__.__dict__["managed"] = managed
            __props__.__dict__["map_id"] = map_id
            __props__.__dict__["msp_id"] = msp_id
            __props__.__dict__["name"] = name
            __props__.__dict__["networks"] = networks
            __props__.__dict__["notes"] = notes
            __props__.__dict__["ntp_servers"] = ntp_servers
            __props__.__dict__["oob_ip_config"] = oob_ip_config
            __props__.__dict__["path_preferences"] = path_preferences
            __props__.__dict__["port_config"] = port_config
            __props__.__dict__["port_mirroring"] = port_mirroring
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["routing_policies"] = routing_policies
            __props__.__dict__["service_policies"] = service_policies
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tunnel_configs"] = tunnel_configs
            __props__.__dict__["tunnel_provider_options"] = tunnel_provider_options
            __props__.__dict__["vars"] = vars
            __props__.__dict__["vrf_config"] = vrf_config
            __props__.__dict__["vrf_instances"] = vrf_instances
            __props__.__dict__["x"] = x
            __props__.__dict__["y"] = y
            __props__.__dict__["image1_url"] = None
            __props__.__dict__["image2_url"] = None
            __props__.__dict__["image3_url"] = None
            __props__.__dict__["mac"] = None
            __props__.__dict__["model"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["serial"] = None
            __props__.__dict__["type"] = None
        super(Gateway, __self__).__init__(
            'junipermist:device/gateway:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayBgpConfigArgs', 'GatewayBgpConfigArgsDict']]]]] = None,
            device_id: Optional[pulumi.Input[str]] = None,
            dhcpd_config: Optional[pulumi.Input[Union['GatewayDhcpdConfigArgs', 'GatewayDhcpdConfigArgsDict']]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutesArgs', 'GatewayExtraRoutesArgsDict']]]]] = None,
            extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutes6Args', 'GatewayExtraRoutes6ArgsDict']]]]] = None,
            idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIdpProfilesArgs', 'GatewayIdpProfilesArgsDict']]]]] = None,
            image1_url: Optional[pulumi.Input[str]] = None,
            image2_url: Optional[pulumi.Input[str]] = None,
            image3_url: Optional[pulumi.Input[str]] = None,
            ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIpConfigsArgs', 'GatewayIpConfigsArgsDict']]]]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            managed: Optional[pulumi.Input[bool]] = None,
            map_id: Optional[pulumi.Input[str]] = None,
            model: Optional[pulumi.Input[str]] = None,
            msp_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayNetworkArgs', 'GatewayNetworkArgsDict']]]]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oob_ip_config: Optional[pulumi.Input[Union['GatewayOobIpConfigArgs', 'GatewayOobIpConfigArgsDict']]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPathPreferencesArgs', 'GatewayPathPreferencesArgsDict']]]]] = None,
            port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPortConfigArgs', 'GatewayPortConfigArgsDict']]]]] = None,
            port_mirroring: Optional[pulumi.Input[Union['GatewayPortMirroringArgs', 'GatewayPortMirroringArgsDict']]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayRoutingPoliciesArgs', 'GatewayRoutingPoliciesArgsDict']]]]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GatewayServicePolicyArgs', 'GatewayServicePolicyArgsDict']]]]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayTunnelConfigsArgs', 'GatewayTunnelConfigsArgsDict']]]]] = None,
            tunnel_provider_options: Optional[pulumi.Input[Union['GatewayTunnelProviderOptionsArgs', 'GatewayTunnelProviderOptionsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vrf_config: Optional[pulumi.Input[Union['GatewayVrfConfigArgs', 'GatewayVrfConfigArgsDict']]] = None,
            vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayVrfInstancesArgs', 'GatewayVrfInstancesArgsDict']]]]] = None,
            x: Optional[pulumi.Input[float]] = None,
            y: Optional[pulumi.Input[float]] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutesArgs', 'GatewayExtraRoutesArgsDict']]]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayExtraRoutes6Args', 'GatewayExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIdpProfilesArgs', 'GatewayIdpProfilesArgsDict']]]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayIpConfigsArgs', 'GatewayIpConfigsArgsDict']]]] ip_configs: Property key is the network name
        :param pulumi.Input[str] mac: device MAC address
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input[str] model: device Model
        :param pulumi.Input[Union['GatewayOobIpConfigArgs', 'GatewayOobIpConfigArgsDict']] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPathPreferencesArgs', 'GatewayPathPreferencesArgsDict']]]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayPortConfigArgs', 'GatewayPortConfigArgsDict']]]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayRoutingPoliciesArgs', 'GatewayRoutingPoliciesArgsDict']]]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[str] serial: device Serial
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayTunnelConfigsArgs', 'GatewayTunnelConfigsArgsDict']]]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[str] type: Device Type. enum: `gateway`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['GatewayVrfInstancesArgs', 'GatewayVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayState.__new__(_GatewayState)

        __props__.__dict__["additional_config_cmds"] = additional_config_cmds
        __props__.__dict__["bgp_config"] = bgp_config
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["dhcpd_config"] = dhcpd_config
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["dns_suffixes"] = dns_suffixes
        __props__.__dict__["extra_routes"] = extra_routes
        __props__.__dict__["extra_routes6"] = extra_routes6
        __props__.__dict__["idp_profiles"] = idp_profiles
        __props__.__dict__["image1_url"] = image1_url
        __props__.__dict__["image2_url"] = image2_url
        __props__.__dict__["image3_url"] = image3_url
        __props__.__dict__["ip_configs"] = ip_configs
        __props__.__dict__["mac"] = mac
        __props__.__dict__["managed"] = managed
        __props__.__dict__["map_id"] = map_id
        __props__.__dict__["model"] = model
        __props__.__dict__["msp_id"] = msp_id
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["notes"] = notes
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["oob_ip_config"] = oob_ip_config
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["path_preferences"] = path_preferences
        __props__.__dict__["port_config"] = port_config
        __props__.__dict__["port_mirroring"] = port_mirroring
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["routing_policies"] = routing_policies
        __props__.__dict__["serial"] = serial
        __props__.__dict__["service_policies"] = service_policies
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["tunnel_configs"] = tunnel_configs
        __props__.__dict__["tunnel_provider_options"] = tunnel_provider_options
        __props__.__dict__["type"] = type
        __props__.__dict__["vars"] = vars
        __props__.__dict__["vrf_config"] = vrf_config
        __props__.__dict__["vrf_instances"] = vrf_instances
        __props__.__dict__["x"] = x
        __props__.__dict__["y"] = y
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayBgpConfig']]]:
        return pulumi.get(self, "bgp_config")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> pulumi.Output[Optional['outputs.GatewayDhcpdConfig']]:
        return pulumi.get(self, "dhcpd_config")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayExtraRoutes']]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayExtraRoutes6']]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayIdpProfiles']]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image1_url")

    @property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image2_url")

    @property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image3_url")

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayIpConfigs']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        """
        device MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> pulumi.Output[Optional[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        """
        device Model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="mspId")
    def msp_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "msp_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.GatewayNetwork']]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> pulumi.Output[Optional['outputs.GatewayOobIpConfig']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayPathPreferences']]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayPortConfig']]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> pulumi.Output[Optional['outputs.GatewayPortMirroring']]:
        return pulumi.get(self, "port_mirroring")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[Optional[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayRoutingPolicies']]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[str]:
        """
        device Serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> pulumi.Output[Optional[Sequence['outputs.GatewayServicePolicy']]]:
        return pulumi.get(self, "service_policies")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayTunnelConfigs']]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> pulumi.Output[Optional['outputs.GatewayTunnelProviderOptions']]:
        return pulumi.get(self, "tunnel_provider_options")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Device Type. enum: `gateway`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> pulumi.Output[Optional['outputs.GatewayVrfConfig']]:
        return pulumi.get(self, "vrf_config")

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.GatewayVrfInstances']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @property
    @pulumi.getter
    def x(self) -> pulumi.Output[Optional[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> pulumi.Output[Optional[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

