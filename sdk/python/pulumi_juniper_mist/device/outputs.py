# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApAeroscout',
    'ApBleConfig',
    'ApCentrak',
    'ApClientBridge',
    'ApClientBridgeAuth',
    'ApEslConfig',
    'ApIpConfig',
    'ApLed',
    'ApMesh',
    'ApPwrConfig',
    'ApRadioConfig',
    'ApRadioConfigBand24',
    'ApRadioConfigBand5',
    'ApRadioConfigBand5On24Radio',
    'ApRadioConfigBand6',
    'ApUplinkPortConfig',
    'ApUsbConfig',
    'GatewayBgpConfig',
    'GatewayBgpConfigCommunity',
    'GatewayBgpConfigNeighbors',
    'GatewayClusterNode',
    'GatewayDhcpdConfig',
    'GatewayDhcpdConfigConfig',
    'GatewayDhcpdConfigConfigFixedBindings',
    'GatewayDhcpdConfigConfigOptions',
    'GatewayDhcpdConfigConfigVendorEncapulated',
    'GatewayExtraRoutes6',
    'GatewayExtraRoutes',
    'GatewayIdpProfiles',
    'GatewayIdpProfilesOverwrite',
    'GatewayIdpProfilesOverwriteMatching',
    'GatewayIpConfigs',
    'GatewayNetwork',
    'GatewayNetworkInternalAccess',
    'GatewayNetworkInternetAccess',
    'GatewayNetworkInternetAccessDestinationNat',
    'GatewayNetworkInternetAccessStaticNat',
    'GatewayNetworkTenants',
    'GatewayNetworkVpnAccess',
    'GatewayNetworkVpnAccessDestinationNat',
    'GatewayNetworkVpnAccessSourceNat',
    'GatewayNetworkVpnAccessStaticNat',
    'GatewayOobIpConfig',
    'GatewayOobIpConfigNode1',
    'GatewayPathPreferences',
    'GatewayPathPreferencesPath',
    'GatewayPortConfig',
    'GatewayPortConfigIpConfig',
    'GatewayPortConfigTrafficShaping',
    'GatewayPortConfigVpnPaths',
    'GatewayPortConfigVpnPathsTrafficShaping',
    'GatewayPortConfigWanSourceNat',
    'GatewayPortMirroring',
    'GatewayPortMirroringPortMirror',
    'GatewayRoutingPolicies',
    'GatewayRoutingPoliciesTerm',
    'GatewayRoutingPoliciesTermAction',
    'GatewayRoutingPoliciesTermMatching',
    'GatewayRoutingPoliciesTermMatchingRouteExists',
    'GatewayRoutingPoliciesTermMatchingVpnPathSla',
    'GatewayServicePolicy',
    'GatewayServicePolicyAppqoe',
    'GatewayServicePolicyEwf',
    'GatewayServicePolicyIdp',
    'GatewayTunnelConfigs',
    'GatewayTunnelConfigsAutoProvision',
    'GatewayTunnelConfigsAutoProvisionLatlng',
    'GatewayTunnelConfigsAutoProvisionPrimary',
    'GatewayTunnelConfigsAutoProvisionSecondary',
    'GatewayTunnelConfigsIkeProposal',
    'GatewayTunnelConfigsIpsecProposal',
    'GatewayTunnelConfigsPrimary',
    'GatewayTunnelConfigsProbe',
    'GatewayTunnelConfigsSecondary',
    'GatewayTunnelProviderOptions',
    'GatewayTunnelProviderOptionsJse',
    'GatewayTunnelProviderOptionsZscaler',
    'GatewayTunnelProviderOptionsZscalerSubLocation',
    'GatewayVrfConfig',
    'GatewayVrfInstances',
    'SwitchAclPolicy',
    'SwitchAclPolicyAction',
    'SwitchAclTags',
    'SwitchAclTagsSpec',
    'SwitchDhcpSnooping',
    'SwitchDhcpdConfig',
    'SwitchDhcpdConfigConfig',
    'SwitchDhcpdConfigConfigFixedBindings',
    'SwitchDhcpdConfigConfigOptions',
    'SwitchDhcpdConfigConfigVendorEncapulated',
    'SwitchEvpnConfig',
    'SwitchExtraRoutes6',
    'SwitchExtraRoutes6NextQualified',
    'SwitchExtraRoutes',
    'SwitchExtraRoutesNextQualified',
    'SwitchIpConfig',
    'SwitchMistNac',
    'SwitchNetworks',
    'SwitchOobIpConfig',
    'SwitchOspfAreas',
    'SwitchOspfAreasNetworks',
    'SwitchOtherIpConfigs',
    'SwitchPortConfig',
    'SwitchPortMirroring',
    'SwitchPortUsages',
    'SwitchPortUsagesRule',
    'SwitchPortUsagesStormControl',
    'SwitchRadiusConfig',
    'SwitchRadiusConfigAcctServer',
    'SwitchRadiusConfigAuthServer',
    'SwitchRemoteSyslog',
    'SwitchRemoteSyslogArchive',
    'SwitchRemoteSyslogConsole',
    'SwitchRemoteSyslogConsoleContent',
    'SwitchRemoteSyslogFile',
    'SwitchRemoteSyslogFileArchive',
    'SwitchRemoteSyslogFileContent',
    'SwitchRemoteSyslogServer',
    'SwitchRemoteSyslogServerContent',
    'SwitchRemoteSyslogUser',
    'SwitchRemoteSyslogUserContent',
    'SwitchSnmpConfig',
    'SwitchSnmpConfigClientList',
    'SwitchSnmpConfigTrapGroup',
    'SwitchSnmpConfigV2cConfig',
    'SwitchSnmpConfigV3Config',
    'SwitchSnmpConfigV3ConfigNotify',
    'SwitchSnmpConfigV3ConfigNotifyFilter',
    'SwitchSnmpConfigV3ConfigNotifyFilterContent',
    'SwitchSnmpConfigV3ConfigTargetAddress',
    'SwitchSnmpConfigV3ConfigTargetParameter',
    'SwitchSnmpConfigV3ConfigUsm',
    'SwitchSnmpConfigV3ConfigUsmUser',
    'SwitchSnmpConfigV3ConfigVacm',
    'SwitchSnmpConfigV3ConfigVacmAccess',
    'SwitchSnmpConfigV3ConfigVacmAccessPrefixList',
    'SwitchSnmpConfigV3ConfigVacmSecurityToGroup',
    'SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent',
    'SwitchSnmpConfigView',
    'SwitchStpConfig',
    'SwitchSwitchMgmt',
    'SwitchSwitchMgmtLocalAccounts',
    'SwitchSwitchMgmtProtectRe',
    'SwitchSwitchMgmtProtectReCustom',
    'SwitchSwitchMgmtTacacs',
    'SwitchSwitchMgmtTacacsAcctServer',
    'SwitchSwitchMgmtTacacsTacplusServer',
    'SwitchVirtualChassis',
    'SwitchVirtualChassisMember',
    'SwitchVrfConfig',
    'SwitchVrfInstances',
    'SwitchVrfInstancesVrfExtraRoutes',
    'SwitchVrrpConfig',
    'SwitchVrrpConfigGroups',
    'BaseLatlng',
    'GetApStatsDeviceApStatResult',
    'GetApStatsDeviceApStatAutoPlacementResult',
    'GetApStatsDeviceApStatAutoPlacementInfoResult',
    'GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurfaceResult',
    'GetApStatsDeviceApStatAutoUpgradeStatResult',
    'GetApStatsDeviceApStatBleStatResult',
    'GetApStatsDeviceApStatEnvStatResult',
    'GetApStatsDeviceApStatEslStatResult',
    'GetApStatsDeviceApStatFwupdateResult',
    'GetApStatsDeviceApStatIotStatResult',
    'GetApStatsDeviceApStatIpConfigResult',
    'GetApStatsDeviceApStatIpStatResult',
    'GetApStatsDeviceApStatL2tpStatResult',
    'GetApStatsDeviceApStatL2tpStatSessionResult',
    'GetApStatsDeviceApStatLastTroubleResult',
    'GetApStatsDeviceApStatLedResult',
    'GetApStatsDeviceApStatLldpStatResult',
    'GetApStatsDeviceApStatMeshDownlinksResult',
    'GetApStatsDeviceApStatMeshUplinkResult',
    'GetApStatsDeviceApStatPortStatResult',
    'GetApStatsDeviceApStatRadioStatResult',
    'GetApStatsDeviceApStatRadioStatBand24Result',
    'GetApStatsDeviceApStatRadioStatBand5Result',
    'GetApStatsDeviceApStatRadioStatBand6Result',
    'GetApStatsDeviceApStatSwitchRedundancyResult',
    'GetApStatsDeviceApStatUsbStatResult',
    'GetGatewayStatsDeviceGatewayStatResult',
    'GetGatewayStatsDeviceGatewayStatApRedundancyResult',
    'GetGatewayStatsDeviceGatewayStatApRedundancyModulesResult',
    'GetGatewayStatsDeviceGatewayStatArpTableStatsResult',
    'GetGatewayStatsDeviceGatewayStatClusterConfigResult',
    'GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfoResult',
    'GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnectionResult',
    'GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfoResult',
    'GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformationResult',
    'GetGatewayStatsDeviceGatewayStatClusterStatResult',
    'GetGatewayStatsDeviceGatewayStatCpu2StatResult',
    'GetGatewayStatsDeviceGatewayStatCpuStatResult',
    'GetGatewayStatsDeviceGatewayStatDhcpd2StatResult',
    'GetGatewayStatsDeviceGatewayStatDhcpdStatResult',
    'GetGatewayStatsDeviceGatewayStatFwupdateResult',
    'GetGatewayStatsDeviceGatewayStatIf2StatResult',
    'GetGatewayStatsDeviceGatewayStatIf2StatServpInfoResult',
    'GetGatewayStatsDeviceGatewayStatIfStatResult',
    'GetGatewayStatsDeviceGatewayStatIfStatServpInfoResult',
    'GetGatewayStatsDeviceGatewayStatIp2StatResult',
    'GetGatewayStatsDeviceGatewayStatIpStatResult',
    'GetGatewayStatsDeviceGatewayStatMemory2StatResult',
    'GetGatewayStatsDeviceGatewayStatMemoryStatResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatErrorResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatFanResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatPicResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroupResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatPoeResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatPsusResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatTemperatureResult',
    'GetGatewayStatsDeviceGatewayStatModule2StatVcLinkResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatErrorResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatFanResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatPicResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroupResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatPoeResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatPsusResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatTemperatureResult',
    'GetGatewayStatsDeviceGatewayStatModuleStatVcLinkResult',
    'GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult',
    'GetGatewayStatsDeviceGatewayStatService2StatResult',
    'GetGatewayStatsDeviceGatewayStatServiceStatResult',
    'GetGatewayStatsDeviceGatewayStatServiceStatusResult',
    'GetGatewayStatsDeviceGatewayStatSpu2StatResult',
    'GetGatewayStatsDeviceGatewayStatSpuStatResult',
    'GetSwitchStatsDeviceSwitchStatResult',
    'GetSwitchStatsDeviceSwitchStatApRedundancyResult',
    'GetSwitchStatsDeviceSwitchStatApRedundancyModulesResult',
    'GetSwitchStatsDeviceSwitchStatArpTableStatsResult',
    'GetSwitchStatsDeviceSwitchStatClientResult',
    'GetSwitchStatsDeviceSwitchStatClientsStatsResult',
    'GetSwitchStatsDeviceSwitchStatClientsStatsTotalResult',
    'GetSwitchStatsDeviceSwitchStatCpuStatResult',
    'GetSwitchStatsDeviceSwitchStatDhcpdStatResult',
    'GetSwitchStatsDeviceSwitchStatFwupdateResult',
    'GetSwitchStatsDeviceSwitchStatIfStatResult',
    'GetSwitchStatsDeviceSwitchStatIfStatServpInfoResult',
    'GetSwitchStatsDeviceSwitchStatIpStatResult',
    'GetSwitchStatsDeviceSwitchStatLastTroubleResult',
    'GetSwitchStatsDeviceSwitchStatMacTableStatsResult',
    'GetSwitchStatsDeviceSwitchStatMemoryStatResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatErrorResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatFanResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatPicResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroupResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatPoeResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatPsusResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatTemperatureResult',
    'GetSwitchStatsDeviceSwitchStatModuleStatVcLinkResult',
    'GetSwitchStatsDeviceSwitchStatRouteSummaryStatsResult',
    'GetSwitchStatsDeviceSwitchStatServiceStatResult',
    'GetSwitchStatsDeviceSwitchStatVcSetupInfoResult',
]

@pulumi.output_type
class ApAeroscout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locateConnected":
            suggest = "locate_connected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApAeroscout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApAeroscout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApAeroscout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 locate_connected: Optional[bool] = None):
        """
        :param bool enabled: whether to enable aeroscout config
        :param str host: required if enabled, aeroscout server host
        :param bool locate_connected: whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if locate_connected is not None:
            pulumi.set(__self__, "locate_connected", locate_connected)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable aeroscout config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        required if enabled, aeroscout server host
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="locateConnected")
    def locate_connected(self) -> Optional[bool]:
        """
        whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        return pulumi.get(self, "locate_connected")


@pulumi.output_type
class ApBleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beaconEnabled":
            suggest = "beacon_enabled"
        elif key == "beaconRate":
            suggest = "beacon_rate"
        elif key == "beaconRateMode":
            suggest = "beacon_rate_mode"
        elif key == "beamDisableds":
            suggest = "beam_disableds"
        elif key == "customBlePacketEnabled":
            suggest = "custom_ble_packet_enabled"
        elif key == "customBlePacketFrame":
            suggest = "custom_ble_packet_frame"
        elif key == "customBlePacketFreqMsec":
            suggest = "custom_ble_packet_freq_msec"
        elif key == "eddystoneUidAdvPower":
            suggest = "eddystone_uid_adv_power"
        elif key == "eddystoneUidBeams":
            suggest = "eddystone_uid_beams"
        elif key == "eddystoneUidEnabled":
            suggest = "eddystone_uid_enabled"
        elif key == "eddystoneUidFreqMsec":
            suggest = "eddystone_uid_freq_msec"
        elif key == "eddystoneUidInstance":
            suggest = "eddystone_uid_instance"
        elif key == "eddystoneUidNamespace":
            suggest = "eddystone_uid_namespace"
        elif key == "eddystoneUrlAdvPower":
            suggest = "eddystone_url_adv_power"
        elif key == "eddystoneUrlBeams":
            suggest = "eddystone_url_beams"
        elif key == "eddystoneUrlEnabled":
            suggest = "eddystone_url_enabled"
        elif key == "eddystoneUrlFreqMsec":
            suggest = "eddystone_url_freq_msec"
        elif key == "eddystoneUrlUrl":
            suggest = "eddystone_url_url"
        elif key == "ibeaconAdvPower":
            suggest = "ibeacon_adv_power"
        elif key == "ibeaconBeams":
            suggest = "ibeacon_beams"
        elif key == "ibeaconEnabled":
            suggest = "ibeacon_enabled"
        elif key == "ibeaconFreqMsec":
            suggest = "ibeacon_freq_msec"
        elif key == "ibeaconMajor":
            suggest = "ibeacon_major"
        elif key == "ibeaconMinor":
            suggest = "ibeacon_minor"
        elif key == "ibeaconUuid":
            suggest = "ibeacon_uuid"
        elif key == "powerMode":
            suggest = "power_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApBleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApBleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApBleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 beacon_enabled: Optional[bool] = None,
                 beacon_rate: Optional[int] = None,
                 beacon_rate_mode: Optional[str] = None,
                 beam_disableds: Optional[Sequence[int]] = None,
                 custom_ble_packet_enabled: Optional[bool] = None,
                 custom_ble_packet_frame: Optional[str] = None,
                 custom_ble_packet_freq_msec: Optional[int] = None,
                 eddystone_uid_adv_power: Optional[int] = None,
                 eddystone_uid_beams: Optional[str] = None,
                 eddystone_uid_enabled: Optional[bool] = None,
                 eddystone_uid_freq_msec: Optional[int] = None,
                 eddystone_uid_instance: Optional[str] = None,
                 eddystone_uid_namespace: Optional[str] = None,
                 eddystone_url_adv_power: Optional[int] = None,
                 eddystone_url_beams: Optional[str] = None,
                 eddystone_url_enabled: Optional[bool] = None,
                 eddystone_url_freq_msec: Optional[int] = None,
                 eddystone_url_url: Optional[str] = None,
                 ibeacon_adv_power: Optional[int] = None,
                 ibeacon_beams: Optional[str] = None,
                 ibeacon_enabled: Optional[bool] = None,
                 ibeacon_freq_msec: Optional[int] = None,
                 ibeacon_major: Optional[int] = None,
                 ibeacon_minor: Optional[int] = None,
                 ibeacon_uuid: Optional[str] = None,
                 power: Optional[int] = None,
                 power_mode: Optional[str] = None):
        """
        :param bool beacon_enabled: whether Mist beacons is enabled
        :param int beacon_rate: required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        :param str beacon_rate_mode: enum: `custom`, `default`
        :param Sequence[int] beam_disableds: list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        :param bool custom_ble_packet_enabled: can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        :param str custom_ble_packet_frame: The custom frame to be sent out in this beacon. The frame must be a hexstring
        :param int custom_ble_packet_freq_msec: Frequency (msec) of data emitted by custom ble beacon
        :param int eddystone_uid_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool eddystone_uid_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        :param int eddystone_uid_freq_msec: Frequency (msec) of data emmit by Eddystone-UID beacon
        :param str eddystone_uid_instance: Eddystone-UID instance for the device
        :param str eddystone_uid_namespace: Eddystone-UID namespace
        :param int eddystone_url_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool eddystone_url_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        :param int eddystone_url_freq_msec: Frequency (msec) of data emit by Eddystone-UID beacon
        :param str eddystone_url_url: URL pointed by Eddystone-URL beacon
        :param int ibeacon_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool ibeacon_enabled: can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        :param int ibeacon_freq_msec: Frequency (msec) of data emmit for iBeacon
        :param int ibeacon_major: Major number for iBeacon
        :param int ibeacon_minor: Minor number for iBeacon
        :param str ibeacon_uuid: optional, if not specified, the same UUID as the beacon will be used
        :param int power: required if `power_mode`==`custom`
        :param str power_mode: enum: `custom`, `default`
        """
        if beacon_enabled is not None:
            pulumi.set(__self__, "beacon_enabled", beacon_enabled)
        if beacon_rate is not None:
            pulumi.set(__self__, "beacon_rate", beacon_rate)
        if beacon_rate_mode is not None:
            pulumi.set(__self__, "beacon_rate_mode", beacon_rate_mode)
        if beam_disableds is not None:
            pulumi.set(__self__, "beam_disableds", beam_disableds)
        if custom_ble_packet_enabled is not None:
            pulumi.set(__self__, "custom_ble_packet_enabled", custom_ble_packet_enabled)
        if custom_ble_packet_frame is not None:
            pulumi.set(__self__, "custom_ble_packet_frame", custom_ble_packet_frame)
        if custom_ble_packet_freq_msec is not None:
            pulumi.set(__self__, "custom_ble_packet_freq_msec", custom_ble_packet_freq_msec)
        if eddystone_uid_adv_power is not None:
            pulumi.set(__self__, "eddystone_uid_adv_power", eddystone_uid_adv_power)
        if eddystone_uid_beams is not None:
            pulumi.set(__self__, "eddystone_uid_beams", eddystone_uid_beams)
        if eddystone_uid_enabled is not None:
            pulumi.set(__self__, "eddystone_uid_enabled", eddystone_uid_enabled)
        if eddystone_uid_freq_msec is not None:
            pulumi.set(__self__, "eddystone_uid_freq_msec", eddystone_uid_freq_msec)
        if eddystone_uid_instance is not None:
            pulumi.set(__self__, "eddystone_uid_instance", eddystone_uid_instance)
        if eddystone_uid_namespace is not None:
            pulumi.set(__self__, "eddystone_uid_namespace", eddystone_uid_namespace)
        if eddystone_url_adv_power is not None:
            pulumi.set(__self__, "eddystone_url_adv_power", eddystone_url_adv_power)
        if eddystone_url_beams is not None:
            pulumi.set(__self__, "eddystone_url_beams", eddystone_url_beams)
        if eddystone_url_enabled is not None:
            pulumi.set(__self__, "eddystone_url_enabled", eddystone_url_enabled)
        if eddystone_url_freq_msec is not None:
            pulumi.set(__self__, "eddystone_url_freq_msec", eddystone_url_freq_msec)
        if eddystone_url_url is not None:
            pulumi.set(__self__, "eddystone_url_url", eddystone_url_url)
        if ibeacon_adv_power is not None:
            pulumi.set(__self__, "ibeacon_adv_power", ibeacon_adv_power)
        if ibeacon_beams is not None:
            pulumi.set(__self__, "ibeacon_beams", ibeacon_beams)
        if ibeacon_enabled is not None:
            pulumi.set(__self__, "ibeacon_enabled", ibeacon_enabled)
        if ibeacon_freq_msec is not None:
            pulumi.set(__self__, "ibeacon_freq_msec", ibeacon_freq_msec)
        if ibeacon_major is not None:
            pulumi.set(__self__, "ibeacon_major", ibeacon_major)
        if ibeacon_minor is not None:
            pulumi.set(__self__, "ibeacon_minor", ibeacon_minor)
        if ibeacon_uuid is not None:
            pulumi.set(__self__, "ibeacon_uuid", ibeacon_uuid)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)

    @property
    @pulumi.getter(name="beaconEnabled")
    def beacon_enabled(self) -> Optional[bool]:
        """
        whether Mist beacons is enabled
        """
        return pulumi.get(self, "beacon_enabled")

    @property
    @pulumi.getter(name="beaconRate")
    def beacon_rate(self) -> Optional[int]:
        """
        required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        """
        return pulumi.get(self, "beacon_rate")

    @property
    @pulumi.getter(name="beaconRateMode")
    def beacon_rate_mode(self) -> Optional[str]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "beacon_rate_mode")

    @property
    @pulumi.getter(name="beamDisableds")
    def beam_disableds(self) -> Optional[Sequence[int]]:
        """
        list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        """
        return pulumi.get(self, "beam_disableds")

    @property
    @pulumi.getter(name="customBlePacketEnabled")
    def custom_ble_packet_enabled(self) -> Optional[bool]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        """
        return pulumi.get(self, "custom_ble_packet_enabled")

    @property
    @pulumi.getter(name="customBlePacketFrame")
    def custom_ble_packet_frame(self) -> Optional[str]:
        """
        The custom frame to be sent out in this beacon. The frame must be a hexstring
        """
        return pulumi.get(self, "custom_ble_packet_frame")

    @property
    @pulumi.getter(name="customBlePacketFreqMsec")
    def custom_ble_packet_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emitted by custom ble beacon
        """
        return pulumi.get(self, "custom_ble_packet_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUidAdvPower")
    def eddystone_uid_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_uid_adv_power")

    @property
    @pulumi.getter(name="eddystoneUidBeams")
    def eddystone_uid_beams(self) -> Optional[str]:
        return pulumi.get(self, "eddystone_uid_beams")

    @property
    @pulumi.getter(name="eddystoneUidEnabled")
    def eddystone_uid_enabled(self) -> Optional[bool]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        """
        return pulumi.get(self, "eddystone_uid_enabled")

    @property
    @pulumi.getter(name="eddystoneUidFreqMsec")
    def eddystone_uid_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_uid_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUidInstance")
    def eddystone_uid_instance(self) -> Optional[str]:
        """
        Eddystone-UID instance for the device
        """
        return pulumi.get(self, "eddystone_uid_instance")

    @property
    @pulumi.getter(name="eddystoneUidNamespace")
    def eddystone_uid_namespace(self) -> Optional[str]:
        """
        Eddystone-UID namespace
        """
        return pulumi.get(self, "eddystone_uid_namespace")

    @property
    @pulumi.getter(name="eddystoneUrlAdvPower")
    def eddystone_url_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_url_adv_power")

    @property
    @pulumi.getter(name="eddystoneUrlBeams")
    def eddystone_url_beams(self) -> Optional[str]:
        return pulumi.get(self, "eddystone_url_beams")

    @property
    @pulumi.getter(name="eddystoneUrlEnabled")
    def eddystone_url_enabled(self) -> Optional[bool]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        """
        return pulumi.get(self, "eddystone_url_enabled")

    @property
    @pulumi.getter(name="eddystoneUrlFreqMsec")
    def eddystone_url_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_url_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUrlUrl")
    def eddystone_url_url(self) -> Optional[str]:
        """
        URL pointed by Eddystone-URL beacon
        """
        return pulumi.get(self, "eddystone_url_url")

    @property
    @pulumi.getter(name="ibeaconAdvPower")
    def ibeacon_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "ibeacon_adv_power")

    @property
    @pulumi.getter(name="ibeaconBeams")
    def ibeacon_beams(self) -> Optional[str]:
        return pulumi.get(self, "ibeacon_beams")

    @property
    @pulumi.getter(name="ibeaconEnabled")
    def ibeacon_enabled(self) -> Optional[bool]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        """
        return pulumi.get(self, "ibeacon_enabled")

    @property
    @pulumi.getter(name="ibeaconFreqMsec")
    def ibeacon_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emmit for iBeacon
        """
        return pulumi.get(self, "ibeacon_freq_msec")

    @property
    @pulumi.getter(name="ibeaconMajor")
    def ibeacon_major(self) -> Optional[int]:
        """
        Major number for iBeacon
        """
        return pulumi.get(self, "ibeacon_major")

    @property
    @pulumi.getter(name="ibeaconMinor")
    def ibeacon_minor(self) -> Optional[int]:
        """
        Minor number for iBeacon
        """
        return pulumi.get(self, "ibeacon_minor")

    @property
    @pulumi.getter(name="ibeaconUuid")
    def ibeacon_uuid(self) -> Optional[str]:
        """
        optional, if not specified, the same UUID as the beacon will be used
        """
        return pulumi.get(self, "ibeacon_uuid")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        required if `power_mode`==`custom`
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "power_mode")


@pulumi.output_type
class ApCentrak(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ApClientBridge(dict):
    def __init__(__self__, *,
                 auth: Optional['outputs.ApClientBridgeAuth'] = None,
                 enabled: Optional[bool] = None,
                 ssid: Optional[str] = None):
        """
        :param bool enabled: when acted as client bridge:
                 * only 5G radio can be used
                 * will not serve as AP on any radios
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if ssid is not None:
            pulumi.set(__self__, "ssid", ssid)

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.ApClientBridgeAuth']:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        when acted as client bridge:
          * only 5G radio can be used
          * will not serve as AP on any radios
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def ssid(self) -> Optional[str]:
        return pulumi.get(self, "ssid")


@pulumi.output_type
class ApClientBridgeAuth(dict):
    def __init__(__self__, *,
                 psk: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str type: wpa2-AES/CCMPp is assumed when `type`==`psk`. enum: `open`, `psk`
        """
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def psk(self) -> Optional[str]:
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        wpa2-AES/CCMPp is assumed when `type`==`psk`. enum: `open`, `psk`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApEslConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyCert":
            suggest = "verify_cert"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApEslConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApEslConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApEslConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cacert: Optional[str] = None,
                 channel: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None,
                 verify_cert: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str cacert: Only if `type`==`imagotag` or `type`==`native`
        :param int channel: Only if `type`==`imagotag` or `type`==`native`
        :param bool enabled: usb_config is ignored if esl_config enabled
        :param str host: Only if `type`==`imagotag` or `type`==`native`
        :param int port: Only if `type`==`imagotag` or `type`==`native`
        :param str type: note: ble_config will be ingored if esl_config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        :param bool verify_cert: Only if `type`==`imagotag` or `type`==`native`
        :param int vlan_id: Only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[str]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        usb_config is ignored if esl_config enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        note: ble_config will be ingored if esl_config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[bool]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "verify_cert")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        Only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ApIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ip: Optional[str] = None,
                 ip6: Optional[str] = None,
                 mtu: Optional[int] = None,
                 netmask: Optional[str] = None,
                 netmask6: Optional[str] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vlan_id: Optional[int] = None):
        """
        :param Sequence[str] dns: if `type`==`static`
        :param Sequence[str] dns_suffixes: required if `type`==`static`
        :param str gateway: required if `type`==`static`
        :param str ip: required if `type`==`static`
        :param str netmask: required if `type`==`static`
        :param str type: enum: `dhcp`, `static`
        :param str type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        :param int vlan_id: management vlan id, default is 1 (untagged)
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if netmask6 is not None:
            pulumi.set(__self__, "netmask6", netmask6)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> Optional[str]:
        return pulumi.get(self, "netmask6")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        management vlan id, default is 1 (untagged)
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ApLed(dict):
    def __init__(__self__, *,
                 brightness: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[int]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ApMesh(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group: Optional[int] = None,
                 role: Optional[str] = None):
        """
        :param bool enabled: whether mesh is enabled on this AP
        :param int group: mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        :param str role: enum: `base`, `remote`
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether mesh is enabled on this AP
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> Optional[int]:
        """
        mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `base`, `remote`
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class ApPwrConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferUsbOverWifi":
            suggest = "prefer_usb_over_wifi"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApPwrConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApPwrConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApPwrConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base: Optional[int] = None,
                 prefer_usb_over_wifi: Optional[bool] = None):
        """
        :param int base: additional power to request during negotiating with PSE over PoE, in mW
        :param bool prefer_usb_over_wifi: whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        if base is not None:
            pulumi.set(__self__, "base", base)
        if prefer_usb_over_wifi is not None:
            pulumi.set(__self__, "prefer_usb_over_wifi", prefer_usb_over_wifi)

    @property
    @pulumi.getter
    def base(self) -> Optional[int]:
        """
        additional power to request during negotiating with PSE over PoE, in mW
        """
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="preferUsbOverWifi")
    def prefer_usb_over_wifi(self) -> Optional[bool]:
        """
        whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        return pulumi.get(self, "prefer_usb_over_wifi")


@pulumi.output_type
class ApRadioConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain24":
            suggest = "ant_gain24"
        elif key == "antGain5":
            suggest = "ant_gain5"
        elif key == "antGain6":
            suggest = "ant_gain6"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "band24Usage":
            suggest = "band24_usage"
        elif key == "band5On24Radio":
            suggest = "band5_on24_radio"
        elif key == "indoorUse":
            suggest = "indoor_use"
        elif key == "scanningEnabled":
            suggest = "scanning_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApRadioConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApRadioConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApRadioConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain24: Optional[int] = None,
                 ant_gain5: Optional[int] = None,
                 ant_gain6: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 band24: Optional['outputs.ApRadioConfigBand24'] = None,
                 band24_usage: Optional[str] = None,
                 band5: Optional['outputs.ApRadioConfigBand5'] = None,
                 band5_on24_radio: Optional['outputs.ApRadioConfigBand5On24Radio'] = None,
                 band6: Optional['outputs.ApRadioConfigBand6'] = None,
                 indoor_use: Optional[bool] = None,
                 scanning_enabled: Optional[bool] = None):
        """
        :param int ant_gain24: antenna gain for 2.4G - for models with external antenna only
        :param int ant_gain5: antenna gain for 5G - for models with external antenna only
        :param int ant_gain6: antenna gain for 6G - for models with external antenna only
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param 'ApRadioConfigBand24Args' band24: Radio Band AP settings
        :param str band24_usage: enum: `24`, `5`, `6`, `auto`
        :param 'ApRadioConfigBand5Args' band5: Radio Band AP settings
        :param 'ApRadioConfigBand5On24RadioArgs' band5_on24_radio: Radio Band AP settings
        :param 'ApRadioConfigBand6Args' band6: Radio Band AP settings
        :param bool indoor_use: to make an outdoor operate indoor.
               for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        :param bool scanning_enabled: whether scanning radio is enabled
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain24 is not None:
            pulumi.set(__self__, "ant_gain24", ant_gain24)
        if ant_gain5 is not None:
            pulumi.set(__self__, "ant_gain5", ant_gain5)
        if ant_gain6 is not None:
            pulumi.set(__self__, "ant_gain6", ant_gain6)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if band24 is not None:
            pulumi.set(__self__, "band24", band24)
        if band24_usage is not None:
            pulumi.set(__self__, "band24_usage", band24_usage)
        if band5 is not None:
            pulumi.set(__self__, "band5", band5)
        if band5_on24_radio is not None:
            pulumi.set(__self__, "band5_on24_radio", band5_on24_radio)
        if band6 is not None:
            pulumi.set(__self__, "band6", band6)
        if indoor_use is not None:
            pulumi.set(__self__, "indoor_use", indoor_use)
        if scanning_enabled is not None:
            pulumi.set(__self__, "scanning_enabled", scanning_enabled)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain24")
    def ant_gain24(self) -> Optional[int]:
        """
        antenna gain for 2.4G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain24")

    @property
    @pulumi.getter(name="antGain5")
    def ant_gain5(self) -> Optional[int]:
        """
        antenna gain for 5G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain5")

    @property
    @pulumi.getter(name="antGain6")
    def ant_gain6(self) -> Optional[int]:
        """
        antenna gain for 6G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain6")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def band24(self) -> Optional['outputs.ApRadioConfigBand24']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band24")

    @property
    @pulumi.getter(name="band24Usage")
    def band24_usage(self) -> Optional[str]:
        """
        enum: `24`, `5`, `6`, `auto`
        """
        return pulumi.get(self, "band24_usage")

    @property
    @pulumi.getter
    def band5(self) -> Optional['outputs.ApRadioConfigBand5']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5")

    @property
    @pulumi.getter(name="band5On24Radio")
    def band5_on24_radio(self) -> Optional['outputs.ApRadioConfigBand5On24Radio']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5_on24_radio")

    @property
    @pulumi.getter
    def band6(self) -> Optional['outputs.ApRadioConfigBand6']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band6")

    @property
    @pulumi.getter(name="indoorUse")
    def indoor_use(self) -> Optional[bool]:
        """
        to make an outdoor operate indoor.
        for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        """
        return pulumi.get(self, "indoor_use")

    @property
    @pulumi.getter(name="scanningEnabled")
    def scanning_enabled(self) -> Optional[bool]:
        """
        whether scanning radio is enabled
        """
        return pulumi.get(self, "scanning_enabled")


@pulumi.output_type
class ApRadioConfigBand24(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApRadioConfigBand24. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApRadioConfigBand24.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApRadioConfigBand24.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class ApRadioConfigBand5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApRadioConfigBand5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApRadioConfigBand5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApRadioConfigBand5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class ApRadioConfigBand5On24Radio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApRadioConfigBand5On24Radio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApRadioConfigBand5On24Radio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApRadioConfigBand5On24Radio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class ApRadioConfigBand6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"
        elif key == "standardPower":
            suggest = "standard_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApRadioConfigBand6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApRadioConfigBand6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApRadioConfigBand6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None,
                 standard_power: Optional[bool] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        :param bool standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[bool]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")


@pulumi.output_type
class ApUplinkPortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepWlansUpIfDown":
            suggest = "keep_wlans_up_if_down"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApUplinkPortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApUplinkPortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApUplinkPortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dot1x: Optional[bool] = None,
                 keep_wlans_up_if_down: Optional[bool] = None):
        """
        :param bool dot1x: Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        :param bool keep_wlans_up_if_down: by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        if dot1x is not None:
            pulumi.set(__self__, "dot1x", dot1x)
        if keep_wlans_up_if_down is not None:
            pulumi.set(__self__, "keep_wlans_up_if_down", keep_wlans_up_if_down)

    @property
    @pulumi.getter
    def dot1x(self) -> Optional[bool]:
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        return pulumi.get(self, "dot1x")

    @property
    @pulumi.getter(name="keepWlansUpIfDown")
    def keep_wlans_up_if_down(self) -> Optional[bool]:
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        return pulumi.get(self, "keep_wlans_up_if_down")


@pulumi.output_type
class ApUsbConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyCert":
            suggest = "verify_cert"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApUsbConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApUsbConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApUsbConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cacert: Optional[str] = None,
                 channel: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None,
                 verify_cert: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str cacert: only if `type`==`imagotag`
        :param int channel: only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        :param bool enabled: whether to enable any usb config
        :param str host: only if `type`==`imagotag`
        :param int port: only if `type`==`imagotag`
        :param str type: usb config type. enum: `hanshow`, `imagotag`, `solum`
        :param bool verify_cert: only if `type`==`imagotag`, whether to turn on SSL verification
        :param int vlan_id: only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[str]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable any usb config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        usb config type. enum: `hanshow`, `imagotag`, `solum`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[bool]:
        """
        only if `type`==`imagotag`, whether to turn on SSL verification
        """
        return pulumi.get(self, "verify_cert")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GatewayBgpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "bfdMinimumInterval":
            suggest = "bfd_minimum_interval"
        elif key == "bfdMultiplier":
            suggest = "bfd_multiplier"
        elif key == "disableBfd":
            suggest = "disable_bfd"
        elif key == "exportPolicy":
            suggest = "export_policy"
        elif key == "extendedV4Nexthop":
            suggest = "extended_v4_nexthop"
        elif key == "gracefulRestartTime":
            suggest = "graceful_restart_time"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "import":
            suggest = "import_"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "neighborAs":
            suggest = "neighbor_as"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "tunnelName":
            suggest = "tunnel_name"
        elif key == "vpnName":
            suggest = "vpn_name"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayBgpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayBgpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayBgpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 bfd_minimum_interval: Optional[int] = None,
                 bfd_multiplier: Optional[int] = None,
                 communities: Optional[Sequence['outputs.GatewayBgpConfigCommunity']] = None,
                 disable_bfd: Optional[bool] = None,
                 export: Optional[str] = None,
                 export_policy: Optional[str] = None,
                 extended_v4_nexthop: Optional[bool] = None,
                 graceful_restart_time: Optional[int] = None,
                 hold_time: Optional[int] = None,
                 import_: Optional[str] = None,
                 import_policy: Optional[str] = None,
                 local_as: Optional[int] = None,
                 neighbor_as: Optional[int] = None,
                 neighbors: Optional[Mapping[str, 'outputs.GatewayBgpConfigNeighbors']] = None,
                 networks: Optional[Sequence[str]] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 tunnel_name: Optional[str] = None,
                 type: Optional[str] = None,
                 via: Optional[str] = None,
                 vpn_name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param int bfd_minimum_interval: when bfd_multiplier is configured alone. Default:
                 * 1000 if `type`==`external`
                 * 350 `type`==`internal`
        :param int bfd_multiplier: when bfd_minimum_interval_is_configured alone
        :param bool disable_bfd: BFD provides faster path failure detection and is enabled by default
        :param str export_policy: default export policies if no per-neighbor policies defined
        :param bool extended_v4_nexthop: by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
               for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        :param int graceful_restart_time: `0` means disable
        :param str import_policy: default import policies if no per-neighbor policies defined
        :param Mapping[str, 'GatewayBgpConfigNeighborsArgs'] neighbors: if per-neighbor as is desired. Property key is the neighbor address
        :param Sequence[str] networks: if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        :param bool no_readvertise_to_overlay: by default, we'll re-advertise all learned BGP routers toward overlay
        :param str tunnel_name: if `type`==`tunnel`
        :param str type: enum: `external`, `internal`
        :param str via: network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        :param str wan_name: if `via`==`wan`
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if disable_bfd is not None:
            pulumi.set(__self__, "disable_bfd", disable_bfd)
        if export is not None:
            pulumi.set(__self__, "export", export)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if extended_v4_nexthop is not None:
            pulumi.set(__self__, "extended_v4_nexthop", extended_v4_nexthop)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if via is not None:
            pulumi.set(__self__, "via", via)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[int]:
        """
        when bfd_multiplier is configured alone. Default:
          * 1000 if `type`==`external`
          * 350 `type`==`internal`
        """
        return pulumi.get(self, "bfd_minimum_interval")

    @property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[int]:
        """
        when bfd_minimum_interval_is_configured alone
        """
        return pulumi.get(self, "bfd_multiplier")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence['outputs.GatewayBgpConfigCommunity']]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="disableBfd")
    def disable_bfd(self) -> Optional[bool]:
        """
        BFD provides faster path failure detection and is enabled by default
        """
        return pulumi.get(self, "disable_bfd")

    @property
    @pulumi.getter
    def export(self) -> Optional[str]:
        return pulumi.get(self, "export")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        """
        default export policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="extendedV4Nexthop")
    def extended_v4_nexthop(self) -> Optional[bool]:
        """
        by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
        for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        """
        return pulumi.get(self, "extended_v4_nexthop")

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[int]:
        """
        `0` means disable
        """
        return pulumi.get(self, "graceful_restart_time")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[str]:
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        """
        default import policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[Mapping[str, 'outputs.GatewayBgpConfigNeighbors']]:
        """
        if per-neighbor as is desired. Property key is the neighbor address
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        by default, we'll re-advertise all learned BGP routers toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[str]:
        """
        if `type`==`tunnel`
        """
        return pulumi.get(self, "tunnel_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `external`, `internal`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def via(self) -> Optional[str]:
        """
        network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        if `via`==`wan`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewayBgpConfigCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPreference":
            suggest = "local_preference"
        elif key == "vpnName":
            suggest = "vpn_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayBgpConfigCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayBgpConfigCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayBgpConfigCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 local_preference: Optional[int] = None,
                 vpn_name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[int]:
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")


@pulumi.output_type
class GatewayBgpConfigNeighbors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportPolicy":
            suggest = "export_policy"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "multihopTtl":
            suggest = "multihop_ttl"
        elif key == "neighborAs":
            suggest = "neighbor_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayBgpConfigNeighbors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayBgpConfigNeighbors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayBgpConfigNeighbors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 export_policy: Optional[str] = None,
                 hold_time: Optional[int] = None,
                 import_policy: Optional[str] = None,
                 multihop_ttl: Optional[int] = None,
                 neighbor_as: Optional[int] = None):
        """
        :param bool disabled: If true, the BGP session to this neighbor will be administratively disabled/shutdown
        :param int multihop_ttl: assuming BGP neighbor is directly connected
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if multihop_ttl is not None:
            pulumi.set(__self__, "multihop_ttl", multihop_ttl)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        If true, the BGP session to this neighbor will be administratively disabled/shutdown
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="multihopTtl")
    def multihop_ttl(self) -> Optional[int]:
        """
        assuming BGP neighbor is directly connected
        """
        return pulumi.get(self, "multihop_ttl")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")


@pulumi.output_type
class GatewayClusterNode(dict):
    def __init__(__self__, *,
                 mac: str):
        """
        :param str mac: Gateway MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        Gateway MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        return pulumi.get(self, "mac")


@pulumi.output_type
class GatewayDhcpdConfig(dict):
    def __init__(__self__, *,
                 config: Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfig']] = None,
                 enabled: Optional[bool] = None):
        """
        :param Mapping[str, 'GatewayDhcpdConfigConfigArgs'] config: Property key is the network name
        :param bool enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfig']]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayDhcpdConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "fixedBindings":
            suggest = "fixed_bindings"
        elif key == "ipEnd":
            suggest = "ip_end"
        elif key == "ipEnd6":
            suggest = "ip_end6"
        elif key == "ipStart":
            suggest = "ip_start"
        elif key == "ipStart6":
            suggest = "ip_start6"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "serverIdOverride":
            suggest = "server_id_override"
        elif key == "vendorEncapulated":
            suggest = "vendor_encapulated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayDhcpdConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayDhcpdConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayDhcpdConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 fixed_bindings: Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigFixedBindings']] = None,
                 gateway: Optional[str] = None,
                 ip_end: Optional[str] = None,
                 ip_end6: Optional[str] = None,
                 ip_start: Optional[str] = None,
                 ip_start6: Optional[str] = None,
                 lease_time: Optional[int] = None,
                 options: Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigOptions']] = None,
                 server_id_override: Optional[bool] = None,
                 servers: Optional[Sequence[str]] = None,
                 servers6s: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vendor_encapulated: Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigVendorEncapulated']] = None):
        """
        :param Sequence[str] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param Sequence[str] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param Mapping[str, 'GatewayDhcpdConfigConfigFixedBindingsArgs'] fixed_bindings: Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        :param str gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param str ip_end: if `type`==`local`
        :param str ip_end6: if `type6`==`local`
        :param str ip_start: if `type`==`local`
        :param str ip_start6: if `type6`==`local`
        :param int lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param Mapping[str, 'GatewayDhcpdConfigConfigOptionsArgs'] options: Property key is the DHCP option number
        :param bool server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param Sequence[str] servers: if `type`==`relay`
        :param Sequence[str] servers6s: if `type6`==`relay`
        :param str type: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param str type6: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param Mapping[str, 'GatewayDhcpdConfigConfigVendorEncapulatedArgs'] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigFixedBindings']]:
        """
        Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        return pulumi.get(self, "fixed_bindings")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigOptions']]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[bool]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[Sequence[str]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[Mapping[str, 'outputs.GatewayDhcpdConfigConfigVendorEncapulated']]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")


@pulumi.output_type
class GatewayDhcpdConfigConfigFixedBindings(dict):
    def __init__(__self__, *,
                 ip: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GatewayDhcpdConfigConfigOptions(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewayDhcpdConfigConfigVendorEncapulated(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewayExtraRoutes6(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class GatewayExtraRoutes(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class GatewayIdpProfiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseProfile":
            suggest = "base_profile"
        elif key == "createdTime":
            suggest = "created_time"
        elif key == "modifiedTime":
            suggest = "modified_time"
        elif key == "orgId":
            suggest = "org_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayIdpProfiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayIdpProfiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayIdpProfiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_profile: Optional[str] = None,
                 created_time: Optional[float] = None,
                 id: Optional[str] = None,
                 modified_time: Optional[float] = None,
                 name: Optional[str] = None,
                 org_id: Optional[str] = None,
                 overwrites: Optional[Sequence['outputs.GatewayIdpProfilesOverwrite']] = None):
        """
        :param str base_profile: enum: `critical`, `standard`, `strict`
        """
        if base_profile is not None:
            pulumi.set(__self__, "base_profile", base_profile)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modified_time is not None:
            pulumi.set(__self__, "modified_time", modified_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if overwrites is not None:
            pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[float]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> Optional[float]:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def overwrites(self) -> Optional[Sequence['outputs.GatewayIdpProfilesOverwrite']]:
        return pulumi.get(self, "overwrites")


@pulumi.output_type
class GatewayIdpProfilesOverwrite(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 matching: Optional['outputs.GatewayIdpProfilesOverwriteMatching'] = None,
                 name: Optional[str] = None):
        """
        :param str action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.GatewayIdpProfilesOverwriteMatching']:
        return pulumi.get(self, "matching")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GatewayIdpProfilesOverwriteMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attackNames":
            suggest = "attack_names"
        elif key == "dstSubnets":
            suggest = "dst_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayIdpProfilesOverwriteMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayIdpProfilesOverwriteMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayIdpProfilesOverwriteMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attack_names: Optional[Sequence[str]] = None,
                 dst_subnets: Optional[Sequence[str]] = None,
                 severities: Optional[Sequence[str]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attack_names")

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_subnets")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "severities")


@pulumi.output_type
class GatewayIpConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secondaryIps":
            suggest = "secondary_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayIpConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayIpConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayIpConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 netmask: str,
                 secondary_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] secondary_ips: optional list of secondary IPs in CIDR format
        :param str type: enum: `dhcp`, `static`
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask", netmask)
        if secondary_ips is not None:
            pulumi.set(__self__, "secondary_ips", secondary_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="secondaryIps")
    def secondary_ips(self) -> Optional[Sequence[str]]:
        """
        optional list of secondary IPs in CIDR format
        """
        return pulumi.get(self, "secondary_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTime":
            suggest = "created_time"
        elif key == "disallowMistServices":
            suggest = "disallow_mist_services"
        elif key == "internalAccess":
            suggest = "internal_access"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "modifiedTime":
            suggest = "modified_time"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "routedForNetworks":
            suggest = "routed_for_networks"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnAccess":
            suggest = "vpn_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 subnet: str,
                 created_time: Optional[float] = None,
                 disallow_mist_services: Optional[bool] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 id: Optional[str] = None,
                 internal_access: Optional['outputs.GatewayNetworkInternalAccess'] = None,
                 internet_access: Optional['outputs.GatewayNetworkInternetAccess'] = None,
                 isolation: Optional[bool] = None,
                 modified_time: Optional[float] = None,
                 org_id: Optional[str] = None,
                 routed_for_networks: Optional[Sequence[str]] = None,
                 subnet6: Optional[str] = None,
                 tenants: Optional[Mapping[str, 'outputs.GatewayNetworkTenants']] = None,
                 vlan_id: Optional[str] = None,
                 vpn_access: Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccess']] = None):
        """
        :param bool disallow_mist_services: whether to disallow Mist Devices in the network
        :param 'GatewayNetworkInternetAccessArgs' internet_access: whether this network has direct internet access
        :param bool isolation: whether to allow clients in the network to talk to each other
        :param Sequence[str] routed_for_networks: for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        :param Mapping[str, 'GatewayNetworkVpnAccessArgs'] vpn_access: Property key is the VPN name. Whether this network can be accessed from vpn
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if disallow_mist_services is not None:
            pulumi.set(__self__, "disallow_mist_services", disallow_mist_services)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if internal_access is not None:
            pulumi.set(__self__, "internal_access", internal_access)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if modified_time is not None:
            pulumi.set(__self__, "modified_time", modified_time)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if routed_for_networks is not None:
            pulumi.set(__self__, "routed_for_networks", routed_for_networks)
        if subnet6 is not None:
            pulumi.set(__self__, "subnet6", subnet6)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_access is not None:
            pulumi.set(__self__, "vpn_access", vpn_access)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[float]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="disallowMistServices")
    def disallow_mist_services(self) -> Optional[bool]:
        """
        whether to disallow Mist Devices in the network
        """
        return pulumi.get(self, "disallow_mist_services")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalAccess")
    def internal_access(self) -> Optional['outputs.GatewayNetworkInternalAccess']:
        return pulumi.get(self, "internal_access")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional['outputs.GatewayNetworkInternetAccess']:
        """
        whether this network has direct internet access
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[bool]:
        """
        whether to allow clients in the network to talk to each other
        """
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> Optional[float]:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="routedForNetworks")
    def routed_for_networks(self) -> Optional[Sequence[str]]:
        """
        for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        """
        return pulumi.get(self, "routed_for_networks")

    @property
    @pulumi.getter
    def subnet6(self) -> Optional[str]:
        return pulumi.get(self, "subnet6")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkTenants']]:
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccess']]:
        """
        Property key is the VPN name. Whether this network can be accessed from vpn
        """
        return pulumi.get(self, "vpn_access")


@pulumi.output_type
class GatewayNetworkInternalAccess(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayNetworkInternetAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createSimpleServicePolicy":
            suggest = "create_simple_service_policy"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "staticNat":
            suggest = "static_nat"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkInternetAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkInternetAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkInternetAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_simple_service_policy: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.GatewayNetworkInternetAccessDestinationNat']] = None,
                 enabled: Optional[bool] = None,
                 restricted: Optional[bool] = None,
                 static_nat: Optional[Mapping[str, 'outputs.GatewayNetworkInternetAccessStaticNat']] = None):
        """
        :param Mapping[str, 'GatewayNetworkInternetAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param bool restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param Mapping[str, 'GatewayNetworkInternetAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[bool]:
        return pulumi.get(self, "create_simple_service_policy")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkInternetAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def restricted(self) -> Optional[bool]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkInternetAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")


@pulumi.output_type
class GatewayNetworkInternetAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkInternetAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GatewayNetworkInternetAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkInternetAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkInternetAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkInternetAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewayNetworkTenants(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GatewayNetworkVpnAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedSubnet":
            suggest = "advertised_subnet"
        elif key == "allowPing":
            suggest = "allow_ping"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "noReadvertiseToLanBgp":
            suggest = "no_readvertise_to_lan_bgp"
        elif key == "noReadvertiseToLanOspf":
            suggest = "no_readvertise_to_lan_ospf"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "otherVrfs":
            suggest = "other_vrfs"
        elif key == "sourceNat":
            suggest = "source_nat"
        elif key == "staticNat":
            suggest = "static_nat"
        elif key == "summarizedSubnet":
            suggest = "summarized_subnet"
        elif key == "summarizedSubnetToLanBgp":
            suggest = "summarized_subnet_to_lan_bgp"
        elif key == "summarizedSubnetToLanOspf":
            suggest = "summarized_subnet_to_lan_ospf"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkVpnAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkVpnAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkVpnAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_subnet: Optional[str] = None,
                 allow_ping: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccessDestinationNat']] = None,
                 nat_pool: Optional[str] = None,
                 no_readvertise_to_lan_bgp: Optional[bool] = None,
                 no_readvertise_to_lan_ospf: Optional[bool] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 other_vrfs: Optional[Sequence[str]] = None,
                 routed: Optional[bool] = None,
                 source_nat: Optional['outputs.GatewayNetworkVpnAccessSourceNat'] = None,
                 static_nat: Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccessStaticNat']] = None,
                 summarized_subnet: Optional[str] = None,
                 summarized_subnet_to_lan_bgp: Optional[str] = None,
                 summarized_subnet_to_lan_ospf: Optional[str] = None):
        """
        :param str advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param bool allow_ping: whether to allow ping from vpn into this routed network
        :param Mapping[str, 'GatewayNetworkVpnAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param str nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param bool no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param bool no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param bool no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param Sequence[str] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param bool routed: whether this network is routable
        :param 'GatewayNetworkVpnAccessSourceNatArgs' source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param Mapping[str, 'GatewayNetworkVpnAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param str summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param str summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param str summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[str]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[bool]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[bool]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[bool]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[Sequence[str]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @property
    @pulumi.getter
    def routed(self) -> Optional[bool]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional['outputs.GatewayNetworkVpnAccessSourceNat']:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.GatewayNetworkVpnAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[str]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[str]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[str]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")


@pulumi.output_type
class GatewayNetworkVpnAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkVpnAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GatewayNetworkVpnAccessSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIp":
            suggest = "external_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkVpnAccessSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkVpnAccessSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkVpnAccessSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ip: Optional[str] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_ip")


@pulumi.output_type
class GatewayNetworkVpnAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayNetworkVpnAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayNetworkVpnAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayNetworkVpnAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewayOobIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayOobIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayOobIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayOobIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 node1: Optional['outputs.GatewayOobIpConfigNode1'] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str ip: if `type`==`static`
        :param str netmask: if `type`==`static`
        :param 'GatewayOobIpConfigNode1Args' node1: for HA Cluster, node1 can have different IP Config
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if node1 is not None:
            pulumi.set(__self__, "node1", node1)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def node1(self) -> Optional['outputs.GatewayOobIpConfigNode1']:
        """
        for HA Cluster, node1 can have different IP Config
        """
        return pulumi.get(self, "node1")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GatewayOobIpConfigNode1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayOobIpConfigNode1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayOobIpConfigNode1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayOobIpConfigNode1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GatewayPathPreferences(dict):
    def __init__(__self__, *,
                 paths: Optional[Sequence['outputs.GatewayPathPreferencesPath']] = None,
                 strategy: Optional[str] = None):
        """
        :param str strategy: enum: `ecmp`, `ordered`, `weighted`
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence['outputs.GatewayPathPreferencesPath']]:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        enum: `ecmp`, `ordered`, `weighted`
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class GatewayPathPreferencesPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "targetIps":
            suggest = "target_ips"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPathPreferencesPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPathPreferencesPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPathPreferencesPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 disabled: Optional[bool] = None,
                 gateway_ip: Optional[str] = None,
                 internet_access: Optional[bool] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 target_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param bool disabled: For SSR Only. `true`, if this specific path is undesired
        :param str gateway_ip: only if `type`==`local`, if a different gateway is desired
        :param bool internet_access: only if `type`==`vpn`, if this vpn path can be used for internet
        :param str name: required when 
                 * `type`==`vpn`: the name of the VPN Path to use 
                 * `type`==`wan`: the name of the WAN interface to use'
        :param Sequence[str] networks: required when `type`==`local`
        :param Sequence[str] target_ips: if `type`==`local`, if destination IP is to be replaced
        :param str type: enum: `local`, `tunnel`, `vpn`, `wan`
        :param str wan_name: optional if `type`==`vpn`
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if target_ips is not None:
            pulumi.set(__self__, "target_ips", target_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        For SSR Only. `true`, if this specific path is undesired
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[str]:
        """
        only if `type`==`local`, if a different gateway is desired
        """
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[bool]:
        """
        only if `type`==`vpn`, if this vpn path can be used for internet
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        required when 
          * `type`==`vpn`: the name of the VPN Path to use 
          * `type`==`wan`: the name of the WAN interface to use'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        required when `type`==`local`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="targetIps")
    def target_ips(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local`, if destination IP is to be replaced
        """
        return pulumi.get(self, "target_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        optional if `type`==`vpn`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewayPortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aeDisableLacp":
            suggest = "ae_disable_lacp"
        elif key == "aeIdx":
            suggest = "ae_idx"
        elif key == "aeLacpForceUp":
            suggest = "ae_lacp_force_up"
        elif key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dslType":
            suggest = "dsl_type"
        elif key == "dslVci":
            suggest = "dsl_vci"
        elif key == "dslVpi":
            suggest = "dsl_vpi"
        elif key == "ipConfig":
            suggest = "ip_config"
        elif key == "lteApn":
            suggest = "lte_apn"
        elif key == "lteAuth":
            suggest = "lte_auth"
        elif key == "lteBackup":
            suggest = "lte_backup"
        elif key == "ltePassword":
            suggest = "lte_password"
        elif key == "lteUsername":
            suggest = "lte_username"
        elif key == "outerVlanId":
            suggest = "outer_vlan_id"
        elif key == "poeDisabled":
            suggest = "poe_disabled"
        elif key == "portNetwork":
            suggest = "port_network"
        elif key == "preserveDscp":
            suggest = "preserve_dscp"
        elif key == "rethIdx":
            suggest = "reth_idx"
        elif key == "rethNode":
            suggest = "reth_node"
        elif key == "rethNodes":
            suggest = "reth_nodes"
        elif key == "ssrNoVirtualMac":
            suggest = "ssr_no_virtual_mac"
        elif key == "svrPortRange":
            suggest = "svr_port_range"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnPaths":
            suggest = "vpn_paths"
        elif key == "wanArpPolicer":
            suggest = "wan_arp_policer"
        elif key == "wanExtIp":
            suggest = "wan_ext_ip"
        elif key == "wanSourceNat":
            suggest = "wan_source_nat"
        elif key == "wanType":
            suggest = "wan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage: str,
                 ae_disable_lacp: Optional[bool] = None,
                 ae_idx: Optional[str] = None,
                 ae_lacp_force_up: Optional[bool] = None,
                 aggregated: Optional[bool] = None,
                 critical: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 dsl_type: Optional[str] = None,
                 dsl_vci: Optional[int] = None,
                 dsl_vpi: Optional[int] = None,
                 duplex: Optional[str] = None,
                 ip_config: Optional['outputs.GatewayPortConfigIpConfig'] = None,
                 lte_apn: Optional[str] = None,
                 lte_auth: Optional[str] = None,
                 lte_backup: Optional[bool] = None,
                 lte_password: Optional[str] = None,
                 lte_username: Optional[str] = None,
                 mtu: Optional[int] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 outer_vlan_id: Optional[int] = None,
                 poe_disabled: Optional[bool] = None,
                 port_network: Optional[str] = None,
                 preserve_dscp: Optional[bool] = None,
                 redundant: Optional[bool] = None,
                 reth_idx: Optional[int] = None,
                 reth_node: Optional[str] = None,
                 reth_nodes: Optional[Sequence[str]] = None,
                 speed: Optional[str] = None,
                 ssr_no_virtual_mac: Optional[bool] = None,
                 svr_port_range: Optional[str] = None,
                 traffic_shaping: Optional['outputs.GatewayPortConfigTrafficShaping'] = None,
                 vlan_id: Optional[int] = None,
                 vpn_paths: Optional[Mapping[str, 'outputs.GatewayPortConfigVpnPaths']] = None,
                 wan_arp_policer: Optional[str] = None,
                 wan_ext_ip: Optional[str] = None,
                 wan_source_nat: Optional['outputs.GatewayPortConfigWanSourceNat'] = None,
                 wan_type: Optional[str] = None):
        """
        :param str usage: port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        :param bool ae_disable_lacp: if `aggregated`==`true`. To disable LCP support for the AE interface
        :param str ae_idx: if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        :param bool ae_lacp_force_up: For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
               Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
               Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        :param bool critical: if want to generate port up/down alarm, set it to true
        :param bool disabled: port admin up (true) / down (false)
        :param str dsl_type: if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        :param int dsl_vci: if `wan_type`==`dsl`
               16 bit int
        :param int dsl_vpi: if `wan_type`==`dsl`
               8 bit int
        :param str duplex: enum: `auto`, `full`, `half`
        :param 'GatewayPortConfigIpConfigArgs' ip_config: Junos IP Config
        :param str lte_apn: if `wan_type`==`lte`
        :param str lte_auth: if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        :param str lte_password: if `wan_type`==`lte`
        :param str lte_username: if `wan_type`==`lte`
        :param str name: name that we'll use to derive config
        :param Sequence[str] networks: if `usage`==`lan`
        :param int outer_vlan_id: for Q-in-Q
        :param str port_network: if `usage`==`lan`
        :param bool preserve_dscp: whether to preserve dscp when sending traffic over VPN (SSR-only)
        :param bool redundant: if HA mode
        :param int reth_idx: if HA mode
        :param str reth_node: if HA mode
        :param Sequence[str] reth_nodes: SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        :param bool ssr_no_virtual_mac: when SSR is running as VM, this is required on certain hosting platforms
        :param str svr_port_range: for SSR only
        :param int vlan_id: if WAN interface is on a VLAN
        :param str wan_arp_policer: when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        :param str wan_ext_ip: optional, if spoke should reach this port by a different IP
        :param 'GatewayPortConfigWanSourceNatArgs' wan_source_nat: optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        :param str wan_type: if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_force_up is not None:
            pulumi.set(__self__, "ae_lacp_force_up", ae_lacp_force_up)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if dsl_vci is not None:
            pulumi.set(__self__, "dsl_vci", dsl_vci)
        if dsl_vpi is not None:
            pulumi.set(__self__, "dsl_vpi", dsl_vpi)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth is not None:
            pulumi.set(__self__, "lte_auth", lte_auth)
        if lte_backup is not None:
            pulumi.set(__self__, "lte_backup", lte_backup)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if outer_vlan_id is not None:
            pulumi.set(__self__, "outer_vlan_id", outer_vlan_id)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if preserve_dscp is not None:
            pulumi.set(__self__, "preserve_dscp", preserve_dscp)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if reth_idx is not None:
            pulumi.set(__self__, "reth_idx", reth_idx)
        if reth_node is not None:
            pulumi.set(__self__, "reth_node", reth_node)
        if reth_nodes is not None:
            pulumi.set(__self__, "reth_nodes", reth_nodes)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if ssr_no_virtual_mac is not None:
            pulumi.set(__self__, "ssr_no_virtual_mac", ssr_no_virtual_mac)
        if svr_port_range is not None:
            pulumi.set(__self__, "svr_port_range", svr_port_range)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)
        if wan_arp_policer is not None:
            pulumi.set(__self__, "wan_arp_policer", wan_arp_policer)
        if wan_ext_ip is not None:
            pulumi.set(__self__, "wan_ext_ip", wan_ext_ip)
        if wan_source_nat is not None:
            pulumi.set(__self__, "wan_source_nat", wan_source_nat)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter
    def usage(self) -> str:
        """
        port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        """
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[bool]:
        """
        if `aggregated`==`true`. To disable LCP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[str]:
        """
        if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        """
        return pulumi.get(self, "ae_idx")

    @property
    @pulumi.getter(name="aeLacpForceUp")
    def ae_lacp_force_up(self) -> Optional[bool]:
        """
        For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
        Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
        Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        """
        return pulumi.get(self, "ae_lacp_force_up")

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[bool]:
        return pulumi.get(self, "aggregated")

    @property
    @pulumi.getter
    def critical(self) -> Optional[bool]:
        """
        if want to generate port up/down alarm, set it to true
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        port admin up (true) / down (false)
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[str]:
        """
        if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        """
        return pulumi.get(self, "dsl_type")

    @property
    @pulumi.getter(name="dslVci")
    def dsl_vci(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        16 bit int
        """
        return pulumi.get(self, "dsl_vci")

    @property
    @pulumi.getter(name="dslVpi")
    def dsl_vpi(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        8 bit int
        """
        return pulumi.get(self, "dsl_vpi")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional['outputs.GatewayPortConfigIpConfig']:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_apn")

    @property
    @pulumi.getter(name="lteAuth")
    def lte_auth(self) -> Optional[str]:
        """
        if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "lte_auth")

    @property
    @pulumi.getter(name="lteBackup")
    def lte_backup(self) -> Optional[bool]:
        return pulumi.get(self, "lte_backup")

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_password")

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_username")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name that we'll use to derive config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="outerVlanId")
    def outer_vlan_id(self) -> Optional[int]:
        """
        for Q-in-Q
        """
        return pulumi.get(self, "outer_vlan_id")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[str]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "port_network")

    @property
    @pulumi.getter(name="preserveDscp")
    def preserve_dscp(self) -> Optional[bool]:
        """
        whether to preserve dscp when sending traffic over VPN (SSR-only)
        """
        return pulumi.get(self, "preserve_dscp")

    @property
    @pulumi.getter
    def redundant(self) -> Optional[bool]:
        """
        if HA mode
        """
        return pulumi.get(self, "redundant")

    @property
    @pulumi.getter(name="rethIdx")
    def reth_idx(self) -> Optional[int]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_idx")

    @property
    @pulumi.getter(name="rethNode")
    def reth_node(self) -> Optional[str]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_node")

    @property
    @pulumi.getter(name="rethNodes")
    def reth_nodes(self) -> Optional[Sequence[str]]:
        """
        SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        """
        return pulumi.get(self, "reth_nodes")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="ssrNoVirtualMac")
    def ssr_no_virtual_mac(self) -> Optional[bool]:
        """
        when SSR is running as VM, this is required on certain hosting platforms
        """
        return pulumi.get(self, "ssr_no_virtual_mac")

    @property
    @pulumi.getter(name="svrPortRange")
    def svr_port_range(self) -> Optional[str]:
        """
        for SSR only
        """
        return pulumi.get(self, "svr_port_range")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.GatewayPortConfigTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        if WAN interface is on a VLAN
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Mapping[str, 'outputs.GatewayPortConfigVpnPaths']]:
        return pulumi.get(self, "vpn_paths")

    @property
    @pulumi.getter(name="wanArpPolicer")
    def wan_arp_policer(self) -> Optional[str]:
        """
        when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        """
        return pulumi.get(self, "wan_arp_policer")

    @property
    @pulumi.getter(name="wanExtIp")
    def wan_ext_ip(self) -> Optional[str]:
        """
        optional, if spoke should reach this port by a different IP
        """
        return pulumi.get(self, "wan_ext_ip")

    @property
    @pulumi.getter(name="wanSourceNat")
    def wan_source_nat(self) -> Optional['outputs.GatewayPortConfigWanSourceNat']:
        """
        optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        """
        return pulumi.get(self, "wan_source_nat")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[str]:
        """
        if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class GatewayPortConfigIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "poserPassword":
            suggest = "poser_password"
        elif key == "pppoeAuth":
            suggest = "pppoe_auth"
        elif key == "pppoeUsername":
            suggest = "pppoe_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfigIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfigIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfigIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 network: Optional[str] = None,
                 poser_password: Optional[str] = None,
                 pppoe_auth: Optional[str] = None,
                 pppoe_username: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] dns: except for out-of_band interface (vme/em0/fxp0)
        :param Sequence[str] dns_suffixes: except for out-of_band interface (vme/em0/fxp0)
        :param str gateway: except for out-of_band interface (vme/em0/fxp0)
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str network: optional, the network to be used for mgmt
        :param str poser_password: if `type`==`pppoe`
        :param str pppoe_auth: if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        :param str pppoe_username: if `type`==`pppoe`
        :param str type: enum: `dhcp`, `pppoe`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if poser_password is not None:
            pulumi.set(__self__, "poser_password", poser_password)
        if pppoe_auth is not None:
            pulumi.set(__self__, "pppoe_auth", pppoe_auth)
        if pppoe_username is not None:
            pulumi.set(__self__, "pppoe_username", pppoe_username)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="poserPassword")
    def poser_password(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "poser_password")

    @property
    @pulumi.getter(name="pppoeAuth")
    def pppoe_auth(self) -> Optional[str]:
        """
        if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "pppoe_auth")

    @property
    @pulumi.getter(name="pppoeUsername")
    def pppoe_username(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "pppoe_username")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `pppoe`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayPortConfigTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfigTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfigTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfigTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayPortConfigVpnPaths(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bfdProfile":
            suggest = "bfd_profile"
        elif key == "bfdUseTunnelMode":
            suggest = "bfd_use_tunnel_mode"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfigVpnPaths. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfigVpnPaths.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfigVpnPaths.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd_profile: Optional[str] = None,
                 bfd_use_tunnel_mode: Optional[bool] = None,
                 preference: Optional[int] = None,
                 role: Optional[str] = None,
                 traffic_shaping: Optional['outputs.GatewayPortConfigVpnPathsTrafficShaping'] = None):
        """
        :param str bfd_profile: enum: `broadband`, `lte`
        :param bool bfd_use_tunnel_mode: whether to use tunnel mode. SSR only
        :param int preference: for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        :param str role: enum: `hub`, `spoke`
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if bfd_use_tunnel_mode is not None:
            pulumi.set(__self__, "bfd_use_tunnel_mode", bfd_use_tunnel_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[str]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @property
    @pulumi.getter(name="bfdUseTunnelMode")
    def bfd_use_tunnel_mode(self) -> Optional[bool]:
        """
        whether to use tunnel mode. SSR only
        """
        return pulumi.get(self, "bfd_use_tunnel_mode")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `hub`, `spoke`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.GatewayPortConfigVpnPathsTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")


@pulumi.output_type
class GatewayPortConfigVpnPathsTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfigVpnPathsTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayPortConfigWanSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natPool":
            suggest = "nat_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortConfigWanSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortConfigWanSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortConfigWanSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 nat_pool: Optional[str] = None):
        """
        :param bool disabled: or to disable the source-nat
        :param str nat_pool: if alternative nat_pool is desired
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        or to disable the source-nat
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if alternative nat_pool is desired
        """
        return pulumi.get(self, "nat_pool")


@pulumi.output_type
class GatewayPortMirroring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portMirror":
            suggest = "port_mirror"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortMirroring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortMirroring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortMirroring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_mirror: Optional['outputs.GatewayPortMirroringPortMirror'] = None):
        if port_mirror is not None:
            pulumi.set(__self__, "port_mirror", port_mirror)

    @property
    @pulumi.getter(name="portMirror")
    def port_mirror(self) -> Optional['outputs.GatewayPortMirroringPortMirror']:
        return pulumi.get(self, "port_mirror")


@pulumi.output_type
class GatewayPortMirroringPortMirror(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyType":
            suggest = "family_type"
        elif key == "ingressPortIds":
            suggest = "ingress_port_ids"
        elif key == "outputPortId":
            suggest = "output_port_id"
        elif key == "runLength":
            suggest = "run_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayPortMirroringPortMirror. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayPortMirroringPortMirror.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayPortMirroringPortMirror.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_type: Optional[str] = None,
                 ingress_port_ids: Optional[Sequence[str]] = None,
                 output_port_id: Optional[str] = None,
                 rate: Optional[int] = None,
                 run_length: Optional[int] = None):
        if family_type is not None:
            pulumi.set(__self__, "family_type", family_type)
        if ingress_port_ids is not None:
            pulumi.set(__self__, "ingress_port_ids", ingress_port_ids)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if run_length is not None:
            pulumi.set(__self__, "run_length", run_length)

    @property
    @pulumi.getter(name="familyType")
    def family_type(self) -> Optional[str]:
        return pulumi.get(self, "family_type")

    @property
    @pulumi.getter(name="ingressPortIds")
    def ingress_port_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ingress_port_ids")

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[str]:
        return pulumi.get(self, "output_port_id")

    @property
    @pulumi.getter
    def rate(self) -> Optional[int]:
        return pulumi.get(self, "rate")

    @property
    @pulumi.getter(name="runLength")
    def run_length(self) -> Optional[int]:
        return pulumi.get(self, "run_length")


@pulumi.output_type
class GatewayRoutingPolicies(dict):
    def __init__(__self__, *,
                 terms: Optional[Sequence['outputs.GatewayRoutingPoliciesTerm']] = None):
        """
        :param Sequence['GatewayRoutingPoliciesTermArgs'] terms: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.GatewayRoutingPoliciesTerm']]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class GatewayRoutingPoliciesTerm(dict):
    def __init__(__self__, *,
                 action: Optional['outputs.GatewayRoutingPoliciesTermAction'] = None,
                 matching: Optional['outputs.GatewayRoutingPoliciesTermMatching'] = None):
        """
        :param 'GatewayRoutingPoliciesTermActionArgs' action: when used as import policy
        :param 'GatewayRoutingPoliciesTermMatchingArgs' matching: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.GatewayRoutingPoliciesTermAction']:
        """
        when used as import policy
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.GatewayRoutingPoliciesTermMatching']:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "matching")


@pulumi.output_type
class GatewayRoutingPoliciesTermAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addCommunities":
            suggest = "add_communities"
        elif key == "addTargetVrfs":
            suggest = "add_target_vrfs"
        elif key == "excludeAsPaths":
            suggest = "exclude_as_paths"
        elif key == "excludeCommunities":
            suggest = "exclude_communities"
        elif key == "exportCommunitites":
            suggest = "export_communitites"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "prependAsPaths":
            suggest = "prepend_as_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayRoutingPoliciesTermAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayRoutingPoliciesTermAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayRoutingPoliciesTermAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept: Optional[bool] = None,
                 add_communities: Optional[Sequence[str]] = None,
                 add_target_vrfs: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 exclude_as_paths: Optional[Sequence[str]] = None,
                 exclude_communities: Optional[Sequence[str]] = None,
                 export_communitites: Optional[Sequence[str]] = None,
                 local_preference: Optional[str] = None,
                 prepend_as_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] add_target_vrfs: for SSR, hub decides how VRF routes are leaked on spoke
        :param Sequence[str] communities: when used as export policy, optional
        :param Sequence[str] exclude_as_paths: when used as export policy, optional. To exclude certain AS
        :param Sequence[str] export_communitites: when used as export policy, optional
        :param str local_preference: optional, for an import policy, local_preference can be changed
        :param Sequence[str] prepend_as_paths: when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if add_communities is not None:
            pulumi.set(__self__, "add_communities", add_communities)
        if add_target_vrfs is not None:
            pulumi.set(__self__, "add_target_vrfs", add_target_vrfs)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if exclude_as_paths is not None:
            pulumi.set(__self__, "exclude_as_paths", exclude_as_paths)
        if exclude_communities is not None:
            pulumi.set(__self__, "exclude_communities", exclude_communities)
        if export_communitites is not None:
            pulumi.set(__self__, "export_communitites", export_communitites)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)

    @property
    @pulumi.getter
    def accept(self) -> Optional[bool]:
        return pulumi.get(self, "accept")

    @property
    @pulumi.getter(name="addCommunities")
    def add_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add_communities")

    @property
    @pulumi.getter(name="addTargetVrfs")
    def add_target_vrfs(self) -> Optional[Sequence[str]]:
        """
        for SSR, hub decides how VRF routes are leaked on spoke
        """
        return pulumi.get(self, "add_target_vrfs")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="excludeAsPaths")
    def exclude_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. To exclude certain AS
        """
        return pulumi.get(self, "exclude_as_paths")

    @property
    @pulumi.getter(name="excludeCommunities")
    def exclude_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_communities")

    @property
    @pulumi.getter(name="exportCommunitites")
    def export_communitites(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "export_communitites")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[str]:
        """
        optional, for an import policy, local_preference can be changed
        """
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        return pulumi.get(self, "prepend_as_paths")


@pulumi.output_type
class GatewayRoutingPoliciesTermMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPaths":
            suggest = "as_paths"
        elif key == "routeExists":
            suggest = "route_exists"
        elif key == "vpnNeighborMacs":
            suggest = "vpn_neighbor_macs"
        elif key == "vpnPathSla":
            suggest = "vpn_path_sla"
        elif key == "vpnPaths":
            suggest = "vpn_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayRoutingPoliciesTermMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayRoutingPoliciesTermMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayRoutingPoliciesTermMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_paths: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 networks: Optional[Sequence[str]] = None,
                 prefixes: Optional[Sequence[str]] = None,
                 protocols: Optional[Sequence[str]] = None,
                 route_exists: Optional['outputs.GatewayRoutingPoliciesTermMatchingRouteExists'] = None,
                 vpn_neighbor_macs: Optional[Sequence[str]] = None,
                 vpn_path_sla: Optional['outputs.GatewayRoutingPoliciesTermMatchingVpnPathSla'] = None,
                 vpn_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] as_paths: takes regular expression
        :param Sequence[str] prefixes: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        :param Sequence[str] protocols: `direct`, `bgp`, `osp`, ...
        :param Sequence[str] vpn_neighbor_macs: overlay-facing criteria (used for bgp_config where via=vpn)
        :param Sequence[str] vpn_paths: overlay-facing criteria (used for bgp_config where via=vpn)
               ordered-
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_exists is not None:
            pulumi.set(__self__, "route_exists", route_exists)
        if vpn_neighbor_macs is not None:
            pulumi.set(__self__, "vpn_neighbor_macs", vpn_neighbor_macs)
        if vpn_path_sla is not None:
            pulumi.set(__self__, "vpn_path_sla", vpn_path_sla)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[Sequence[str]]:
        """
        takes regular expression
        """
        return pulumi.get(self, "as_paths")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[str]]:
        """
        `direct`, `bgp`, `osp`, ...
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="routeExists")
    def route_exists(self) -> Optional['outputs.GatewayRoutingPoliciesTermMatchingRouteExists']:
        return pulumi.get(self, "route_exists")

    @property
    @pulumi.getter(name="vpnNeighborMacs")
    def vpn_neighbor_macs(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        """
        return pulumi.get(self, "vpn_neighbor_macs")

    @property
    @pulumi.getter(name="vpnPathSla")
    def vpn_path_sla(self) -> Optional['outputs.GatewayRoutingPoliciesTermMatchingVpnPathSla']:
        return pulumi.get(self, "vpn_path_sla")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        ordered-
        """
        return pulumi.get(self, "vpn_paths")


@pulumi.output_type
class GatewayRoutingPoliciesTermMatchingRouteExists(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vrfName":
            suggest = "vrf_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayRoutingPoliciesTermMatchingRouteExists. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route: Optional[str] = None,
                 vrf_name: Optional[str] = None):
        """
        :param str vrf_name: name of the vrf instance
               it can also be the name of the VPN or wan if they
        """
        if route is not None:
            pulumi.set(__self__, "route", route)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def route(self) -> Optional[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[str]:
        """
        name of the vrf instance
        it can also be the name of the VPN or wan if they
        """
        return pulumi.get(self, "vrf_name")


@pulumi.output_type
class GatewayRoutingPoliciesTermMatchingVpnPathSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxJitter":
            suggest = "max_jitter"
        elif key == "maxLatency":
            suggest = "max_latency"
        elif key == "maxLoss":
            suggest = "max_loss"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayRoutingPoliciesTermMatchingVpnPathSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_jitter: Optional[int] = None,
                 max_latency: Optional[int] = None,
                 max_loss: Optional[int] = None):
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[int]:
        return pulumi.get(self, "max_jitter")

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[int]:
        return pulumi.get(self, "max_latency")

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[int]:
        return pulumi.get(self, "max_loss")


@pulumi.output_type
class GatewayServicePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localRouting":
            suggest = "local_routing"
        elif key == "pathPreference":
            suggest = "path_preference"
        elif key == "servicepolicyId":
            suggest = "servicepolicy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayServicePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayServicePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayServicePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 appqoe: Optional['outputs.GatewayServicePolicyAppqoe'] = None,
                 ewfs: Optional[Sequence['outputs.GatewayServicePolicyEwf']] = None,
                 idp: Optional['outputs.GatewayServicePolicyIdp'] = None,
                 local_routing: Optional[bool] = None,
                 name: Optional[str] = None,
                 path_preference: Optional[str] = None,
                 servicepolicy_id: Optional[str] = None,
                 services: Optional[Sequence[str]] = None,
                 tenants: Optional[Sequence[str]] = None):
        """
        :param str action: Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`
        :param 'GatewayServicePolicyAppqoeArgs' appqoe: For SRX Only
        :param bool local_routing: access within the same VRF
        :param str name: Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy name)
        :param str path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        :param str servicepolicy_id: used to link servicepolicy defined at org level and overwrite some attributes
        :param Sequence[str] services: Required when `servicepolicy_id` is not defined. List of Applications / Desctinations
        :param Sequence[str] tenants: Required when `servicepolicy_id` is not defined. List of Networks / Users
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if appqoe is not None:
            pulumi.set(__self__, "appqoe", appqoe)
        if ewfs is not None:
            pulumi.set(__self__, "ewfs", ewfs)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if local_routing is not None:
            pulumi.set(__self__, "local_routing", local_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_preference is not None:
            pulumi.set(__self__, "path_preference", path_preference)
        if servicepolicy_id is not None:
            pulumi.set(__self__, "servicepolicy_id", servicepolicy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy action). enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def appqoe(self) -> Optional['outputs.GatewayServicePolicyAppqoe']:
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @property
    @pulumi.getter
    def ewfs(self) -> Optional[Sequence['outputs.GatewayServicePolicyEwf']]:
        return pulumi.get(self, "ewfs")

    @property
    @pulumi.getter
    def idp(self) -> Optional['outputs.GatewayServicePolicyIdp']:
        return pulumi.get(self, "idp")

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> Optional[bool]:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Required when `servicepolicy_id` is not defined, optional otherwise (override the servicepolicy name)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> Optional[str]:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @property
    @pulumi.getter(name="servicepolicyId")
    def servicepolicy_id(self) -> Optional[str]:
        """
        used to link servicepolicy defined at org level and overwrite some attributes
        """
        return pulumi.get(self, "servicepolicy_id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        """
        Required when `servicepolicy_id` is not defined. List of Applications / Desctinations
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Sequence[str]]:
        """
        Required when `servicepolicy_id` is not defined. List of Networks / Users
        """
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GatewayServicePolicyAppqoe(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayServicePolicyEwf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "blockMessage":
            suggest = "block_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayServicePolicyEwf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayServicePolicyEwf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayServicePolicyEwf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 block_message: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 profile: Optional[str] = None):
        """
        :param str profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[str]:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GatewayServicePolicyIdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "idpprofileId":
            suggest = "idpprofile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayServicePolicyIdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayServicePolicyIdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayServicePolicyIdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 idpprofile_id: Optional[str] = None,
                 profile: Optional[str] = None):
        """
        :param str idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param str profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[str]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GatewayTunnelConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoProvision":
            suggest = "auto_provision"
        elif key == "ikeLifetime":
            suggest = "ike_lifetime"
        elif key == "ikeMode":
            suggest = "ike_mode"
        elif key == "ikeProposals":
            suggest = "ike_proposals"
        elif key == "ipsecLifetime":
            suggest = "ipsec_lifetime"
        elif key == "ipsecProposals":
            suggest = "ipsec_proposals"
        elif key == "localId":
            suggest = "local_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_provision: Optional['outputs.GatewayTunnelConfigsAutoProvision'] = None,
                 ike_lifetime: Optional[int] = None,
                 ike_mode: Optional[str] = None,
                 ike_proposals: Optional[Sequence['outputs.GatewayTunnelConfigsIkeProposal']] = None,
                 ipsec_lifetime: Optional[int] = None,
                 ipsec_proposals: Optional[Sequence['outputs.GatewayTunnelConfigsIpsecProposal']] = None,
                 local_id: Optional[str] = None,
                 mode: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 primary: Optional['outputs.GatewayTunnelConfigsPrimary'] = None,
                 probe: Optional['outputs.GatewayTunnelConfigsProbe'] = None,
                 protocol: Optional[str] = None,
                 provider: Optional[str] = None,
                 psk: Optional[str] = None,
                 secondary: Optional['outputs.GatewayTunnelConfigsSecondary'] = None,
                 version: Optional[str] = None):
        """
        :param int ike_lifetime: Only if `provider`== `custom-ipsec`
        :param str ike_mode: Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        :param Sequence['GatewayTunnelConfigsIkeProposalArgs'] ike_proposals: if `provider`== `custom-ipsec`
        :param int ipsec_lifetime: if `provider`== `custom-ipsec`
        :param Sequence['GatewayTunnelConfigsIpsecProposalArgs'] ipsec_proposals: Only if  `provider`== `custom-ipsec`
        :param str local_id: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str mode: enum: `active-active`, `active-standby`
        :param Sequence[str] networks: networks reachable via this tunnel
        :param 'GatewayTunnelConfigsProbeArgs' probe: Only if `provider`== `custom-ipsec`
        :param str protocol: Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        :param str provider: enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        :param str psk: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str version: Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        if auto_provision is not None:
            pulumi.set(__self__, "auto_provision", auto_provision)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_mode is not None:
            pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_proposals is not None:
            pulumi.set(__self__, "ike_proposals", ike_proposals)
        if ipsec_lifetime is not None:
            pulumi.set(__self__, "ipsec_lifetime", ipsec_lifetime)
        if ipsec_proposals is not None:
            pulumi.set(__self__, "ipsec_proposals", ipsec_proposals)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoProvision")
    def auto_provision(self) -> Optional['outputs.GatewayTunnelConfigsAutoProvision']:
        return pulumi.get(self, "auto_provision")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[int]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        """
        return pulumi.get(self, "ike_mode")

    @property
    @pulumi.getter(name="ikeProposals")
    def ike_proposals(self) -> Optional[Sequence['outputs.GatewayTunnelConfigsIkeProposal']]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_proposals")

    @property
    @pulumi.getter(name="ipsecLifetime")
    def ipsec_lifetime(self) -> Optional[int]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_lifetime")

    @property
    @pulumi.getter(name="ipsecProposals")
    def ipsec_proposals(self) -> Optional[Sequence['outputs.GatewayTunnelConfigsIpsecProposal']]:
        """
        Only if  `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_proposals")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        enum: `active-active`, `active-standby`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        networks reachable via this tunnel
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.GatewayTunnelConfigsPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def probe(self) -> Optional['outputs.GatewayTunnelConfigsProbe']:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "probe")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def psk(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.GatewayTunnelConfigsSecondary']:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GatewayTunnelConfigsAutoProvision(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 latlng: Optional['outputs.GatewayTunnelConfigsAutoProvisionLatlng'] = None,
                 primary: Optional['outputs.GatewayTunnelConfigsAutoProvisionPrimary'] = None,
                 secondary: Optional['outputs.GatewayTunnelConfigsAutoProvisionSecondary'] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if latlng is not None:
            pulumi.set(__self__, "latlng", latlng)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def latlng(self) -> Optional['outputs.GatewayTunnelConfigsAutoProvisionLatlng']:
        return pulumi.get(self, "latlng")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.GatewayTunnelConfigsAutoProvisionPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.GatewayTunnelConfigsAutoProvisionSecondary']:
        return pulumi.get(self, "secondary")


@pulumi.output_type
class GatewayTunnelConfigsAutoProvisionLatlng(dict):
    def __init__(__self__, *,
                 lat: float,
                 lng: float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> float:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        return pulumi.get(self, "lng")


@pulumi.output_type
class GatewayTunnelConfigsAutoProvisionPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsAutoProvisionPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewayTunnelConfigsAutoProvisionSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsAutoProvisionSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewayTunnelConfigsIkeProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsIkeProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsIkeProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsIkeProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class GatewayTunnelConfigsIpsecProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsIpsecProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsIpsecProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsIpsecProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: Only if `provider`== `custom-ipsec`. enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class GatewayTunnelConfigsPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewayTunnelConfigsProbe(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 threshold: Optional[int] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int interval: how often to trigger the probe
        :param int threshold: number of consecutive misses before declaring the tunnel down
        :param int timeout: time within which to complete the connectivity check
        :param str type: enum: `http`, `icmp`
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        how often to trigger the probe
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        number of consecutive misses before declaring the tunnel down
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        time within which to complete the connectivity check
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewayTunnelConfigsSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelConfigsSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelConfigsSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelConfigsSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewayTunnelProviderOptions(dict):
    def __init__(__self__, *,
                 jse: Optional['outputs.GatewayTunnelProviderOptionsJse'] = None,
                 zscaler: Optional['outputs.GatewayTunnelProviderOptionsZscaler'] = None):
        """
        :param 'GatewayTunnelProviderOptionsJseArgs' jse: for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        :param 'GatewayTunnelProviderOptionsZscalerArgs' zscaler: for zscaler-ipsec and zscaler-gre
        """
        if jse is not None:
            pulumi.set(__self__, "jse", jse)
        if zscaler is not None:
            pulumi.set(__self__, "zscaler", zscaler)

    @property
    @pulumi.getter
    def jse(self) -> Optional['outputs.GatewayTunnelProviderOptionsJse']:
        """
        for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        """
        return pulumi.get(self, "jse")

    @property
    @pulumi.getter
    def zscaler(self) -> Optional['outputs.GatewayTunnelProviderOptionsZscaler']:
        """
        for zscaler-ipsec and zscaler-gre
        """
        return pulumi.get(self, "zscaler")


@pulumi.output_type
class GatewayTunnelProviderOptionsJse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numUsers":
            suggest = "num_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelProviderOptionsJse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelProviderOptionsJse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelProviderOptionsJse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 num_users: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_users is not None:
            pulumi.set(__self__, "num_users", num_users)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numUsers")
    def num_users(self) -> Optional[int]:
        return pulumi.get(self, "num_users")


@pulumi.output_type
class GatewayTunnelProviderOptionsZscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "subLocations":
            suggest = "sub_locations"
        elif key == "uploadMbps":
            suggest = "upload_mbps"
        elif key == "useXff":
            suggest = "use_xff"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelProviderOptionsZscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelProviderOptionsZscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelProviderOptionsZscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 name: Optional[str] = None,
                 sub_locations: Optional[Sequence['outputs.GatewayTunnelProviderOptionsZscalerSubLocation']] = None,
                 upload_mbps: Optional[int] = None,
                 use_xff: Optional[bool] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param Sequence['GatewayTunnelProviderOptionsZscalerSubLocationArgs'] sub_locations: if `use_xff`==`true`
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        :param bool use_xff: location uses proxy chaining to forward traffic
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_locations is not None:
            pulumi.set(__self__, "sub_locations", sub_locations)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)
        if use_xff is not None:
            pulumi.set(__self__, "use_xff", use_xff)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subLocations")
    def sub_locations(self) -> Optional[Sequence['outputs.GatewayTunnelProviderOptionsZscalerSubLocation']]:
        """
        if `use_xff`==`true`
        """
        return pulumi.get(self, "sub_locations")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @property
    @pulumi.getter(name="useXff")
    def use_xff(self) -> Optional[bool]:
        """
        location uses proxy chaining to forward traffic
        """
        return pulumi.get(self, "use_xff")


@pulumi.output_type
class GatewayTunnelProviderOptionsZscalerSubLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "uploadMbps":
            suggest = "upload_mbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewayTunnelProviderOptionsZscalerSubLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewayTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewayTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 subnets: Optional[Sequence[str]] = None,
                 upload_mbps: Optional[int] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")


@pulumi.output_type
class GatewayVrfConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewayVrfInstances(dict):
    def __init__(__self__, *,
                 networks: Optional[Sequence[str]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")


@pulumi.output_type
class SwitchAclPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "srcTags":
            suggest = "src_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchAclPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchAclPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchAclPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.SwitchAclPolicyAction']] = None,
                 name: Optional[str] = None,
                 src_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence['SwitchAclPolicyActionArgs'] actions: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        :param Sequence[str] src_tags: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_tags is not None:
            pulumi.set(__self__, "src_tags", src_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.SwitchAclPolicyAction']]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="srcTags")
    def src_tags(self) -> Optional[Sequence[str]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "src_tags")


@pulumi.output_type
class SwitchAclPolicyAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstTag":
            suggest = "dst_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchAclPolicyAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchAclPolicyAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchAclPolicyAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dst_tag: str,
                 action: Optional[str] = None):
        """
        :param str action: enum: `allow`, `deny`
        """
        pulumi.set(__self__, "dst_tag", dst_tag)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter(name="dstTag")
    def dst_tag(self) -> str:
        return pulumi.get(self, "dst_tag")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")


@pulumi.output_type
class SwitchAclTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gbpTag":
            suggest = "gbp_tag"
        elif key == "radiusGroup":
            suggest = "radius_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchAclTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchAclTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchAclTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 gbp_tag: Optional[int] = None,
                 macs: Optional[Sequence[str]] = None,
                 network: Optional[str] = None,
                 radius_group: Optional[str] = None,
                 specs: Optional[Sequence['outputs.SwitchAclTagsSpec']] = None,
                 subnets: Optional[Sequence[str]] = None):
        """
        :param str type: enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        :param int gbp_tag: required if
               - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
               - `type`==`static_gbp` (applying gbp tag against matching conditions)
        :param Sequence[str] macs: required if 
               - `type`==`mac`
               - `type`==`static_gbp` if from matching mac
        :param str network: if:
                 * `type`==`mac` (optional. default is `any`)
                 * `type`==`subnet` (optional. default is `any`)
                 * `type`==`network`
                 * `type`==`resource` (optional. default is `any`)
                 * `type`==`static_gbp` if from matching network (vlan)'
        :param str radius_group: required if:
                 * `type`==`radius_group`
                 * `type`==`static_gbp`
               if from matching radius_group
        :param Sequence['SwitchAclTagsSpecArgs'] specs: if `type`==`resource`
               empty means unrestricted, i.e. any
        :param Sequence[str] subnets: if 
               - `type`==`subnet` 
               - `type`==`resource` (optional. default is `any`)
               - `type`==`static_gbp` if from matching subnet
        """
        pulumi.set(__self__, "type", type)
        if gbp_tag is not None:
            pulumi.set(__self__, "gbp_tag", gbp_tag)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if radius_group is not None:
            pulumi.set(__self__, "radius_group", radius_group)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="gbpTag")
    def gbp_tag(self) -> Optional[int]:
        """
        required if
        - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
        - `type`==`static_gbp` (applying gbp tag against matching conditions)
        """
        return pulumi.get(self, "gbp_tag")

    @property
    @pulumi.getter
    def macs(self) -> Optional[Sequence[str]]:
        """
        required if 
        - `type`==`mac`
        - `type`==`static_gbp` if from matching mac
        """
        return pulumi.get(self, "macs")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        if:
          * `type`==`mac` (optional. default is `any`)
          * `type`==`subnet` (optional. default is `any`)
          * `type`==`network`
          * `type`==`resource` (optional. default is `any`)
          * `type`==`static_gbp` if from matching network (vlan)'
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="radiusGroup")
    def radius_group(self) -> Optional[str]:
        """
        required if:
          * `type`==`radius_group`
          * `type`==`static_gbp`
        if from matching radius_group
        """
        return pulumi.get(self, "radius_group")

    @property
    @pulumi.getter
    def specs(self) -> Optional[Sequence['outputs.SwitchAclTagsSpec']]:
        """
        if `type`==`resource`
        empty means unrestricted, i.e. any
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        """
        if 
        - `type`==`subnet` 
        - `type`==`resource` (optional. default is `any`)
        - `type`==`static_gbp` if from matching subnet
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class SwitchAclTagsSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchAclTagsSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchAclTagsSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchAclTagsSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str port_range: matched dst port, "0" means any
        :param str protocol: `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class SwitchDhcpSnooping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allNetworks":
            suggest = "all_networks"
        elif key == "enableArpSpoofCheck":
            suggest = "enable_arp_spoof_check"
        elif key == "enableIpSourceGuard":
            suggest = "enable_ip_source_guard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchDhcpSnooping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchDhcpSnooping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchDhcpSnooping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_networks: Optional[bool] = None,
                 enable_arp_spoof_check: Optional[bool] = None,
                 enable_ip_source_guard: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 networks: Optional[Sequence[str]] = None):
        """
        :param bool enable_arp_spoof_check: Enable for dynamic ARP inspection check
        :param bool enable_ip_source_guard: Enable for check for forging source IP address
        :param Sequence[str] networks: if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if enable_arp_spoof_check is not None:
            pulumi.set(__self__, "enable_arp_spoof_check", enable_arp_spoof_check)
        if enable_ip_source_guard is not None:
            pulumi.set(__self__, "enable_ip_source_guard", enable_ip_source_guard)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[bool]:
        return pulumi.get(self, "all_networks")

    @property
    @pulumi.getter(name="enableArpSpoofCheck")
    def enable_arp_spoof_check(self) -> Optional[bool]:
        """
        Enable for dynamic ARP inspection check
        """
        return pulumi.get(self, "enable_arp_spoof_check")

    @property
    @pulumi.getter(name="enableIpSourceGuard")
    def enable_ip_source_guard(self) -> Optional[bool]:
        """
        Enable for check for forging source IP address
        """
        return pulumi.get(self, "enable_ip_source_guard")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        return pulumi.get(self, "networks")


@pulumi.output_type
class SwitchDhcpdConfig(dict):
    def __init__(__self__, *,
                 config: Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfig']] = None,
                 enabled: Optional[bool] = None):
        """
        :param Mapping[str, 'SwitchDhcpdConfigConfigArgs'] config: Property key is the network name
        :param bool enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfig']]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class SwitchDhcpdConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "fixedBindings":
            suggest = "fixed_bindings"
        elif key == "ipEnd":
            suggest = "ip_end"
        elif key == "ipEnd6":
            suggest = "ip_end6"
        elif key == "ipStart":
            suggest = "ip_start"
        elif key == "ipStart6":
            suggest = "ip_start6"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "serverIdOverride":
            suggest = "server_id_override"
        elif key == "vendorEncapulated":
            suggest = "vendor_encapulated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchDhcpdConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchDhcpdConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchDhcpdConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 fixed_bindings: Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigFixedBindings']] = None,
                 gateway: Optional[str] = None,
                 ip_end: Optional[str] = None,
                 ip_end6: Optional[str] = None,
                 ip_start: Optional[str] = None,
                 ip_start6: Optional[str] = None,
                 lease_time: Optional[int] = None,
                 options: Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigOptions']] = None,
                 server_id_override: Optional[bool] = None,
                 servers: Optional[Sequence[str]] = None,
                 servers6s: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vendor_encapulated: Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigVendorEncapulated']] = None):
        """
        :param Sequence[str] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param Sequence[str] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param Mapping[str, 'SwitchDhcpdConfigConfigFixedBindingsArgs'] fixed_bindings: Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        :param str gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param str ip_end: if `type`==`local`
        :param str ip_end6: if `type6`==`local`
        :param str ip_start: if `type`==`local`
        :param str ip_start6: if `type6`==`local`
        :param int lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param Mapping[str, 'SwitchDhcpdConfigConfigOptionsArgs'] options: Property key is the DHCP option number
        :param bool server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param Sequence[str] servers: if `type`==`relay`
        :param Sequence[str] servers6s: if `type6`==`relay`
        :param str type: enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
        :param str type6: enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
        :param Mapping[str, 'SwitchDhcpdConfigConfigVendorEncapulatedArgs'] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigFixedBindings']]:
        """
        Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        return pulumi.get(self, "fixed_bindings")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigOptions']]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[bool]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[Sequence[str]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `none`, `relay` (DHCP Relay), `server` (DHCP Server)
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[Mapping[str, 'outputs.SwitchDhcpdConfigConfigVendorEncapulated']]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")


@pulumi.output_type
class SwitchDhcpdConfigConfigFixedBindings(dict):
    def __init__(__self__, *,
                 ip: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchDhcpdConfigConfigOptions(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SwitchDhcpdConfigConfigVendorEncapulated(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SwitchEvpnConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 role: Optional[str] = None):
        """
        :param str role: enum: `access`, `core`, `distribution`
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `access`, `core`, `distribution`
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class SwitchExtraRoutes6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextQualified":
            suggest = "next_qualified"
        elif key == "noResolve":
            suggest = "no_resolve"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchExtraRoutes6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchExtraRoutes6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchExtraRoutes6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 via: str,
                 discard: Optional[bool] = None,
                 metric: Optional[int] = None,
                 next_qualified: Optional[Mapping[str, 'outputs.SwitchExtraRoutes6NextQualified']] = None,
                 no_resolve: Optional[bool] = None,
                 preference: Optional[int] = None):
        """
        :param str via: next-hop IP Address
        :param bool discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter
    def discard(self) -> Optional[bool]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[Mapping[str, 'outputs.SwitchExtraRoutes6NextQualified']]:
        return pulumi.get(self, "next_qualified")

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[bool]:
        return pulumi.get(self, "no_resolve")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class SwitchExtraRoutes6NextQualified(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 preference: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class SwitchExtraRoutes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextQualified":
            suggest = "next_qualified"
        elif key == "noResolve":
            suggest = "no_resolve"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchExtraRoutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchExtraRoutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchExtraRoutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 via: str,
                 discard: Optional[bool] = None,
                 metric: Optional[int] = None,
                 next_qualified: Optional[Mapping[str, 'outputs.SwitchExtraRoutesNextQualified']] = None,
                 no_resolve: Optional[bool] = None,
                 preference: Optional[int] = None):
        """
        :param str via: next-hop IP Address
        :param bool discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter
    def discard(self) -> Optional[bool]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[Mapping[str, 'outputs.SwitchExtraRoutesNextQualified']]:
        return pulumi.get(self, "next_qualified")

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[bool]:
        return pulumi.get(self, "no_resolve")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class SwitchExtraRoutesNextQualified(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 preference: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class SwitchIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 network: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] dns: Required when `type`==`static`
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str network: the network where this mgmt IP reside, this will be used as default network for outbound-ssh, dns, ntp, dns, tacplus, radius, syslog, snmp
        :param str type: enum: `dhcp`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        Required when `type`==`static`
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        the network where this mgmt IP reside, this will be used as default network for outbound-ssh, dns, ntp, dns, tacplus, radius, syslog, snmp
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SwitchMistNac(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 network: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")


@pulumi.output_type
class SwitchNetworks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"
        elif key == "isolationVlanId":
            suggest = "isolation_vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchNetworks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchNetworks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchNetworks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_id: str,
                 isolation: Optional[bool] = None,
                 isolation_vlan_id: Optional[str] = None,
                 subnet: Optional[str] = None):
        """
        :param bool isolation: whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
               NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        :param str subnet: optional for pure switching, required when L3 / routing features are used
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if isolation_vlan_id is not None:
            pulumi.set(__self__, "isolation_vlan_id", isolation_vlan_id)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> str:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[bool]:
        """
        whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
        NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        """
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="isolationVlanId")
    def isolation_vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "isolation_vlan_id")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        optional for pure switching, required when L3 / routing features are used
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class SwitchOobIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchOobIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchOobIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchOobIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 network: Optional[str] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None):
        """
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str network: optional, the network to be used for mgmt
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: f supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        f supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")


@pulumi.output_type
class SwitchOspfAreas(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeLoopback":
            suggest = "include_loopback"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchOspfAreas. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchOspfAreas.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchOspfAreas.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 networks: Mapping[str, 'outputs.SwitchOspfAreasNetworks'],
                 include_loopback: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param str type: OSPF type. enum: `default`, `nssa`, `stub`
        """
        pulumi.set(__self__, "networks", networks)
        if include_loopback is not None:
            pulumi.set(__self__, "include_loopback", include_loopback)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def networks(self) -> Mapping[str, 'outputs.SwitchOspfAreasNetworks']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="includeLoopback")
    def include_loopback(self) -> Optional[bool]:
        return pulumi.get(self, "include_loopback")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        OSPF type. enum: `default`, `nssa`, `stub`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SwitchOspfAreasNetworks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKeys":
            suggest = "auth_keys"
        elif key == "authPassword":
            suggest = "auth_password"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "bfdMinimumInterval":
            suggest = "bfd_minimum_interval"
        elif key == "deadInterval":
            suggest = "dead_interval"
        elif key == "exportPolicy":
            suggest = "export_policy"
        elif key == "helloInterval":
            suggest = "hello_interval"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "interfaceType":
            suggest = "interface_type"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchOspfAreasNetworks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchOspfAreasNetworks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchOspfAreasNetworks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_keys: Optional[Mapping[str, str]] = None,
                 auth_password: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 bfd_minimum_interval: Optional[int] = None,
                 dead_interval: Optional[int] = None,
                 export_policy: Optional[str] = None,
                 hello_interval: Optional[int] = None,
                 import_policy: Optional[str] = None,
                 interface_type: Optional[str] = None,
                 metric: Optional[int] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 passive: Optional[bool] = None):
        """
        :param Mapping[str, str] auth_keys: Required if `auth_type`==`md5`. Property key is the key number
        :param str auth_password: Required if `auth_type`==`password`, the password, max length is 8
        :param str auth_type: auth type. enum: `md5`, `none`, `password`
        :param str interface_type: interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
        :param bool no_readvertise_to_overlay: by default, we'll re-advertise all learned OSPF routes toward overlay
        :param bool passive: whether to send OSPF-Hello
        """
        if auth_keys is not None:
            pulumi.set(__self__, "auth_keys", auth_keys)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)

    @property
    @pulumi.getter(name="authKeys")
    def auth_keys(self) -> Optional[Mapping[str, str]]:
        """
        Required if `auth_type`==`md5`. Property key is the key number
        """
        return pulumi.get(self, "auth_keys")

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[str]:
        """
        Required if `auth_type`==`password`, the password, max length is 8
        """
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        """
        auth type. enum: `md5`, `none`, `password`
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[int]:
        return pulumi.get(self, "bfd_minimum_interval")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[int]:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[int]:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[str]:
        """
        interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
        """
        return pulumi.get(self, "interface_type")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        by default, we'll re-advertise all learned OSPF routes toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter
    def passive(self) -> Optional[bool]:
        """
        whether to send OSPF-Hello
        """
        return pulumi.get(self, "passive")


@pulumi.output_type
class SwitchOtherIpConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evpnAnycast":
            suggest = "evpn_anycast"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchOtherIpConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchOtherIpConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchOtherIpConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 evpn_anycast: Optional[bool] = None,
                 ip: Optional[str] = None,
                 ip6: Optional[str] = None,
                 netmask: Optional[str] = None,
                 netmask6: Optional[str] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None):
        """
        :param bool evpn_anycast: for EVPN, if anycast is desired
        :param str ip: required if `type`==`static`
        :param str ip6: required if `type6`==`static`
        :param str netmask: optional, `subnet` from `network` definition will be used if defined
        :param str netmask6: optional, `subnet` from `network` definition will be used if defined
        :param str type: enum: `dhcp`, `static`
        :param str type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        if evpn_anycast is not None:
            pulumi.set(__self__, "evpn_anycast", evpn_anycast)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if netmask6 is not None:
            pulumi.set(__self__, "netmask6", netmask6)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)

    @property
    @pulumi.getter(name="evpnAnycast")
    def evpn_anycast(self) -> Optional[bool]:
        """
        for EVPN, if anycast is desired
        """
        return pulumi.get(self, "evpn_anycast")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        """
        required if `type6`==`static`
        """
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        optional, `subnet` from `network` definition will be used if defined
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> Optional[str]:
        """
        optional, `subnet` from `network` definition will be used if defined
        """
        return pulumi.get(self, "netmask6")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "type6")


@pulumi.output_type
class SwitchPortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aeDisableLacp":
            suggest = "ae_disable_lacp"
        elif key == "aeIdx":
            suggest = "ae_idx"
        elif key == "aeLacpSlow":
            suggest = "ae_lacp_slow"
        elif key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dynamicUsage":
            suggest = "dynamic_usage"
        elif key == "noLocalOverwrite":
            suggest = "no_local_overwrite"
        elif key == "poeDisabled":
            suggest = "poe_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchPortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchPortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchPortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage: str,
                 ae_disable_lacp: Optional[bool] = None,
                 ae_idx: Optional[int] = None,
                 ae_lacp_slow: Optional[bool] = None,
                 aggregated: Optional[bool] = None,
                 critical: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 duplex: Optional[str] = None,
                 dynamic_usage: Optional[str] = None,
                 esilag: Optional[bool] = None,
                 mtu: Optional[int] = None,
                 no_local_overwrite: Optional[bool] = None,
                 poe_disabled: Optional[bool] = None,
                 speed: Optional[str] = None):
        """
        :param str usage: port usage name. 
               
               If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        :param bool ae_disable_lacp: To disable LACP support for the AE interface
        :param int ae_idx: Users could force to use the designated AE name
        :param bool ae_lacp_slow: to use fast timeout
        :param bool critical: if want to generate port up/down alarm
        :param bool disable_autoneg: if `speed` and `duplex` are specified, whether to disable autonegotiation
        :param str duplex: enum: `auto`, `full`, `half`
        :param str dynamic_usage: Enable dynamic usage for this port. Set to `dynamic` to enable.
        :param int mtu: media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        :param bool no_local_overwrite: prevent helpdesk to override the port config
        :param str speed: enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_slow is not None:
            pulumi.set(__self__, "ae_lacp_slow", ae_lacp_slow)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_usage is not None:
            pulumi.set(__self__, "dynamic_usage", dynamic_usage)
        if esilag is not None:
            pulumi.set(__self__, "esilag", esilag)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if no_local_overwrite is not None:
            pulumi.set(__self__, "no_local_overwrite", no_local_overwrite)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def usage(self) -> str:
        """
        port usage name. 

        If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        """
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[bool]:
        """
        To disable LACP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[int]:
        """
        Users could force to use the designated AE name
        """
        return pulumi.get(self, "ae_idx")

    @property
    @pulumi.getter(name="aeLacpSlow")
    def ae_lacp_slow(self) -> Optional[bool]:
        """
        to use fast timeout
        """
        return pulumi.get(self, "ae_lacp_slow")

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[bool]:
        return pulumi.get(self, "aggregated")

    @property
    @pulumi.getter
    def critical(self) -> Optional[bool]:
        """
        if want to generate port up/down alarm
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        """
        if `speed` and `duplex` are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="dynamicUsage")
    def dynamic_usage(self) -> Optional[str]:
        """
        Enable dynamic usage for this port. Set to `dynamic` to enable.
        """
        return pulumi.get(self, "dynamic_usage")

    @property
    @pulumi.getter
    def esilag(self) -> Optional[bool]:
        return pulumi.get(self, "esilag")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="noLocalOverwrite")
    def no_local_overwrite(self) -> Optional[bool]:
        """
        prevent helpdesk to override the port config
        """
        return pulumi.get(self, "no_local_overwrite")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        """
        enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        return pulumi.get(self, "speed")


@pulumi.output_type
class SwitchPortMirroring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputNetworksIngresses":
            suggest = "input_networks_ingresses"
        elif key == "inputPortIdsEgresses":
            suggest = "input_port_ids_egresses"
        elif key == "inputPortIdsIngresses":
            suggest = "input_port_ids_ingresses"
        elif key == "outputNetwork":
            suggest = "output_network"
        elif key == "outputPortId":
            suggest = "output_port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchPortMirroring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchPortMirroring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchPortMirroring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_networks_ingresses: Optional[Sequence[str]] = None,
                 input_port_ids_egresses: Optional[Sequence[str]] = None,
                 input_port_ids_ingresses: Optional[Sequence[str]] = None,
                 output_network: Optional[str] = None,
                 output_port_id: Optional[str] = None):
        """
        :param Sequence[str] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param str output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param str output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")


@pulumi.output_type
class SwitchPortUsages(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allNetworks":
            suggest = "all_networks"
        elif key == "allowDhcpd":
            suggest = "allow_dhcpd"
        elif key == "allowMultipleSupplicants":
            suggest = "allow_multiple_supplicants"
        elif key == "bypassAuthWhenServerDown":
            suggest = "bypass_auth_when_server_down"
        elif key == "bypassAuthWhenServerDownForUnkonwnClient":
            suggest = "bypass_auth_when_server_down_for_unkonwn_client"
        elif key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dynamicVlanNetworks":
            suggest = "dynamic_vlan_networks"
        elif key == "enableMacAuth":
            suggest = "enable_mac_auth"
        elif key == "enableQos":
            suggest = "enable_qos"
        elif key == "guestNetwork":
            suggest = "guest_network"
        elif key == "interSwitchLink":
            suggest = "inter_switch_link"
        elif key == "macAuthOnly":
            suggest = "mac_auth_only"
        elif key == "macAuthPreferred":
            suggest = "mac_auth_preferred"
        elif key == "macAuthProtocol":
            suggest = "mac_auth_protocol"
        elif key == "macLimit":
            suggest = "mac_limit"
        elif key == "persistMac":
            suggest = "persist_mac"
        elif key == "poeDisabled":
            suggest = "poe_disabled"
        elif key == "portAuth":
            suggest = "port_auth"
        elif key == "portNetwork":
            suggest = "port_network"
        elif key == "reauthInterval":
            suggest = "reauth_interval"
        elif key == "resetDefaultWhen":
            suggest = "reset_default_when"
        elif key == "serverFailNetwork":
            suggest = "server_fail_network"
        elif key == "serverRejectNetwork":
            suggest = "server_reject_network"
        elif key == "stormControl":
            suggest = "storm_control"
        elif key == "stpEdge":
            suggest = "stp_edge"
        elif key == "stpNoRootPort":
            suggest = "stp_no_root_port"
        elif key == "stpP2p":
            suggest = "stp_p2p"
        elif key == "voipNetwork":
            suggest = "voip_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchPortUsages. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchPortUsages.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchPortUsages.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_networks: Optional[bool] = None,
                 allow_dhcpd: Optional[bool] = None,
                 allow_multiple_supplicants: Optional[bool] = None,
                 bypass_auth_when_server_down: Optional[bool] = None,
                 bypass_auth_when_server_down_for_unkonwn_client: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 duplex: Optional[str] = None,
                 dynamic_vlan_networks: Optional[Sequence[str]] = None,
                 enable_mac_auth: Optional[bool] = None,
                 enable_qos: Optional[bool] = None,
                 guest_network: Optional[str] = None,
                 inter_switch_link: Optional[bool] = None,
                 mac_auth_only: Optional[bool] = None,
                 mac_auth_preferred: Optional[bool] = None,
                 mac_auth_protocol: Optional[str] = None,
                 mac_limit: Optional[int] = None,
                 mode: Optional[str] = None,
                 mtu: Optional[int] = None,
                 networks: Optional[Sequence[str]] = None,
                 persist_mac: Optional[bool] = None,
                 poe_disabled: Optional[bool] = None,
                 port_auth: Optional[str] = None,
                 port_network: Optional[str] = None,
                 reauth_interval: Optional[int] = None,
                 reset_default_when: Optional[str] = None,
                 rules: Optional[Sequence['outputs.SwitchPortUsagesRule']] = None,
                 server_fail_network: Optional[str] = None,
                 server_reject_network: Optional[str] = None,
                 speed: Optional[str] = None,
                 storm_control: Optional['outputs.SwitchPortUsagesStormControl'] = None,
                 stp_edge: Optional[bool] = None,
                 stp_no_root_port: Optional[bool] = None,
                 stp_p2p: Optional[bool] = None,
                 voip_network: Optional[str] = None):
        """
        :param bool all_networks: Only if `mode`==`trunk` whether to trunk all network/vlans
        :param bool allow_dhcpd: Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.
               
               When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        :param bool allow_multiple_supplicants: Only if `mode`!=`dynamic`
        :param bool bypass_auth_when_server_down: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        :param bool bypass_auth_when_server_down_for_unkonwn_client: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        :param str description: Only if `mode`!=`dynamic`
        :param bool disable_autoneg: Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        :param bool disabled: Only if `mode`!=`dynamic` whether the port is disabled
        :param str duplex: Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        :param Sequence[str] dynamic_vlan_networks: Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        :param bool enable_mac_auth: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        :param bool enable_qos: Only if `mode`!=`dynamic`
        :param str guest_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        :param bool inter_switch_link: Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
               NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        :param bool mac_auth_only: Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        :param bool mac_auth_preferred: Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        :param str mac_auth_protocol: Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        :param int mac_limit: Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        :param str mode: `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        :param int mtu: Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        :param Sequence[str] networks: Only if `mode`==`trunk`, the list of network/vlans
        :param bool persist_mac: Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        :param bool poe_disabled: Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        :param str port_auth: Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        :param str port_network: Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        :param int reauth_interval: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        :param str reset_default_when: Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        :param Sequence['SwitchPortUsagesRuleArgs'] rules: Only if `mode`==`dynamic`
        :param str server_fail_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        :param str server_reject_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        :param str speed: Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        :param 'SwitchPortUsagesStormControlArgs' storm_control: Switch storm control
               Only if `mode`!=`dynamic`
        :param bool stp_edge: Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        :param str voip_network: Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if allow_dhcpd is not None:
            pulumi.set(__self__, "allow_dhcpd", allow_dhcpd)
        if allow_multiple_supplicants is not None:
            pulumi.set(__self__, "allow_multiple_supplicants", allow_multiple_supplicants)
        if bypass_auth_when_server_down is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down", bypass_auth_when_server_down)
        if bypass_auth_when_server_down_for_unkonwn_client is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down_for_unkonwn_client", bypass_auth_when_server_down_for_unkonwn_client)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_vlan_networks is not None:
            pulumi.set(__self__, "dynamic_vlan_networks", dynamic_vlan_networks)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if enable_qos is not None:
            pulumi.set(__self__, "enable_qos", enable_qos)
        if guest_network is not None:
            pulumi.set(__self__, "guest_network", guest_network)
        if inter_switch_link is not None:
            pulumi.set(__self__, "inter_switch_link", inter_switch_link)
        if mac_auth_only is not None:
            pulumi.set(__self__, "mac_auth_only", mac_auth_only)
        if mac_auth_preferred is not None:
            pulumi.set(__self__, "mac_auth_preferred", mac_auth_preferred)
        if mac_auth_protocol is not None:
            pulumi.set(__self__, "mac_auth_protocol", mac_auth_protocol)
        if mac_limit is not None:
            pulumi.set(__self__, "mac_limit", mac_limit)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if persist_mac is not None:
            pulumi.set(__self__, "persist_mac", persist_mac)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_auth is not None:
            pulumi.set(__self__, "port_auth", port_auth)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if reauth_interval is not None:
            pulumi.set(__self__, "reauth_interval", reauth_interval)
        if reset_default_when is not None:
            pulumi.set(__self__, "reset_default_when", reset_default_when)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if server_fail_network is not None:
            pulumi.set(__self__, "server_fail_network", server_fail_network)
        if server_reject_network is not None:
            pulumi.set(__self__, "server_reject_network", server_reject_network)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_edge is not None:
            pulumi.set(__self__, "stp_edge", stp_edge)
        if stp_no_root_port is not None:
            pulumi.set(__self__, "stp_no_root_port", stp_no_root_port)
        if stp_p2p is not None:
            pulumi.set(__self__, "stp_p2p", stp_p2p)
        if voip_network is not None:
            pulumi.set(__self__, "voip_network", voip_network)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[bool]:
        """
        Only if `mode`==`trunk` whether to trunk all network/vlans
        """
        return pulumi.get(self, "all_networks")

    @property
    @pulumi.getter(name="allowDhcpd")
    def allow_dhcpd(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.

        When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        """
        return pulumi.get(self, "allow_dhcpd")

    @property
    @pulumi.getter(name="allowMultipleSupplicants")
    def allow_multiple_supplicants(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "allow_multiple_supplicants")

    @property
    @pulumi.getter(name="bypassAuthWhenServerDown")
    def bypass_auth_when_server_down(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down")

    @property
    @pulumi.getter(name="bypassAuthWhenServerDownForUnkonwnClient")
    def bypass_auth_when_server_down_for_unkonwn_client(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down_for_unkonwn_client")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` whether the port is disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="dynamicVlanNetworks")
    def dynamic_vlan_networks(self) -> Optional[Sequence[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        """
        return pulumi.get(self, "dynamic_vlan_networks")

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        """
        return pulumi.get(self, "enable_mac_auth")

    @property
    @pulumi.getter(name="enableQos")
    def enable_qos(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "enable_qos")

    @property
    @pulumi.getter(name="guestNetwork")
    def guest_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        """
        return pulumi.get(self, "guest_network")

    @property
    @pulumi.getter(name="interSwitchLink")
    def inter_switch_link(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
        NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        """
        return pulumi.get(self, "inter_switch_link")

    @property
    @pulumi.getter(name="macAuthOnly")
    def mac_auth_only(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        """
        return pulumi.get(self, "mac_auth_only")

    @property
    @pulumi.getter(name="macAuthPreferred")
    def mac_auth_preferred(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        """
        return pulumi.get(self, "mac_auth_preferred")

    @property
    @pulumi.getter(name="macAuthProtocol")
    def mac_auth_protocol(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        """
        return pulumi.get(self, "mac_auth_protocol")

    @property
    @pulumi.getter(name="macLimit")
    def mac_limit(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        """
        return pulumi.get(self, "mac_limit")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        Only if `mode`==`trunk`, the list of network/vlans
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="persistMac")
    def persist_mac(self) -> Optional[bool]:
        """
        Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        """
        return pulumi.get(self, "persist_mac")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        """
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter(name="portAuth")
    def port_auth(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        """
        return pulumi.get(self, "port_auth")

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        """
        return pulumi.get(self, "port_network")

    @property
    @pulumi.getter(name="reauthInterval")
    def reauth_interval(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        """
        return pulumi.get(self, "reauth_interval")

    @property
    @pulumi.getter(name="resetDefaultWhen")
    def reset_default_when(self) -> Optional[str]:
        """
        Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        """
        return pulumi.get(self, "reset_default_when")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.SwitchPortUsagesRule']]:
        """
        Only if `mode`==`dynamic`
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="serverFailNetwork")
    def server_fail_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        """
        return pulumi.get(self, "server_fail_network")

    @property
    @pulumi.getter(name="serverRejectNetwork")
    def server_reject_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        """
        return pulumi.get(self, "server_reject_network")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional['outputs.SwitchPortUsagesStormControl']:
        """
        Switch storm control
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "storm_control")

    @property
    @pulumi.getter(name="stpEdge")
    def stp_edge(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        """
        return pulumi.get(self, "stp_edge")

    @property
    @pulumi.getter(name="stpNoRootPort")
    def stp_no_root_port(self) -> Optional[bool]:
        return pulumi.get(self, "stp_no_root_port")

    @property
    @pulumi.getter(name="stpP2p")
    def stp_p2p(self) -> Optional[bool]:
        return pulumi.get(self, "stp_p2p")

    @property
    @pulumi.getter(name="voipNetwork")
    def voip_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        return pulumi.get(self, "voip_network")


@pulumi.output_type
class SwitchPortUsagesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equalsAnies":
            suggest = "equals_anies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchPortUsagesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchPortUsagesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchPortUsagesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 src: str,
                 equals: Optional[str] = None,
                 equals_anies: Optional[Sequence[str]] = None,
                 expression: Optional[str] = None,
                 usage: Optional[str] = None):
        """
        :param str src: enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        :param Sequence[str] equals_anies: use `equals_any` to match any item in a list
        :param str expression: "[0:3]":"abcdef" > "abc"
               "split(.)[1]": "a.b.c" > "b"
               "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        :param str usage: `port_usage` name
        """
        pulumi.set(__self__, "src", src)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if equals_anies is not None:
            pulumi.set(__self__, "equals_anies", equals_anies)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def equals(self) -> Optional[str]:
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter(name="equalsAnies")
    def equals_anies(self) -> Optional[Sequence[str]]:
        """
        use `equals_any` to match any item in a list
        """
        return pulumi.get(self, "equals_anies")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        "[0:3]":"abcdef" > "abc"
        "split(.)[1]": "a.b.c" > "b"
        "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def usage(self) -> Optional[str]:
        """
        `port_usage` name
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class SwitchPortUsagesStormControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noBroadcast":
            suggest = "no_broadcast"
        elif key == "noMulticast":
            suggest = "no_multicast"
        elif key == "noRegisteredMulticast":
            suggest = "no_registered_multicast"
        elif key == "noUnknownUnicast":
            suggest = "no_unknown_unicast"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchPortUsagesStormControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchPortUsagesStormControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchPortUsagesStormControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_broadcast: Optional[bool] = None,
                 no_multicast: Optional[bool] = None,
                 no_registered_multicast: Optional[bool] = None,
                 no_unknown_unicast: Optional[bool] = None,
                 percentage: Optional[int] = None):
        """
        :param bool no_broadcast: whether to disable storm control on broadcast traffic
        :param bool no_multicast: whether to disable storm control on multicast traffic
        :param bool no_registered_multicast: whether to disable storm control on registered multicast traffic
        :param bool no_unknown_unicast: whether to disable storm control on unknown unicast traffic
        :param int percentage: bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        if no_broadcast is not None:
            pulumi.set(__self__, "no_broadcast", no_broadcast)
        if no_multicast is not None:
            pulumi.set(__self__, "no_multicast", no_multicast)
        if no_registered_multicast is not None:
            pulumi.set(__self__, "no_registered_multicast", no_registered_multicast)
        if no_unknown_unicast is not None:
            pulumi.set(__self__, "no_unknown_unicast", no_unknown_unicast)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="noBroadcast")
    def no_broadcast(self) -> Optional[bool]:
        """
        whether to disable storm control on broadcast traffic
        """
        return pulumi.get(self, "no_broadcast")

    @property
    @pulumi.getter(name="noMulticast")
    def no_multicast(self) -> Optional[bool]:
        """
        whether to disable storm control on multicast traffic
        """
        return pulumi.get(self, "no_multicast")

    @property
    @pulumi.getter(name="noRegisteredMulticast")
    def no_registered_multicast(self) -> Optional[bool]:
        """
        whether to disable storm control on registered multicast traffic
        """
        return pulumi.get(self, "no_registered_multicast")

    @property
    @pulumi.getter(name="noUnknownUnicast")
    def no_unknown_unicast(self) -> Optional[bool]:
        """
        whether to disable storm control on unknown unicast traffic
        """
        return pulumi.get(self, "no_unknown_unicast")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class SwitchRadiusConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acctInterimInterval":
            suggest = "acct_interim_interval"
        elif key == "acctServers":
            suggest = "acct_servers"
        elif key == "authServers":
            suggest = "auth_servers"
        elif key == "authServersRetries":
            suggest = "auth_servers_retries"
        elif key == "authServersTimeout":
            suggest = "auth_servers_timeout"
        elif key == "coaEnabled":
            suggest = "coa_enabled"
        elif key == "coaPort":
            suggest = "coa_port"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRadiusConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRadiusConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRadiusConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acct_interim_interval: Optional[int] = None,
                 acct_servers: Optional[Sequence['outputs.SwitchRadiusConfigAcctServer']] = None,
                 auth_servers: Optional[Sequence['outputs.SwitchRadiusConfigAuthServer']] = None,
                 auth_servers_retries: Optional[int] = None,
                 auth_servers_timeout: Optional[int] = None,
                 coa_enabled: Optional[bool] = None,
                 coa_port: Optional[int] = None,
                 network: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param int acct_interim_interval: how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        :param int auth_servers_retries: radius auth session retries
        :param int auth_servers_timeout: radius auth session timeout
        :param str network: use `network`or `source_ip`
               which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        :param str source_ip: use `network`or `source_ip`
        """
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if auth_servers_retries is not None:
            pulumi.set(__self__, "auth_servers_retries", auth_servers_retries)
        if auth_servers_timeout is not None:
            pulumi.set(__self__, "auth_servers_timeout", auth_servers_timeout)
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if coa_port is not None:
            pulumi.set(__self__, "coa_port", coa_port)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[int]:
        """
        how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        """
        return pulumi.get(self, "acct_interim_interval")

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[Sequence['outputs.SwitchRadiusConfigAcctServer']]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[Sequence['outputs.SwitchRadiusConfigAuthServer']]:
        return pulumi.get(self, "auth_servers")

    @property
    @pulumi.getter(name="authServersRetries")
    def auth_servers_retries(self) -> Optional[int]:
        """
        radius auth session retries
        """
        return pulumi.get(self, "auth_servers_retries")

    @property
    @pulumi.getter(name="authServersTimeout")
    def auth_servers_timeout(self) -> Optional[int]:
        """
        radius auth session timeout
        """
        return pulumi.get(self, "auth_servers_timeout")

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "coa_enabled")

    @property
    @pulumi.getter(name="coaPort")
    def coa_port(self) -> Optional[int]:
        return pulumi.get(self, "coa_port")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        use `network`or `source_ip`
        which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        use `network`or `source_ip`
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class SwitchRadiusConfigAcctServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRadiusConfigAcctServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRadiusConfigAcctServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRadiusConfigAcctServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class SwitchRadiusConfigAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"
        elif key == "requireMessageAuthenticator":
            suggest = "require_message_authenticator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRadiusConfigAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRadiusConfigAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRadiusConfigAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None,
                 require_message_authenticator: Optional[bool] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Auth port of RADIUS server
        :param bool require_message_authenticator: whether to require Message-Authenticator in requests
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if require_message_authenticator is not None:
            pulumi.set(__self__, "require_message_authenticator", require_message_authenticator)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="requireMessageAuthenticator")
    def require_message_authenticator(self) -> Optional[bool]:
        """
        whether to require Message-Authenticator in requests
        """
        return pulumi.get(self, "require_message_authenticator")


@pulumi.output_type
class SwitchRemoteSyslog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendToAllServers":
            suggest = "send_to_all_servers"
        elif key == "timeFormat":
            suggest = "time_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRemoteSyslog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRemoteSyslog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRemoteSyslog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive: Optional['outputs.SwitchRemoteSyslogArchive'] = None,
                 console: Optional['outputs.SwitchRemoteSyslogConsole'] = None,
                 enabled: Optional[bool] = None,
                 files: Optional[Sequence['outputs.SwitchRemoteSyslogFile']] = None,
                 network: Optional[str] = None,
                 send_to_all_servers: Optional[bool] = None,
                 servers: Optional[Sequence['outputs.SwitchRemoteSyslogServer']] = None,
                 time_format: Optional[str] = None,
                 users: Optional[Sequence['outputs.SwitchRemoteSyslogUser']] = None):
        """
        :param str network: if source_address is configured, will use the vlan firstly otherwise use source_ip
        :param str time_format: enum: `millisecond`, `year`, `year millisecond`
        """
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if send_to_all_servers is not None:
            pulumi.set(__self__, "send_to_all_servers", send_to_all_servers)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def archive(self) -> Optional['outputs.SwitchRemoteSyslogArchive']:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def console(self) -> Optional['outputs.SwitchRemoteSyslogConsole']:
        return pulumi.get(self, "console")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogFile']]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="sendToAllServers")
    def send_to_all_servers(self) -> Optional[bool]:
        return pulumi.get(self, "send_to_all_servers")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogServer']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        """
        enum: `millisecond`, `year`, `year millisecond`
        """
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class SwitchRemoteSyslogArchive(dict):
    def __init__(__self__, *,
                 files: Optional[int] = None,
                 size: Optional[str] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[int]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class SwitchRemoteSyslogConsole(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.SwitchRemoteSyslogConsoleContent']] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogConsoleContent']]:
        return pulumi.get(self, "contents")


@pulumi.output_type
class SwitchRemoteSyslogConsoleContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class SwitchRemoteSyslogFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "explicitPriority":
            suggest = "explicit_priority"
        elif key == "structuredData":
            suggest = "structured_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRemoteSyslogFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRemoteSyslogFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRemoteSyslogFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive: Optional['outputs.SwitchRemoteSyslogFileArchive'] = None,
                 contents: Optional[Sequence['outputs.SwitchRemoteSyslogFileContent']] = None,
                 explicit_priority: Optional[bool] = None,
                 file: Optional[str] = None,
                 match: Optional[str] = None,
                 structured_data: Optional[bool] = None):
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)

    @property
    @pulumi.getter
    def archive(self) -> Optional['outputs.SwitchRemoteSyslogFileArchive']:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogFileContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[bool]:
        return pulumi.get(self, "explicit_priority")

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[bool]:
        return pulumi.get(self, "structured_data")


@pulumi.output_type
class SwitchRemoteSyslogFileArchive(dict):
    def __init__(__self__, *,
                 files: Optional[int] = None,
                 size: Optional[str] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[int]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class SwitchRemoteSyslogFileContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class SwitchRemoteSyslogServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "explicitPriority":
            suggest = "explicit_priority"
        elif key == "routingInstance":
            suggest = "routing_instance"
        elif key == "sourceAddress":
            suggest = "source_address"
        elif key == "structuredData":
            suggest = "structured_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchRemoteSyslogServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchRemoteSyslogServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchRemoteSyslogServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.SwitchRemoteSyslogServerContent']] = None,
                 explicit_priority: Optional[bool] = None,
                 facility: Optional[str] = None,
                 host: Optional[str] = None,
                 match: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 routing_instance: Optional[str] = None,
                 severity: Optional[str] = None,
                 source_address: Optional[str] = None,
                 structured_data: Optional[bool] = None,
                 tag: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str protocol: enum: `tcp`, `udp`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        :param str source_address: if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routing_instance is not None:
            pulumi.set(__self__, "routing_instance", routing_instance)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogServerContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[bool]:
        return pulumi.get(self, "explicit_priority")

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        enum: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="routingInstance")
    def routing_instance(self) -> Optional[str]:
        return pulumi.get(self, "routing_instance")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[str]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "source_address")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[bool]:
        return pulumi.get(self, "structured_data")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class SwitchRemoteSyslogServerContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class SwitchRemoteSyslogUser(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.SwitchRemoteSyslogUserContent']] = None,
                 match: Optional[str] = None,
                 user: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchRemoteSyslogUserContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class SwitchRemoteSyslogUserContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class SwitchSnmpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientLists":
            suggest = "client_lists"
        elif key == "engineId":
            suggest = "engine_id"
        elif key == "trapGroups":
            suggest = "trap_groups"
        elif key == "v2cConfigs":
            suggest = "v2c_configs"
        elif key == "v3Config":
            suggest = "v3_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_lists: Optional[Sequence['outputs.SwitchSnmpConfigClientList']] = None,
                 contact: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 engine_id: Optional[str] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 network: Optional[str] = None,
                 trap_groups: Optional[Sequence['outputs.SwitchSnmpConfigTrapGroup']] = None,
                 v2c_configs: Optional[Sequence['outputs.SwitchSnmpConfigV2cConfig']] = None,
                 v3_config: Optional['outputs.SwitchSnmpConfigV3Config'] = None,
                 views: Optional[Sequence['outputs.SwitchSnmpConfigView']] = None):
        """
        :param str engine_id: enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        if client_lists is not None:
            pulumi.set(__self__, "client_lists", client_lists)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if trap_groups is not None:
            pulumi.set(__self__, "trap_groups", trap_groups)
        if v2c_configs is not None:
            pulumi.set(__self__, "v2c_configs", v2c_configs)
        if v3_config is not None:
            pulumi.set(__self__, "v3_config", v3_config)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="clientLists")
    def client_lists(self) -> Optional[Sequence['outputs.SwitchSnmpConfigClientList']]:
        return pulumi.get(self, "client_lists")

    @property
    @pulumi.getter
    def contact(self) -> Optional[str]:
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[str]:
        """
        enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="trapGroups")
    def trap_groups(self) -> Optional[Sequence['outputs.SwitchSnmpConfigTrapGroup']]:
        return pulumi.get(self, "trap_groups")

    @property
    @pulumi.getter(name="v2cConfigs")
    def v2c_configs(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV2cConfig']]:
        return pulumi.get(self, "v2c_configs")

    @property
    @pulumi.getter(name="v3Config")
    def v3_config(self) -> Optional['outputs.SwitchSnmpConfigV3Config']:
        return pulumi.get(self, "v3_config")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.SwitchSnmpConfigView']]:
        return pulumi.get(self, "views")


@pulumi.output_type
class SwitchSnmpConfigClientList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientListName":
            suggest = "client_list_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigClientList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigClientList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigClientList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_list_name: Optional[str] = None,
                 clients: Optional[Sequence[str]] = None):
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if clients is not None:
            pulumi.set(__self__, "clients", clients)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[str]:
        return pulumi.get(self, "client_list_name")

    @property
    @pulumi.getter
    def clients(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "clients")


@pulumi.output_type
class SwitchSnmpConfigTrapGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigTrapGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigTrapGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigTrapGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence[str]] = None,
                 group_name: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None,
                 version: Optional[str] = None):
        """
        :param str group_name: Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        :param str version: enum: `all`, `v1`, `v2`
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        enum: `all`, `v1`, `v2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class SwitchSnmpConfigV2cConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientListName":
            suggest = "client_list_name"
        elif key == "communityName":
            suggest = "community_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV2cConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV2cConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV2cConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 client_list_name: Optional[str] = None,
                 community_name: Optional[str] = None,
                 view: Optional[str] = None):
        """
        :param str client_list_name: client_list_name here should refer to client_list above
        :param str view: view name here should be defined in views above
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[str]:
        """
        client_list_name here should refer to client_list above
        """
        return pulumi.get(self, "client_list_name")

    @property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[str]:
        return pulumi.get(self, "community_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        """
        view name here should be defined in views above
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class SwitchSnmpConfigV3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyFilters":
            suggest = "notify_filters"
        elif key == "targetAddresses":
            suggest = "target_addresses"
        elif key == "targetParameters":
            suggest = "target_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notifies: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotify']] = None,
                 notify_filters: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotifyFilter']] = None,
                 target_addresses: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigTargetAddress']] = None,
                 target_parameters: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigTargetParameter']] = None,
                 usm: Optional['outputs.SwitchSnmpConfigV3ConfigUsm'] = None,
                 vacm: Optional['outputs.SwitchSnmpConfigV3ConfigVacm'] = None):
        if notifies is not None:
            pulumi.set(__self__, "notifies", notifies)
        if notify_filters is not None:
            pulumi.set(__self__, "notify_filters", notify_filters)
        if target_addresses is not None:
            pulumi.set(__self__, "target_addresses", target_addresses)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)
        if usm is not None:
            pulumi.set(__self__, "usm", usm)
        if vacm is not None:
            pulumi.set(__self__, "vacm", vacm)

    @property
    @pulumi.getter
    def notifies(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotify']]:
        return pulumi.get(self, "notifies")

    @property
    @pulumi.getter(name="notifyFilters")
    def notify_filters(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotifyFilter']]:
        return pulumi.get(self, "notify_filters")

    @property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigTargetAddress']]:
        return pulumi.get(self, "target_addresses")

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigTargetParameter']]:
        return pulumi.get(self, "target_parameters")

    @property
    @pulumi.getter
    def usm(self) -> Optional['outputs.SwitchSnmpConfigV3ConfigUsm']:
        return pulumi.get(self, "usm")

    @property
    @pulumi.getter
    def vacm(self) -> Optional['outputs.SwitchSnmpConfigV3ConfigVacm']:
        return pulumi.get(self, "vacm")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigNotify(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 tag: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str type: enum: `inform`, `trap`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `inform`, `trap`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigNotifyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileName":
            suggest = "profile_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigNotifyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigNotifyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigNotifyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotifyFilterContent']] = None,
                 profile_name: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigNotifyFilterContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigNotifyFilterContent(dict):
    def __init__(__self__, *,
                 include: Optional[bool] = None,
                 oid: Optional[str] = None):
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def include(self) -> Optional[bool]:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def oid(self) -> Optional[str]:
        return pulumi.get(self, "oid")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigTargetAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressMask":
            suggest = "address_mask"
        elif key == "tagList":
            suggest = "tag_list"
        elif key == "targetAddressName":
            suggest = "target_address_name"
        elif key == "targetParameters":
            suggest = "target_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigTargetAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigTargetAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigTargetAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 address_mask: Optional[str] = None,
                 port: Optional[int] = None,
                 tag_list: Optional[str] = None,
                 target_address_name: Optional[str] = None,
                 target_parameters: Optional[str] = None):
        """
        :param str tag_list: <refer to notify tag, can be multiple with blank
        :param str target_parameters: refer to notify target parameters name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_mask is not None:
            pulumi.set(__self__, "address_mask", address_mask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tag_list is not None:
            pulumi.set(__self__, "tag_list", tag_list)
        if target_address_name is not None:
            pulumi.set(__self__, "target_address_name", target_address_name)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressMask")
    def address_mask(self) -> Optional[str]:
        return pulumi.get(self, "address_mask")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tagList")
    def tag_list(self) -> Optional[str]:
        """
        <refer to notify tag, can be multiple with blank
        """
        return pulumi.get(self, "tag_list")

    @property
    @pulumi.getter(name="targetAddressName")
    def target_address_name(self) -> Optional[str]:
        return pulumi.get(self, "target_address_name")

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[str]:
        """
        refer to notify target parameters name
        """
        return pulumi.get(self, "target_parameters")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigTargetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageProcessingModel":
            suggest = "message_processing_model"
        elif key == "notifyFilter":
            suggest = "notify_filter"
        elif key == "securityLevel":
            suggest = "security_level"
        elif key == "securityModel":
            suggest = "security_model"
        elif key == "securityName":
            suggest = "security_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigTargetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigTargetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigTargetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_processing_model: Optional[str] = None,
                 name: Optional[str] = None,
                 notify_filter: Optional[str] = None,
                 security_level: Optional[str] = None,
                 security_model: Optional[str] = None,
                 security_name: Optional[str] = None):
        """
        :param str message_processing_model: enum: `v1`, `v2c`, `v3`
        :param str notify_filter: refer to profile-name in notify_filter
        :param str security_level: enum: `authentication`, `none`, `privacy`
        :param str security_model: enum: `usm`, `v1`, `v2c`
        :param str security_name: refer to security_name in usm
        """
        if message_processing_model is not None:
            pulumi.set(__self__, "message_processing_model", message_processing_model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_filter is not None:
            pulumi.set(__self__, "notify_filter", notify_filter)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter(name="messageProcessingModel")
    def message_processing_model(self) -> Optional[str]:
        """
        enum: `v1`, `v2c`, `v3`
        """
        return pulumi.get(self, "message_processing_model")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyFilter")
    def notify_filter(self) -> Optional[str]:
        """
        refer to profile-name in notify_filter
        """
        return pulumi.get(self, "notify_filter")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[str]:
        """
        refer to security_name in usm
        """
        return pulumi.get(self, "security_name")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigUsm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineType":
            suggest = "engine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigUsm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigUsm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigUsm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_type: Optional[str] = None,
                 engineid: Optional[str] = None,
                 users: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigUsmUser']] = None):
        """
        :param str engine_type: enum: `local_engine`, `remote_engine`
        :param str engineid: required only if `engine_type`==`remote_engine`
        """
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engineid is not None:
            pulumi.set(__self__, "engineid", engineid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[str]:
        """
        enum: `local_engine`, `remote_engine`
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def engineid(self) -> Optional[str]:
        """
        required only if `engine_type`==`remote_engine`
        """
        return pulumi.get(self, "engineid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigUsmUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigUsmUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationPassword":
            suggest = "authentication_password"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "encryptionPassword":
            suggest = "encryption_password"
        elif key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigUsmUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigUsmUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigUsmUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_password: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 encryption_password: Optional[str] = None,
                 encryption_type: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str authentication_password: Not required if `authentication_type`==`authentication_none`
               include alphabetic, numeric, and special characters, but it cannot include control characters.
        :param str authentication_type: sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        :param str encryption_password: Not required if `encryption_type`==`privacy-none`
               include alphabetic, numeric, and special characters, but it cannot include control characters
        :param str encryption_type: enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if encryption_password is not None:
            pulumi.set(__self__, "encryption_password", encryption_password)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[str]:
        """
        Not required if `authentication_type`==`authentication_none`
        include alphabetic, numeric, and special characters, but it cannot include control characters.
        """
        return pulumi.get(self, "authentication_password")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        """
        sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="encryptionPassword")
    def encryption_password(self) -> Optional[str]:
        """
        Not required if `encryption_type`==`privacy-none`
        include alphabetic, numeric, and special characters, but it cannot include control characters
        """
        return pulumi.get(self, "encryption_password")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        """
        enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigVacm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityToGroup":
            suggest = "security_to_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigVacm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigVacm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigVacm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accesses: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmAccess']] = None,
                 security_to_group: Optional['outputs.SwitchSnmpConfigV3ConfigVacmSecurityToGroup'] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if security_to_group is not None:
            pulumi.set(__self__, "security_to_group", security_to_group)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmAccess']]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter(name="securityToGroup")
    def security_to_group(self) -> Optional['outputs.SwitchSnmpConfigV3ConfigVacmSecurityToGroup']:
        return pulumi.get(self, "security_to_group")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigVacmAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "prefixLists":
            suggest = "prefix_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigVacmAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigVacmAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigVacmAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[str] = None,
                 prefix_lists: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmAccessPrefixList']] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmAccessPrefixList']]:
        return pulumi.get(self, "prefix_lists")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigVacmAccessPrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contextPrefix":
            suggest = "context_prefix"
        elif key == "notifyView":
            suggest = "notify_view"
        elif key == "readView":
            suggest = "read_view"
        elif key == "securityLevel":
            suggest = "security_level"
        elif key == "securityModel":
            suggest = "security_model"
        elif key == "writeView":
            suggest = "write_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigVacmAccessPrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigVacmAccessPrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigVacmAccessPrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 context_prefix: Optional[str] = None,
                 notify_view: Optional[str] = None,
                 read_view: Optional[str] = None,
                 security_level: Optional[str] = None,
                 security_model: Optional[str] = None,
                 type: Optional[str] = None,
                 write_view: Optional[str] = None):
        """
        :param str context_prefix: only required if `type`==`context_prefix`
        :param str notify_view: refer to view name
        :param str read_view: refer to view name
        :param str security_level: enum: `authentication`, `none`, `privacy`
        :param str security_model: enum: `any`, `usm`, `v1`, `v2c`
        :param str type: enum: `context_prefix`, `default_context_prefix`
        :param str write_view: refer to view name
        """
        if context_prefix is not None:
            pulumi.set(__self__, "context_prefix", context_prefix)
        if notify_view is not None:
            pulumi.set(__self__, "notify_view", notify_view)
        if read_view is not None:
            pulumi.set(__self__, "read_view", read_view)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if write_view is not None:
            pulumi.set(__self__, "write_view", write_view)

    @property
    @pulumi.getter(name="contextPrefix")
    def context_prefix(self) -> Optional[str]:
        """
        only required if `type`==`context_prefix`
        """
        return pulumi.get(self, "context_prefix")

    @property
    @pulumi.getter(name="notifyView")
    def notify_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "notify_view")

    @property
    @pulumi.getter(name="readView")
    def read_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "read_view")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `any`, `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `context_prefix`, `default_context_prefix`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="writeView")
    def write_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "write_view")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigVacmSecurityToGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityModel":
            suggest = "security_model"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigVacmSecurityToGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigVacmSecurityToGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigVacmSecurityToGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent']] = None,
                 security_model: Optional[str] = None):
        """
        :param str security_model: enum: `usm`, `v1`, `v2c`
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")


@pulumi.output_type
class SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityName":
            suggest = "security_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigV3ConfigVacmSecurityToGroupContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 security_name: Optional[str] = None):
        """
        :param str group: refer to group_name under access
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        refer to group_name under access
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[str]:
        return pulumi.get(self, "security_name")


@pulumi.output_type
class SwitchSnmpConfigView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSnmpConfigView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSnmpConfigView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSnmpConfigView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include: Optional[bool] = None,
                 oid: Optional[str] = None,
                 view_name: Optional[str] = None):
        """
        :param bool include: if the root oid configured is included
        """
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def include(self) -> Optional[bool]:
        """
        if the root oid configured is included
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def oid(self) -> Optional[str]:
        return pulumi.get(self, "oid")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        return pulumi.get(self, "view_name")


@pulumi.output_type
class SwitchStpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vstpEnabled":
            suggest = "vstp_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchStpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchStpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchStpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vstp_enabled: Optional[bool] = None):
        """
        :param bool vstp_enabled: ignored for switches participating in EVPN
        """
        if vstp_enabled is not None:
            pulumi.set(__self__, "vstp_enabled", vstp_enabled)

    @property
    @pulumi.getter(name="vstpEnabled")
    def vstp_enabled(self) -> Optional[bool]:
        """
        ignored for switches participating in EVPN
        """
        return pulumi.get(self, "vstp_enabled")


@pulumi.output_type
class SwitchSwitchMgmt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apAffinityThreshold":
            suggest = "ap_affinity_threshold"
        elif key == "cliBanner":
            suggest = "cli_banner"
        elif key == "cliIdleTimeout":
            suggest = "cli_idle_timeout"
        elif key == "configRevertTimer":
            suggest = "config_revert_timer"
        elif key == "dhcpOptionFqdn":
            suggest = "dhcp_option_fqdn"
        elif key == "disableOobDownAlarm":
            suggest = "disable_oob_down_alarm"
        elif key == "localAccounts":
            suggest = "local_accounts"
        elif key == "mxedgeProxyHost":
            suggest = "mxedge_proxy_host"
        elif key == "mxedgeProxyPort":
            suggest = "mxedge_proxy_port"
        elif key == "protectRe":
            suggest = "protect_re"
        elif key == "rootPassword":
            suggest = "root_password"
        elif key == "useMxedgeProxy":
            suggest = "use_mxedge_proxy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSwitchMgmt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSwitchMgmt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSwitchMgmt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ap_affinity_threshold: Optional[int] = None,
                 cli_banner: Optional[str] = None,
                 cli_idle_timeout: Optional[int] = None,
                 config_revert_timer: Optional[int] = None,
                 dhcp_option_fqdn: Optional[bool] = None,
                 disable_oob_down_alarm: Optional[bool] = None,
                 local_accounts: Optional[Mapping[str, 'outputs.SwitchSwitchMgmtLocalAccounts']] = None,
                 mxedge_proxy_host: Optional[str] = None,
                 mxedge_proxy_port: Optional[int] = None,
                 protect_re: Optional['outputs.SwitchSwitchMgmtProtectRe'] = None,
                 root_password: Optional[str] = None,
                 tacacs: Optional['outputs.SwitchSwitchMgmtTacacs'] = None,
                 use_mxedge_proxy: Optional[bool] = None):
        """
        :param int ap_affinity_threshold: ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        :param str cli_banner: Set Banners for switches. Allows markup formatting
        :param int cli_idle_timeout: Sets timeout for switches
        :param int config_revert_timer: the rollback timer for commit confirmed
        :param bool dhcp_option_fqdn: Enable to provide the FQDN with DHCP option 81
        :param Mapping[str, 'SwitchSwitchMgmtLocalAccountsArgs'] local_accounts: Property key is the user name. For Local user authentication
        :param 'SwitchSwitchMgmtProtectReArgs' protect_re: restrict inbound-traffic to host
               when enabled, all traffic that is not essential to our operation will be dropped 
               e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        :param bool use_mxedge_proxy: to use mxedge as proxy
        """
        if ap_affinity_threshold is not None:
            pulumi.set(__self__, "ap_affinity_threshold", ap_affinity_threshold)
        if cli_banner is not None:
            pulumi.set(__self__, "cli_banner", cli_banner)
        if cli_idle_timeout is not None:
            pulumi.set(__self__, "cli_idle_timeout", cli_idle_timeout)
        if config_revert_timer is not None:
            pulumi.set(__self__, "config_revert_timer", config_revert_timer)
        if dhcp_option_fqdn is not None:
            pulumi.set(__self__, "dhcp_option_fqdn", dhcp_option_fqdn)
        if disable_oob_down_alarm is not None:
            pulumi.set(__self__, "disable_oob_down_alarm", disable_oob_down_alarm)
        if local_accounts is not None:
            pulumi.set(__self__, "local_accounts", local_accounts)
        if mxedge_proxy_host is not None:
            pulumi.set(__self__, "mxedge_proxy_host", mxedge_proxy_host)
        if mxedge_proxy_port is not None:
            pulumi.set(__self__, "mxedge_proxy_port", mxedge_proxy_port)
        if protect_re is not None:
            pulumi.set(__self__, "protect_re", protect_re)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if tacacs is not None:
            pulumi.set(__self__, "tacacs", tacacs)
        if use_mxedge_proxy is not None:
            pulumi.set(__self__, "use_mxedge_proxy", use_mxedge_proxy)

    @property
    @pulumi.getter(name="apAffinityThreshold")
    def ap_affinity_threshold(self) -> Optional[int]:
        """
        ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        return pulumi.get(self, "ap_affinity_threshold")

    @property
    @pulumi.getter(name="cliBanner")
    def cli_banner(self) -> Optional[str]:
        """
        Set Banners for switches. Allows markup formatting
        """
        return pulumi.get(self, "cli_banner")

    @property
    @pulumi.getter(name="cliIdleTimeout")
    def cli_idle_timeout(self) -> Optional[int]:
        """
        Sets timeout for switches
        """
        return pulumi.get(self, "cli_idle_timeout")

    @property
    @pulumi.getter(name="configRevertTimer")
    def config_revert_timer(self) -> Optional[int]:
        """
        the rollback timer for commit confirmed
        """
        return pulumi.get(self, "config_revert_timer")

    @property
    @pulumi.getter(name="dhcpOptionFqdn")
    def dhcp_option_fqdn(self) -> Optional[bool]:
        """
        Enable to provide the FQDN with DHCP option 81
        """
        return pulumi.get(self, "dhcp_option_fqdn")

    @property
    @pulumi.getter(name="disableOobDownAlarm")
    def disable_oob_down_alarm(self) -> Optional[bool]:
        return pulumi.get(self, "disable_oob_down_alarm")

    @property
    @pulumi.getter(name="localAccounts")
    def local_accounts(self) -> Optional[Mapping[str, 'outputs.SwitchSwitchMgmtLocalAccounts']]:
        """
        Property key is the user name. For Local user authentication
        """
        return pulumi.get(self, "local_accounts")

    @property
    @pulumi.getter(name="mxedgeProxyHost")
    def mxedge_proxy_host(self) -> Optional[str]:
        return pulumi.get(self, "mxedge_proxy_host")

    @property
    @pulumi.getter(name="mxedgeProxyPort")
    def mxedge_proxy_port(self) -> Optional[int]:
        return pulumi.get(self, "mxedge_proxy_port")

    @property
    @pulumi.getter(name="protectRe")
    def protect_re(self) -> Optional['outputs.SwitchSwitchMgmtProtectRe']:
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "protect_re")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[str]:
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter
    def tacacs(self) -> Optional['outputs.SwitchSwitchMgmtTacacs']:
        return pulumi.get(self, "tacacs")

    @property
    @pulumi.getter(name="useMxedgeProxy")
    def use_mxedge_proxy(self) -> Optional[bool]:
        """
        to use mxedge as proxy
        """
        return pulumi.get(self, "use_mxedge_proxy")


@pulumi.output_type
class SwitchSwitchMgmtLocalAccounts(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None):
        """
        :param str role: enum: `admin`, `helpdesk`, `none`, `read`
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class SwitchSwitchMgmtProtectRe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedServices":
            suggest = "allowed_services"
        elif key == "trustedHosts":
            suggest = "trusted_hosts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSwitchMgmtProtectRe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSwitchMgmtProtectRe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSwitchMgmtProtectRe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_services: Optional[Sequence[str]] = None,
                 customs: Optional[Sequence['outputs.SwitchSwitchMgmtProtectReCustom']] = None,
                 enabled: Optional[bool] = None,
                 trusted_hosts: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] allowed_services: optionally, services we'll allow. enum: `icmp`, `ssh`
        :param bool enabled: when enabled, all traffic that is not essential to our operation will be dropped
               e.g. ntp / dns / traffic to mist will be allowed by default
                    if dhcpd is enabled, we'll make sure it works
        :param Sequence[str] trusted_hosts: host/subnets we'll allow traffic to/from
        """
        if allowed_services is not None:
            pulumi.set(__self__, "allowed_services", allowed_services)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if trusted_hosts is not None:
            pulumi.set(__self__, "trusted_hosts", trusted_hosts)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[Sequence[str]]:
        """
        optionally, services we'll allow. enum: `icmp`, `ssh`
        """
        return pulumi.get(self, "allowed_services")

    @property
    @pulumi.getter
    def customs(self) -> Optional[Sequence['outputs.SwitchSwitchMgmtProtectReCustom']]:
        return pulumi.get(self, "customs")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="trustedHosts")
    def trusted_hosts(self) -> Optional[Sequence[str]]:
        """
        host/subnets we'll allow traffic to/from
        """
        return pulumi.get(self, "trusted_hosts")


@pulumi.output_type
class SwitchSwitchMgmtProtectReCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSwitchMgmtProtectReCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSwitchMgmtProtectReCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSwitchMgmtProtectReCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnets: Sequence[str],
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str port_range: matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        :param str protocol: enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class SwitchSwitchMgmtTacacs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acctServers":
            suggest = "acct_servers"
        elif key == "defaultRole":
            suggest = "default_role"
        elif key == "tacplusServers":
            suggest = "tacplus_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchSwitchMgmtTacacs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchSwitchMgmtTacacs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchSwitchMgmtTacacs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acct_servers: Optional[Sequence['outputs.SwitchSwitchMgmtTacacsAcctServer']] = None,
                 default_role: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 network: Optional[str] = None,
                 tacplus_servers: Optional[Sequence['outputs.SwitchSwitchMgmtTacacsTacplusServer']] = None):
        """
        :param str default_role: enum: `admin`, `helpdesk`, `none`, `read`
        :param str network: which network the TACACS server resides
        """
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if tacplus_servers is not None:
            pulumi.set(__self__, "tacplus_servers", tacplus_servers)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[Sequence['outputs.SwitchSwitchMgmtTacacsAcctServer']]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        which network the TACACS server resides
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="tacplusServers")
    def tacplus_servers(self) -> Optional[Sequence['outputs.SwitchSwitchMgmtTacacsTacplusServer']]:
        return pulumi.get(self, "tacplus_servers")


@pulumi.output_type
class SwitchSwitchMgmtTacacsAcctServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[str] = None,
                 secret: Optional[str] = None,
                 timeout: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SwitchSwitchMgmtTacacsTacplusServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[str] = None,
                 secret: Optional[str] = None,
                 timeout: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class SwitchVirtualChassis(dict):
    def __init__(__self__, *,
                 members: Optional[Sequence['outputs.SwitchVirtualChassisMember']] = None,
                 preprovisioned: Optional[bool] = None):
        """
        :param Sequence['SwitchVirtualChassisMemberArgs'] members: list of Virtual Chassis members
        :param bool preprovisioned: to configure whether the VC is preprovisioned or nonprovisioned
        """
        if members is not None:
            pulumi.set(__self__, "members", members)
        if preprovisioned is not None:
            pulumi.set(__self__, "preprovisioned", preprovisioned)

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.SwitchVirtualChassisMember']]:
        """
        list of Virtual Chassis members
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def preprovisioned(self) -> Optional[bool]:
        """
        to configure whether the VC is preprovisioned or nonprovisioned
        """
        return pulumi.get(self, "preprovisioned")


@pulumi.output_type
class SwitchVirtualChassisMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberId":
            suggest = "member_id"
        elif key == "vcRole":
            suggest = "vc_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchVirtualChassisMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchVirtualChassisMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchVirtualChassisMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mac: Optional[str] = None,
                 member_id: Optional[int] = None,
                 vc_role: Optional[str] = None):
        """
        :param str mac: fpc0, same as the mac of device_id
        :param str vc_role: Both vc_role master and backup will be matched to routing-engine role in Junos preprovisioned VC config. enum: `backup`, `linecard`, `master`
        """
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if vc_role is not None:
            pulumi.set(__self__, "vc_role", vc_role)

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        fpc0, same as the mac of device_id
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[int]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="vcRole")
    def vc_role(self) -> Optional[str]:
        """
        Both vc_role master and backup will be matched to routing-engine role in Junos preprovisioned VC config. enum: `backup`, `linecard`, `master`
        """
        return pulumi.get(self, "vc_role")


@pulumi.output_type
class SwitchVrfConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class SwitchVrfInstances(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vrfExtraRoutes":
            suggest = "vrf_extra_routes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwitchVrfInstances. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwitchVrfInstances.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwitchVrfInstances.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 networks: Optional[Sequence[str]] = None,
                 vrf_extra_routes: Optional[Mapping[str, 'outputs.SwitchVrfInstancesVrfExtraRoutes']] = None):
        """
        :param Mapping[str, 'SwitchVrfInstancesVrfExtraRoutesArgs'] vrf_extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if vrf_extra_routes is not None:
            pulumi.set(__self__, "vrf_extra_routes", vrf_extra_routes)

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="vrfExtraRoutes")
    def vrf_extra_routes(self) -> Optional[Mapping[str, 'outputs.SwitchVrfInstancesVrfExtraRoutes']]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "vrf_extra_routes")


@pulumi.output_type
class SwitchVrfInstancesVrfExtraRoutes(dict):
    def __init__(__self__, *,
                 via: str):
        """
        :param str via: Next-hop address
        """
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        Next-hop address
        """
        return pulumi.get(self, "via")


@pulumi.output_type
class SwitchVrrpConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 groups: Optional[Mapping[str, 'outputs.SwitchVrrpConfigGroups']] = None):
        """
        :param Mapping[str, 'SwitchVrrpConfigGroupsArgs'] groups: Property key is the VRRP name
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Mapping[str, 'outputs.SwitchVrrpConfigGroups']]:
        """
        Property key is the VRRP name
        """
        return pulumi.get(self, "groups")


@pulumi.output_type
class SwitchVrrpConfigGroups(dict):
    def __init__(__self__, *,
                 priority: Optional[int] = None):
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class BaseLatlng(dict):
    def __init__(__self__, *,
                 lat: float,
                 lng: float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> float:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        return pulumi.get(self, "lng")


@pulumi.output_type
class GetApStatsDeviceApStatResult(dict):
    def __init__(__self__, *,
                 auto_placement: 'outputs.GetApStatsDeviceApStatAutoPlacementResult',
                 auto_upgrade_stat: 'outputs.GetApStatsDeviceApStatAutoUpgradeStatResult',
                 ble_stat: 'outputs.GetApStatsDeviceApStatBleStatResult',
                 cert_expiry: float,
                 config_reverted: bool,
                 cpu_system: int,
                 cpu_util: int,
                 created_time: int,
                 deviceprofile_id: str,
                 env_stat: 'outputs.GetApStatsDeviceApStatEnvStatResult',
                 esl_stat: 'outputs.GetApStatsDeviceApStatEslStatResult',
                 ext_ip: str,
                 fwupdate: 'outputs.GetApStatsDeviceApStatFwupdateResult',
                 hw_rev: str,
                 id: str,
                 inactive_wired_vlans: Sequence[int],
                 iot_stat: Mapping[str, 'outputs.GetApStatsDeviceApStatIotStatResult'],
                 ip: str,
                 ip_config: 'outputs.GetApStatsDeviceApStatIpConfigResult',
                 ip_stat: 'outputs.GetApStatsDeviceApStatIpStatResult',
                 l2tp_stat: Mapping[str, 'outputs.GetApStatsDeviceApStatL2tpStatResult'],
                 last_seen: float,
                 last_trouble: 'outputs.GetApStatsDeviceApStatLastTroubleResult',
                 led: 'outputs.GetApStatsDeviceApStatLedResult',
                 lldp_stat: 'outputs.GetApStatsDeviceApStatLldpStatResult',
                 locating: bool,
                 locked: bool,
                 mac: str,
                 map_id: str,
                 mem_used_kb: int,
                 mesh_downlinks: Mapping[str, 'outputs.GetApStatsDeviceApStatMeshDownlinksResult'],
                 mesh_uplink: 'outputs.GetApStatsDeviceApStatMeshUplinkResult',
                 model: str,
                 modified_time: int,
                 mount: str,
                 name: str,
                 notes: str,
                 num_clients: int,
                 org_id: str,
                 port_stat: Mapping[str, 'outputs.GetApStatsDeviceApStatPortStatResult'],
                 power_budget: int,
                 power_constrained: bool,
                 power_opmode: str,
                 power_src: str,
                 radio_stat: 'outputs.GetApStatsDeviceApStatRadioStatResult',
                 rx_bps: float,
                 rx_bytes: int,
                 rx_pkts: int,
                 serial: str,
                 site_id: str,
                 status: str,
                 switch_redundancy: 'outputs.GetApStatsDeviceApStatSwitchRedundancyResult',
                 tx_bps: float,
                 tx_bytes: float,
                 tx_pkts: float,
                 uptime: float,
                 usb_stat: 'outputs.GetApStatsDeviceApStatUsbStatResult',
                 version: str,
                 x: float,
                 y: float):
        """
        :param 'GetApStatsDeviceApStatEnvStatArgs' env_stat: device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
        :param 'GetApStatsDeviceApStatIpConfigArgs' ip_config: IP AP settings
        :param Mapping[str, 'GetApStatsDeviceApStatL2tpStatArgs'] l2tp_stat: l2tp tunnel status (key is the wxtunnel*id)
        :param float last_seen: last seen timestamp
        :param 'GetApStatsDeviceApStatLastTroubleArgs' last_trouble: last trouble code of switch
        :param 'GetApStatsDeviceApStatLedArgs' led: LED AP settings
        :param 'GetApStatsDeviceApStatLldpStatArgs' lldp_stat: LLDP Stat (neighbor information, power negotiations)
        :param bool locked: whether this AP is considered locked (placement / orientation has been vetted)
        :param str mac: device mac
        :param Mapping[str, 'GetApStatsDeviceApStatMeshDownlinksArgs'] mesh_downlinks: Property key is the mesh downlink id (e.g `00000000-0000-0000-1000-5c5b35000010`)
        :param str model: device model
        :param int num_clients: how many wireless clients are currently connected
        :param Mapping[str, 'GetApStatsDeviceApStatPortStatArgs'] port_stat: Property key is the port name (e.g. `eth0`)
        :param int power_budget: in mW, surplus if positive or deficit if negative
        :param bool power_constrained: whether insufficient power
        :param str power_opmode: constrained mode
        :param str power_src: DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
        :param str serial: serial
        :param float uptime: how long, in seconds, has the device been up (or rebooted)
        """
        pulumi.set(__self__, "auto_placement", auto_placement)
        pulumi.set(__self__, "auto_upgrade_stat", auto_upgrade_stat)
        pulumi.set(__self__, "ble_stat", ble_stat)
        pulumi.set(__self__, "cert_expiry", cert_expiry)
        pulumi.set(__self__, "config_reverted", config_reverted)
        pulumi.set(__self__, "cpu_system", cpu_system)
        pulumi.set(__self__, "cpu_util", cpu_util)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        pulumi.set(__self__, "env_stat", env_stat)
        pulumi.set(__self__, "esl_stat", esl_stat)
        pulumi.set(__self__, "ext_ip", ext_ip)
        pulumi.set(__self__, "fwupdate", fwupdate)
        pulumi.set(__self__, "hw_rev", hw_rev)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "inactive_wired_vlans", inactive_wired_vlans)
        pulumi.set(__self__, "iot_stat", iot_stat)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_config", ip_config)
        pulumi.set(__self__, "ip_stat", ip_stat)
        pulumi.set(__self__, "l2tp_stat", l2tp_stat)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "last_trouble", last_trouble)
        pulumi.set(__self__, "led", led)
        pulumi.set(__self__, "lldp_stat", lldp_stat)
        pulumi.set(__self__, "locating", locating)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "map_id", map_id)
        pulumi.set(__self__, "mem_used_kb", mem_used_kb)
        pulumi.set(__self__, "mesh_downlinks", mesh_downlinks)
        pulumi.set(__self__, "mesh_uplink", mesh_uplink)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "mount", mount)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "num_clients", num_clients)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "port_stat", port_stat)
        pulumi.set(__self__, "power_budget", power_budget)
        pulumi.set(__self__, "power_constrained", power_constrained)
        pulumi.set(__self__, "power_opmode", power_opmode)
        pulumi.set(__self__, "power_src", power_src)
        pulumi.set(__self__, "radio_stat", radio_stat)
        pulumi.set(__self__, "rx_bps", rx_bps)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "switch_redundancy", switch_redundancy)
        pulumi.set(__self__, "tx_bps", tx_bps)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "usb_stat", usb_stat)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="autoPlacement")
    def auto_placement(self) -> 'outputs.GetApStatsDeviceApStatAutoPlacementResult':
        return pulumi.get(self, "auto_placement")

    @property
    @pulumi.getter(name="autoUpgradeStat")
    def auto_upgrade_stat(self) -> 'outputs.GetApStatsDeviceApStatAutoUpgradeStatResult':
        return pulumi.get(self, "auto_upgrade_stat")

    @property
    @pulumi.getter(name="bleStat")
    def ble_stat(self) -> 'outputs.GetApStatsDeviceApStatBleStatResult':
        return pulumi.get(self, "ble_stat")

    @property
    @pulumi.getter(name="certExpiry")
    def cert_expiry(self) -> float:
        return pulumi.get(self, "cert_expiry")

    @property
    @pulumi.getter(name="configReverted")
    def config_reverted(self) -> bool:
        return pulumi.get(self, "config_reverted")

    @property
    @pulumi.getter(name="cpuSystem")
    def cpu_system(self) -> int:
        return pulumi.get(self, "cpu_system")

    @property
    @pulumi.getter(name="cpuUtil")
    def cpu_util(self) -> int:
        return pulumi.get(self, "cpu_util")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> int:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> str:
        return pulumi.get(self, "deviceprofile_id")

    @property
    @pulumi.getter(name="envStat")
    def env_stat(self) -> 'outputs.GetApStatsDeviceApStatEnvStatResult':
        """
        device environment, including CPU temperature, Ambient temperature, Humidity, Attitude, Pressure, Accelerometers, Magnetometers and vCore Voltage
        """
        return pulumi.get(self, "env_stat")

    @property
    @pulumi.getter(name="eslStat")
    def esl_stat(self) -> 'outputs.GetApStatsDeviceApStatEslStatResult':
        return pulumi.get(self, "esl_stat")

    @property
    @pulumi.getter(name="extIp")
    def ext_ip(self) -> str:
        return pulumi.get(self, "ext_ip")

    @property
    @pulumi.getter
    def fwupdate(self) -> 'outputs.GetApStatsDeviceApStatFwupdateResult':
        return pulumi.get(self, "fwupdate")

    @property
    @pulumi.getter(name="hwRev")
    def hw_rev(self) -> str:
        return pulumi.get(self, "hw_rev")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactiveWiredVlans")
    def inactive_wired_vlans(self) -> Sequence[int]:
        return pulumi.get(self, "inactive_wired_vlans")

    @property
    @pulumi.getter(name="iotStat")
    def iot_stat(self) -> Mapping[str, 'outputs.GetApStatsDeviceApStatIotStatResult']:
        return pulumi.get(self, "iot_stat")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> 'outputs.GetApStatsDeviceApStatIpConfigResult':
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="ipStat")
    def ip_stat(self) -> 'outputs.GetApStatsDeviceApStatIpStatResult':
        return pulumi.get(self, "ip_stat")

    @property
    @pulumi.getter(name="l2tpStat")
    def l2tp_stat(self) -> Mapping[str, 'outputs.GetApStatsDeviceApStatL2tpStatResult']:
        """
        l2tp tunnel status (key is the wxtunnel*id)
        """
        return pulumi.get(self, "l2tp_stat")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        """
        last seen timestamp
        """
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="lastTrouble")
    def last_trouble(self) -> 'outputs.GetApStatsDeviceApStatLastTroubleResult':
        """
        last trouble code of switch
        """
        return pulumi.get(self, "last_trouble")

    @property
    @pulumi.getter
    def led(self) -> 'outputs.GetApStatsDeviceApStatLedResult':
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @property
    @pulumi.getter(name="lldpStat")
    def lldp_stat(self) -> 'outputs.GetApStatsDeviceApStatLldpStatResult':
        """
        LLDP Stat (neighbor information, power negotiations)
        """
        return pulumi.get(self, "lldp_stat")

    @property
    @pulumi.getter
    def locating(self) -> bool:
        return pulumi.get(self, "locating")

    @property
    @pulumi.getter
    def locked(self) -> bool:
        """
        whether this AP is considered locked (placement / orientation has been vetted)
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        device mac
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> str:
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="memUsedKb")
    def mem_used_kb(self) -> int:
        return pulumi.get(self, "mem_used_kb")

    @property
    @pulumi.getter(name="meshDownlinks")
    def mesh_downlinks(self) -> Mapping[str, 'outputs.GetApStatsDeviceApStatMeshDownlinksResult']:
        """
        Property key is the mesh downlink id (e.g `00000000-0000-0000-1000-5c5b35000010`)
        """
        return pulumi.get(self, "mesh_downlinks")

    @property
    @pulumi.getter(name="meshUplink")
    def mesh_uplink(self) -> 'outputs.GetApStatsDeviceApStatMeshUplinkResult':
        return pulumi.get(self, "mesh_uplink")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def mount(self) -> str:
        return pulumi.get(self, "mount")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> str:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="numClients")
    def num_clients(self) -> int:
        """
        how many wireless clients are currently connected
        """
        return pulumi.get(self, "num_clients")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="portStat")
    def port_stat(self) -> Mapping[str, 'outputs.GetApStatsDeviceApStatPortStatResult']:
        """
        Property key is the port name (e.g. `eth0`)
        """
        return pulumi.get(self, "port_stat")

    @property
    @pulumi.getter(name="powerBudget")
    def power_budget(self) -> int:
        """
        in mW, surplus if positive or deficit if negative
        """
        return pulumi.get(self, "power_budget")

    @property
    @pulumi.getter(name="powerConstrained")
    def power_constrained(self) -> bool:
        """
        whether insufficient power
        """
        return pulumi.get(self, "power_constrained")

    @property
    @pulumi.getter(name="powerOpmode")
    def power_opmode(self) -> str:
        """
        constrained mode
        """
        return pulumi.get(self, "power_opmode")

    @property
    @pulumi.getter(name="powerSrc")
    def power_src(self) -> str:
        """
        DC Input / PoE 802.3at / PoE 802.3af / LLDP / ? (unknown)
        """
        return pulumi.get(self, "power_src")

    @property
    @pulumi.getter(name="radioStat")
    def radio_stat(self) -> 'outputs.GetApStatsDeviceApStatRadioStatResult':
        return pulumi.get(self, "radio_stat")

    @property
    @pulumi.getter(name="rxBps")
    def rx_bps(self) -> float:
        return pulumi.get(self, "rx_bps")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="switchRedundancy")
    def switch_redundancy(self) -> 'outputs.GetApStatsDeviceApStatSwitchRedundancyResult':
        return pulumi.get(self, "switch_redundancy")

    @property
    @pulumi.getter(name="txBps")
    def tx_bps(self) -> float:
        return pulumi.get(self, "tx_bps")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> float:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> float:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def uptime(self) -> float:
        """
        how long, in seconds, has the device been up (or rebooted)
        """
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="usbStat")
    def usb_stat(self) -> 'outputs.GetApStatsDeviceApStatUsbStatResult':
        return pulumi.get(self, "usb_stat")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def x(self) -> float:
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> float:
        return pulumi.get(self, "y")


@pulumi.output_type
class GetApStatsDeviceApStatAutoPlacementResult(dict):
    def __init__(__self__, *,
                 info: 'outputs.GetApStatsDeviceApStatAutoPlacementInfoResult',
                 recommended_anchor: bool,
                 status: str,
                 status_detail: str,
                 use_auto_placement: bool,
                 x: float,
                 x_m: float,
                 y: float,
                 y_m: float):
        """
        :param 'GetApStatsDeviceApStatAutoPlacementInfoArgs' info: Additional information about auto placements AP data
        :param bool recommended_anchor: Flag to represent if AP is recommended as an anchor by auto placement service
        :param str status: Basic Placement Status
        :param str status_detail: Additional info about placement status
        :param bool use_auto_placement: Flag to represent if auto_placement values are currently utilized
        :param float x: X Autoplaced Position in pixels
        :param float x_m: X Autoplaced Position in meters
        :param float y: Y Autoplaced Position in pixels
        :param float y_m: X Autoplaced Position in meters
        """
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "recommended_anchor", recommended_anchor)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_detail", status_detail)
        pulumi.set(__self__, "use_auto_placement", use_auto_placement)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "x_m", x_m)
        pulumi.set(__self__, "y", y)
        pulumi.set(__self__, "y_m", y_m)

    @property
    @pulumi.getter
    def info(self) -> 'outputs.GetApStatsDeviceApStatAutoPlacementInfoResult':
        """
        Additional information about auto placements AP data
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="recommendedAnchor")
    def recommended_anchor(self) -> bool:
        """
        Flag to represent if AP is recommended as an anchor by auto placement service
        """
        return pulumi.get(self, "recommended_anchor")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Basic Placement Status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetail")
    def status_detail(self) -> str:
        """
        Additional info about placement status
        """
        return pulumi.get(self, "status_detail")

    @property
    @pulumi.getter(name="useAutoPlacement")
    def use_auto_placement(self) -> bool:
        """
        Flag to represent if auto_placement values are currently utilized
        """
        return pulumi.get(self, "use_auto_placement")

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        X Autoplaced Position in pixels
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter(name="xM")
    def x_m(self) -> float:
        """
        X Autoplaced Position in meters
        """
        return pulumi.get(self, "x_m")

    @property
    @pulumi.getter
    def y(self) -> float:
        """
        Y Autoplaced Position in pixels
        """
        return pulumi.get(self, "y")

    @property
    @pulumi.getter(name="yM")
    def y_m(self) -> float:
        """
        X Autoplaced Position in meters
        """
        return pulumi.get(self, "y_m")


@pulumi.output_type
class GetApStatsDeviceApStatAutoPlacementInfoResult(dict):
    def __init__(__self__, *,
                 cluster_number: int,
                 orientation_stats: int,
                 probability_surface: 'outputs.GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurfaceResult'):
        """
        :param int cluster_number: All APs sharing a given cluster number can be placed relative to each other
        :param int orientation_stats: The orientation of an AP
        :param 'GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurfaceArgs' probability_surface: Coordinates representing a circle where the AP is most likely exists in the event of an inaccurate placement result
        """
        pulumi.set(__self__, "cluster_number", cluster_number)
        pulumi.set(__self__, "orientation_stats", orientation_stats)
        pulumi.set(__self__, "probability_surface", probability_surface)

    @property
    @pulumi.getter(name="clusterNumber")
    def cluster_number(self) -> int:
        """
        All APs sharing a given cluster number can be placed relative to each other
        """
        return pulumi.get(self, "cluster_number")

    @property
    @pulumi.getter(name="orientationStats")
    def orientation_stats(self) -> int:
        """
        The orientation of an AP
        """
        return pulumi.get(self, "orientation_stats")

    @property
    @pulumi.getter(name="probabilitySurface")
    def probability_surface(self) -> 'outputs.GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurfaceResult':
        """
        Coordinates representing a circle where the AP is most likely exists in the event of an inaccurate placement result
        """
        return pulumi.get(self, "probability_surface")


@pulumi.output_type
class GetApStatsDeviceApStatAutoPlacementInfoProbabilitySurfaceResult(dict):
    def __init__(__self__, *,
                 radius: float,
                 radius_m: float,
                 x: float):
        """
        :param float radius: The radius representing placement uncertainty, measured in pixels
        :param float radius_m: The radius representing placement uncertainty, measured in meters
        :param float x: Y-coordinate of the potential placement’s center, measured in pixels
        """
        pulumi.set(__self__, "radius", radius)
        pulumi.set(__self__, "radius_m", radius_m)
        pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def radius(self) -> float:
        """
        The radius representing placement uncertainty, measured in pixels
        """
        return pulumi.get(self, "radius")

    @property
    @pulumi.getter(name="radiusM")
    def radius_m(self) -> float:
        """
        The radius representing placement uncertainty, measured in meters
        """
        return pulumi.get(self, "radius_m")

    @property
    @pulumi.getter
    def x(self) -> float:
        """
        Y-coordinate of the potential placement’s center, measured in pixels
        """
        return pulumi.get(self, "x")


@pulumi.output_type
class GetApStatsDeviceApStatAutoUpgradeStatResult(dict):
    def __init__(__self__, *,
                 lastcheck: int):
        pulumi.set(__self__, "lastcheck", lastcheck)

    @property
    @pulumi.getter
    def lastcheck(self) -> int:
        return pulumi.get(self, "lastcheck")


@pulumi.output_type
class GetApStatsDeviceApStatBleStatResult(dict):
    def __init__(__self__, *,
                 beacon_enabled: bool,
                 beacon_rate: int,
                 eddystone_uid_enabled: bool,
                 eddystone_uid_freq_msec: int,
                 eddystone_uid_instance: str,
                 eddystone_uid_namespace: str,
                 eddystone_url_enabled: bool,
                 eddystone_url_freq_msec: int,
                 eddystone_url_url: str,
                 ibeacon_enabled: bool,
                 ibeacon_freq_msec: int,
                 ibeacon_major: int,
                 ibeacon_minor: int,
                 ibeacon_uuid: str,
                 major: int,
                 minors: Sequence[int],
                 power: int,
                 rx_bytes: int,
                 rx_pkts: int,
                 tx_bytes: int,
                 tx_pkts: int,
                 tx_resets: int,
                 uuid: str):
        """
        :param int eddystone_url_freq_msec: Frequency (msec) of data emmit by Eddystone-UID beacon
        :param int tx_resets: resets due to tx hung
        """
        pulumi.set(__self__, "beacon_enabled", beacon_enabled)
        pulumi.set(__self__, "beacon_rate", beacon_rate)
        pulumi.set(__self__, "eddystone_uid_enabled", eddystone_uid_enabled)
        pulumi.set(__self__, "eddystone_uid_freq_msec", eddystone_uid_freq_msec)
        pulumi.set(__self__, "eddystone_uid_instance", eddystone_uid_instance)
        pulumi.set(__self__, "eddystone_uid_namespace", eddystone_uid_namespace)
        pulumi.set(__self__, "eddystone_url_enabled", eddystone_url_enabled)
        pulumi.set(__self__, "eddystone_url_freq_msec", eddystone_url_freq_msec)
        pulumi.set(__self__, "eddystone_url_url", eddystone_url_url)
        pulumi.set(__self__, "ibeacon_enabled", ibeacon_enabled)
        pulumi.set(__self__, "ibeacon_freq_msec", ibeacon_freq_msec)
        pulumi.set(__self__, "ibeacon_major", ibeacon_major)
        pulumi.set(__self__, "ibeacon_minor", ibeacon_minor)
        pulumi.set(__self__, "ibeacon_uuid", ibeacon_uuid)
        pulumi.set(__self__, "major", major)
        pulumi.set(__self__, "minors", minors)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "tx_resets", tx_resets)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="beaconEnabled")
    def beacon_enabled(self) -> bool:
        return pulumi.get(self, "beacon_enabled")

    @property
    @pulumi.getter(name="beaconRate")
    def beacon_rate(self) -> int:
        return pulumi.get(self, "beacon_rate")

    @property
    @pulumi.getter(name="eddystoneUidEnabled")
    def eddystone_uid_enabled(self) -> bool:
        return pulumi.get(self, "eddystone_uid_enabled")

    @property
    @pulumi.getter(name="eddystoneUidFreqMsec")
    def eddystone_uid_freq_msec(self) -> int:
        return pulumi.get(self, "eddystone_uid_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUidInstance")
    def eddystone_uid_instance(self) -> str:
        return pulumi.get(self, "eddystone_uid_instance")

    @property
    @pulumi.getter(name="eddystoneUidNamespace")
    def eddystone_uid_namespace(self) -> str:
        return pulumi.get(self, "eddystone_uid_namespace")

    @property
    @pulumi.getter(name="eddystoneUrlEnabled")
    def eddystone_url_enabled(self) -> bool:
        return pulumi.get(self, "eddystone_url_enabled")

    @property
    @pulumi.getter(name="eddystoneUrlFreqMsec")
    def eddystone_url_freq_msec(self) -> int:
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_url_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUrlUrl")
    def eddystone_url_url(self) -> str:
        return pulumi.get(self, "eddystone_url_url")

    @property
    @pulumi.getter(name="ibeaconEnabled")
    def ibeacon_enabled(self) -> bool:
        return pulumi.get(self, "ibeacon_enabled")

    @property
    @pulumi.getter(name="ibeaconFreqMsec")
    def ibeacon_freq_msec(self) -> int:
        return pulumi.get(self, "ibeacon_freq_msec")

    @property
    @pulumi.getter(name="ibeaconMajor")
    def ibeacon_major(self) -> int:
        return pulumi.get(self, "ibeacon_major")

    @property
    @pulumi.getter(name="ibeaconMinor")
    def ibeacon_minor(self) -> int:
        return pulumi.get(self, "ibeacon_minor")

    @property
    @pulumi.getter(name="ibeaconUuid")
    def ibeacon_uuid(self) -> str:
        return pulumi.get(self, "ibeacon_uuid")

    @property
    @pulumi.getter
    def major(self) -> int:
        return pulumi.get(self, "major")

    @property
    @pulumi.getter
    def minors(self) -> Sequence[int]:
        return pulumi.get(self, "minors")

    @property
    @pulumi.getter
    def power(self) -> int:
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter(name="txResets")
    def tx_resets(self) -> int:
        """
        resets due to tx hung
        """
        return pulumi.get(self, "tx_resets")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetApStatsDeviceApStatEnvStatResult(dict):
    def __init__(__self__, *,
                 accel_x: float,
                 accel_y: float,
                 accel_z: float,
                 ambient_temp: int,
                 attitude: int,
                 cpu_temp: int,
                 humidity: int,
                 magne_x: float,
                 magne_y: float,
                 magne_z: float,
                 pressure: float,
                 vcore_voltage: int):
        pulumi.set(__self__, "accel_x", accel_x)
        pulumi.set(__self__, "accel_y", accel_y)
        pulumi.set(__self__, "accel_z", accel_z)
        pulumi.set(__self__, "ambient_temp", ambient_temp)
        pulumi.set(__self__, "attitude", attitude)
        pulumi.set(__self__, "cpu_temp", cpu_temp)
        pulumi.set(__self__, "humidity", humidity)
        pulumi.set(__self__, "magne_x", magne_x)
        pulumi.set(__self__, "magne_y", magne_y)
        pulumi.set(__self__, "magne_z", magne_z)
        pulumi.set(__self__, "pressure", pressure)
        pulumi.set(__self__, "vcore_voltage", vcore_voltage)

    @property
    @pulumi.getter(name="accelX")
    def accel_x(self) -> float:
        return pulumi.get(self, "accel_x")

    @property
    @pulumi.getter(name="accelY")
    def accel_y(self) -> float:
        return pulumi.get(self, "accel_y")

    @property
    @pulumi.getter(name="accelZ")
    def accel_z(self) -> float:
        return pulumi.get(self, "accel_z")

    @property
    @pulumi.getter(name="ambientTemp")
    def ambient_temp(self) -> int:
        return pulumi.get(self, "ambient_temp")

    @property
    @pulumi.getter
    def attitude(self) -> int:
        return pulumi.get(self, "attitude")

    @property
    @pulumi.getter(name="cpuTemp")
    def cpu_temp(self) -> int:
        return pulumi.get(self, "cpu_temp")

    @property
    @pulumi.getter
    def humidity(self) -> int:
        return pulumi.get(self, "humidity")

    @property
    @pulumi.getter(name="magneX")
    def magne_x(self) -> float:
        return pulumi.get(self, "magne_x")

    @property
    @pulumi.getter(name="magneY")
    def magne_y(self) -> float:
        return pulumi.get(self, "magne_y")

    @property
    @pulumi.getter(name="magneZ")
    def magne_z(self) -> float:
        return pulumi.get(self, "magne_z")

    @property
    @pulumi.getter
    def pressure(self) -> float:
        return pulumi.get(self, "pressure")

    @property
    @pulumi.getter(name="vcoreVoltage")
    def vcore_voltage(self) -> int:
        return pulumi.get(self, "vcore_voltage")


@pulumi.output_type
class GetApStatsDeviceApStatEslStatResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 connected: bool,
                 type: str,
                 up: bool):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def connected(self) -> bool:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")


@pulumi.output_type
class GetApStatsDeviceApStatFwupdateResult(dict):
    def __init__(__self__, *,
                 progress: int,
                 status: str,
                 status_id: int,
                 timestamp: float,
                 will_retry: bool):
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_id", status_id)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "will_retry", will_retry)

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> int:
        return pulumi.get(self, "status_id")

    @property
    @pulumi.getter
    def timestamp(self) -> float:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="willRetry")
    def will_retry(self) -> bool:
        return pulumi.get(self, "will_retry")


@pulumi.output_type
class GetApStatsDeviceApStatIotStatResult(dict):
    def __init__(__self__, *,
                 value: int):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApStatsDeviceApStatIpConfigResult(dict):
    def __init__(__self__, *,
                 dns: Sequence[str],
                 dns_suffixes: Sequence[str],
                 gateway: str,
                 gateway6: str,
                 ip: str,
                 ip6: str,
                 mtu: int,
                 netmask: str,
                 netmask6: str,
                 type: str,
                 type6: str,
                 vlan_id: int):
        """
        :param Sequence[str] dns: if `type`==`static`
        :param Sequence[str] dns_suffixes: required if `type`==`static`
        :param str gateway: required if `type`==`static`
        :param str ip: required if `type`==`static`
        :param str netmask: required if `type`==`static`
        :param int vlan_id: management vlan id, default is 1 (untagged)
        """
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "netmask6", netmask6)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type6", type6)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Sequence[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> str:
        return pulumi.get(self, "netmask6")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> str:
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        """
        management vlan id, default is 1 (untagged)
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetApStatsDeviceApStatIpStatResult(dict):
    def __init__(__self__, *,
                 dhcp_server: str,
                 dns: Sequence[str],
                 dns_suffixes: Sequence[str],
                 gateway: str,
                 gateway6: str,
                 ip: str,
                 ip6: str,
                 ips: Mapping[str, str],
                 netmask: str,
                 netmask6: str):
        pulumi.set(__self__, "dhcp_server", dhcp_server)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "netmask6", netmask6)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> str:
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Sequence[str]:
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def ips(self) -> Mapping[str, str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> str:
        return pulumi.get(self, "netmask6")


@pulumi.output_type
class GetApStatsDeviceApStatL2tpStatResult(dict):
    def __init__(__self__, *,
                 sessions: Sequence['outputs.GetApStatsDeviceApStatL2tpStatSessionResult'],
                 state: str,
                 uptime: int,
                 wxtunnel_id: str):
        """
        :param Sequence['GetApStatsDeviceApStatL2tpStatSessionArgs'] sessions: list of sessions
        :param int uptime: uptime
        :param str wxtunnel_id: WxlanTunnel ID
        """
        pulumi.set(__self__, "sessions", sessions)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "wxtunnel_id", wxtunnel_id)

    @property
    @pulumi.getter
    def sessions(self) -> Sequence['outputs.GetApStatsDeviceApStatL2tpStatSessionResult']:
        """
        list of sessions
        """
        return pulumi.get(self, "sessions")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uptime(self) -> int:
        """
        uptime
        """
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="wxtunnelId")
    def wxtunnel_id(self) -> str:
        """
        WxlanTunnel ID
        """
        return pulumi.get(self, "wxtunnel_id")


@pulumi.output_type
class GetApStatsDeviceApStatL2tpStatSessionResult(dict):
    def __init__(__self__, *,
                 local_sid: int,
                 remote_id: str,
                 remote_sid: int,
                 state: str):
        """
        :param int local_sid: remote sessions id (dynamically unless Tunnel is said to be static)
        :param str remote_id: WxlanTunnel Remote ID (user-configured)
        :param int remote_sid: remote sessions id (dynamically unless Tunnel is said to be static)
        """
        pulumi.set(__self__, "local_sid", local_sid)
        pulumi.set(__self__, "remote_id", remote_id)
        pulumi.set(__self__, "remote_sid", remote_sid)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="localSid")
    def local_sid(self) -> int:
        """
        remote sessions id (dynamically unless Tunnel is said to be static)
        """
        return pulumi.get(self, "local_sid")

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> str:
        """
        WxlanTunnel Remote ID (user-configured)
        """
        return pulumi.get(self, "remote_id")

    @property
    @pulumi.getter(name="remoteSid")
    def remote_sid(self) -> int:
        """
        remote sessions id (dynamically unless Tunnel is said to be static)
        """
        return pulumi.get(self, "remote_sid")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetApStatsDeviceApStatLastTroubleResult(dict):
    def __init__(__self__, *,
                 code: str,
                 timestamp: int):
        """
        :param str code: Code definitions list at /api/v1/consts/ap*led*status
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code definitions list at /api/v1/consts/ap*led*status
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetApStatsDeviceApStatLedResult(dict):
    def __init__(__self__, *,
                 brightness: int,
                 enabled: bool):
        pulumi.set(__self__, "brightness", brightness)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def brightness(self) -> int:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetApStatsDeviceApStatLldpStatResult(dict):
    def __init__(__self__, *,
                 chassis_id: str,
                 lldp_med_supported: bool,
                 mgmt_addr: str,
                 mgmt_addrs: Sequence[str],
                 port_desc: str,
                 port_id: str,
                 power_allocated: float,
                 power_draw: float,
                 power_request_count: int,
                 power_requested: float,
                 system_desc: str,
                 system_name: str):
        """
        :param bool lldp_med_supported: whether it support LLDP-MED
        :param str mgmt_addr: switch’s management address (if advertised), can be IPv4, IPv6, or MAC
        :param str port_desc: ge-0/0/4
        :param float power_allocated: in mW, provided/allocated by PSE
        :param float power_draw: in mW, total power needed by PD
        :param int power_request_count: number of negotiations, if it keeps increasing, we don’t have a stable power
        :param float power_requested: in mW, the current power requested by PD
        :param str system_desc: description provided by switch
        :param str system_name: name of the switch
        """
        pulumi.set(__self__, "chassis_id", chassis_id)
        pulumi.set(__self__, "lldp_med_supported", lldp_med_supported)
        pulumi.set(__self__, "mgmt_addr", mgmt_addr)
        pulumi.set(__self__, "mgmt_addrs", mgmt_addrs)
        pulumi.set(__self__, "port_desc", port_desc)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "power_allocated", power_allocated)
        pulumi.set(__self__, "power_draw", power_draw)
        pulumi.set(__self__, "power_request_count", power_request_count)
        pulumi.set(__self__, "power_requested", power_requested)
        pulumi.set(__self__, "system_desc", system_desc)
        pulumi.set(__self__, "system_name", system_name)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> str:
        return pulumi.get(self, "chassis_id")

    @property
    @pulumi.getter(name="lldpMedSupported")
    def lldp_med_supported(self) -> bool:
        """
        whether it support LLDP-MED
        """
        return pulumi.get(self, "lldp_med_supported")

    @property
    @pulumi.getter(name="mgmtAddr")
    def mgmt_addr(self) -> str:
        """
        switch’s management address (if advertised), can be IPv4, IPv6, or MAC
        """
        return pulumi.get(self, "mgmt_addr")

    @property
    @pulumi.getter(name="mgmtAddrs")
    def mgmt_addrs(self) -> Sequence[str]:
        return pulumi.get(self, "mgmt_addrs")

    @property
    @pulumi.getter(name="portDesc")
    def port_desc(self) -> str:
        """
        ge-0/0/4
        """
        return pulumi.get(self, "port_desc")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="powerAllocated")
    def power_allocated(self) -> float:
        """
        in mW, provided/allocated by PSE
        """
        return pulumi.get(self, "power_allocated")

    @property
    @pulumi.getter(name="powerDraw")
    def power_draw(self) -> float:
        """
        in mW, total power needed by PD
        """
        return pulumi.get(self, "power_draw")

    @property
    @pulumi.getter(name="powerRequestCount")
    def power_request_count(self) -> int:
        """
        number of negotiations, if it keeps increasing, we don’t have a stable power
        """
        return pulumi.get(self, "power_request_count")

    @property
    @pulumi.getter(name="powerRequested")
    def power_requested(self) -> float:
        """
        in mW, the current power requested by PD
        """
        return pulumi.get(self, "power_requested")

    @property
    @pulumi.getter(name="systemDesc")
    def system_desc(self) -> str:
        """
        description provided by switch
        """
        return pulumi.get(self, "system_desc")

    @property
    @pulumi.getter(name="systemName")
    def system_name(self) -> str:
        """
        name of the switch
        """
        return pulumi.get(self, "system_name")


@pulumi.output_type
class GetApStatsDeviceApStatMeshDownlinksResult(dict):
    def __init__(__self__, *,
                 band: str,
                 channel: int,
                 idle_time: int,
                 last_seen: float,
                 proto: str,
                 rssi: int,
                 rx_bps: int,
                 rx_bytes: int,
                 rx_packets: int,
                 rx_rate: int,
                 rx_retries: int,
                 site_id: str,
                 snr: int,
                 tx_bps: int,
                 tx_bytes: int,
                 tx_packets: int,
                 tx_rate: int,
                 tx_retries: int):
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "idle_time", idle_time)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "rssi", rssi)
        pulumi.set(__self__, "rx_bps", rx_bps)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_packets", rx_packets)
        pulumi.set(__self__, "rx_rate", rx_rate)
        pulumi.set(__self__, "rx_retries", rx_retries)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "snr", snr)
        pulumi.set(__self__, "tx_bps", tx_bps)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_packets", tx_packets)
        pulumi.set(__self__, "tx_rate", tx_rate)
        pulumi.set(__self__, "tx_retries", tx_retries)

    @property
    @pulumi.getter
    def band(self) -> str:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="idleTime")
    def idle_time(self) -> int:
        return pulumi.get(self, "idle_time")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def proto(self) -> str:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def rssi(self) -> int:
        return pulumi.get(self, "rssi")

    @property
    @pulumi.getter(name="rxBps")
    def rx_bps(self) -> int:
        return pulumi.get(self, "rx_bps")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPackets")
    def rx_packets(self) -> int:
        return pulumi.get(self, "rx_packets")

    @property
    @pulumi.getter(name="rxRate")
    def rx_rate(self) -> int:
        return pulumi.get(self, "rx_rate")

    @property
    @pulumi.getter(name="rxRetries")
    def rx_retries(self) -> int:
        return pulumi.get(self, "rx_retries")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def snr(self) -> int:
        return pulumi.get(self, "snr")

    @property
    @pulumi.getter(name="txBps")
    def tx_bps(self) -> int:
        return pulumi.get(self, "tx_bps")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPackets")
    def tx_packets(self) -> int:
        return pulumi.get(self, "tx_packets")

    @property
    @pulumi.getter(name="txRate")
    def tx_rate(self) -> int:
        return pulumi.get(self, "tx_rate")

    @property
    @pulumi.getter(name="txRetries")
    def tx_retries(self) -> int:
        return pulumi.get(self, "tx_retries")


@pulumi.output_type
class GetApStatsDeviceApStatMeshUplinkResult(dict):
    def __init__(__self__, *,
                 band: str,
                 channel: int,
                 idle_time: int,
                 last_seen: float,
                 proto: str,
                 rssi: int,
                 rx_bps: int,
                 rx_bytes: int,
                 rx_packets: int,
                 rx_rate: int,
                 rx_retries: int,
                 site_id: str,
                 snr: int,
                 tx_bps: int,
                 tx_bytes: int,
                 tx_packets: int,
                 tx_rate: int,
                 tx_retries: int,
                 uplink_ap_id: str):
        pulumi.set(__self__, "band", band)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "idle_time", idle_time)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "rssi", rssi)
        pulumi.set(__self__, "rx_bps", rx_bps)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_packets", rx_packets)
        pulumi.set(__self__, "rx_rate", rx_rate)
        pulumi.set(__self__, "rx_retries", rx_retries)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "snr", snr)
        pulumi.set(__self__, "tx_bps", tx_bps)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_packets", tx_packets)
        pulumi.set(__self__, "tx_rate", tx_rate)
        pulumi.set(__self__, "tx_retries", tx_retries)
        pulumi.set(__self__, "uplink_ap_id", uplink_ap_id)

    @property
    @pulumi.getter
    def band(self) -> str:
        return pulumi.get(self, "band")

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="idleTime")
    def idle_time(self) -> int:
        return pulumi.get(self, "idle_time")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def proto(self) -> str:
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter
    def rssi(self) -> int:
        return pulumi.get(self, "rssi")

    @property
    @pulumi.getter(name="rxBps")
    def rx_bps(self) -> int:
        return pulumi.get(self, "rx_bps")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPackets")
    def rx_packets(self) -> int:
        return pulumi.get(self, "rx_packets")

    @property
    @pulumi.getter(name="rxRate")
    def rx_rate(self) -> int:
        return pulumi.get(self, "rx_rate")

    @property
    @pulumi.getter(name="rxRetries")
    def rx_retries(self) -> int:
        return pulumi.get(self, "rx_retries")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def snr(self) -> int:
        return pulumi.get(self, "snr")

    @property
    @pulumi.getter(name="txBps")
    def tx_bps(self) -> int:
        return pulumi.get(self, "tx_bps")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPackets")
    def tx_packets(self) -> int:
        return pulumi.get(self, "tx_packets")

    @property
    @pulumi.getter(name="txRate")
    def tx_rate(self) -> int:
        return pulumi.get(self, "tx_rate")

    @property
    @pulumi.getter(name="txRetries")
    def tx_retries(self) -> int:
        return pulumi.get(self, "tx_retries")

    @property
    @pulumi.getter(name="uplinkApId")
    def uplink_ap_id(self) -> str:
        return pulumi.get(self, "uplink_ap_id")


@pulumi.output_type
class GetApStatsDeviceApStatPortStatResult(dict):
    def __init__(__self__, *,
                 full_duplex: bool,
                 rx_bytes: float,
                 rx_errors: float,
                 rx_pkts: float,
                 speed: int,
                 tx_bytes: float,
                 tx_pkts: float,
                 up: bool):
        pulumi.set(__self__, "full_duplex", full_duplex)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_errors", rx_errors)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "speed", speed)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter(name="fullDuplex")
    def full_duplex(self) -> bool:
        return pulumi.get(self, "full_duplex")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> float:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxErrors")
    def rx_errors(self) -> float:
        return pulumi.get(self, "rx_errors")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> float:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter
    def speed(self) -> int:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> float:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> float:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")


@pulumi.output_type
class GetApStatsDeviceApStatRadioStatResult(dict):
    def __init__(__self__, *,
                 band24: 'outputs.GetApStatsDeviceApStatRadioStatBand24Result',
                 band5: 'outputs.GetApStatsDeviceApStatRadioStatBand5Result',
                 band6: 'outputs.GetApStatsDeviceApStatRadioStatBand6Result'):
        """
        :param 'GetApStatsDeviceApStatRadioStatBand24Args' band24: radio stat
        :param 'GetApStatsDeviceApStatRadioStatBand5Args' band5: radio stat
        :param 'GetApStatsDeviceApStatRadioStatBand6Args' band6: radio stat
        """
        pulumi.set(__self__, "band24", band24)
        pulumi.set(__self__, "band5", band5)
        pulumi.set(__self__, "band6", band6)

    @property
    @pulumi.getter
    def band24(self) -> 'outputs.GetApStatsDeviceApStatRadioStatBand24Result':
        """
        radio stat
        """
        return pulumi.get(self, "band24")

    @property
    @pulumi.getter
    def band5(self) -> 'outputs.GetApStatsDeviceApStatRadioStatBand5Result':
        """
        radio stat
        """
        return pulumi.get(self, "band5")

    @property
    @pulumi.getter
    def band6(self) -> 'outputs.GetApStatsDeviceApStatRadioStatBand6Result':
        """
        radio stat
        """
        return pulumi.get(self, "band6")


@pulumi.output_type
class GetApStatsDeviceApStatRadioStatBand24Result(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 channel: int,
                 dynamic_chaining_enalbed: bool,
                 mac: str,
                 noise_floor: int,
                 num_clients: int,
                 power: int,
                 rx_bytes: int,
                 rx_pkts: int,
                 tx_bytes: int,
                 tx_pkts: int,
                 usage: str,
                 util_all: int,
                 util_non_wifi: int,
                 util_rx_in_bss: int,
                 util_rx_other_bss: int,
                 util_tx: int,
                 util_undecodable_wifi: int,
                 util_unknown_wifi: int):
        """
        :param int bandwidth: channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        :param int channel: current channel the radio is running on
        :param bool dynamic_chaining_enalbed: Use dynamic chaining for downlink
        :param str mac: radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        :param int power: transmit power (in dBm)
        :param int util_all: all utilization in percentage
        :param int util_non_wifi: reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        :param int util_rx_in_bss: reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        :param int util_rx_other_bss: reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        :param int util_tx: transmission utilization in percentage
        :param int util_undecodable_wifi: reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        :param int util_unknown_wifi: reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "dynamic_chaining_enalbed", dynamic_chaining_enalbed)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "noise_floor", noise_floor)
        pulumi.set(__self__, "num_clients", num_clients)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "usage", usage)
        pulumi.set(__self__, "util_all", util_all)
        pulumi.set(__self__, "util_non_wifi", util_non_wifi)
        pulumi.set(__self__, "util_rx_in_bss", util_rx_in_bss)
        pulumi.set(__self__, "util_rx_other_bss", util_rx_other_bss)
        pulumi.set(__self__, "util_tx", util_tx)
        pulumi.set(__self__, "util_undecodable_wifi", util_undecodable_wifi)
        pulumi.set(__self__, "util_unknown_wifi", util_unknown_wifi)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        current channel the radio is running on
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="dynamicChainingEnalbed")
    def dynamic_chaining_enalbed(self) -> bool:
        """
        Use dynamic chaining for downlink
        """
        return pulumi.get(self, "dynamic_chaining_enalbed")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="noiseFloor")
    def noise_floor(self) -> int:
        return pulumi.get(self, "noise_floor")

    @property
    @pulumi.getter(name="numClients")
    def num_clients(self) -> int:
        return pulumi.get(self, "num_clients")

    @property
    @pulumi.getter
    def power(self) -> int:
        """
        transmit power (in dBm)
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="utilAll")
    def util_all(self) -> int:
        """
        all utilization in percentage
        """
        return pulumi.get(self, "util_all")

    @property
    @pulumi.getter(name="utilNonWifi")
    def util_non_wifi(self) -> int:
        """
        reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        """
        return pulumi.get(self, "util_non_wifi")

    @property
    @pulumi.getter(name="utilRxInBss")
    def util_rx_in_bss(self) -> int:
        """
        reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        """
        return pulumi.get(self, "util_rx_in_bss")

    @property
    @pulumi.getter(name="utilRxOtherBss")
    def util_rx_other_bss(self) -> int:
        """
        reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        """
        return pulumi.get(self, "util_rx_other_bss")

    @property
    @pulumi.getter(name="utilTx")
    def util_tx(self) -> int:
        """
        transmission utilization in percentage
        """
        return pulumi.get(self, "util_tx")

    @property
    @pulumi.getter(name="utilUndecodableWifi")
    def util_undecodable_wifi(self) -> int:
        """
        reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        """
        return pulumi.get(self, "util_undecodable_wifi")

    @property
    @pulumi.getter(name="utilUnknownWifi")
    def util_unknown_wifi(self) -> int:
        """
        reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        return pulumi.get(self, "util_unknown_wifi")


@pulumi.output_type
class GetApStatsDeviceApStatRadioStatBand5Result(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 channel: int,
                 dynamic_chaining_enalbed: bool,
                 mac: str,
                 noise_floor: int,
                 num_clients: int,
                 power: int,
                 rx_bytes: int,
                 rx_pkts: int,
                 tx_bytes: int,
                 tx_pkts: int,
                 usage: str,
                 util_all: int,
                 util_non_wifi: int,
                 util_rx_in_bss: int,
                 util_rx_other_bss: int,
                 util_tx: int,
                 util_undecodable_wifi: int,
                 util_unknown_wifi: int):
        """
        :param int bandwidth: channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        :param int channel: current channel the radio is running on
        :param bool dynamic_chaining_enalbed: Use dynamic chaining for downlink
        :param str mac: radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        :param int power: transmit power (in dBm)
        :param int util_all: all utilization in percentage
        :param int util_non_wifi: reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        :param int util_rx_in_bss: reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        :param int util_rx_other_bss: reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        :param int util_tx: transmission utilization in percentage
        :param int util_undecodable_wifi: reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        :param int util_unknown_wifi: reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "dynamic_chaining_enalbed", dynamic_chaining_enalbed)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "noise_floor", noise_floor)
        pulumi.set(__self__, "num_clients", num_clients)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "usage", usage)
        pulumi.set(__self__, "util_all", util_all)
        pulumi.set(__self__, "util_non_wifi", util_non_wifi)
        pulumi.set(__self__, "util_rx_in_bss", util_rx_in_bss)
        pulumi.set(__self__, "util_rx_other_bss", util_rx_other_bss)
        pulumi.set(__self__, "util_tx", util_tx)
        pulumi.set(__self__, "util_undecodable_wifi", util_undecodable_wifi)
        pulumi.set(__self__, "util_unknown_wifi", util_unknown_wifi)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        current channel the radio is running on
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="dynamicChainingEnalbed")
    def dynamic_chaining_enalbed(self) -> bool:
        """
        Use dynamic chaining for downlink
        """
        return pulumi.get(self, "dynamic_chaining_enalbed")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="noiseFloor")
    def noise_floor(self) -> int:
        return pulumi.get(self, "noise_floor")

    @property
    @pulumi.getter(name="numClients")
    def num_clients(self) -> int:
        return pulumi.get(self, "num_clients")

    @property
    @pulumi.getter
    def power(self) -> int:
        """
        transmit power (in dBm)
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="utilAll")
    def util_all(self) -> int:
        """
        all utilization in percentage
        """
        return pulumi.get(self, "util_all")

    @property
    @pulumi.getter(name="utilNonWifi")
    def util_non_wifi(self) -> int:
        """
        reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        """
        return pulumi.get(self, "util_non_wifi")

    @property
    @pulumi.getter(name="utilRxInBss")
    def util_rx_in_bss(self) -> int:
        """
        reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        """
        return pulumi.get(self, "util_rx_in_bss")

    @property
    @pulumi.getter(name="utilRxOtherBss")
    def util_rx_other_bss(self) -> int:
        """
        reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        """
        return pulumi.get(self, "util_rx_other_bss")

    @property
    @pulumi.getter(name="utilTx")
    def util_tx(self) -> int:
        """
        transmission utilization in percentage
        """
        return pulumi.get(self, "util_tx")

    @property
    @pulumi.getter(name="utilUndecodableWifi")
    def util_undecodable_wifi(self) -> int:
        """
        reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        """
        return pulumi.get(self, "util_undecodable_wifi")

    @property
    @pulumi.getter(name="utilUnknownWifi")
    def util_unknown_wifi(self) -> int:
        """
        reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        return pulumi.get(self, "util_unknown_wifi")


@pulumi.output_type
class GetApStatsDeviceApStatRadioStatBand6Result(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 channel: int,
                 dynamic_chaining_enalbed: bool,
                 mac: str,
                 noise_floor: int,
                 num_clients: int,
                 power: int,
                 rx_bytes: int,
                 rx_pkts: int,
                 tx_bytes: int,
                 tx_pkts: int,
                 usage: str,
                 util_all: int,
                 util_non_wifi: int,
                 util_rx_in_bss: int,
                 util_rx_other_bss: int,
                 util_tx: int,
                 util_undecodable_wifi: int,
                 util_unknown_wifi: int):
        """
        :param int bandwidth: channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        :param int channel: current channel the radio is running on
        :param bool dynamic_chaining_enalbed: Use dynamic chaining for downlink
        :param str mac: radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        :param int power: transmit power (in dBm)
        :param int util_all: all utilization in percentage
        :param int util_non_wifi: reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        :param int util_rx_in_bss: reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        :param int util_rx_other_bss: reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        :param int util_tx: transmission utilization in percentage
        :param int util_undecodable_wifi: reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        :param int util_unknown_wifi: reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "dynamic_chaining_enalbed", dynamic_chaining_enalbed)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "noise_floor", noise_floor)
        pulumi.set(__self__, "num_clients", num_clients)
        pulumi.set(__self__, "power", power)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "usage", usage)
        pulumi.set(__self__, "util_all", util_all)
        pulumi.set(__self__, "util_non_wifi", util_non_wifi)
        pulumi.set(__self__, "util_rx_in_bss", util_rx_in_bss)
        pulumi.set(__self__, "util_rx_other_bss", util_rx_other_bss)
        pulumi.set(__self__, "util_tx", util_tx)
        pulumi.set(__self__, "util_undecodable_wifi", util_undecodable_wifi)
        pulumi.set(__self__, "util_unknown_wifi", util_unknown_wifi)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        channel width for the band * `80` is only applicable for band*5 and band*6 * `160` is only for band_6
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> int:
        """
        current channel the radio is running on
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="dynamicChainingEnalbed")
    def dynamic_chaining_enalbed(self) -> bool:
        """
        Use dynamic chaining for downlink
        """
        return pulumi.get(self, "dynamic_chaining_enalbed")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        radio (base) mac, it can have 16 bssids (e.g. 5c5b350001a0-5c5b350001af)
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="noiseFloor")
    def noise_floor(self) -> int:
        return pulumi.get(self, "noise_floor")

    @property
    @pulumi.getter(name="numClients")
    def num_clients(self) -> int:
        return pulumi.get(self, "num_clients")

    @property
    @pulumi.getter
    def power(self) -> int:
        """
        transmit power (in dBm)
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="utilAll")
    def util_all(self) -> int:
        """
        all utilization in percentage
        """
        return pulumi.get(self, "util_all")

    @property
    @pulumi.getter(name="utilNonWifi")
    def util_non_wifi(self) -> int:
        """
        reception of “No Packets” utilization in percentage, received frames with invalid PLCPs and CRS glitches as noise
        """
        return pulumi.get(self, "util_non_wifi")

    @property
    @pulumi.getter(name="utilRxInBss")
    def util_rx_in_bss(self) -> int:
        """
        reception of “In BSS” utilization in percentage, only frames that are received from AP/STAs within the BSS
        """
        return pulumi.get(self, "util_rx_in_bss")

    @property
    @pulumi.getter(name="utilRxOtherBss")
    def util_rx_other_bss(self) -> int:
        """
        reception of “Other BSS” utilization in percentage, all frames received from AP/STAs that are outside the BSS
        """
        return pulumi.get(self, "util_rx_other_bss")

    @property
    @pulumi.getter(name="utilTx")
    def util_tx(self) -> int:
        """
        transmission utilization in percentage
        """
        return pulumi.get(self, "util_tx")

    @property
    @pulumi.getter(name="utilUndecodableWifi")
    def util_undecodable_wifi(self) -> int:
        """
        reception of “UnDecodable Wifi“ utilization in percentage, only Preamble, PLCP header is decoded, Rest is undecodable in this radio
        """
        return pulumi.get(self, "util_undecodable_wifi")

    @property
    @pulumi.getter(name="utilUnknownWifi")
    def util_unknown_wifi(self) -> int:
        """
        reception of “No Category” utilization in percentage, all 802.11 frames that are corrupted at the receiver
        """
        return pulumi.get(self, "util_unknown_wifi")


@pulumi.output_type
class GetApStatsDeviceApStatSwitchRedundancyResult(dict):
    def __init__(__self__, *,
                 num_redundant_aps: int):
        pulumi.set(__self__, "num_redundant_aps", num_redundant_aps)

    @property
    @pulumi.getter(name="numRedundantAps")
    def num_redundant_aps(self) -> int:
        return pulumi.get(self, "num_redundant_aps")


@pulumi.output_type
class GetApStatsDeviceApStatUsbStatResult(dict):
    def __init__(__self__, *,
                 channel: int,
                 connected: bool,
                 last_activity: int,
                 type: str,
                 up: bool):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "last_activity", last_activity)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def channel(self) -> int:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def connected(self) -> bool:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter(name="lastActivity")
    def last_activity(self) -> int:
        return pulumi.get(self, "last_activity")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatResult(dict):
    def __init__(__self__, *,
                 ap_redundancy: 'outputs.GetGatewayStatsDeviceGatewayStatApRedundancyResult',
                 arp_table_stats: 'outputs.GetGatewayStatsDeviceGatewayStatArpTableStatsResult',
                 cert_expiry: int,
                 cluster_config: 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigResult',
                 cluster_stat: 'outputs.GetGatewayStatsDeviceGatewayStatClusterStatResult',
                 conductor_name: str,
                 config_status: str,
                 cpu2_stat: 'outputs.GetGatewayStatsDeviceGatewayStatCpu2StatResult',
                 cpu_stat: 'outputs.GetGatewayStatsDeviceGatewayStatCpuStatResult',
                 created_time: int,
                 deviceprofile_id: str,
                 dhcpd2_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatDhcpd2StatResult'],
                 dhcpd_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatDhcpdStatResult'],
                 ext_ip: str,
                 fwupdate: 'outputs.GetGatewayStatsDeviceGatewayStatFwupdateResult',
                 has_pcap: bool,
                 hostname: str,
                 id: str,
                 if2_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatIf2StatResult'],
                 if_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatIfStatResult'],
                 ip: str,
                 ip2_stat: 'outputs.GetGatewayStatsDeviceGatewayStatIp2StatResult',
                 ip_stat: 'outputs.GetGatewayStatsDeviceGatewayStatIpStatResult',
                 is_ha: bool,
                 last_seen: float,
                 mac: str,
                 map_id: str,
                 memory2_stat: 'outputs.GetGatewayStatsDeviceGatewayStatMemory2StatResult',
                 memory_stat: 'outputs.GetGatewayStatsDeviceGatewayStatMemoryStatResult',
                 model: str,
                 modified_time: int,
                 module2_stats: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatResult'],
                 module_stats: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatResult'],
                 name: str,
                 node_name: str,
                 org_id: str,
                 route_summary_stats: 'outputs.GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult',
                 router_name: str,
                 serial: str,
                 service2_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatService2StatResult'],
                 service_stat: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatServiceStatResult'],
                 service_status: 'outputs.GetGatewayStatsDeviceGatewayStatServiceStatusResult',
                 site_id: str,
                 spu2_stats: Sequence['outputs.GetGatewayStatsDeviceGatewayStatSpu2StatResult'],
                 spu_stats: Sequence['outputs.GetGatewayStatsDeviceGatewayStatSpuStatResult'],
                 status: str,
                 uptime: float,
                 version: str):
        """
        :param Mapping[str, 'GetGatewayStatsDeviceGatewayStatDhcpd2StatArgs'] dhcpd2_stat: Property key is the network name
        :param Mapping[str, 'GetGatewayStatsDeviceGatewayStatDhcpdStatArgs'] dhcpd_stat: Property key is the network name
        :param str ext_ip: IP address
        :param str hostname: hostname reported by the device
        :param str id: serial
        :param Mapping[str, 'GetGatewayStatsDeviceGatewayStatIf2StatArgs'] if2_stat: Property key is the interface name
        :param Mapping[str, 'GetGatewayStatsDeviceGatewayStatIfStatArgs'] if_stat: Property key is the interface name
        :param str ip: IP address
        :param float last_seen: last seen timestamp
        :param str mac: device mac
        :param str map_id: serial
        :param 'GetGatewayStatsDeviceGatewayStatMemory2StatArgs' memory2_stat: memory usage stat (for virtual chassis, memory usage of master RE)
        :param 'GetGatewayStatsDeviceGatewayStatMemoryStatArgs' memory_stat: memory usage stat (for virtual chassis, memory usage of master RE)
        :param str model: device model
        :param str name: device name if configured
        :param str org_id: serial
        :param str router_name: device name if configured
        :param str serial: serial
        :param str site_id: serial
        """
        pulumi.set(__self__, "ap_redundancy", ap_redundancy)
        pulumi.set(__self__, "arp_table_stats", arp_table_stats)
        pulumi.set(__self__, "cert_expiry", cert_expiry)
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "cluster_stat", cluster_stat)
        pulumi.set(__self__, "conductor_name", conductor_name)
        pulumi.set(__self__, "config_status", config_status)
        pulumi.set(__self__, "cpu2_stat", cpu2_stat)
        pulumi.set(__self__, "cpu_stat", cpu_stat)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        pulumi.set(__self__, "dhcpd2_stat", dhcpd2_stat)
        pulumi.set(__self__, "dhcpd_stat", dhcpd_stat)
        pulumi.set(__self__, "ext_ip", ext_ip)
        pulumi.set(__self__, "fwupdate", fwupdate)
        pulumi.set(__self__, "has_pcap", has_pcap)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "if2_stat", if2_stat)
        pulumi.set(__self__, "if_stat", if_stat)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip2_stat", ip2_stat)
        pulumi.set(__self__, "ip_stat", ip_stat)
        pulumi.set(__self__, "is_ha", is_ha)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "map_id", map_id)
        pulumi.set(__self__, "memory2_stat", memory2_stat)
        pulumi.set(__self__, "memory_stat", memory_stat)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "module2_stats", module2_stats)
        pulumi.set(__self__, "module_stats", module_stats)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "route_summary_stats", route_summary_stats)
        pulumi.set(__self__, "router_name", router_name)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "service2_stat", service2_stat)
        pulumi.set(__self__, "service_stat", service_stat)
        pulumi.set(__self__, "service_status", service_status)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "spu2_stats", spu2_stats)
        pulumi.set(__self__, "spu_stats", spu_stats)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="apRedundancy")
    def ap_redundancy(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatApRedundancyResult':
        return pulumi.get(self, "ap_redundancy")

    @property
    @pulumi.getter(name="arpTableStats")
    def arp_table_stats(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatArpTableStatsResult':
        return pulumi.get(self, "arp_table_stats")

    @property
    @pulumi.getter(name="certExpiry")
    def cert_expiry(self) -> int:
        return pulumi.get(self, "cert_expiry")

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigResult':
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="clusterStat")
    def cluster_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatClusterStatResult':
        return pulumi.get(self, "cluster_stat")

    @property
    @pulumi.getter(name="conductorName")
    def conductor_name(self) -> str:
        return pulumi.get(self, "conductor_name")

    @property
    @pulumi.getter(name="configStatus")
    def config_status(self) -> str:
        return pulumi.get(self, "config_status")

    @property
    @pulumi.getter(name="cpu2Stat")
    def cpu2_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatCpu2StatResult':
        return pulumi.get(self, "cpu2_stat")

    @property
    @pulumi.getter(name="cpuStat")
    def cpu_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatCpuStatResult':
        return pulumi.get(self, "cpu_stat")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> int:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> str:
        return pulumi.get(self, "deviceprofile_id")

    @property
    @pulumi.getter(name="dhcpd2Stat")
    def dhcpd2_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatDhcpd2StatResult']:
        """
        Property key is the network name
        """
        return pulumi.get(self, "dhcpd2_stat")

    @property
    @pulumi.getter(name="dhcpdStat")
    def dhcpd_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatDhcpdStatResult']:
        """
        Property key is the network name
        """
        return pulumi.get(self, "dhcpd_stat")

    @property
    @pulumi.getter(name="extIp")
    def ext_ip(self) -> str:
        """
        IP address
        """
        return pulumi.get(self, "ext_ip")

    @property
    @pulumi.getter
    def fwupdate(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatFwupdateResult':
        return pulumi.get(self, "fwupdate")

    @property
    @pulumi.getter(name="hasPcap")
    def has_pcap(self) -> bool:
        return pulumi.get(self, "has_pcap")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        hostname reported by the device
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="if2Stat")
    def if2_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatIf2StatResult']:
        """
        Property key is the interface name
        """
        return pulumi.get(self, "if2_stat")

    @property
    @pulumi.getter(name="ifStat")
    def if_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatIfStatResult']:
        """
        Property key is the interface name
        """
        return pulumi.get(self, "if_stat")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP address
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ip2Stat")
    def ip2_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatIp2StatResult':
        return pulumi.get(self, "ip2_stat")

    @property
    @pulumi.getter(name="ipStat")
    def ip_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatIpStatResult':
        return pulumi.get(self, "ip_stat")

    @property
    @pulumi.getter(name="isHa")
    def is_ha(self) -> bool:
        return pulumi.get(self, "is_ha")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        """
        last seen timestamp
        """
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        device mac
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="memory2Stat")
    def memory2_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatMemory2StatResult':
        """
        memory usage stat (for virtual chassis, memory usage of master RE)
        """
        return pulumi.get(self, "memory2_stat")

    @property
    @pulumi.getter(name="memoryStat")
    def memory_stat(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatMemoryStatResult':
        """
        memory usage stat (for virtual chassis, memory usage of master RE)
        """
        return pulumi.get(self, "memory_stat")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="module2Stats")
    def module2_stats(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatResult']:
        return pulumi.get(self, "module2_stats")

    @property
    @pulumi.getter(name="moduleStats")
    def module_stats(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatResult']:
        return pulumi.get(self, "module_stats")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        device name if configured
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="routeSummaryStats")
    def route_summary_stats(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult':
        return pulumi.get(self, "route_summary_stats")

    @property
    @pulumi.getter(name="routerName")
    def router_name(self) -> str:
        """
        device name if configured
        """
        return pulumi.get(self, "router_name")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="service2Stat")
    def service2_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatService2StatResult']:
        return pulumi.get(self, "service2_stat")

    @property
    @pulumi.getter(name="serviceStat")
    def service_stat(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatServiceStatResult']:
        return pulumi.get(self, "service_stat")

    @property
    @pulumi.getter(name="serviceStatus")
    def service_status(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatServiceStatusResult':
        return pulumi.get(self, "service_status")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        """
        serial
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="spu2Stats")
    def spu2_stats(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatSpu2StatResult']:
        return pulumi.get(self, "spu2_stats")

    @property
    @pulumi.getter(name="spuStats")
    def spu_stats(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatSpuStatResult']:
        return pulumi.get(self, "spu_stats")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uptime(self) -> float:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatApRedundancyResult(dict):
    def __init__(__self__, *,
                 modules: Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatApRedundancyModulesResult'],
                 num_aps: int,
                 num_aps_with_switch_redundancy: int):
        """
        :param Mapping[str, 'GetGatewayStatsDeviceGatewayStatApRedundancyModulesArgs'] modules: Property key is the node id
        """
        pulumi.set(__self__, "modules", modules)
        pulumi.set(__self__, "num_aps", num_aps)
        pulumi.set(__self__, "num_aps_with_switch_redundancy", num_aps_with_switch_redundancy)

    @property
    @pulumi.getter
    def modules(self) -> Mapping[str, 'outputs.GetGatewayStatsDeviceGatewayStatApRedundancyModulesResult']:
        """
        Property key is the node id
        """
        return pulumi.get(self, "modules")

    @property
    @pulumi.getter(name="numAps")
    def num_aps(self) -> int:
        return pulumi.get(self, "num_aps")

    @property
    @pulumi.getter(name="numApsWithSwitchRedundancy")
    def num_aps_with_switch_redundancy(self) -> int:
        return pulumi.get(self, "num_aps_with_switch_redundancy")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatApRedundancyModulesResult(dict):
    def __init__(__self__, *,
                 num_aps: int,
                 num_aps_with_switch_redundancy: int):
        pulumi.set(__self__, "num_aps", num_aps)
        pulumi.set(__self__, "num_aps_with_switch_redundancy", num_aps_with_switch_redundancy)

    @property
    @pulumi.getter(name="numAps")
    def num_aps(self) -> int:
        return pulumi.get(self, "num_aps")

    @property
    @pulumi.getter(name="numApsWithSwitchRedundancy")
    def num_aps_with_switch_redundancy(self) -> int:
        return pulumi.get(self, "num_aps_with_switch_redundancy")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatArpTableStatsResult(dict):
    def __init__(__self__, *,
                 arp_table_count: int,
                 max_entries_supported: int):
        pulumi.set(__self__, "arp_table_count", arp_table_count)
        pulumi.set(__self__, "max_entries_supported", max_entries_supported)

    @property
    @pulumi.getter(name="arpTableCount")
    def arp_table_count(self) -> int:
        return pulumi.get(self, "arp_table_count")

    @property
    @pulumi.getter(name="maxEntriesSupported")
    def max_entries_supported(self) -> int:
        return pulumi.get(self, "max_entries_supported")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterConfigResult(dict):
    def __init__(__self__, *,
                 configuration: str,
                 control_link_info: 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfoResult',
                 ethernet_connections: Sequence['outputs.GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnectionResult'],
                 fabric_link_info: 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfoResult',
                 last_status_change_reason: str,
                 operational: str,
                 primary_node_health: str,
                 redundancy_group_informations: Sequence['outputs.GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformationResult'],
                 secondary_node_health: str,
                 status: str):
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "control_link_info", control_link_info)
        pulumi.set(__self__, "ethernet_connections", ethernet_connections)
        pulumi.set(__self__, "fabric_link_info", fabric_link_info)
        pulumi.set(__self__, "last_status_change_reason", last_status_change_reason)
        pulumi.set(__self__, "operational", operational)
        pulumi.set(__self__, "primary_node_health", primary_node_health)
        pulumi.set(__self__, "redundancy_group_informations", redundancy_group_informations)
        pulumi.set(__self__, "secondary_node_health", secondary_node_health)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def configuration(self) -> str:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="controlLinkInfo")
    def control_link_info(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfoResult':
        return pulumi.get(self, "control_link_info")

    @property
    @pulumi.getter(name="ethernetConnections")
    def ethernet_connections(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnectionResult']:
        return pulumi.get(self, "ethernet_connections")

    @property
    @pulumi.getter(name="fabricLinkInfo")
    def fabric_link_info(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfoResult':
        return pulumi.get(self, "fabric_link_info")

    @property
    @pulumi.getter(name="lastStatusChangeReason")
    def last_status_change_reason(self) -> str:
        return pulumi.get(self, "last_status_change_reason")

    @property
    @pulumi.getter
    def operational(self) -> str:
        return pulumi.get(self, "operational")

    @property
    @pulumi.getter(name="primaryNodeHealth")
    def primary_node_health(self) -> str:
        return pulumi.get(self, "primary_node_health")

    @property
    @pulumi.getter(name="redundancyGroupInformations")
    def redundancy_group_informations(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformationResult']:
        return pulumi.get(self, "redundancy_group_informations")

    @property
    @pulumi.getter(name="secondaryNodeHealth")
    def secondary_node_health(self) -> str:
        return pulumi.get(self, "secondary_node_health")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterConfigControlLinkInfoResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterConfigEthernetConnectionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterConfigFabricLinkInfoResult(dict):
    def __init__(__self__, *,
                 data_plane_notified_status: str,
                 interfaces: Sequence[str],
                 internal_status: str,
                 state: str,
                 status: str):
        pulumi.set(__self__, "data_plane_notified_status", data_plane_notified_status)
        pulumi.set(__self__, "interfaces", interfaces)
        pulumi.set(__self__, "internal_status", internal_status)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dataPlaneNotifiedStatus")
    def data_plane_notified_status(self) -> str:
        return pulumi.get(self, "data_plane_notified_status")

    @property
    @pulumi.getter
    def interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "interfaces")

    @property
    @pulumi.getter(name="internalStatus")
    def internal_status(self) -> str:
        return pulumi.get(self, "internal_status")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterConfigRedundancyGroupInformationResult(dict):
    def __init__(__self__, *,
                 id: int,
                 monitoring_failure: str,
                 threshold: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "monitoring_failure", monitoring_failure)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitoringFailure")
    def monitoring_failure(self) -> str:
        return pulumi.get(self, "monitoring_failure")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatClusterStatResult(dict):
    def __init__(__self__, *,
                 state: str):
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatCpu2StatResult(dict):
    def __init__(__self__, *,
                 idle: float,
                 interrupt: float,
                 load_avgs: Sequence[float],
                 system: float,
                 user: float):
        """
        :param float idle: Percentage of CPU time that is idle
        :param float interrupt: Percentage of CPU time being used by interrupts
        :param Sequence[float] load_avgs: Load averages for the last 1, 5, and 15 minutes
        :param float system: Percentage of CPU time being used by system processes
        :param float user: Percentage of CPU time being used by user processe
        """
        pulumi.set(__self__, "idle", idle)
        pulumi.set(__self__, "interrupt", interrupt)
        pulumi.set(__self__, "load_avgs", load_avgs)
        pulumi.set(__self__, "system", system)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def idle(self) -> float:
        """
        Percentage of CPU time that is idle
        """
        return pulumi.get(self, "idle")

    @property
    @pulumi.getter
    def interrupt(self) -> float:
        """
        Percentage of CPU time being used by interrupts
        """
        return pulumi.get(self, "interrupt")

    @property
    @pulumi.getter(name="loadAvgs")
    def load_avgs(self) -> Sequence[float]:
        """
        Load averages for the last 1, 5, and 15 minutes
        """
        return pulumi.get(self, "load_avgs")

    @property
    @pulumi.getter
    def system(self) -> float:
        """
        Percentage of CPU time being used by system processes
        """
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def user(self) -> float:
        """
        Percentage of CPU time being used by user processe
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatCpuStatResult(dict):
    def __init__(__self__, *,
                 idle: float,
                 interrupt: float,
                 load_avgs: Sequence[float],
                 system: float,
                 user: float):
        """
        :param float idle: Percentage of CPU time that is idle
        :param float interrupt: Percentage of CPU time being used by interrupts
        :param Sequence[float] load_avgs: Load averages for the last 1, 5, and 15 minutes
        :param float system: Percentage of CPU time being used by system processes
        :param float user: Percentage of CPU time being used by user processe
        """
        pulumi.set(__self__, "idle", idle)
        pulumi.set(__self__, "interrupt", interrupt)
        pulumi.set(__self__, "load_avgs", load_avgs)
        pulumi.set(__self__, "system", system)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def idle(self) -> float:
        """
        Percentage of CPU time that is idle
        """
        return pulumi.get(self, "idle")

    @property
    @pulumi.getter
    def interrupt(self) -> float:
        """
        Percentage of CPU time being used by interrupts
        """
        return pulumi.get(self, "interrupt")

    @property
    @pulumi.getter(name="loadAvgs")
    def load_avgs(self) -> Sequence[float]:
        """
        Load averages for the last 1, 5, and 15 minutes
        """
        return pulumi.get(self, "load_avgs")

    @property
    @pulumi.getter
    def system(self) -> float:
        """
        Percentage of CPU time being used by system processes
        """
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def user(self) -> float:
        """
        Percentage of CPU time being used by user processe
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatDhcpd2StatResult(dict):
    def __init__(__self__, *,
                 num_ips: int,
                 num_leased: int):
        pulumi.set(__self__, "num_ips", num_ips)
        pulumi.set(__self__, "num_leased", num_leased)

    @property
    @pulumi.getter(name="numIps")
    def num_ips(self) -> int:
        return pulumi.get(self, "num_ips")

    @property
    @pulumi.getter(name="numLeased")
    def num_leased(self) -> int:
        return pulumi.get(self, "num_leased")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatDhcpdStatResult(dict):
    def __init__(__self__, *,
                 num_ips: int,
                 num_leased: int):
        pulumi.set(__self__, "num_ips", num_ips)
        pulumi.set(__self__, "num_leased", num_leased)

    @property
    @pulumi.getter(name="numIps")
    def num_ips(self) -> int:
        return pulumi.get(self, "num_ips")

    @property
    @pulumi.getter(name="numLeased")
    def num_leased(self) -> int:
        return pulumi.get(self, "num_leased")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatFwupdateResult(dict):
    def __init__(__self__, *,
                 progress: int,
                 status: str,
                 status_id: int,
                 timestamp: float,
                 will_retry: bool):
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_id", status_id)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "will_retry", will_retry)

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> int:
        return pulumi.get(self, "status_id")

    @property
    @pulumi.getter
    def timestamp(self) -> float:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="willRetry")
    def will_retry(self) -> bool:
        return pulumi.get(self, "will_retry")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIf2StatResult(dict):
    def __init__(__self__, *,
                 address_mode: str,
                 ips: Sequence[str],
                 nat_addresses: Sequence[str],
                 network_name: str,
                 port_id: str,
                 port_usage: str,
                 redundancy_state: str,
                 rx_bytes: int,
                 rx_pkts: int,
                 servp_info: 'outputs.GetGatewayStatsDeviceGatewayStatIf2StatServpInfoResult',
                 tx_bytes: int,
                 tx_pkts: int,
                 up: bool,
                 vlan: int,
                 wan_name: str,
                 wan_type: str):
        pulumi.set(__self__, "address_mode", address_mode)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "nat_addresses", nat_addresses)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_usage", port_usage)
        pulumi.set(__self__, "redundancy_state", redundancy_state)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "servp_info", servp_info)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "up", up)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wan_name", wan_name)
        pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter(name="addressMode")
    def address_mode(self) -> str:
        return pulumi.get(self, "address_mode")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="natAddresses")
    def nat_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "nat_addresses")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portUsage")
    def port_usage(self) -> str:
        return pulumi.get(self, "port_usage")

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> str:
        return pulumi.get(self, "redundancy_state")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="servpInfo")
    def servp_info(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatIf2StatServpInfoResult':
        return pulumi.get(self, "servp_info")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> str:
        return pulumi.get(self, "wan_name")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> str:
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIf2StatServpInfoResult(dict):
    def __init__(__self__, *,
                 asn: str,
                 city: str,
                 country_code: str,
                 latitude: float,
                 longitude: float,
                 org: str,
                 region_code: str):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIfStatResult(dict):
    def __init__(__self__, *,
                 address_mode: str,
                 ips: Sequence[str],
                 nat_addresses: Sequence[str],
                 network_name: str,
                 port_id: str,
                 port_usage: str,
                 redundancy_state: str,
                 rx_bytes: int,
                 rx_pkts: int,
                 servp_info: 'outputs.GetGatewayStatsDeviceGatewayStatIfStatServpInfoResult',
                 tx_bytes: int,
                 tx_pkts: int,
                 up: bool,
                 vlan: int,
                 wan_name: str,
                 wan_type: str):
        pulumi.set(__self__, "address_mode", address_mode)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "nat_addresses", nat_addresses)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_usage", port_usage)
        pulumi.set(__self__, "redundancy_state", redundancy_state)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "servp_info", servp_info)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "up", up)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wan_name", wan_name)
        pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter(name="addressMode")
    def address_mode(self) -> str:
        return pulumi.get(self, "address_mode")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="natAddresses")
    def nat_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "nat_addresses")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portUsage")
    def port_usage(self) -> str:
        return pulumi.get(self, "port_usage")

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> str:
        return pulumi.get(self, "redundancy_state")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="servpInfo")
    def servp_info(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatIfStatServpInfoResult':
        return pulumi.get(self, "servp_info")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> str:
        return pulumi.get(self, "wan_name")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> str:
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIfStatServpInfoResult(dict):
    def __init__(__self__, *,
                 asn: str,
                 city: str,
                 country_code: str,
                 latitude: float,
                 longitude: float,
                 org: str,
                 region_code: str):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIp2StatResult(dict):
    def __init__(__self__, *,
                 dhcp_server: str,
                 dns: Sequence[str],
                 dns_suffixes: Sequence[str],
                 gateway: str,
                 gateway6: str,
                 ip: str,
                 ip6: str,
                 ips: Mapping[str, str],
                 netmask: str,
                 netmask6: str):
        pulumi.set(__self__, "dhcp_server", dhcp_server)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "netmask6", netmask6)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> str:
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Sequence[str]:
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def ips(self) -> Mapping[str, str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> str:
        return pulumi.get(self, "netmask6")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatIpStatResult(dict):
    def __init__(__self__, *,
                 dhcp_server: str,
                 dns: Sequence[str],
                 dns_suffixes: Sequence[str],
                 gateway: str,
                 gateway6: str,
                 ip: str,
                 ip6: str,
                 ips: Mapping[str, str],
                 netmask: str,
                 netmask6: str):
        pulumi.set(__self__, "dhcp_server", dhcp_server)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "netmask6", netmask6)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> str:
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Sequence[str]:
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def ips(self) -> Mapping[str, str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> str:
        return pulumi.get(self, "netmask6")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatMemory2StatResult(dict):
    def __init__(__self__, *,
                 usage: float):
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def usage(self) -> float:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatMemoryStatResult(dict):
    def __init__(__self__, *,
                 usage: float):
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def usage(self) -> float:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatResult(dict):
    def __init__(__self__, *,
                 backup_version: str,
                 bios_version: str,
                 cpld_version: str,
                 errors: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatErrorResult'],
                 fans: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatFanResult'],
                 fpga_version: str,
                 last_seen: float,
                 model: str,
                 optics_cpld_version: str,
                 pending_version: str,
                 pics: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPicResult'],
                 poe: 'outputs.GetGatewayStatsDeviceGatewayStatModule2StatPoeResult',
                 poe_version: str,
                 power_cpld_version: str,
                 psuses: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPsusResult'],
                 re_fpga_version: str,
                 recovery_version: str,
                 serial: str,
                 status: str,
                 temperatures: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatTemperatureResult'],
                 tmc_fpga_version: str,
                 uboot_version: str,
                 uptime: int,
                 vc_links: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatVcLinkResult'],
                 vc_mode: str,
                 vc_role: str,
                 vc_state: str,
                 version: str):
        """
        :param Sequence['GetGatewayStatsDeviceGatewayStatModule2StatErrorArgs'] errors: used to report all error states the device node is running into.
               An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        :param str vc_role: master / backup / linecard
        """
        pulumi.set(__self__, "backup_version", backup_version)
        pulumi.set(__self__, "bios_version", bios_version)
        pulumi.set(__self__, "cpld_version", cpld_version)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "fans", fans)
        pulumi.set(__self__, "fpga_version", fpga_version)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "optics_cpld_version", optics_cpld_version)
        pulumi.set(__self__, "pending_version", pending_version)
        pulumi.set(__self__, "pics", pics)
        pulumi.set(__self__, "poe", poe)
        pulumi.set(__self__, "poe_version", poe_version)
        pulumi.set(__self__, "power_cpld_version", power_cpld_version)
        pulumi.set(__self__, "psuses", psuses)
        pulumi.set(__self__, "re_fpga_version", re_fpga_version)
        pulumi.set(__self__, "recovery_version", recovery_version)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "temperatures", temperatures)
        pulumi.set(__self__, "tmc_fpga_version", tmc_fpga_version)
        pulumi.set(__self__, "uboot_version", uboot_version)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "vc_links", vc_links)
        pulumi.set(__self__, "vc_mode", vc_mode)
        pulumi.set(__self__, "vc_role", vc_role)
        pulumi.set(__self__, "vc_state", vc_state)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="backupVersion")
    def backup_version(self) -> str:
        return pulumi.get(self, "backup_version")

    @property
    @pulumi.getter(name="biosVersion")
    def bios_version(self) -> str:
        return pulumi.get(self, "bios_version")

    @property
    @pulumi.getter(name="cpldVersion")
    def cpld_version(self) -> str:
        return pulumi.get(self, "cpld_version")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatErrorResult']:
        """
        used to report all error states the device node is running into.
        An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def fans(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatFanResult']:
        return pulumi.get(self, "fans")

    @property
    @pulumi.getter(name="fpgaVersion")
    def fpga_version(self) -> str:
        return pulumi.get(self, "fpga_version")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="opticsCpldVersion")
    def optics_cpld_version(self) -> str:
        return pulumi.get(self, "optics_cpld_version")

    @property
    @pulumi.getter(name="pendingVersion")
    def pending_version(self) -> str:
        return pulumi.get(self, "pending_version")

    @property
    @pulumi.getter
    def pics(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPicResult']:
        return pulumi.get(self, "pics")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatModule2StatPoeResult':
        return pulumi.get(self, "poe")

    @property
    @pulumi.getter(name="poeVersion")
    def poe_version(self) -> str:
        return pulumi.get(self, "poe_version")

    @property
    @pulumi.getter(name="powerCpldVersion")
    def power_cpld_version(self) -> str:
        return pulumi.get(self, "power_cpld_version")

    @property
    @pulumi.getter
    def psuses(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPsusResult']:
        return pulumi.get(self, "psuses")

    @property
    @pulumi.getter(name="reFpgaVersion")
    def re_fpga_version(self) -> str:
        return pulumi.get(self, "re_fpga_version")

    @property
    @pulumi.getter(name="recoveryVersion")
    def recovery_version(self) -> str:
        return pulumi.get(self, "recovery_version")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def temperatures(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatTemperatureResult']:
        return pulumi.get(self, "temperatures")

    @property
    @pulumi.getter(name="tmcFpgaVersion")
    def tmc_fpga_version(self) -> str:
        return pulumi.get(self, "tmc_fpga_version")

    @property
    @pulumi.getter(name="ubootVersion")
    def uboot_version(self) -> str:
        return pulumi.get(self, "uboot_version")

    @property
    @pulumi.getter
    def uptime(self) -> int:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="vcLinks")
    def vc_links(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatVcLinkResult']:
        return pulumi.get(self, "vc_links")

    @property
    @pulumi.getter(name="vcMode")
    def vc_mode(self) -> str:
        return pulumi.get(self, "vc_mode")

    @property
    @pulumi.getter(name="vcRole")
    def vc_role(self) -> str:
        """
        master / backup / linecard
        """
        return pulumi.get(self, "vc_role")

    @property
    @pulumi.getter(name="vcState")
    def vc_state(self) -> str:
        return pulumi.get(self, "vc_state")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatErrorResult(dict):
    def __init__(__self__, *,
                 feature: str,
                 minimum_version: str,
                 reason: str,
                 since: int,
                 type: str):
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "minimum_version", minimum_version)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def feature(self) -> str:
        return pulumi.get(self, "feature")

    @property
    @pulumi.getter(name="minimumVersion")
    def minimum_version(self) -> str:
        return pulumi.get(self, "minimum_version")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def since(self) -> int:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatFanResult(dict):
    def __init__(__self__, *,
                 airflow: str,
                 name: str,
                 status: str):
        pulumi.set(__self__, "airflow", airflow)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def airflow(self) -> str:
        return pulumi.get(self, "airflow")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatPicResult(dict):
    def __init__(__self__, *,
                 index: int,
                 model_number: str,
                 port_groups: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroupResult']):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "model_number", model_number)
        pulumi.set(__self__, "port_groups", port_groups)

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="modelNumber")
    def model_number(self) -> str:
        return pulumi.get(self, "model_number")

    @property
    @pulumi.getter(name="portGroups")
    def port_groups(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroupResult']:
        return pulumi.get(self, "port_groups")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatPicPortGroupResult(dict):
    def __init__(__self__, *,
                 count: int,
                 type: str):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatPoeResult(dict):
    def __init__(__self__, *,
                 max_power: float,
                 power_draw: float):
        pulumi.set(__self__, "max_power", max_power)
        pulumi.set(__self__, "power_draw", power_draw)

    @property
    @pulumi.getter(name="maxPower")
    def max_power(self) -> float:
        return pulumi.get(self, "max_power")

    @property
    @pulumi.getter(name="powerDraw")
    def power_draw(self) -> float:
        return pulumi.get(self, "power_draw")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatPsusResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatTemperatureResult(dict):
    def __init__(__self__, *,
                 celsius: float,
                 name: str,
                 status: str):
        pulumi.set(__self__, "celsius", celsius)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def celsius(self) -> float:
        return pulumi.get(self, "celsius")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModule2StatVcLinkResult(dict):
    def __init__(__self__, *,
                 neighbor_module_idx: int,
                 neighbor_port_id: str,
                 port_id: str):
        pulumi.set(__self__, "neighbor_module_idx", neighbor_module_idx)
        pulumi.set(__self__, "neighbor_port_id", neighbor_port_id)
        pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="neighborModuleIdx")
    def neighbor_module_idx(self) -> int:
        return pulumi.get(self, "neighbor_module_idx")

    @property
    @pulumi.getter(name="neighborPortId")
    def neighbor_port_id(self) -> str:
        return pulumi.get(self, "neighbor_port_id")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatResult(dict):
    def __init__(__self__, *,
                 backup_version: str,
                 bios_version: str,
                 cpld_version: str,
                 errors: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatErrorResult'],
                 fans: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatFanResult'],
                 fpga_version: str,
                 last_seen: float,
                 model: str,
                 optics_cpld_version: str,
                 pending_version: str,
                 pics: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPicResult'],
                 poe: 'outputs.GetGatewayStatsDeviceGatewayStatModuleStatPoeResult',
                 poe_version: str,
                 power_cpld_version: str,
                 psuses: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPsusResult'],
                 re_fpga_version: str,
                 recovery_version: str,
                 serial: str,
                 status: str,
                 temperatures: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatTemperatureResult'],
                 tmc_fpga_version: str,
                 uboot_version: str,
                 uptime: int,
                 vc_links: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatVcLinkResult'],
                 vc_mode: str,
                 vc_role: str,
                 vc_state: str,
                 version: str):
        """
        :param Sequence['GetGatewayStatsDeviceGatewayStatModuleStatErrorArgs'] errors: used to report all error states the device node is running into.
               An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        :param str vc_role: master / backup / linecard
        """
        pulumi.set(__self__, "backup_version", backup_version)
        pulumi.set(__self__, "bios_version", bios_version)
        pulumi.set(__self__, "cpld_version", cpld_version)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "fans", fans)
        pulumi.set(__self__, "fpga_version", fpga_version)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "optics_cpld_version", optics_cpld_version)
        pulumi.set(__self__, "pending_version", pending_version)
        pulumi.set(__self__, "pics", pics)
        pulumi.set(__self__, "poe", poe)
        pulumi.set(__self__, "poe_version", poe_version)
        pulumi.set(__self__, "power_cpld_version", power_cpld_version)
        pulumi.set(__self__, "psuses", psuses)
        pulumi.set(__self__, "re_fpga_version", re_fpga_version)
        pulumi.set(__self__, "recovery_version", recovery_version)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "temperatures", temperatures)
        pulumi.set(__self__, "tmc_fpga_version", tmc_fpga_version)
        pulumi.set(__self__, "uboot_version", uboot_version)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "vc_links", vc_links)
        pulumi.set(__self__, "vc_mode", vc_mode)
        pulumi.set(__self__, "vc_role", vc_role)
        pulumi.set(__self__, "vc_state", vc_state)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="backupVersion")
    def backup_version(self) -> str:
        return pulumi.get(self, "backup_version")

    @property
    @pulumi.getter(name="biosVersion")
    def bios_version(self) -> str:
        return pulumi.get(self, "bios_version")

    @property
    @pulumi.getter(name="cpldVersion")
    def cpld_version(self) -> str:
        return pulumi.get(self, "cpld_version")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatErrorResult']:
        """
        used to report all error states the device node is running into.
        An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def fans(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatFanResult']:
        return pulumi.get(self, "fans")

    @property
    @pulumi.getter(name="fpgaVersion")
    def fpga_version(self) -> str:
        return pulumi.get(self, "fpga_version")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="opticsCpldVersion")
    def optics_cpld_version(self) -> str:
        return pulumi.get(self, "optics_cpld_version")

    @property
    @pulumi.getter(name="pendingVersion")
    def pending_version(self) -> str:
        return pulumi.get(self, "pending_version")

    @property
    @pulumi.getter
    def pics(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPicResult']:
        return pulumi.get(self, "pics")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetGatewayStatsDeviceGatewayStatModuleStatPoeResult':
        return pulumi.get(self, "poe")

    @property
    @pulumi.getter(name="poeVersion")
    def poe_version(self) -> str:
        return pulumi.get(self, "poe_version")

    @property
    @pulumi.getter(name="powerCpldVersion")
    def power_cpld_version(self) -> str:
        return pulumi.get(self, "power_cpld_version")

    @property
    @pulumi.getter
    def psuses(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPsusResult']:
        return pulumi.get(self, "psuses")

    @property
    @pulumi.getter(name="reFpgaVersion")
    def re_fpga_version(self) -> str:
        return pulumi.get(self, "re_fpga_version")

    @property
    @pulumi.getter(name="recoveryVersion")
    def recovery_version(self) -> str:
        return pulumi.get(self, "recovery_version")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def temperatures(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatTemperatureResult']:
        return pulumi.get(self, "temperatures")

    @property
    @pulumi.getter(name="tmcFpgaVersion")
    def tmc_fpga_version(self) -> str:
        return pulumi.get(self, "tmc_fpga_version")

    @property
    @pulumi.getter(name="ubootVersion")
    def uboot_version(self) -> str:
        return pulumi.get(self, "uboot_version")

    @property
    @pulumi.getter
    def uptime(self) -> int:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="vcLinks")
    def vc_links(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatVcLinkResult']:
        return pulumi.get(self, "vc_links")

    @property
    @pulumi.getter(name="vcMode")
    def vc_mode(self) -> str:
        return pulumi.get(self, "vc_mode")

    @property
    @pulumi.getter(name="vcRole")
    def vc_role(self) -> str:
        """
        master / backup / linecard
        """
        return pulumi.get(self, "vc_role")

    @property
    @pulumi.getter(name="vcState")
    def vc_state(self) -> str:
        return pulumi.get(self, "vc_state")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatErrorResult(dict):
    def __init__(__self__, *,
                 feature: str,
                 minimum_version: str,
                 reason: str,
                 since: int,
                 type: str):
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "minimum_version", minimum_version)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def feature(self) -> str:
        return pulumi.get(self, "feature")

    @property
    @pulumi.getter(name="minimumVersion")
    def minimum_version(self) -> str:
        return pulumi.get(self, "minimum_version")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def since(self) -> int:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatFanResult(dict):
    def __init__(__self__, *,
                 airflow: str,
                 name: str,
                 status: str):
        pulumi.set(__self__, "airflow", airflow)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def airflow(self) -> str:
        return pulumi.get(self, "airflow")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatPicResult(dict):
    def __init__(__self__, *,
                 index: int,
                 model_number: str,
                 port_groups: Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroupResult']):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "model_number", model_number)
        pulumi.set(__self__, "port_groups", port_groups)

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="modelNumber")
    def model_number(self) -> str:
        return pulumi.get(self, "model_number")

    @property
    @pulumi.getter(name="portGroups")
    def port_groups(self) -> Sequence['outputs.GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroupResult']:
        return pulumi.get(self, "port_groups")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatPicPortGroupResult(dict):
    def __init__(__self__, *,
                 count: int,
                 type: str):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatPoeResult(dict):
    def __init__(__self__, *,
                 max_power: float,
                 power_draw: float):
        pulumi.set(__self__, "max_power", max_power)
        pulumi.set(__self__, "power_draw", power_draw)

    @property
    @pulumi.getter(name="maxPower")
    def max_power(self) -> float:
        return pulumi.get(self, "max_power")

    @property
    @pulumi.getter(name="powerDraw")
    def power_draw(self) -> float:
        return pulumi.get(self, "power_draw")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatPsusResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatTemperatureResult(dict):
    def __init__(__self__, *,
                 celsius: float,
                 name: str,
                 status: str):
        pulumi.set(__self__, "celsius", celsius)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def celsius(self) -> float:
        return pulumi.get(self, "celsius")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatModuleStatVcLinkResult(dict):
    def __init__(__self__, *,
                 neighbor_module_idx: int,
                 neighbor_port_id: str,
                 port_id: str):
        pulumi.set(__self__, "neighbor_module_idx", neighbor_module_idx)
        pulumi.set(__self__, "neighbor_port_id", neighbor_port_id)
        pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="neighborModuleIdx")
    def neighbor_module_idx(self) -> int:
        return pulumi.get(self, "neighbor_module_idx")

    @property
    @pulumi.getter(name="neighborPortId")
    def neighbor_port_id(self) -> str:
        return pulumi.get(self, "neighbor_port_id")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatRouteSummaryStatsResult(dict):
    def __init__(__self__, *,
                 fib_routes: int,
                 max_unicast_routes_supported: int,
                 rib_routes: int,
                 total_routes: int):
        pulumi.set(__self__, "fib_routes", fib_routes)
        pulumi.set(__self__, "max_unicast_routes_supported", max_unicast_routes_supported)
        pulumi.set(__self__, "rib_routes", rib_routes)
        pulumi.set(__self__, "total_routes", total_routes)

    @property
    @pulumi.getter(name="fibRoutes")
    def fib_routes(self) -> int:
        return pulumi.get(self, "fib_routes")

    @property
    @pulumi.getter(name="maxUnicastRoutesSupported")
    def max_unicast_routes_supported(self) -> int:
        return pulumi.get(self, "max_unicast_routes_supported")

    @property
    @pulumi.getter(name="ribRoutes")
    def rib_routes(self) -> int:
        return pulumi.get(self, "rib_routes")

    @property
    @pulumi.getter(name="totalRoutes")
    def total_routes(self) -> int:
        return pulumi.get(self, "total_routes")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatService2StatResult(dict):
    def __init__(__self__, *,
                 ash_version: str,
                 cia_version: str,
                 ember_version: str,
                 ipsec_client_version: str,
                 mist_agent_version: str,
                 package_version: str,
                 testing_tools_version: str,
                 wheeljack_version: str):
        pulumi.set(__self__, "ash_version", ash_version)
        pulumi.set(__self__, "cia_version", cia_version)
        pulumi.set(__self__, "ember_version", ember_version)
        pulumi.set(__self__, "ipsec_client_version", ipsec_client_version)
        pulumi.set(__self__, "mist_agent_version", mist_agent_version)
        pulumi.set(__self__, "package_version", package_version)
        pulumi.set(__self__, "testing_tools_version", testing_tools_version)
        pulumi.set(__self__, "wheeljack_version", wheeljack_version)

    @property
    @pulumi.getter(name="ashVersion")
    def ash_version(self) -> str:
        return pulumi.get(self, "ash_version")

    @property
    @pulumi.getter(name="ciaVersion")
    def cia_version(self) -> str:
        return pulumi.get(self, "cia_version")

    @property
    @pulumi.getter(name="emberVersion")
    def ember_version(self) -> str:
        return pulumi.get(self, "ember_version")

    @property
    @pulumi.getter(name="ipsecClientVersion")
    def ipsec_client_version(self) -> str:
        return pulumi.get(self, "ipsec_client_version")

    @property
    @pulumi.getter(name="mistAgentVersion")
    def mist_agent_version(self) -> str:
        return pulumi.get(self, "mist_agent_version")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter(name="testingToolsVersion")
    def testing_tools_version(self) -> str:
        return pulumi.get(self, "testing_tools_version")

    @property
    @pulumi.getter(name="wheeljackVersion")
    def wheeljack_version(self) -> str:
        return pulumi.get(self, "wheeljack_version")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatServiceStatResult(dict):
    def __init__(__self__, *,
                 ash_version: str,
                 cia_version: str,
                 ember_version: str,
                 ipsec_client_version: str,
                 mist_agent_version: str,
                 package_version: str,
                 testing_tools_version: str,
                 wheeljack_version: str):
        pulumi.set(__self__, "ash_version", ash_version)
        pulumi.set(__self__, "cia_version", cia_version)
        pulumi.set(__self__, "ember_version", ember_version)
        pulumi.set(__self__, "ipsec_client_version", ipsec_client_version)
        pulumi.set(__self__, "mist_agent_version", mist_agent_version)
        pulumi.set(__self__, "package_version", package_version)
        pulumi.set(__self__, "testing_tools_version", testing_tools_version)
        pulumi.set(__self__, "wheeljack_version", wheeljack_version)

    @property
    @pulumi.getter(name="ashVersion")
    def ash_version(self) -> str:
        return pulumi.get(self, "ash_version")

    @property
    @pulumi.getter(name="ciaVersion")
    def cia_version(self) -> str:
        return pulumi.get(self, "cia_version")

    @property
    @pulumi.getter(name="emberVersion")
    def ember_version(self) -> str:
        return pulumi.get(self, "ember_version")

    @property
    @pulumi.getter(name="ipsecClientVersion")
    def ipsec_client_version(self) -> str:
        return pulumi.get(self, "ipsec_client_version")

    @property
    @pulumi.getter(name="mistAgentVersion")
    def mist_agent_version(self) -> str:
        return pulumi.get(self, "mist_agent_version")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter(name="testingToolsVersion")
    def testing_tools_version(self) -> str:
        return pulumi.get(self, "testing_tools_version")

    @property
    @pulumi.getter(name="wheeljackVersion")
    def wheeljack_version(self) -> str:
        return pulumi.get(self, "wheeljack_version")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatServiceStatusResult(dict):
    def __init__(__self__, *,
                 appid_install_result: str,
                 appid_install_timestamp: str,
                 appid_status: str,
                 appid_version: int,
                 ewf_status: str,
                 idp_install_result: str,
                 idp_install_timestamp: str,
                 idp_policy: str,
                 idp_status: str,
                 idp_update_timestamp: str):
        pulumi.set(__self__, "appid_install_result", appid_install_result)
        pulumi.set(__self__, "appid_install_timestamp", appid_install_timestamp)
        pulumi.set(__self__, "appid_status", appid_status)
        pulumi.set(__self__, "appid_version", appid_version)
        pulumi.set(__self__, "ewf_status", ewf_status)
        pulumi.set(__self__, "idp_install_result", idp_install_result)
        pulumi.set(__self__, "idp_install_timestamp", idp_install_timestamp)
        pulumi.set(__self__, "idp_policy", idp_policy)
        pulumi.set(__self__, "idp_status", idp_status)
        pulumi.set(__self__, "idp_update_timestamp", idp_update_timestamp)

    @property
    @pulumi.getter(name="appidInstallResult")
    def appid_install_result(self) -> str:
        return pulumi.get(self, "appid_install_result")

    @property
    @pulumi.getter(name="appidInstallTimestamp")
    def appid_install_timestamp(self) -> str:
        return pulumi.get(self, "appid_install_timestamp")

    @property
    @pulumi.getter(name="appidStatus")
    def appid_status(self) -> str:
        return pulumi.get(self, "appid_status")

    @property
    @pulumi.getter(name="appidVersion")
    def appid_version(self) -> int:
        return pulumi.get(self, "appid_version")

    @property
    @pulumi.getter(name="ewfStatus")
    def ewf_status(self) -> str:
        return pulumi.get(self, "ewf_status")

    @property
    @pulumi.getter(name="idpInstallResult")
    def idp_install_result(self) -> str:
        return pulumi.get(self, "idp_install_result")

    @property
    @pulumi.getter(name="idpInstallTimestamp")
    def idp_install_timestamp(self) -> str:
        return pulumi.get(self, "idp_install_timestamp")

    @property
    @pulumi.getter(name="idpPolicy")
    def idp_policy(self) -> str:
        return pulumi.get(self, "idp_policy")

    @property
    @pulumi.getter(name="idpStatus")
    def idp_status(self) -> str:
        return pulumi.get(self, "idp_status")

    @property
    @pulumi.getter(name="idpUpdateTimestamp")
    def idp_update_timestamp(self) -> str:
        return pulumi.get(self, "idp_update_timestamp")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatSpu2StatResult(dict):
    def __init__(__self__, *,
                 spu_cpu: int,
                 spu_current_session: int,
                 spu_max_session: int,
                 spu_memory: int,
                 spu_pending_session: int,
                 spu_valid_session: int):
        pulumi.set(__self__, "spu_cpu", spu_cpu)
        pulumi.set(__self__, "spu_current_session", spu_current_session)
        pulumi.set(__self__, "spu_max_session", spu_max_session)
        pulumi.set(__self__, "spu_memory", spu_memory)
        pulumi.set(__self__, "spu_pending_session", spu_pending_session)
        pulumi.set(__self__, "spu_valid_session", spu_valid_session)

    @property
    @pulumi.getter(name="spuCpu")
    def spu_cpu(self) -> int:
        return pulumi.get(self, "spu_cpu")

    @property
    @pulumi.getter(name="spuCurrentSession")
    def spu_current_session(self) -> int:
        return pulumi.get(self, "spu_current_session")

    @property
    @pulumi.getter(name="spuMaxSession")
    def spu_max_session(self) -> int:
        return pulumi.get(self, "spu_max_session")

    @property
    @pulumi.getter(name="spuMemory")
    def spu_memory(self) -> int:
        return pulumi.get(self, "spu_memory")

    @property
    @pulumi.getter(name="spuPendingSession")
    def spu_pending_session(self) -> int:
        return pulumi.get(self, "spu_pending_session")

    @property
    @pulumi.getter(name="spuValidSession")
    def spu_valid_session(self) -> int:
        return pulumi.get(self, "spu_valid_session")


@pulumi.output_type
class GetGatewayStatsDeviceGatewayStatSpuStatResult(dict):
    def __init__(__self__, *,
                 spu_cpu: int,
                 spu_current_session: int,
                 spu_max_session: int,
                 spu_memory: int,
                 spu_pending_session: int,
                 spu_valid_session: int):
        pulumi.set(__self__, "spu_cpu", spu_cpu)
        pulumi.set(__self__, "spu_current_session", spu_current_session)
        pulumi.set(__self__, "spu_max_session", spu_max_session)
        pulumi.set(__self__, "spu_memory", spu_memory)
        pulumi.set(__self__, "spu_pending_session", spu_pending_session)
        pulumi.set(__self__, "spu_valid_session", spu_valid_session)

    @property
    @pulumi.getter(name="spuCpu")
    def spu_cpu(self) -> int:
        return pulumi.get(self, "spu_cpu")

    @property
    @pulumi.getter(name="spuCurrentSession")
    def spu_current_session(self) -> int:
        return pulumi.get(self, "spu_current_session")

    @property
    @pulumi.getter(name="spuMaxSession")
    def spu_max_session(self) -> int:
        return pulumi.get(self, "spu_max_session")

    @property
    @pulumi.getter(name="spuMemory")
    def spu_memory(self) -> int:
        return pulumi.get(self, "spu_memory")

    @property
    @pulumi.getter(name="spuPendingSession")
    def spu_pending_session(self) -> int:
        return pulumi.get(self, "spu_pending_session")

    @property
    @pulumi.getter(name="spuValidSession")
    def spu_valid_session(self) -> int:
        return pulumi.get(self, "spu_valid_session")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatResult(dict):
    def __init__(__self__, *,
                 ap_redundancy: 'outputs.GetSwitchStatsDeviceSwitchStatApRedundancyResult',
                 arp_table_stats: 'outputs.GetSwitchStatsDeviceSwitchStatArpTableStatsResult',
                 cert_expiry: int,
                 clients: Sequence['outputs.GetSwitchStatsDeviceSwitchStatClientResult'],
                 clients_stats: 'outputs.GetSwitchStatsDeviceSwitchStatClientsStatsResult',
                 config_status: str,
                 cpu_stat: 'outputs.GetSwitchStatsDeviceSwitchStatCpuStatResult',
                 created_time: int,
                 deviceprofile_id: str,
                 dhcpd_stat: Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatDhcpdStatResult'],
                 evpntopo_id: str,
                 fw_versions_outofsync: bool,
                 fwupdate: 'outputs.GetSwitchStatsDeviceSwitchStatFwupdateResult',
                 has_pcap: bool,
                 hostname: str,
                 hw_rev: str,
                 id: str,
                 if_stat: Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatIfStatResult'],
                 ip: str,
                 ip_stat: 'outputs.GetSwitchStatsDeviceSwitchStatIpStatResult',
                 last_seen: float,
                 last_trouble: 'outputs.GetSwitchStatsDeviceSwitchStatLastTroubleResult',
                 mac: str,
                 mac_table_stats: 'outputs.GetSwitchStatsDeviceSwitchStatMacTableStatsResult',
                 map_id: str,
                 memory_stat: 'outputs.GetSwitchStatsDeviceSwitchStatMemoryStatResult',
                 model: str,
                 modified_time: int,
                 module_stats: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatResult'],
                 name: str,
                 org_id: str,
                 route_summary_stats: 'outputs.GetSwitchStatsDeviceSwitchStatRouteSummaryStatsResult',
                 serial: str,
                 service_stat: Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatServiceStatResult'],
                 site_id: str,
                 status: str,
                 uptime: float,
                 vc_mac: str,
                 vc_setup_info: 'outputs.GetSwitchStatsDeviceSwitchStatVcSetupInfoResult',
                 version: str):
        """
        :param Mapping[str, 'GetSwitchStatsDeviceSwitchStatDhcpdStatArgs'] dhcpd_stat: Property key is the network name
        :param bool has_pcap: whether the switch supports packet capture
        :param str hostname: hostname reported by the device
        :param str hw_rev: device hardware revision number
        :param Mapping[str, 'GetSwitchStatsDeviceSwitchStatIfStatArgs'] if_stat: Property key is the interface name
        :param 'GetSwitchStatsDeviceSwitchStatLastTroubleArgs' last_trouble: last trouble code of switch
        :param 'GetSwitchStatsDeviceSwitchStatMemoryStatArgs' memory_stat: memory usage stat (for virtual chassis, memory usage of master RE)
        :param str name: device name if configured
        """
        pulumi.set(__self__, "ap_redundancy", ap_redundancy)
        pulumi.set(__self__, "arp_table_stats", arp_table_stats)
        pulumi.set(__self__, "cert_expiry", cert_expiry)
        pulumi.set(__self__, "clients", clients)
        pulumi.set(__self__, "clients_stats", clients_stats)
        pulumi.set(__self__, "config_status", config_status)
        pulumi.set(__self__, "cpu_stat", cpu_stat)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        pulumi.set(__self__, "dhcpd_stat", dhcpd_stat)
        pulumi.set(__self__, "evpntopo_id", evpntopo_id)
        pulumi.set(__self__, "fw_versions_outofsync", fw_versions_outofsync)
        pulumi.set(__self__, "fwupdate", fwupdate)
        pulumi.set(__self__, "has_pcap", has_pcap)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hw_rev", hw_rev)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "if_stat", if_stat)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_stat", ip_stat)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "last_trouble", last_trouble)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "mac_table_stats", mac_table_stats)
        pulumi.set(__self__, "map_id", map_id)
        pulumi.set(__self__, "memory_stat", memory_stat)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "module_stats", module_stats)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "route_summary_stats", route_summary_stats)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "service_stat", service_stat)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "vc_mac", vc_mac)
        pulumi.set(__self__, "vc_setup_info", vc_setup_info)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="apRedundancy")
    def ap_redundancy(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatApRedundancyResult':
        return pulumi.get(self, "ap_redundancy")

    @property
    @pulumi.getter(name="arpTableStats")
    def arp_table_stats(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatArpTableStatsResult':
        return pulumi.get(self, "arp_table_stats")

    @property
    @pulumi.getter(name="certExpiry")
    def cert_expiry(self) -> int:
        return pulumi.get(self, "cert_expiry")

    @property
    @pulumi.getter
    def clients(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatClientResult']:
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter(name="clientsStats")
    def clients_stats(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatClientsStatsResult':
        return pulumi.get(self, "clients_stats")

    @property
    @pulumi.getter(name="configStatus")
    def config_status(self) -> str:
        return pulumi.get(self, "config_status")

    @property
    @pulumi.getter(name="cpuStat")
    def cpu_stat(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatCpuStatResult':
        return pulumi.get(self, "cpu_stat")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> int:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> str:
        return pulumi.get(self, "deviceprofile_id")

    @property
    @pulumi.getter(name="dhcpdStat")
    def dhcpd_stat(self) -> Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatDhcpdStatResult']:
        """
        Property key is the network name
        """
        return pulumi.get(self, "dhcpd_stat")

    @property
    @pulumi.getter(name="evpntopoId")
    def evpntopo_id(self) -> str:
        return pulumi.get(self, "evpntopo_id")

    @property
    @pulumi.getter(name="fwVersionsOutofsync")
    def fw_versions_outofsync(self) -> bool:
        return pulumi.get(self, "fw_versions_outofsync")

    @property
    @pulumi.getter
    def fwupdate(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatFwupdateResult':
        return pulumi.get(self, "fwupdate")

    @property
    @pulumi.getter(name="hasPcap")
    def has_pcap(self) -> bool:
        """
        whether the switch supports packet capture
        """
        return pulumi.get(self, "has_pcap")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        hostname reported by the device
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hwRev")
    def hw_rev(self) -> str:
        """
        device hardware revision number
        """
        return pulumi.get(self, "hw_rev")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ifStat")
    def if_stat(self) -> Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatIfStatResult']:
        """
        Property key is the interface name
        """
        return pulumi.get(self, "if_stat")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipStat")
    def ip_stat(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatIpStatResult':
        return pulumi.get(self, "ip_stat")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter(name="lastTrouble")
    def last_trouble(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatLastTroubleResult':
        """
        last trouble code of switch
        """
        return pulumi.get(self, "last_trouble")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="macTableStats")
    def mac_table_stats(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatMacTableStatsResult':
        return pulumi.get(self, "mac_table_stats")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> str:
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="memoryStat")
    def memory_stat(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatMemoryStatResult':
        """
        memory usage stat (for virtual chassis, memory usage of master RE)
        """
        return pulumi.get(self, "memory_stat")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="moduleStats")
    def module_stats(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatResult']:
        return pulumi.get(self, "module_stats")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        device name if configured
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="routeSummaryStats")
    def route_summary_stats(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatRouteSummaryStatsResult':
        return pulumi.get(self, "route_summary_stats")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="serviceStat")
    def service_stat(self) -> Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatServiceStatResult']:
        return pulumi.get(self, "service_stat")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uptime(self) -> float:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="vcMac")
    def vc_mac(self) -> str:
        return pulumi.get(self, "vc_mac")

    @property
    @pulumi.getter(name="vcSetupInfo")
    def vc_setup_info(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatVcSetupInfoResult':
        return pulumi.get(self, "vc_setup_info")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatApRedundancyResult(dict):
    def __init__(__self__, *,
                 modules: Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatApRedundancyModulesResult'],
                 num_aps: int,
                 num_aps_with_switch_redundancy: int):
        """
        :param Mapping[str, 'GetSwitchStatsDeviceSwitchStatApRedundancyModulesArgs'] modules: for a VC / stacked switches.
        """
        pulumi.set(__self__, "modules", modules)
        pulumi.set(__self__, "num_aps", num_aps)
        pulumi.set(__self__, "num_aps_with_switch_redundancy", num_aps_with_switch_redundancy)

    @property
    @pulumi.getter
    def modules(self) -> Mapping[str, 'outputs.GetSwitchStatsDeviceSwitchStatApRedundancyModulesResult']:
        """
        for a VC / stacked switches.
        """
        return pulumi.get(self, "modules")

    @property
    @pulumi.getter(name="numAps")
    def num_aps(self) -> int:
        return pulumi.get(self, "num_aps")

    @property
    @pulumi.getter(name="numApsWithSwitchRedundancy")
    def num_aps_with_switch_redundancy(self) -> int:
        return pulumi.get(self, "num_aps_with_switch_redundancy")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatApRedundancyModulesResult(dict):
    def __init__(__self__, *,
                 num_aps: int,
                 num_aps_with_switch_redundancy: int):
        pulumi.set(__self__, "num_aps", num_aps)
        pulumi.set(__self__, "num_aps_with_switch_redundancy", num_aps_with_switch_redundancy)

    @property
    @pulumi.getter(name="numAps")
    def num_aps(self) -> int:
        return pulumi.get(self, "num_aps")

    @property
    @pulumi.getter(name="numApsWithSwitchRedundancy")
    def num_aps_with_switch_redundancy(self) -> int:
        return pulumi.get(self, "num_aps_with_switch_redundancy")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatArpTableStatsResult(dict):
    def __init__(__self__, *,
                 arp_table_count: int,
                 max_entries_supported: int):
        pulumi.set(__self__, "arp_table_count", arp_table_count)
        pulumi.set(__self__, "max_entries_supported", max_entries_supported)

    @property
    @pulumi.getter(name="arpTableCount")
    def arp_table_count(self) -> int:
        return pulumi.get(self, "arp_table_count")

    @property
    @pulumi.getter(name="maxEntriesSupported")
    def max_entries_supported(self) -> int:
        return pulumi.get(self, "max_entries_supported")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatClientResult(dict):
    def __init__(__self__, *,
                 device_mac: str,
                 hostname: str,
                 mac: str,
                 port_id: str):
        pulumi.set(__self__, "device_mac", device_mac)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="deviceMac")
    def device_mac(self) -> str:
        return pulumi.get(self, "device_mac")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def mac(self) -> str:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatClientsStatsResult(dict):
    def __init__(__self__, *,
                 total: 'outputs.GetSwitchStatsDeviceSwitchStatClientsStatsTotalResult'):
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def total(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatClientsStatsTotalResult':
        return pulumi.get(self, "total")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatClientsStatsTotalResult(dict):
    def __init__(__self__, *,
                 num_aps: Sequence[int],
                 num_wired_clients: int):
        pulumi.set(__self__, "num_aps", num_aps)
        pulumi.set(__self__, "num_wired_clients", num_wired_clients)

    @property
    @pulumi.getter(name="numAps")
    def num_aps(self) -> Sequence[int]:
        return pulumi.get(self, "num_aps")

    @property
    @pulumi.getter(name="numWiredClients")
    def num_wired_clients(self) -> int:
        return pulumi.get(self, "num_wired_clients")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatCpuStatResult(dict):
    def __init__(__self__, *,
                 idle: float,
                 interrupt: float,
                 load_avgs: Sequence[float],
                 system: float,
                 user: float):
        """
        :param float idle: Percentage of CPU time that is idle
        :param float interrupt: Percentage of CPU time being used by interrupts
        :param Sequence[float] load_avgs: Load averages for the last 1, 5, and 15 minutes
        :param float system: Percentage of CPU time being used by system processes
        :param float user: Percentage of CPU time being used by user processe
        """
        pulumi.set(__self__, "idle", idle)
        pulumi.set(__self__, "interrupt", interrupt)
        pulumi.set(__self__, "load_avgs", load_avgs)
        pulumi.set(__self__, "system", system)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def idle(self) -> float:
        """
        Percentage of CPU time that is idle
        """
        return pulumi.get(self, "idle")

    @property
    @pulumi.getter
    def interrupt(self) -> float:
        """
        Percentage of CPU time being used by interrupts
        """
        return pulumi.get(self, "interrupt")

    @property
    @pulumi.getter(name="loadAvgs")
    def load_avgs(self) -> Sequence[float]:
        """
        Load averages for the last 1, 5, and 15 minutes
        """
        return pulumi.get(self, "load_avgs")

    @property
    @pulumi.getter
    def system(self) -> float:
        """
        Percentage of CPU time being used by system processes
        """
        return pulumi.get(self, "system")

    @property
    @pulumi.getter
    def user(self) -> float:
        """
        Percentage of CPU time being used by user processe
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatDhcpdStatResult(dict):
    def __init__(__self__, *,
                 num_ips: int,
                 num_leased: int):
        pulumi.set(__self__, "num_ips", num_ips)
        pulumi.set(__self__, "num_leased", num_leased)

    @property
    @pulumi.getter(name="numIps")
    def num_ips(self) -> int:
        return pulumi.get(self, "num_ips")

    @property
    @pulumi.getter(name="numLeased")
    def num_leased(self) -> int:
        return pulumi.get(self, "num_leased")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatFwupdateResult(dict):
    def __init__(__self__, *,
                 progress: int,
                 status: str,
                 status_id: int,
                 timestamp: float,
                 will_retry: bool):
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_id", status_id)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "will_retry", will_retry)

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> int:
        return pulumi.get(self, "status_id")

    @property
    @pulumi.getter
    def timestamp(self) -> float:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="willRetry")
    def will_retry(self) -> bool:
        return pulumi.get(self, "will_retry")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatIfStatResult(dict):
    def __init__(__self__, *,
                 address_mode: str,
                 ips: Sequence[str],
                 nat_addresses: Sequence[str],
                 network_name: str,
                 port_id: str,
                 port_usage: str,
                 redundancy_state: str,
                 rx_bytes: int,
                 rx_pkts: int,
                 servp_info: 'outputs.GetSwitchStatsDeviceSwitchStatIfStatServpInfoResult',
                 tx_bytes: int,
                 tx_pkts: int,
                 up: bool,
                 vlan: int,
                 wan_name: str,
                 wan_type: str):
        pulumi.set(__self__, "address_mode", address_mode)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "nat_addresses", nat_addresses)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "port_id", port_id)
        pulumi.set(__self__, "port_usage", port_usage)
        pulumi.set(__self__, "redundancy_state", redundancy_state)
        pulumi.set(__self__, "rx_bytes", rx_bytes)
        pulumi.set(__self__, "rx_pkts", rx_pkts)
        pulumi.set(__self__, "servp_info", servp_info)
        pulumi.set(__self__, "tx_bytes", tx_bytes)
        pulumi.set(__self__, "tx_pkts", tx_pkts)
        pulumi.set(__self__, "up", up)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "wan_name", wan_name)
        pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter(name="addressMode")
    def address_mode(self) -> str:
        return pulumi.get(self, "address_mode")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="natAddresses")
    def nat_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "nat_addresses")

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> str:
        return pulumi.get(self, "network_name")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter(name="portUsage")
    def port_usage(self) -> str:
        return pulumi.get(self, "port_usage")

    @property
    @pulumi.getter(name="redundancyState")
    def redundancy_state(self) -> str:
        return pulumi.get(self, "redundancy_state")

    @property
    @pulumi.getter(name="rxBytes")
    def rx_bytes(self) -> int:
        return pulumi.get(self, "rx_bytes")

    @property
    @pulumi.getter(name="rxPkts")
    def rx_pkts(self) -> int:
        return pulumi.get(self, "rx_pkts")

    @property
    @pulumi.getter(name="servpInfo")
    def servp_info(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatIfStatServpInfoResult':
        return pulumi.get(self, "servp_info")

    @property
    @pulumi.getter(name="txBytes")
    def tx_bytes(self) -> int:
        return pulumi.get(self, "tx_bytes")

    @property
    @pulumi.getter(name="txPkts")
    def tx_pkts(self) -> int:
        return pulumi.get(self, "tx_pkts")

    @property
    @pulumi.getter
    def up(self) -> bool:
        return pulumi.get(self, "up")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> str:
        return pulumi.get(self, "wan_name")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> str:
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatIfStatServpInfoResult(dict):
    def __init__(__self__, *,
                 asn: str,
                 city: str,
                 country_code: str,
                 latitude: float,
                 longitude: float,
                 org: str,
                 region_code: str):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "region_code", region_code)

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatIpStatResult(dict):
    def __init__(__self__, *,
                 dhcp_server: str,
                 dns: Sequence[str],
                 dns_suffixes: Sequence[str],
                 gateway: str,
                 gateway6: str,
                 ip: str,
                 ip6: str,
                 ips: Mapping[str, str],
                 netmask: str,
                 netmask6: str):
        pulumi.set(__self__, "dhcp_server", dhcp_server)
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "gateway6", gateway6)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip6", ip6)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "netmask", netmask)
        pulumi.set(__self__, "netmask6", netmask6)

    @property
    @pulumi.getter(name="dhcpServer")
    def dhcp_server(self) -> str:
        return pulumi.get(self, "dhcp_server")

    @property
    @pulumi.getter
    def dns(self) -> Sequence[str]:
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Sequence[str]:
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> str:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> str:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def ips(self) -> Mapping[str, str]:
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> str:
        return pulumi.get(self, "netmask6")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatLastTroubleResult(dict):
    def __init__(__self__, *,
                 code: str,
                 timestamp: int):
        """
        :param str code: Code definitions list at /api/v1/consts/ap*led*status
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        Code definitions list at /api/v1/consts/ap*led*status
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatMacTableStatsResult(dict):
    def __init__(__self__, *,
                 mac_table_count: int,
                 max_mac_entries_supported: int):
        pulumi.set(__self__, "mac_table_count", mac_table_count)
        pulumi.set(__self__, "max_mac_entries_supported", max_mac_entries_supported)

    @property
    @pulumi.getter(name="macTableCount")
    def mac_table_count(self) -> int:
        return pulumi.get(self, "mac_table_count")

    @property
    @pulumi.getter(name="maxMacEntriesSupported")
    def max_mac_entries_supported(self) -> int:
        return pulumi.get(self, "max_mac_entries_supported")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatMemoryStatResult(dict):
    def __init__(__self__, *,
                 usage: float):
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def usage(self) -> float:
        return pulumi.get(self, "usage")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatResult(dict):
    def __init__(__self__, *,
                 backup_version: str,
                 bios_version: str,
                 cpld_version: str,
                 errors: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatErrorResult'],
                 fans: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatFanResult'],
                 fpc_idx: int,
                 fpga_version: str,
                 last_seen: float,
                 model: str,
                 optics_cpld_version: str,
                 pending_version: str,
                 pics: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPicResult'],
                 poe: 'outputs.GetSwitchStatsDeviceSwitchStatModuleStatPoeResult',
                 poe_version: str,
                 power_cpld_version: str,
                 psuses: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPsusResult'],
                 re_fpga_version: str,
                 recovery_version: str,
                 serial: str,
                 status: str,
                 temperatures: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatTemperatureResult'],
                 tmc_fpga_version: str,
                 uboot_version: str,
                 uptime: int,
                 vc_links: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatVcLinkResult'],
                 vc_mode: str,
                 vc_role: str,
                 vc_state: str,
                 version: str):
        """
        :param Sequence['GetSwitchStatsDeviceSwitchStatModuleStatErrorArgs'] errors: used to report all error states the device node is running into.
               An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        :param str vc_role: master / backup / linecard
        """
        pulumi.set(__self__, "backup_version", backup_version)
        pulumi.set(__self__, "bios_version", bios_version)
        pulumi.set(__self__, "cpld_version", cpld_version)
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "fans", fans)
        pulumi.set(__self__, "fpc_idx", fpc_idx)
        pulumi.set(__self__, "fpga_version", fpga_version)
        pulumi.set(__self__, "last_seen", last_seen)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "optics_cpld_version", optics_cpld_version)
        pulumi.set(__self__, "pending_version", pending_version)
        pulumi.set(__self__, "pics", pics)
        pulumi.set(__self__, "poe", poe)
        pulumi.set(__self__, "poe_version", poe_version)
        pulumi.set(__self__, "power_cpld_version", power_cpld_version)
        pulumi.set(__self__, "psuses", psuses)
        pulumi.set(__self__, "re_fpga_version", re_fpga_version)
        pulumi.set(__self__, "recovery_version", recovery_version)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "temperatures", temperatures)
        pulumi.set(__self__, "tmc_fpga_version", tmc_fpga_version)
        pulumi.set(__self__, "uboot_version", uboot_version)
        pulumi.set(__self__, "uptime", uptime)
        pulumi.set(__self__, "vc_links", vc_links)
        pulumi.set(__self__, "vc_mode", vc_mode)
        pulumi.set(__self__, "vc_role", vc_role)
        pulumi.set(__self__, "vc_state", vc_state)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="backupVersion")
    def backup_version(self) -> str:
        return pulumi.get(self, "backup_version")

    @property
    @pulumi.getter(name="biosVersion")
    def bios_version(self) -> str:
        return pulumi.get(self, "bios_version")

    @property
    @pulumi.getter(name="cpldVersion")
    def cpld_version(self) -> str:
        return pulumi.get(self, "cpld_version")

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatErrorResult']:
        """
        used to report all error states the device node is running into.
        An error should always have `type` and `since` fields, and could have some other fields specific to that type.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def fans(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatFanResult']:
        return pulumi.get(self, "fans")

    @property
    @pulumi.getter(name="fpcIdx")
    def fpc_idx(self) -> int:
        return pulumi.get(self, "fpc_idx")

    @property
    @pulumi.getter(name="fpgaVersion")
    def fpga_version(self) -> str:
        return pulumi.get(self, "fpga_version")

    @property
    @pulumi.getter(name="lastSeen")
    def last_seen(self) -> float:
        return pulumi.get(self, "last_seen")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="opticsCpldVersion")
    def optics_cpld_version(self) -> str:
        return pulumi.get(self, "optics_cpld_version")

    @property
    @pulumi.getter(name="pendingVersion")
    def pending_version(self) -> str:
        return pulumi.get(self, "pending_version")

    @property
    @pulumi.getter
    def pics(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPicResult']:
        return pulumi.get(self, "pics")

    @property
    @pulumi.getter
    def poe(self) -> 'outputs.GetSwitchStatsDeviceSwitchStatModuleStatPoeResult':
        return pulumi.get(self, "poe")

    @property
    @pulumi.getter(name="poeVersion")
    def poe_version(self) -> str:
        return pulumi.get(self, "poe_version")

    @property
    @pulumi.getter(name="powerCpldVersion")
    def power_cpld_version(self) -> str:
        return pulumi.get(self, "power_cpld_version")

    @property
    @pulumi.getter
    def psuses(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPsusResult']:
        return pulumi.get(self, "psuses")

    @property
    @pulumi.getter(name="reFpgaVersion")
    def re_fpga_version(self) -> str:
        return pulumi.get(self, "re_fpga_version")

    @property
    @pulumi.getter(name="recoveryVersion")
    def recovery_version(self) -> str:
        return pulumi.get(self, "recovery_version")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def temperatures(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatTemperatureResult']:
        return pulumi.get(self, "temperatures")

    @property
    @pulumi.getter(name="tmcFpgaVersion")
    def tmc_fpga_version(self) -> str:
        return pulumi.get(self, "tmc_fpga_version")

    @property
    @pulumi.getter(name="ubootVersion")
    def uboot_version(self) -> str:
        return pulumi.get(self, "uboot_version")

    @property
    @pulumi.getter
    def uptime(self) -> int:
        return pulumi.get(self, "uptime")

    @property
    @pulumi.getter(name="vcLinks")
    def vc_links(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatVcLinkResult']:
        return pulumi.get(self, "vc_links")

    @property
    @pulumi.getter(name="vcMode")
    def vc_mode(self) -> str:
        return pulumi.get(self, "vc_mode")

    @property
    @pulumi.getter(name="vcRole")
    def vc_role(self) -> str:
        """
        master / backup / linecard
        """
        return pulumi.get(self, "vc_role")

    @property
    @pulumi.getter(name="vcState")
    def vc_state(self) -> str:
        return pulumi.get(self, "vc_state")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatErrorResult(dict):
    def __init__(__self__, *,
                 feature: str,
                 minimum_version: str,
                 reason: str,
                 since: int,
                 type: str):
        pulumi.set(__self__, "feature", feature)
        pulumi.set(__self__, "minimum_version", minimum_version)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def feature(self) -> str:
        return pulumi.get(self, "feature")

    @property
    @pulumi.getter(name="minimumVersion")
    def minimum_version(self) -> str:
        return pulumi.get(self, "minimum_version")

    @property
    @pulumi.getter
    def reason(self) -> str:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter
    def since(self) -> int:
        return pulumi.get(self, "since")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatFanResult(dict):
    def __init__(__self__, *,
                 airflow: str,
                 name: str,
                 status: str):
        pulumi.set(__self__, "airflow", airflow)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def airflow(self) -> str:
        return pulumi.get(self, "airflow")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatPicResult(dict):
    def __init__(__self__, *,
                 index: int,
                 model_number: str,
                 port_groups: Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroupResult']):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "model_number", model_number)
        pulumi.set(__self__, "port_groups", port_groups)

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="modelNumber")
    def model_number(self) -> str:
        return pulumi.get(self, "model_number")

    @property
    @pulumi.getter(name="portGroups")
    def port_groups(self) -> Sequence['outputs.GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroupResult']:
        return pulumi.get(self, "port_groups")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatPicPortGroupResult(dict):
    def __init__(__self__, *,
                 count: int,
                 type: str):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatPoeResult(dict):
    def __init__(__self__, *,
                 max_power: float,
                 power_draw: float):
        pulumi.set(__self__, "max_power", max_power)
        pulumi.set(__self__, "power_draw", power_draw)

    @property
    @pulumi.getter(name="maxPower")
    def max_power(self) -> float:
        return pulumi.get(self, "max_power")

    @property
    @pulumi.getter(name="powerDraw")
    def power_draw(self) -> float:
        return pulumi.get(self, "power_draw")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatPsusResult(dict):
    def __init__(__self__, *,
                 name: str,
                 status: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatTemperatureResult(dict):
    def __init__(__self__, *,
                 celsius: float,
                 name: str,
                 status: str):
        pulumi.set(__self__, "celsius", celsius)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def celsius(self) -> float:
        return pulumi.get(self, "celsius")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatModuleStatVcLinkResult(dict):
    def __init__(__self__, *,
                 neighbor_module_idx: int,
                 neighbor_port_id: str,
                 port_id: str):
        pulumi.set(__self__, "neighbor_module_idx", neighbor_module_idx)
        pulumi.set(__self__, "neighbor_port_id", neighbor_port_id)
        pulumi.set(__self__, "port_id", port_id)

    @property
    @pulumi.getter(name="neighborModuleIdx")
    def neighbor_module_idx(self) -> int:
        return pulumi.get(self, "neighbor_module_idx")

    @property
    @pulumi.getter(name="neighborPortId")
    def neighbor_port_id(self) -> str:
        return pulumi.get(self, "neighbor_port_id")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> str:
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatRouteSummaryStatsResult(dict):
    def __init__(__self__, *,
                 fib_routes: int,
                 max_unicast_routes_supported: int,
                 rib_routes: int,
                 total_routes: int):
        pulumi.set(__self__, "fib_routes", fib_routes)
        pulumi.set(__self__, "max_unicast_routes_supported", max_unicast_routes_supported)
        pulumi.set(__self__, "rib_routes", rib_routes)
        pulumi.set(__self__, "total_routes", total_routes)

    @property
    @pulumi.getter(name="fibRoutes")
    def fib_routes(self) -> int:
        return pulumi.get(self, "fib_routes")

    @property
    @pulumi.getter(name="maxUnicastRoutesSupported")
    def max_unicast_routes_supported(self) -> int:
        return pulumi.get(self, "max_unicast_routes_supported")

    @property
    @pulumi.getter(name="ribRoutes")
    def rib_routes(self) -> int:
        return pulumi.get(self, "rib_routes")

    @property
    @pulumi.getter(name="totalRoutes")
    def total_routes(self) -> int:
        return pulumi.get(self, "total_routes")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatServiceStatResult(dict):
    def __init__(__self__, *,
                 ash_version: str,
                 cia_version: str,
                 ember_version: str,
                 ipsec_client_version: str,
                 mist_agent_version: str,
                 package_version: str,
                 testing_tools_version: str,
                 wheeljack_version: str):
        pulumi.set(__self__, "ash_version", ash_version)
        pulumi.set(__self__, "cia_version", cia_version)
        pulumi.set(__self__, "ember_version", ember_version)
        pulumi.set(__self__, "ipsec_client_version", ipsec_client_version)
        pulumi.set(__self__, "mist_agent_version", mist_agent_version)
        pulumi.set(__self__, "package_version", package_version)
        pulumi.set(__self__, "testing_tools_version", testing_tools_version)
        pulumi.set(__self__, "wheeljack_version", wheeljack_version)

    @property
    @pulumi.getter(name="ashVersion")
    def ash_version(self) -> str:
        return pulumi.get(self, "ash_version")

    @property
    @pulumi.getter(name="ciaVersion")
    def cia_version(self) -> str:
        return pulumi.get(self, "cia_version")

    @property
    @pulumi.getter(name="emberVersion")
    def ember_version(self) -> str:
        return pulumi.get(self, "ember_version")

    @property
    @pulumi.getter(name="ipsecClientVersion")
    def ipsec_client_version(self) -> str:
        return pulumi.get(self, "ipsec_client_version")

    @property
    @pulumi.getter(name="mistAgentVersion")
    def mist_agent_version(self) -> str:
        return pulumi.get(self, "mist_agent_version")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter(name="testingToolsVersion")
    def testing_tools_version(self) -> str:
        return pulumi.get(self, "testing_tools_version")

    @property
    @pulumi.getter(name="wheeljackVersion")
    def wheeljack_version(self) -> str:
        return pulumi.get(self, "wheeljack_version")


@pulumi.output_type
class GetSwitchStatsDeviceSwitchStatVcSetupInfoResult(dict):
    def __init__(__self__, *,
                 config_type: str,
                 err_missing_dev_id_fpc: bool):
        pulumi.set(__self__, "config_type", config_type)
        pulumi.set(__self__, "err_missing_dev_id_fpc", err_missing_dev_id_fpc)

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="errMissingDevIdFpc")
    def err_missing_dev_id_fpc(self) -> bool:
        return pulumi.get(self, "err_missing_dev_id_fpc")


