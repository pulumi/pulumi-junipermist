# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SwitchArgs', 'Switch']

@pulumi.input_type
class SwitchArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[str],
                 site_id: pulumi.Input[str],
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_snooping: Optional[pulumi.Input['SwitchDhcpSnoopingArgs']] = None,
                 dhcpd_config: Optional[pulumi.Input['SwitchDhcpdConfigArgs']] = None,
                 disable_auto_config: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 evpn_config: Optional[pulumi.Input['SwitchEvpnConfigArgs']] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]] = None,
                 ip_config: Optional[pulumi.Input['SwitchIpConfigArgs']] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 mist_nac: Optional[pulumi.Input['SwitchMistNacArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['SwitchOobIpConfigArgs']] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]] = None,
                 other_ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]] = None,
                 radius_config: Optional[pulumi.Input['SwitchRadiusConfigArgs']] = None,
                 remote_syslog: Optional[pulumi.Input['SwitchRemoteSyslogArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 snmp_config: Optional[pulumi.Input['SwitchSnmpConfigArgs']] = None,
                 stp_config: Optional[pulumi.Input['SwitchStpConfigArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['SwitchSwitchMgmtArgs']] = None,
                 use_router_id_as_source_ip: Optional[pulumi.Input[bool]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_chassis: Optional[pulumi.Input['SwitchVirtualChassisArgs']] = None,
                 vrf_config: Optional[pulumi.Input['SwitchVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]] = None,
                 vrrp_config: Optional[pulumi.Input['SwitchVrrpConfigArgs']] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a Switch resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[bool] disable_auto_config: for a claimed switch, we control the configs by default. This option (disables the behavior)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input['SwitchEvpnConfigArgs'] evpn_config: EVPN Junos settings
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input['SwitchIpConfigArgs'] ip_config: Junos IP Config
        :param pulumi.Input[bool] managed: for an adopted switch, we donâ€™t overwrite their existing configs automatically
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input['SwitchMistNacArgs'] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input['SwitchOobIpConfigArgs'] oob_ip_config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
               set separately (if desired): key parameter = `re1`
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]] other_ip_configs: Property key is the network name
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
               interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input['SwitchRadiusConfigArgs'] radius_config: Junos Radius config
        :param pulumi.Input[str] router_id: used for OSPF / BGP / EVPN
        :param pulumi.Input['SwitchSwitchMgmtArgs'] switch_mgmt: Switch settings
        :param pulumi.Input[bool] use_router_id_as_source_ip: whether to use it for snmp / syslog / tacplus / radius
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input['SwitchVirtualChassisArgs'] virtual_chassis: required for preprovisioned Virtual Chassis
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]] vrf_instances: Property key is the network name
        :param pulumi.Input['SwitchVrrpConfigArgs'] vrrp_config: Junos VRRP config
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "site_id", site_id)
        if acl_policies is not None:
            pulumi.set(__self__, "acl_policies", acl_policies)
        if acl_tags is not None:
            pulumi.set(__self__, "acl_tags", acl_tags)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if disable_auto_config is not None:
            pulumi.set(__self__, "disable_auto_config", disable_auto_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if evpn_config is not None:
            pulumi.set(__self__, "evpn_config", evpn_config)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if ospf_areas is not None:
            pulumi.set(__self__, "ospf_areas", ospf_areas)
        if other_ip_configs is not None:
            pulumi.set(__self__, "other_ip_configs", other_ip_configs)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if port_usages is not None:
            pulumi.set(__self__, "port_usages", port_usages)
        if radius_config is not None:
            pulumi.set(__self__, "radius_config", radius_config)
        if remote_syslog is not None:
            pulumi.set(__self__, "remote_syslog", remote_syslog)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if snmp_config is not None:
            pulumi.set(__self__, "snmp_config", snmp_config)
        if stp_config is not None:
            pulumi.set(__self__, "stp_config", stp_config)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if use_router_id_as_source_ip is not None:
            pulumi.set(__self__, "use_router_id_as_source_ip", use_router_id_as_source_ip)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if virtual_chassis is not None:
            pulumi.set(__self__, "virtual_chassis", virtual_chassis)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)
        if vrrp_config is not None:
            pulumi.set(__self__, "vrrp_config", vrrp_config)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]]:
        return pulumi.get(self, "acl_policies")

    @acl_policies.setter
    def acl_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]]):
        pulumi.set(self, "acl_policies", value)

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @acl_tags.setter
    def acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]]):
        pulumi.set(self, "acl_tags", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input['SwitchDhcpSnoopingArgs']]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input['SwitchDhcpSnoopingArgs']]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['SwitchDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['SwitchDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="disableAutoConfig")
    def disable_auto_config(self) -> Optional[pulumi.Input[bool]]:
        """
        for a claimed switch, we control the configs by default. This option (disables the behavior)
        """
        return pulumi.get(self, "disable_auto_config")

    @disable_auto_config.setter
    def disable_auto_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_auto_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="evpnConfig")
    def evpn_config(self) -> Optional[pulumi.Input['SwitchEvpnConfigArgs']]:
        """
        EVPN Junos settings
        """
        return pulumi.get(self, "evpn_config")

    @evpn_config.setter
    def evpn_config(self, value: Optional[pulumi.Input['SwitchEvpnConfigArgs']]):
        pulumi.set(self, "evpn_config", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]]:
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['SwitchIpConfigArgs']]:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['SwitchIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        for an adopted switch, we donâ€™t overwrite their existing configs automatically
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_id", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['SwitchMistNacArgs']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['SwitchMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['SwitchOobIpConfigArgs']]:
        """
        - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
        set separately (if desired): key parameter = `re1`
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['SwitchOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @ospf_areas.setter
    def ospf_areas(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]]):
        pulumi.set(self, "ospf_areas", value)

    @property
    @pulumi.getter(name="otherIpConfigs")
    def other_ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "other_ip_configs")

    @other_ip_configs.setter
    def other_ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]]):
        pulumi.set(self, "other_ip_configs", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
        interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]]:
        return pulumi.get(self, "port_usages")

    @port_usages.setter
    def port_usages(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]]):
        pulumi.set(self, "port_usages", value)

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> Optional[pulumi.Input['SwitchRadiusConfigArgs']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @radius_config.setter
    def radius_config(self, value: Optional[pulumi.Input['SwitchRadiusConfigArgs']]):
        pulumi.set(self, "radius_config", value)

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> Optional[pulumi.Input['SwitchRemoteSyslogArgs']]:
        return pulumi.get(self, "remote_syslog")

    @remote_syslog.setter
    def remote_syslog(self, value: Optional[pulumi.Input['SwitchRemoteSyslogArgs']]):
        pulumi.set(self, "remote_syslog", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        used for OSPF / BGP / EVPN
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> Optional[pulumi.Input['SwitchSnmpConfigArgs']]:
        return pulumi.get(self, "snmp_config")

    @snmp_config.setter
    def snmp_config(self, value: Optional[pulumi.Input['SwitchSnmpConfigArgs']]):
        pulumi.set(self, "snmp_config", value)

    @property
    @pulumi.getter(name="stpConfig")
    def stp_config(self) -> Optional[pulumi.Input['SwitchStpConfigArgs']]:
        return pulumi.get(self, "stp_config")

    @stp_config.setter
    def stp_config(self, value: Optional[pulumi.Input['SwitchStpConfigArgs']]):
        pulumi.set(self, "stp_config", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['SwitchSwitchMgmtArgs']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['SwitchSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter(name="useRouterIdAsSourceIp")
    def use_router_id_as_source_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use it for snmp / syslog / tacplus / radius
        """
        return pulumi.get(self, "use_router_id_as_source_ip")

    @use_router_id_as_source_ip.setter
    def use_router_id_as_source_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_router_id_as_source_ip", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter(name="virtualChassis")
    def virtual_chassis(self) -> Optional[pulumi.Input['SwitchVirtualChassisArgs']]:
        """
        required for preprovisioned Virtual Chassis
        """
        return pulumi.get(self, "virtual_chassis")

    @virtual_chassis.setter
    def virtual_chassis(self, value: Optional[pulumi.Input['SwitchVirtualChassisArgs']]):
        pulumi.set(self, "virtual_chassis", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['SwitchVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['SwitchVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)

    @property
    @pulumi.getter(name="vrrpConfig")
    def vrrp_config(self) -> Optional[pulumi.Input['SwitchVrrpConfigArgs']]:
        """
        Junos VRRP config
        """
        return pulumi.get(self, "vrrp_config")

    @vrrp_config.setter
    def vrrp_config(self, value: Optional[pulumi.Input['SwitchVrrpConfigArgs']]):
        pulumi.set(self, "vrrp_config", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class _SwitchState:
    def __init__(__self__, *,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input['SwitchDhcpSnoopingArgs']] = None,
                 dhcpd_config: Optional[pulumi.Input['SwitchDhcpdConfigArgs']] = None,
                 disable_auto_config: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 evpn_config: Optional[pulumi.Input['SwitchEvpnConfigArgs']] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]] = None,
                 image1_url: Optional[pulumi.Input[str]] = None,
                 image2_url: Optional[pulumi.Input[str]] = None,
                 image3_url: Optional[pulumi.Input[str]] = None,
                 ip_config: Optional[pulumi.Input['SwitchIpConfigArgs']] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 mist_nac: Optional[pulumi.Input['SwitchMistNacArgs']] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['SwitchOobIpConfigArgs']] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]] = None,
                 other_ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]] = None,
                 radius_config: Optional[pulumi.Input['SwitchRadiusConfigArgs']] = None,
                 remote_syslog: Optional[pulumi.Input['SwitchRemoteSyslogArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 snmp_config: Optional[pulumi.Input['SwitchSnmpConfigArgs']] = None,
                 stp_config: Optional[pulumi.Input['SwitchStpConfigArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['SwitchSwitchMgmtArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_router_id_as_source_ip: Optional[pulumi.Input[bool]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_chassis: Optional[pulumi.Input['SwitchVirtualChassisArgs']] = None,
                 vrf_config: Optional[pulumi.Input['SwitchVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]] = None,
                 vrrp_config: Optional[pulumi.Input['SwitchVrrpConfigArgs']] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Switch resources.
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[bool] disable_auto_config: for a claimed switch, we control the configs by default. This option (disables the behavior)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input['SwitchEvpnConfigArgs'] evpn_config: EVPN Junos settings
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input['SwitchIpConfigArgs'] ip_config: Junos IP Config
        :param pulumi.Input[str] mac: device MAC address
        :param pulumi.Input[bool] managed: for an adopted switch, we donâ€™t overwrite their existing configs automatically
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input['SwitchMistNacArgs'] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[str] model: device Model
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input['SwitchOobIpConfigArgs'] oob_ip_config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
               set separately (if desired): key parameter = `re1`
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]] other_ip_configs: Property key is the network name
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
               interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input['SwitchRadiusConfigArgs'] radius_config: Junos Radius config
        :param pulumi.Input[str] router_id: used for OSPF / BGP / EVPN
        :param pulumi.Input[str] serial: device Serial
        :param pulumi.Input['SwitchSwitchMgmtArgs'] switch_mgmt: Switch settings
        :param pulumi.Input[str] type: Device Type. enum: `switch`
        :param pulumi.Input[bool] use_router_id_as_source_ip: whether to use it for snmp / syslog / tacplus / radius
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input['SwitchVirtualChassisArgs'] virtual_chassis: required for preprovisioned Virtual Chassis
        :param pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]] vrf_instances: Property key is the network name
        :param pulumi.Input['SwitchVrrpConfigArgs'] vrrp_config: Junos VRRP config
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        if acl_policies is not None:
            pulumi.set(__self__, "acl_policies", acl_policies)
        if acl_tags is not None:
            pulumi.set(__self__, "acl_tags", acl_tags)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if disable_auto_config is not None:
            pulumi.set(__self__, "disable_auto_config", disable_auto_config)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if evpn_config is not None:
            pulumi.set(__self__, "evpn_config", evpn_config)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if image1_url is not None:
            pulumi.set(__self__, "image1_url", image1_url)
        if image2_url is not None:
            pulumi.set(__self__, "image2_url", image2_url)
        if image3_url is not None:
            pulumi.set(__self__, "image3_url", image3_url)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if managed is not None:
            pulumi.set(__self__, "managed", managed)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if ospf_areas is not None:
            pulumi.set(__self__, "ospf_areas", ospf_areas)
        if other_ip_configs is not None:
            pulumi.set(__self__, "other_ip_configs", other_ip_configs)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if port_usages is not None:
            pulumi.set(__self__, "port_usages", port_usages)
        if radius_config is not None:
            pulumi.set(__self__, "radius_config", radius_config)
        if remote_syslog is not None:
            pulumi.set(__self__, "remote_syslog", remote_syslog)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if snmp_config is not None:
            pulumi.set(__self__, "snmp_config", snmp_config)
        if stp_config is not None:
            pulumi.set(__self__, "stp_config", stp_config)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_router_id_as_source_ip is not None:
            pulumi.set(__self__, "use_router_id_as_source_ip", use_router_id_as_source_ip)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if virtual_chassis is not None:
            pulumi.set(__self__, "virtual_chassis", virtual_chassis)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)
        if vrrp_config is not None:
            pulumi.set(__self__, "vrrp_config", vrrp_config)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]]:
        return pulumi.get(self, "acl_policies")

    @acl_policies.setter
    def acl_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchAclPolicyArgs']]]]):
        pulumi.set(self, "acl_policies", value)

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @acl_tags.setter
    def acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchAclTagsArgs']]]]):
        pulumi.set(self, "acl_tags", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input['SwitchDhcpSnoopingArgs']]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input['SwitchDhcpSnoopingArgs']]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['SwitchDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['SwitchDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="disableAutoConfig")
    def disable_auto_config(self) -> Optional[pulumi.Input[bool]]:
        """
        for a claimed switch, we control the configs by default. This option (disables the behavior)
        """
        return pulumi.get(self, "disable_auto_config")

    @disable_auto_config.setter
    def disable_auto_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_auto_config", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="evpnConfig")
    def evpn_config(self) -> Optional[pulumi.Input['SwitchEvpnConfigArgs']]:
        """
        EVPN Junos settings
        """
        return pulumi.get(self, "evpn_config")

    @evpn_config.setter
    def evpn_config(self, value: Optional[pulumi.Input['SwitchEvpnConfigArgs']]):
        pulumi.set(self, "evpn_config", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]]:
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image1_url")

    @image1_url.setter
    def image1_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image1_url", value)

    @property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image2_url")

    @image2_url.setter
    def image2_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image2_url", value)

    @property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image3_url")

    @image3_url.setter
    def image3_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image3_url", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['SwitchIpConfigArgs']]:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['SwitchIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        device MAC address
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def managed(self) -> Optional[pulumi.Input[bool]]:
        """
        for an adopted switch, we donâ€™t overwrite their existing configs automatically
        """
        return pulumi.get(self, "managed")

    @managed.setter
    def managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed", value)

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_id", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['SwitchMistNacArgs']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['SwitchMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        device Model
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchNetworksArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['SwitchOobIpConfigArgs']]:
        """
        - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
        set separately (if desired): key parameter = `re1`
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['SwitchOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @ospf_areas.setter
    def ospf_areas(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOspfAreasArgs']]]]):
        pulumi.set(self, "ospf_areas", value)

    @property
    @pulumi.getter(name="otherIpConfigs")
    def other_ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "other_ip_configs")

    @other_ip_configs.setter
    def other_ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchOtherIpConfigsArgs']]]]):
        pulumi.set(self, "other_ip_configs", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
        interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]]:
        return pulumi.get(self, "port_usages")

    @port_usages.setter
    def port_usages(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchPortUsagesArgs']]]]):
        pulumi.set(self, "port_usages", value)

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> Optional[pulumi.Input['SwitchRadiusConfigArgs']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @radius_config.setter
    def radius_config(self, value: Optional[pulumi.Input['SwitchRadiusConfigArgs']]):
        pulumi.set(self, "radius_config", value)

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> Optional[pulumi.Input['SwitchRemoteSyslogArgs']]:
        return pulumi.get(self, "remote_syslog")

    @remote_syslog.setter
    def remote_syslog(self, value: Optional[pulumi.Input['SwitchRemoteSyslogArgs']]):
        pulumi.set(self, "remote_syslog", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        used for OSPF / BGP / EVPN
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        device Serial
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> Optional[pulumi.Input['SwitchSnmpConfigArgs']]:
        return pulumi.get(self, "snmp_config")

    @snmp_config.setter
    def snmp_config(self, value: Optional[pulumi.Input['SwitchSnmpConfigArgs']]):
        pulumi.set(self, "snmp_config", value)

    @property
    @pulumi.getter(name="stpConfig")
    def stp_config(self) -> Optional[pulumi.Input['SwitchStpConfigArgs']]:
        return pulumi.get(self, "stp_config")

    @stp_config.setter
    def stp_config(self, value: Optional[pulumi.Input['SwitchStpConfigArgs']]):
        pulumi.set(self, "stp_config", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['SwitchSwitchMgmtArgs']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['SwitchSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Device Type. enum: `switch`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useRouterIdAsSourceIp")
    def use_router_id_as_source_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use it for snmp / syslog / tacplus / radius
        """
        return pulumi.get(self, "use_router_id_as_source_ip")

    @use_router_id_as_source_ip.setter
    def use_router_id_as_source_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_router_id_as_source_ip", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter(name="virtualChassis")
    def virtual_chassis(self) -> Optional[pulumi.Input['SwitchVirtualChassisArgs']]:
        """
        required for preprovisioned Virtual Chassis
        """
        return pulumi.get(self, "virtual_chassis")

    @virtual_chassis.setter
    def virtual_chassis(self, value: Optional[pulumi.Input['SwitchVirtualChassisArgs']]):
        pulumi.set(self, "virtual_chassis", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['SwitchVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['SwitchVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SwitchVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)

    @property
    @pulumi.getter(name="vrrpConfig")
    def vrrp_config(self) -> Optional[pulumi.Input['SwitchVrrpConfigArgs']]:
        """
        Junos VRRP config
        """
        return pulumi.get(self, "vrrp_config")

    @vrrp_config.setter
    def vrrp_config(self, value: Optional[pulumi.Input['SwitchVrrpConfigArgs']]):
        pulumi.set(self, "vrrp_config", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


class Switch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SwitchAclPolicyArgs', 'SwitchAclPolicyArgsDict']]]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchAclTagsArgs', 'SwitchAclTagsArgsDict']]]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[Union['SwitchDhcpSnoopingArgs', 'SwitchDhcpSnoopingArgsDict']]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['SwitchDhcpdConfigArgs', 'SwitchDhcpdConfigArgsDict']]] = None,
                 disable_auto_config: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 evpn_config: Optional[pulumi.Input[Union['SwitchEvpnConfigArgs', 'SwitchEvpnConfigArgsDict']]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutesArgs', 'SwitchExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutes6Args', 'SwitchExtraRoutes6ArgsDict']]]]] = None,
                 ip_config: Optional[pulumi.Input[Union['SwitchIpConfigArgs', 'SwitchIpConfigArgsDict']]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 mist_nac: Optional[pulumi.Input[Union['SwitchMistNacArgs', 'SwitchMistNacArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchNetworksArgs', 'SwitchNetworksArgsDict']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['SwitchOobIpConfigArgs', 'SwitchOobIpConfigArgsDict']]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOspfAreasArgs', 'SwitchOspfAreasArgsDict']]]]] = None,
                 other_ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOtherIpConfigsArgs', 'SwitchOtherIpConfigsArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortConfigArgs', 'SwitchPortConfigArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortMirroringArgs', 'SwitchPortMirroringArgsDict']]]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortUsagesArgs', 'SwitchPortUsagesArgsDict']]]]] = None,
                 radius_config: Optional[pulumi.Input[Union['SwitchRadiusConfigArgs', 'SwitchRadiusConfigArgsDict']]] = None,
                 remote_syslog: Optional[pulumi.Input[Union['SwitchRemoteSyslogArgs', 'SwitchRemoteSyslogArgsDict']]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 snmp_config: Optional[pulumi.Input[Union['SwitchSnmpConfigArgs', 'SwitchSnmpConfigArgsDict']]] = None,
                 stp_config: Optional[pulumi.Input[Union['SwitchStpConfigArgs', 'SwitchStpConfigArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['SwitchSwitchMgmtArgs', 'SwitchSwitchMgmtArgsDict']]] = None,
                 use_router_id_as_source_ip: Optional[pulumi.Input[bool]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_chassis: Optional[pulumi.Input[Union['SwitchVirtualChassisArgs', 'SwitchVirtualChassisArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['SwitchVrfConfigArgs', 'SwitchVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchVrfInstancesArgs', 'SwitchVrfInstancesArgsDict']]]]] = None,
                 vrrp_config: Optional[pulumi.Input[Union['SwitchVrrpConfigArgs', 'SwitchVrrpConfigArgsDict']]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        This resource manages the Switch configuration.It can be used to define specific configuration at the device level or to override Org/Site Network template settings.

        ## Import

        Using `pulumi import`, import `mist_device_switch` with:

        Switch Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/switch:Switch switch_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchAclTagsArgs', 'SwitchAclTagsArgsDict']]]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[bool] disable_auto_config: for a claimed switch, we control the configs by default. This option (disables the behavior)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Union['SwitchEvpnConfigArgs', 'SwitchEvpnConfigArgsDict']] evpn_config: EVPN Junos settings
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutes6Args', 'SwitchExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Union['SwitchIpConfigArgs', 'SwitchIpConfigArgsDict']] ip_config: Junos IP Config
        :param pulumi.Input[bool] managed: for an adopted switch, we donâ€™t overwrite their existing configs automatically
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input[Union['SwitchMistNacArgs', 'SwitchMistNacArgsDict']] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchNetworksArgs', 'SwitchNetworksArgsDict']]]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Union['SwitchOobIpConfigArgs', 'SwitchOobIpConfigArgsDict']] oob_ip_config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
               set separately (if desired): key parameter = `re1`
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOspfAreasArgs', 'SwitchOspfAreasArgsDict']]]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOtherIpConfigsArgs', 'SwitchOtherIpConfigsArgsDict']]]] other_ip_configs: Property key is the network name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortConfigArgs', 'SwitchPortConfigArgsDict']]]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortMirroringArgs', 'SwitchPortMirroringArgsDict']]]] port_mirroring: Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
               interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input[Union['SwitchRadiusConfigArgs', 'SwitchRadiusConfigArgsDict']] radius_config: Junos Radius config
        :param pulumi.Input[str] router_id: used for OSPF / BGP / EVPN
        :param pulumi.Input[Union['SwitchSwitchMgmtArgs', 'SwitchSwitchMgmtArgsDict']] switch_mgmt: Switch settings
        :param pulumi.Input[bool] use_router_id_as_source_ip: whether to use it for snmp / syslog / tacplus / radius
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Union['SwitchVirtualChassisArgs', 'SwitchVirtualChassisArgsDict']] virtual_chassis: required for preprovisioned Virtual Chassis
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchVrfInstancesArgs', 'SwitchVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        :param pulumi.Input[Union['SwitchVrrpConfigArgs', 'SwitchVrrpConfigArgsDict']] vrrp_config: Junos VRRP config
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SwitchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Switch configuration.It can be used to define specific configuration at the device level or to override Org/Site Network template settings.

        ## Import

        Using `pulumi import`, import `mist_device_switch` with:

        Switch Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/switch:Switch switch_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param SwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SwitchAclPolicyArgs', 'SwitchAclPolicyArgsDict']]]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchAclTagsArgs', 'SwitchAclTagsArgsDict']]]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[Union['SwitchDhcpSnoopingArgs', 'SwitchDhcpSnoopingArgsDict']]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['SwitchDhcpdConfigArgs', 'SwitchDhcpdConfigArgsDict']]] = None,
                 disable_auto_config: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 evpn_config: Optional[pulumi.Input[Union['SwitchEvpnConfigArgs', 'SwitchEvpnConfigArgsDict']]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutesArgs', 'SwitchExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutes6Args', 'SwitchExtraRoutes6ArgsDict']]]]] = None,
                 ip_config: Optional[pulumi.Input[Union['SwitchIpConfigArgs', 'SwitchIpConfigArgsDict']]] = None,
                 managed: Optional[pulumi.Input[bool]] = None,
                 map_id: Optional[pulumi.Input[str]] = None,
                 mist_nac: Optional[pulumi.Input[Union['SwitchMistNacArgs', 'SwitchMistNacArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchNetworksArgs', 'SwitchNetworksArgsDict']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['SwitchOobIpConfigArgs', 'SwitchOobIpConfigArgsDict']]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOspfAreasArgs', 'SwitchOspfAreasArgsDict']]]]] = None,
                 other_ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOtherIpConfigsArgs', 'SwitchOtherIpConfigsArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortConfigArgs', 'SwitchPortConfigArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortMirroringArgs', 'SwitchPortMirroringArgsDict']]]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortUsagesArgs', 'SwitchPortUsagesArgsDict']]]]] = None,
                 radius_config: Optional[pulumi.Input[Union['SwitchRadiusConfigArgs', 'SwitchRadiusConfigArgsDict']]] = None,
                 remote_syslog: Optional[pulumi.Input[Union['SwitchRemoteSyslogArgs', 'SwitchRemoteSyslogArgsDict']]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 snmp_config: Optional[pulumi.Input[Union['SwitchSnmpConfigArgs', 'SwitchSnmpConfigArgsDict']]] = None,
                 stp_config: Optional[pulumi.Input[Union['SwitchStpConfigArgs', 'SwitchStpConfigArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['SwitchSwitchMgmtArgs', 'SwitchSwitchMgmtArgsDict']]] = None,
                 use_router_id_as_source_ip: Optional[pulumi.Input[bool]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 virtual_chassis: Optional[pulumi.Input[Union['SwitchVirtualChassisArgs', 'SwitchVirtualChassisArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['SwitchVrfConfigArgs', 'SwitchVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchVrfInstancesArgs', 'SwitchVrfInstancesArgsDict']]]]] = None,
                 vrrp_config: Optional[pulumi.Input[Union['SwitchVrrpConfigArgs', 'SwitchVrrpConfigArgsDict']]] = None,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchArgs.__new__(SwitchArgs)

            __props__.__dict__["acl_policies"] = acl_policies
            __props__.__dict__["acl_tags"] = acl_tags
            __props__.__dict__["additional_config_cmds"] = additional_config_cmds
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["dhcp_snooping"] = dhcp_snooping
            __props__.__dict__["dhcpd_config"] = dhcpd_config
            __props__.__dict__["disable_auto_config"] = disable_auto_config
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["dns_suffixes"] = dns_suffixes
            __props__.__dict__["evpn_config"] = evpn_config
            __props__.__dict__["extra_routes"] = extra_routes
            __props__.__dict__["extra_routes6"] = extra_routes6
            __props__.__dict__["ip_config"] = ip_config
            __props__.__dict__["managed"] = managed
            __props__.__dict__["map_id"] = map_id
            __props__.__dict__["mist_nac"] = mist_nac
            __props__.__dict__["name"] = name
            __props__.__dict__["networks"] = networks
            __props__.__dict__["notes"] = notes
            __props__.__dict__["ntp_servers"] = ntp_servers
            __props__.__dict__["oob_ip_config"] = oob_ip_config
            __props__.__dict__["ospf_areas"] = ospf_areas
            __props__.__dict__["other_ip_configs"] = other_ip_configs
            __props__.__dict__["port_config"] = port_config
            __props__.__dict__["port_mirroring"] = port_mirroring
            __props__.__dict__["port_usages"] = port_usages
            __props__.__dict__["radius_config"] = radius_config
            __props__.__dict__["remote_syslog"] = remote_syslog
            __props__.__dict__["role"] = role
            __props__.__dict__["router_id"] = router_id
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["snmp_config"] = snmp_config
            __props__.__dict__["stp_config"] = stp_config
            __props__.__dict__["switch_mgmt"] = switch_mgmt
            __props__.__dict__["use_router_id_as_source_ip"] = use_router_id_as_source_ip
            __props__.__dict__["vars"] = vars
            __props__.__dict__["virtual_chassis"] = virtual_chassis
            __props__.__dict__["vrf_config"] = vrf_config
            __props__.__dict__["vrf_instances"] = vrf_instances
            __props__.__dict__["vrrp_config"] = vrrp_config
            __props__.__dict__["x"] = x
            __props__.__dict__["y"] = y
            __props__.__dict__["image1_url"] = None
            __props__.__dict__["image2_url"] = None
            __props__.__dict__["image3_url"] = None
            __props__.__dict__["mac"] = None
            __props__.__dict__["model"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["serial"] = None
            __props__.__dict__["type"] = None
        super(Switch, __self__).__init__(
            'junipermist:device/switch:Switch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['SwitchAclPolicyArgs', 'SwitchAclPolicyArgsDict']]]]] = None,
            acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchAclTagsArgs', 'SwitchAclTagsArgsDict']]]]] = None,
            additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            device_id: Optional[pulumi.Input[str]] = None,
            dhcp_snooping: Optional[pulumi.Input[Union['SwitchDhcpSnoopingArgs', 'SwitchDhcpSnoopingArgsDict']]] = None,
            dhcpd_config: Optional[pulumi.Input[Union['SwitchDhcpdConfigArgs', 'SwitchDhcpdConfigArgsDict']]] = None,
            disable_auto_config: Optional[pulumi.Input[bool]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            evpn_config: Optional[pulumi.Input[Union['SwitchEvpnConfigArgs', 'SwitchEvpnConfigArgsDict']]] = None,
            extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutesArgs', 'SwitchExtraRoutesArgsDict']]]]] = None,
            extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutes6Args', 'SwitchExtraRoutes6ArgsDict']]]]] = None,
            image1_url: Optional[pulumi.Input[str]] = None,
            image2_url: Optional[pulumi.Input[str]] = None,
            image3_url: Optional[pulumi.Input[str]] = None,
            ip_config: Optional[pulumi.Input[Union['SwitchIpConfigArgs', 'SwitchIpConfigArgsDict']]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            managed: Optional[pulumi.Input[bool]] = None,
            map_id: Optional[pulumi.Input[str]] = None,
            mist_nac: Optional[pulumi.Input[Union['SwitchMistNacArgs', 'SwitchMistNacArgsDict']]] = None,
            model: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchNetworksArgs', 'SwitchNetworksArgsDict']]]]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oob_ip_config: Optional[pulumi.Input[Union['SwitchOobIpConfigArgs', 'SwitchOobIpConfigArgsDict']]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOspfAreasArgs', 'SwitchOspfAreasArgsDict']]]]] = None,
            other_ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOtherIpConfigsArgs', 'SwitchOtherIpConfigsArgsDict']]]]] = None,
            port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortConfigArgs', 'SwitchPortConfigArgsDict']]]]] = None,
            port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortMirroringArgs', 'SwitchPortMirroringArgsDict']]]]] = None,
            port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortUsagesArgs', 'SwitchPortUsagesArgsDict']]]]] = None,
            radius_config: Optional[pulumi.Input[Union['SwitchRadiusConfigArgs', 'SwitchRadiusConfigArgsDict']]] = None,
            remote_syslog: Optional[pulumi.Input[Union['SwitchRemoteSyslogArgs', 'SwitchRemoteSyslogArgsDict']]] = None,
            role: Optional[pulumi.Input[str]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            snmp_config: Optional[pulumi.Input[Union['SwitchSnmpConfigArgs', 'SwitchSnmpConfigArgsDict']]] = None,
            stp_config: Optional[pulumi.Input[Union['SwitchStpConfigArgs', 'SwitchStpConfigArgsDict']]] = None,
            switch_mgmt: Optional[pulumi.Input[Union['SwitchSwitchMgmtArgs', 'SwitchSwitchMgmtArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            use_router_id_as_source_ip: Optional[pulumi.Input[bool]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            virtual_chassis: Optional[pulumi.Input[Union['SwitchVirtualChassisArgs', 'SwitchVirtualChassisArgsDict']]] = None,
            vrf_config: Optional[pulumi.Input[Union['SwitchVrfConfigArgs', 'SwitchVrfConfigArgsDict']]] = None,
            vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchVrfInstancesArgs', 'SwitchVrfInstancesArgsDict']]]]] = None,
            vrrp_config: Optional[pulumi.Input[Union['SwitchVrrpConfigArgs', 'SwitchVrrpConfigArgsDict']]] = None,
            x: Optional[pulumi.Input[float]] = None,
            y: Optional[pulumi.Input[float]] = None) -> 'Switch':
        """
        Get an existing Switch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchAclTagsArgs', 'SwitchAclTagsArgsDict']]]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[bool] disable_auto_config: for a claimed switch, we control the configs by default. This option (disables the behavior)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Union['SwitchEvpnConfigArgs', 'SwitchEvpnConfigArgsDict']] evpn_config: EVPN Junos settings
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchExtraRoutes6Args', 'SwitchExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Union['SwitchIpConfigArgs', 'SwitchIpConfigArgsDict']] ip_config: Junos IP Config
        :param pulumi.Input[str] mac: device MAC address
        :param pulumi.Input[bool] managed: for an adopted switch, we donâ€™t overwrite their existing configs automatically
        :param pulumi.Input[str] map_id: map where the device belongs to
        :param pulumi.Input[Union['SwitchMistNacArgs', 'SwitchMistNacArgsDict']] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[str] model: device Model
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchNetworksArgs', 'SwitchNetworksArgsDict']]]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Union['SwitchOobIpConfigArgs', 'SwitchOobIpConfigArgsDict']] oob_ip_config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
               set separately (if desired): key parameter = `re1`
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOspfAreasArgs', 'SwitchOspfAreasArgsDict']]]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchOtherIpConfigsArgs', 'SwitchOtherIpConfigsArgsDict']]]] other_ip_configs: Property key is the network name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortConfigArgs', 'SwitchPortConfigArgsDict']]]] port_config: Property key is the port name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchPortMirroringArgs', 'SwitchPortMirroringArgsDict']]]] port_mirroring: Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
               interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input[Union['SwitchRadiusConfigArgs', 'SwitchRadiusConfigArgsDict']] radius_config: Junos Radius config
        :param pulumi.Input[str] router_id: used for OSPF / BGP / EVPN
        :param pulumi.Input[str] serial: device Serial
        :param pulumi.Input[Union['SwitchSwitchMgmtArgs', 'SwitchSwitchMgmtArgsDict']] switch_mgmt: Switch settings
        :param pulumi.Input[str] type: Device Type. enum: `switch`
        :param pulumi.Input[bool] use_router_id_as_source_ip: whether to use it for snmp / syslog / tacplus / radius
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Union['SwitchVirtualChassisArgs', 'SwitchVirtualChassisArgsDict']] virtual_chassis: required for preprovisioned Virtual Chassis
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SwitchVrfInstancesArgs', 'SwitchVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        :param pulumi.Input[Union['SwitchVrrpConfigArgs', 'SwitchVrrpConfigArgsDict']] vrrp_config: Junos VRRP config
        :param pulumi.Input[float] x: x in pixel
        :param pulumi.Input[float] y: y in pixel
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchState.__new__(_SwitchState)

        __props__.__dict__["acl_policies"] = acl_policies
        __props__.__dict__["acl_tags"] = acl_tags
        __props__.__dict__["additional_config_cmds"] = additional_config_cmds
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["dhcp_snooping"] = dhcp_snooping
        __props__.__dict__["dhcpd_config"] = dhcpd_config
        __props__.__dict__["disable_auto_config"] = disable_auto_config
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["dns_suffixes"] = dns_suffixes
        __props__.__dict__["evpn_config"] = evpn_config
        __props__.__dict__["extra_routes"] = extra_routes
        __props__.__dict__["extra_routes6"] = extra_routes6
        __props__.__dict__["image1_url"] = image1_url
        __props__.__dict__["image2_url"] = image2_url
        __props__.__dict__["image3_url"] = image3_url
        __props__.__dict__["ip_config"] = ip_config
        __props__.__dict__["mac"] = mac
        __props__.__dict__["managed"] = managed
        __props__.__dict__["map_id"] = map_id
        __props__.__dict__["mist_nac"] = mist_nac
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["notes"] = notes
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["oob_ip_config"] = oob_ip_config
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["ospf_areas"] = ospf_areas
        __props__.__dict__["other_ip_configs"] = other_ip_configs
        __props__.__dict__["port_config"] = port_config
        __props__.__dict__["port_mirroring"] = port_mirroring
        __props__.__dict__["port_usages"] = port_usages
        __props__.__dict__["radius_config"] = radius_config
        __props__.__dict__["remote_syslog"] = remote_syslog
        __props__.__dict__["role"] = role
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["serial"] = serial
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["snmp_config"] = snmp_config
        __props__.__dict__["stp_config"] = stp_config
        __props__.__dict__["switch_mgmt"] = switch_mgmt
        __props__.__dict__["type"] = type
        __props__.__dict__["use_router_id_as_source_ip"] = use_router_id_as_source_ip
        __props__.__dict__["vars"] = vars
        __props__.__dict__["virtual_chassis"] = virtual_chassis
        __props__.__dict__["vrf_config"] = vrf_config
        __props__.__dict__["vrf_instances"] = vrf_instances
        __props__.__dict__["vrrp_config"] = vrrp_config
        __props__.__dict__["x"] = x
        __props__.__dict__["y"] = y
        return Switch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> pulumi.Output[Optional[Sequence['outputs.SwitchAclPolicy']]]:
        return pulumi.get(self, "acl_policies")

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchAclTags']]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> pulumi.Output[Optional['outputs.SwitchDhcpSnooping']]:
        return pulumi.get(self, "dhcp_snooping")

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> pulumi.Output[Optional['outputs.SwitchDhcpdConfig']]:
        return pulumi.get(self, "dhcpd_config")

    @property
    @pulumi.getter(name="disableAutoConfig")
    def disable_auto_config(self) -> pulumi.Output[bool]:
        """
        for a claimed switch, we control the configs by default. This option (disables the behavior)
        """
        return pulumi.get(self, "disable_auto_config")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="evpnConfig")
    def evpn_config(self) -> pulumi.Output[Optional['outputs.SwitchEvpnConfig']]:
        """
        EVPN Junos settings
        """
        return pulumi.get(self, "evpn_config")

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchExtraRoutes']]]:
        return pulumi.get(self, "extra_routes")

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchExtraRoutes6']]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image1_url")

    @property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image2_url")

    @property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "image3_url")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> pulumi.Output[Optional['outputs.SwitchIpConfig']]:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[str]:
        """
        device MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def managed(self) -> pulumi.Output[bool]:
        """
        for an adopted switch, we donâ€™t overwrite their existing configs automatically
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter(name="mapId")
    def map_id(self) -> pulumi.Output[Optional[str]]:
        """
        map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> pulumi.Output[Optional['outputs.SwitchMistNac']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        """
        device Model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchNetworks']]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> pulumi.Output[Optional['outputs.SwitchOobIpConfig']]:
        """
        - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines, re1 mgmt IP has to be
        set separately (if desired): key parameter = `re1`
        """
        return pulumi.get(self, "oob_ip_config")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchOspfAreas']]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @property
    @pulumi.getter(name="otherIpConfigs")
    def other_ip_configs(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchOtherIpConfigs']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "other_ip_configs")

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchPortConfig']]]:
        """
        Property key is the port name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchPortMirroring']]]:
        """
        Property key is the port mirroring instance name port_mirroring can be added under device/site settings. It takes
        interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchPortUsages']]]:
        return pulumi.get(self, "port_usages")

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> pulumi.Output[Optional['outputs.SwitchRadiusConfig']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> pulumi.Output[Optional['outputs.SwitchRemoteSyslog']]:
        return pulumi.get(self, "remote_syslog")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[Optional[str]]:
        """
        used for OSPF / BGP / EVPN
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[str]:
        """
        device Serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> pulumi.Output[Optional['outputs.SwitchSnmpConfig']]:
        return pulumi.get(self, "snmp_config")

    @property
    @pulumi.getter(name="stpConfig")
    def stp_config(self) -> pulumi.Output[Optional['outputs.SwitchStpConfig']]:
        return pulumi.get(self, "stp_config")

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> pulumi.Output[Optional['outputs.SwitchSwitchMgmt']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Device Type. enum: `switch`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useRouterIdAsSourceIp")
    def use_router_id_as_source_ip(self) -> pulumi.Output[bool]:
        """
        whether to use it for snmp / syslog / tacplus / radius
        """
        return pulumi.get(self, "use_router_id_as_source_ip")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @property
    @pulumi.getter(name="virtualChassis")
    def virtual_chassis(self) -> pulumi.Output[Optional['outputs.SwitchVirtualChassis']]:
        """
        required for preprovisioned Virtual Chassis
        """
        return pulumi.get(self, "virtual_chassis")

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> pulumi.Output[Optional['outputs.SwitchVrfConfig']]:
        return pulumi.get(self, "vrf_config")

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SwitchVrfInstances']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @property
    @pulumi.getter(name="vrrpConfig")
    def vrrp_config(self) -> pulumi.Output[Optional['outputs.SwitchVrrpConfig']]:
        """
        Junos VRRP config
        """
        return pulumi.get(self, "vrrp_config")

    @property
    @pulumi.getter
    def x(self) -> pulumi.Output[Optional[float]]:
        """
        x in pixel
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> pulumi.Output[Optional[float]]:
        """
        y in pixel
        """
        return pulumi.get(self, "y")

