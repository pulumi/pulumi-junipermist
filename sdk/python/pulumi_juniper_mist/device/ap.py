# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApArgs', 'Ap']

@pulumi.input_type
class ApArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[_builtins.str],
                 site_id: pulumi.Input[_builtins.str],
                 aeroscout: Optional[pulumi.Input['ApAeroscoutArgs']] = None,
                 ble_config: Optional[pulumi.Input['ApBleConfigArgs']] = None,
                 centrak: Optional[pulumi.Input['ApCentrakArgs']] = None,
                 client_bridge: Optional[pulumi.Input['ApClientBridgeArgs']] = None,
                 disable_eth1: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth2: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth3: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_module: Optional[pulumi.Input[_builtins.bool]] = None,
                 esl_config: Optional[pulumi.Input['ApEslConfigArgs']] = None,
                 flow_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 height: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_config: Optional[pulumi.Input['ApIpConfigArgs']] = None,
                 lacp_config: Optional[pulumi.Input['ApLacpConfigArgs']] = None,
                 led: Optional[pulumi.Input['ApLedArgs']] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mesh: Optional[pulumi.Input['ApMeshArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 orientation: Optional[pulumi.Input[_builtins.int]] = None,
                 poe_passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]] = None,
                 pwr_config: Optional[pulumi.Input['ApPwrConfigArgs']] = None,
                 radio_config: Optional[pulumi.Input['ApRadioConfigArgs']] = None,
                 uplink_port_config: Optional[pulumi.Input['ApUplinkPortConfigArgs']] = None,
                 usb_config: Optional[pulumi.Input['ApUsbConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 x: Optional[pulumi.Input[_builtins.float]] = None,
                 y: Optional[pulumi.Input[_builtins.float]] = None):
        """
        The set of arguments for constructing a Ap resource.
        :param pulumi.Input['ApAeroscoutArgs'] aeroscout: Aeroscout AP settings
        :param pulumi.Input['ApBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[_builtins.bool] disable_eth1: Whether to disable eth1 port
        :param pulumi.Input[_builtins.bool] disable_eth2: Whether to disable eth2 port
        :param pulumi.Input[_builtins.bool] disable_eth3: Whether to disable eth3 port
        :param pulumi.Input[_builtins.bool] disable_module: Whether to disable module port
        :param pulumi.Input[_builtins.bool] flow_control: For some AP models, flow_control can be enabled to address some switch compatibility issue
        :param pulumi.Input[_builtins.float] height: Height, in meters, optional
        :param pulumi.Input['ApIpConfigArgs'] ip_config: IP AP settings
        :param pulumi.Input['ApLedArgs'] led: LED AP settings
        :param pulumi.Input[_builtins.bool] locked: Whether this map is considered locked down
        :param pulumi.Input[_builtins.str] map_id: Map where the device belongs to
        :param pulumi.Input['ApMeshArgs'] mesh: Mesh AP settings
        :param pulumi.Input[_builtins.str] notes: Any notes about this AP
        :param pulumi.Input[_builtins.int] orientation: Orientation, 0-359, in degrees, up is 0, right is 90.
        :param pulumi.Input[_builtins.bool] poe_passthrough: Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]] port_config: eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
               precedence over switch_config (deprecated)
        :param pulumi.Input['ApPwrConfigArgs'] pwr_config: Power related configs
        :param pulumi.Input['ApRadioConfigArgs'] radio_config: Radio AP settings
        :param pulumi.Input['ApUplinkPortConfigArgs'] uplink_port_config: AP Uplink port configuration
        :param pulumi.Input['ApUsbConfigArgs'] usb_config: USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
               moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] vars: Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[_builtins.float] x: X in pixel
        :param pulumi.Input[_builtins.float] y: Y in pixel
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "site_id", site_id)
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if centrak is not None:
            pulumi.set(__self__, "centrak", centrak)
        if client_bridge is not None:
            pulumi.set(__self__, "client_bridge", client_bridge)
        if disable_eth1 is not None:
            pulumi.set(__self__, "disable_eth1", disable_eth1)
        if disable_eth2 is not None:
            pulumi.set(__self__, "disable_eth2", disable_eth2)
        if disable_eth3 is not None:
            pulumi.set(__self__, "disable_eth3", disable_eth3)
        if disable_module is not None:
            pulumi.set(__self__, "disable_module", disable_module)
        if esl_config is not None:
            pulumi.set(__self__, "esl_config", esl_config)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lacp_config is not None:
            pulumi.set(__self__, "lacp_config", lacp_config)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if poe_passthrough is not None:
            pulumi.set(__self__, "poe_passthrough", poe_passthrough)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if pwr_config is not None:
            pulumi.set(__self__, "pwr_config", pwr_config)
        if radio_config is not None:
            pulumi.set(__self__, "radio_config", radio_config)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if usb_config is not None:
            pulumi.set(__self__, "usb_config", usb_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "site_id", value)

    @_builtins.property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input['ApAeroscoutArgs']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input['ApAeroscoutArgs']]):
        pulumi.set(self, "aeroscout", value)

    @_builtins.property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['ApBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['ApBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @_builtins.property
    @pulumi.getter
    def centrak(self) -> Optional[pulumi.Input['ApCentrakArgs']]:
        return pulumi.get(self, "centrak")

    @centrak.setter
    def centrak(self, value: Optional[pulumi.Input['ApCentrakArgs']]):
        pulumi.set(self, "centrak", value)

    @_builtins.property
    @pulumi.getter(name="clientBridge")
    def client_bridge(self) -> Optional[pulumi.Input['ApClientBridgeArgs']]:
        return pulumi.get(self, "client_bridge")

    @client_bridge.setter
    def client_bridge(self, value: Optional[pulumi.Input['ApClientBridgeArgs']]):
        pulumi.set(self, "client_bridge", value)

    @_builtins.property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @disable_eth1.setter
    def disable_eth1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth1", value)

    @_builtins.property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @disable_eth2.setter
    def disable_eth2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth2", value)

    @_builtins.property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @disable_eth3.setter
    def disable_eth3(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth3", value)

    @_builtins.property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @disable_module.setter
    def disable_module(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_module", value)

    @_builtins.property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> Optional[pulumi.Input['ApEslConfigArgs']]:
        return pulumi.get(self, "esl_config")

    @esl_config.setter
    def esl_config(self, value: Optional[pulumi.Input['ApEslConfigArgs']]):
        pulumi.set(self, "esl_config", value)

    @_builtins.property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        For some AP models, flow_control can be enabled to address some switch compatibility issue
        """
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "flow_control", value)

    @_builtins.property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Height, in meters, optional
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "height", value)

    @_builtins.property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['ApIpConfigArgs']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['ApIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @_builtins.property
    @pulumi.getter(name="lacpConfig")
    def lacp_config(self) -> Optional[pulumi.Input['ApLacpConfigArgs']]:
        return pulumi.get(self, "lacp_config")

    @lacp_config.setter
    def lacp_config(self, value: Optional[pulumi.Input['ApLacpConfigArgs']]):
        pulumi.set(self, "lacp_config", value)

    @_builtins.property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['ApLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['ApLedArgs']]):
        pulumi.set(self, "led", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this map is considered locked down
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "map_id", value)

    @_builtins.property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['ApMeshArgs']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['ApMeshArgs']]):
        pulumi.set(self, "mesh", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Any notes about this AP
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @_builtins.property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Orientation, 0-359, in degrees, up is 0, right is 90.
        """
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "orientation", value)

    @_builtins.property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @poe_passthrough.setter
    def poe_passthrough(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "poe_passthrough", value)

    @_builtins.property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]]:
        """
        eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
        precedence over switch_config (deprecated)
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @_builtins.property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> Optional[pulumi.Input['ApPwrConfigArgs']]:
        """
        Power related configs
        """
        return pulumi.get(self, "pwr_config")

    @pwr_config.setter
    def pwr_config(self, value: Optional[pulumi.Input['ApPwrConfigArgs']]):
        pulumi.set(self, "pwr_config", value)

    @_builtins.property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> Optional[pulumi.Input['ApRadioConfigArgs']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @radio_config.setter
    def radio_config(self, value: Optional[pulumi.Input['ApRadioConfigArgs']]):
        pulumi.set(self, "radio_config", value)

    @_builtins.property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['ApUplinkPortConfigArgs']]:
        """
        AP Uplink port configuration
        """
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['ApUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @_builtins.property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> Optional[pulumi.Input['ApUsbConfigArgs']]:
        """
        USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
        moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @usb_config.setter
    def usb_config(self, value: Optional[pulumi.Input['ApUsbConfigArgs']]):
        pulumi.set(self, "usb_config", value)

    @_builtins.property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vars", value)

    @_builtins.property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        X in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "x", value)

    @_builtins.property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class _ApState:
    def __init__(__self__, *,
                 aeroscout: Optional[pulumi.Input['ApAeroscoutArgs']] = None,
                 ble_config: Optional[pulumi.Input['ApBleConfigArgs']] = None,
                 centrak: Optional[pulumi.Input['ApCentrakArgs']] = None,
                 client_bridge: Optional[pulumi.Input['ApClientBridgeArgs']] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_eth1: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth2: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth3: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_module: Optional[pulumi.Input[_builtins.bool]] = None,
                 esl_config: Optional[pulumi.Input['ApEslConfigArgs']] = None,
                 flow_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 height: Optional[pulumi.Input[_builtins.float]] = None,
                 image1_url: Optional[pulumi.Input[_builtins.str]] = None,
                 image2_url: Optional[pulumi.Input[_builtins.str]] = None,
                 image3_url: Optional[pulumi.Input[_builtins.str]] = None,
                 ip_config: Optional[pulumi.Input['ApIpConfigArgs']] = None,
                 lacp_config: Optional[pulumi.Input['ApLacpConfigArgs']] = None,
                 led: Optional[pulumi.Input['ApLedArgs']] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 mac: Optional[pulumi.Input[_builtins.str]] = None,
                 map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mesh: Optional[pulumi.Input['ApMeshArgs']] = None,
                 model: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 org_id: Optional[pulumi.Input[_builtins.str]] = None,
                 orientation: Optional[pulumi.Input[_builtins.int]] = None,
                 poe_passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]] = None,
                 pwr_config: Optional[pulumi.Input['ApPwrConfigArgs']] = None,
                 radio_config: Optional[pulumi.Input['ApRadioConfigArgs']] = None,
                 serial: Optional[pulumi.Input[_builtins.str]] = None,
                 site_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 uplink_port_config: Optional[pulumi.Input['ApUplinkPortConfigArgs']] = None,
                 usb_config: Optional[pulumi.Input['ApUsbConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 x: Optional[pulumi.Input[_builtins.float]] = None,
                 y: Optional[pulumi.Input[_builtins.float]] = None):
        """
        Input properties used for looking up and filtering Ap resources.
        :param pulumi.Input['ApAeroscoutArgs'] aeroscout: Aeroscout AP settings
        :param pulumi.Input['ApBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[_builtins.bool] disable_eth1: Whether to disable eth1 port
        :param pulumi.Input[_builtins.bool] disable_eth2: Whether to disable eth2 port
        :param pulumi.Input[_builtins.bool] disable_eth3: Whether to disable eth3 port
        :param pulumi.Input[_builtins.bool] disable_module: Whether to disable module port
        :param pulumi.Input[_builtins.bool] flow_control: For some AP models, flow_control can be enabled to address some switch compatibility issue
        :param pulumi.Input[_builtins.float] height: Height, in meters, optional
        :param pulumi.Input['ApIpConfigArgs'] ip_config: IP AP settings
        :param pulumi.Input['ApLedArgs'] led: LED AP settings
        :param pulumi.Input[_builtins.bool] locked: Whether this map is considered locked down
        :param pulumi.Input[_builtins.str] mac: Device MAC address
        :param pulumi.Input[_builtins.str] map_id: Map where the device belongs to
        :param pulumi.Input['ApMeshArgs'] mesh: Mesh AP settings
        :param pulumi.Input[_builtins.str] model: Device Model
        :param pulumi.Input[_builtins.str] notes: Any notes about this AP
        :param pulumi.Input[_builtins.int] orientation: Orientation, 0-359, in degrees, up is 0, right is 90.
        :param pulumi.Input[_builtins.bool] poe_passthrough: Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]] port_config: eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
               precedence over switch_config (deprecated)
        :param pulumi.Input['ApPwrConfigArgs'] pwr_config: Power related configs
        :param pulumi.Input['ApRadioConfigArgs'] radio_config: Radio AP settings
        :param pulumi.Input[_builtins.str] serial: Device Serial
        :param pulumi.Input[_builtins.str] type: Device Type. enum: `ap`
        :param pulumi.Input['ApUplinkPortConfigArgs'] uplink_port_config: AP Uplink port configuration
        :param pulumi.Input['ApUsbConfigArgs'] usb_config: USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
               moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] vars: Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[_builtins.float] x: X in pixel
        :param pulumi.Input[_builtins.float] y: Y in pixel
        """
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if centrak is not None:
            pulumi.set(__self__, "centrak", centrak)
        if client_bridge is not None:
            pulumi.set(__self__, "client_bridge", client_bridge)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if disable_eth1 is not None:
            pulumi.set(__self__, "disable_eth1", disable_eth1)
        if disable_eth2 is not None:
            pulumi.set(__self__, "disable_eth2", disable_eth2)
        if disable_eth3 is not None:
            pulumi.set(__self__, "disable_eth3", disable_eth3)
        if disable_module is not None:
            pulumi.set(__self__, "disable_module", disable_module)
        if esl_config is not None:
            pulumi.set(__self__, "esl_config", esl_config)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if image1_url is not None:
            pulumi.set(__self__, "image1_url", image1_url)
        if image2_url is not None:
            pulumi.set(__self__, "image2_url", image2_url)
        if image3_url is not None:
            pulumi.set(__self__, "image3_url", image3_url)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lacp_config is not None:
            pulumi.set(__self__, "lacp_config", lacp_config)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if map_id is not None:
            pulumi.set(__self__, "map_id", map_id)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if poe_passthrough is not None:
            pulumi.set(__self__, "poe_passthrough", poe_passthrough)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if pwr_config is not None:
            pulumi.set(__self__, "pwr_config", pwr_config)
        if radio_config is not None:
            pulumi.set(__self__, "radio_config", radio_config)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if usb_config is not None:
            pulumi.set(__self__, "usb_config", usb_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @_builtins.property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input['ApAeroscoutArgs']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input['ApAeroscoutArgs']]):
        pulumi.set(self, "aeroscout", value)

    @_builtins.property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['ApBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['ApBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @_builtins.property
    @pulumi.getter
    def centrak(self) -> Optional[pulumi.Input['ApCentrakArgs']]:
        return pulumi.get(self, "centrak")

    @centrak.setter
    def centrak(self, value: Optional[pulumi.Input['ApCentrakArgs']]):
        pulumi.set(self, "centrak", value)

    @_builtins.property
    @pulumi.getter(name="clientBridge")
    def client_bridge(self) -> Optional[pulumi.Input['ApClientBridgeArgs']]:
        return pulumi.get(self, "client_bridge")

    @client_bridge.setter
    def client_bridge(self, value: Optional[pulumi.Input['ApClientBridgeArgs']]):
        pulumi.set(self, "client_bridge", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @disable_eth1.setter
    def disable_eth1(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth1", value)

    @_builtins.property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @disable_eth2.setter
    def disable_eth2(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth2", value)

    @_builtins.property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @disable_eth3.setter
    def disable_eth3(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_eth3", value)

    @_builtins.property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @disable_module.setter
    def disable_module(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_module", value)

    @_builtins.property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> Optional[pulumi.Input['ApEslConfigArgs']]:
        return pulumi.get(self, "esl_config")

    @esl_config.setter
    def esl_config(self, value: Optional[pulumi.Input['ApEslConfigArgs']]):
        pulumi.set(self, "esl_config", value)

    @_builtins.property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        For some AP models, flow_control can be enabled to address some switch compatibility issue
        """
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "flow_control", value)

    @_builtins.property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Height, in meters, optional
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "height", value)

    @_builtins.property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image1_url")

    @image1_url.setter
    def image1_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image1_url", value)

    @_builtins.property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image2_url")

    @image2_url.setter
    def image2_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image2_url", value)

    @_builtins.property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image3_url")

    @image3_url.setter
    def image3_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image3_url", value)

    @_builtins.property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['ApIpConfigArgs']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['ApIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @_builtins.property
    @pulumi.getter(name="lacpConfig")
    def lacp_config(self) -> Optional[pulumi.Input['ApLacpConfigArgs']]:
        return pulumi.get(self, "lacp_config")

    @lacp_config.setter
    def lacp_config(self, value: Optional[pulumi.Input['ApLacpConfigArgs']]):
        pulumi.set(self, "lacp_config", value)

    @_builtins.property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['ApLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['ApLedArgs']]):
        pulumi.set(self, "led", value)

    @_builtins.property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this map is considered locked down
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "locked", value)

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device MAC address
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac", value)

    @_builtins.property
    @pulumi.getter(name="mapId")
    def map_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @map_id.setter
    def map_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "map_id", value)

    @_builtins.property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['ApMeshArgs']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['ApMeshArgs']]):
        pulumi.set(self, "mesh", value)

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device Model
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "model", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Any notes about this AP
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "notes", value)

    @_builtins.property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "org_id", value)

    @_builtins.property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Orientation, 0-359, in degrees, up is 0, right is 90.
        """
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "orientation", value)

    @_builtins.property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @poe_passthrough.setter
    def poe_passthrough(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "poe_passthrough", value)

    @_builtins.property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]]:
        """
        eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
        precedence over switch_config (deprecated)
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ApPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @_builtins.property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> Optional[pulumi.Input['ApPwrConfigArgs']]:
        """
        Power related configs
        """
        return pulumi.get(self, "pwr_config")

    @pwr_config.setter
    def pwr_config(self, value: Optional[pulumi.Input['ApPwrConfigArgs']]):
        pulumi.set(self, "pwr_config", value)

    @_builtins.property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> Optional[pulumi.Input['ApRadioConfigArgs']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @radio_config.setter
    def radio_config(self, value: Optional[pulumi.Input['ApRadioConfigArgs']]):
        pulumi.set(self, "radio_config", value)

    @_builtins.property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device Serial
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serial", value)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "site_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Device Type. enum: `ap`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['ApUplinkPortConfigArgs']]:
        """
        AP Uplink port configuration
        """
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['ApUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @_builtins.property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> Optional[pulumi.Input['ApUsbConfigArgs']]:
        """
        USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
        moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @usb_config.setter
    def usb_config(self, value: Optional[pulumi.Input['ApUsbConfigArgs']]):
        pulumi.set(self, "usb_config", value)

    @_builtins.property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vars", value)

    @_builtins.property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        X in pixel
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "x", value)

    @_builtins.property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Y in pixel
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "y", value)


@pulumi.type_token("junipermist:device/ap:Ap")
class Ap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aeroscout: Optional[pulumi.Input[Union['ApAeroscoutArgs', 'ApAeroscoutArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['ApBleConfigArgs', 'ApBleConfigArgsDict']]] = None,
                 centrak: Optional[pulumi.Input[Union['ApCentrakArgs', 'ApCentrakArgsDict']]] = None,
                 client_bridge: Optional[pulumi.Input[Union['ApClientBridgeArgs', 'ApClientBridgeArgsDict']]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_eth1: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth2: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth3: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_module: Optional[pulumi.Input[_builtins.bool]] = None,
                 esl_config: Optional[pulumi.Input[Union['ApEslConfigArgs', 'ApEslConfigArgsDict']]] = None,
                 flow_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 height: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_config: Optional[pulumi.Input[Union['ApIpConfigArgs', 'ApIpConfigArgsDict']]] = None,
                 lacp_config: Optional[pulumi.Input[Union['ApLacpConfigArgs', 'ApLacpConfigArgsDict']]] = None,
                 led: Optional[pulumi.Input[Union['ApLedArgs', 'ApLedArgsDict']]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mesh: Optional[pulumi.Input[Union['ApMeshArgs', 'ApMeshArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 orientation: Optional[pulumi.Input[_builtins.int]] = None,
                 poe_passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ApPortConfigArgs', 'ApPortConfigArgsDict']]]]] = None,
                 pwr_config: Optional[pulumi.Input[Union['ApPwrConfigArgs', 'ApPwrConfigArgsDict']]] = None,
                 radio_config: Optional[pulumi.Input[Union['ApRadioConfigArgs', 'ApRadioConfigArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[_builtins.str]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['ApUplinkPortConfigArgs', 'ApUplinkPortConfigArgsDict']]] = None,
                 usb_config: Optional[pulumi.Input[Union['ApUsbConfigArgs', 'ApUsbConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 x: Optional[pulumi.Input[_builtins.float]] = None,
                 y: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        """
        This resource manages the Wireless Access Point configuration.

        It can be used to define specific configuration at the device level or to override AP Device Profile (`org.DeviceprofileAp`).

        ## Import

        Using `pulumi import`, import `mist_device_ap` with:

        AP Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/ap:Ap ap_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApAeroscoutArgs', 'ApAeroscoutArgsDict']] aeroscout: Aeroscout AP settings
        :param pulumi.Input[Union['ApBleConfigArgs', 'ApBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[_builtins.bool] disable_eth1: Whether to disable eth1 port
        :param pulumi.Input[_builtins.bool] disable_eth2: Whether to disable eth2 port
        :param pulumi.Input[_builtins.bool] disable_eth3: Whether to disable eth3 port
        :param pulumi.Input[_builtins.bool] disable_module: Whether to disable module port
        :param pulumi.Input[_builtins.bool] flow_control: For some AP models, flow_control can be enabled to address some switch compatibility issue
        :param pulumi.Input[_builtins.float] height: Height, in meters, optional
        :param pulumi.Input[Union['ApIpConfigArgs', 'ApIpConfigArgsDict']] ip_config: IP AP settings
        :param pulumi.Input[Union['ApLedArgs', 'ApLedArgsDict']] led: LED AP settings
        :param pulumi.Input[_builtins.bool] locked: Whether this map is considered locked down
        :param pulumi.Input[_builtins.str] map_id: Map where the device belongs to
        :param pulumi.Input[Union['ApMeshArgs', 'ApMeshArgsDict']] mesh: Mesh AP settings
        :param pulumi.Input[_builtins.str] notes: Any notes about this AP
        :param pulumi.Input[_builtins.int] orientation: Orientation, 0-359, in degrees, up is 0, right is 90.
        :param pulumi.Input[_builtins.bool] poe_passthrough: Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['ApPortConfigArgs', 'ApPortConfigArgsDict']]]] port_config: eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
               precedence over switch_config (deprecated)
        :param pulumi.Input[Union['ApPwrConfigArgs', 'ApPwrConfigArgsDict']] pwr_config: Power related configs
        :param pulumi.Input[Union['ApRadioConfigArgs', 'ApRadioConfigArgsDict']] radio_config: Radio AP settings
        :param pulumi.Input[Union['ApUplinkPortConfigArgs', 'ApUplinkPortConfigArgsDict']] uplink_port_config: AP Uplink port configuration
        :param pulumi.Input[Union['ApUsbConfigArgs', 'ApUsbConfigArgsDict']] usb_config: USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
               moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] vars: Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[_builtins.float] x: X in pixel
        :param pulumi.Input[_builtins.float] y: Y in pixel
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Wireless Access Point configuration.

        It can be used to define specific configuration at the device level or to override AP Device Profile (`org.DeviceprofileAp`).

        ## Import

        Using `pulumi import`, import `mist_device_ap` with:

        AP Configuration can be imported by specifying the site_id and the device_id

        ```sh
        $ pulumi import junipermist:device/ap:Ap ap_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param ApArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aeroscout: Optional[pulumi.Input[Union['ApAeroscoutArgs', 'ApAeroscoutArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['ApBleConfigArgs', 'ApBleConfigArgsDict']]] = None,
                 centrak: Optional[pulumi.Input[Union['ApCentrakArgs', 'ApCentrakArgsDict']]] = None,
                 client_bridge: Optional[pulumi.Input[Union['ApClientBridgeArgs', 'ApClientBridgeArgsDict']]] = None,
                 device_id: Optional[pulumi.Input[_builtins.str]] = None,
                 disable_eth1: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth2: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_eth3: Optional[pulumi.Input[_builtins.bool]] = None,
                 disable_module: Optional[pulumi.Input[_builtins.bool]] = None,
                 esl_config: Optional[pulumi.Input[Union['ApEslConfigArgs', 'ApEslConfigArgsDict']]] = None,
                 flow_control: Optional[pulumi.Input[_builtins.bool]] = None,
                 height: Optional[pulumi.Input[_builtins.float]] = None,
                 ip_config: Optional[pulumi.Input[Union['ApIpConfigArgs', 'ApIpConfigArgsDict']]] = None,
                 lacp_config: Optional[pulumi.Input[Union['ApLacpConfigArgs', 'ApLacpConfigArgsDict']]] = None,
                 led: Optional[pulumi.Input[Union['ApLedArgs', 'ApLedArgsDict']]] = None,
                 locked: Optional[pulumi.Input[_builtins.bool]] = None,
                 map_id: Optional[pulumi.Input[_builtins.str]] = None,
                 mesh: Optional[pulumi.Input[Union['ApMeshArgs', 'ApMeshArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 notes: Optional[pulumi.Input[_builtins.str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 orientation: Optional[pulumi.Input[_builtins.int]] = None,
                 poe_passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ApPortConfigArgs', 'ApPortConfigArgsDict']]]]] = None,
                 pwr_config: Optional[pulumi.Input[Union['ApPwrConfigArgs', 'ApPwrConfigArgsDict']]] = None,
                 radio_config: Optional[pulumi.Input[Union['ApRadioConfigArgs', 'ApRadioConfigArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[_builtins.str]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['ApUplinkPortConfigArgs', 'ApUplinkPortConfigArgsDict']]] = None,
                 usb_config: Optional[pulumi.Input[Union['ApUsbConfigArgs', 'ApUsbConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 x: Optional[pulumi.Input[_builtins.float]] = None,
                 y: Optional[pulumi.Input[_builtins.float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApArgs.__new__(ApArgs)

            __props__.__dict__["aeroscout"] = aeroscout
            __props__.__dict__["ble_config"] = ble_config
            __props__.__dict__["centrak"] = centrak
            __props__.__dict__["client_bridge"] = client_bridge
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["disable_eth1"] = disable_eth1
            __props__.__dict__["disable_eth2"] = disable_eth2
            __props__.__dict__["disable_eth3"] = disable_eth3
            __props__.__dict__["disable_module"] = disable_module
            __props__.__dict__["esl_config"] = esl_config
            __props__.__dict__["flow_control"] = flow_control
            __props__.__dict__["height"] = height
            __props__.__dict__["ip_config"] = ip_config
            __props__.__dict__["lacp_config"] = lacp_config
            __props__.__dict__["led"] = led
            __props__.__dict__["locked"] = locked
            __props__.__dict__["map_id"] = map_id
            __props__.__dict__["mesh"] = mesh
            __props__.__dict__["name"] = name
            __props__.__dict__["notes"] = notes
            __props__.__dict__["ntp_servers"] = ntp_servers
            __props__.__dict__["orientation"] = orientation
            __props__.__dict__["poe_passthrough"] = poe_passthrough
            __props__.__dict__["port_config"] = port_config
            __props__.__dict__["pwr_config"] = pwr_config
            __props__.__dict__["radio_config"] = radio_config
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["uplink_port_config"] = uplink_port_config
            __props__.__dict__["usb_config"] = usb_config
            __props__.__dict__["vars"] = vars
            __props__.__dict__["x"] = x
            __props__.__dict__["y"] = y
            __props__.__dict__["image1_url"] = None
            __props__.__dict__["image2_url"] = None
            __props__.__dict__["image3_url"] = None
            __props__.__dict__["mac"] = None
            __props__.__dict__["model"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["serial"] = None
            __props__.__dict__["type"] = None
        super(Ap, __self__).__init__(
            'junipermist:device/ap:Ap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aeroscout: Optional[pulumi.Input[Union['ApAeroscoutArgs', 'ApAeroscoutArgsDict']]] = None,
            ble_config: Optional[pulumi.Input[Union['ApBleConfigArgs', 'ApBleConfigArgsDict']]] = None,
            centrak: Optional[pulumi.Input[Union['ApCentrakArgs', 'ApCentrakArgsDict']]] = None,
            client_bridge: Optional[pulumi.Input[Union['ApClientBridgeArgs', 'ApClientBridgeArgsDict']]] = None,
            device_id: Optional[pulumi.Input[_builtins.str]] = None,
            disable_eth1: Optional[pulumi.Input[_builtins.bool]] = None,
            disable_eth2: Optional[pulumi.Input[_builtins.bool]] = None,
            disable_eth3: Optional[pulumi.Input[_builtins.bool]] = None,
            disable_module: Optional[pulumi.Input[_builtins.bool]] = None,
            esl_config: Optional[pulumi.Input[Union['ApEslConfigArgs', 'ApEslConfigArgsDict']]] = None,
            flow_control: Optional[pulumi.Input[_builtins.bool]] = None,
            height: Optional[pulumi.Input[_builtins.float]] = None,
            image1_url: Optional[pulumi.Input[_builtins.str]] = None,
            image2_url: Optional[pulumi.Input[_builtins.str]] = None,
            image3_url: Optional[pulumi.Input[_builtins.str]] = None,
            ip_config: Optional[pulumi.Input[Union['ApIpConfigArgs', 'ApIpConfigArgsDict']]] = None,
            lacp_config: Optional[pulumi.Input[Union['ApLacpConfigArgs', 'ApLacpConfigArgsDict']]] = None,
            led: Optional[pulumi.Input[Union['ApLedArgs', 'ApLedArgsDict']]] = None,
            locked: Optional[pulumi.Input[_builtins.bool]] = None,
            mac: Optional[pulumi.Input[_builtins.str]] = None,
            map_id: Optional[pulumi.Input[_builtins.str]] = None,
            mesh: Optional[pulumi.Input[Union['ApMeshArgs', 'ApMeshArgsDict']]] = None,
            model: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            notes: Optional[pulumi.Input[_builtins.str]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            org_id: Optional[pulumi.Input[_builtins.str]] = None,
            orientation: Optional[pulumi.Input[_builtins.int]] = None,
            poe_passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
            port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ApPortConfigArgs', 'ApPortConfigArgsDict']]]]] = None,
            pwr_config: Optional[pulumi.Input[Union['ApPwrConfigArgs', 'ApPwrConfigArgsDict']]] = None,
            radio_config: Optional[pulumi.Input[Union['ApRadioConfigArgs', 'ApRadioConfigArgsDict']]] = None,
            serial: Optional[pulumi.Input[_builtins.str]] = None,
            site_id: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            uplink_port_config: Optional[pulumi.Input[Union['ApUplinkPortConfigArgs', 'ApUplinkPortConfigArgsDict']]] = None,
            usb_config: Optional[pulumi.Input[Union['ApUsbConfigArgs', 'ApUsbConfigArgsDict']]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            x: Optional[pulumi.Input[_builtins.float]] = None,
            y: Optional[pulumi.Input[_builtins.float]] = None) -> 'Ap':
        """
        Get an existing Ap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApAeroscoutArgs', 'ApAeroscoutArgsDict']] aeroscout: Aeroscout AP settings
        :param pulumi.Input[Union['ApBleConfigArgs', 'ApBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[_builtins.bool] disable_eth1: Whether to disable eth1 port
        :param pulumi.Input[_builtins.bool] disable_eth2: Whether to disable eth2 port
        :param pulumi.Input[_builtins.bool] disable_eth3: Whether to disable eth3 port
        :param pulumi.Input[_builtins.bool] disable_module: Whether to disable module port
        :param pulumi.Input[_builtins.bool] flow_control: For some AP models, flow_control can be enabled to address some switch compatibility issue
        :param pulumi.Input[_builtins.float] height: Height, in meters, optional
        :param pulumi.Input[Union['ApIpConfigArgs', 'ApIpConfigArgsDict']] ip_config: IP AP settings
        :param pulumi.Input[Union['ApLedArgs', 'ApLedArgsDict']] led: LED AP settings
        :param pulumi.Input[_builtins.bool] locked: Whether this map is considered locked down
        :param pulumi.Input[_builtins.str] mac: Device MAC address
        :param pulumi.Input[_builtins.str] map_id: Map where the device belongs to
        :param pulumi.Input[Union['ApMeshArgs', 'ApMeshArgsDict']] mesh: Mesh AP settings
        :param pulumi.Input[_builtins.str] model: Device Model
        :param pulumi.Input[_builtins.str] notes: Any notes about this AP
        :param pulumi.Input[_builtins.int] orientation: Orientation, 0-359, in degrees, up is 0, right is 90.
        :param pulumi.Input[_builtins.bool] poe_passthrough: Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['ApPortConfigArgs', 'ApPortConfigArgsDict']]]] port_config: eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
               precedence over switch_config (deprecated)
        :param pulumi.Input[Union['ApPwrConfigArgs', 'ApPwrConfigArgsDict']] pwr_config: Power related configs
        :param pulumi.Input[Union['ApRadioConfigArgs', 'ApRadioConfigArgsDict']] radio_config: Radio AP settings
        :param pulumi.Input[_builtins.str] serial: Device Serial
        :param pulumi.Input[_builtins.str] type: Device Type. enum: `ap`
        :param pulumi.Input[Union['ApUplinkPortConfigArgs', 'ApUplinkPortConfigArgsDict']] uplink_port_config: AP Uplink port configuration
        :param pulumi.Input[Union['ApUsbConfigArgs', 'ApUsbConfigArgsDict']] usb_config: USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
               moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] vars: Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[_builtins.float] x: X in pixel
        :param pulumi.Input[_builtins.float] y: Y in pixel
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApState.__new__(_ApState)

        __props__.__dict__["aeroscout"] = aeroscout
        __props__.__dict__["ble_config"] = ble_config
        __props__.__dict__["centrak"] = centrak
        __props__.__dict__["client_bridge"] = client_bridge
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["disable_eth1"] = disable_eth1
        __props__.__dict__["disable_eth2"] = disable_eth2
        __props__.__dict__["disable_eth3"] = disable_eth3
        __props__.__dict__["disable_module"] = disable_module
        __props__.__dict__["esl_config"] = esl_config
        __props__.__dict__["flow_control"] = flow_control
        __props__.__dict__["height"] = height
        __props__.__dict__["image1_url"] = image1_url
        __props__.__dict__["image2_url"] = image2_url
        __props__.__dict__["image3_url"] = image3_url
        __props__.__dict__["ip_config"] = ip_config
        __props__.__dict__["lacp_config"] = lacp_config
        __props__.__dict__["led"] = led
        __props__.__dict__["locked"] = locked
        __props__.__dict__["mac"] = mac
        __props__.__dict__["map_id"] = map_id
        __props__.__dict__["mesh"] = mesh
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["notes"] = notes
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["orientation"] = orientation
        __props__.__dict__["poe_passthrough"] = poe_passthrough
        __props__.__dict__["port_config"] = port_config
        __props__.__dict__["pwr_config"] = pwr_config
        __props__.__dict__["radio_config"] = radio_config
        __props__.__dict__["serial"] = serial
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["type"] = type
        __props__.__dict__["uplink_port_config"] = uplink_port_config
        __props__.__dict__["usb_config"] = usb_config
        __props__.__dict__["vars"] = vars
        __props__.__dict__["x"] = x
        __props__.__dict__["y"] = y
        return Ap(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def aeroscout(self) -> pulumi.Output[Optional['outputs.ApAeroscout']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @_builtins.property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> pulumi.Output[Optional['outputs.ApBleConfig']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @_builtins.property
    @pulumi.getter
    def centrak(self) -> pulumi.Output[Optional['outputs.ApCentrak']]:
        return pulumi.get(self, "centrak")

    @_builtins.property
    @pulumi.getter(name="clientBridge")
    def client_bridge(self) -> pulumi.Output[Optional['outputs.ApClientBridge']]:
        return pulumi.get(self, "client_bridge")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @_builtins.property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @_builtins.property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @_builtins.property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @_builtins.property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> pulumi.Output[Optional['outputs.ApEslConfig']]:
        return pulumi.get(self, "esl_config")

    @_builtins.property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> pulumi.Output[_builtins.bool]:
        """
        For some AP models, flow_control can be enabled to address some switch compatibility issue
        """
        return pulumi.get(self, "flow_control")

    @_builtins.property
    @pulumi.getter
    def height(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Height, in meters, optional
        """
        return pulumi.get(self, "height")

    @_builtins.property
    @pulumi.getter(name="image1Url")
    def image1_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "image1_url")

    @_builtins.property
    @pulumi.getter(name="image2Url")
    def image2_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "image2_url")

    @_builtins.property
    @pulumi.getter(name="image3Url")
    def image3_url(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "image3_url")

    @_builtins.property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> pulumi.Output[Optional['outputs.ApIpConfig']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @_builtins.property
    @pulumi.getter(name="lacpConfig")
    def lacp_config(self) -> pulumi.Output[Optional['outputs.ApLacpConfig']]:
        return pulumi.get(self, "lacp_config")

    @_builtins.property
    @pulumi.getter
    def led(self) -> pulumi.Output[Optional['outputs.ApLed']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @_builtins.property
    @pulumi.getter
    def locked(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether this map is considered locked down
        """
        return pulumi.get(self, "locked")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> pulumi.Output[_builtins.str]:
        """
        Device MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter(name="mapId")
    def map_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Map where the device belongs to
        """
        return pulumi.get(self, "map_id")

    @_builtins.property
    @pulumi.getter
    def mesh(self) -> pulumi.Output[Optional['outputs.ApMesh']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @_builtins.property
    @pulumi.getter
    def model(self) -> pulumi.Output[_builtins.str]:
        """
        Device Model
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Any notes about this AP
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "ntp_servers")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter
    def orientation(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Orientation, 0-359, in degrees, up is 0, right is 90.
        """
        return pulumi.get(self, "orientation")

    @_builtins.property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> pulumi.Output[_builtins.bool]:
        """
        Whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @_builtins.property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.ApPortConfig']]]:
        """
        eth0 is not allowed here. Property key is the interface(s) name (e.g. `eth1` or `eth1,eth2`). If specified, this takes
        precedence over switch_config (deprecated)
        """
        return pulumi.get(self, "port_config")

    @_builtins.property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> pulumi.Output[Optional['outputs.ApPwrConfig']]:
        """
        Power related configs
        """
        return pulumi.get(self, "pwr_config")

    @_builtins.property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> pulumi.Output[Optional['outputs.ApRadioConfig']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> pulumi.Output[_builtins.str]:
        """
        Device Serial
        """
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Device Type. enum: `ap`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> pulumi.Output[Optional['outputs.ApUplinkPortConfig']]:
        """
        AP Uplink port configuration
        """
        return pulumi.get(self, "uplink_port_config")

    @_builtins.property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> pulumi.Output[Optional['outputs.ApUsbConfig']]:
        """
        USB AP settings - Note: if native imagotag is enabled, BLE will be disabled automatically - Note: legacy, new config
        moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @_builtins.property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @_builtins.property
    @pulumi.getter
    def x(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        X in pixel
        """
        return pulumi.get(self, "x")

    @_builtins.property
    @pulumi.getter
    def y(self) -> pulumi.Output[Optional[_builtins.float]]:
        """
        Y in pixel
        """
        return pulumi.get(self, "y")

