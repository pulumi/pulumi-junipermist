# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetVersionsResult',
    'AwaitableGetVersionsResult',
    'get_versions',
    'get_versions_output',
]

@pulumi.output_type
class GetVersionsResult:
    """
    A collection of values returned by getVersions.
    """
    def __init__(__self__, device_versions=None, id=None, model=None, org_id=None, type=None):
        if device_versions and not isinstance(device_versions, list):
            raise TypeError("Expected argument 'device_versions' to be a list")
        pulumi.set(__self__, "device_versions", device_versions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deviceVersions")
    def device_versions(self) -> Sequence['outputs.GetVersionsDeviceVersionResult']:
        return pulumi.get(self, "device_versions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        enum: `ap`, `gateway`, `switch`
        """
        return pulumi.get(self, "type")


class AwaitableGetVersionsResult(GetVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVersionsResult(
            device_versions=self.device_versions,
            id=self.id,
            model=self.model,
            org_id=self.org_id,
            type=self.type)


def get_versions(model: Optional[str] = None,
                 org_id: Optional[str] = None,
                 type: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVersionsResult:
    """
    This data source provides the list of available Firmware Versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    ap24_versions = junipermist.device.get_versions(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        type="ap",
        model="AP24")
    ```


    :param str model: Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
    :param str type: enum: `ap`, `gateway`, `switch`
    """
    __args__ = dict()
    __args__['model'] = model
    __args__['orgId'] = org_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('junipermist:device/getVersions:getVersions', __args__, opts=opts, typ=GetVersionsResult).value

    return AwaitableGetVersionsResult(
        device_versions=pulumi.get(__ret__, 'device_versions'),
        id=pulumi.get(__ret__, 'id'),
        model=pulumi.get(__ret__, 'model'),
        org_id=pulumi.get(__ret__, 'org_id'),
        type=pulumi.get(__ret__, 'type'))
def get_versions_output(model: Optional[pulumi.Input[str]] = None,
                        org_id: Optional[pulumi.Input[str]] = None,
                        type: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVersionsResult]:
    """
    This data source provides the list of available Firmware Versions.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    ap24_versions = junipermist.device.get_versions(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        type="ap",
        model="AP24")
    ```


    :param str model: Fetch version for device model, use/combine with `type` as needed (for switch and gateway devices)
    :param str type: enum: `ap`, `gateway`, `switch`
    """
    __args__ = dict()
    __args__['model'] = model
    __args__['orgId'] = org_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('junipermist:device/getVersions:getVersions', __args__, opts=opts, typ=GetVersionsResult)
    return __ret__.apply(lambda __response__: GetVersionsResult(
        device_versions=pulumi.get(__response__, 'device_versions'),
        id=pulumi.get(__response__, 'id'),
        model=pulumi.get(__response__, 'model'),
        org_id=pulumi.get(__response__, 'org_id'),
        type=pulumi.get(__response__, 'type')))
