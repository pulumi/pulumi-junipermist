# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 api_timeout: Optional[pulumi.Input[float]] = None,
                 apitoken: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[float] api_timeout: Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
               results in infinite timeout.
        :param pulumi.Input[str] apitoken: For API Token authentication, the Mist API Token.
        :param pulumi.Input[str] host: URL of the Mist Cloud, e.g. `api.mist.com`.
        :param pulumi.Input[str] password: For username/password authentication, the Mist Account password.
        :param pulumi.Input[str] proxy: Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
               `[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
               are supported.
        :param pulumi.Input[str] username: For username/password authentication, the Mist Account username.
        """
        if api_timeout is not None:
            pulumi.set(__self__, "api_timeout", api_timeout)
        if apitoken is not None:
            pulumi.set(__self__, "apitoken", apitoken)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="apiTimeout")
    def api_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
        results in infinite timeout.
        """
        return pulumi.get(self, "api_timeout")

    @api_timeout.setter
    def api_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "api_timeout", value)

    @property
    @pulumi.getter
    def apitoken(self) -> Optional[pulumi.Input[str]]:
        """
        For API Token authentication, the Mist API Token.
        """
        return pulumi.get(self, "apitoken")

    @apitoken.setter
    def apitoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apitoken", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the Mist Cloud, e.g. `api.mist.com`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        For username/password authentication, the Mist Account password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
        `[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
        are supported.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        For username/password authentication, the Mist Account username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_timeout: Optional[pulumi.Input[float]] = None,
                 apitoken: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the mist package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] api_timeout: Timeout in seconds for completing API transactions with the Mist Cloud. Omit for default value of 10 seconds. Value of 0
               results in infinite timeout.
        :param pulumi.Input[str] apitoken: For API Token authentication, the Mist API Token.
        :param pulumi.Input[str] host: URL of the Mist Cloud, e.g. `api.mist.com`.
        :param pulumi.Input[str] password: For username/password authentication, the Mist Account password.
        :param pulumi.Input[str] proxy: Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
               `[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
               are supported.
        :param pulumi.Input[str] username: For username/password authentication, the Mist Account username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the mist package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_timeout: Optional[pulumi.Input[float]] = None,
                 apitoken: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["api_timeout"] = pulumi.Output.from_input(api_timeout).apply(pulumi.runtime.to_json) if api_timeout is not None else None
            __props__.__dict__["apitoken"] = None if apitoken is None else pulumi.Output.secret(apitoken)
            __props__.__dict__["host"] = host
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apitoken", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'junipermist',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def apitoken(self) -> pulumi.Output[Optional[str]]:
        """
        For API Token authentication, the Mist API Token.
        """
        return pulumi.get(self, "apitoken")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        URL of the Mist Cloud, e.g. `api.mist.com`.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        For username/password authentication, the Mist Account password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[Optional[str]]:
        """
        Requests use the configured proxy to reach the Mist Cloud. The value may be either a complete URL or a
        `[username:password@]host[:port]`, in which case the `http` scheme is assumed. The schemes `http`, `https`, and `socks5`
        are supported.
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        For username/password authentication, the Mist Account username.
        """
        return pulumi.get(self, "username")

