# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetConstAlarmsConstAlarmResult',
    'GetConstAppCategoriesConstAppCategoryResult',
    'GetConstAppCategoriesConstAppCategoryFiltersResult',
    'GetConstAppSubCategoriesConstAppSubCategoryResult',
    'GetConstApplicationsConstApplicationResult',
    'GetConstCountriesConstCountryResult',
    'GetConstTrafficTypesConstTrafficTypeResult',
    'GetSitesSiteResult',
    'GetSitesSiteLatlngResult',
]

@pulumi.output_type
class GetConstAlarmsConstAlarmResult(dict):
    def __init__(__self__, *,
                 display: str,
                 group: str,
                 key: str,
                 severity: str):
        """
        :param str display: Description of the alarm type
        :param str group: Group to which the alarm belongs
        :param str key: Key name of the alarm type
        :param str severity: Severity of the alarm
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Description of the alarm type
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        Group to which the alarm belongs
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key name of the alarm type
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        Severity of the alarm
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetConstAppCategoriesConstAppCategoryResult(dict):
    def __init__(__self__, *,
                 display: str,
                 filters: 'outputs.GetConstAppCategoriesConstAppCategoryFiltersResult',
                 includes: Sequence[str],
                 key: str):
        """
        :param str display: Description of the app category
        :param Sequence[str] includes: List of other App Categories contained by this one
        :param str key: Key name of the app category
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "includes", includes)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Description of the app category
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def filters(self) -> 'outputs.GetConstAppCategoriesConstAppCategoryFiltersResult':
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def includes(self) -> Sequence[str]:
        """
        List of other App Categories contained by this one
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key name of the app category
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetConstAppCategoriesConstAppCategoryFiltersResult(dict):
    def __init__(__self__, *,
                 srxes: Sequence[str],
                 ssrs: Sequence[str]):
        pulumi.set(__self__, "srxes", srxes)
        pulumi.set(__self__, "ssrs", ssrs)

    @property
    @pulumi.getter
    def srxes(self) -> Sequence[str]:
        return pulumi.get(self, "srxes")

    @property
    @pulumi.getter
    def ssrs(self) -> Sequence[str]:
        return pulumi.get(self, "ssrs")


@pulumi.output_type
class GetConstAppSubCategoriesConstAppSubCategoryResult(dict):
    def __init__(__self__, *,
                 display: str,
                 key: str,
                 traffic_type: str):
        """
        :param str display: Description of the app subcategory
        :param str key: Key name of the app subcategory
        :param str traffic_type: Type of traffic (QoS) of the app subcategory
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "traffic_type", traffic_type)

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Description of the app subcategory
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key name of the app subcategory
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> str:
        """
        Type of traffic (QoS) of the app subcategory
        """
        return pulumi.get(self, "traffic_type")


@pulumi.output_type
class GetConstApplicationsConstApplicationResult(dict):
    def __init__(__self__, *,
                 app_id: bool,
                 app_image_url: str,
                 app_probe: bool,
                 category: str,
                 group: str,
                 key: str,
                 name: str,
                 signature_based: bool,
                 ssr_app_id: bool):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_image_url", app_image_url)
        pulumi.set(__self__, "app_probe", app_probe)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "signature_based", signature_based)
        pulumi.set(__self__, "ssr_app_id", ssr_app_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> bool:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appImageUrl")
    def app_image_url(self) -> str:
        return pulumi.get(self, "app_image_url")

    @property
    @pulumi.getter(name="appProbe")
    def app_probe(self) -> bool:
        return pulumi.get(self, "app_probe")

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="signatureBased")
    def signature_based(self) -> bool:
        return pulumi.get(self, "signature_based")

    @property
    @pulumi.getter(name="ssrAppId")
    def ssr_app_id(self) -> bool:
        return pulumi.get(self, "ssr_app_id")


@pulumi.output_type
class GetConstCountriesConstCountryResult(dict):
    def __init__(__self__, *,
                 alpha2: str,
                 certified: bool,
                 name: str,
                 numeric: float):
        """
        :param str alpha2: country code, in two-character
        :param float numeric: country code, ISO 3166-1 numeric
        """
        pulumi.set(__self__, "alpha2", alpha2)
        pulumi.set(__self__, "certified", certified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "numeric", numeric)

    @property
    @pulumi.getter
    def alpha2(self) -> str:
        """
        country code, in two-character
        """
        return pulumi.get(self, "alpha2")

    @property
    @pulumi.getter
    def certified(self) -> bool:
        return pulumi.get(self, "certified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def numeric(self) -> float:
        """
        country code, ISO 3166-1 numeric
        """
        return pulumi.get(self, "numeric")


@pulumi.output_type
class GetConstTrafficTypesConstTrafficTypeResult(dict):
    def __init__(__self__, *,
                 display: str,
                 dscp: int,
                 failover_policy: str,
                 max_jitter: int,
                 max_latency: int,
                 max_loss: int,
                 name: str,
                 traffic_class: str):
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "failover_policy", failover_policy)
        pulumi.set(__self__, "max_jitter", max_jitter)
        pulumi.set(__self__, "max_latency", max_latency)
        pulumi.set(__self__, "max_loss", max_loss)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "traffic_class", traffic_class)

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def dscp(self) -> int:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="failoverPolicy")
    def failover_policy(self) -> str:
        return pulumi.get(self, "failover_policy")

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> int:
        return pulumi.get(self, "max_jitter")

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> int:
        return pulumi.get(self, "max_latency")

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> int:
        return pulumi.get(self, "max_loss")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> str:
        return pulumi.get(self, "traffic_class")


@pulumi.output_type
class GetSitesSiteResult(dict):
    def __init__(__self__, *,
                 address: str,
                 alarmtemplate_id: str,
                 aptemplate_id: str,
                 country_code: str,
                 created_time: float,
                 gatewaytemplate_id: str,
                 id: str,
                 latlng: 'outputs.GetSitesSiteLatlngResult',
                 modified_time: float,
                 name: str,
                 networktemplate_id: str,
                 notes: str,
                 org_id: str,
                 rftemplate_id: str,
                 secpolicy_id: str,
                 sitegroup_ids: Sequence[str],
                 sitetemplate_id: str,
                 timezone: str):
        """
        :param str address: full address of the site
        :param str alarmtemplate_id: Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id
        :param str aptemplate_id: AP Template ID, used by APs
        :param str country_code: country code for the site (for AP config generation), in two-character
        :param str gatewaytemplate_id: Gateway Template ID, used by gateways
        :param str networktemplate_id: Network Template ID, this takes precedence over Site Settings
        :param str notes: optional, any notes about the site
        :param str rftemplate_id: RF Template ID, this takes precedence over Site Settings
        :param str secpolicy_id: SecPolicy ID
        :param Sequence[str] sitegroup_ids: sitegroups this site belongs to
        :param str sitetemplate_id: Site Template ID
        :param str timezone: Timezone the site is at
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "alarmtemplate_id", alarmtemplate_id)
        pulumi.set(__self__, "aptemplate_id", aptemplate_id)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "gatewaytemplate_id", gatewaytemplate_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latlng", latlng)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networktemplate_id", networktemplate_id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "rftemplate_id", rftemplate_id)
        pulumi.set(__self__, "secpolicy_id", secpolicy_id)
        pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        pulumi.set(__self__, "sitetemplate_id", sitetemplate_id)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        full address of the site
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="alarmtemplateId")
    def alarmtemplate_id(self) -> str:
        """
        Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id
        """
        return pulumi.get(self, "alarmtemplate_id")

    @property
    @pulumi.getter(name="aptemplateId")
    def aptemplate_id(self) -> str:
        """
        AP Template ID, used by APs
        """
        return pulumi.get(self, "aptemplate_id")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        """
        country code for the site (for AP config generation), in two-character
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="gatewaytemplateId")
    def gatewaytemplate_id(self) -> str:
        """
        Gateway Template ID, used by gateways
        """
        return pulumi.get(self, "gatewaytemplate_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latlng(self) -> 'outputs.GetSitesSiteLatlngResult':
        return pulumi.get(self, "latlng")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networktemplateId")
    def networktemplate_id(self) -> str:
        """
        Network Template ID, this takes precedence over Site Settings
        """
        return pulumi.get(self, "networktemplate_id")

    @property
    @pulumi.getter
    def notes(self) -> str:
        """
        optional, any notes about the site
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="rftemplateId")
    def rftemplate_id(self) -> str:
        """
        RF Template ID, this takes precedence over Site Settings
        """
        return pulumi.get(self, "rftemplate_id")

    @property
    @pulumi.getter(name="secpolicyId")
    def secpolicy_id(self) -> str:
        """
        SecPolicy ID
        """
        return pulumi.get(self, "secpolicy_id")

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Sequence[str]:
        """
        sitegroups this site belongs to
        """
        return pulumi.get(self, "sitegroup_ids")

    @property
    @pulumi.getter(name="sitetemplateId")
    def sitetemplate_id(self) -> str:
        """
        Site Template ID
        """
        return pulumi.get(self, "sitetemplate_id")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        """
        Timezone the site is at
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetSitesSiteLatlngResult(dict):
    def __init__(__self__, *,
                 lat: float,
                 lng: float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> float:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        return pulumi.get(self, "lng")


