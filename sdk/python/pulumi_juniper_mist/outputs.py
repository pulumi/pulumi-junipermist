# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'UpgradeDeviceFwupdate',
    'GetConstAlarmsConstAlarmResult',
    'GetConstAppCategoriesConstAppCategoryResult',
    'GetConstAppCategoriesConstAppCategoryFiltersResult',
    'GetConstAppSubCategoriesConstAppSubCategoryResult',
    'GetConstApplicationsConstApplicationResult',
    'GetConstCountriesConstCountryResult',
    'GetConstTrafficTypesConstTrafficTypeResult',
    'GetConstWebhooksConstWebhookResult',
    'GetSitesSiteResult',
    'GetSitesSiteLatlngResult',
]

@pulumi.output_type
class UpgradeDeviceFwupdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusId":
            suggest = "status_id"
        elif key == "willRetry":
            suggest = "will_retry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpgradeDeviceFwupdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpgradeDeviceFwupdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpgradeDeviceFwupdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 progress: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None,
                 status_id: Optional[_builtins.int] = None,
                 timestamp: Optional[_builtins.float] = None,
                 will_retry: Optional[_builtins.bool] = None):
        """
        :param _builtins.str status: enum: `inprogress`, `failed`, `upgraded`
        :param _builtins.float timestamp: Epoch (seconds)
        """
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_id is not None:
            pulumi.set(__self__, "status_id", status_id)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if will_retry is not None:
            pulumi.set(__self__, "will_retry", will_retry)

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        enum: `inprogress`, `failed`, `upgraded`
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusId")
    def status_id(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "status_id")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> Optional[_builtins.float]:
        """
        Epoch (seconds)
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter(name="willRetry")
    def will_retry(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "will_retry")


@pulumi.output_type
class GetConstAlarmsConstAlarmResult(dict):
    def __init__(__self__, *,
                 display: _builtins.str,
                 group: _builtins.str,
                 key: _builtins.str,
                 severity: _builtins.str):
        """
        :param _builtins.str display: Description of the alarm type
        :param _builtins.str group: Group to which the alarm belongs
        :param _builtins.str key: Key name of the alarm type
        :param _builtins.str severity: Severity of the alarm
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        """
        Description of the alarm type
        """
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Group to which the alarm belongs
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key name of the alarm type
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Severity of the alarm
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetConstAppCategoriesConstAppCategoryResult(dict):
    def __init__(__self__, *,
                 display: _builtins.str,
                 filters: 'outputs.GetConstAppCategoriesConstAppCategoryFiltersResult',
                 includes: Sequence[_builtins.str],
                 key: _builtins.str):
        """
        :param _builtins.str display: Description of the app category
        :param Sequence[_builtins.str] includes: List of other App Categories contained by this one
        :param _builtins.str key: Key name of the app category
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "includes", includes)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        """
        Description of the app category
        """
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> 'outputs.GetConstAppCategoriesConstAppCategoryFiltersResult':
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def includes(self) -> Sequence[_builtins.str]:
        """
        List of other App Categories contained by this one
        """
        return pulumi.get(self, "includes")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key name of the app category
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetConstAppCategoriesConstAppCategoryFiltersResult(dict):
    def __init__(__self__, *,
                 srxes: Sequence[_builtins.str],
                 ssrs: Sequence[_builtins.str]):
        pulumi.set(__self__, "srxes", srxes)
        pulumi.set(__self__, "ssrs", ssrs)

    @_builtins.property
    @pulumi.getter
    def srxes(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "srxes")

    @_builtins.property
    @pulumi.getter
    def ssrs(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "ssrs")


@pulumi.output_type
class GetConstAppSubCategoriesConstAppSubCategoryResult(dict):
    def __init__(__self__, *,
                 display: _builtins.str,
                 key: _builtins.str,
                 traffic_type: _builtins.str):
        """
        :param _builtins.str display: Description of the app subcategory
        :param _builtins.str key: Key name of the app subcategory
        :param _builtins.str traffic_type: Type of traffic (QoS) of the app subcategory
        """
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        """
        Description of the app subcategory
        """
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Key name of the app subcategory
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> _builtins.str:
        """
        Type of traffic (QoS) of the app subcategory
        """
        return pulumi.get(self, "traffic_type")


@pulumi.output_type
class GetConstApplicationsConstApplicationResult(dict):
    def __init__(__self__, *,
                 app_id: _builtins.bool,
                 app_image_url: _builtins.str,
                 app_probe: _builtins.bool,
                 category: _builtins.str,
                 group: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 signature_based: _builtins.bool,
                 ssr_app_id: _builtins.bool):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_image_url", app_image_url)
        pulumi.set(__self__, "app_probe", app_probe)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "signature_based", signature_based)
        pulumi.set(__self__, "ssr_app_id", ssr_app_id)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.bool:
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="appImageUrl")
    def app_image_url(self) -> _builtins.str:
        return pulumi.get(self, "app_image_url")

    @_builtins.property
    @pulumi.getter(name="appProbe")
    def app_probe(self) -> _builtins.bool:
        return pulumi.get(self, "app_probe")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="signatureBased")
    def signature_based(self) -> _builtins.bool:
        return pulumi.get(self, "signature_based")

    @_builtins.property
    @pulumi.getter(name="ssrAppId")
    def ssr_app_id(self) -> _builtins.bool:
        return pulumi.get(self, "ssr_app_id")


@pulumi.output_type
class GetConstCountriesConstCountryResult(dict):
    def __init__(__self__, *,
                 alpha2: _builtins.str,
                 certified: _builtins.bool,
                 name: _builtins.str,
                 numeric: _builtins.float):
        """
        :param _builtins.str alpha2: Country code, in two-character
        :param _builtins.float numeric: Country code, ISO 3166-1 numeric
        """
        pulumi.set(__self__, "alpha2", alpha2)
        pulumi.set(__self__, "certified", certified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "numeric", numeric)

    @_builtins.property
    @pulumi.getter
    def alpha2(self) -> _builtins.str:
        """
        Country code, in two-character
        """
        return pulumi.get(self, "alpha2")

    @_builtins.property
    @pulumi.getter
    def certified(self) -> _builtins.bool:
        return pulumi.get(self, "certified")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def numeric(self) -> _builtins.float:
        """
        Country code, ISO 3166-1 numeric
        """
        return pulumi.get(self, "numeric")


@pulumi.output_type
class GetConstTrafficTypesConstTrafficTypeResult(dict):
    def __init__(__self__, *,
                 display: _builtins.str,
                 dscp: _builtins.int,
                 failover_policy: _builtins.str,
                 max_jitter: _builtins.int,
                 max_latency: _builtins.int,
                 max_loss: _builtins.int,
                 name: _builtins.str,
                 traffic_class: _builtins.str):
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "failover_policy", failover_policy)
        pulumi.set(__self__, "max_jitter", max_jitter)
        pulumi.set(__self__, "max_latency", max_latency)
        pulumi.set(__self__, "max_loss", max_loss)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "traffic_class", traffic_class)

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter
    def dscp(self) -> _builtins.int:
        return pulumi.get(self, "dscp")

    @_builtins.property
    @pulumi.getter(name="failoverPolicy")
    def failover_policy(self) -> _builtins.str:
        return pulumi.get(self, "failover_policy")

    @_builtins.property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> _builtins.int:
        return pulumi.get(self, "max_jitter")

    @_builtins.property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> _builtins.int:
        return pulumi.get(self, "max_latency")

    @_builtins.property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> _builtins.int:
        return pulumi.get(self, "max_loss")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> _builtins.str:
        return pulumi.get(self, "traffic_class")


@pulumi.output_type
class GetConstWebhooksConstWebhookResult(dict):
    def __init__(__self__, *,
                 allows_single_event_per_message: _builtins.bool,
                 for_org: _builtins.bool,
                 has_delivery_results: _builtins.bool,
                 internal: _builtins.bool,
                 key: _builtins.str):
        """
        :param _builtins.bool allows_single_event_per_message: supports single event per message results
        :param _builtins.bool for_org: Can be used in org webhooks, optional
        :param _builtins.bool has_delivery_results: Supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search
        :param _builtins.bool internal: Internal topic (not selectable in site/org webhooks)
        :param _builtins.str key: Webhook topic name
        """
        pulumi.set(__self__, "allows_single_event_per_message", allows_single_event_per_message)
        pulumi.set(__self__, "for_org", for_org)
        pulumi.set(__self__, "has_delivery_results", has_delivery_results)
        pulumi.set(__self__, "internal", internal)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter(name="allowsSingleEventPerMessage")
    def allows_single_event_per_message(self) -> _builtins.bool:
        """
        supports single event per message results
        """
        return pulumi.get(self, "allows_single_event_per_message")

    @_builtins.property
    @pulumi.getter(name="forOrg")
    def for_org(self) -> _builtins.bool:
        """
        Can be used in org webhooks, optional
        """
        return pulumi.get(self, "for_org")

    @_builtins.property
    @pulumi.getter(name="hasDeliveryResults")
    def has_delivery_results(self) -> _builtins.bool:
        """
        Supports webhook delivery results /api/v1/:scope/:scope*id/webhooks/:webhook*id/events/search
        """
        return pulumi.get(self, "has_delivery_results")

    @_builtins.property
    @pulumi.getter
    def internal(self) -> _builtins.bool:
        """
        Internal topic (not selectable in site/org webhooks)
        """
        return pulumi.get(self, "internal")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Webhook topic name
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetSitesSiteResult(dict):
    def __init__(__self__, *,
                 address: _builtins.str,
                 alarmtemplate_id: _builtins.str,
                 aptemplate_id: _builtins.str,
                 country_code: _builtins.str,
                 created_time: _builtins.float,
                 gatewaytemplate_id: _builtins.str,
                 id: _builtins.str,
                 latlng: 'outputs.GetSitesSiteLatlngResult',
                 modified_time: _builtins.float,
                 name: _builtins.str,
                 networktemplate_id: _builtins.str,
                 notes: _builtins.str,
                 org_id: _builtins.str,
                 rftemplate_id: _builtins.str,
                 secpolicy_id: _builtins.str,
                 sitegroup_ids: Sequence[_builtins.str],
                 sitetemplate_id: _builtins.str,
                 timezone: _builtins.str):
        """
        :param _builtins.str address: full address of the site
        :param _builtins.str alarmtemplate_id: Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id
        :param _builtins.str aptemplate_id: AP Template ID, used by APs
        :param _builtins.str country_code: country code for the site (for AP config generation), in two-character
        :param _builtins.str gatewaytemplate_id: Gateway Template ID, used by gateways
        :param _builtins.str networktemplate_id: Network Template ID, this takes precedence over Site Settings
        :param _builtins.str notes: optional, any notes about the site
        :param _builtins.str rftemplate_id: RF Template ID, this takes precedence over Site Settings
        :param _builtins.str secpolicy_id: SecPolicy ID
        :param Sequence[_builtins.str] sitegroup_ids: sitegroups this site belongs to
        :param _builtins.str sitetemplate_id: Site Template ID
        :param _builtins.str timezone: Timezone the site is at
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "alarmtemplate_id", alarmtemplate_id)
        pulumi.set(__self__, "aptemplate_id", aptemplate_id)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "gatewaytemplate_id", gatewaytemplate_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latlng", latlng)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "networktemplate_id", networktemplate_id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "rftemplate_id", rftemplate_id)
        pulumi.set(__self__, "secpolicy_id", secpolicy_id)
        pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        pulumi.set(__self__, "sitetemplate_id", sitetemplate_id)
        pulumi.set(__self__, "timezone", timezone)

    @_builtins.property
    @pulumi.getter
    def address(self) -> _builtins.str:
        """
        full address of the site
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter(name="alarmtemplateId")
    def alarmtemplate_id(self) -> _builtins.str:
        """
        Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id
        """
        return pulumi.get(self, "alarmtemplate_id")

    @_builtins.property
    @pulumi.getter(name="aptemplateId")
    def aptemplate_id(self) -> _builtins.str:
        """
        AP Template ID, used by APs
        """
        return pulumi.get(self, "aptemplate_id")

    @_builtins.property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> _builtins.str:
        """
        country code for the site (for AP config generation), in two-character
        """
        return pulumi.get(self, "country_code")

    @_builtins.property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> _builtins.float:
        return pulumi.get(self, "created_time")

    @_builtins.property
    @pulumi.getter(name="gatewaytemplateId")
    def gatewaytemplate_id(self) -> _builtins.str:
        """
        Gateway Template ID, used by gateways
        """
        return pulumi.get(self, "gatewaytemplate_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def latlng(self) -> 'outputs.GetSitesSiteLatlngResult':
        return pulumi.get(self, "latlng")

    @_builtins.property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> _builtins.float:
        return pulumi.get(self, "modified_time")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networktemplateId")
    def networktemplate_id(self) -> _builtins.str:
        """
        Network Template ID, this takes precedence over Site Settings
        """
        return pulumi.get(self, "networktemplate_id")

    @_builtins.property
    @pulumi.getter
    def notes(self) -> _builtins.str:
        """
        optional, any notes about the site
        """
        return pulumi.get(self, "notes")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.str:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="rftemplateId")
    def rftemplate_id(self) -> _builtins.str:
        """
        RF Template ID, this takes precedence over Site Settings
        """
        return pulumi.get(self, "rftemplate_id")

    @_builtins.property
    @pulumi.getter(name="secpolicyId")
    def secpolicy_id(self) -> _builtins.str:
        """
        SecPolicy ID
        """
        return pulumi.get(self, "secpolicy_id")

    @_builtins.property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Sequence[_builtins.str]:
        """
        sitegroups this site belongs to
        """
        return pulumi.get(self, "sitegroup_ids")

    @_builtins.property
    @pulumi.getter(name="sitetemplateId")
    def sitetemplate_id(self) -> _builtins.str:
        """
        Site Template ID
        """
        return pulumi.get(self, "sitetemplate_id")

    @_builtins.property
    @pulumi.getter
    def timezone(self) -> _builtins.str:
        """
        Timezone the site is at
        """
        return pulumi.get(self, "timezone")


@pulumi.output_type
class GetSitesSiteLatlngResult(dict):
    def __init__(__self__, *,
                 lat: _builtins.float,
                 lng: _builtins.float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @_builtins.property
    @pulumi.getter
    def lat(self) -> _builtins.float:
        return pulumi.get(self, "lat")

    @_builtins.property
    @pulumi.getter
    def lng(self) -> _builtins.float:
        return pulumi.get(self, "lng")


