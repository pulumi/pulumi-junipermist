# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceprofileGatewayArgs', 'DeviceprofileGateway']

@pulumi.input_type
class DeviceprofileGatewayArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]] = None,
                 created_time: Optional[pulumi.Input[float]] = None,
                 dhcpd_config: Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']] = None,
                 dns_override: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]] = None,
                 modified_time: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]] = None,
                 ntp_override: Optional[pulumi.Input[bool]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']] = None,
                 vrf_config: Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]] = None):
        """
        The set of arguments for constructing a DeviceprofileGateway resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]] ip_configs: Property key is the network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input['DeviceprofileGatewayOobIpConfigArgs'] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]] port_config: Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]] vrf_instances: Property key is the network name
        """
        pulumi.set(__self__, "org_id", org_id)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if bgp_config is not None:
            pulumi.set(__self__, "bgp_config", bgp_config)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if dns_override is not None:
            pulumi.set(__self__, "dns_override", dns_override)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if idp_profiles is not None:
            pulumi.set(__self__, "idp_profiles", idp_profiles)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if modified_time is not None:
            pulumi.set(__self__, "modified_time", modified_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ntp_override is not None:
            pulumi.set(__self__, "ntp_override", ntp_override)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if path_preferences is not None:
            pulumi.set(__self__, "path_preferences", path_preferences)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if service_policies is not None:
            pulumi.set(__self__, "service_policies", service_policies)
        if tunnel_configs is not None:
            pulumi.set(__self__, "tunnel_configs", tunnel_configs)
        if tunnel_provider_options is not None:
            pulumi.set(__self__, "tunnel_provider_options", tunnel_provider_options)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]]:
        return pulumi.get(self, "bgp_config")

    @bgp_config.setter
    def bgp_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]]):
        pulumi.set(self, "bgp_config", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="dnsOverride")
    def dns_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dns_override")

    @dns_override.setter
    def dns_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_override", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @idp_profiles.setter
    def idp_profiles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]]):
        pulumi.set(self, "idp_profiles", value)

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "modified_time")

    @modified_time.setter
    def modified_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "modified_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ntpOverride")
    def ntp_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ntp_override")

    @ntp_override.setter
    def ntp_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ntp_override", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @path_preferences.setter
    def path_preferences(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]]):
        pulumi.set(self, "path_preferences", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]]:
        """
        Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]]):
        pulumi.set(self, "routing_policies", value)

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]]:
        return pulumi.get(self, "service_policies")

    @service_policies.setter
    def service_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]]):
        pulumi.set(self, "service_policies", value)

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @tunnel_configs.setter
    def tunnel_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]]):
        pulumi.set(self, "tunnel_configs", value)

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']]:
        return pulumi.get(self, "tunnel_provider_options")

    @tunnel_provider_options.setter
    def tunnel_provider_options(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']]):
        pulumi.set(self, "tunnel_provider_options", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)


@pulumi.input_type
class _DeviceprofileGatewayState:
    def __init__(__self__, *,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]] = None,
                 created_time: Optional[pulumi.Input[float]] = None,
                 dhcpd_config: Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']] = None,
                 dns_override: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]] = None,
                 modified_time: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]] = None,
                 ntp_override: Optional[pulumi.Input[bool]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vrf_config: Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]] = None):
        """
        Input properties used for looking up and filtering DeviceprofileGateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]] ip_configs: Property key is the network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input['DeviceprofileGatewayOobIpConfigArgs'] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]] port_config: Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[str] type: Device Type. enum: `gateway`
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]] vrf_instances: Property key is the network name
        """
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if bgp_config is not None:
            pulumi.set(__self__, "bgp_config", bgp_config)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if dhcpd_config is not None:
            pulumi.set(__self__, "dhcpd_config", dhcpd_config)
        if dns_override is not None:
            pulumi.set(__self__, "dns_override", dns_override)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if idp_profiles is not None:
            pulumi.set(__self__, "idp_profiles", idp_profiles)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if modified_time is not None:
            pulumi.set(__self__, "modified_time", modified_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ntp_override is not None:
            pulumi.set(__self__, "ntp_override", ntp_override)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if path_preferences is not None:
            pulumi.set(__self__, "path_preferences", path_preferences)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if router_id is not None:
            pulumi.set(__self__, "router_id", router_id)
        if routing_policies is not None:
            pulumi.set(__self__, "routing_policies", routing_policies)
        if service_policies is not None:
            pulumi.set(__self__, "service_policies", service_policies)
        if tunnel_configs is not None:
            pulumi.set(__self__, "tunnel_configs", tunnel_configs)
        if tunnel_provider_options is not None:
            pulumi.set(__self__, "tunnel_provider_options", tunnel_provider_options)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]]:
        return pulumi.get(self, "bgp_config")

    @bgp_config.setter
    def bgp_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigArgs']]]]):
        pulumi.set(self, "bgp_config", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']]:
        return pulumi.get(self, "dhcpd_config")

    @dhcpd_config.setter
    def dhcpd_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayDhcpdConfigArgs']]):
        pulumi.set(self, "dhcpd_config", value)

    @property
    @pulumi.getter(name="dnsOverride")
    def dns_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dns_override")

    @dns_override.setter
    def dns_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dns_override", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @idp_profiles.setter
    def idp_profiles(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIdpProfilesArgs']]]]):
        pulumi.set(self, "idp_profiles", value)

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayIpConfigsArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "modified_time")

    @modified_time.setter
    def modified_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "modified_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ntpOverride")
    def ntp_override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ntp_override")

    @ntp_override.setter
    def ntp_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ntp_override", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @path_preferences.setter
    def path_preferences(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPathPreferencesArgs']]]]):
        pulumi.set(self, "path_preferences", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]]:
        """
        Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @routing_policies.setter
    def routing_policies(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayRoutingPoliciesArgs']]]]):
        pulumi.set(self, "routing_policies", value)

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]]:
        return pulumi.get(self, "service_policies")

    @service_policies.setter
    def service_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyArgs']]]]):
        pulumi.set(self, "service_policies", value)

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @tunnel_configs.setter
    def tunnel_configs(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayTunnelConfigsArgs']]]]):
        pulumi.set(self, "tunnel_configs", value)

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']]:
        return pulumi.get(self, "tunnel_provider_options")

    @tunnel_provider_options.setter
    def tunnel_provider_options(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsArgs']]):
        pulumi.set(self, "tunnel_provider_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Device Type. enum: `gateway`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)


class DeviceprofileGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayBgpConfigArgs', 'DeviceprofileGatewayBgpConfigArgsDict']]]]] = None,
                 created_time: Optional[pulumi.Input[float]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['DeviceprofileGatewayDhcpdConfigArgs', 'DeviceprofileGatewayDhcpdConfigArgsDict']]] = None,
                 dns_override: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutesArgs', 'DeviceprofileGatewayExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutes6Args', 'DeviceprofileGatewayExtraRoutes6ArgsDict']]]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIdpProfilesArgs', 'DeviceprofileGatewayIdpProfilesArgsDict']]]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIpConfigsArgs', 'DeviceprofileGatewayIpConfigsArgsDict']]]]] = None,
                 modified_time: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayNetworkArgs', 'DeviceprofileGatewayNetworkArgsDict']]]]] = None,
                 ntp_override: Optional[pulumi.Input[bool]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['DeviceprofileGatewayOobIpConfigArgs', 'DeviceprofileGatewayOobIpConfigArgsDict']]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPathPreferencesArgs', 'DeviceprofileGatewayPathPreferencesArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPortConfigArgs', 'DeviceprofileGatewayPortConfigArgsDict']]]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayRoutingPoliciesArgs', 'DeviceprofileGatewayRoutingPoliciesArgsDict']]]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayServicePolicyArgs', 'DeviceprofileGatewayServicePolicyArgsDict']]]]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayTunnelConfigsArgs', 'DeviceprofileGatewayTunnelConfigsArgsDict']]]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input[Union['DeviceprofileGatewayTunnelProviderOptionsArgs', 'DeviceprofileGatewayTunnelProviderOptionsArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['DeviceprofileGatewayVrfConfigArgs', 'DeviceprofileGatewayVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayVrfInstancesArgs', 'DeviceprofileGatewayVrfInstancesArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource manages the Gateway Device Profiles (HUB Profiles).
        A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.

        The Gateway Devide Profile can be assigned to a gateway with the `org.DeviceprofileAssign` resource.

        ## Import

        Using `pulumi import`, import `mist_org_deviceprofile_gateway` with:

        Device Profile can be imported by specifying the org_id and the deviceprofile_id

        ```sh
        $ pulumi import junipermist:org/deviceprofileGateway:DeviceprofileGateway deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutesArgs', 'DeviceprofileGatewayExtraRoutesArgsDict']]]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutes6Args', 'DeviceprofileGatewayExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIdpProfilesArgs', 'DeviceprofileGatewayIdpProfilesArgsDict']]]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIpConfigsArgs', 'DeviceprofileGatewayIpConfigsArgsDict']]]] ip_configs: Property key is the network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Union['DeviceprofileGatewayOobIpConfigArgs', 'DeviceprofileGatewayOobIpConfigArgsDict']] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPathPreferencesArgs', 'DeviceprofileGatewayPathPreferencesArgsDict']]]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPortConfigArgs', 'DeviceprofileGatewayPortConfigArgsDict']]]] port_config: Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayRoutingPoliciesArgs', 'DeviceprofileGatewayRoutingPoliciesArgsDict']]]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayTunnelConfigsArgs', 'DeviceprofileGatewayTunnelConfigsArgsDict']]]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayVrfInstancesArgs', 'DeviceprofileGatewayVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceprofileGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Gateway Device Profiles (HUB Profiles).
        A HUB profile is a configuration profile that automates the creation of overlay networks and defines the attributes of a hub device in a network. It includes settings for wan interfaces, lan interfaces, dns servers, traffic steering preferences, application policies, and routing options. HUB profiles are used to create consistent configurations for hub devices and ensure efficient connectivity between hubs and spokes in a network.

        The Gateway Devide Profile can be assigned to a gateway with the `org.DeviceprofileAssign` resource.

        ## Import

        Using `pulumi import`, import `mist_org_deviceprofile_gateway` with:

        Device Profile can be imported by specifying the org_id and the deviceprofile_id

        ```sh
        $ pulumi import junipermist:org/deviceprofileGateway:DeviceprofileGateway deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param DeviceprofileGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceprofileGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayBgpConfigArgs', 'DeviceprofileGatewayBgpConfigArgsDict']]]]] = None,
                 created_time: Optional[pulumi.Input[float]] = None,
                 dhcpd_config: Optional[pulumi.Input[Union['DeviceprofileGatewayDhcpdConfigArgs', 'DeviceprofileGatewayDhcpdConfigArgsDict']]] = None,
                 dns_override: Optional[pulumi.Input[bool]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutesArgs', 'DeviceprofileGatewayExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutes6Args', 'DeviceprofileGatewayExtraRoutes6ArgsDict']]]]] = None,
                 idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIdpProfilesArgs', 'DeviceprofileGatewayIdpProfilesArgsDict']]]]] = None,
                 ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIpConfigsArgs', 'DeviceprofileGatewayIpConfigsArgsDict']]]]] = None,
                 modified_time: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayNetworkArgs', 'DeviceprofileGatewayNetworkArgsDict']]]]] = None,
                 ntp_override: Optional[pulumi.Input[bool]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oob_ip_config: Optional[pulumi.Input[Union['DeviceprofileGatewayOobIpConfigArgs', 'DeviceprofileGatewayOobIpConfigArgsDict']]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPathPreferencesArgs', 'DeviceprofileGatewayPathPreferencesArgsDict']]]]] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPortConfigArgs', 'DeviceprofileGatewayPortConfigArgsDict']]]]] = None,
                 router_id: Optional[pulumi.Input[str]] = None,
                 routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayRoutingPoliciesArgs', 'DeviceprofileGatewayRoutingPoliciesArgsDict']]]]] = None,
                 service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayServicePolicyArgs', 'DeviceprofileGatewayServicePolicyArgsDict']]]]] = None,
                 tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayTunnelConfigsArgs', 'DeviceprofileGatewayTunnelConfigsArgsDict']]]]] = None,
                 tunnel_provider_options: Optional[pulumi.Input[Union['DeviceprofileGatewayTunnelProviderOptionsArgs', 'DeviceprofileGatewayTunnelProviderOptionsArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['DeviceprofileGatewayVrfConfigArgs', 'DeviceprofileGatewayVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayVrfInstancesArgs', 'DeviceprofileGatewayVrfInstancesArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceprofileGatewayArgs.__new__(DeviceprofileGatewayArgs)

            __props__.__dict__["additional_config_cmds"] = additional_config_cmds
            __props__.__dict__["bgp_config"] = bgp_config
            __props__.__dict__["created_time"] = created_time
            __props__.__dict__["dhcpd_config"] = dhcpd_config
            __props__.__dict__["dns_override"] = dns_override
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["dns_suffixes"] = dns_suffixes
            __props__.__dict__["extra_routes"] = extra_routes
            __props__.__dict__["extra_routes6"] = extra_routes6
            __props__.__dict__["idp_profiles"] = idp_profiles
            __props__.__dict__["ip_configs"] = ip_configs
            __props__.__dict__["modified_time"] = modified_time
            __props__.__dict__["name"] = name
            __props__.__dict__["networks"] = networks
            __props__.__dict__["ntp_override"] = ntp_override
            __props__.__dict__["ntp_servers"] = ntp_servers
            __props__.__dict__["oob_ip_config"] = oob_ip_config
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["path_preferences"] = path_preferences
            __props__.__dict__["port_config"] = port_config
            __props__.__dict__["router_id"] = router_id
            __props__.__dict__["routing_policies"] = routing_policies
            __props__.__dict__["service_policies"] = service_policies
            __props__.__dict__["tunnel_configs"] = tunnel_configs
            __props__.__dict__["tunnel_provider_options"] = tunnel_provider_options
            __props__.__dict__["vrf_config"] = vrf_config
            __props__.__dict__["vrf_instances"] = vrf_instances
            __props__.__dict__["type"] = None
        super(DeviceprofileGateway, __self__).__init__(
            'junipermist:org/deviceprofileGateway:DeviceprofileGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bgp_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayBgpConfigArgs', 'DeviceprofileGatewayBgpConfigArgsDict']]]]] = None,
            created_time: Optional[pulumi.Input[float]] = None,
            dhcpd_config: Optional[pulumi.Input[Union['DeviceprofileGatewayDhcpdConfigArgs', 'DeviceprofileGatewayDhcpdConfigArgsDict']]] = None,
            dns_override: Optional[pulumi.Input[bool]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutesArgs', 'DeviceprofileGatewayExtraRoutesArgsDict']]]]] = None,
            extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutes6Args', 'DeviceprofileGatewayExtraRoutes6ArgsDict']]]]] = None,
            idp_profiles: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIdpProfilesArgs', 'DeviceprofileGatewayIdpProfilesArgsDict']]]]] = None,
            ip_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIpConfigsArgs', 'DeviceprofileGatewayIpConfigsArgsDict']]]]] = None,
            modified_time: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayNetworkArgs', 'DeviceprofileGatewayNetworkArgsDict']]]]] = None,
            ntp_override: Optional[pulumi.Input[bool]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oob_ip_config: Optional[pulumi.Input[Union['DeviceprofileGatewayOobIpConfigArgs', 'DeviceprofileGatewayOobIpConfigArgsDict']]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            path_preferences: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPathPreferencesArgs', 'DeviceprofileGatewayPathPreferencesArgsDict']]]]] = None,
            port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPortConfigArgs', 'DeviceprofileGatewayPortConfigArgsDict']]]]] = None,
            router_id: Optional[pulumi.Input[str]] = None,
            routing_policies: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayRoutingPoliciesArgs', 'DeviceprofileGatewayRoutingPoliciesArgsDict']]]]] = None,
            service_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceprofileGatewayServicePolicyArgs', 'DeviceprofileGatewayServicePolicyArgsDict']]]]] = None,
            tunnel_configs: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayTunnelConfigsArgs', 'DeviceprofileGatewayTunnelConfigsArgsDict']]]]] = None,
            tunnel_provider_options: Optional[pulumi.Input[Union['DeviceprofileGatewayTunnelProviderOptionsArgs', 'DeviceprofileGatewayTunnelProviderOptionsArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vrf_config: Optional[pulumi.Input[Union['DeviceprofileGatewayVrfConfigArgs', 'DeviceprofileGatewayVrfConfigArgsDict']]] = None,
            vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayVrfInstancesArgs', 'DeviceprofileGatewayVrfInstancesArgsDict']]]]] = None) -> 'DeviceprofileGateway':
        """
        Get an existing DeviceprofileGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutesArgs', 'DeviceprofileGatewayExtraRoutesArgsDict']]]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayExtraRoutes6Args', 'DeviceprofileGatewayExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIdpProfilesArgs', 'DeviceprofileGatewayIdpProfilesArgsDict']]]] idp_profiles: Property key is the profile name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayIpConfigsArgs', 'DeviceprofileGatewayIpConfigsArgsDict']]]] ip_configs: Property key is the network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Union['DeviceprofileGatewayOobIpConfigArgs', 'DeviceprofileGatewayOobIpConfigArgsDict']] oob_ip_config: out-of-band (vme/em0/fxp0) IP config
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPathPreferencesArgs', 'DeviceprofileGatewayPathPreferencesArgsDict']]]] path_preferences: Property key is the path name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayPortConfigArgs', 'DeviceprofileGatewayPortConfigArgsDict']]]] port_config: Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        :param pulumi.Input[str] router_id: auto assigned if not set
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayRoutingPoliciesArgs', 'DeviceprofileGatewayRoutingPoliciesArgsDict']]]] routing_policies: Property key is the routing policy name
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayTunnelConfigsArgs', 'DeviceprofileGatewayTunnelConfigsArgsDict']]]] tunnel_configs: Property key is the tunnel name
        :param pulumi.Input[str] type: Device Type. enum: `gateway`
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['DeviceprofileGatewayVrfInstancesArgs', 'DeviceprofileGatewayVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceprofileGatewayState.__new__(_DeviceprofileGatewayState)

        __props__.__dict__["additional_config_cmds"] = additional_config_cmds
        __props__.__dict__["bgp_config"] = bgp_config
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["dhcpd_config"] = dhcpd_config
        __props__.__dict__["dns_override"] = dns_override
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["dns_suffixes"] = dns_suffixes
        __props__.__dict__["extra_routes"] = extra_routes
        __props__.__dict__["extra_routes6"] = extra_routes6
        __props__.__dict__["idp_profiles"] = idp_profiles
        __props__.__dict__["ip_configs"] = ip_configs
        __props__.__dict__["modified_time"] = modified_time
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["ntp_override"] = ntp_override
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["oob_ip_config"] = oob_ip_config
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["path_preferences"] = path_preferences
        __props__.__dict__["port_config"] = port_config
        __props__.__dict__["router_id"] = router_id
        __props__.__dict__["routing_policies"] = routing_policies
        __props__.__dict__["service_policies"] = service_policies
        __props__.__dict__["tunnel_configs"] = tunnel_configs
        __props__.__dict__["tunnel_provider_options"] = tunnel_provider_options
        __props__.__dict__["type"] = type
        __props__.__dict__["vrf_config"] = vrf_config
        __props__.__dict__["vrf_instances"] = vrf_instances
        return DeviceprofileGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @property
    @pulumi.getter(name="bgpConfig")
    def bgp_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayBgpConfig']]]:
        return pulumi.get(self, "bgp_config")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="dhcpdConfig")
    def dhcpd_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileGatewayDhcpdConfig']]:
        return pulumi.get(self, "dhcpd_config")

    @property
    @pulumi.getter(name="dnsOverride")
    def dns_override(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "dns_override")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayExtraRoutes']]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayExtraRoutes6']]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @property
    @pulumi.getter(name="idpProfiles")
    def idp_profiles(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayIdpProfiles']]]:
        """
        Property key is the profile name
        """
        return pulumi.get(self, "idp_profiles")

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayIpConfigs']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "ip_configs")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceprofileGatewayNetwork']]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="ntpOverride")
    def ntp_override(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "ntp_override")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileGatewayOobIpConfig']]:
        """
        out-of-band (vme/em0/fxp0) IP config
        """
        return pulumi.get(self, "oob_ip_config")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="pathPreferences")
    def path_preferences(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayPathPreferences']]]:
        """
        Property key is the path name
        """
        return pulumi.get(self, "path_preferences")

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayPortConfig']]]:
        """
        Property key is the port(s) name or range (e.g. "ge-0/0/0-10")
        """
        return pulumi.get(self, "port_config")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Output[Optional[str]]:
        """
        auto assigned if not set
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="routingPolicies")
    def routing_policies(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayRoutingPolicies']]]:
        """
        Property key is the routing policy name
        """
        return pulumi.get(self, "routing_policies")

    @property
    @pulumi.getter(name="servicePolicies")
    def service_policies(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceprofileGatewayServicePolicy']]]:
        return pulumi.get(self, "service_policies")

    @property
    @pulumi.getter(name="tunnelConfigs")
    def tunnel_configs(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayTunnelConfigs']]]:
        """
        Property key is the tunnel name
        """
        return pulumi.get(self, "tunnel_configs")

    @property
    @pulumi.getter(name="tunnelProviderOptions")
    def tunnel_provider_options(self) -> pulumi.Output[Optional['outputs.DeviceprofileGatewayTunnelProviderOptions']]:
        return pulumi.get(self, "tunnel_provider_options")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Device Type. enum: `gateway`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileGatewayVrfConfig']]:
        return pulumi.get(self, "vrf_config")

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.DeviceprofileGatewayVrfInstances']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

