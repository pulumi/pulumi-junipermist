# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DeviceprofileApAeroscout',
    'DeviceprofileApBleConfig',
    'DeviceprofileApEslConfig',
    'DeviceprofileApIpConfig',
    'DeviceprofileApLed',
    'DeviceprofileApMesh',
    'DeviceprofileApPwrConfig',
    'DeviceprofileApRadioConfig',
    'DeviceprofileApRadioConfigBand24',
    'DeviceprofileApRadioConfigBand5',
    'DeviceprofileApRadioConfigBand5On24Radio',
    'DeviceprofileApRadioConfigBand6',
    'DeviceprofileApUplinkPortConfig',
    'DeviceprofileApUsbConfig',
    'DeviceprofileGatewayBgpConfig',
    'DeviceprofileGatewayBgpConfigCommunity',
    'DeviceprofileGatewayBgpConfigNeighbors',
    'DeviceprofileGatewayDhcpdConfig',
    'DeviceprofileGatewayDhcpdConfigConfig',
    'DeviceprofileGatewayDhcpdConfigConfigFixedBindings',
    'DeviceprofileGatewayDhcpdConfigConfigOptions',
    'DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated',
    'DeviceprofileGatewayExtraRoutes6',
    'DeviceprofileGatewayExtraRoutes',
    'DeviceprofileGatewayIdpProfiles',
    'DeviceprofileGatewayIdpProfilesOverwrite',
    'DeviceprofileGatewayIdpProfilesOverwriteMatching',
    'DeviceprofileGatewayIpConfigs',
    'DeviceprofileGatewayNetwork',
    'DeviceprofileGatewayNetworkInternalAccess',
    'DeviceprofileGatewayNetworkInternetAccess',
    'DeviceprofileGatewayNetworkInternetAccessDestinationNat',
    'DeviceprofileGatewayNetworkInternetAccessStaticNat',
    'DeviceprofileGatewayNetworkTenants',
    'DeviceprofileGatewayNetworkVpnAccess',
    'DeviceprofileGatewayNetworkVpnAccessDestinationNat',
    'DeviceprofileGatewayNetworkVpnAccessSourceNat',
    'DeviceprofileGatewayNetworkVpnAccessStaticNat',
    'DeviceprofileGatewayOobIpConfig',
    'DeviceprofileGatewayOobIpConfigNode1',
    'DeviceprofileGatewayPathPreferences',
    'DeviceprofileGatewayPathPreferencesPath',
    'DeviceprofileGatewayPortConfig',
    'DeviceprofileGatewayPortConfigIpConfig',
    'DeviceprofileGatewayPortConfigTrafficShaping',
    'DeviceprofileGatewayPortConfigVpnPaths',
    'DeviceprofileGatewayPortConfigVpnPathsTrafficShaping',
    'DeviceprofileGatewayPortConfigWanSourceNat',
    'DeviceprofileGatewayRoutingPolicies',
    'DeviceprofileGatewayRoutingPoliciesTerm',
    'DeviceprofileGatewayRoutingPoliciesTermAction',
    'DeviceprofileGatewayRoutingPoliciesTermMatching',
    'DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists',
    'DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla',
    'DeviceprofileGatewayServicePolicy',
    'DeviceprofileGatewayServicePolicyAppqoe',
    'DeviceprofileGatewayServicePolicyEwf',
    'DeviceprofileGatewayServicePolicyIdp',
    'DeviceprofileGatewayTunnelConfigs',
    'DeviceprofileGatewayTunnelConfigsAutoProvision',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary',
    'DeviceprofileGatewayTunnelConfigsIkeProposal',
    'DeviceprofileGatewayTunnelConfigsIpsecProposal',
    'DeviceprofileGatewayTunnelConfigsPrimary',
    'DeviceprofileGatewayTunnelConfigsProbe',
    'DeviceprofileGatewayTunnelConfigsSecondary',
    'DeviceprofileGatewayTunnelProviderOptions',
    'DeviceprofileGatewayTunnelProviderOptionsJse',
    'DeviceprofileGatewayTunnelProviderOptionsZscaler',
    'DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation',
    'DeviceprofileGatewayVrfConfig',
    'DeviceprofileGatewayVrfInstances',
    'GatewaytemplateBgpConfig',
    'GatewaytemplateBgpConfigCommunity',
    'GatewaytemplateBgpConfigNeighbors',
    'GatewaytemplateDhcpdConfig',
    'GatewaytemplateDhcpdConfigConfig',
    'GatewaytemplateDhcpdConfigConfigFixedBindings',
    'GatewaytemplateDhcpdConfigConfigOptions',
    'GatewaytemplateDhcpdConfigConfigVendorEncapulated',
    'GatewaytemplateExtraRoutes6',
    'GatewaytemplateExtraRoutes',
    'GatewaytemplateIdpProfiles',
    'GatewaytemplateIdpProfilesOverwrite',
    'GatewaytemplateIdpProfilesOverwriteMatching',
    'GatewaytemplateIpConfigs',
    'GatewaytemplateNetwork',
    'GatewaytemplateNetworkInternalAccess',
    'GatewaytemplateNetworkInternetAccess',
    'GatewaytemplateNetworkInternetAccessDestinationNat',
    'GatewaytemplateNetworkInternetAccessStaticNat',
    'GatewaytemplateNetworkTenants',
    'GatewaytemplateNetworkVpnAccess',
    'GatewaytemplateNetworkVpnAccessDestinationNat',
    'GatewaytemplateNetworkVpnAccessSourceNat',
    'GatewaytemplateNetworkVpnAccessStaticNat',
    'GatewaytemplateOobIpConfig',
    'GatewaytemplateOobIpConfigNode1',
    'GatewaytemplatePathPreferences',
    'GatewaytemplatePathPreferencesPath',
    'GatewaytemplatePortConfig',
    'GatewaytemplatePortConfigIpConfig',
    'GatewaytemplatePortConfigTrafficShaping',
    'GatewaytemplatePortConfigVpnPaths',
    'GatewaytemplatePortConfigVpnPathsTrafficShaping',
    'GatewaytemplatePortConfigWanSourceNat',
    'GatewaytemplateRoutingPolicies',
    'GatewaytemplateRoutingPoliciesTerm',
    'GatewaytemplateRoutingPoliciesTermAction',
    'GatewaytemplateRoutingPoliciesTermMatching',
    'GatewaytemplateRoutingPoliciesTermMatchingRouteExists',
    'GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla',
    'GatewaytemplateServicePolicy',
    'GatewaytemplateServicePolicyAppqoe',
    'GatewaytemplateServicePolicyEwf',
    'GatewaytemplateServicePolicyIdp',
    'GatewaytemplateTunnelConfigs',
    'GatewaytemplateTunnelConfigsAutoProvision',
    'GatewaytemplateTunnelConfigsAutoProvisionLatlng',
    'GatewaytemplateTunnelConfigsAutoProvisionPrimary',
    'GatewaytemplateTunnelConfigsAutoProvisionSecondary',
    'GatewaytemplateTunnelConfigsIkeProposal',
    'GatewaytemplateTunnelConfigsIpsecProposal',
    'GatewaytemplateTunnelConfigsPrimary',
    'GatewaytemplateTunnelConfigsProbe',
    'GatewaytemplateTunnelConfigsSecondary',
    'GatewaytemplateTunnelProviderOptions',
    'GatewaytemplateTunnelProviderOptionsJse',
    'GatewaytemplateTunnelProviderOptionsZscaler',
    'GatewaytemplateTunnelProviderOptionsZscalerSubLocation',
    'GatewaytemplateVrfConfig',
    'GatewaytemplateVrfInstances',
    'IdpprofileOverwrite',
    'IdpprofileOverwriteMatching',
    'InventoryDevice',
    'NacruleMatching',
    'NacruleNotMatching',
    'NetworkInternalAccess',
    'NetworkInternetAccess',
    'NetworkInternetAccessDestinationNat',
    'NetworkInternetAccessStaticNat',
    'NetworkTenants',
    'NetworkVpnAccess',
    'NetworkVpnAccessDestinationNat',
    'NetworkVpnAccessSourceNat',
    'NetworkVpnAccessStaticNat',
    'NetworktemplateAclPolicy',
    'NetworktemplateAclPolicyAction',
    'NetworktemplateAclTags',
    'NetworktemplateAclTagsSpec',
    'NetworktemplateDhcpSnooping',
    'NetworktemplateExtraRoutes6',
    'NetworktemplateExtraRoutes6NextQualified',
    'NetworktemplateExtraRoutes',
    'NetworktemplateExtraRoutesNextQualified',
    'NetworktemplateMistNac',
    'NetworktemplateNetworks',
    'NetworktemplatePortMirroring',
    'NetworktemplatePortUsages',
    'NetworktemplatePortUsagesRule',
    'NetworktemplatePortUsagesStormControl',
    'NetworktemplateRadiusConfig',
    'NetworktemplateRadiusConfigAcctServer',
    'NetworktemplateRadiusConfigAuthServer',
    'NetworktemplateRemoteSyslog',
    'NetworktemplateRemoteSyslogArchive',
    'NetworktemplateRemoteSyslogConsole',
    'NetworktemplateRemoteSyslogConsoleContent',
    'NetworktemplateRemoteSyslogFile',
    'NetworktemplateRemoteSyslogFileArchive',
    'NetworktemplateRemoteSyslogFileContent',
    'NetworktemplateRemoteSyslogServer',
    'NetworktemplateRemoteSyslogServerContent',
    'NetworktemplateRemoteSyslogUser',
    'NetworktemplateRemoteSyslogUserContent',
    'NetworktemplateSnmpConfig',
    'NetworktemplateSnmpConfigClientList',
    'NetworktemplateSnmpConfigTrapGroup',
    'NetworktemplateSnmpConfigV2cConfig',
    'NetworktemplateSnmpConfigV3Config',
    'NetworktemplateSnmpConfigV3ConfigNotify',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilter',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterContent',
    'NetworktemplateSnmpConfigV3ConfigTargetAddress',
    'NetworktemplateSnmpConfigV3ConfigTargetParameter',
    'NetworktemplateSnmpConfigV3ConfigUsm',
    'NetworktemplateSnmpConfigV3ConfigUsmUser',
    'NetworktemplateSnmpConfigV3ConfigVacm',
    'NetworktemplateSnmpConfigV3ConfigVacmAccess',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent',
    'NetworktemplateSnmpConfigView',
    'NetworktemplateSwitchMatching',
    'NetworktemplateSwitchMatchingRule',
    'NetworktemplateSwitchMatchingRulePortConfig',
    'NetworktemplateSwitchMatchingRulePortMirroring',
    'NetworktemplateSwitchMgmt',
    'NetworktemplateSwitchMgmtProtectRe',
    'NetworktemplateSwitchMgmtProtectReCustom',
    'NetworktemplateSwitchMgmtTacacs',
    'NetworktemplateSwitchMgmtTacacsAcctServer',
    'NetworktemplateSwitchMgmtTacacsTacplusServer',
    'NetworktemplateVrfConfig',
    'NetworktemplateVrfInstances',
    'NetworktemplateVrfInstancesExtraRoutes',
    'RftemplateBand24',
    'RftemplateBand5',
    'RftemplateBand5On24Radio',
    'RftemplateBand6',
    'RftemplateModelSpecific',
    'RftemplateModelSpecificBand24',
    'RftemplateModelSpecificBand5',
    'RftemplateModelSpecificBand5On24Radio',
    'RftemplateModelSpecificBand6',
    'ServiceSpec',
    'ServicepolicyAppqoe',
    'ServicepolicyEwf',
    'ServicepolicyIdp',
    'SettingApiPolicy',
    'SettingCelona',
    'SettingCloudshark',
    'SettingCradlepoint',
    'SettingDeviceCert',
    'SettingInstaller',
    'SettingJcloud',
    'SettingJuniper',
    'SettingJuniperAccount',
    'SettingMgmt',
    'SettingMistNac',
    'SettingMistNacIdp',
    'SettingMistNacServerCert',
    'SettingMxedgeMgmt',
    'SettingPasswordPolicy',
    'SettingPcap',
    'SettingSecurity',
    'SettingSwitchMgmt',
    'SettingSyntheticTest',
    'SettingSyntheticTestVlan',
    'SettingSyntheticTestWanSpeedtest',
    'SettingVpnOptions',
    'VpnPaths',
    'WlanAcctServer',
    'WlanAirwatch',
    'WlanAppLimit',
    'WlanAppQos',
    'WlanAppQosApps',
    'WlanAppQosOther',
    'WlanAuth',
    'WlanAuthServer',
    'WlanBonjour',
    'WlanBonjourServices',
    'WlanCiscoCwa',
    'WlanCoaServer',
    'WlanDnsServerRewrite',
    'WlanDynamicPsk',
    'WlanDynamicVlan',
    'WlanHotspot20',
    'WlanInjectDhcpOption82',
    'WlanMistNac',
    'WlanPortal',
    'WlanQos',
    'WlanRadsec',
    'WlanRadsecServer',
    'WlanSchedule',
    'WlanScheduleHours',
    'WlantemplateApplies',
    'WlantemplateExceptions',
    'WxtagSpec',
    'GetDeviceprofilesApDeviceprofileResult',
    'GetDeviceprofilesGatewayDeviceprofileResult',
    'GetGatewaytemplatesOrgGatewaytemplateResult',
    'GetIdpprofilesOrgIdpprofileResult',
    'GetIdpprofilesOrgIdpprofileOverwriteResult',
    'GetIdpprofilesOrgIdpprofileOverwriteMatchingResult',
    'GetInventoryOrgInventoryResult',
    'GetNacrulesOrgNacruleResult',
    'GetNactagsOrgNactagResult',
    'GetNetworksOrgNetworkResult',
    'GetNetworktemplatesOrgNetworktemplateResult',
    'GetRftemplatesOrgRftemplateResult',
    'GetServicepoliciesOrgServicepolicyResult',
    'GetServicepoliciesOrgServicepolicyAppqoeResult',
    'GetServicepoliciesOrgServicepolicyEwfResult',
    'GetServicepoliciesOrgServicepolicyIdpResult',
    'GetServicesOrgServiceResult',
    'GetSitegroupsOrgSitegroupResult',
    'GetVpnsOrgVpnResult',
    'GetVpnsOrgVpnPathsResult',
    'GetWlantemplatesOrgWlantemplateResult',
    'GetWxtagsOrgWxtagResult',
]

@pulumi.output_type
class DeviceprofileApAeroscout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locateConnected":
            suggest = "locate_connected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApAeroscout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApAeroscout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApAeroscout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 locate_connected: Optional[bool] = None):
        """
        :param bool enabled: whether to enable aeroscout config
        :param str host: required if enabled, aeroscout server host
        :param bool locate_connected: whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if locate_connected is not None:
            pulumi.set(__self__, "locate_connected", locate_connected)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable aeroscout config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        required if enabled, aeroscout server host
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="locateConnected")
    def locate_connected(self) -> Optional[bool]:
        """
        whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        return pulumi.get(self, "locate_connected")


@pulumi.output_type
class DeviceprofileApBleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beaconEnabled":
            suggest = "beacon_enabled"
        elif key == "beaconRate":
            suggest = "beacon_rate"
        elif key == "beaconRateMode":
            suggest = "beacon_rate_mode"
        elif key == "beamDisableds":
            suggest = "beam_disableds"
        elif key == "customBlePacketEnabled":
            suggest = "custom_ble_packet_enabled"
        elif key == "customBlePacketFrame":
            suggest = "custom_ble_packet_frame"
        elif key == "customBlePacketFreqMsec":
            suggest = "custom_ble_packet_freq_msec"
        elif key == "eddystoneUidAdvPower":
            suggest = "eddystone_uid_adv_power"
        elif key == "eddystoneUidBeams":
            suggest = "eddystone_uid_beams"
        elif key == "eddystoneUidEnabled":
            suggest = "eddystone_uid_enabled"
        elif key == "eddystoneUidFreqMsec":
            suggest = "eddystone_uid_freq_msec"
        elif key == "eddystoneUidInstance":
            suggest = "eddystone_uid_instance"
        elif key == "eddystoneUidNamespace":
            suggest = "eddystone_uid_namespace"
        elif key == "eddystoneUrlAdvPower":
            suggest = "eddystone_url_adv_power"
        elif key == "eddystoneUrlBeams":
            suggest = "eddystone_url_beams"
        elif key == "eddystoneUrlEnabled":
            suggest = "eddystone_url_enabled"
        elif key == "eddystoneUrlFreqMsec":
            suggest = "eddystone_url_freq_msec"
        elif key == "eddystoneUrlUrl":
            suggest = "eddystone_url_url"
        elif key == "ibeaconAdvPower":
            suggest = "ibeacon_adv_power"
        elif key == "ibeaconBeams":
            suggest = "ibeacon_beams"
        elif key == "ibeaconEnabled":
            suggest = "ibeacon_enabled"
        elif key == "ibeaconFreqMsec":
            suggest = "ibeacon_freq_msec"
        elif key == "ibeaconMajor":
            suggest = "ibeacon_major"
        elif key == "ibeaconMinor":
            suggest = "ibeacon_minor"
        elif key == "ibeaconUuid":
            suggest = "ibeacon_uuid"
        elif key == "powerMode":
            suggest = "power_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApBleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApBleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApBleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 beacon_enabled: Optional[bool] = None,
                 beacon_rate: Optional[int] = None,
                 beacon_rate_mode: Optional[str] = None,
                 beam_disableds: Optional[Sequence[int]] = None,
                 custom_ble_packet_enabled: Optional[bool] = None,
                 custom_ble_packet_frame: Optional[str] = None,
                 custom_ble_packet_freq_msec: Optional[int] = None,
                 eddystone_uid_adv_power: Optional[int] = None,
                 eddystone_uid_beams: Optional[str] = None,
                 eddystone_uid_enabled: Optional[bool] = None,
                 eddystone_uid_freq_msec: Optional[int] = None,
                 eddystone_uid_instance: Optional[str] = None,
                 eddystone_uid_namespace: Optional[str] = None,
                 eddystone_url_adv_power: Optional[int] = None,
                 eddystone_url_beams: Optional[str] = None,
                 eddystone_url_enabled: Optional[bool] = None,
                 eddystone_url_freq_msec: Optional[int] = None,
                 eddystone_url_url: Optional[str] = None,
                 ibeacon_adv_power: Optional[int] = None,
                 ibeacon_beams: Optional[str] = None,
                 ibeacon_enabled: Optional[bool] = None,
                 ibeacon_freq_msec: Optional[int] = None,
                 ibeacon_major: Optional[int] = None,
                 ibeacon_minor: Optional[int] = None,
                 ibeacon_uuid: Optional[str] = None,
                 power: Optional[int] = None,
                 power_mode: Optional[str] = None):
        """
        :param bool beacon_enabled: whether Mist beacons is enabled
        :param int beacon_rate: required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        :param str beacon_rate_mode: enum: `custom`, `default`
        :param Sequence[int] beam_disableds: list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        :param bool custom_ble_packet_enabled: can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        :param str custom_ble_packet_frame: The custom frame to be sent out in this beacon. The frame must be a hexstring
        :param int custom_ble_packet_freq_msec: Frequency (msec) of data emitted by custom ble beacon
        :param int eddystone_uid_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool eddystone_uid_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        :param int eddystone_uid_freq_msec: Frequency (msec) of data emmit by Eddystone-UID beacon
        :param str eddystone_uid_instance: Eddystone-UID instance for the device
        :param str eddystone_uid_namespace: Eddystone-UID namespace
        :param int eddystone_url_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool eddystone_url_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        :param int eddystone_url_freq_msec: Frequency (msec) of data emit by Eddystone-UID beacon
        :param str eddystone_url_url: URL pointed by Eddystone-URL beacon
        :param int ibeacon_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param bool ibeacon_enabled: can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        :param int ibeacon_freq_msec: Frequency (msec) of data emmit for iBeacon
        :param int ibeacon_major: Major number for iBeacon
        :param int ibeacon_minor: Minor number for iBeacon
        :param str ibeacon_uuid: optional, if not specified, the same UUID as the beacon will be used
        :param int power: required if `power_mode`==`custom`
        :param str power_mode: enum: `custom`, `default`
        """
        if beacon_enabled is not None:
            pulumi.set(__self__, "beacon_enabled", beacon_enabled)
        if beacon_rate is not None:
            pulumi.set(__self__, "beacon_rate", beacon_rate)
        if beacon_rate_mode is not None:
            pulumi.set(__self__, "beacon_rate_mode", beacon_rate_mode)
        if beam_disableds is not None:
            pulumi.set(__self__, "beam_disableds", beam_disableds)
        if custom_ble_packet_enabled is not None:
            pulumi.set(__self__, "custom_ble_packet_enabled", custom_ble_packet_enabled)
        if custom_ble_packet_frame is not None:
            pulumi.set(__self__, "custom_ble_packet_frame", custom_ble_packet_frame)
        if custom_ble_packet_freq_msec is not None:
            pulumi.set(__self__, "custom_ble_packet_freq_msec", custom_ble_packet_freq_msec)
        if eddystone_uid_adv_power is not None:
            pulumi.set(__self__, "eddystone_uid_adv_power", eddystone_uid_adv_power)
        if eddystone_uid_beams is not None:
            pulumi.set(__self__, "eddystone_uid_beams", eddystone_uid_beams)
        if eddystone_uid_enabled is not None:
            pulumi.set(__self__, "eddystone_uid_enabled", eddystone_uid_enabled)
        if eddystone_uid_freq_msec is not None:
            pulumi.set(__self__, "eddystone_uid_freq_msec", eddystone_uid_freq_msec)
        if eddystone_uid_instance is not None:
            pulumi.set(__self__, "eddystone_uid_instance", eddystone_uid_instance)
        if eddystone_uid_namespace is not None:
            pulumi.set(__self__, "eddystone_uid_namespace", eddystone_uid_namespace)
        if eddystone_url_adv_power is not None:
            pulumi.set(__self__, "eddystone_url_adv_power", eddystone_url_adv_power)
        if eddystone_url_beams is not None:
            pulumi.set(__self__, "eddystone_url_beams", eddystone_url_beams)
        if eddystone_url_enabled is not None:
            pulumi.set(__self__, "eddystone_url_enabled", eddystone_url_enabled)
        if eddystone_url_freq_msec is not None:
            pulumi.set(__self__, "eddystone_url_freq_msec", eddystone_url_freq_msec)
        if eddystone_url_url is not None:
            pulumi.set(__self__, "eddystone_url_url", eddystone_url_url)
        if ibeacon_adv_power is not None:
            pulumi.set(__self__, "ibeacon_adv_power", ibeacon_adv_power)
        if ibeacon_beams is not None:
            pulumi.set(__self__, "ibeacon_beams", ibeacon_beams)
        if ibeacon_enabled is not None:
            pulumi.set(__self__, "ibeacon_enabled", ibeacon_enabled)
        if ibeacon_freq_msec is not None:
            pulumi.set(__self__, "ibeacon_freq_msec", ibeacon_freq_msec)
        if ibeacon_major is not None:
            pulumi.set(__self__, "ibeacon_major", ibeacon_major)
        if ibeacon_minor is not None:
            pulumi.set(__self__, "ibeacon_minor", ibeacon_minor)
        if ibeacon_uuid is not None:
            pulumi.set(__self__, "ibeacon_uuid", ibeacon_uuid)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)

    @property
    @pulumi.getter(name="beaconEnabled")
    def beacon_enabled(self) -> Optional[bool]:
        """
        whether Mist beacons is enabled
        """
        return pulumi.get(self, "beacon_enabled")

    @property
    @pulumi.getter(name="beaconRate")
    def beacon_rate(self) -> Optional[int]:
        """
        required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        """
        return pulumi.get(self, "beacon_rate")

    @property
    @pulumi.getter(name="beaconRateMode")
    def beacon_rate_mode(self) -> Optional[str]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "beacon_rate_mode")

    @property
    @pulumi.getter(name="beamDisableds")
    def beam_disableds(self) -> Optional[Sequence[int]]:
        """
        list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        """
        return pulumi.get(self, "beam_disableds")

    @property
    @pulumi.getter(name="customBlePacketEnabled")
    def custom_ble_packet_enabled(self) -> Optional[bool]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        """
        return pulumi.get(self, "custom_ble_packet_enabled")

    @property
    @pulumi.getter(name="customBlePacketFrame")
    def custom_ble_packet_frame(self) -> Optional[str]:
        """
        The custom frame to be sent out in this beacon. The frame must be a hexstring
        """
        return pulumi.get(self, "custom_ble_packet_frame")

    @property
    @pulumi.getter(name="customBlePacketFreqMsec")
    def custom_ble_packet_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emitted by custom ble beacon
        """
        return pulumi.get(self, "custom_ble_packet_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUidAdvPower")
    def eddystone_uid_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_uid_adv_power")

    @property
    @pulumi.getter(name="eddystoneUidBeams")
    def eddystone_uid_beams(self) -> Optional[str]:
        return pulumi.get(self, "eddystone_uid_beams")

    @property
    @pulumi.getter(name="eddystoneUidEnabled")
    def eddystone_uid_enabled(self) -> Optional[bool]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        """
        return pulumi.get(self, "eddystone_uid_enabled")

    @property
    @pulumi.getter(name="eddystoneUidFreqMsec")
    def eddystone_uid_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_uid_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUidInstance")
    def eddystone_uid_instance(self) -> Optional[str]:
        """
        Eddystone-UID instance for the device
        """
        return pulumi.get(self, "eddystone_uid_instance")

    @property
    @pulumi.getter(name="eddystoneUidNamespace")
    def eddystone_uid_namespace(self) -> Optional[str]:
        """
        Eddystone-UID namespace
        """
        return pulumi.get(self, "eddystone_uid_namespace")

    @property
    @pulumi.getter(name="eddystoneUrlAdvPower")
    def eddystone_url_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_url_adv_power")

    @property
    @pulumi.getter(name="eddystoneUrlBeams")
    def eddystone_url_beams(self) -> Optional[str]:
        return pulumi.get(self, "eddystone_url_beams")

    @property
    @pulumi.getter(name="eddystoneUrlEnabled")
    def eddystone_url_enabled(self) -> Optional[bool]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        """
        return pulumi.get(self, "eddystone_url_enabled")

    @property
    @pulumi.getter(name="eddystoneUrlFreqMsec")
    def eddystone_url_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_url_freq_msec")

    @property
    @pulumi.getter(name="eddystoneUrlUrl")
    def eddystone_url_url(self) -> Optional[str]:
        """
        URL pointed by Eddystone-URL beacon
        """
        return pulumi.get(self, "eddystone_url_url")

    @property
    @pulumi.getter(name="ibeaconAdvPower")
    def ibeacon_adv_power(self) -> Optional[int]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "ibeacon_adv_power")

    @property
    @pulumi.getter(name="ibeaconBeams")
    def ibeacon_beams(self) -> Optional[str]:
        return pulumi.get(self, "ibeacon_beams")

    @property
    @pulumi.getter(name="ibeaconEnabled")
    def ibeacon_enabled(self) -> Optional[bool]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        """
        return pulumi.get(self, "ibeacon_enabled")

    @property
    @pulumi.getter(name="ibeaconFreqMsec")
    def ibeacon_freq_msec(self) -> Optional[int]:
        """
        Frequency (msec) of data emmit for iBeacon
        """
        return pulumi.get(self, "ibeacon_freq_msec")

    @property
    @pulumi.getter(name="ibeaconMajor")
    def ibeacon_major(self) -> Optional[int]:
        """
        Major number for iBeacon
        """
        return pulumi.get(self, "ibeacon_major")

    @property
    @pulumi.getter(name="ibeaconMinor")
    def ibeacon_minor(self) -> Optional[int]:
        """
        Minor number for iBeacon
        """
        return pulumi.get(self, "ibeacon_minor")

    @property
    @pulumi.getter(name="ibeaconUuid")
    def ibeacon_uuid(self) -> Optional[str]:
        """
        optional, if not specified, the same UUID as the beacon will be used
        """
        return pulumi.get(self, "ibeacon_uuid")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        required if `power_mode`==`custom`
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[str]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "power_mode")


@pulumi.output_type
class DeviceprofileApEslConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyCert":
            suggest = "verify_cert"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApEslConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApEslConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApEslConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cacert: Optional[str] = None,
                 channel: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None,
                 verify_cert: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str cacert: Only if `type`==`imagotag` or `type`==`native`
        :param int channel: Only if `type`==`imagotag` or `type`==`native`
        :param bool enabled: usb*config is ignored if esl*config enabled
        :param str host: Only if `type`==`imagotag` or `type`==`native`
        :param int port: Only if `type`==`imagotag` or `type`==`native`
        :param str type: note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        :param bool verify_cert: Only if `type`==`imagotag` or `type`==`native`
        :param int vlan_id: Only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[str]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        usb*config is ignored if esl*config enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[bool]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "verify_cert")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        Only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class DeviceprofileApIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 ip: Optional[str] = None,
                 ip6: Optional[str] = None,
                 mtu: Optional[int] = None,
                 netmask: Optional[str] = None,
                 netmask6: Optional[str] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vlan_id: Optional[int] = None):
        """
        :param Sequence[str] dns: if `type`==`static`
        :param Sequence[str] dns_suffixes: required if `type`==`static`
        :param str gateway: required if `type`==`static`
        :param str ip: required if `type`==`static`
        :param str netmask: required if `type`==`static`
        :param str type: enum: `dhcp`, `static`
        :param str type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        :param int vlan_id: management vlan id, default is 1 (untagged)
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if netmask6 is not None:
            pulumi.set(__self__, "netmask6", netmask6)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def ip6(self) -> Optional[str]:
        return pulumi.get(self, "ip6")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def netmask6(self) -> Optional[str]:
        return pulumi.get(self, "netmask6")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        management vlan id, default is 1 (untagged)
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class DeviceprofileApLed(dict):
    def __init__(__self__, *,
                 brightness: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[int]:
        return pulumi.get(self, "brightness")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileApMesh(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 group: Optional[int] = None,
                 role: Optional[str] = None):
        """
        :param bool enabled: whether mesh is enabled on this AP
        :param int group: mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        :param str role: enum: `base`, `remote`
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether mesh is enabled on this AP
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def group(self) -> Optional[int]:
        """
        mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `base`, `remote`
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class DeviceprofileApPwrConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "preferUsbOverWifi":
            suggest = "prefer_usb_over_wifi"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApPwrConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApPwrConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApPwrConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base: Optional[int] = None,
                 prefer_usb_over_wifi: Optional[bool] = None):
        """
        :param int base: additional power to request during negotiating with PSE over PoE, in mW
        :param bool prefer_usb_over_wifi: whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        if base is not None:
            pulumi.set(__self__, "base", base)
        if prefer_usb_over_wifi is not None:
            pulumi.set(__self__, "prefer_usb_over_wifi", prefer_usb_over_wifi)

    @property
    @pulumi.getter
    def base(self) -> Optional[int]:
        """
        additional power to request during negotiating with PSE over PoE, in mW
        """
        return pulumi.get(self, "base")

    @property
    @pulumi.getter(name="preferUsbOverWifi")
    def prefer_usb_over_wifi(self) -> Optional[bool]:
        """
        whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        return pulumi.get(self, "prefer_usb_over_wifi")


@pulumi.output_type
class DeviceprofileApRadioConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain24":
            suggest = "ant_gain24"
        elif key == "antGain5":
            suggest = "ant_gain5"
        elif key == "antGain6":
            suggest = "ant_gain6"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "band24Usage":
            suggest = "band24_usage"
        elif key == "band5On24Radio":
            suggest = "band5_on24_radio"
        elif key == "indoorUse":
            suggest = "indoor_use"
        elif key == "scanningEnabled":
            suggest = "scanning_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApRadioConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApRadioConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApRadioConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain24: Optional[int] = None,
                 ant_gain5: Optional[int] = None,
                 ant_gain6: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 band24: Optional['outputs.DeviceprofileApRadioConfigBand24'] = None,
                 band24_usage: Optional[str] = None,
                 band5: Optional['outputs.DeviceprofileApRadioConfigBand5'] = None,
                 band5_on24_radio: Optional['outputs.DeviceprofileApRadioConfigBand5On24Radio'] = None,
                 band6: Optional['outputs.DeviceprofileApRadioConfigBand6'] = None,
                 indoor_use: Optional[bool] = None,
                 scanning_enabled: Optional[bool] = None):
        """
        :param int ant_gain24: antenna gain for 2.4G - for models with external antenna only
        :param int ant_gain5: antenna gain for 5G - for models with external antenna only
        :param int ant_gain6: antenna gain for 6G - for models with external antenna only
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param 'DeviceprofileApRadioConfigBand24Args' band24: Radio Band AP settings
        :param str band24_usage: enum: `24`, `5`, `6`, `auto`
        :param 'DeviceprofileApRadioConfigBand5Args' band5: Radio Band AP settings
        :param 'DeviceprofileApRadioConfigBand5On24RadioArgs' band5_on24_radio: Radio Band AP settings
        :param 'DeviceprofileApRadioConfigBand6Args' band6: Radio Band AP settings
        :param bool indoor_use: to make an outdoor operate indoor.
               for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        :param bool scanning_enabled: whether scanning radio is enabled
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain24 is not None:
            pulumi.set(__self__, "ant_gain24", ant_gain24)
        if ant_gain5 is not None:
            pulumi.set(__self__, "ant_gain5", ant_gain5)
        if ant_gain6 is not None:
            pulumi.set(__self__, "ant_gain6", ant_gain6)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if band24 is not None:
            pulumi.set(__self__, "band24", band24)
        if band24_usage is not None:
            pulumi.set(__self__, "band24_usage", band24_usage)
        if band5 is not None:
            pulumi.set(__self__, "band5", band5)
        if band5_on24_radio is not None:
            pulumi.set(__self__, "band5_on24_radio", band5_on24_radio)
        if band6 is not None:
            pulumi.set(__self__, "band6", band6)
        if indoor_use is not None:
            pulumi.set(__self__, "indoor_use", indoor_use)
        if scanning_enabled is not None:
            pulumi.set(__self__, "scanning_enabled", scanning_enabled)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain24")
    def ant_gain24(self) -> Optional[int]:
        """
        antenna gain for 2.4G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain24")

    @property
    @pulumi.getter(name="antGain5")
    def ant_gain5(self) -> Optional[int]:
        """
        antenna gain for 5G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain5")

    @property
    @pulumi.getter(name="antGain6")
    def ant_gain6(self) -> Optional[int]:
        """
        antenna gain for 6G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain6")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def band24(self) -> Optional['outputs.DeviceprofileApRadioConfigBand24']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band24")

    @property
    @pulumi.getter(name="band24Usage")
    def band24_usage(self) -> Optional[str]:
        """
        enum: `24`, `5`, `6`, `auto`
        """
        return pulumi.get(self, "band24_usage")

    @property
    @pulumi.getter
    def band5(self) -> Optional['outputs.DeviceprofileApRadioConfigBand5']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5")

    @property
    @pulumi.getter(name="band5On24Radio")
    def band5_on24_radio(self) -> Optional['outputs.DeviceprofileApRadioConfigBand5On24Radio']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5_on24_radio")

    @property
    @pulumi.getter
    def band6(self) -> Optional['outputs.DeviceprofileApRadioConfigBand6']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band6")

    @property
    @pulumi.getter(name="indoorUse")
    def indoor_use(self) -> Optional[bool]:
        """
        to make an outdoor operate indoor.
        for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        """
        return pulumi.get(self, "indoor_use")

    @property
    @pulumi.getter(name="scanningEnabled")
    def scanning_enabled(self) -> Optional[bool]:
        """
        whether scanning radio is enabled
        """
        return pulumi.get(self, "scanning_enabled")


@pulumi.output_type
class DeviceprofileApRadioConfigBand24(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApRadioConfigBand24. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApRadioConfigBand24.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApRadioConfigBand24.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class DeviceprofileApRadioConfigBand5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApRadioConfigBand5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApRadioConfigBand5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApRadioConfigBand5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class DeviceprofileApRadioConfigBand5On24Radio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApRadioConfigBand5On24Radio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApRadioConfigBand5On24Radio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApRadioConfigBand5On24Radio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class DeviceprofileApRadioConfigBand6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"
        elif key == "standardPower":
            suggest = "standard_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApRadioConfigBand6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApRadioConfigBand6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApRadioConfigBand6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channel: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None,
                 standard_power: Optional[bool] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param int channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        :param bool standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[bool]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")


@pulumi.output_type
class DeviceprofileApUplinkPortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepWlansUpIfDown":
            suggest = "keep_wlans_up_if_down"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApUplinkPortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApUplinkPortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApUplinkPortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dot1x: Optional[bool] = None,
                 keep_wlans_up_if_down: Optional[bool] = None):
        """
        :param bool dot1x: Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        :param bool keep_wlans_up_if_down: by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        if dot1x is not None:
            pulumi.set(__self__, "dot1x", dot1x)
        if keep_wlans_up_if_down is not None:
            pulumi.set(__self__, "keep_wlans_up_if_down", keep_wlans_up_if_down)

    @property
    @pulumi.getter
    def dot1x(self) -> Optional[bool]:
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        return pulumi.get(self, "dot1x")

    @property
    @pulumi.getter(name="keepWlansUpIfDown")
    def keep_wlans_up_if_down(self) -> Optional[bool]:
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        return pulumi.get(self, "keep_wlans_up_if_down")


@pulumi.output_type
class DeviceprofileApUsbConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verifyCert":
            suggest = "verify_cert"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileApUsbConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileApUsbConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileApUsbConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cacert: Optional[str] = None,
                 channel: Optional[int] = None,
                 enabled: Optional[bool] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 type: Optional[str] = None,
                 verify_cert: Optional[bool] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str cacert: only if `type`==`imagotag`
        :param int channel: only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        :param bool enabled: whether to enable any usb config
        :param str host: only if `type`==`imagotag`
        :param int port: only if `type`==`imagotag`
        :param str type: usb config type. enum: `hanshow`, `imagotag`, `solum`
        :param bool verify_cert: only if `type`==`imagotag`, whether to turn on SSL verification
        :param int vlan_id: only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[str]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "cacert")

    @property
    @pulumi.getter
    def channel(self) -> Optional[int]:
        """
        only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        """
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable any usb config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        usb config type. enum: `hanshow`, `imagotag`, `solum`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[bool]:
        """
        only if `type`==`imagotag`, whether to turn on SSL verification
        """
        return pulumi.get(self, "verify_cert")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class DeviceprofileGatewayBgpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "bfdMinimumInterval":
            suggest = "bfd_minimum_interval"
        elif key == "bfdMultiplier":
            suggest = "bfd_multiplier"
        elif key == "disableBfd":
            suggest = "disable_bfd"
        elif key == "exportPolicy":
            suggest = "export_policy"
        elif key == "extendedV4Nexthop":
            suggest = "extended_v4_nexthop"
        elif key == "gracefulRestartTime":
            suggest = "graceful_restart_time"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "import":
            suggest = "import_"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "neighborAs":
            suggest = "neighbor_as"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "vpnName":
            suggest = "vpn_name"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayBgpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayBgpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayBgpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 bfd_minimum_interval: Optional[int] = None,
                 bfd_multiplier: Optional[int] = None,
                 communities: Optional[Sequence['outputs.DeviceprofileGatewayBgpConfigCommunity']] = None,
                 disable_bfd: Optional[bool] = None,
                 export: Optional[str] = None,
                 export_policy: Optional[str] = None,
                 extended_v4_nexthop: Optional[bool] = None,
                 graceful_restart_time: Optional[int] = None,
                 hold_time: Optional[int] = None,
                 import_: Optional[str] = None,
                 import_policy: Optional[str] = None,
                 local_as: Optional[int] = None,
                 neighbor_as: Optional[int] = None,
                 neighbors: Optional[Mapping[str, 'outputs.DeviceprofileGatewayBgpConfigNeighbors']] = None,
                 networks: Optional[Sequence[str]] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 type: Optional[str] = None,
                 via: Optional[str] = None,
                 vpn_name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param int bfd_minimum_interval: when bfd_multiplier is configured alone. Default:
                 * 1000 if `type`==`external`
                 * 350 `type`==`internal`
        :param int bfd_multiplier: when bfd_minimum_interval_is_configured alone
        :param bool disable_bfd: BFD provides faster path failure detection and is enabled by default
        :param str export_policy: default export policies if no per-neighbor policies defined
        :param bool extended_v4_nexthop: by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
               for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        :param int graceful_restart_time: `0` means disable
        :param str import_policy: default import policies if no per-neighbor policies defined
        :param Mapping[str, 'DeviceprofileGatewayBgpConfigNeighborsArgs'] neighbors: if per-neighbor as is desired. Property key is the neighbor address
        :param Sequence[str] networks: if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        :param bool no_readvertise_to_overlay: by default, we'll re-advertise all learned BGP routers toward overlay
        :param str type: enum: `external`, `internal`
        :param str via: network name. enum: `lan`, `vpn`, `wan`
        :param str wan_name: if `via`==`wan`
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if disable_bfd is not None:
            pulumi.set(__self__, "disable_bfd", disable_bfd)
        if export is not None:
            pulumi.set(__self__, "export", export)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if extended_v4_nexthop is not None:
            pulumi.set(__self__, "extended_v4_nexthop", extended_v4_nexthop)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if via is not None:
            pulumi.set(__self__, "via", via)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[int]:
        """
        when bfd_multiplier is configured alone. Default:
          * 1000 if `type`==`external`
          * 350 `type`==`internal`
        """
        return pulumi.get(self, "bfd_minimum_interval")

    @property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[int]:
        """
        when bfd_minimum_interval_is_configured alone
        """
        return pulumi.get(self, "bfd_multiplier")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence['outputs.DeviceprofileGatewayBgpConfigCommunity']]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="disableBfd")
    def disable_bfd(self) -> Optional[bool]:
        """
        BFD provides faster path failure detection and is enabled by default
        """
        return pulumi.get(self, "disable_bfd")

    @property
    @pulumi.getter
    def export(self) -> Optional[str]:
        return pulumi.get(self, "export")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        """
        default export policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="extendedV4Nexthop")
    def extended_v4_nexthop(self) -> Optional[bool]:
        """
        by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
        for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        """
        return pulumi.get(self, "extended_v4_nexthop")

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[int]:
        """
        `0` means disable
        """
        return pulumi.get(self, "graceful_restart_time")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[str]:
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        """
        default import policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayBgpConfigNeighbors']]:
        """
        if per-neighbor as is desired. Property key is the neighbor address
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        by default, we'll re-advertise all learned BGP routers toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `external`, `internal`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def via(self) -> Optional[str]:
        """
        network name. enum: `lan`, `vpn`, `wan`
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        if `via`==`wan`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class DeviceprofileGatewayBgpConfigCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPreference":
            suggest = "local_preference"
        elif key == "vpnName":
            suggest = "vpn_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayBgpConfigCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayBgpConfigCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayBgpConfigCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 local_preference: Optional[int] = None,
                 vpn_name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[int]:
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")


@pulumi.output_type
class DeviceprofileGatewayBgpConfigNeighbors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportPolicy":
            suggest = "export_policy"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "multihopTtl":
            suggest = "multihop_ttl"
        elif key == "neighborAs":
            suggest = "neighbor_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayBgpConfigNeighbors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayBgpConfigNeighbors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayBgpConfigNeighbors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 export_policy: Optional[str] = None,
                 hold_time: Optional[int] = None,
                 import_policy: Optional[str] = None,
                 multihop_ttl: Optional[int] = None,
                 neighbor_as: Optional[int] = None):
        """
        :param bool disabled: If true, the BGP session to this neighbor will be administratively disabled/shutdown
        :param int multihop_ttl: assuming BGP neighbor is directly connected
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if multihop_ttl is not None:
            pulumi.set(__self__, "multihop_ttl", multihop_ttl)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        If true, the BGP session to this neighbor will be administratively disabled/shutdown
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="multihopTtl")
    def multihop_ttl(self) -> Optional[int]:
        """
        assuming BGP neighbor is directly connected
        """
        return pulumi.get(self, "multihop_ttl")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")


@pulumi.output_type
class DeviceprofileGatewayDhcpdConfig(dict):
    def __init__(__self__, *,
                 config: Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfig']] = None,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayDhcpdConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "fixedBindings":
            suggest = "fixed_bindings"
        elif key == "ipEnd":
            suggest = "ip_end"
        elif key == "ipEnd6":
            suggest = "ip_end6"
        elif key == "ipStart":
            suggest = "ip_start"
        elif key == "ipStart6":
            suggest = "ip_start6"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "serverIdOverride":
            suggest = "server_id_override"
        elif key == "vendorEncapulated":
            suggest = "vendor_encapulated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayDhcpdConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayDhcpdConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayDhcpdConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 fixed_bindings: Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigFixedBindings']] = None,
                 gateway: Optional[str] = None,
                 ip_end: Optional[str] = None,
                 ip_end6: Optional[str] = None,
                 ip_start: Optional[str] = None,
                 ip_start6: Optional[str] = None,
                 lease_time: Optional[int] = None,
                 options: Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigOptions']] = None,
                 server_id_override: Optional[bool] = None,
                 servers: Optional[Sequence[str]] = None,
                 servers6s: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vendor_encapulated: Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated']] = None):
        """
        :param Sequence[str] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param Sequence[str] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param Mapping[str, 'DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs'] fixed_bindings: Property key is the MAC Address
        :param str gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param str ip_end: if `type`==`local`
        :param str ip_end6: if `type6`==`local`
        :param str ip_start: if `type`==`local`
        :param str ip_start6: if `type6`==`local`
        :param int lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param Mapping[str, 'DeviceprofileGatewayDhcpdConfigConfigOptionsArgs'] options: Property key is the DHCP option number
        :param bool server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param Sequence[str] servers: if `type`==`relay`
        :param Sequence[str] servers6s: if `type6`==`relay`
        :param str type: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param str type6: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param Mapping[str, 'DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs'] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigFixedBindings']]:
        """
        Property key is the MAC Address
        """
        return pulumi.get(self, "fixed_bindings")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigOptions']]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[bool]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[Sequence[str]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated']]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")


@pulumi.output_type
class DeviceprofileGatewayDhcpdConfigConfigFixedBindings(dict):
    def __init__(__self__, *,
                 ip: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeviceprofileGatewayDhcpdConfigConfigOptions(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeviceprofileGatewayDhcpdConfigConfigVendorEncapulated(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeviceprofileGatewayExtraRoutes6(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class DeviceprofileGatewayExtraRoutes(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class DeviceprofileGatewayIdpProfiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseProfile":
            suggest = "base_profile"
        elif key == "orgId":
            suggest = "org_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayIdpProfiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayIdpProfiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayIdpProfiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_profile: Optional[str] = None,
                 name: Optional[str] = None,
                 org_id: Optional[str] = None,
                 overwrites: Optional[Sequence['outputs.DeviceprofileGatewayIdpProfilesOverwrite']] = None):
        """
        :param str base_profile: enum: `critical`, `standard`, `strict`
        """
        if base_profile is not None:
            pulumi.set(__self__, "base_profile", base_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if overwrites is not None:
            pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def overwrites(self) -> Optional[Sequence['outputs.DeviceprofileGatewayIdpProfilesOverwrite']]:
        return pulumi.get(self, "overwrites")


@pulumi.output_type
class DeviceprofileGatewayIdpProfilesOverwrite(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 matching: Optional['outputs.DeviceprofileGatewayIdpProfilesOverwriteMatching'] = None,
                 name: Optional[str] = None):
        """
        :param str action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.DeviceprofileGatewayIdpProfilesOverwriteMatching']:
        return pulumi.get(self, "matching")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class DeviceprofileGatewayIdpProfilesOverwriteMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attackNames":
            suggest = "attack_names"
        elif key == "dstSubnets":
            suggest = "dst_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayIdpProfilesOverwriteMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayIdpProfilesOverwriteMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayIdpProfilesOverwriteMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attack_names: Optional[Sequence[str]] = None,
                 dst_subnets: Optional[Sequence[str]] = None,
                 severities: Optional[Sequence[str]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attack_names")

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_subnets")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "severities")


@pulumi.output_type
class DeviceprofileGatewayIpConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secondaryIps":
            suggest = "secondary_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayIpConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayIpConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayIpConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 netmask: str,
                 secondary_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] secondary_ips: optional list of secondary IPs in CIDR format
        :param str type: enum: `dhcp`, `static`
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask", netmask)
        if secondary_ips is not None:
            pulumi.set(__self__, "secondary_ips", secondary_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="secondaryIps")
    def secondary_ips(self) -> Optional[Sequence[str]]:
        """
        optional list of secondary IPs in CIDR format
        """
        return pulumi.get(self, "secondary_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceprofileGatewayNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disallowMistServices":
            suggest = "disallow_mist_services"
        elif key == "internalAccess":
            suggest = "internal_access"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "routedForNetworks":
            suggest = "routed_for_networks"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnAccess":
            suggest = "vpn_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 subnet: str,
                 disallow_mist_services: Optional[bool] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 internal_access: Optional['outputs.DeviceprofileGatewayNetworkInternalAccess'] = None,
                 internet_access: Optional['outputs.DeviceprofileGatewayNetworkInternetAccess'] = None,
                 isolation: Optional[bool] = None,
                 routed_for_networks: Optional[Sequence[str]] = None,
                 subnet6: Optional[str] = None,
                 tenants: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkTenants']] = None,
                 vlan_id: Optional[str] = None,
                 vpn_access: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccess']] = None):
        """
        :param bool disallow_mist_services: whether to disallow Mist Devices in the network
        :param 'DeviceprofileGatewayNetworkInternetAccessArgs' internet_access: whether this network has direct internet access
        :param bool isolation: whether to allow clients in the network to talk to each other
        :param Sequence[str] routed_for_networks: for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        :param Mapping[str, 'DeviceprofileGatewayNetworkVpnAccessArgs'] vpn_access: Property key is the VPN name. Whether this network can be accessed from vpn
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        if disallow_mist_services is not None:
            pulumi.set(__self__, "disallow_mist_services", disallow_mist_services)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if internal_access is not None:
            pulumi.set(__self__, "internal_access", internal_access)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if routed_for_networks is not None:
            pulumi.set(__self__, "routed_for_networks", routed_for_networks)
        if subnet6 is not None:
            pulumi.set(__self__, "subnet6", subnet6)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_access is not None:
            pulumi.set(__self__, "vpn_access", vpn_access)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="disallowMistServices")
    def disallow_mist_services(self) -> Optional[bool]:
        """
        whether to disallow Mist Devices in the network
        """
        return pulumi.get(self, "disallow_mist_services")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="internalAccess")
    def internal_access(self) -> Optional['outputs.DeviceprofileGatewayNetworkInternalAccess']:
        return pulumi.get(self, "internal_access")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional['outputs.DeviceprofileGatewayNetworkInternetAccess']:
        """
        whether this network has direct internet access
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[bool]:
        """
        whether to allow clients in the network to talk to each other
        """
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="routedForNetworks")
    def routed_for_networks(self) -> Optional[Sequence[str]]:
        """
        for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        """
        return pulumi.get(self, "routed_for_networks")

    @property
    @pulumi.getter
    def subnet6(self) -> Optional[str]:
        return pulumi.get(self, "subnet6")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkTenants']]:
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccess']]:
        """
        Property key is the VPN name. Whether this network can be accessed from vpn
        """
        return pulumi.get(self, "vpn_access")


@pulumi.output_type
class DeviceprofileGatewayNetworkInternalAccess(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayNetworkInternetAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createSimpleServicePolicy":
            suggest = "create_simple_service_policy"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "staticNat":
            suggest = "static_nat"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkInternetAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkInternetAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkInternetAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_simple_service_policy: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkInternetAccessDestinationNat']] = None,
                 enabled: Optional[bool] = None,
                 restricted: Optional[bool] = None,
                 static_nat: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkInternetAccessStaticNat']] = None):
        """
        :param Mapping[str, 'DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param bool restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param Mapping[str, 'DeviceprofileGatewayNetworkInternetAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[bool]:
        return pulumi.get(self, "create_simple_service_policy")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkInternetAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def restricted(self) -> Optional[bool]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkInternetAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")


@pulumi.output_type
class DeviceprofileGatewayNetworkInternetAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkInternetAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class DeviceprofileGatewayNetworkInternetAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkInternetAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkInternetAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkInternetAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class DeviceprofileGatewayNetworkTenants(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


@pulumi.output_type
class DeviceprofileGatewayNetworkVpnAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedSubnet":
            suggest = "advertised_subnet"
        elif key == "allowPing":
            suggest = "allow_ping"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "noReadvertiseToLanBgp":
            suggest = "no_readvertise_to_lan_bgp"
        elif key == "noReadvertiseToLanOspf":
            suggest = "no_readvertise_to_lan_ospf"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "otherVrfs":
            suggest = "other_vrfs"
        elif key == "sourceNat":
            suggest = "source_nat"
        elif key == "staticNat":
            suggest = "static_nat"
        elif key == "summarizedSubnet":
            suggest = "summarized_subnet"
        elif key == "summarizedSubnetToLanBgp":
            suggest = "summarized_subnet_to_lan_bgp"
        elif key == "summarizedSubnetToLanOspf":
            suggest = "summarized_subnet_to_lan_ospf"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkVpnAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkVpnAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkVpnAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_subnet: Optional[str] = None,
                 allow_ping: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccessDestinationNat']] = None,
                 nat_pool: Optional[str] = None,
                 no_readvertise_to_lan_bgp: Optional[bool] = None,
                 no_readvertise_to_lan_ospf: Optional[bool] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 other_vrfs: Optional[Sequence[str]] = None,
                 routed: Optional[bool] = None,
                 source_nat: Optional['outputs.DeviceprofileGatewayNetworkVpnAccessSourceNat'] = None,
                 static_nat: Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccessStaticNat']] = None,
                 summarized_subnet: Optional[str] = None,
                 summarized_subnet_to_lan_bgp: Optional[str] = None,
                 summarized_subnet_to_lan_ospf: Optional[str] = None):
        """
        :param str advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param bool allow_ping: whether to allow ping from vpn into this routed network
        :param Mapping[str, 'DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param str nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param bool no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param bool no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param bool no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param Sequence[str] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param bool routed: whether this network is routable
        :param 'DeviceprofileGatewayNetworkVpnAccessSourceNatArgs' source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param Mapping[str, 'DeviceprofileGatewayNetworkVpnAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param str summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param str summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param str summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[str]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[bool]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[bool]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[bool]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[Sequence[str]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @property
    @pulumi.getter
    def routed(self) -> Optional[bool]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional['outputs.DeviceprofileGatewayNetworkVpnAccessSourceNat']:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayNetworkVpnAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[str]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[str]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[str]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")


@pulumi.output_type
class DeviceprofileGatewayNetworkVpnAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkVpnAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class DeviceprofileGatewayNetworkVpnAccessSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIp":
            suggest = "external_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkVpnAccessSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkVpnAccessSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkVpnAccessSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ip: Optional[str] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_ip")


@pulumi.output_type
class DeviceprofileGatewayNetworkVpnAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayNetworkVpnAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayNetworkVpnAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayNetworkVpnAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class DeviceprofileGatewayOobIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayOobIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayOobIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayOobIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 node1: Optional['outputs.DeviceprofileGatewayOobIpConfigNode1'] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str ip: if `type`==`static`
        :param str netmask: if `type`==`static`
        :param 'DeviceprofileGatewayOobIpConfigNode1Args' node1: for HA Cluster, node1 can have different IP Config
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if node1 is not None:
            pulumi.set(__self__, "node1", node1)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def node1(self) -> Optional['outputs.DeviceprofileGatewayOobIpConfigNode1']:
        """
        for HA Cluster, node1 can have different IP Config
        """
        return pulumi.get(self, "node1")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class DeviceprofileGatewayOobIpConfigNode1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayOobIpConfigNode1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayOobIpConfigNode1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayOobIpConfigNode1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class DeviceprofileGatewayPathPreferences(dict):
    def __init__(__self__, *,
                 paths: Optional[Sequence['outputs.DeviceprofileGatewayPathPreferencesPath']] = None,
                 strategy: Optional[str] = None):
        """
        :param str strategy: enum: `ecmp`, `ordered`, `weighted`
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence['outputs.DeviceprofileGatewayPathPreferencesPath']]:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        enum: `ecmp`, `ordered`, `weighted`
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class DeviceprofileGatewayPathPreferencesPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "targetIps":
            suggest = "target_ips"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPathPreferencesPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPathPreferencesPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPathPreferencesPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 disabled: Optional[bool] = None,
                 gateway_ip: Optional[str] = None,
                 internet_access: Optional[bool] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 target_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param bool disabled: For SSR Only. `true`, if this specific path is undesired
        :param str gateway_ip: only if `type`==`local`, if a different gateway is desired
        :param bool internet_access: only if `type`==`vpn`, if this vpn path can be used for internet
        :param str name: required when 
                 * `type`==`vpn`: the name of the VPN Path to use 
                 * `type`==`wan`: the name of the WAN interface to use'
        :param Sequence[str] networks: required when `type`==`local`
        :param Sequence[str] target_ips: if `type`==`local`, if destination IP is to be replaced
        :param str type: enum: `local`, `tunnel`, `vpn`, `wan`
        :param str wan_name: required when`type`==`tunnel`
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if target_ips is not None:
            pulumi.set(__self__, "target_ips", target_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        For SSR Only. `true`, if this specific path is undesired
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[str]:
        """
        only if `type`==`local`, if a different gateway is desired
        """
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[bool]:
        """
        only if `type`==`vpn`, if this vpn path can be used for internet
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        required when 
          * `type`==`vpn`: the name of the VPN Path to use 
          * `type`==`wan`: the name of the WAN interface to use'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        required when `type`==`local`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="targetIps")
    def target_ips(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local`, if destination IP is to be replaced
        """
        return pulumi.get(self, "target_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        required when`type`==`tunnel`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class DeviceprofileGatewayPortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dslType":
            suggest = "dsl_type"
        elif key == "dslVci":
            suggest = "dsl_vci"
        elif key == "dslVpi":
            suggest = "dsl_vpi"
        elif key == "ipConfig":
            suggest = "ip_config"
        elif key == "lteApn":
            suggest = "lte_apn"
        elif key == "lteAuth":
            suggest = "lte_auth"
        elif key == "lteBackup":
            suggest = "lte_backup"
        elif key == "ltePassword":
            suggest = "lte_password"
        elif key == "lteUsername":
            suggest = "lte_username"
        elif key == "outerVlanId":
            suggest = "outer_vlan_id"
        elif key == "poeDisabled":
            suggest = "poe_disabled"
        elif key == "portNetwork":
            suggest = "port_network"
        elif key == "preserveDscp":
            suggest = "preserve_dscp"
        elif key == "rethIdx":
            suggest = "reth_idx"
        elif key == "rethNode":
            suggest = "reth_node"
        elif key == "rethNodes":
            suggest = "reth_nodes"
        elif key == "ssrNoVirtualMac":
            suggest = "ssr_no_virtual_mac"
        elif key == "svrPortRange":
            suggest = "svr_port_range"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnPaths":
            suggest = "vpn_paths"
        elif key == "wanArpPolicer":
            suggest = "wan_arp_policer"
        elif key == "wanExtIp":
            suggest = "wan_ext_ip"
        elif key == "wanSourceNat":
            suggest = "wan_source_nat"
        elif key == "wanType":
            suggest = "wan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage: str,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 dsl_type: Optional[str] = None,
                 dsl_vci: Optional[int] = None,
                 dsl_vpi: Optional[int] = None,
                 duplex: Optional[str] = None,
                 ip_config: Optional['outputs.DeviceprofileGatewayPortConfigIpConfig'] = None,
                 lte_apn: Optional[str] = None,
                 lte_auth: Optional[str] = None,
                 lte_backup: Optional[bool] = None,
                 lte_password: Optional[str] = None,
                 lte_username: Optional[str] = None,
                 mtu: Optional[int] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 outer_vlan_id: Optional[int] = None,
                 poe_disabled: Optional[bool] = None,
                 port_network: Optional[str] = None,
                 preserve_dscp: Optional[bool] = None,
                 redundant: Optional[bool] = None,
                 reth_idx: Optional[int] = None,
                 reth_node: Optional[str] = None,
                 reth_nodes: Optional[Sequence[str]] = None,
                 speed: Optional[str] = None,
                 ssr_no_virtual_mac: Optional[bool] = None,
                 svr_port_range: Optional[str] = None,
                 traffic_shaping: Optional['outputs.DeviceprofileGatewayPortConfigTrafficShaping'] = None,
                 vlan_id: Optional[int] = None,
                 vpn_paths: Optional[Mapping[str, 'outputs.DeviceprofileGatewayPortConfigVpnPaths']] = None,
                 wan_arp_policer: Optional[str] = None,
                 wan_ext_ip: Optional[str] = None,
                 wan_source_nat: Optional['outputs.DeviceprofileGatewayPortConfigWanSourceNat'] = None,
                 wan_type: Optional[str] = None):
        """
        :param str usage: port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        :param bool disabled: port admin up (true) / down (false)
        :param str dsl_type: if `wan_type`==`lte`. enum: `adsl`, `vdsl`
        :param int dsl_vci: if `wan_type`==`dsl`
               16 bit int
        :param int dsl_vpi: if `wan_type`==`dsl`
               8 bit int
        :param str duplex: enum: `auto`, `full`, `half`
        :param 'DeviceprofileGatewayPortConfigIpConfigArgs' ip_config: Junos IP Config
        :param str lte_apn: if `wan_type`==`lte`
        :param str lte_auth: if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        :param str lte_password: if `wan_type`==`lte`
        :param str lte_username: if `wan_type`==`lte`
        :param str name: name that we'll use to derive config
        :param Sequence[str] networks: if `usage`==`lan`
        :param int outer_vlan_id: for Q-in-Q
        :param str port_network: if `usage`==`lan`
        :param bool preserve_dscp: whether to preserve dscp when sending traffic over VPN (SSR-only)
        :param bool redundant: if HA mode
        :param int reth_idx: if HA mode
        :param str reth_node: if HA mode
        :param Sequence[str] reth_nodes: SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        :param bool ssr_no_virtual_mac: when SSR is running as VM, this is required on certain hosting platforms
        :param str svr_port_range: for SSR only
        :param int vlan_id: if WAN interface is on a VLAN
        :param str wan_arp_policer: when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        :param str wan_ext_ip: optional, if spoke should reach this port by a different IP
        :param 'DeviceprofileGatewayPortConfigWanSourceNatArgs' wan_source_nat: optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        :param str wan_type: if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        pulumi.set(__self__, "usage", usage)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if dsl_vci is not None:
            pulumi.set(__self__, "dsl_vci", dsl_vci)
        if dsl_vpi is not None:
            pulumi.set(__self__, "dsl_vpi", dsl_vpi)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth is not None:
            pulumi.set(__self__, "lte_auth", lte_auth)
        if lte_backup is not None:
            pulumi.set(__self__, "lte_backup", lte_backup)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if outer_vlan_id is not None:
            pulumi.set(__self__, "outer_vlan_id", outer_vlan_id)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if preserve_dscp is not None:
            pulumi.set(__self__, "preserve_dscp", preserve_dscp)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if reth_idx is not None:
            pulumi.set(__self__, "reth_idx", reth_idx)
        if reth_node is not None:
            pulumi.set(__self__, "reth_node", reth_node)
        if reth_nodes is not None:
            pulumi.set(__self__, "reth_nodes", reth_nodes)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if ssr_no_virtual_mac is not None:
            pulumi.set(__self__, "ssr_no_virtual_mac", ssr_no_virtual_mac)
        if svr_port_range is not None:
            pulumi.set(__self__, "svr_port_range", svr_port_range)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)
        if wan_arp_policer is not None:
            pulumi.set(__self__, "wan_arp_policer", wan_arp_policer)
        if wan_ext_ip is not None:
            pulumi.set(__self__, "wan_ext_ip", wan_ext_ip)
        if wan_source_nat is not None:
            pulumi.set(__self__, "wan_source_nat", wan_source_nat)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter
    def usage(self) -> str:
        """
        port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        """
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        port admin up (true) / down (false)
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[str]:
        """
        if `wan_type`==`lte`. enum: `adsl`, `vdsl`
        """
        return pulumi.get(self, "dsl_type")

    @property
    @pulumi.getter(name="dslVci")
    def dsl_vci(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        16 bit int
        """
        return pulumi.get(self, "dsl_vci")

    @property
    @pulumi.getter(name="dslVpi")
    def dsl_vpi(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        8 bit int
        """
        return pulumi.get(self, "dsl_vpi")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional['outputs.DeviceprofileGatewayPortConfigIpConfig']:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_apn")

    @property
    @pulumi.getter(name="lteAuth")
    def lte_auth(self) -> Optional[str]:
        """
        if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "lte_auth")

    @property
    @pulumi.getter(name="lteBackup")
    def lte_backup(self) -> Optional[bool]:
        return pulumi.get(self, "lte_backup")

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_password")

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_username")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name that we'll use to derive config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="outerVlanId")
    def outer_vlan_id(self) -> Optional[int]:
        """
        for Q-in-Q
        """
        return pulumi.get(self, "outer_vlan_id")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[str]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "port_network")

    @property
    @pulumi.getter(name="preserveDscp")
    def preserve_dscp(self) -> Optional[bool]:
        """
        whether to preserve dscp when sending traffic over VPN (SSR-only)
        """
        return pulumi.get(self, "preserve_dscp")

    @property
    @pulumi.getter
    def redundant(self) -> Optional[bool]:
        """
        if HA mode
        """
        return pulumi.get(self, "redundant")

    @property
    @pulumi.getter(name="rethIdx")
    def reth_idx(self) -> Optional[int]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_idx")

    @property
    @pulumi.getter(name="rethNode")
    def reth_node(self) -> Optional[str]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_node")

    @property
    @pulumi.getter(name="rethNodes")
    def reth_nodes(self) -> Optional[Sequence[str]]:
        """
        SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        """
        return pulumi.get(self, "reth_nodes")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="ssrNoVirtualMac")
    def ssr_no_virtual_mac(self) -> Optional[bool]:
        """
        when SSR is running as VM, this is required on certain hosting platforms
        """
        return pulumi.get(self, "ssr_no_virtual_mac")

    @property
    @pulumi.getter(name="svrPortRange")
    def svr_port_range(self) -> Optional[str]:
        """
        for SSR only
        """
        return pulumi.get(self, "svr_port_range")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.DeviceprofileGatewayPortConfigTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        if WAN interface is on a VLAN
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Mapping[str, 'outputs.DeviceprofileGatewayPortConfigVpnPaths']]:
        return pulumi.get(self, "vpn_paths")

    @property
    @pulumi.getter(name="wanArpPolicer")
    def wan_arp_policer(self) -> Optional[str]:
        """
        when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        """
        return pulumi.get(self, "wan_arp_policer")

    @property
    @pulumi.getter(name="wanExtIp")
    def wan_ext_ip(self) -> Optional[str]:
        """
        optional, if spoke should reach this port by a different IP
        """
        return pulumi.get(self, "wan_ext_ip")

    @property
    @pulumi.getter(name="wanSourceNat")
    def wan_source_nat(self) -> Optional['outputs.DeviceprofileGatewayPortConfigWanSourceNat']:
        """
        optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        """
        return pulumi.get(self, "wan_source_nat")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[str]:
        """
        if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class DeviceprofileGatewayPortConfigIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "poserPassword":
            suggest = "poser_password"
        elif key == "pppoeAuth":
            suggest = "pppoe_auth"
        elif key == "pppoeUsername":
            suggest = "pppoe_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfigIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfigIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfigIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 network: Optional[str] = None,
                 poser_password: Optional[str] = None,
                 pppoe_auth: Optional[str] = None,
                 pppoe_username: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] dns: except for out-of_band interface (vme/em0/fxp0)
        :param Sequence[str] dns_suffixes: except for out-of_band interface (vme/em0/fxp0)
        :param str gateway: except for out-of_band interface (vme/em0/fxp0)
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str network: optional, the network to be used for mgmt
        :param str poser_password: if `type`==`pppoe`
        :param str pppoe_auth: if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        :param str pppoe_username: if `type`==`pppoe`
        :param str type: enum: `dhcp`, `pppoe`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if poser_password is not None:
            pulumi.set(__self__, "poser_password", poser_password)
        if pppoe_auth is not None:
            pulumi.set(__self__, "pppoe_auth", pppoe_auth)
        if pppoe_username is not None:
            pulumi.set(__self__, "pppoe_username", pppoe_username)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="poserPassword")
    def poser_password(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "poser_password")

    @property
    @pulumi.getter(name="pppoeAuth")
    def pppoe_auth(self) -> Optional[str]:
        """
        if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "pppoe_auth")

    @property
    @pulumi.getter(name="pppoeUsername")
    def pppoe_username(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "pppoe_username")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `pppoe`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceprofileGatewayPortConfigTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfigTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfigTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfigTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayPortConfigVpnPaths(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bfdProfile":
            suggest = "bfd_profile"
        elif key == "bfdUseTunnelMode":
            suggest = "bfd_use_tunnel_mode"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfigVpnPaths. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfigVpnPaths.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfigVpnPaths.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd_profile: Optional[str] = None,
                 bfd_use_tunnel_mode: Optional[bool] = None,
                 preference: Optional[int] = None,
                 role: Optional[str] = None,
                 traffic_shaping: Optional['outputs.DeviceprofileGatewayPortConfigVpnPathsTrafficShaping'] = None):
        """
        :param str bfd_profile: enum: `broadband`, `lte`
        :param bool bfd_use_tunnel_mode: whether to use tunnel mode. SSR only
        :param int preference: for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        :param str role: enum: `hub`, `spoke`
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if bfd_use_tunnel_mode is not None:
            pulumi.set(__self__, "bfd_use_tunnel_mode", bfd_use_tunnel_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[str]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @property
    @pulumi.getter(name="bfdUseTunnelMode")
    def bfd_use_tunnel_mode(self) -> Optional[bool]:
        """
        whether to use tunnel mode. SSR only
        """
        return pulumi.get(self, "bfd_use_tunnel_mode")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `hub`, `spoke`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.DeviceprofileGatewayPortConfigVpnPathsTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")


@pulumi.output_type
class DeviceprofileGatewayPortConfigVpnPathsTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfigVpnPathsTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayPortConfigWanSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natPool":
            suggest = "nat_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayPortConfigWanSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayPortConfigWanSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayPortConfigWanSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 nat_pool: Optional[str] = None):
        """
        :param bool disabled: or to disable the source-nat
        :param str nat_pool: if alternative nat_pool is desired
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        or to disable the source-nat
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if alternative nat_pool is desired
        """
        return pulumi.get(self, "nat_pool")


@pulumi.output_type
class DeviceprofileGatewayRoutingPolicies(dict):
    def __init__(__self__, *,
                 terms: Optional[Sequence['outputs.DeviceprofileGatewayRoutingPoliciesTerm']] = None):
        """
        :param Sequence['DeviceprofileGatewayRoutingPoliciesTermArgs'] terms: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.DeviceprofileGatewayRoutingPoliciesTerm']]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class DeviceprofileGatewayRoutingPoliciesTerm(dict):
    def __init__(__self__, *,
                 action: Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermAction'] = None,
                 matching: Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatching'] = None):
        """
        :param 'DeviceprofileGatewayRoutingPoliciesTermActionArgs' action: when used as import policy
        :param 'DeviceprofileGatewayRoutingPoliciesTermMatchingArgs' matching: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermAction']:
        """
        when used as import policy
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatching']:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "matching")


@pulumi.output_type
class DeviceprofileGatewayRoutingPoliciesTermAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addCommunities":
            suggest = "add_communities"
        elif key == "addTargetVrfs":
            suggest = "add_target_vrfs"
        elif key == "excludeAsPaths":
            suggest = "exclude_as_paths"
        elif key == "excludeCommunities":
            suggest = "exclude_communities"
        elif key == "exportCommunitites":
            suggest = "export_communitites"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "prependAsPaths":
            suggest = "prepend_as_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayRoutingPoliciesTermAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept: Optional[bool] = None,
                 add_communities: Optional[Sequence[str]] = None,
                 add_target_vrfs: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 exclude_as_paths: Optional[Sequence[str]] = None,
                 exclude_communities: Optional[Sequence[str]] = None,
                 export_communitites: Optional[Sequence[str]] = None,
                 local_preference: Optional[str] = None,
                 prepend_as_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] add_target_vrfs: for SSR, hub decides how VRF routes are leaked on spoke
        :param Sequence[str] communities: when used as export policy, optional
        :param Sequence[str] exclude_as_paths: when used as export policy, optional. To exclude certain AS
        :param Sequence[str] export_communitites: when used as export policy, optional
        :param str local_preference: optional, for an import policy, local_preference can be changed
        :param Sequence[str] prepend_as_paths: when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if add_communities is not None:
            pulumi.set(__self__, "add_communities", add_communities)
        if add_target_vrfs is not None:
            pulumi.set(__self__, "add_target_vrfs", add_target_vrfs)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if exclude_as_paths is not None:
            pulumi.set(__self__, "exclude_as_paths", exclude_as_paths)
        if exclude_communities is not None:
            pulumi.set(__self__, "exclude_communities", exclude_communities)
        if export_communitites is not None:
            pulumi.set(__self__, "export_communitites", export_communitites)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)

    @property
    @pulumi.getter
    def accept(self) -> Optional[bool]:
        return pulumi.get(self, "accept")

    @property
    @pulumi.getter(name="addCommunities")
    def add_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add_communities")

    @property
    @pulumi.getter(name="addTargetVrfs")
    def add_target_vrfs(self) -> Optional[Sequence[str]]:
        """
        for SSR, hub decides how VRF routes are leaked on spoke
        """
        return pulumi.get(self, "add_target_vrfs")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="excludeAsPaths")
    def exclude_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. To exclude certain AS
        """
        return pulumi.get(self, "exclude_as_paths")

    @property
    @pulumi.getter(name="excludeCommunities")
    def exclude_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_communities")

    @property
    @pulumi.getter(name="exportCommunitites")
    def export_communitites(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "export_communitites")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[str]:
        """
        optional, for an import policy, local_preference can be changed
        """
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        return pulumi.get(self, "prepend_as_paths")


@pulumi.output_type
class DeviceprofileGatewayRoutingPoliciesTermMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPaths":
            suggest = "as_paths"
        elif key == "routeExists":
            suggest = "route_exists"
        elif key == "vpnNeighborMacs":
            suggest = "vpn_neighbor_macs"
        elif key == "vpnPathSla":
            suggest = "vpn_path_sla"
        elif key == "vpnPaths":
            suggest = "vpn_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayRoutingPoliciesTermMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_paths: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 networks: Optional[Sequence[str]] = None,
                 prefixes: Optional[Sequence[str]] = None,
                 protocols: Optional[Sequence[str]] = None,
                 route_exists: Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists'] = None,
                 vpn_neighbor_macs: Optional[Sequence[str]] = None,
                 vpn_path_sla: Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla'] = None,
                 vpn_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] as_paths: takes regular expression
        :param Sequence[str] prefixes: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        :param Sequence[str] protocols: `direct`, `bgp`, `osp`, ...
        :param Sequence[str] vpn_neighbor_macs: overlay-facing criteria (used for bgp_config where via=vpn)
        :param Sequence[str] vpn_paths: overlay-facing criteria (used for bgp_config where via=vpn)
               ordered-
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_exists is not None:
            pulumi.set(__self__, "route_exists", route_exists)
        if vpn_neighbor_macs is not None:
            pulumi.set(__self__, "vpn_neighbor_macs", vpn_neighbor_macs)
        if vpn_path_sla is not None:
            pulumi.set(__self__, "vpn_path_sla", vpn_path_sla)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[Sequence[str]]:
        """
        takes regular expression
        """
        return pulumi.get(self, "as_paths")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[str]]:
        """
        `direct`, `bgp`, `osp`, ...
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="routeExists")
    def route_exists(self) -> Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists']:
        return pulumi.get(self, "route_exists")

    @property
    @pulumi.getter(name="vpnNeighborMacs")
    def vpn_neighbor_macs(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        """
        return pulumi.get(self, "vpn_neighbor_macs")

    @property
    @pulumi.getter(name="vpnPathSla")
    def vpn_path_sla(self) -> Optional['outputs.DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla']:
        return pulumi.get(self, "vpn_path_sla")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        ordered-
        """
        return pulumi.get(self, "vpn_paths")


@pulumi.output_type
class DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vrfName":
            suggest = "vrf_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route: Optional[str] = None,
                 vrf_name: Optional[str] = None):
        """
        :param str vrf_name: name of the vrf instance
               it can also be the name of the VPN or wan if they
        """
        if route is not None:
            pulumi.set(__self__, "route", route)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def route(self) -> Optional[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[str]:
        """
        name of the vrf instance
        it can also be the name of the VPN or wan if they
        """
        return pulumi.get(self, "vrf_name")


@pulumi.output_type
class DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxJitter":
            suggest = "max_jitter"
        elif key == "maxLatency":
            suggest = "max_latency"
        elif key == "maxLoss":
            suggest = "max_loss"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_jitter: Optional[int] = None,
                 max_latency: Optional[int] = None,
                 max_loss: Optional[int] = None):
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[int]:
        return pulumi.get(self, "max_jitter")

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[int]:
        return pulumi.get(self, "max_latency")

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[int]:
        return pulumi.get(self, "max_loss")


@pulumi.output_type
class DeviceprofileGatewayServicePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localRouting":
            suggest = "local_routing"
        elif key == "pathPreference":
            suggest = "path_preference"
        elif key == "servicepolicyId":
            suggest = "servicepolicy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayServicePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayServicePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayServicePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 appqoe: Optional['outputs.DeviceprofileGatewayServicePolicyAppqoe'] = None,
                 ewfs: Optional[Sequence['outputs.DeviceprofileGatewayServicePolicyEwf']] = None,
                 idp: Optional['outputs.DeviceprofileGatewayServicePolicyIdp'] = None,
                 local_routing: Optional[bool] = None,
                 name: Optional[str] = None,
                 path_preference: Optional[str] = None,
                 servicepolicy_id: Optional[str] = None,
                 services: Optional[Sequence[str]] = None,
                 tenants: Optional[Sequence[str]] = None):
        """
        :param str action: enum: `allow`, `deny`
        :param 'DeviceprofileGatewayServicePolicyAppqoeArgs' appqoe: For SRX Only
        :param bool local_routing: access within the same VRF
        :param str path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        :param str servicepolicy_id: used to link servicepolicy defined at org level and overwrite some attributes
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if appqoe is not None:
            pulumi.set(__self__, "appqoe", appqoe)
        if ewfs is not None:
            pulumi.set(__self__, "ewfs", ewfs)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if local_routing is not None:
            pulumi.set(__self__, "local_routing", local_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_preference is not None:
            pulumi.set(__self__, "path_preference", path_preference)
        if servicepolicy_id is not None:
            pulumi.set(__self__, "servicepolicy_id", servicepolicy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def appqoe(self) -> Optional['outputs.DeviceprofileGatewayServicePolicyAppqoe']:
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @property
    @pulumi.getter
    def ewfs(self) -> Optional[Sequence['outputs.DeviceprofileGatewayServicePolicyEwf']]:
        return pulumi.get(self, "ewfs")

    @property
    @pulumi.getter
    def idp(self) -> Optional['outputs.DeviceprofileGatewayServicePolicyIdp']:
        return pulumi.get(self, "idp")

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> Optional[bool]:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> Optional[str]:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @property
    @pulumi.getter(name="servicepolicyId")
    def servicepolicy_id(self) -> Optional[str]:
        """
        used to link servicepolicy defined at org level and overwrite some attributes
        """
        return pulumi.get(self, "servicepolicy_id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class DeviceprofileGatewayServicePolicyAppqoe(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayServicePolicyEwf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "blockMessage":
            suggest = "block_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayServicePolicyEwf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayServicePolicyEwf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayServicePolicyEwf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 block_message: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 profile: Optional[str] = None):
        """
        :param str profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[str]:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class DeviceprofileGatewayServicePolicyIdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "idpprofileId":
            suggest = "idpprofile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayServicePolicyIdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayServicePolicyIdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayServicePolicyIdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 idpprofile_id: Optional[str] = None,
                 profile: Optional[str] = None):
        """
        :param str idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param str profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[str]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoProvision":
            suggest = "auto_provision"
        elif key == "ikeLifetime":
            suggest = "ike_lifetime"
        elif key == "ikeMode":
            suggest = "ike_mode"
        elif key == "ikeProposals":
            suggest = "ike_proposals"
        elif key == "ipsecLifetime":
            suggest = "ipsec_lifetime"
        elif key == "ipsecProposals":
            suggest = "ipsec_proposals"
        elif key == "localId":
            suggest = "local_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_provision: Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvision'] = None,
                 ike_lifetime: Optional[int] = None,
                 ike_mode: Optional[str] = None,
                 ike_proposals: Optional[Sequence['outputs.DeviceprofileGatewayTunnelConfigsIkeProposal']] = None,
                 ipsec_lifetime: Optional[int] = None,
                 ipsec_proposals: Optional[Sequence['outputs.DeviceprofileGatewayTunnelConfigsIpsecProposal']] = None,
                 local_id: Optional[str] = None,
                 mode: Optional[str] = None,
                 primary: Optional['outputs.DeviceprofileGatewayTunnelConfigsPrimary'] = None,
                 probe: Optional['outputs.DeviceprofileGatewayTunnelConfigsProbe'] = None,
                 protocol: Optional[str] = None,
                 provider: Optional[str] = None,
                 psk: Optional[str] = None,
                 secondary: Optional['outputs.DeviceprofileGatewayTunnelConfigsSecondary'] = None,
                 version: Optional[str] = None):
        """
        :param int ike_lifetime: Only if `provider`== `custom-ipsec`
        :param str ike_mode: Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        :param Sequence['DeviceprofileGatewayTunnelConfigsIkeProposalArgs'] ike_proposals: if `provider`== `custom-ipsec`
        :param int ipsec_lifetime: if `provider`== `custom-ipsec`
        :param Sequence['DeviceprofileGatewayTunnelConfigsIpsecProposalArgs'] ipsec_proposals: Only if  `provider`== `custom-ipsec`
        :param str local_id: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str mode: enum: `active-active`, `active-standby`
        :param 'DeviceprofileGatewayTunnelConfigsProbeArgs' probe: Only if `provider`== `custom-ipsec`
        :param str protocol: Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        :param str provider: enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        :param str psk: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str version: Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        if auto_provision is not None:
            pulumi.set(__self__, "auto_provision", auto_provision)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_mode is not None:
            pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_proposals is not None:
            pulumi.set(__self__, "ike_proposals", ike_proposals)
        if ipsec_lifetime is not None:
            pulumi.set(__self__, "ipsec_lifetime", ipsec_lifetime)
        if ipsec_proposals is not None:
            pulumi.set(__self__, "ipsec_proposals", ipsec_proposals)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoProvision")
    def auto_provision(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvision']:
        return pulumi.get(self, "auto_provision")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[int]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        """
        return pulumi.get(self, "ike_mode")

    @property
    @pulumi.getter(name="ikeProposals")
    def ike_proposals(self) -> Optional[Sequence['outputs.DeviceprofileGatewayTunnelConfigsIkeProposal']]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_proposals")

    @property
    @pulumi.getter(name="ipsecLifetime")
    def ipsec_lifetime(self) -> Optional[int]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_lifetime")

    @property
    @pulumi.getter(name="ipsecProposals")
    def ipsec_proposals(self) -> Optional[Sequence['outputs.DeviceprofileGatewayTunnelConfigsIpsecProposal']]:
        """
        Only if  `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_proposals")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        enum: `active-active`, `active-standby`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def probe(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsProbe']:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "probe")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def psk(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsSecondary']:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsAutoProvision(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 latlng: Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng'] = None,
                 primary: Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary'] = None,
                 region: Optional[str] = None,
                 secondary: Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary'] = None):
        """
        :param str region: enum: `APAC`, `Americas`, `EMEA`, `auto`
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if latlng is not None:
            pulumi.set(__self__, "latlng", latlng)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def latlng(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng']:
        return pulumi.get(self, "latlng")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        enum: `APAC`, `Americas`, `EMEA`, `auto`
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary']:
        return pulumi.get(self, "secondary")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionLatlng(dict):
    def __init__(__self__, *,
                 lat: float,
                 lng: float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> float:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        return pulumi.get(self, "lng")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsIkeProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsIkeProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsIkeProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsIkeProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsIpsecProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsIpsecProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsIpsecProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsIpsecProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: Only if `provider`== `custom-ipsec`. enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsProbe(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 threshold: Optional[int] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int interval: how often to trigger the probe
        :param int threshold: number of consecutive misses before declaring the tunnel down
        :param int timeout: time within which to complete the connectivity check
        :param str type: enum: `http`, `icmp`
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        how often to trigger the probe
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        number of consecutive misses before declaring the tunnel down
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        time within which to complete the connectivity check
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DeviceprofileGatewayTunnelConfigsSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelConfigsSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelConfigsSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelConfigsSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class DeviceprofileGatewayTunnelProviderOptions(dict):
    def __init__(__self__, *,
                 jse: Optional['outputs.DeviceprofileGatewayTunnelProviderOptionsJse'] = None,
                 zscaler: Optional['outputs.DeviceprofileGatewayTunnelProviderOptionsZscaler'] = None):
        """
        :param 'DeviceprofileGatewayTunnelProviderOptionsJseArgs' jse: for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        :param 'DeviceprofileGatewayTunnelProviderOptionsZscalerArgs' zscaler: for zscaler-ipsec and zscaler-gre
        """
        if jse is not None:
            pulumi.set(__self__, "jse", jse)
        if zscaler is not None:
            pulumi.set(__self__, "zscaler", zscaler)

    @property
    @pulumi.getter
    def jse(self) -> Optional['outputs.DeviceprofileGatewayTunnelProviderOptionsJse']:
        """
        for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        """
        return pulumi.get(self, "jse")

    @property
    @pulumi.getter
    def zscaler(self) -> Optional['outputs.DeviceprofileGatewayTunnelProviderOptionsZscaler']:
        """
        for zscaler-ipsec and zscaler-gre
        """
        return pulumi.get(self, "zscaler")


@pulumi.output_type
class DeviceprofileGatewayTunnelProviderOptionsJse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numUsers":
            suggest = "num_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelProviderOptionsJse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsJse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsJse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 num_users: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_users is not None:
            pulumi.set(__self__, "num_users", num_users)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numUsers")
    def num_users(self) -> Optional[int]:
        return pulumi.get(self, "num_users")


@pulumi.output_type
class DeviceprofileGatewayTunnelProviderOptionsZscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "subLocations":
            suggest = "sub_locations"
        elif key == "uploadMbps":
            suggest = "upload_mbps"
        elif key == "useXff":
            suggest = "use_xff"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelProviderOptionsZscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsZscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsZscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 name: Optional[str] = None,
                 sub_locations: Optional[Sequence['outputs.DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation']] = None,
                 upload_mbps: Optional[int] = None,
                 use_xff: Optional[bool] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param Sequence['DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs'] sub_locations: if `use_xff`==`true`
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        :param bool use_xff: location uses proxy chaining to forward traffic
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_locations is not None:
            pulumi.set(__self__, "sub_locations", sub_locations)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)
        if use_xff is not None:
            pulumi.set(__self__, "use_xff", use_xff)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subLocations")
    def sub_locations(self) -> Optional[Sequence['outputs.DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation']]:
        """
        if `use_xff`==`true`
        """
        return pulumi.get(self, "sub_locations")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @property
    @pulumi.getter(name="useXff")
    def use_xff(self) -> Optional[bool]:
        """
        location uses proxy chaining to forward traffic
        """
        return pulumi.get(self, "use_xff")


@pulumi.output_type
class DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "uploadMbps":
            suggest = "upload_mbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 subnets: Optional[Sequence[str]] = None,
                 upload_mbps: Optional[int] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")


@pulumi.output_type
class DeviceprofileGatewayVrfConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DeviceprofileGatewayVrfInstances(dict):
    def __init__(__self__, *,
                 networks: Optional[Sequence[str]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")


@pulumi.output_type
class GatewaytemplateBgpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"
        elif key == "bfdMinimumInterval":
            suggest = "bfd_minimum_interval"
        elif key == "bfdMultiplier":
            suggest = "bfd_multiplier"
        elif key == "disableBfd":
            suggest = "disable_bfd"
        elif key == "exportPolicy":
            suggest = "export_policy"
        elif key == "extendedV4Nexthop":
            suggest = "extended_v4_nexthop"
        elif key == "gracefulRestartTime":
            suggest = "graceful_restart_time"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "import":
            suggest = "import_"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "localAs":
            suggest = "local_as"
        elif key == "neighborAs":
            suggest = "neighbor_as"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "vpnName":
            suggest = "vpn_name"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateBgpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateBgpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateBgpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_key: Optional[str] = None,
                 bfd_minimum_interval: Optional[int] = None,
                 bfd_multiplier: Optional[int] = None,
                 communities: Optional[Sequence['outputs.GatewaytemplateBgpConfigCommunity']] = None,
                 disable_bfd: Optional[bool] = None,
                 export: Optional[str] = None,
                 export_policy: Optional[str] = None,
                 extended_v4_nexthop: Optional[bool] = None,
                 graceful_restart_time: Optional[int] = None,
                 hold_time: Optional[int] = None,
                 import_: Optional[str] = None,
                 import_policy: Optional[str] = None,
                 local_as: Optional[int] = None,
                 neighbor_as: Optional[int] = None,
                 neighbors: Optional[Mapping[str, 'outputs.GatewaytemplateBgpConfigNeighbors']] = None,
                 networks: Optional[Sequence[str]] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 type: Optional[str] = None,
                 via: Optional[str] = None,
                 vpn_name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param int bfd_minimum_interval: when bfd_multiplier is configured alone. Default:
                 * 1000 if `type`==`external`
                 * 350 `type`==`internal`
        :param int bfd_multiplier: when bfd_minimum_interval_is_configured alone
        :param bool disable_bfd: BFD provides faster path failure detection and is enabled by default
        :param str export_policy: default export policies if no per-neighbor policies defined
        :param bool extended_v4_nexthop: by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
               for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        :param int graceful_restart_time: `0` means disable
        :param str import_policy: default import policies if no per-neighbor policies defined
        :param Mapping[str, 'GatewaytemplateBgpConfigNeighborsArgs'] neighbors: if per-neighbor as is desired. Property key is the neighbor address
        :param Sequence[str] networks: if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        :param bool no_readvertise_to_overlay: by default, we'll re-advertise all learned BGP routers toward overlay
        :param str type: enum: `external`, `internal`
        :param str via: network name. enum: `lan`, `vpn`, `wan`
        :param str wan_name: if `via`==`wan`
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if disable_bfd is not None:
            pulumi.set(__self__, "disable_bfd", disable_bfd)
        if export is not None:
            pulumi.set(__self__, "export", export)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if extended_v4_nexthop is not None:
            pulumi.set(__self__, "extended_v4_nexthop", extended_v4_nexthop)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if via is not None:
            pulumi.set(__self__, "via", via)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[int]:
        """
        when bfd_multiplier is configured alone. Default:
          * 1000 if `type`==`external`
          * 350 `type`==`internal`
        """
        return pulumi.get(self, "bfd_minimum_interval")

    @property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[int]:
        """
        when bfd_minimum_interval_is_configured alone
        """
        return pulumi.get(self, "bfd_multiplier")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence['outputs.GatewaytemplateBgpConfigCommunity']]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="disableBfd")
    def disable_bfd(self) -> Optional[bool]:
        """
        BFD provides faster path failure detection and is enabled by default
        """
        return pulumi.get(self, "disable_bfd")

    @property
    @pulumi.getter
    def export(self) -> Optional[str]:
        return pulumi.get(self, "export")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        """
        default export policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="extendedV4Nexthop")
    def extended_v4_nexthop(self) -> Optional[bool]:
        """
        by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
        for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        """
        return pulumi.get(self, "extended_v4_nexthop")

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[int]:
        """
        `0` means disable
        """
        return pulumi.get(self, "graceful_restart_time")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[str]:
        return pulumi.get(self, "import_")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        """
        default import policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[int]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateBgpConfigNeighbors']]:
        """
        if per-neighbor as is desired. Property key is the neighbor address
        """
        return pulumi.get(self, "neighbors")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        by default, we'll re-advertise all learned BGP routers toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `external`, `internal`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def via(self) -> Optional[str]:
        """
        network name. enum: `lan`, `vpn`, `wan`
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        if `via`==`wan`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewaytemplateBgpConfigCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localPreference":
            suggest = "local_preference"
        elif key == "vpnName":
            suggest = "vpn_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateBgpConfigCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateBgpConfigCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateBgpConfigCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 local_preference: Optional[int] = None,
                 vpn_name: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[int]:
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[str]:
        return pulumi.get(self, "vpn_name")


@pulumi.output_type
class GatewaytemplateBgpConfigNeighbors(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportPolicy":
            suggest = "export_policy"
        elif key == "holdTime":
            suggest = "hold_time"
        elif key == "importPolicy":
            suggest = "import_policy"
        elif key == "multihopTtl":
            suggest = "multihop_ttl"
        elif key == "neighborAs":
            suggest = "neighbor_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateBgpConfigNeighbors. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateBgpConfigNeighbors.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateBgpConfigNeighbors.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 export_policy: Optional[str] = None,
                 hold_time: Optional[int] = None,
                 import_policy: Optional[str] = None,
                 multihop_ttl: Optional[int] = None,
                 neighbor_as: Optional[int] = None):
        """
        :param bool disabled: If true, the BGP session to this neighbor will be administratively disabled/shutdown
        :param int multihop_ttl: assuming BGP neighbor is directly connected
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if multihop_ttl is not None:
            pulumi.set(__self__, "multihop_ttl", multihop_ttl)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        If true, the BGP session to this neighbor will be administratively disabled/shutdown
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[str]:
        return pulumi.get(self, "export_policy")

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[int]:
        return pulumi.get(self, "hold_time")

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[str]:
        return pulumi.get(self, "import_policy")

    @property
    @pulumi.getter(name="multihopTtl")
    def multihop_ttl(self) -> Optional[int]:
        """
        assuming BGP neighbor is directly connected
        """
        return pulumi.get(self, "multihop_ttl")

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[int]:
        return pulumi.get(self, "neighbor_as")


@pulumi.output_type
class GatewaytemplateDhcpdConfig(dict):
    def __init__(__self__, *,
                 config: Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfig']] = None,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplateDhcpdConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsServers":
            suggest = "dns_servers"
        elif key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "fixedBindings":
            suggest = "fixed_bindings"
        elif key == "ipEnd":
            suggest = "ip_end"
        elif key == "ipEnd6":
            suggest = "ip_end6"
        elif key == "ipStart":
            suggest = "ip_start"
        elif key == "ipStart6":
            suggest = "ip_start6"
        elif key == "leaseTime":
            suggest = "lease_time"
        elif key == "serverIdOverride":
            suggest = "server_id_override"
        elif key == "vendorEncapulated":
            suggest = "vendor_encapulated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateDhcpdConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateDhcpdConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateDhcpdConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_servers: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 fixed_bindings: Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigFixedBindings']] = None,
                 gateway: Optional[str] = None,
                 ip_end: Optional[str] = None,
                 ip_end6: Optional[str] = None,
                 ip_start: Optional[str] = None,
                 ip_start6: Optional[str] = None,
                 lease_time: Optional[int] = None,
                 options: Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigOptions']] = None,
                 server_id_override: Optional[bool] = None,
                 servers: Optional[Sequence[str]] = None,
                 servers6s: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 type6: Optional[str] = None,
                 vendor_encapulated: Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigVendorEncapulated']] = None):
        """
        :param Sequence[str] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param Sequence[str] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param Mapping[str, 'GatewaytemplateDhcpdConfigConfigFixedBindingsArgs'] fixed_bindings: Property key is the MAC Address
        :param str gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param str ip_end: if `type`==`local`
        :param str ip_end6: if `type6`==`local`
        :param str ip_start: if `type`==`local`
        :param str ip_start6: if `type6`==`local`
        :param int lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param Mapping[str, 'GatewaytemplateDhcpdConfigConfigOptionsArgs'] options: Property key is the DHCP option number
        :param bool server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param Sequence[str] servers: if `type`==`relay`
        :param Sequence[str] servers6s: if `type6`==`relay`
        :param str type: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param str type6: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param Mapping[str, 'GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs'] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigFixedBindings']]:
        """
        Property key is the MAC Address
        """
        return pulumi.get(self, "fixed_bindings")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[str]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[str]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[int]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigOptions']]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[bool]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[Sequence[str]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def type6(self) -> Optional[str]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type6")

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateDhcpdConfigConfigVendorEncapulated']]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")


@pulumi.output_type
class GatewaytemplateDhcpdConfigConfigFixedBindings(dict):
    def __init__(__self__, *,
                 ip: str,
                 name: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GatewaytemplateDhcpdConfigConfigOptions(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewaytemplateDhcpdConfigConfigVendorEncapulated(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GatewaytemplateExtraRoutes6(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class GatewaytemplateExtraRoutes(dict):
    def __init__(__self__, *,
                 via: str):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        return pulumi.get(self, "via")


@pulumi.output_type
class GatewaytemplateIdpProfiles(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseProfile":
            suggest = "base_profile"
        elif key == "orgId":
            suggest = "org_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateIdpProfiles. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateIdpProfiles.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateIdpProfiles.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_profile: Optional[str] = None,
                 name: Optional[str] = None,
                 org_id: Optional[str] = None,
                 overwrites: Optional[Sequence['outputs.GatewaytemplateIdpProfilesOverwrite']] = None):
        """
        :param str base_profile: enum: `critical`, `standard`, `strict`
        """
        if base_profile is not None:
            pulumi.set(__self__, "base_profile", base_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if overwrites is not None:
            pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def overwrites(self) -> Optional[Sequence['outputs.GatewaytemplateIdpProfilesOverwrite']]:
        return pulumi.get(self, "overwrites")


@pulumi.output_type
class GatewaytemplateIdpProfilesOverwrite(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 matching: Optional['outputs.GatewaytemplateIdpProfilesOverwriteMatching'] = None,
                 name: Optional[str] = None):
        """
        :param str action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.GatewaytemplateIdpProfilesOverwriteMatching']:
        return pulumi.get(self, "matching")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GatewaytemplateIdpProfilesOverwriteMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attackNames":
            suggest = "attack_names"
        elif key == "dstSubnets":
            suggest = "dst_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateIdpProfilesOverwriteMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateIdpProfilesOverwriteMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateIdpProfilesOverwriteMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attack_names: Optional[Sequence[str]] = None,
                 dst_subnets: Optional[Sequence[str]] = None,
                 severities: Optional[Sequence[str]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attack_names")

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_subnets")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "severities")


@pulumi.output_type
class GatewaytemplateIpConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secondaryIps":
            suggest = "secondary_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateIpConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateIpConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateIpConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 netmask: str,
                 secondary_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] secondary_ips: optional list of secondary IPs in CIDR format
        :param str type: enum: `dhcp`, `static`
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask", netmask)
        if secondary_ips is not None:
            pulumi.set(__self__, "secondary_ips", secondary_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> str:
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter(name="secondaryIps")
    def secondary_ips(self) -> Optional[Sequence[str]]:
        """
        optional list of secondary IPs in CIDR format
        """
        return pulumi.get(self, "secondary_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewaytemplateNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disallowMistServices":
            suggest = "disallow_mist_services"
        elif key == "internalAccess":
            suggest = "internal_access"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "routedForNetworks":
            suggest = "routed_for_networks"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnAccess":
            suggest = "vpn_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 subnet: str,
                 disallow_mist_services: Optional[bool] = None,
                 gateway: Optional[str] = None,
                 gateway6: Optional[str] = None,
                 internal_access: Optional['outputs.GatewaytemplateNetworkInternalAccess'] = None,
                 internet_access: Optional['outputs.GatewaytemplateNetworkInternetAccess'] = None,
                 isolation: Optional[bool] = None,
                 routed_for_networks: Optional[Sequence[str]] = None,
                 subnet6: Optional[str] = None,
                 tenants: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkTenants']] = None,
                 vlan_id: Optional[str] = None,
                 vpn_access: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccess']] = None):
        """
        :param bool disallow_mist_services: whether to disallow Mist Devices in the network
        :param 'GatewaytemplateNetworkInternetAccessArgs' internet_access: whether this network has direct internet access
        :param bool isolation: whether to allow clients in the network to talk to each other
        :param Sequence[str] routed_for_networks: for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        :param Mapping[str, 'GatewaytemplateNetworkVpnAccessArgs'] vpn_access: Property key is the VPN name. Whether this network can be accessed from vpn
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        if disallow_mist_services is not None:
            pulumi.set(__self__, "disallow_mist_services", disallow_mist_services)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if internal_access is not None:
            pulumi.set(__self__, "internal_access", internal_access)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if routed_for_networks is not None:
            pulumi.set(__self__, "routed_for_networks", routed_for_networks)
        if subnet6 is not None:
            pulumi.set(__self__, "subnet6", subnet6)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_access is not None:
            pulumi.set(__self__, "vpn_access", vpn_access)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def subnet(self) -> str:
        return pulumi.get(self, "subnet")

    @property
    @pulumi.getter(name="disallowMistServices")
    def disallow_mist_services(self) -> Optional[bool]:
        """
        whether to disallow Mist Devices in the network
        """
        return pulumi.get(self, "disallow_mist_services")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[str]:
        return pulumi.get(self, "gateway6")

    @property
    @pulumi.getter(name="internalAccess")
    def internal_access(self) -> Optional['outputs.GatewaytemplateNetworkInternalAccess']:
        return pulumi.get(self, "internal_access")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional['outputs.GatewaytemplateNetworkInternetAccess']:
        """
        whether this network has direct internet access
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[bool]:
        """
        whether to allow clients in the network to talk to each other
        """
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="routedForNetworks")
    def routed_for_networks(self) -> Optional[Sequence[str]]:
        """
        for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        """
        return pulumi.get(self, "routed_for_networks")

    @property
    @pulumi.getter
    def subnet6(self) -> Optional[str]:
        return pulumi.get(self, "subnet6")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkTenants']]:
        return pulumi.get(self, "tenants")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccess']]:
        """
        Property key is the VPN name. Whether this network can be accessed from vpn
        """
        return pulumi.get(self, "vpn_access")


@pulumi.output_type
class GatewaytemplateNetworkInternalAccess(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplateNetworkInternetAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createSimpleServicePolicy":
            suggest = "create_simple_service_policy"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "staticNat":
            suggest = "static_nat"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkInternetAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkInternetAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkInternetAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_simple_service_policy: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkInternetAccessDestinationNat']] = None,
                 enabled: Optional[bool] = None,
                 restricted: Optional[bool] = None,
                 static_nat: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkInternetAccessStaticNat']] = None):
        """
        :param Mapping[str, 'GatewaytemplateNetworkInternetAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param bool restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param Mapping[str, 'GatewaytemplateNetworkInternetAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[bool]:
        return pulumi.get(self, "create_simple_service_policy")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkInternetAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def restricted(self) -> Optional[bool]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkInternetAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")


@pulumi.output_type
class GatewaytemplateNetworkInternetAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkInternetAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkInternetAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GatewaytemplateNetworkInternetAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkInternetAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkInternetAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkInternetAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewaytemplateNetworkTenants(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


@pulumi.output_type
class GatewaytemplateNetworkVpnAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedSubnet":
            suggest = "advertised_subnet"
        elif key == "allowPing":
            suggest = "allow_ping"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "noReadvertiseToLanBgp":
            suggest = "no_readvertise_to_lan_bgp"
        elif key == "noReadvertiseToLanOspf":
            suggest = "no_readvertise_to_lan_ospf"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "otherVrfs":
            suggest = "other_vrfs"
        elif key == "sourceNat":
            suggest = "source_nat"
        elif key == "staticNat":
            suggest = "static_nat"
        elif key == "summarizedSubnet":
            suggest = "summarized_subnet"
        elif key == "summarizedSubnetToLanBgp":
            suggest = "summarized_subnet_to_lan_bgp"
        elif key == "summarizedSubnetToLanOspf":
            suggest = "summarized_subnet_to_lan_ospf"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkVpnAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkVpnAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkVpnAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_subnet: Optional[str] = None,
                 allow_ping: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccessDestinationNat']] = None,
                 nat_pool: Optional[str] = None,
                 no_readvertise_to_lan_bgp: Optional[bool] = None,
                 no_readvertise_to_lan_ospf: Optional[bool] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 other_vrfs: Optional[Sequence[str]] = None,
                 routed: Optional[bool] = None,
                 source_nat: Optional['outputs.GatewaytemplateNetworkVpnAccessSourceNat'] = None,
                 static_nat: Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccessStaticNat']] = None,
                 summarized_subnet: Optional[str] = None,
                 summarized_subnet_to_lan_bgp: Optional[str] = None,
                 summarized_subnet_to_lan_ospf: Optional[str] = None):
        """
        :param str advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param bool allow_ping: whether to allow ping from vpn into this routed network
        :param Mapping[str, 'GatewaytemplateNetworkVpnAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param str nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param bool no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param bool no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param bool no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param Sequence[str] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param bool routed: whether this network is routable
        :param 'GatewaytemplateNetworkVpnAccessSourceNatArgs' source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param Mapping[str, 'GatewaytemplateNetworkVpnAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param str summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param str summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param str summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[str]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[bool]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[bool]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[bool]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[Sequence[str]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @property
    @pulumi.getter
    def routed(self) -> Optional[bool]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional['outputs.GatewaytemplateNetworkVpnAccessSourceNat']:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.GatewaytemplateNetworkVpnAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[str]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[str]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[str]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")


@pulumi.output_type
class GatewaytemplateNetworkVpnAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkVpnAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkVpnAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GatewaytemplateNetworkVpnAccessSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIp":
            suggest = "external_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkVpnAccessSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkVpnAccessSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkVpnAccessSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ip: Optional[str] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_ip")


@pulumi.output_type
class GatewaytemplateNetworkVpnAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateNetworkVpnAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateNetworkVpnAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateNetworkVpnAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewaytemplateOobIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateOobIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateOobIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateOobIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 node1: Optional['outputs.GatewaytemplateOobIpConfigNode1'] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str ip: if `type`==`static`
        :param str netmask: if `type`==`static`
        :param 'GatewaytemplateOobIpConfigNode1Args' node1: for HA Cluster, node1 can have different IP Config
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if node1 is not None:
            pulumi.set(__self__, "node1", node1)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def node1(self) -> Optional['outputs.GatewaytemplateOobIpConfigNode1']:
        """
        for HA Cluster, node1 can have different IP Config
        """
        return pulumi.get(self, "node1")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired,
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GatewaytemplateOobIpConfigNode1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useMgmtVrf":
            suggest = "use_mgmt_vrf"
        elif key == "useMgmtVrfForHostOut":
            suggest = "use_mgmt_vrf_for_host_out"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateOobIpConfigNode1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateOobIpConfigNode1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateOobIpConfigNode1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 type: Optional[str] = None,
                 use_mgmt_vrf: Optional[bool] = None,
                 use_mgmt_vrf_for_host_out: Optional[bool] = None,
                 vlan_id: Optional[str] = None):
        """
        :param str gateway: if `type`==`static`
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str type: enum: `dhcp`, `static`
        :param bool use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param bool use_mgmt_vrf_for_host_out: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[bool]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[bool]:
        """
        whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GatewaytemplatePathPreferences(dict):
    def __init__(__self__, *,
                 paths: Optional[Sequence['outputs.GatewaytemplatePathPreferencesPath']] = None,
                 strategy: Optional[str] = None):
        """
        :param str strategy: enum: `ecmp`, `ordered`, `weighted`
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence['outputs.GatewaytemplatePathPreferencesPath']]:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        enum: `ecmp`, `ordered`, `weighted`
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class GatewaytemplatePathPreferencesPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayIp":
            suggest = "gateway_ip"
        elif key == "internetAccess":
            suggest = "internet_access"
        elif key == "targetIps":
            suggest = "target_ips"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePathPreferencesPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePathPreferencesPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePathPreferencesPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cost: Optional[int] = None,
                 disabled: Optional[bool] = None,
                 gateway_ip: Optional[str] = None,
                 internet_access: Optional[bool] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 target_ips: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param bool disabled: For SSR Only. `true`, if this specific path is undesired
        :param str gateway_ip: only if `type`==`local`, if a different gateway is desired
        :param bool internet_access: only if `type`==`vpn`, if this vpn path can be used for internet
        :param str name: required when 
                 * `type`==`vpn`: the name of the VPN Path to use 
                 * `type`==`wan`: the name of the WAN interface to use'
        :param Sequence[str] networks: required when `type`==`local`
        :param Sequence[str] target_ips: if `type`==`local`, if destination IP is to be replaced
        :param str type: enum: `local`, `tunnel`, `vpn`, `wan`
        :param str wan_name: required when`type`==`tunnel`
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if target_ips is not None:
            pulumi.set(__self__, "target_ips", target_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        For SSR Only. `true`, if this specific path is undesired
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[str]:
        """
        only if `type`==`local`, if a different gateway is desired
        """
        return pulumi.get(self, "gateway_ip")

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[bool]:
        """
        only if `type`==`vpn`, if this vpn path can be used for internet
        """
        return pulumi.get(self, "internet_access")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        required when 
          * `type`==`vpn`: the name of the VPN Path to use 
          * `type`==`wan`: the name of the WAN interface to use'
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        required when `type`==`local`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="targetIps")
    def target_ips(self) -> Optional[Sequence[str]]:
        """
        if `type`==`local`, if destination IP is to be replaced
        """
        return pulumi.get(self, "target_ips")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `local`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        required when`type`==`tunnel`
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class GatewaytemplatePortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dslType":
            suggest = "dsl_type"
        elif key == "dslVci":
            suggest = "dsl_vci"
        elif key == "dslVpi":
            suggest = "dsl_vpi"
        elif key == "ipConfig":
            suggest = "ip_config"
        elif key == "lteApn":
            suggest = "lte_apn"
        elif key == "lteAuth":
            suggest = "lte_auth"
        elif key == "lteBackup":
            suggest = "lte_backup"
        elif key == "ltePassword":
            suggest = "lte_password"
        elif key == "lteUsername":
            suggest = "lte_username"
        elif key == "outerVlanId":
            suggest = "outer_vlan_id"
        elif key == "poeDisabled":
            suggest = "poe_disabled"
        elif key == "portNetwork":
            suggest = "port_network"
        elif key == "preserveDscp":
            suggest = "preserve_dscp"
        elif key == "rethIdx":
            suggest = "reth_idx"
        elif key == "rethNode":
            suggest = "reth_node"
        elif key == "rethNodes":
            suggest = "reth_nodes"
        elif key == "ssrNoVirtualMac":
            suggest = "ssr_no_virtual_mac"
        elif key == "svrPortRange":
            suggest = "svr_port_range"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"
        elif key == "vlanId":
            suggest = "vlan_id"
        elif key == "vpnPaths":
            suggest = "vpn_paths"
        elif key == "wanArpPolicer":
            suggest = "wan_arp_policer"
        elif key == "wanExtIp":
            suggest = "wan_ext_ip"
        elif key == "wanSourceNat":
            suggest = "wan_source_nat"
        elif key == "wanType":
            suggest = "wan_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage: str,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 dsl_type: Optional[str] = None,
                 dsl_vci: Optional[int] = None,
                 dsl_vpi: Optional[int] = None,
                 duplex: Optional[str] = None,
                 ip_config: Optional['outputs.GatewaytemplatePortConfigIpConfig'] = None,
                 lte_apn: Optional[str] = None,
                 lte_auth: Optional[str] = None,
                 lte_backup: Optional[bool] = None,
                 lte_password: Optional[str] = None,
                 lte_username: Optional[str] = None,
                 mtu: Optional[int] = None,
                 name: Optional[str] = None,
                 networks: Optional[Sequence[str]] = None,
                 outer_vlan_id: Optional[int] = None,
                 poe_disabled: Optional[bool] = None,
                 port_network: Optional[str] = None,
                 preserve_dscp: Optional[bool] = None,
                 redundant: Optional[bool] = None,
                 reth_idx: Optional[int] = None,
                 reth_node: Optional[str] = None,
                 reth_nodes: Optional[Sequence[str]] = None,
                 speed: Optional[str] = None,
                 ssr_no_virtual_mac: Optional[bool] = None,
                 svr_port_range: Optional[str] = None,
                 traffic_shaping: Optional['outputs.GatewaytemplatePortConfigTrafficShaping'] = None,
                 vlan_id: Optional[int] = None,
                 vpn_paths: Optional[Mapping[str, 'outputs.GatewaytemplatePortConfigVpnPaths']] = None,
                 wan_arp_policer: Optional[str] = None,
                 wan_ext_ip: Optional[str] = None,
                 wan_source_nat: Optional['outputs.GatewaytemplatePortConfigWanSourceNat'] = None,
                 wan_type: Optional[str] = None):
        """
        :param str usage: port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        :param bool disabled: port admin up (true) / down (false)
        :param str dsl_type: if `wan_type`==`lte`. enum: `adsl`, `vdsl`
        :param int dsl_vci: if `wan_type`==`dsl`
               16 bit int
        :param int dsl_vpi: if `wan_type`==`dsl`
               8 bit int
        :param str duplex: enum: `auto`, `full`, `half`
        :param 'GatewaytemplatePortConfigIpConfigArgs' ip_config: Junos IP Config
        :param str lte_apn: if `wan_type`==`lte`
        :param str lte_auth: if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        :param str lte_password: if `wan_type`==`lte`
        :param str lte_username: if `wan_type`==`lte`
        :param str name: name that we'll use to derive config
        :param Sequence[str] networks: if `usage`==`lan`
        :param int outer_vlan_id: for Q-in-Q
        :param str port_network: if `usage`==`lan`
        :param bool preserve_dscp: whether to preserve dscp when sending traffic over VPN (SSR-only)
        :param bool redundant: if HA mode
        :param int reth_idx: if HA mode
        :param str reth_node: if HA mode
        :param Sequence[str] reth_nodes: SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        :param bool ssr_no_virtual_mac: when SSR is running as VM, this is required on certain hosting platforms
        :param str svr_port_range: for SSR only
        :param int vlan_id: if WAN interface is on a VLAN
        :param str wan_arp_policer: when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        :param str wan_ext_ip: optional, if spoke should reach this port by a different IP
        :param 'GatewaytemplatePortConfigWanSourceNatArgs' wan_source_nat: optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        :param str wan_type: if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        pulumi.set(__self__, "usage", usage)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if dsl_vci is not None:
            pulumi.set(__self__, "dsl_vci", dsl_vci)
        if dsl_vpi is not None:
            pulumi.set(__self__, "dsl_vpi", dsl_vpi)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth is not None:
            pulumi.set(__self__, "lte_auth", lte_auth)
        if lte_backup is not None:
            pulumi.set(__self__, "lte_backup", lte_backup)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if outer_vlan_id is not None:
            pulumi.set(__self__, "outer_vlan_id", outer_vlan_id)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if preserve_dscp is not None:
            pulumi.set(__self__, "preserve_dscp", preserve_dscp)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if reth_idx is not None:
            pulumi.set(__self__, "reth_idx", reth_idx)
        if reth_node is not None:
            pulumi.set(__self__, "reth_node", reth_node)
        if reth_nodes is not None:
            pulumi.set(__self__, "reth_nodes", reth_nodes)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if ssr_no_virtual_mac is not None:
            pulumi.set(__self__, "ssr_no_virtual_mac", ssr_no_virtual_mac)
        if svr_port_range is not None:
            pulumi.set(__self__, "svr_port_range", svr_port_range)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)
        if wan_arp_policer is not None:
            pulumi.set(__self__, "wan_arp_policer", wan_arp_policer)
        if wan_ext_ip is not None:
            pulumi.set(__self__, "wan_ext_ip", wan_ext_ip)
        if wan_source_nat is not None:
            pulumi.set(__self__, "wan_source_nat", wan_source_nat)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter
    def usage(self) -> str:
        """
        port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        """
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        port admin up (true) / down (false)
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[str]:
        """
        if `wan_type`==`lte`. enum: `adsl`, `vdsl`
        """
        return pulumi.get(self, "dsl_type")

    @property
    @pulumi.getter(name="dslVci")
    def dsl_vci(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        16 bit int
        """
        return pulumi.get(self, "dsl_vci")

    @property
    @pulumi.getter(name="dslVpi")
    def dsl_vpi(self) -> Optional[int]:
        """
        if `wan_type`==`dsl`
        8 bit int
        """
        return pulumi.get(self, "dsl_vpi")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional['outputs.GatewaytemplatePortConfigIpConfig']:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_apn")

    @property
    @pulumi.getter(name="lteAuth")
    def lte_auth(self) -> Optional[str]:
        """
        if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "lte_auth")

    @property
    @pulumi.getter(name="lteBackup")
    def lte_backup(self) -> Optional[bool]:
        return pulumi.get(self, "lte_backup")

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_password")

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[str]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_username")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name that we'll use to derive config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="outerVlanId")
    def outer_vlan_id(self) -> Optional[int]:
        """
        for Q-in-Q
        """
        return pulumi.get(self, "outer_vlan_id")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[str]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "port_network")

    @property
    @pulumi.getter(name="preserveDscp")
    def preserve_dscp(self) -> Optional[bool]:
        """
        whether to preserve dscp when sending traffic over VPN (SSR-only)
        """
        return pulumi.get(self, "preserve_dscp")

    @property
    @pulumi.getter
    def redundant(self) -> Optional[bool]:
        """
        if HA mode
        """
        return pulumi.get(self, "redundant")

    @property
    @pulumi.getter(name="rethIdx")
    def reth_idx(self) -> Optional[int]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_idx")

    @property
    @pulumi.getter(name="rethNode")
    def reth_node(self) -> Optional[str]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_node")

    @property
    @pulumi.getter(name="rethNodes")
    def reth_nodes(self) -> Optional[Sequence[str]]:
        """
        SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        """
        return pulumi.get(self, "reth_nodes")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="ssrNoVirtualMac")
    def ssr_no_virtual_mac(self) -> Optional[bool]:
        """
        when SSR is running as VM, this is required on certain hosting platforms
        """
        return pulumi.get(self, "ssr_no_virtual_mac")

    @property
    @pulumi.getter(name="svrPortRange")
    def svr_port_range(self) -> Optional[str]:
        """
        for SSR only
        """
        return pulumi.get(self, "svr_port_range")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.GatewaytemplatePortConfigTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        if WAN interface is on a VLAN
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Mapping[str, 'outputs.GatewaytemplatePortConfigVpnPaths']]:
        return pulumi.get(self, "vpn_paths")

    @property
    @pulumi.getter(name="wanArpPolicer")
    def wan_arp_policer(self) -> Optional[str]:
        """
        when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        """
        return pulumi.get(self, "wan_arp_policer")

    @property
    @pulumi.getter(name="wanExtIp")
    def wan_ext_ip(self) -> Optional[str]:
        """
        optional, if spoke should reach this port by a different IP
        """
        return pulumi.get(self, "wan_ext_ip")

    @property
    @pulumi.getter(name="wanSourceNat")
    def wan_source_nat(self) -> Optional['outputs.GatewaytemplatePortConfigWanSourceNat']:
        """
        optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        """
        return pulumi.get(self, "wan_source_nat")

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[str]:
        """
        if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        return pulumi.get(self, "wan_type")


@pulumi.output_type
class GatewaytemplatePortConfigIpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsSuffixes":
            suggest = "dns_suffixes"
        elif key == "poserPassword":
            suggest = "poser_password"
        elif key == "pppoeAuth":
            suggest = "pppoe_auth"
        elif key == "pppoeUsername":
            suggest = "pppoe_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfigIpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfigIpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfigIpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: Optional[Sequence[str]] = None,
                 dns_suffixes: Optional[Sequence[str]] = None,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask: Optional[str] = None,
                 network: Optional[str] = None,
                 poser_password: Optional[str] = None,
                 pppoe_auth: Optional[str] = None,
                 pppoe_username: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param Sequence[str] dns: except for out-of_band interface (vme/em0/fxp0)
        :param Sequence[str] dns_suffixes: except for out-of_band interface (vme/em0/fxp0)
        :param str gateway: except for out-of_band interface (vme/em0/fxp0)
        :param str netmask: used only if `subnet` is not specified in `networks`
        :param str network: optional, the network to be used for mgmt
        :param str poser_password: if `type`==`pppoe`
        :param str pppoe_auth: if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        :param str pppoe_username: if `type`==`pppoe`
        :param str type: enum: `dhcp`, `pppoe`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if poser_password is not None:
            pulumi.set(__self__, "poser_password", poser_password)
        if pppoe_auth is not None:
            pulumi.set(__self__, "pppoe_auth", pppoe_auth)
        if pppoe_username is not None:
            pulumi.set(__self__, "pppoe_username", pppoe_username)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[Sequence[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def netmask(self) -> Optional[str]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="poserPassword")
    def poser_password(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "poser_password")

    @property
    @pulumi.getter(name="pppoeAuth")
    def pppoe_auth(self) -> Optional[str]:
        """
        if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "pppoe_auth")

    @property
    @pulumi.getter(name="pppoeUsername")
    def pppoe_username(self) -> Optional[str]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "pppoe_username")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `dhcp`, `pppoe`, `static`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewaytemplatePortConfigTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfigTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfigTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfigTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplatePortConfigVpnPaths(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bfdProfile":
            suggest = "bfd_profile"
        elif key == "bfdUseTunnelMode":
            suggest = "bfd_use_tunnel_mode"
        elif key == "trafficShaping":
            suggest = "traffic_shaping"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfigVpnPaths. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfigVpnPaths.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfigVpnPaths.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd_profile: Optional[str] = None,
                 bfd_use_tunnel_mode: Optional[bool] = None,
                 preference: Optional[int] = None,
                 role: Optional[str] = None,
                 traffic_shaping: Optional['outputs.GatewaytemplatePortConfigVpnPathsTrafficShaping'] = None):
        """
        :param str bfd_profile: enum: `broadband`, `lte`
        :param bool bfd_use_tunnel_mode: whether to use tunnel mode. SSR only
        :param int preference: for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        :param str role: enum: `hub`, `spoke`
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if bfd_use_tunnel_mode is not None:
            pulumi.set(__self__, "bfd_use_tunnel_mode", bfd_use_tunnel_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[str]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @property
    @pulumi.getter(name="bfdUseTunnelMode")
    def bfd_use_tunnel_mode(self) -> Optional[bool]:
        """
        whether to use tunnel mode. SSR only
        """
        return pulumi.get(self, "bfd_use_tunnel_mode")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        """
        for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        enum: `hub`, `spoke`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional['outputs.GatewaytemplatePortConfigVpnPathsTrafficShaping']:
        return pulumi.get(self, "traffic_shaping")


@pulumi.output_type
class GatewaytemplatePortConfigVpnPathsTrafficShaping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "classPercentages":
            suggest = "class_percentages"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfigVpnPathsTrafficShaping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfigVpnPathsTrafficShaping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_percentages: Optional[Sequence[int]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[int] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[Sequence[int]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplatePortConfigWanSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "natPool":
            suggest = "nat_pool"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplatePortConfigWanSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplatePortConfigWanSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplatePortConfigWanSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 nat_pool: Optional[str] = None):
        """
        :param bool disabled: or to disable the source-nat
        :param str nat_pool: if alternative nat_pool is desired
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        or to disable the source-nat
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if alternative nat_pool is desired
        """
        return pulumi.get(self, "nat_pool")


@pulumi.output_type
class GatewaytemplateRoutingPolicies(dict):
    def __init__(__self__, *,
                 terms: Optional[Sequence['outputs.GatewaytemplateRoutingPoliciesTerm']] = None):
        """
        :param Sequence['GatewaytemplateRoutingPoliciesTermArgs'] terms: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def terms(self) -> Optional[Sequence['outputs.GatewaytemplateRoutingPoliciesTerm']]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "terms")


@pulumi.output_type
class GatewaytemplateRoutingPoliciesTerm(dict):
    def __init__(__self__, *,
                 action: Optional['outputs.GatewaytemplateRoutingPoliciesTermAction'] = None,
                 matching: Optional['outputs.GatewaytemplateRoutingPoliciesTermMatching'] = None):
        """
        :param 'GatewaytemplateRoutingPoliciesTermActionArgs' action: when used as import policy
        :param 'GatewaytemplateRoutingPoliciesTermMatchingArgs' matching: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def action(self) -> Optional['outputs.GatewaytemplateRoutingPoliciesTermAction']:
        """
        when used as import policy
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.GatewaytemplateRoutingPoliciesTermMatching']:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "matching")


@pulumi.output_type
class GatewaytemplateRoutingPoliciesTermAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addCommunities":
            suggest = "add_communities"
        elif key == "addTargetVrfs":
            suggest = "add_target_vrfs"
        elif key == "excludeAsPaths":
            suggest = "exclude_as_paths"
        elif key == "excludeCommunities":
            suggest = "exclude_communities"
        elif key == "exportCommunitites":
            suggest = "export_communitites"
        elif key == "localPreference":
            suggest = "local_preference"
        elif key == "prependAsPaths":
            suggest = "prepend_as_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateRoutingPoliciesTermAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateRoutingPoliciesTermAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateRoutingPoliciesTermAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept: Optional[bool] = None,
                 add_communities: Optional[Sequence[str]] = None,
                 add_target_vrfs: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 exclude_as_paths: Optional[Sequence[str]] = None,
                 exclude_communities: Optional[Sequence[str]] = None,
                 export_communitites: Optional[Sequence[str]] = None,
                 local_preference: Optional[str] = None,
                 prepend_as_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] add_target_vrfs: for SSR, hub decides how VRF routes are leaked on spoke
        :param Sequence[str] communities: when used as export policy, optional
        :param Sequence[str] exclude_as_paths: when used as export policy, optional. To exclude certain AS
        :param Sequence[str] export_communitites: when used as export policy, optional
        :param str local_preference: optional, for an import policy, local_preference can be changed
        :param Sequence[str] prepend_as_paths: when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if add_communities is not None:
            pulumi.set(__self__, "add_communities", add_communities)
        if add_target_vrfs is not None:
            pulumi.set(__self__, "add_target_vrfs", add_target_vrfs)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if exclude_as_paths is not None:
            pulumi.set(__self__, "exclude_as_paths", exclude_as_paths)
        if exclude_communities is not None:
            pulumi.set(__self__, "exclude_communities", exclude_communities)
        if export_communitites is not None:
            pulumi.set(__self__, "export_communitites", export_communitites)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)

    @property
    @pulumi.getter
    def accept(self) -> Optional[bool]:
        return pulumi.get(self, "accept")

    @property
    @pulumi.getter(name="addCommunities")
    def add_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "add_communities")

    @property
    @pulumi.getter(name="addTargetVrfs")
    def add_target_vrfs(self) -> Optional[Sequence[str]]:
        """
        for SSR, hub decides how VRF routes are leaked on spoke
        """
        return pulumi.get(self, "add_target_vrfs")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter(name="excludeAsPaths")
    def exclude_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. To exclude certain AS
        """
        return pulumi.get(self, "exclude_as_paths")

    @property
    @pulumi.getter(name="excludeCommunities")
    def exclude_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_communities")

    @property
    @pulumi.getter(name="exportCommunitites")
    def export_communitites(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "export_communitites")

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[str]:
        """
        optional, for an import policy, local_preference can be changed
        """
        return pulumi.get(self, "local_preference")

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[Sequence[str]]:
        """
        when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        return pulumi.get(self, "prepend_as_paths")


@pulumi.output_type
class GatewaytemplateRoutingPoliciesTermMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asPaths":
            suggest = "as_paths"
        elif key == "routeExists":
            suggest = "route_exists"
        elif key == "vpnNeighborMacs":
            suggest = "vpn_neighbor_macs"
        elif key == "vpnPathSla":
            suggest = "vpn_path_sla"
        elif key == "vpnPaths":
            suggest = "vpn_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateRoutingPoliciesTermMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateRoutingPoliciesTermMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateRoutingPoliciesTermMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_paths: Optional[Sequence[str]] = None,
                 communities: Optional[Sequence[str]] = None,
                 networks: Optional[Sequence[str]] = None,
                 prefixes: Optional[Sequence[str]] = None,
                 protocols: Optional[Sequence[str]] = None,
                 route_exists: Optional['outputs.GatewaytemplateRoutingPoliciesTermMatchingRouteExists'] = None,
                 vpn_neighbor_macs: Optional[Sequence[str]] = None,
                 vpn_path_sla: Optional['outputs.GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla'] = None,
                 vpn_paths: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] as_paths: takes regular expression
        :param Sequence[str] prefixes: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        :param Sequence[str] protocols: `direct`, `bgp`, `osp`, ...
        :param Sequence[str] vpn_neighbor_macs: overlay-facing criteria (used for bgp_config where via=vpn)
        :param Sequence[str] vpn_paths: overlay-facing criteria (used for bgp_config where via=vpn)
               ordered-
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_exists is not None:
            pulumi.set(__self__, "route_exists", route_exists)
        if vpn_neighbor_macs is not None:
            pulumi.set(__self__, "vpn_neighbor_macs", vpn_neighbor_macs)
        if vpn_path_sla is not None:
            pulumi.set(__self__, "vpn_path_sla", vpn_path_sla)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[Sequence[str]]:
        """
        takes regular expression
        """
        return pulumi.get(self, "as_paths")

    @property
    @pulumi.getter
    def communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "communities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[Sequence[str]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter
    def protocols(self) -> Optional[Sequence[str]]:
        """
        `direct`, `bgp`, `osp`, ...
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="routeExists")
    def route_exists(self) -> Optional['outputs.GatewaytemplateRoutingPoliciesTermMatchingRouteExists']:
        return pulumi.get(self, "route_exists")

    @property
    @pulumi.getter(name="vpnNeighborMacs")
    def vpn_neighbor_macs(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        """
        return pulumi.get(self, "vpn_neighbor_macs")

    @property
    @pulumi.getter(name="vpnPathSla")
    def vpn_path_sla(self) -> Optional['outputs.GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla']:
        return pulumi.get(self, "vpn_path_sla")

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[Sequence[str]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        ordered-
        """
        return pulumi.get(self, "vpn_paths")


@pulumi.output_type
class GatewaytemplateRoutingPoliciesTermMatchingRouteExists(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vrfName":
            suggest = "vrf_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateRoutingPoliciesTermMatchingRouteExists. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateRoutingPoliciesTermMatchingRouteExists.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 route: Optional[str] = None,
                 vrf_name: Optional[str] = None):
        """
        :param str vrf_name: name of the vrf instance
               it can also be the name of the VPN or wan if they
        """
        if route is not None:
            pulumi.set(__self__, "route", route)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def route(self) -> Optional[str]:
        return pulumi.get(self, "route")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[str]:
        """
        name of the vrf instance
        it can also be the name of the VPN or wan if they
        """
        return pulumi.get(self, "vrf_name")


@pulumi.output_type
class GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxJitter":
            suggest = "max_jitter"
        elif key == "maxLatency":
            suggest = "max_latency"
        elif key == "maxLoss":
            suggest = "max_loss"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateRoutingPoliciesTermMatchingVpnPathSla.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_jitter: Optional[int] = None,
                 max_latency: Optional[int] = None,
                 max_loss: Optional[int] = None):
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[int]:
        return pulumi.get(self, "max_jitter")

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[int]:
        return pulumi.get(self, "max_latency")

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[int]:
        return pulumi.get(self, "max_loss")


@pulumi.output_type
class GatewaytemplateServicePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localRouting":
            suggest = "local_routing"
        elif key == "pathPreference":
            suggest = "path_preference"
        elif key == "servicepolicyId":
            suggest = "servicepolicy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateServicePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateServicePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateServicePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 appqoe: Optional['outputs.GatewaytemplateServicePolicyAppqoe'] = None,
                 ewfs: Optional[Sequence['outputs.GatewaytemplateServicePolicyEwf']] = None,
                 idp: Optional['outputs.GatewaytemplateServicePolicyIdp'] = None,
                 local_routing: Optional[bool] = None,
                 name: Optional[str] = None,
                 path_preference: Optional[str] = None,
                 servicepolicy_id: Optional[str] = None,
                 services: Optional[Sequence[str]] = None,
                 tenants: Optional[Sequence[str]] = None):
        """
        :param str action: enum: `allow`, `deny`
        :param 'GatewaytemplateServicePolicyAppqoeArgs' appqoe: For SRX Only
        :param bool local_routing: access within the same VRF
        :param str path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        :param str servicepolicy_id: used to link servicepolicy defined at org level and overwrite some attributes
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if appqoe is not None:
            pulumi.set(__self__, "appqoe", appqoe)
        if ewfs is not None:
            pulumi.set(__self__, "ewfs", ewfs)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if local_routing is not None:
            pulumi.set(__self__, "local_routing", local_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_preference is not None:
            pulumi.set(__self__, "path_preference", path_preference)
        if servicepolicy_id is not None:
            pulumi.set(__self__, "servicepolicy_id", servicepolicy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def appqoe(self) -> Optional['outputs.GatewaytemplateServicePolicyAppqoe']:
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @property
    @pulumi.getter
    def ewfs(self) -> Optional[Sequence['outputs.GatewaytemplateServicePolicyEwf']]:
        return pulumi.get(self, "ewfs")

    @property
    @pulumi.getter
    def idp(self) -> Optional['outputs.GatewaytemplateServicePolicyIdp']:
        return pulumi.get(self, "idp")

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> Optional[bool]:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> Optional[str]:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @property
    @pulumi.getter(name="servicepolicyId")
    def servicepolicy_id(self) -> Optional[str]:
        """
        used to link servicepolicy defined at org level and overwrite some attributes
        """
        return pulumi.get(self, "servicepolicy_id")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def tenants(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GatewaytemplateServicePolicyAppqoe(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplateServicePolicyEwf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "blockMessage":
            suggest = "block_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateServicePolicyEwf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateServicePolicyEwf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateServicePolicyEwf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 block_message: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 profile: Optional[str] = None):
        """
        :param str profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[str]:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GatewaytemplateServicePolicyIdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "idpprofileId":
            suggest = "idpprofile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateServicePolicyIdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateServicePolicyIdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateServicePolicyIdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 idpprofile_id: Optional[str] = None,
                 profile: Optional[str] = None):
        """
        :param str idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param str profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[str]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GatewaytemplateTunnelConfigs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoProvision":
            suggest = "auto_provision"
        elif key == "ikeLifetime":
            suggest = "ike_lifetime"
        elif key == "ikeMode":
            suggest = "ike_mode"
        elif key == "ikeProposals":
            suggest = "ike_proposals"
        elif key == "ipsecLifetime":
            suggest = "ipsec_lifetime"
        elif key == "ipsecProposals":
            suggest = "ipsec_proposals"
        elif key == "localId":
            suggest = "local_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_provision: Optional['outputs.GatewaytemplateTunnelConfigsAutoProvision'] = None,
                 ike_lifetime: Optional[int] = None,
                 ike_mode: Optional[str] = None,
                 ike_proposals: Optional[Sequence['outputs.GatewaytemplateTunnelConfigsIkeProposal']] = None,
                 ipsec_lifetime: Optional[int] = None,
                 ipsec_proposals: Optional[Sequence['outputs.GatewaytemplateTunnelConfigsIpsecProposal']] = None,
                 local_id: Optional[str] = None,
                 mode: Optional[str] = None,
                 primary: Optional['outputs.GatewaytemplateTunnelConfigsPrimary'] = None,
                 probe: Optional['outputs.GatewaytemplateTunnelConfigsProbe'] = None,
                 protocol: Optional[str] = None,
                 provider: Optional[str] = None,
                 psk: Optional[str] = None,
                 secondary: Optional['outputs.GatewaytemplateTunnelConfigsSecondary'] = None,
                 version: Optional[str] = None):
        """
        :param int ike_lifetime: Only if `provider`== `custom-ipsec`
        :param str ike_mode: Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        :param Sequence['GatewaytemplateTunnelConfigsIkeProposalArgs'] ike_proposals: if `provider`== `custom-ipsec`
        :param int ipsec_lifetime: if `provider`== `custom-ipsec`
        :param Sequence['GatewaytemplateTunnelConfigsIpsecProposalArgs'] ipsec_proposals: Only if  `provider`== `custom-ipsec`
        :param str local_id: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str mode: enum: `active-active`, `active-standby`
        :param 'GatewaytemplateTunnelConfigsProbeArgs' probe: Only if `provider`== `custom-ipsec`
        :param str protocol: Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        :param str provider: enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        :param str psk: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param str version: Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        if auto_provision is not None:
            pulumi.set(__self__, "auto_provision", auto_provision)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_mode is not None:
            pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_proposals is not None:
            pulumi.set(__self__, "ike_proposals", ike_proposals)
        if ipsec_lifetime is not None:
            pulumi.set(__self__, "ipsec_lifetime", ipsec_lifetime)
        if ipsec_proposals is not None:
            pulumi.set(__self__, "ipsec_proposals", ipsec_proposals)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoProvision")
    def auto_provision(self) -> Optional['outputs.GatewaytemplateTunnelConfigsAutoProvision']:
        return pulumi.get(self, "auto_provision")

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[int]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_lifetime")

    @property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        """
        return pulumi.get(self, "ike_mode")

    @property
    @pulumi.getter(name="ikeProposals")
    def ike_proposals(self) -> Optional[Sequence['outputs.GatewaytemplateTunnelConfigsIkeProposal']]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_proposals")

    @property
    @pulumi.getter(name="ipsecLifetime")
    def ipsec_lifetime(self) -> Optional[int]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_lifetime")

    @property
    @pulumi.getter(name="ipsecProposals")
    def ipsec_proposals(self) -> Optional[Sequence['outputs.GatewaytemplateTunnelConfigsIpsecProposal']]:
        """
        Only if  `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_proposals")

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "local_id")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        enum: `active-active`, `active-standby`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.GatewaytemplateTunnelConfigsPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def probe(self) -> Optional['outputs.GatewaytemplateTunnelConfigsProbe']:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "probe")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def psk(self) -> Optional[str]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.GatewaytemplateTunnelConfigsSecondary']:
        return pulumi.get(self, "secondary")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GatewaytemplateTunnelConfigsAutoProvision(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 latlng: Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionLatlng'] = None,
                 primary: Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionPrimary'] = None,
                 region: Optional[str] = None,
                 secondary: Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionSecondary'] = None):
        """
        :param str region: enum: `APAC`, `Americas`, `EMEA`, `auto`
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if latlng is not None:
            pulumi.set(__self__, "latlng", latlng)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def latlng(self) -> Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionLatlng']:
        return pulumi.get(self, "latlng")

    @property
    @pulumi.getter
    def primary(self) -> Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionPrimary']:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        enum: `APAC`, `Americas`, `EMEA`, `auto`
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def secondary(self) -> Optional['outputs.GatewaytemplateTunnelConfigsAutoProvisionSecondary']:
        return pulumi.get(self, "secondary")


@pulumi.output_type
class GatewaytemplateTunnelConfigsAutoProvisionLatlng(dict):
    def __init__(__self__, *,
                 lat: float,
                 lng: float):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> float:
        return pulumi.get(self, "lat")

    @property
    @pulumi.getter
    def lng(self) -> float:
        return pulumi.get(self, "lng")


@pulumi.output_type
class GatewaytemplateTunnelConfigsAutoProvisionPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsAutoProvisionPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsAutoProvisionPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewaytemplateTunnelConfigsAutoProvisionSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numHosts":
            suggest = "num_hosts"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsAutoProvisionSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsAutoProvisionSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 num_hosts: Optional[str] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[str]:
        return pulumi.get(self, "num_hosts")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewaytemplateTunnelConfigsIkeProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsIkeProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsIkeProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsIkeProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class GatewaytemplateTunnelConfigsIpsecProposal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authAlgo":
            suggest = "auth_algo"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encAlgo":
            suggest = "enc_algo"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsIpsecProposal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsIpsecProposal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsIpsecProposal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_algo: Optional[str] = None,
                 dh_group: Optional[str] = None,
                 enc_algo: Optional[str] = None):
        """
        :param str auth_algo: enum: `md5`, `sha1`, `sha2`
        :param str dh_group: Only if `provider`== `custom-ipsec`. enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param str enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[str]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[str]:
        """
        Only if `provider`== `custom-ipsec`. enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[str]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")


@pulumi.output_type
class GatewaytemplateTunnelConfigsPrimary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsPrimary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsPrimary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsPrimary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewaytemplateTunnelConfigsProbe(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 threshold: Optional[int] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int interval: how often to trigger the probe
        :param int threshold: number of consecutive misses before declaring the tunnel down
        :param int timeout: time within which to complete the connectivity check
        :param str type: enum: `http`, `icmp`
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        how often to trigger the probe
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        number of consecutive misses before declaring the tunnel down
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        time within which to complete the connectivity check
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GatewaytemplateTunnelConfigsSecondary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIps":
            suggest = "internal_ips"
        elif key == "probeIps":
            suggest = "probe_ips"
        elif key == "remoteIds":
            suggest = "remote_ids"
        elif key == "wanNames":
            suggest = "wan_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelConfigsSecondary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelConfigsSecondary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelConfigsSecondary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 internal_ips: Optional[Sequence[str]] = None,
                 probe_ips: Optional[Sequence[str]] = None,
                 remote_ids: Optional[Sequence[str]] = None,
                 wan_names: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param Sequence[str] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[Sequence[str]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "probe_ips")

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[Sequence[str]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "wan_names")


@pulumi.output_type
class GatewaytemplateTunnelProviderOptions(dict):
    def __init__(__self__, *,
                 jse: Optional['outputs.GatewaytemplateTunnelProviderOptionsJse'] = None,
                 zscaler: Optional['outputs.GatewaytemplateTunnelProviderOptionsZscaler'] = None):
        """
        :param 'GatewaytemplateTunnelProviderOptionsJseArgs' jse: for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        :param 'GatewaytemplateTunnelProviderOptionsZscalerArgs' zscaler: for zscaler-ipsec and zscaler-gre
        """
        if jse is not None:
            pulumi.set(__self__, "jse", jse)
        if zscaler is not None:
            pulumi.set(__self__, "zscaler", zscaler)

    @property
    @pulumi.getter
    def jse(self) -> Optional['outputs.GatewaytemplateTunnelProviderOptionsJse']:
        """
        for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        """
        return pulumi.get(self, "jse")

    @property
    @pulumi.getter
    def zscaler(self) -> Optional['outputs.GatewaytemplateTunnelProviderOptionsZscaler']:
        """
        for zscaler-ipsec and zscaler-gre
        """
        return pulumi.get(self, "zscaler")


@pulumi.output_type
class GatewaytemplateTunnelProviderOptionsJse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "numUsers":
            suggest = "num_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelProviderOptionsJse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelProviderOptionsJse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelProviderOptionsJse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 num_users: Optional[int] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_users is not None:
            pulumi.set(__self__, "num_users", num_users)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numUsers")
    def num_users(self) -> Optional[int]:
        return pulumi.get(self, "num_users")


@pulumi.output_type
class GatewaytemplateTunnelProviderOptionsZscaler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "subLocations":
            suggest = "sub_locations"
        elif key == "uploadMbps":
            suggest = "upload_mbps"
        elif key == "useXff":
            suggest = "use_xff"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelProviderOptionsZscaler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelProviderOptionsZscaler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelProviderOptionsZscaler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 name: Optional[str] = None,
                 sub_locations: Optional[Sequence['outputs.GatewaytemplateTunnelProviderOptionsZscalerSubLocation']] = None,
                 upload_mbps: Optional[int] = None,
                 use_xff: Optional[bool] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param Sequence['GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs'] sub_locations: if `use_xff`==`true`
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        :param bool use_xff: location uses proxy chaining to forward traffic
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_locations is not None:
            pulumi.set(__self__, "sub_locations", sub_locations)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)
        if use_xff is not None:
            pulumi.set(__self__, "use_xff", use_xff)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subLocations")
    def sub_locations(self) -> Optional[Sequence['outputs.GatewaytemplateTunnelProviderOptionsZscalerSubLocation']]:
        """
        if `use_xff`==`true`
        """
        return pulumi.get(self, "sub_locations")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @property
    @pulumi.getter(name="useXff")
    def use_xff(self) -> Optional[bool]:
        """
        location uses proxy chaining to forward traffic
        """
        return pulumi.get(self, "use_xff")


@pulumi.output_type
class GatewaytemplateTunnelProviderOptionsZscalerSubLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aupAcceptanceRequired":
            suggest = "aup_acceptance_required"
        elif key == "aupExpire":
            suggest = "aup_expire"
        elif key == "aupSslProxy":
            suggest = "aup_ssl_proxy"
        elif key == "downloadMbps":
            suggest = "download_mbps"
        elif key == "enableAup":
            suggest = "enable_aup"
        elif key == "enableCaution":
            suggest = "enable_caution"
        elif key == "enforceAuthentication":
            suggest = "enforce_authentication"
        elif key == "uploadMbps":
            suggest = "upload_mbps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaytemplateTunnelProviderOptionsZscalerSubLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaytemplateTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaytemplateTunnelProviderOptionsZscalerSubLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aup_acceptance_required: Optional[bool] = None,
                 aup_expire: Optional[int] = None,
                 aup_ssl_proxy: Optional[bool] = None,
                 download_mbps: Optional[int] = None,
                 enable_aup: Optional[bool] = None,
                 enable_caution: Optional[bool] = None,
                 enforce_authentication: Optional[bool] = None,
                 subnets: Optional[Sequence[str]] = None,
                 upload_mbps: Optional[int] = None):
        """
        :param int aup_expire: days before AUP is requested again
        :param bool aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param int download_mbps: the download bandwidth cap of the link, in Mbps
        :param bool enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param bool enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param int upload_mbps: the download bandwidth cap of the link, in Mbps
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[bool]:
        return pulumi.get(self, "aup_acceptance_required")

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[int]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[bool]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[bool]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[bool]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[int]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")


@pulumi.output_type
class GatewaytemplateVrfConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GatewaytemplateVrfInstances(dict):
    def __init__(__self__, *,
                 networks: Optional[Sequence[str]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")


@pulumi.output_type
class IdpprofileOverwrite(dict):
    def __init__(__self__, *,
                 name: str,
                 action: Optional[str] = None,
                 matching: Optional['outputs.IdpprofileOverwriteMatching'] = None):
        """
        :param str action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> Optional['outputs.IdpprofileOverwriteMatching']:
        return pulumi.get(self, "matching")


@pulumi.output_type
class IdpprofileOverwriteMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attackNames":
            suggest = "attack_names"
        elif key == "dstSubnets":
            suggest = "dst_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdpprofileOverwriteMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdpprofileOverwriteMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdpprofileOverwriteMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attack_names: Optional[Sequence[str]] = None,
                 dst_subnets: Optional[Sequence[str]] = None,
                 severities: Optional[Sequence[str]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "attack_names")

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_subnets")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "severities")


@pulumi.output_type
class InventoryDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "claimCode":
            suggest = "claim_code"
        elif key == "orgId":
            suggest = "org_id"
        elif key == "siteId":
            suggest = "site_id"
        elif key == "vcMac":
            suggest = "vc_mac"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InventoryDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InventoryDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InventoryDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 claim_code: str,
                 hostname: Optional[str] = None,
                 id: Optional[str] = None,
                 mac: Optional[str] = None,
                 model: Optional[str] = None,
                 org_id: Optional[str] = None,
                 serial: Optional[str] = None,
                 site_id: Optional[str] = None,
                 type: Optional[str] = None,
                 vc_mac: Optional[str] = None):
        """
        :param str hostname: Device Hostname
        :param str id: Mist Device ID
        :param str mac: MAC address
        :param str model: device model
        :param str serial: device serial
        :param str site_id: site id if assigned, null if not assigned
        :param str vc_mac: Virtual Chassis MAC Address
        """
        pulumi.set(__self__, "claim_code", claim_code)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vc_mac is not None:
            pulumi.set(__self__, "vc_mac", vc_mac)

    @property
    @pulumi.getter(name="claimCode")
    def claim_code(self) -> str:
        return pulumi.get(self, "claim_code")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Device Hostname
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Mist Device ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mac(self) -> Optional[str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> Optional[str]:
        """
        device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def serial(self) -> Optional[str]:
        """
        device serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[str]:
        """
        site id if assigned, null if not assigned
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vcMac")
    def vc_mac(self) -> Optional[str]:
        """
        Virtual Chassis MAC Address
        """
        return pulumi.get(self, "vc_mac")


@pulumi.output_type
class NacruleMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "portTypes":
            suggest = "port_types"
        elif key == "siteIds":
            suggest = "site_ids"
        elif key == "sitegroupIds":
            suggest = "sitegroup_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NacruleMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NacruleMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NacruleMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: Optional[str] = None,
                 nactags: Optional[Sequence[str]] = None,
                 port_types: Optional[Sequence[str]] = None,
                 site_ids: Optional[Sequence[str]] = None,
                 sitegroup_ids: Optional[Sequence[str]] = None,
                 vendors: Optional[Sequence[str]] = None):
        """
        :param str auth_type: enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        :param Sequence[str] site_ids: list of site ids to match
        :param Sequence[str] sitegroup_ids: list of sitegroup ids to match
        :param Sequence[str] vendors: list of vendors to match
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if nactags is not None:
            pulumi.set(__self__, "nactags", nactags)
        if port_types is not None:
            pulumi.set(__self__, "port_types", port_types)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        """
        enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def nactags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nactags")

    @property
    @pulumi.getter(name="portTypes")
    def port_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "port_types")

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[Sequence[str]]:
        """
        list of site ids to match
        """
        return pulumi.get(self, "site_ids")

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[Sequence[str]]:
        """
        list of sitegroup ids to match
        """
        return pulumi.get(self, "sitegroup_ids")

    @property
    @pulumi.getter
    def vendors(self) -> Optional[Sequence[str]]:
        """
        list of vendors to match
        """
        return pulumi.get(self, "vendors")


@pulumi.output_type
class NacruleNotMatching(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"
        elif key == "portTypes":
            suggest = "port_types"
        elif key == "siteIds":
            suggest = "site_ids"
        elif key == "sitegroupIds":
            suggest = "sitegroup_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NacruleNotMatching. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NacruleNotMatching.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NacruleNotMatching.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_type: Optional[str] = None,
                 nactags: Optional[Sequence[str]] = None,
                 port_types: Optional[Sequence[str]] = None,
                 site_ids: Optional[Sequence[str]] = None,
                 sitegroup_ids: Optional[Sequence[str]] = None,
                 vendors: Optional[Sequence[str]] = None):
        """
        :param str auth_type: enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        :param Sequence[str] site_ids: list of site ids to match
        :param Sequence[str] sitegroup_ids: list of sitegroup ids to match
        :param Sequence[str] vendors: list of vendors to match
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if nactags is not None:
            pulumi.set(__self__, "nactags", nactags)
        if port_types is not None:
            pulumi.set(__self__, "port_types", port_types)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        """
        enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def nactags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nactags")

    @property
    @pulumi.getter(name="portTypes")
    def port_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "port_types")

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[Sequence[str]]:
        """
        list of site ids to match
        """
        return pulumi.get(self, "site_ids")

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[Sequence[str]]:
        """
        list of sitegroup ids to match
        """
        return pulumi.get(self, "sitegroup_ids")

    @property
    @pulumi.getter
    def vendors(self) -> Optional[Sequence[str]]:
        """
        list of vendors to match
        """
        return pulumi.get(self, "vendors")


@pulumi.output_type
class NetworkInternalAccess(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NetworkInternetAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createSimpleServicePolicy":
            suggest = "create_simple_service_policy"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "staticNat":
            suggest = "static_nat"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInternetAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInternetAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInternetAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_simple_service_policy: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.NetworkInternetAccessDestinationNat']] = None,
                 enabled: Optional[bool] = None,
                 restricted: Optional[bool] = None,
                 static_nat: Optional[Mapping[str, 'outputs.NetworkInternetAccessStaticNat']] = None):
        """
        :param Mapping[str, 'NetworkInternetAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param bool restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param Mapping[str, 'NetworkInternetAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[bool]:
        return pulumi.get(self, "create_simple_service_policy")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.NetworkInternetAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def restricted(self) -> Optional[bool]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.NetworkInternetAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")


@pulumi.output_type
class NetworkInternetAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInternetAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInternetAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInternetAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class NetworkInternetAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkInternetAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkInternetAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkInternetAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class NetworkTenants(dict):
    def __init__(__self__, *,
                 addresses: Optional[Sequence[str]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "addresses")


@pulumi.output_type
class NetworkVpnAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedSubnet":
            suggest = "advertised_subnet"
        elif key == "allowPing":
            suggest = "allow_ping"
        elif key == "destinationNat":
            suggest = "destination_nat"
        elif key == "natPool":
            suggest = "nat_pool"
        elif key == "noReadvertiseToLanBgp":
            suggest = "no_readvertise_to_lan_bgp"
        elif key == "noReadvertiseToLanOspf":
            suggest = "no_readvertise_to_lan_ospf"
        elif key == "noReadvertiseToOverlay":
            suggest = "no_readvertise_to_overlay"
        elif key == "otherVrfs":
            suggest = "other_vrfs"
        elif key == "sourceNat":
            suggest = "source_nat"
        elif key == "staticNat":
            suggest = "static_nat"
        elif key == "summarizedSubnet":
            suggest = "summarized_subnet"
        elif key == "summarizedSubnetToLanBgp":
            suggest = "summarized_subnet_to_lan_bgp"
        elif key == "summarizedSubnetToLanOspf":
            suggest = "summarized_subnet_to_lan_ospf"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkVpnAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkVpnAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkVpnAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_subnet: Optional[str] = None,
                 allow_ping: Optional[bool] = None,
                 destination_nat: Optional[Mapping[str, 'outputs.NetworkVpnAccessDestinationNat']] = None,
                 nat_pool: Optional[str] = None,
                 no_readvertise_to_lan_bgp: Optional[bool] = None,
                 no_readvertise_to_lan_ospf: Optional[bool] = None,
                 no_readvertise_to_overlay: Optional[bool] = None,
                 other_vrfs: Optional[Sequence[str]] = None,
                 routed: Optional[bool] = None,
                 source_nat: Optional['outputs.NetworkVpnAccessSourceNat'] = None,
                 static_nat: Optional[Mapping[str, 'outputs.NetworkVpnAccessStaticNat']] = None,
                 summarized_subnet: Optional[str] = None,
                 summarized_subnet_to_lan_bgp: Optional[str] = None,
                 summarized_subnet_to_lan_ospf: Optional[str] = None):
        """
        :param str advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param bool allow_ping: whether to allow ping from vpn into this routed network
        :param Mapping[str, 'NetworkVpnAccessDestinationNatArgs'] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param str nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param bool no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param bool no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param bool no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param Sequence[str] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param bool routed: whether this network is routable
        :param 'NetworkVpnAccessSourceNatArgs' source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param Mapping[str, 'NetworkVpnAccessStaticNatArgs'] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param str summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param str summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param str summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[str]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[bool]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[Mapping[str, 'outputs.NetworkVpnAccessDestinationNat']]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[str]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[bool]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[bool]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[bool]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[Sequence[str]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @property
    @pulumi.getter
    def routed(self) -> Optional[bool]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional['outputs.NetworkVpnAccessSourceNat']:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[Mapping[str, 'outputs.NetworkVpnAccessStaticNat']]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[str]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[str]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[str]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")


@pulumi.output_type
class NetworkVpnAccessDestinationNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkVpnAccessDestinationNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkVpnAccessDestinationNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkVpnAccessDestinationNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 port: Optional[int] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class NetworkVpnAccessSourceNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIp":
            suggest = "external_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkVpnAccessSourceNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkVpnAccessSourceNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkVpnAccessSourceNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ip: Optional[str] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[str]:
        return pulumi.get(self, "external_ip")


@pulumi.output_type
class NetworkVpnAccessStaticNat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"
        elif key == "wanName":
            suggest = "wan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkVpnAccessStaticNat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkVpnAccessStaticNat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkVpnAccessStaticNat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 internal_ip: Optional[str] = None,
                 name: Optional[str] = None,
                 wan_name: Optional[str] = None):
        """
        :param str wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[str]:
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[str]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")


@pulumi.output_type
class NetworktemplateAclPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "srcTags":
            suggest = "src_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateAclPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateAclPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateAclPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.NetworktemplateAclPolicyAction']] = None,
                 name: Optional[str] = None,
                 src_tags: Optional[Sequence[str]] = None):
        """
        :param Sequence['NetworktemplateAclPolicyActionArgs'] actions: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        :param Sequence[str] src_tags: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_tags is not None:
            pulumi.set(__self__, "src_tags", src_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.NetworktemplateAclPolicyAction']]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="srcTags")
    def src_tags(self) -> Optional[Sequence[str]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "src_tags")


@pulumi.output_type
class NetworktemplateAclPolicyAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstTag":
            suggest = "dst_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateAclPolicyAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateAclPolicyAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateAclPolicyAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 dst_tag: Optional[str] = None):
        """
        :param str action: enum: `allow`, `deny`
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if dst_tag is not None:
            pulumi.set(__self__, "dst_tag", dst_tag)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dstTag")
    def dst_tag(self) -> Optional[str]:
        return pulumi.get(self, "dst_tag")


@pulumi.output_type
class NetworktemplateAclTags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gbpTag":
            suggest = "gbp_tag"
        elif key == "radiusGroup":
            suggest = "radius_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateAclTags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateAclTags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateAclTags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 gbp_tag: Optional[int] = None,
                 macs: Optional[Sequence[str]] = None,
                 network: Optional[str] = None,
                 radius_group: Optional[str] = None,
                 specs: Optional[Sequence['outputs.NetworktemplateAclTagsSpec']] = None,
                 subnets: Optional[Sequence[str]] = None):
        """
        :param str type: enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        :param int gbp_tag: required if
               - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
               - `type`==`static_gbp` (applying gbp tag against matching conditions)
        :param Sequence[str] macs: required if 
               - `type`==`mac`
               - `type`==`static_gbp` if from matching mac
        :param str network: if:
                 * `type`==`mac` (optional. default is `any`)
                 * `type`==`subnet` (optional. default is `any`)
                 * `type`==`network`
                 * `type`==`resource` (optional. default is `any`)
                 * `type`==`static_gbp` if from matching network (vlan)'
        :param str radius_group: required if:
                 * `type`==`radius_group`
                 * `type`==`static_gbp`
               if from matching radius_group
        :param Sequence['NetworktemplateAclTagsSpecArgs'] specs: if `type`==`resource`
               empty means unrestricted, i.e. any
        :param Sequence[str] subnets: if 
               - `type`==`subnet` 
               - `type`==`resource` (optional. default is `any`)
               - `type`==`static_gbp` if from matching subnet
        """
        pulumi.set(__self__, "type", type)
        if gbp_tag is not None:
            pulumi.set(__self__, "gbp_tag", gbp_tag)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if radius_group is not None:
            pulumi.set(__self__, "radius_group", radius_group)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="gbpTag")
    def gbp_tag(self) -> Optional[int]:
        """
        required if
        - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
        - `type`==`static_gbp` (applying gbp tag against matching conditions)
        """
        return pulumi.get(self, "gbp_tag")

    @property
    @pulumi.getter
    def macs(self) -> Optional[Sequence[str]]:
        """
        required if 
        - `type`==`mac`
        - `type`==`static_gbp` if from matching mac
        """
        return pulumi.get(self, "macs")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        if:
          * `type`==`mac` (optional. default is `any`)
          * `type`==`subnet` (optional. default is `any`)
          * `type`==`network`
          * `type`==`resource` (optional. default is `any`)
          * `type`==`static_gbp` if from matching network (vlan)'
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="radiusGroup")
    def radius_group(self) -> Optional[str]:
        """
        required if:
          * `type`==`radius_group`
          * `type`==`static_gbp`
        if from matching radius_group
        """
        return pulumi.get(self, "radius_group")

    @property
    @pulumi.getter
    def specs(self) -> Optional[Sequence['outputs.NetworktemplateAclTagsSpec']]:
        """
        if `type`==`resource`
        empty means unrestricted, i.e. any
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        """
        if 
        - `type`==`subnet` 
        - `type`==`resource` (optional. default is `any`)
        - `type`==`static_gbp` if from matching subnet
        """
        return pulumi.get(self, "subnets")


@pulumi.output_type
class NetworktemplateAclTagsSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateAclTagsSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateAclTagsSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateAclTagsSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str port_range: matched dst port, "0" means any
        :param str protocol: `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class NetworktemplateDhcpSnooping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allNetworks":
            suggest = "all_networks"
        elif key == "enableArpSpoofCheck":
            suggest = "enable_arp_spoof_check"
        elif key == "enableIpSourceGuard":
            suggest = "enable_ip_source_guard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateDhcpSnooping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateDhcpSnooping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateDhcpSnooping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_networks: Optional[bool] = None,
                 enable_arp_spoof_check: Optional[bool] = None,
                 enable_ip_source_guard: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 networks: Optional[Sequence[str]] = None):
        """
        :param bool enable_arp_spoof_check: Enable for dynamic ARP inspection check
        :param bool enable_ip_source_guard: Enable for check for forging source IP address
        :param Sequence[str] networks: if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if enable_arp_spoof_check is not None:
            pulumi.set(__self__, "enable_arp_spoof_check", enable_arp_spoof_check)
        if enable_ip_source_guard is not None:
            pulumi.set(__self__, "enable_ip_source_guard", enable_ip_source_guard)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[bool]:
        return pulumi.get(self, "all_networks")

    @property
    @pulumi.getter(name="enableArpSpoofCheck")
    def enable_arp_spoof_check(self) -> Optional[bool]:
        """
        Enable for dynamic ARP inspection check
        """
        return pulumi.get(self, "enable_arp_spoof_check")

    @property
    @pulumi.getter(name="enableIpSourceGuard")
    def enable_ip_source_guard(self) -> Optional[bool]:
        """
        Enable for check for forging source IP address
        """
        return pulumi.get(self, "enable_ip_source_guard")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        return pulumi.get(self, "networks")


@pulumi.output_type
class NetworktemplateExtraRoutes6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextQualified":
            suggest = "next_qualified"
        elif key == "noResolve":
            suggest = "no_resolve"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateExtraRoutes6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateExtraRoutes6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateExtraRoutes6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 via: str,
                 discard: Optional[bool] = None,
                 metric: Optional[int] = None,
                 next_qualified: Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutes6NextQualified']] = None,
                 no_resolve: Optional[bool] = None,
                 preference: Optional[int] = None):
        """
        :param str via: next-hop IP Address
        :param bool discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter
    def discard(self) -> Optional[bool]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutes6NextQualified']]:
        return pulumi.get(self, "next_qualified")

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[bool]:
        return pulumi.get(self, "no_resolve")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class NetworktemplateExtraRoutes6NextQualified(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 preference: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class NetworktemplateExtraRoutes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextQualified":
            suggest = "next_qualified"
        elif key == "noResolve":
            suggest = "no_resolve"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateExtraRoutes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateExtraRoutes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateExtraRoutes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 via: str,
                 discard: Optional[bool] = None,
                 metric: Optional[int] = None,
                 next_qualified: Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutesNextQualified']] = None,
                 no_resolve: Optional[bool] = None,
                 preference: Optional[int] = None):
        """
        :param str via: next-hop IP Address
        :param bool discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @property
    @pulumi.getter
    def discard(self) -> Optional[bool]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutesNextQualified']]:
        return pulumi.get(self, "next_qualified")

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[bool]:
        return pulumi.get(self, "no_resolve")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class NetworktemplateExtraRoutesNextQualified(dict):
    def __init__(__self__, *,
                 metric: Optional[int] = None,
                 preference: Optional[int] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def preference(self) -> Optional[int]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class NetworktemplateMistNac(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 network: Optional[str] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")


@pulumi.output_type
class NetworktemplateNetworks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"
        elif key == "isolationVlanId":
            suggest = "isolation_vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateNetworks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateNetworks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateNetworks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_id: str,
                 isolation: Optional[bool] = None,
                 isolation_vlan_id: Optional[str] = None,
                 subnet: Optional[str] = None):
        """
        :param bool isolation: whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
               NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        :param str subnet: optional for pure switching, required when L3 / routing features are used
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if isolation_vlan_id is not None:
            pulumi.set(__self__, "isolation_vlan_id", isolation_vlan_id)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> str:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter
    def isolation(self) -> Optional[bool]:
        """
        whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
        NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        """
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="isolationVlanId")
    def isolation_vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "isolation_vlan_id")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        """
        optional for pure switching, required when L3 / routing features are used
        """
        return pulumi.get(self, "subnet")


@pulumi.output_type
class NetworktemplatePortMirroring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputNetworksIngresses":
            suggest = "input_networks_ingresses"
        elif key == "inputPortIdsEgresses":
            suggest = "input_port_ids_egresses"
        elif key == "inputPortIdsIngresses":
            suggest = "input_port_ids_ingresses"
        elif key == "outputNetwork":
            suggest = "output_network"
        elif key == "outputPortId":
            suggest = "output_port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplatePortMirroring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplatePortMirroring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplatePortMirroring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_networks_ingresses: Optional[Sequence[str]] = None,
                 input_port_ids_egresses: Optional[Sequence[str]] = None,
                 input_port_ids_ingresses: Optional[Sequence[str]] = None,
                 output_network: Optional[str] = None,
                 output_port_id: Optional[str] = None):
        """
        :param Sequence[str] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param str output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param str output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")


@pulumi.output_type
class NetworktemplatePortUsages(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allNetworks":
            suggest = "all_networks"
        elif key == "allowDhcpd":
            suggest = "allow_dhcpd"
        elif key == "allowMultipleSupplicants":
            suggest = "allow_multiple_supplicants"
        elif key == "bypassAuthWhenServerDown":
            suggest = "bypass_auth_when_server_down"
        elif key == "bypassAuthWhenServerDownForUnkonwnClient":
            suggest = "bypass_auth_when_server_down_for_unkonwn_client"
        elif key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dynamicVlanNetworks":
            suggest = "dynamic_vlan_networks"
        elif key == "enableMacAuth":
            suggest = "enable_mac_auth"
        elif key == "enableQos":
            suggest = "enable_qos"
        elif key == "guestNetwork":
            suggest = "guest_network"
        elif key == "interSwitchLink":
            suggest = "inter_switch_link"
        elif key == "macAuthOnly":
            suggest = "mac_auth_only"
        elif key == "macAuthProtocol":
            suggest = "mac_auth_protocol"
        elif key == "macLimit":
            suggest = "mac_limit"
        elif key == "persistMac":
            suggest = "persist_mac"
        elif key == "poeDisabled":
            suggest = "poe_disabled"
        elif key == "portAuth":
            suggest = "port_auth"
        elif key == "portNetwork":
            suggest = "port_network"
        elif key == "reauthInterval":
            suggest = "reauth_interval"
        elif key == "rejectedNetwork":
            suggest = "rejected_network"
        elif key == "resetDefaultWhen":
            suggest = "reset_default_when"
        elif key == "stormControl":
            suggest = "storm_control"
        elif key == "stpEdge":
            suggest = "stp_edge"
        elif key == "voipNetwork":
            suggest = "voip_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplatePortUsages. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplatePortUsages.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplatePortUsages.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_networks: Optional[bool] = None,
                 allow_dhcpd: Optional[bool] = None,
                 allow_multiple_supplicants: Optional[bool] = None,
                 bypass_auth_when_server_down: Optional[bool] = None,
                 bypass_auth_when_server_down_for_unkonwn_client: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 disabled: Optional[bool] = None,
                 duplex: Optional[str] = None,
                 dynamic_vlan_networks: Optional[Sequence[str]] = None,
                 enable_mac_auth: Optional[bool] = None,
                 enable_qos: Optional[bool] = None,
                 guest_network: Optional[str] = None,
                 inter_switch_link: Optional[bool] = None,
                 mac_auth_only: Optional[bool] = None,
                 mac_auth_protocol: Optional[str] = None,
                 mac_limit: Optional[int] = None,
                 mode: Optional[str] = None,
                 mtu: Optional[int] = None,
                 networks: Optional[Sequence[str]] = None,
                 persist_mac: Optional[bool] = None,
                 poe_disabled: Optional[bool] = None,
                 port_auth: Optional[str] = None,
                 port_network: Optional[str] = None,
                 reauth_interval: Optional[int] = None,
                 rejected_network: Optional[str] = None,
                 reset_default_when: Optional[str] = None,
                 rules: Optional[Sequence['outputs.NetworktemplatePortUsagesRule']] = None,
                 speed: Optional[str] = None,
                 storm_control: Optional['outputs.NetworktemplatePortUsagesStormControl'] = None,
                 stp_edge: Optional[bool] = None,
                 voip_network: Optional[str] = None):
        """
        :param bool all_networks: Only if `mode`==`trunk` whether to trunk all network/vlans
        :param bool allow_dhcpd: Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.
               
               When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        :param bool allow_multiple_supplicants: Only if `mode`!=`dynamic`
        :param bool bypass_auth_when_server_down: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        :param bool bypass_auth_when_server_down_for_unkonwn_client: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        :param str description: Only if `mode`!=`dynamic`
        :param bool disable_autoneg: Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        :param bool disabled: Only if `mode`!=`dynamic` whether the port is disabled
        :param str duplex: Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        :param Sequence[str] dynamic_vlan_networks: Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        :param bool enable_mac_auth: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        :param bool enable_qos: Only if `mode`!=`dynamic`
        :param str guest_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        :param bool inter_switch_link: Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
               NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        :param bool mac_auth_only: Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        :param str mac_auth_protocol: Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        :param int mac_limit: Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        :param str mode: `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        :param int mtu: Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        :param Sequence[str] networks: Only if `mode`==`trunk`, the list of network/vlans
        :param bool persist_mac: Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        :param bool poe_disabled: Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        :param str port_auth: Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        :param str port_network: Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        :param int reauth_interval: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        :param str rejected_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        :param str reset_default_when: Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        :param Sequence['NetworktemplatePortUsagesRuleArgs'] rules: Only if `mode`==`dynamic`
        :param str speed: Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        :param 'NetworktemplatePortUsagesStormControlArgs' storm_control: Switch storm control
               Only if `mode`!=`dynamic`
        :param bool stp_edge: Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        :param str voip_network: Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if allow_dhcpd is not None:
            pulumi.set(__self__, "allow_dhcpd", allow_dhcpd)
        if allow_multiple_supplicants is not None:
            pulumi.set(__self__, "allow_multiple_supplicants", allow_multiple_supplicants)
        if bypass_auth_when_server_down is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down", bypass_auth_when_server_down)
        if bypass_auth_when_server_down_for_unkonwn_client is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down_for_unkonwn_client", bypass_auth_when_server_down_for_unkonwn_client)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_vlan_networks is not None:
            pulumi.set(__self__, "dynamic_vlan_networks", dynamic_vlan_networks)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if enable_qos is not None:
            pulumi.set(__self__, "enable_qos", enable_qos)
        if guest_network is not None:
            pulumi.set(__self__, "guest_network", guest_network)
        if inter_switch_link is not None:
            pulumi.set(__self__, "inter_switch_link", inter_switch_link)
        if mac_auth_only is not None:
            pulumi.set(__self__, "mac_auth_only", mac_auth_only)
        if mac_auth_protocol is not None:
            pulumi.set(__self__, "mac_auth_protocol", mac_auth_protocol)
        if mac_limit is not None:
            pulumi.set(__self__, "mac_limit", mac_limit)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if persist_mac is not None:
            pulumi.set(__self__, "persist_mac", persist_mac)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_auth is not None:
            pulumi.set(__self__, "port_auth", port_auth)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if reauth_interval is not None:
            pulumi.set(__self__, "reauth_interval", reauth_interval)
        if rejected_network is not None:
            pulumi.set(__self__, "rejected_network", rejected_network)
        if reset_default_when is not None:
            pulumi.set(__self__, "reset_default_when", reset_default_when)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_edge is not None:
            pulumi.set(__self__, "stp_edge", stp_edge)
        if voip_network is not None:
            pulumi.set(__self__, "voip_network", voip_network)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[bool]:
        """
        Only if `mode`==`trunk` whether to trunk all network/vlans
        """
        return pulumi.get(self, "all_networks")

    @property
    @pulumi.getter(name="allowDhcpd")
    def allow_dhcpd(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.

        When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        """
        return pulumi.get(self, "allow_dhcpd")

    @property
    @pulumi.getter(name="allowMultipleSupplicants")
    def allow_multiple_supplicants(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "allow_multiple_supplicants")

    @property
    @pulumi.getter(name="bypassAuthWhenServerDown")
    def bypass_auth_when_server_down(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down")

    @property
    @pulumi.getter(name="bypassAuthWhenServerDownForUnkonwnClient")
    def bypass_auth_when_server_down_for_unkonwn_client(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down_for_unkonwn_client")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` whether the port is disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="dynamicVlanNetworks")
    def dynamic_vlan_networks(self) -> Optional[Sequence[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        """
        return pulumi.get(self, "dynamic_vlan_networks")

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        """
        return pulumi.get(self, "enable_mac_auth")

    @property
    @pulumi.getter(name="enableQos")
    def enable_qos(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "enable_qos")

    @property
    @pulumi.getter(name="guestNetwork")
    def guest_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        """
        return pulumi.get(self, "guest_network")

    @property
    @pulumi.getter(name="interSwitchLink")
    def inter_switch_link(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
        NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        """
        return pulumi.get(self, "inter_switch_link")

    @property
    @pulumi.getter(name="macAuthOnly")
    def mac_auth_only(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        """
        return pulumi.get(self, "mac_auth_only")

    @property
    @pulumi.getter(name="macAuthProtocol")
    def mac_auth_protocol(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        """
        return pulumi.get(self, "mac_auth_protocol")

    @property
    @pulumi.getter(name="macLimit")
    def mac_limit(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        """
        return pulumi.get(self, "mac_limit")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        """
        Only if `mode`==`trunk`, the list of network/vlans
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="persistMac")
    def persist_mac(self) -> Optional[bool]:
        """
        Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        """
        return pulumi.get(self, "persist_mac")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        """
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter(name="portAuth")
    def port_auth(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        """
        return pulumi.get(self, "port_auth")

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        """
        return pulumi.get(self, "port_network")

    @property
    @pulumi.getter(name="reauthInterval")
    def reauth_interval(self) -> Optional[int]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        """
        return pulumi.get(self, "reauth_interval")

    @property
    @pulumi.getter(name="rejectedNetwork")
    def rejected_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        """
        return pulumi.get(self, "rejected_network")

    @property
    @pulumi.getter(name="resetDefaultWhen")
    def reset_default_when(self) -> Optional[str]:
        """
        Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        """
        return pulumi.get(self, "reset_default_when")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.NetworktemplatePortUsagesRule']]:
        """
        Only if `mode`==`dynamic`
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional['outputs.NetworktemplatePortUsagesStormControl']:
        """
        Switch storm control
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "storm_control")

    @property
    @pulumi.getter(name="stpEdge")
    def stp_edge(self) -> Optional[bool]:
        """
        Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        """
        return pulumi.get(self, "stp_edge")

    @property
    @pulumi.getter(name="voipNetwork")
    def voip_network(self) -> Optional[str]:
        """
        Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        return pulumi.get(self, "voip_network")


@pulumi.output_type
class NetworktemplatePortUsagesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "equalsAnies":
            suggest = "equals_anies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplatePortUsagesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplatePortUsagesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplatePortUsagesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 src: str,
                 equals: Optional[str] = None,
                 equals_anies: Optional[Sequence[str]] = None,
                 expression: Optional[str] = None,
                 usage: Optional[str] = None):
        """
        :param str src: enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        :param Sequence[str] equals_anies: use `equals_any` to match any item in a list
        :param str expression: "[0:3]":"abcdef" > "abc"
               "split(.)[1]": "a.b.c" > "b"
               "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        :param str usage: `port_usage` name
        """
        pulumi.set(__self__, "src", src)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if equals_anies is not None:
            pulumi.set(__self__, "equals_anies", equals_anies)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter
    def equals(self) -> Optional[str]:
        return pulumi.get(self, "equals")

    @property
    @pulumi.getter(name="equalsAnies")
    def equals_anies(self) -> Optional[Sequence[str]]:
        """
        use `equals_any` to match any item in a list
        """
        return pulumi.get(self, "equals_anies")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        "[0:3]":"abcdef" > "abc"
        "split(.)[1]": "a.b.c" > "b"
        "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def usage(self) -> Optional[str]:
        """
        `port_usage` name
        """
        return pulumi.get(self, "usage")


@pulumi.output_type
class NetworktemplatePortUsagesStormControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noBroadcast":
            suggest = "no_broadcast"
        elif key == "noMulticast":
            suggest = "no_multicast"
        elif key == "noRegisteredMulticast":
            suggest = "no_registered_multicast"
        elif key == "noUnknownUnicast":
            suggest = "no_unknown_unicast"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplatePortUsagesStormControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplatePortUsagesStormControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplatePortUsagesStormControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_broadcast: Optional[bool] = None,
                 no_multicast: Optional[bool] = None,
                 no_registered_multicast: Optional[bool] = None,
                 no_unknown_unicast: Optional[bool] = None,
                 percentage: Optional[int] = None):
        """
        :param bool no_broadcast: whether to disable storm control on broadcast traffic
        :param bool no_multicast: whether to disable storm control on multicast traffic
        :param bool no_registered_multicast: whether to disable storm control on registered multicast traffic
        :param bool no_unknown_unicast: whether to disable storm control on unknown unicast traffic
        :param int percentage: bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        if no_broadcast is not None:
            pulumi.set(__self__, "no_broadcast", no_broadcast)
        if no_multicast is not None:
            pulumi.set(__self__, "no_multicast", no_multicast)
        if no_registered_multicast is not None:
            pulumi.set(__self__, "no_registered_multicast", no_registered_multicast)
        if no_unknown_unicast is not None:
            pulumi.set(__self__, "no_unknown_unicast", no_unknown_unicast)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="noBroadcast")
    def no_broadcast(self) -> Optional[bool]:
        """
        whether to disable storm control on broadcast traffic
        """
        return pulumi.get(self, "no_broadcast")

    @property
    @pulumi.getter(name="noMulticast")
    def no_multicast(self) -> Optional[bool]:
        """
        whether to disable storm control on multicast traffic
        """
        return pulumi.get(self, "no_multicast")

    @property
    @pulumi.getter(name="noRegisteredMulticast")
    def no_registered_multicast(self) -> Optional[bool]:
        """
        whether to disable storm control on registered multicast traffic
        """
        return pulumi.get(self, "no_registered_multicast")

    @property
    @pulumi.getter(name="noUnknownUnicast")
    def no_unknown_unicast(self) -> Optional[bool]:
        """
        whether to disable storm control on unknown unicast traffic
        """
        return pulumi.get(self, "no_unknown_unicast")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class NetworktemplateRadiusConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acctInterimInterval":
            suggest = "acct_interim_interval"
        elif key == "acctServers":
            suggest = "acct_servers"
        elif key == "authServers":
            suggest = "auth_servers"
        elif key == "authServersRetries":
            suggest = "auth_servers_retries"
        elif key == "authServersTimeout":
            suggest = "auth_servers_timeout"
        elif key == "coaEnabled":
            suggest = "coa_enabled"
        elif key == "coaPort":
            suggest = "coa_port"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRadiusConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRadiusConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRadiusConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acct_interim_interval: Optional[int] = None,
                 acct_servers: Optional[Sequence['outputs.NetworktemplateRadiusConfigAcctServer']] = None,
                 auth_servers: Optional[Sequence['outputs.NetworktemplateRadiusConfigAuthServer']] = None,
                 auth_servers_retries: Optional[int] = None,
                 auth_servers_timeout: Optional[int] = None,
                 coa_enabled: Optional[bool] = None,
                 coa_port: Optional[int] = None,
                 network: Optional[str] = None,
                 source_ip: Optional[str] = None):
        """
        :param int acct_interim_interval: how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        :param int auth_servers_retries: radius auth session retries
        :param int auth_servers_timeout: radius auth session timeout
        :param str network: use `network`or `source_ip`
               which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        :param str source_ip: use `network`or `source_ip`
        """
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if auth_servers_retries is not None:
            pulumi.set(__self__, "auth_servers_retries", auth_servers_retries)
        if auth_servers_timeout is not None:
            pulumi.set(__self__, "auth_servers_timeout", auth_servers_timeout)
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if coa_port is not None:
            pulumi.set(__self__, "coa_port", coa_port)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[int]:
        """
        how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        """
        return pulumi.get(self, "acct_interim_interval")

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[Sequence['outputs.NetworktemplateRadiusConfigAcctServer']]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[Sequence['outputs.NetworktemplateRadiusConfigAuthServer']]:
        return pulumi.get(self, "auth_servers")

    @property
    @pulumi.getter(name="authServersRetries")
    def auth_servers_retries(self) -> Optional[int]:
        """
        radius auth session retries
        """
        return pulumi.get(self, "auth_servers_retries")

    @property
    @pulumi.getter(name="authServersTimeout")
    def auth_servers_timeout(self) -> Optional[int]:
        """
        radius auth session timeout
        """
        return pulumi.get(self, "auth_servers_timeout")

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "coa_enabled")

    @property
    @pulumi.getter(name="coaPort")
    def coa_port(self) -> Optional[int]:
        return pulumi.get(self, "coa_port")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        use `network`or `source_ip`
        which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        """
        use `network`or `source_ip`
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class NetworktemplateRadiusConfigAcctServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRadiusConfigAcctServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRadiusConfigAcctServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRadiusConfigAcctServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class NetworktemplateRadiusConfigAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRadiusConfigAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRadiusConfigAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRadiusConfigAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Auth port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class NetworktemplateRemoteSyslog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sendToAllServers":
            suggest = "send_to_all_servers"
        elif key == "timeFormat":
            suggest = "time_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRemoteSyslog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRemoteSyslog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRemoteSyslog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive: Optional['outputs.NetworktemplateRemoteSyslogArchive'] = None,
                 console: Optional['outputs.NetworktemplateRemoteSyslogConsole'] = None,
                 enabled: Optional[bool] = None,
                 files: Optional[Sequence['outputs.NetworktemplateRemoteSyslogFile']] = None,
                 network: Optional[str] = None,
                 send_to_all_servers: Optional[bool] = None,
                 servers: Optional[Sequence['outputs.NetworktemplateRemoteSyslogServer']] = None,
                 time_format: Optional[str] = None,
                 users: Optional[Sequence['outputs.NetworktemplateRemoteSyslogUser']] = None):
        """
        :param str network: if source_address is configured, will use the vlan firstly otherwise use source_ip
        :param str time_format: enum: `millisecond`, `year`, `year millisecond`
        """
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if send_to_all_servers is not None:
            pulumi.set(__self__, "send_to_all_servers", send_to_all_servers)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def archive(self) -> Optional['outputs.NetworktemplateRemoteSyslogArchive']:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def console(self) -> Optional['outputs.NetworktemplateRemoteSyslogConsole']:
        return pulumi.get(self, "console")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def files(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogFile']]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="sendToAllServers")
    def send_to_all_servers(self) -> Optional[bool]:
        return pulumi.get(self, "send_to_all_servers")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogServer']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        """
        enum: `millisecond`, `year`, `year millisecond`
        """
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class NetworktemplateRemoteSyslogArchive(dict):
    def __init__(__self__, *,
                 files: Optional[int] = None,
                 size: Optional[str] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[int]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NetworktemplateRemoteSyslogConsole(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.NetworktemplateRemoteSyslogConsoleContent']] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogConsoleContent']]:
        return pulumi.get(self, "contents")


@pulumi.output_type
class NetworktemplateRemoteSyslogConsoleContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class NetworktemplateRemoteSyslogFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "explicitPriority":
            suggest = "explicit_priority"
        elif key == "structuredData":
            suggest = "structured_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRemoteSyslogFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRemoteSyslogFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRemoteSyslogFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive: Optional['outputs.NetworktemplateRemoteSyslogFileArchive'] = None,
                 contents: Optional[Sequence['outputs.NetworktemplateRemoteSyslogFileContent']] = None,
                 explicit_priority: Optional[bool] = None,
                 file: Optional[str] = None,
                 match: Optional[str] = None,
                 structured_data: Optional[bool] = None):
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)

    @property
    @pulumi.getter
    def archive(self) -> Optional['outputs.NetworktemplateRemoteSyslogFileArchive']:
        return pulumi.get(self, "archive")

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogFileContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[bool]:
        return pulumi.get(self, "explicit_priority")

    @property
    @pulumi.getter
    def file(self) -> Optional[str]:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[bool]:
        return pulumi.get(self, "structured_data")


@pulumi.output_type
class NetworktemplateRemoteSyslogFileArchive(dict):
    def __init__(__self__, *,
                 files: Optional[int] = None,
                 size: Optional[str] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[int]:
        return pulumi.get(self, "files")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        return pulumi.get(self, "size")


@pulumi.output_type
class NetworktemplateRemoteSyslogFileContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class NetworktemplateRemoteSyslogServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "explicitPriority":
            suggest = "explicit_priority"
        elif key == "routingInstance":
            suggest = "routing_instance"
        elif key == "sourceAddress":
            suggest = "source_address"
        elif key == "structuredData":
            suggest = "structured_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateRemoteSyslogServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateRemoteSyslogServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateRemoteSyslogServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.NetworktemplateRemoteSyslogServerContent']] = None,
                 explicit_priority: Optional[bool] = None,
                 facility: Optional[str] = None,
                 host: Optional[str] = None,
                 match: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None,
                 routing_instance: Optional[str] = None,
                 severity: Optional[str] = None,
                 source_address: Optional[str] = None,
                 structured_data: Optional[bool] = None,
                 tag: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str protocol: enum: `tcp`, `udp`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        :param str source_address: if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routing_instance is not None:
            pulumi.set(__self__, "routing_instance", routing_instance)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogServerContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[bool]:
        return pulumi.get(self, "explicit_priority")

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        enum: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="routingInstance")
    def routing_instance(self) -> Optional[str]:
        return pulumi.get(self, "routing_instance")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[str]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "source_address")

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[bool]:
        return pulumi.get(self, "structured_data")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class NetworktemplateRemoteSyslogServerContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class NetworktemplateRemoteSyslogUser(dict):
    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.NetworktemplateRemoteSyslogUserContent']] = None,
                 match: Optional[str] = None,
                 user: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateRemoteSyslogUserContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class NetworktemplateRemoteSyslogUserContent(dict):
    def __init__(__self__, *,
                 facility: Optional[str] = None,
                 severity: Optional[str] = None):
        """
        :param str facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param str severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[str]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class NetworktemplateSnmpConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientLists":
            suggest = "client_lists"
        elif key == "engineId":
            suggest = "engine_id"
        elif key == "trapGroups":
            suggest = "trap_groups"
        elif key == "v2cConfigs":
            suggest = "v2c_configs"
        elif key == "v3Config":
            suggest = "v3_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_lists: Optional[Sequence['outputs.NetworktemplateSnmpConfigClientList']] = None,
                 contact: Optional[str] = None,
                 description: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 engine_id: Optional[str] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 network: Optional[str] = None,
                 trap_groups: Optional[Sequence['outputs.NetworktemplateSnmpConfigTrapGroup']] = None,
                 v2c_configs: Optional[Sequence['outputs.NetworktemplateSnmpConfigV2cConfig']] = None,
                 v3_config: Optional['outputs.NetworktemplateSnmpConfigV3Config'] = None,
                 views: Optional[Sequence['outputs.NetworktemplateSnmpConfigView']] = None):
        """
        :param str engine_id: enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        if client_lists is not None:
            pulumi.set(__self__, "client_lists", client_lists)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if trap_groups is not None:
            pulumi.set(__self__, "trap_groups", trap_groups)
        if v2c_configs is not None:
            pulumi.set(__self__, "v2c_configs", v2c_configs)
        if v3_config is not None:
            pulumi.set(__self__, "v3_config", v3_config)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="clientLists")
    def client_lists(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigClientList']]:
        return pulumi.get(self, "client_lists")

    @property
    @pulumi.getter
    def contact(self) -> Optional[str]:
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[str]:
        """
        enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="trapGroups")
    def trap_groups(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigTrapGroup']]:
        return pulumi.get(self, "trap_groups")

    @property
    @pulumi.getter(name="v2cConfigs")
    def v2c_configs(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV2cConfig']]:
        return pulumi.get(self, "v2c_configs")

    @property
    @pulumi.getter(name="v3Config")
    def v3_config(self) -> Optional['outputs.NetworktemplateSnmpConfigV3Config']:
        return pulumi.get(self, "v3_config")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigView']]:
        return pulumi.get(self, "views")


@pulumi.output_type
class NetworktemplateSnmpConfigClientList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientListName":
            suggest = "client_list_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigClientList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigClientList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigClientList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_list_name: Optional[str] = None,
                 clients: Optional[Sequence[str]] = None):
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if clients is not None:
            pulumi.set(__self__, "clients", clients)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[str]:
        return pulumi.get(self, "client_list_name")

    @property
    @pulumi.getter
    def clients(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "clients")


@pulumi.output_type
class NetworktemplateSnmpConfigTrapGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigTrapGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigTrapGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigTrapGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Optional[Sequence[str]] = None,
                 group_name: Optional[str] = None,
                 targets: Optional[Sequence[str]] = None,
                 version: Optional[str] = None):
        """
        :param str group_name: Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        :param str version: enum: `all`, `v1`, `v2`
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def categories(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        enum: `all`, `v1`, `v2`
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class NetworktemplateSnmpConfigV2cConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientListName":
            suggest = "client_list_name"
        elif key == "communityName":
            suggest = "community_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV2cConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV2cConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV2cConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization: Optional[str] = None,
                 client_list_name: Optional[str] = None,
                 community_name: Optional[str] = None,
                 view: Optional[str] = None):
        """
        :param str client_list_name: client_list_name here should refer to client_list above
        :param str view: view name here should be defined in views above
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[str]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[str]:
        """
        client_list_name here should refer to client_list above
        """
        return pulumi.get(self, "client_list_name")

    @property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[str]:
        return pulumi.get(self, "community_name")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        """
        view name here should be defined in views above
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class NetworktemplateSnmpConfigV3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyFilters":
            suggest = "notify_filters"
        elif key == "targetAddresses":
            suggest = "target_addresses"
        elif key == "targetParameters":
            suggest = "target_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notifies: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotify']] = None,
                 notify_filters: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotifyFilter']] = None,
                 target_addresses: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigTargetAddress']] = None,
                 target_parameters: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigTargetParameter']] = None,
                 usm: Optional['outputs.NetworktemplateSnmpConfigV3ConfigUsm'] = None,
                 vacm: Optional['outputs.NetworktemplateSnmpConfigV3ConfigVacm'] = None):
        if notifies is not None:
            pulumi.set(__self__, "notifies", notifies)
        if notify_filters is not None:
            pulumi.set(__self__, "notify_filters", notify_filters)
        if target_addresses is not None:
            pulumi.set(__self__, "target_addresses", target_addresses)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)
        if usm is not None:
            pulumi.set(__self__, "usm", usm)
        if vacm is not None:
            pulumi.set(__self__, "vacm", vacm)

    @property
    @pulumi.getter
    def notifies(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotify']]:
        return pulumi.get(self, "notifies")

    @property
    @pulumi.getter(name="notifyFilters")
    def notify_filters(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotifyFilter']]:
        return pulumi.get(self, "notify_filters")

    @property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigTargetAddress']]:
        return pulumi.get(self, "target_addresses")

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigTargetParameter']]:
        return pulumi.get(self, "target_parameters")

    @property
    @pulumi.getter
    def usm(self) -> Optional['outputs.NetworktemplateSnmpConfigV3ConfigUsm']:
        return pulumi.get(self, "usm")

    @property
    @pulumi.getter
    def vacm(self) -> Optional['outputs.NetworktemplateSnmpConfigV3ConfigVacm']:
        return pulumi.get(self, "vacm")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigNotify(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 tag: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str type: enum: `inform`, `trap`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `inform`, `trap`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileName":
            suggest = "profile_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigNotifyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigNotifyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigNotifyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotifyFilterContent']] = None,
                 profile_name: Optional[str] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigNotifyFilterContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilterContent(dict):
    def __init__(__self__, *,
                 include: Optional[bool] = None,
                 oid: Optional[str] = None):
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def include(self) -> Optional[bool]:
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def oid(self) -> Optional[str]:
        return pulumi.get(self, "oid")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigTargetAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressMask":
            suggest = "address_mask"
        elif key == "tagList":
            suggest = "tag_list"
        elif key == "targetAddressName":
            suggest = "target_address_name"
        elif key == "targetParameters":
            suggest = "target_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigTargetAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigTargetAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigTargetAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 address_mask: Optional[str] = None,
                 port: Optional[int] = None,
                 tag_list: Optional[str] = None,
                 target_address_name: Optional[str] = None,
                 target_parameters: Optional[str] = None):
        """
        :param str tag_list: <refer to notify tag, can be multiple with blank
        :param str target_parameters: refer to notify target parameters name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_mask is not None:
            pulumi.set(__self__, "address_mask", address_mask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tag_list is not None:
            pulumi.set(__self__, "tag_list", tag_list)
        if target_address_name is not None:
            pulumi.set(__self__, "target_address_name", target_address_name)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressMask")
    def address_mask(self) -> Optional[str]:
        return pulumi.get(self, "address_mask")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tagList")
    def tag_list(self) -> Optional[str]:
        """
        <refer to notify tag, can be multiple with blank
        """
        return pulumi.get(self, "tag_list")

    @property
    @pulumi.getter(name="targetAddressName")
    def target_address_name(self) -> Optional[str]:
        return pulumi.get(self, "target_address_name")

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[str]:
        """
        refer to notify target parameters name
        """
        return pulumi.get(self, "target_parameters")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigTargetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "messageProcessingModel":
            suggest = "message_processing_model"
        elif key == "notifyFilter":
            suggest = "notify_filter"
        elif key == "securityLevel":
            suggest = "security_level"
        elif key == "securityModel":
            suggest = "security_model"
        elif key == "securityName":
            suggest = "security_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigTargetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigTargetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigTargetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message_processing_model: Optional[str] = None,
                 name: Optional[str] = None,
                 notify_filter: Optional[str] = None,
                 security_level: Optional[str] = None,
                 security_model: Optional[str] = None,
                 security_name: Optional[str] = None):
        """
        :param str message_processing_model: enum: `v1`, `v2c`, `v3`
        :param str notify_filter: refer to profile-name in notify_filter
        :param str security_level: enum: `authentication`, `none`, `privacy`
        :param str security_model: enum: `usm`, `v1`, `v2c`
        :param str security_name: refer to security_name in usm
        """
        if message_processing_model is not None:
            pulumi.set(__self__, "message_processing_model", message_processing_model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_filter is not None:
            pulumi.set(__self__, "notify_filter", notify_filter)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter(name="messageProcessingModel")
    def message_processing_model(self) -> Optional[str]:
        """
        enum: `v1`, `v2c`, `v3`
        """
        return pulumi.get(self, "message_processing_model")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyFilter")
    def notify_filter(self) -> Optional[str]:
        """
        refer to profile-name in notify_filter
        """
        return pulumi.get(self, "notify_filter")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[str]:
        """
        refer to security_name in usm
        """
        return pulumi.get(self, "security_name")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigUsm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineType":
            suggest = "engine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigUsm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigUsm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigUsm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_type: Optional[str] = None,
                 engineid: Optional[str] = None,
                 users: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigUsmUser']] = None):
        """
        :param str engine_type: enum: `local_engine`, `remote_engine`
        :param str engineid: required only if `engine_type`==`remote_engine`
        """
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engineid is not None:
            pulumi.set(__self__, "engineid", engineid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[str]:
        """
        enum: `local_engine`, `remote_engine`
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def engineid(self) -> Optional[str]:
        """
        required only if `engine_type`==`remote_engine`
        """
        return pulumi.get(self, "engineid")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigUsmUser']]:
        return pulumi.get(self, "users")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigUsmUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationPassword":
            suggest = "authentication_password"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "encryptionPassword":
            suggest = "encryption_password"
        elif key == "encryptionType":
            suggest = "encryption_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigUsmUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigUsmUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigUsmUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_password: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 encryption_password: Optional[str] = None,
                 encryption_type: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str authentication_password: Not required if `authentication_type`==`authentication_none`
               include alphabetic, numeric, and special characters, but it cannot include control characters.
        :param str authentication_type: sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        :param str encryption_password: Not required if `encryption_type`==`privacy-none`
               include alphabetic, numeric, and special characters, but it cannot include control characters
        :param str encryption_type: enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if encryption_password is not None:
            pulumi.set(__self__, "encryption_password", encryption_password)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[str]:
        """
        Not required if `authentication_type`==`authentication_none`
        include alphabetic, numeric, and special characters, but it cannot include control characters.
        """
        return pulumi.get(self, "authentication_password")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        """
        sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        """
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="encryptionPassword")
    def encryption_password(self) -> Optional[str]:
        """
        Not required if `encryption_type`==`privacy-none`
        include alphabetic, numeric, and special characters, but it cannot include control characters
        """
        return pulumi.get(self, "encryption_password")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[str]:
        """
        enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigVacm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityToGroup":
            suggest = "security_to_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigVacm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accesses: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmAccess']] = None,
                 security_to_group: Optional['outputs.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup'] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if security_to_group is not None:
            pulumi.set(__self__, "security_to_group", security_to_group)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmAccess']]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter(name="securityToGroup")
    def security_to_group(self) -> Optional['outputs.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup']:
        return pulumi.get(self, "security_to_group")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigVacmAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "prefixLists":
            suggest = "prefix_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigVacmAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[str] = None,
                 prefix_lists: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList']] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList']]:
        return pulumi.get(self, "prefix_lists")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contextPrefix":
            suggest = "context_prefix"
        elif key == "notifyView":
            suggest = "notify_view"
        elif key == "readView":
            suggest = "read_view"
        elif key == "securityLevel":
            suggest = "security_level"
        elif key == "securityModel":
            suggest = "security_model"
        elif key == "writeView":
            suggest = "write_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 context_prefix: Optional[str] = None,
                 notify_view: Optional[str] = None,
                 read_view: Optional[str] = None,
                 security_level: Optional[str] = None,
                 security_model: Optional[str] = None,
                 type: Optional[str] = None,
                 write_view: Optional[str] = None):
        """
        :param str context_prefix: only required if `type`==`context_prefix`
        :param str notify_view: refer to view name
        :param str read_view: refer to view name
        :param str security_level: enum: `authentication`, `none`, `privacy`
        :param str security_model: enum: `any`, `usm`, `v1`, `v2c`
        :param str type: enum: `context_prefix`, `default_context_prefix`
        :param str write_view: refer to view name
        """
        if context_prefix is not None:
            pulumi.set(__self__, "context_prefix", context_prefix)
        if notify_view is not None:
            pulumi.set(__self__, "notify_view", notify_view)
        if read_view is not None:
            pulumi.set(__self__, "read_view", read_view)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if write_view is not None:
            pulumi.set(__self__, "write_view", write_view)

    @property
    @pulumi.getter(name="contextPrefix")
    def context_prefix(self) -> Optional[str]:
        """
        only required if `type`==`context_prefix`
        """
        return pulumi.get(self, "context_prefix")

    @property
    @pulumi.getter(name="notifyView")
    def notify_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "notify_view")

    @property
    @pulumi.getter(name="readView")
    def read_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "read_view")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[str]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `any`, `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `context_prefix`, `default_context_prefix`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="writeView")
    def write_view(self) -> Optional[str]:
        """
        refer to view name
        """
        return pulumi.get(self, "write_view")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityModel":
            suggest = "security_model"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contents: Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent']] = None,
                 security_model: Optional[str] = None):
        """
        :param str security_model: enum: `usm`, `v1`, `v2c`
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)

    @property
    @pulumi.getter
    def contents(self) -> Optional[Sequence['outputs.NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent']]:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[str]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")


@pulumi.output_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityName":
            suggest = "security_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: Optional[str] = None,
                 security_name: Optional[str] = None):
        """
        :param str group: refer to group_name under access
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[str]:
        """
        refer to group_name under access
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[str]:
        return pulumi.get(self, "security_name")


@pulumi.output_type
class NetworktemplateSnmpConfigView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSnmpConfigView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSnmpConfigView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSnmpConfigView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include: Optional[bool] = None,
                 oid: Optional[str] = None,
                 view_name: Optional[str] = None):
        """
        :param bool include: if the root oid configured is included
        """
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def include(self) -> Optional[bool]:
        """
        if the root oid configured is included
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def oid(self) -> Optional[str]:
        return pulumi.get(self, "oid")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        return pulumi.get(self, "view_name")


@pulumi.output_type
class NetworktemplateSwitchMatching(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None,
                 rules: Optional[Sequence['outputs.NetworktemplateSwitchMatchingRule']] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.NetworktemplateSwitchMatchingRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class NetworktemplateSwitchMatchingRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalConfigCmds":
            suggest = "additional_config_cmds"
        elif key == "matchRole":
            suggest = "match_role"
        elif key == "matchType":
            suggest = "match_type"
        elif key == "matchValue":
            suggest = "match_value"
        elif key == "portConfig":
            suggest = "port_config"
        elif key == "portMirroring":
            suggest = "port_mirroring"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMatchingRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMatchingRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMatchingRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_config_cmds: Optional[Sequence[str]] = None,
                 match_role: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_value: Optional[str] = None,
                 name: Optional[str] = None,
                 port_config: Optional[Mapping[str, 'outputs.NetworktemplateSwitchMatchingRulePortConfig']] = None,
                 port_mirroring: Optional[Mapping[str, 'outputs.NetworktemplateSwitchMatchingRulePortMirroring']] = None):
        """
        :param Sequence[str] additional_config_cmds: additional CLI commands to append to the generated Junos config
               
               **Note**: no check is done
        :param str match_role: role to match
        :param str match_type: 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        :param Mapping[str, 'NetworktemplateSwitchMatchingRulePortConfigArgs'] port_config: Propery key is the interface name or interface range
        :param Mapping[str, 'NetworktemplateSwitchMatchingRulePortMirroringArgs'] port_mirroring: Property key is the port mirroring instance name
               port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if match_role is not None:
            pulumi.set(__self__, "match_role", match_role)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[Sequence[str]]:
        """
        additional CLI commands to append to the generated Junos config

        **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @property
    @pulumi.getter(name="matchRole")
    def match_role(self) -> Optional[str]:
        """
        role to match
        """
        return pulumi.get(self, "match_role")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        """
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[str]:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[Mapping[str, 'outputs.NetworktemplateSwitchMatchingRulePortConfig']]:
        """
        Propery key is the interface name or interface range
        """
        return pulumi.get(self, "port_config")

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[Mapping[str, 'outputs.NetworktemplateSwitchMatchingRulePortMirroring']]:
        """
        Property key is the port mirroring instance name
        port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")


@pulumi.output_type
class NetworktemplateSwitchMatchingRulePortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aeDisableLacp":
            suggest = "ae_disable_lacp"
        elif key == "aeIdx":
            suggest = "ae_idx"
        elif key == "aeLacpSlow":
            suggest = "ae_lacp_slow"
        elif key == "disableAutoneg":
            suggest = "disable_autoneg"
        elif key == "dynamicUsage":
            suggest = "dynamic_usage"
        elif key == "noLocalOverwrite":
            suggest = "no_local_overwrite"
        elif key == "poeDisabled":
            suggest = "poe_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMatchingRulePortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMatchingRulePortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMatchingRulePortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage: str,
                 ae_disable_lacp: Optional[bool] = None,
                 ae_idx: Optional[int] = None,
                 ae_lacp_slow: Optional[bool] = None,
                 aggregated: Optional[bool] = None,
                 critical: Optional[bool] = None,
                 description: Optional[str] = None,
                 disable_autoneg: Optional[bool] = None,
                 duplex: Optional[str] = None,
                 dynamic_usage: Optional[str] = None,
                 esilag: Optional[bool] = None,
                 mtu: Optional[int] = None,
                 no_local_overwrite: Optional[bool] = None,
                 poe_disabled: Optional[bool] = None,
                 speed: Optional[str] = None):
        """
        :param str usage: port usage name. 
               
               If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        :param bool ae_disable_lacp: To disable LACP support for the AE interface
        :param int ae_idx: Users could force to use the designated AE name
        :param bool ae_lacp_slow: to use fast timeout
        :param bool critical: if want to generate port up/down alarm
        :param bool disable_autoneg: if `speed` and `duplex` are specified, whether to disable autonegotiation
        :param str duplex: enum: `auto`, `full`, `half`
        :param str dynamic_usage: Enable dynamic usage for this port. Set to `dynamic` to enable.
        :param int mtu: media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        :param bool no_local_overwrite: prevent helpdesk to override the port config
        :param str speed: enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_slow is not None:
            pulumi.set(__self__, "ae_lacp_slow", ae_lacp_slow)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_usage is not None:
            pulumi.set(__self__, "dynamic_usage", dynamic_usage)
        if esilag is not None:
            pulumi.set(__self__, "esilag", esilag)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if no_local_overwrite is not None:
            pulumi.set(__self__, "no_local_overwrite", no_local_overwrite)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def usage(self) -> str:
        """
        port usage name. 

        If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        """
        return pulumi.get(self, "usage")

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[bool]:
        """
        To disable LACP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[int]:
        """
        Users could force to use the designated AE name
        """
        return pulumi.get(self, "ae_idx")

    @property
    @pulumi.getter(name="aeLacpSlow")
    def ae_lacp_slow(self) -> Optional[bool]:
        """
        to use fast timeout
        """
        return pulumi.get(self, "ae_lacp_slow")

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[bool]:
        return pulumi.get(self, "aggregated")

    @property
    @pulumi.getter
    def critical(self) -> Optional[bool]:
        """
        if want to generate port up/down alarm
        """
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[bool]:
        """
        if `speed` and `duplex` are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[str]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter(name="dynamicUsage")
    def dynamic_usage(self) -> Optional[str]:
        """
        Enable dynamic usage for this port. Set to `dynamic` to enable.
        """
        return pulumi.get(self, "dynamic_usage")

    @property
    @pulumi.getter
    def esilag(self) -> Optional[bool]:
        return pulumi.get(self, "esilag")

    @property
    @pulumi.getter
    def mtu(self) -> Optional[int]:
        """
        media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="noLocalOverwrite")
    def no_local_overwrite(self) -> Optional[bool]:
        """
        prevent helpdesk to override the port config
        """
        return pulumi.get(self, "no_local_overwrite")

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "poe_disabled")

    @property
    @pulumi.getter
    def speed(self) -> Optional[str]:
        """
        enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        return pulumi.get(self, "speed")


@pulumi.output_type
class NetworktemplateSwitchMatchingRulePortMirroring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputNetworksIngresses":
            suggest = "input_networks_ingresses"
        elif key == "inputPortIdsEgresses":
            suggest = "input_port_ids_egresses"
        elif key == "inputPortIdsIngresses":
            suggest = "input_port_ids_ingresses"
        elif key == "outputNetwork":
            suggest = "output_network"
        elif key == "outputPortId":
            suggest = "output_port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMatchingRulePortMirroring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMatchingRulePortMirroring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMatchingRulePortMirroring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_networks_ingresses: Optional[Sequence[str]] = None,
                 input_port_ids_egresses: Optional[Sequence[str]] = None,
                 input_port_ids_ingresses: Optional[Sequence[str]] = None,
                 output_network: Optional[str] = None,
                 output_port_id: Optional[str] = None):
        """
        :param Sequence[str] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param Sequence[str] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param str output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param str output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[Sequence[str]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[str]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")


@pulumi.output_type
class NetworktemplateSwitchMgmt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configRevert":
            suggest = "config_revert"
        elif key == "protectRe":
            suggest = "protect_re"
        elif key == "rootPassword":
            suggest = "root_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMgmt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMgmt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMgmt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_revert: Optional[int] = None,
                 protect_re: Optional['outputs.NetworktemplateSwitchMgmtProtectRe'] = None,
                 root_password: Optional[str] = None,
                 tacacs: Optional['outputs.NetworktemplateSwitchMgmtTacacs'] = None):
        """
        :param 'NetworktemplateSwitchMgmtProtectReArgs' protect_re: restrict inbound-traffic to host
               when enabled, all traffic that is not essential to our operation will be dropped 
               e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        if config_revert is not None:
            pulumi.set(__self__, "config_revert", config_revert)
        if protect_re is not None:
            pulumi.set(__self__, "protect_re", protect_re)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if tacacs is not None:
            pulumi.set(__self__, "tacacs", tacacs)

    @property
    @pulumi.getter(name="configRevert")
    def config_revert(self) -> Optional[int]:
        return pulumi.get(self, "config_revert")

    @property
    @pulumi.getter(name="protectRe")
    def protect_re(self) -> Optional['outputs.NetworktemplateSwitchMgmtProtectRe']:
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "protect_re")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[str]:
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter
    def tacacs(self) -> Optional['outputs.NetworktemplateSwitchMgmtTacacs']:
        return pulumi.get(self, "tacacs")


@pulumi.output_type
class NetworktemplateSwitchMgmtProtectRe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedServices":
            suggest = "allowed_services"
        elif key == "trustedHosts":
            suggest = "trusted_hosts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMgmtProtectRe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMgmtProtectRe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMgmtProtectRe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_services: Optional[Sequence[str]] = None,
                 customs: Optional[Sequence['outputs.NetworktemplateSwitchMgmtProtectReCustom']] = None,
                 enabled: Optional[bool] = None,
                 trusted_hosts: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] allowed_services: optionally, services we'll allow
        :param bool enabled: when enabled, all traffic that is not essential to our operation will be dropped
               e.g. ntp / dns / traffic to mist will be allowed by default
                    if dhcpd is enabled, we'll make sure it works
        :param Sequence[str] trusted_hosts: host/subnets we'll allow traffic to/from
        """
        if allowed_services is not None:
            pulumi.set(__self__, "allowed_services", allowed_services)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if trusted_hosts is not None:
            pulumi.set(__self__, "trusted_hosts", trusted_hosts)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[Sequence[str]]:
        """
        optionally, services we'll allow
        """
        return pulumi.get(self, "allowed_services")

    @property
    @pulumi.getter
    def customs(self) -> Optional[Sequence['outputs.NetworktemplateSwitchMgmtProtectReCustom']]:
        return pulumi.get(self, "customs")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="trustedHosts")
    def trusted_hosts(self) -> Optional[Sequence[str]]:
        """
        host/subnets we'll allow traffic to/from
        """
        return pulumi.get(self, "trusted_hosts")


@pulumi.output_type
class NetworktemplateSwitchMgmtProtectReCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMgmtProtectReCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMgmtProtectReCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMgmtProtectReCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None,
                 subnets: Optional[Sequence[str]] = None):
        """
        :param str port_range: matched dst port, "0" means any
        :param str protocol: enum: `any`, `icmp`, `tcp`, `udp`
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        enum: `any`, `icmp`, `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def subnets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "subnets")


@pulumi.output_type
class NetworktemplateSwitchMgmtTacacs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acctServers":
            suggest = "acct_servers"
        elif key == "defaultRole":
            suggest = "default_role"
        elif key == "tacplusServers":
            suggest = "tacplus_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateSwitchMgmtTacacs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateSwitchMgmtTacacs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateSwitchMgmtTacacs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acct_servers: Optional[Sequence['outputs.NetworktemplateSwitchMgmtTacacsAcctServer']] = None,
                 default_role: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 network: Optional[str] = None,
                 tacplus_servers: Optional[Sequence['outputs.NetworktemplateSwitchMgmtTacacsTacplusServer']] = None):
        """
        :param str default_role: enum: `admin`, `helpdesk`, `none`, `read`
        :param str network: which network the TACACS server resides
        """
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if tacplus_servers is not None:
            pulumi.set(__self__, "tacplus_servers", tacplus_servers)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[Sequence['outputs.NetworktemplateSwitchMgmtTacacsAcctServer']]:
        return pulumi.get(self, "acct_servers")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[str]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        which network the TACACS server resides
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="tacplusServers")
    def tacplus_servers(self) -> Optional[Sequence['outputs.NetworktemplateSwitchMgmtTacacsTacplusServer']]:
        return pulumi.get(self, "tacplus_servers")


@pulumi.output_type
class NetworktemplateSwitchMgmtTacacsAcctServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[str] = None,
                 secret: Optional[str] = None,
                 timeout: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class NetworktemplateSwitchMgmtTacacsTacplusServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[str] = None,
                 secret: Optional[str] = None,
                 timeout: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class NetworktemplateVrfConfig(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class NetworktemplateVrfInstances(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extraRoutes":
            suggest = "extra_routes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworktemplateVrfInstances. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworktemplateVrfInstances.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworktemplateVrfInstances.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extra_routes: Optional[Mapping[str, 'outputs.NetworktemplateVrfInstancesExtraRoutes']] = None,
                 networks: Optional[Sequence[str]] = None):
        """
        :param Mapping[str, 'NetworktemplateVrfInstancesExtraRoutesArgs'] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[Mapping[str, 'outputs.NetworktemplateVrfInstancesExtraRoutes']]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "networks")


@pulumi.output_type
class NetworktemplateVrfInstancesExtraRoutes(dict):
    def __init__(__self__, *,
                 via: str):
        """
        :param str via: Next-hop address
        """
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> str:
        """
        Next-hop address
        """
        return pulumi.get(self, "via")


@pulumi.output_type
class RftemplateBand24(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateBand24. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateBand24.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateBand24.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateBand5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateBand5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateBand5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateBand5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateBand5On24Radio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateBand5On24Radio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateBand5On24Radio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateBand5On24Radio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateBand6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"
        elif key == "standardPower":
            suggest = "standard_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateBand6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateBand6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateBand6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None,
                 standard_power: Optional[bool] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        :param bool standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[bool]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")


@pulumi.output_type
class RftemplateModelSpecific(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "antGain24":
            suggest = "ant_gain24"
        elif key == "antGain5":
            suggest = "ant_gain5"
        elif key == "antGain6":
            suggest = "ant_gain6"
        elif key == "band24Usage":
            suggest = "band24_usage"
        elif key == "band5On24Radio":
            suggest = "band5_on24_radio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateModelSpecific. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateModelSpecific.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateModelSpecific.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ant_gain24: Optional[int] = None,
                 ant_gain5: Optional[int] = None,
                 ant_gain6: Optional[int] = None,
                 band24: Optional['outputs.RftemplateModelSpecificBand24'] = None,
                 band24_usage: Optional[str] = None,
                 band5: Optional['outputs.RftemplateModelSpecificBand5'] = None,
                 band5_on24_radio: Optional['outputs.RftemplateModelSpecificBand5On24Radio'] = None,
                 band6: Optional['outputs.RftemplateModelSpecificBand6'] = None):
        """
        :param 'RftemplateModelSpecificBand24Args' band24: Radio Band AP settings
        :param str band24_usage: enum: `24`, `5`, `6`, `auto`
        :param 'RftemplateModelSpecificBand5Args' band5: Radio Band AP settings
        :param 'RftemplateModelSpecificBand5On24RadioArgs' band5_on24_radio: Radio Band AP settings
        :param 'RftemplateModelSpecificBand6Args' band6: Radio Band AP settings
        """
        if ant_gain24 is not None:
            pulumi.set(__self__, "ant_gain24", ant_gain24)
        if ant_gain5 is not None:
            pulumi.set(__self__, "ant_gain5", ant_gain5)
        if ant_gain6 is not None:
            pulumi.set(__self__, "ant_gain6", ant_gain6)
        if band24 is not None:
            pulumi.set(__self__, "band24", band24)
        if band24_usage is not None:
            pulumi.set(__self__, "band24_usage", band24_usage)
        if band5 is not None:
            pulumi.set(__self__, "band5", band5)
        if band5_on24_radio is not None:
            pulumi.set(__self__, "band5_on24_radio", band5_on24_radio)
        if band6 is not None:
            pulumi.set(__self__, "band6", band6)

    @property
    @pulumi.getter(name="antGain24")
    def ant_gain24(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain24")

    @property
    @pulumi.getter(name="antGain5")
    def ant_gain5(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain5")

    @property
    @pulumi.getter(name="antGain6")
    def ant_gain6(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain6")

    @property
    @pulumi.getter
    def band24(self) -> Optional['outputs.RftemplateModelSpecificBand24']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band24")

    @property
    @pulumi.getter(name="band24Usage")
    def band24_usage(self) -> Optional[str]:
        """
        enum: `24`, `5`, `6`, `auto`
        """
        return pulumi.get(self, "band24_usage")

    @property
    @pulumi.getter
    def band5(self) -> Optional['outputs.RftemplateModelSpecificBand5']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5")

    @property
    @pulumi.getter(name="band5On24Radio")
    def band5_on24_radio(self) -> Optional['outputs.RftemplateModelSpecificBand5On24Radio']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5_on24_radio")

    @property
    @pulumi.getter
    def band6(self) -> Optional['outputs.RftemplateModelSpecificBand6']:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band6")


@pulumi.output_type
class RftemplateModelSpecificBand24(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateModelSpecificBand24. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateModelSpecificBand24.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateModelSpecificBand24.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateModelSpecificBand5(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateModelSpecificBand5. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateModelSpecificBand5.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateModelSpecificBand5.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateModelSpecificBand5On24Radio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateModelSpecificBand5On24Radio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateModelSpecificBand5On24Radio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateModelSpecificBand5On24Radio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")


@pulumi.output_type
class RftemplateModelSpecificBand6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowRrmDisable":
            suggest = "allow_rrm_disable"
        elif key == "antGain":
            suggest = "ant_gain"
        elif key == "antennaMode":
            suggest = "antenna_mode"
        elif key == "powerMax":
            suggest = "power_max"
        elif key == "powerMin":
            suggest = "power_min"
        elif key == "standardPower":
            suggest = "standard_power"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RftemplateModelSpecificBand6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RftemplateModelSpecificBand6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RftemplateModelSpecificBand6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_rrm_disable: Optional[bool] = None,
                 ant_gain: Optional[int] = None,
                 antenna_mode: Optional[str] = None,
                 bandwidth: Optional[int] = None,
                 channels: Optional[Sequence[int]] = None,
                 disabled: Optional[bool] = None,
                 power: Optional[int] = None,
                 power_max: Optional[int] = None,
                 power_min: Optional[int] = None,
                 preamble: Optional[str] = None,
                 standard_power: Optional[bool] = None):
        """
        :param str antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param int bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param Sequence[int] channels: For RFTemplates. List of channels, null or empty array means auto
        :param bool disabled: whether to disable the radio
        :param int power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param int power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param int power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param str preamble: enum: `auto`, `long`, `short`
        :param bool standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[bool]:
        return pulumi.get(self, "allow_rrm_disable")

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[int]:
        return pulumi.get(self, "ant_gain")

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[str]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[int]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def channels(self) -> Optional[Sequence[int]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def power(self) -> Optional[int]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[int]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[int]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @property
    @pulumi.getter
    def preamble(self) -> Optional[str]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[bool]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")


@pulumi.output_type
class ServiceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param str port_range: port number, port range, or variable
        :param str protocol: `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
               `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        port number, port range, or variable
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
        `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ServicepolicyAppqoe(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ServicepolicyEwf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "blockMessage":
            suggest = "block_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServicepolicyEwf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServicepolicyEwf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServicepolicyEwf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 block_message: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 profile: Optional[str] = None):
        """
        :param str profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[str]:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class ServicepolicyIdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertOnly":
            suggest = "alert_only"
        elif key == "idpprofileId":
            suggest = "idpprofile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServicepolicyIdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServicepolicyIdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServicepolicyIdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_only: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 idpprofile_id: Optional[str] = None,
                 profile: Optional[str] = None):
        """
        :param str idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param str profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[bool]:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[str]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class SettingApiPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noReveal":
            suggest = "no_reveal"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingApiPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingApiPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingApiPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_reveal: Optional[bool] = None):
        """
        :param bool no_reveal: by default, API hides password/secrets when the user doesn't have write access
                 * `true`: API will hide passwords/secrets for all users
                 * `false`: API will hide passwords/secrets for read-only users
        """
        if no_reveal is not None:
            pulumi.set(__self__, "no_reveal", no_reveal)

    @property
    @pulumi.getter(name="noReveal")
    def no_reveal(self) -> Optional[bool]:
        """
        by default, API hides password/secrets when the user doesn't have write access
          * `true`: API will hide passwords/secrets for all users
          * `false`: API will hide passwords/secrets for read-only users
        """
        return pulumi.get(self, "no_reveal")


@pulumi.output_type
class SettingCelona(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "apiPrefix":
            suggest = "api_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingCelona. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingCelona.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingCelona.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 api_prefix: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_prefix", api_prefix)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="apiPrefix")
    def api_prefix(self) -> str:
        return pulumi.get(self, "api_prefix")


@pulumi.output_type
class SettingCloudshark(dict):
    def __init__(__self__, *,
                 apitoken: str,
                 url: Optional[str] = None):
        """
        :param str url: if using CS Enteprise
        """
        pulumi.set(__self__, "apitoken", apitoken)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def apitoken(self) -> str:
        return pulumi.get(self, "apitoken")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        if using CS Enteprise
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class SettingCradlepoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpApiId":
            suggest = "cp_api_id"
        elif key == "cpApiKey":
            suggest = "cp_api_key"
        elif key == "ecmApiId":
            suggest = "ecm_api_id"
        elif key == "ecmApiKey":
            suggest = "ecm_api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingCradlepoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingCradlepoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingCradlepoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cp_api_id: str,
                 cp_api_key: str,
                 ecm_api_id: str,
                 ecm_api_key: str):
        pulumi.set(__self__, "cp_api_id", cp_api_id)
        pulumi.set(__self__, "cp_api_key", cp_api_key)
        pulumi.set(__self__, "ecm_api_id", ecm_api_id)
        pulumi.set(__self__, "ecm_api_key", ecm_api_key)

    @property
    @pulumi.getter(name="cpApiId")
    def cp_api_id(self) -> str:
        return pulumi.get(self, "cp_api_id")

    @property
    @pulumi.getter(name="cpApiKey")
    def cp_api_key(self) -> str:
        return pulumi.get(self, "cp_api_key")

    @property
    @pulumi.getter(name="ecmApiId")
    def ecm_api_id(self) -> str:
        return pulumi.get(self, "ecm_api_id")

    @property
    @pulumi.getter(name="ecmApiKey")
    def ecm_api_key(self) -> str:
        return pulumi.get(self, "ecm_api_key")


@pulumi.output_type
class SettingDeviceCert(dict):
    def __init__(__self__, *,
                 cert: str,
                 key: str):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class SettingInstaller(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAllDevices":
            suggest = "allow_all_devices"
        elif key == "allowAllSites":
            suggest = "allow_all_sites"
        elif key == "extraSiteIds":
            suggest = "extra_site_ids"
        elif key == "gracePeriod":
            suggest = "grace_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingInstaller. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingInstaller.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingInstaller.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_all_devices: Optional[bool] = None,
                 allow_all_sites: Optional[bool] = None,
                 extra_site_ids: Optional[Sequence[str]] = None,
                 grace_period: Optional[int] = None):
        if allow_all_devices is not None:
            pulumi.set(__self__, "allow_all_devices", allow_all_devices)
        if allow_all_sites is not None:
            pulumi.set(__self__, "allow_all_sites", allow_all_sites)
        if extra_site_ids is not None:
            pulumi.set(__self__, "extra_site_ids", extra_site_ids)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)

    @property
    @pulumi.getter(name="allowAllDevices")
    def allow_all_devices(self) -> Optional[bool]:
        return pulumi.get(self, "allow_all_devices")

    @property
    @pulumi.getter(name="allowAllSites")
    def allow_all_sites(self) -> Optional[bool]:
        return pulumi.get(self, "allow_all_sites")

    @property
    @pulumi.getter(name="extraSiteIds")
    def extra_site_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "extra_site_ids")

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[int]:
        return pulumi.get(self, "grace_period")


@pulumi.output_type
class SettingJcloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orgApitoken":
            suggest = "org_apitoken"
        elif key == "orgApitokenName":
            suggest = "org_apitoken_name"
        elif key == "orgId":
            suggest = "org_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingJcloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingJcloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingJcloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org_apitoken: str,
                 org_apitoken_name: str,
                 org_id: str):
        """
        :param str org_apitoken: JCloud Org Token
        :param str org_apitoken_name: JCloud Org Token Name
        :param str org_id: JCloud Org ID
        """
        pulumi.set(__self__, "org_apitoken", org_apitoken)
        pulumi.set(__self__, "org_apitoken_name", org_apitoken_name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="orgApitoken")
    def org_apitoken(self) -> str:
        """
        JCloud Org Token
        """
        return pulumi.get(self, "org_apitoken")

    @property
    @pulumi.getter(name="orgApitokenName")
    def org_apitoken_name(self) -> str:
        """
        JCloud Org Token Name
        """
        return pulumi.get(self, "org_apitoken_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        JCloud Org ID
        """
        return pulumi.get(self, "org_id")


@pulumi.output_type
class SettingJuniper(dict):
    def __init__(__self__, *,
                 accounts: Optional[Sequence['outputs.SettingJuniperAccount']] = None):
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[Sequence['outputs.SettingJuniperAccount']]:
        return pulumi.get(self, "accounts")


@pulumi.output_type
class SettingJuniperAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkedBy":
            suggest = "linked_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingJuniperAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingJuniperAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingJuniperAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 linked_by: Optional[str] = None,
                 name: Optional[str] = None):
        if linked_by is not None:
            pulumi.set(__self__, "linked_by", linked_by)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="linkedBy")
    def linked_by(self) -> Optional[str]:
        return pulumi.get(self, "linked_by")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SettingMgmt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mxtunnelIds":
            suggest = "mxtunnel_ids"
        elif key == "useMxtunnel":
            suggest = "use_mxtunnel"
        elif key == "useWxtunnel":
            suggest = "use_wxtunnel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingMgmt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingMgmt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingMgmt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mxtunnel_ids: Optional[Sequence[str]] = None,
                 use_mxtunnel: Optional[bool] = None,
                 use_wxtunnel: Optional[bool] = None):
        """
        :param Sequence[str] mxtunnel_ids: list of Mist Tunnels
        :param bool use_mxtunnel: whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
        :param bool use_wxtunnel: whether to use wxtunnel for mgmt connectivity
        """
        if mxtunnel_ids is not None:
            pulumi.set(__self__, "mxtunnel_ids", mxtunnel_ids)
        if use_mxtunnel is not None:
            pulumi.set(__self__, "use_mxtunnel", use_mxtunnel)
        if use_wxtunnel is not None:
            pulumi.set(__self__, "use_wxtunnel", use_wxtunnel)

    @property
    @pulumi.getter(name="mxtunnelIds")
    def mxtunnel_ids(self) -> Optional[Sequence[str]]:
        """
        list of Mist Tunnels
        """
        return pulumi.get(self, "mxtunnel_ids")

    @property
    @pulumi.getter(name="useMxtunnel")
    def use_mxtunnel(self) -> Optional[bool]:
        """
        whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
        """
        return pulumi.get(self, "use_mxtunnel")

    @property
    @pulumi.getter(name="useWxtunnel")
    def use_wxtunnel(self) -> Optional[bool]:
        """
        whether to use wxtunnel for mgmt connectivity
        """
        return pulumi.get(self, "use_wxtunnel")


@pulumi.output_type
class SettingMistNac(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultIdpId":
            suggest = "default_idp_id"
        elif key == "eapSslSecurityLevel":
            suggest = "eap_ssl_security_level"
        elif key == "euOnly":
            suggest = "eu_only"
        elif key == "serverCert":
            suggest = "server_cert"
        elif key == "useIpVersion":
            suggest = "use_ip_version"
        elif key == "useSslPort":
            suggest = "use_ssl_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingMistNac. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingMistNac.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingMistNac.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cacerts: Optional[Sequence[str]] = None,
                 default_idp_id: Optional[str] = None,
                 eap_ssl_security_level: Optional[int] = None,
                 eu_only: Optional[bool] = None,
                 idps: Optional[Sequence['outputs.SettingMistNacIdp']] = None,
                 server_cert: Optional['outputs.SettingMistNacServerCert'] = None,
                 use_ip_version: Optional[str] = None,
                 use_ssl_port: Optional[bool] = None):
        """
        :param Sequence[str] cacerts: list of PEM-encoded ca certs
        :param str default_idp_id: use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
        :param int eap_ssl_security_level: eap ssl security level
               see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
        :param bool eu_only: By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
               For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled
        :param 'SettingMistNacServerCertArgs' server_cert: radius server cert to be presented in EAP TLS
        :param str use_ip_version: by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
        :param bool use_ssl_port: By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac. 
               Set `use_ssl_port`==`true` to override that port with TCP43 (ssl), 
               This is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled
        """
        if cacerts is not None:
            pulumi.set(__self__, "cacerts", cacerts)
        if default_idp_id is not None:
            pulumi.set(__self__, "default_idp_id", default_idp_id)
        if eap_ssl_security_level is not None:
            pulumi.set(__self__, "eap_ssl_security_level", eap_ssl_security_level)
        if eu_only is not None:
            pulumi.set(__self__, "eu_only", eu_only)
        if idps is not None:
            pulumi.set(__self__, "idps", idps)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if use_ip_version is not None:
            pulumi.set(__self__, "use_ip_version", use_ip_version)
        if use_ssl_port is not None:
            pulumi.set(__self__, "use_ssl_port", use_ssl_port)

    @property
    @pulumi.getter
    def cacerts(self) -> Optional[Sequence[str]]:
        """
        list of PEM-encoded ca certs
        """
        return pulumi.get(self, "cacerts")

    @property
    @pulumi.getter(name="defaultIdpId")
    def default_idp_id(self) -> Optional[str]:
        """
        use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
        """
        return pulumi.get(self, "default_idp_id")

    @property
    @pulumi.getter(name="eapSslSecurityLevel")
    def eap_ssl_security_level(self) -> Optional[int]:
        """
        eap ssl security level
        see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
        """
        return pulumi.get(self, "eap_ssl_security_level")

    @property
    @pulumi.getter(name="euOnly")
    def eu_only(self) -> Optional[bool]:
        """
        By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
        For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled
        """
        return pulumi.get(self, "eu_only")

    @property
    @pulumi.getter
    def idps(self) -> Optional[Sequence['outputs.SettingMistNacIdp']]:
        return pulumi.get(self, "idps")

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional['outputs.SettingMistNacServerCert']:
        """
        radius server cert to be presented in EAP TLS
        """
        return pulumi.get(self, "server_cert")

    @property
    @pulumi.getter(name="useIpVersion")
    def use_ip_version(self) -> Optional[str]:
        """
        by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
        """
        return pulumi.get(self, "use_ip_version")

    @property
    @pulumi.getter(name="useSslPort")
    def use_ssl_port(self) -> Optional[bool]:
        """
        By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac. 
        Set `use_ssl_port`==`true` to override that port with TCP43 (ssl), 
        This is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled
        """
        return pulumi.get(self, "use_ssl_port")


@pulumi.output_type
class SettingMistNacIdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeRealms":
            suggest = "exclude_realms"
        elif key == "userRealms":
            suggest = "user_realms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingMistNacIdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingMistNacIdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingMistNacIdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_realms: Optional[Sequence[str]] = None,
                 id: Optional[str] = None,
                 user_realms: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_realms: when the IDP of mxedge_proxy type, exclude the following realms from proxying in addition to other valid home realms in this org
        :param Sequence[str] user_realms: which realm should trigger this IDP. User Realm is extracted from:
                 * Username-AVP (`mist.com` from john@mist.com)
                 * Cert CN
        """
        if exclude_realms is not None:
            pulumi.set(__self__, "exclude_realms", exclude_realms)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user_realms is not None:
            pulumi.set(__self__, "user_realms", user_realms)

    @property
    @pulumi.getter(name="excludeRealms")
    def exclude_realms(self) -> Optional[Sequence[str]]:
        """
        when the IDP of mxedge_proxy type, exclude the following realms from proxying in addition to other valid home realms in this org
        """
        return pulumi.get(self, "exclude_realms")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="userRealms")
    def user_realms(self) -> Optional[Sequence[str]]:
        """
        which realm should trigger this IDP. User Realm is extracted from:
          * Username-AVP (`mist.com` from john@mist.com)
          * Cert CN
        """
        return pulumi.get(self, "user_realms")


@pulumi.output_type
class SettingMistNacServerCert(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 key: Optional[str] = None,
                 password: Optional[str] = None):
        """
        :param str password: private key password (optional)
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        private key password (optional)
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class SettingMxedgeMgmt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fipsEnabled":
            suggest = "fips_enabled"
        elif key == "mistPassword":
            suggest = "mist_password"
        elif key == "oobIpType":
            suggest = "oob_ip_type"
        elif key == "oobIpType6":
            suggest = "oob_ip_type6"
        elif key == "rootPassword":
            suggest = "root_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingMxedgeMgmt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingMxedgeMgmt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingMxedgeMgmt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fips_enabled: Optional[bool] = None,
                 mist_password: Optional[str] = None,
                 oob_ip_type: Optional[str] = None,
                 oob_ip_type6: Optional[str] = None,
                 root_password: Optional[str] = None):
        """
        :param str oob_ip_type: enum: `dhcp`, `disabled`, `static`
        :param str oob_ip_type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        if fips_enabled is not None:
            pulumi.set(__self__, "fips_enabled", fips_enabled)
        if mist_password is not None:
            pulumi.set(__self__, "mist_password", mist_password)
        if oob_ip_type is not None:
            pulumi.set(__self__, "oob_ip_type", oob_ip_type)
        if oob_ip_type6 is not None:
            pulumi.set(__self__, "oob_ip_type6", oob_ip_type6)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)

    @property
    @pulumi.getter(name="fipsEnabled")
    def fips_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "fips_enabled")

    @property
    @pulumi.getter(name="mistPassword")
    def mist_password(self) -> Optional[str]:
        return pulumi.get(self, "mist_password")

    @property
    @pulumi.getter(name="oobIpType")
    def oob_ip_type(self) -> Optional[str]:
        """
        enum: `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "oob_ip_type")

    @property
    @pulumi.getter(name="oobIpType6")
    def oob_ip_type6(self) -> Optional[str]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "oob_ip_type6")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[str]:
        return pulumi.get(self, "root_password")


@pulumi.output_type
class SettingPasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minLength":
            suggest = "min_length"
        elif key == "requiresSpecialChar":
            suggest = "requires_special_char"
        elif key == "requiresTwoFactorAuth":
            suggest = "requires_two_factor_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingPasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingPasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingPasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 freshness: Optional[int] = None,
                 min_length: Optional[int] = None,
                 requires_special_char: Optional[bool] = None,
                 requires_two_factor_auth: Optional[bool] = None):
        """
        :param bool enabled: whether the policy is enabled
        :param int freshness: days, required if password policy is enabled
        :param int min_length: required password length
        :param bool requires_special_char: whether to require special character
        :param bool requires_two_factor_auth: whether to require two-factor auth
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if freshness is not None:
            pulumi.set(__self__, "freshness", freshness)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if requires_special_char is not None:
            pulumi.set(__self__, "requires_special_char", requires_special_char)
        if requires_two_factor_auth is not None:
            pulumi.set(__self__, "requires_two_factor_auth", requires_two_factor_auth)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether the policy is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def freshness(self) -> Optional[int]:
        """
        days, required if password policy is enabled
        """
        return pulumi.get(self, "freshness")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        required password length
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="requiresSpecialChar")
    def requires_special_char(self) -> Optional[bool]:
        """
        whether to require special character
        """
        return pulumi.get(self, "requires_special_char")

    @property
    @pulumi.getter(name="requiresTwoFactorAuth")
    def requires_two_factor_auth(self) -> Optional[bool]:
        """
        whether to require two-factor auth
        """
        return pulumi.get(self, "requires_two_factor_auth")


@pulumi.output_type
class SettingPcap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPktLen":
            suggest = "max_pkt_len"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingPcap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingPcap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingPcap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 max_pkt_len: Optional[int] = None):
        """
        :param int max_pkt_len: max_len of non-management packets to capture
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if max_pkt_len is not None:
            pulumi.set(__self__, "max_pkt_len", max_pkt_len)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="maxPktLen")
    def max_pkt_len(self) -> Optional[int]:
        """
        max_len of non-management packets to capture
        """
        return pulumi.get(self, "max_pkt_len")


@pulumi.output_type
class SettingSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableLocalSsh":
            suggest = "disable_local_ssh"
        elif key == "fipsZeroizePassword":
            suggest = "fips_zeroize_password"
        elif key == "limitSshAccess":
            suggest = "limit_ssh_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_local_ssh: Optional[bool] = None,
                 fips_zeroize_password: Optional[str] = None,
                 limit_ssh_access: Optional[bool] = None):
        """
        :param bool disable_local_ssh: whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
        :param str fips_zeroize_password: password required to zeroize devices (FIPS) on site level
        :param bool limit_ssh_access: whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
        """
        if disable_local_ssh is not None:
            pulumi.set(__self__, "disable_local_ssh", disable_local_ssh)
        if fips_zeroize_password is not None:
            pulumi.set(__self__, "fips_zeroize_password", fips_zeroize_password)
        if limit_ssh_access is not None:
            pulumi.set(__self__, "limit_ssh_access", limit_ssh_access)

    @property
    @pulumi.getter(name="disableLocalSsh")
    def disable_local_ssh(self) -> Optional[bool]:
        """
        whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
        """
        return pulumi.get(self, "disable_local_ssh")

    @property
    @pulumi.getter(name="fipsZeroizePassword")
    def fips_zeroize_password(self) -> Optional[str]:
        """
        password required to zeroize devices (FIPS) on site level
        """
        return pulumi.get(self, "fips_zeroize_password")

    @property
    @pulumi.getter(name="limitSshAccess")
    def limit_ssh_access(self) -> Optional[bool]:
        """
        whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
        """
        return pulumi.get(self, "limit_ssh_access")


@pulumi.output_type
class SettingSwitchMgmt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apAffinityThreshold":
            suggest = "ap_affinity_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingSwitchMgmt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingSwitchMgmt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingSwitchMgmt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ap_affinity_threshold: Optional[int] = None):
        """
        :param int ap_affinity_threshold: If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        if ap_affinity_threshold is not None:
            pulumi.set(__self__, "ap_affinity_threshold", ap_affinity_threshold)

    @property
    @pulumi.getter(name="apAffinityThreshold")
    def ap_affinity_threshold(self) -> Optional[int]:
        """
        If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        return pulumi.get(self, "ap_affinity_threshold")


@pulumi.output_type
class SettingSyntheticTest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wanSpeedtest":
            suggest = "wan_speedtest"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingSyntheticTest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingSyntheticTest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingSyntheticTest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 vlans: Optional[Sequence['outputs.SettingSyntheticTestVlan']] = None,
                 wan_speedtest: Optional['outputs.SettingSyntheticTestWanSpeedtest'] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)
        if wan_speedtest is not None:
            pulumi.set(__self__, "wan_speedtest", wan_speedtest)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def vlans(self) -> Optional[Sequence['outputs.SettingSyntheticTestVlan']]:
        return pulumi.get(self, "vlans")

    @property
    @pulumi.getter(name="wanSpeedtest")
    def wan_speedtest(self) -> Optional['outputs.SettingSyntheticTestWanSpeedtest']:
        return pulumi.get(self, "wan_speedtest")


@pulumi.output_type
class SettingSyntheticTestVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customTestUrls":
            suggest = "custom_test_urls"
        elif key == "vlanIds":
            suggest = "vlan_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingSyntheticTestVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingSyntheticTestVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingSyntheticTestVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_test_urls: Optional[Sequence[str]] = None,
                 disabled: Optional[bool] = None,
                 vlan_ids: Optional[Sequence[str]] = None):
        """
        :param bool disabled: for some vlans where we don't want this to run
        """
        if custom_test_urls is not None:
            pulumi.set(__self__, "custom_test_urls", custom_test_urls)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="customTestUrls")
    def custom_test_urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_test_urls")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        for some vlans where we don't want this to run
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vlan_ids")


@pulumi.output_type
class SettingSyntheticTestWanSpeedtest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeOdFay":
            suggest = "time_od_fay"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingSyntheticTestWanSpeedtest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingSyntheticTestWanSpeedtest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingSyntheticTestWanSpeedtest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 time_od_fay: Optional[str] = None):
        """
        :param str time_od_fay: any / HH:MM (24-hour format)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if time_od_fay is not None:
            pulumi.set(__self__, "time_od_fay", time_od_fay)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="timeOdFay")
    def time_od_fay(self) -> Optional[str]:
        """
        any / HH:MM (24-hour format)
        """
        return pulumi.get(self, "time_od_fay")


@pulumi.output_type
class SettingVpnOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "asBase":
            suggest = "as_base"
        elif key == "stSubnet":
            suggest = "st_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingVpnOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingVpnOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingVpnOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 as_base: Optional[int] = None,
                 st_subnet: Optional[str] = None):
        """
        :param str st_subnet: equiring /12 or bigger to support 16 private IPs for 65535 gateways
        """
        if as_base is not None:
            pulumi.set(__self__, "as_base", as_base)
        if st_subnet is not None:
            pulumi.set(__self__, "st_subnet", st_subnet)

    @property
    @pulumi.getter(name="asBase")
    def as_base(self) -> Optional[int]:
        return pulumi.get(self, "as_base")

    @property
    @pulumi.getter(name="stSubnet")
    def st_subnet(self) -> Optional[str]:
        """
        equiring /12 or bigger to support 16 private IPs for 65535 gateways
        """
        return pulumi.get(self, "st_subnet")


@pulumi.output_type
class VpnPaths(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bfdProfile":
            suggest = "bfd_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnPaths. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnPaths.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnPaths.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bfd_profile: Optional[str] = None,
                 ip: Optional[str] = None,
                 pod: Optional[int] = None):
        """
        :param str bfd_profile: enum: `broadband`, `lte`
        :param str ip: if different from the wan port
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[str]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        if different from the wan port
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def pod(self) -> Optional[int]:
        return pulumi.get(self, "pod")


@pulumi.output_type
class WlanAcctServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAcctServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAcctServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAcctServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class WlanAirwatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"
        elif key == "consoleUrl":
            suggest = "console_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAirwatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAirwatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAirwatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 console_url: str,
                 password: str,
                 username: str,
                 enabled: Optional[bool] = None):
        """
        :param str api_key: API Key
        :param str console_url: console URL
        :param str password: password
        :param str username: username
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "console_url", console_url)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        """
        API Key
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> str:
        """
        console URL
        """
        return pulumi.get(self, "console_url")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        username
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WlanAppLimit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wxtagIds":
            suggest = "wxtag_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAppLimit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAppLimit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAppLimit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apps: Optional[Mapping[str, int]] = None,
                 enabled: Optional[bool] = None,
                 wxtag_ids: Optional[Mapping[str, int]] = None):
        """
        :param Mapping[str, int] apps: Map from app key to bandwidth in kbps. 
               Property key is the app key, defined in Get Application List
        :param Mapping[str, int] wxtag_ids: Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
               Property key is the wxtag id
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if wxtag_ids is not None:
            pulumi.set(__self__, "wxtag_ids", wxtag_ids)

    @property
    @pulumi.getter
    def apps(self) -> Optional[Mapping[str, int]]:
        """
        Map from app key to bandwidth in kbps. 
        Property key is the app key, defined in Get Application List
        """
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="wxtagIds")
    def wxtag_ids(self) -> Optional[Mapping[str, int]]:
        """
        Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
        Property key is the wxtag id
        """
        return pulumi.get(self, "wxtag_ids")


@pulumi.output_type
class WlanAppQos(dict):
    def __init__(__self__, *,
                 apps: Optional[Mapping[str, 'outputs.WlanAppQosApps']] = None,
                 enabled: Optional[bool] = None,
                 others: Optional[Sequence['outputs.WlanAppQosOther']] = None):
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if others is not None:
            pulumi.set(__self__, "others", others)

    @property
    @pulumi.getter
    def apps(self) -> Optional[Mapping[str, 'outputs.WlanAppQosApps']]:
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def others(self) -> Optional[Sequence['outputs.WlanAppQosOther']]:
        return pulumi.get(self, "others")


@pulumi.output_type
class WlanAppQosApps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstSubnet":
            suggest = "dst_subnet"
        elif key == "srcSubnet":
            suggest = "src_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAppQosApps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAppQosApps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAppQosApps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 dst_subnet: Optional[str] = None,
                 src_subnet: Optional[str] = None):
        """
        :param str dst_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        :param str src_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[str]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "dst_subnet")

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[str]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "src_subnet")


@pulumi.output_type
class WlanAppQosOther(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dstSubnet":
            suggest = "dst_subnet"
        elif key == "portRanges":
            suggest = "port_ranges"
        elif key == "srcSubnet":
            suggest = "src_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAppQosOther. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAppQosOther.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAppQosOther.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dscp: Optional[int] = None,
                 dst_subnet: Optional[str] = None,
                 port_ranges: Optional[str] = None,
                 protocol: Optional[str] = None,
                 src_subnet: Optional[str] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[int]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[str]:
        return pulumi.get(self, "dst_subnet")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[str]:
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[str]:
        return pulumi.get(self, "src_subnet")


@pulumi.output_type
class WlanAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anticlogThreshold":
            suggest = "anticlog_threshold"
        elif key == "eapReauth":
            suggest = "eap_reauth"
        elif key == "enableMacAuth":
            suggest = "enable_mac_auth"
        elif key == "keyIdx":
            suggest = "key_idx"
        elif key == "multiPskOnly":
            suggest = "multi_psk_only"
        elif key == "privateWlan":
            suggest = "private_wlan"
        elif key == "wepAsSecondaryAuth":
            suggest = "wep_as_secondary_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 anticlog_threshold: Optional[int] = None,
                 eap_reauth: Optional[bool] = None,
                 enable_mac_auth: Optional[bool] = None,
                 key_idx: Optional[int] = None,
                 keys: Optional[Sequence[str]] = None,
                 multi_psk_only: Optional[bool] = None,
                 owe: Optional[str] = None,
                 pairwises: Optional[Sequence[str]] = None,
                 private_wlan: Optional[bool] = None,
                 psk: Optional[str] = None,
                 type: Optional[str] = None,
                 wep_as_secondary_auth: Optional[bool] = None):
        """
        :param int anticlog_threshold: SAE anti-clogging token threshold
        :param bool eap_reauth: whether to trigger EAP reauth when the session ends
        :param bool enable_mac_auth: whether to enable MAC Auth, uses the same auth_servers
        :param int key_idx: when `type`==`wep`
        :param Sequence[str] keys: when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        :param bool multi_psk_only: when `type`==`psk`, whether to only use multi_psk
        :param str owe: if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        :param Sequence[str] pairwises: when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        :param bool private_wlan: when `multi_psk_only`==`true`, whether private wlan is enabled
        :param str psk: when `type`==`psk`, 8-64 characters, or 64 hex characters
        :param str type: enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        :param bool wep_as_secondary_auth: enable WEP as secondary auth
        """
        if anticlog_threshold is not None:
            pulumi.set(__self__, "anticlog_threshold", anticlog_threshold)
        if eap_reauth is not None:
            pulumi.set(__self__, "eap_reauth", eap_reauth)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if key_idx is not None:
            pulumi.set(__self__, "key_idx", key_idx)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if multi_psk_only is not None:
            pulumi.set(__self__, "multi_psk_only", multi_psk_only)
        if owe is not None:
            pulumi.set(__self__, "owe", owe)
        if pairwises is not None:
            pulumi.set(__self__, "pairwises", pairwises)
        if private_wlan is not None:
            pulumi.set(__self__, "private_wlan", private_wlan)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wep_as_secondary_auth is not None:
            pulumi.set(__self__, "wep_as_secondary_auth", wep_as_secondary_auth)

    @property
    @pulumi.getter(name="anticlogThreshold")
    def anticlog_threshold(self) -> Optional[int]:
        """
        SAE anti-clogging token threshold
        """
        return pulumi.get(self, "anticlog_threshold")

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> Optional[bool]:
        """
        whether to trigger EAP reauth when the session ends
        """
        return pulumi.get(self, "eap_reauth")

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[bool]:
        """
        whether to enable MAC Auth, uses the same auth_servers
        """
        return pulumi.get(self, "enable_mac_auth")

    @property
    @pulumi.getter(name="keyIdx")
    def key_idx(self) -> Optional[int]:
        """
        when `type`==`wep`
        """
        return pulumi.get(self, "key_idx")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        """
        when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="multiPskOnly")
    def multi_psk_only(self) -> Optional[bool]:
        """
        when `type`==`psk`, whether to only use multi_psk
        """
        return pulumi.get(self, "multi_psk_only")

    @property
    @pulumi.getter
    def owe(self) -> Optional[str]:
        """
        if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        """
        return pulumi.get(self, "owe")

    @property
    @pulumi.getter
    def pairwises(self) -> Optional[Sequence[str]]:
        """
        when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        """
        return pulumi.get(self, "pairwises")

    @property
    @pulumi.getter(name="privateWlan")
    def private_wlan(self) -> Optional[bool]:
        """
        when `multi_psk_only`==`true`, whether private wlan is enabled
        """
        return pulumi.get(self, "private_wlan")

    @property
    @pulumi.getter
    def psk(self) -> Optional[str]:
        """
        when `type`==`psk`, 8-64 characters, or 64 hex characters
        """
        return pulumi.get(self, "psk")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wepAsSecondaryAuth")
    def wep_as_secondary_auth(self) -> Optional[bool]:
        """
        enable WEP as secondary auth
        """
        return pulumi.get(self, "wep_as_secondary_auth")


@pulumi.output_type
class WlanAuthServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keywrapEnabled":
            suggest = "keywrap_enabled"
        elif key == "keywrapFormat":
            suggest = "keywrap_format"
        elif key == "keywrapKek":
            suggest = "keywrap_kek"
        elif key == "keywrapMack":
            suggest = "keywrap_mack"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanAuthServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanAuthServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanAuthServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 secret: str,
                 keywrap_enabled: Optional[bool] = None,
                 keywrap_format: Optional[str] = None,
                 keywrap_kek: Optional[str] = None,
                 keywrap_mack: Optional[str] = None,
                 port: Optional[int] = None):
        """
        :param str host: ip / hostname of RADIUS server
        :param str secret: secret of RADIUS server
        :param str keywrap_format: enum: `ascii`, `hex`
        :param int port: Auth port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def secret(self) -> str:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "keywrap_enabled")

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[str]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_kek")

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[str]:
        return pulumi.get(self, "keywrap_mack")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class WlanBonjour(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVlanIds":
            suggest = "additional_vlan_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanBonjour. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanBonjour.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanBonjour.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_vlan_ids: Sequence[str],
                 services: Mapping[str, 'outputs.WlanBonjourServices'],
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] additional_vlan_ids: additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        :param Mapping[str, 'WlanBonjourServicesArgs'] services: what services are allowed. 
               Property key is the service name
        :param bool enabled: whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        pulumi.set(__self__, "additional_vlan_ids", additional_vlan_ids)
        pulumi.set(__self__, "services", services)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="additionalVlanIds")
    def additional_vlan_ids(self) -> Sequence[str]:
        """
        additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        """
        return pulumi.get(self, "additional_vlan_ids")

    @property
    @pulumi.getter
    def services(self) -> Mapping[str, 'outputs.WlanBonjourServices']:
        """
        what services are allowed. 
        Property key is the service name
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WlanBonjourServices(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableLocal":
            suggest = "disable_local"
        elif key == "radiusGroups":
            suggest = "radius_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanBonjourServices. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanBonjourServices.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanBonjourServices.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable_local: Optional[bool] = None,
                 radius_groups: Optional[Sequence[str]] = None,
                 scope: Optional[str] = None):
        """
        :param bool disable_local: whether to prevent wireless clients to discover bonjour devices on the same WLAN
        :param Sequence[str] radius_groups: optional, if the service is further restricted for certain RADIUS groups
        :param str scope: how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        if disable_local is not None:
            pulumi.set(__self__, "disable_local", disable_local)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="disableLocal")
    def disable_local(self) -> Optional[bool]:
        """
        whether to prevent wireless clients to discover bonjour devices on the same WLAN
        """
        return pulumi.get(self, "disable_local")

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[Sequence[str]]:
        """
        optional, if the service is further restricted for certain RADIUS groups
        """
        return pulumi.get(self, "radius_groups")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        """
        how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        return pulumi.get(self, "scope")


@pulumi.output_type
class WlanCiscoCwa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHostnames":
            suggest = "allowed_hostnames"
        elif key == "allowedSubnets":
            suggest = "allowed_subnets"
        elif key == "blockedSubnets":
            suggest = "blocked_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanCiscoCwa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanCiscoCwa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanCiscoCwa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_hostnames: Optional[Sequence[str]] = None,
                 allowed_subnets: Optional[Sequence[str]] = None,
                 blocked_subnets: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        """
        :param Sequence[str] allowed_hostnames: list of hostnames without http(s):// (matched by substring)
        :param Sequence[str] allowed_subnets: list of CIDRs
        :param Sequence[str] blocked_subnets: list of blocked CIDRs
        """
        if allowed_hostnames is not None:
            pulumi.set(__self__, "allowed_hostnames", allowed_hostnames)
        if allowed_subnets is not None:
            pulumi.set(__self__, "allowed_subnets", allowed_subnets)
        if blocked_subnets is not None:
            pulumi.set(__self__, "blocked_subnets", blocked_subnets)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedHostnames")
    def allowed_hostnames(self) -> Optional[Sequence[str]]:
        """
        list of hostnames without http(s):// (matched by substring)
        """
        return pulumi.get(self, "allowed_hostnames")

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Optional[Sequence[str]]:
        """
        list of CIDRs
        """
        return pulumi.get(self, "allowed_subnets")

    @property
    @pulumi.getter(name="blockedSubnets")
    def blocked_subnets(self) -> Optional[Sequence[str]]:
        """
        list of blocked CIDRs
        """
        return pulumi.get(self, "blocked_subnets")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WlanCoaServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disableEventTimestampCheck":
            suggest = "disable_event_timestamp_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanCoaServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanCoaServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanCoaServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 secret: str,
                 disable_event_timestamp_check: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 port: Optional[int] = None):
        """
        :param bool disable_event_timestamp_check: whether to disable Event-Timestamp Check
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "secret", secret)
        if disable_event_timestamp_check is not None:
            pulumi.set(__self__, "disable_event_timestamp_check", disable_event_timestamp_check)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="disableEventTimestampCheck")
    def disable_event_timestamp_check(self) -> Optional[bool]:
        """
        whether to disable Event-Timestamp Check
        """
        return pulumi.get(self, "disable_event_timestamp_check")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WlanDnsServerRewrite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "radiusGroups":
            suggest = "radius_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanDnsServerRewrite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanDnsServerRewrite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanDnsServerRewrite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 radius_groups: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] radius_groups: map between radius_group and the desired DNS server (IPv4 only)
               Property key is the RADIUS group, property value is the desired DNS Server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[Mapping[str, str]]:
        """
        map between radius_group and the desired DNS server (IPv4 only)
        Property key is the RADIUS group, property value is the desired DNS Server
        """
        return pulumi.get(self, "radius_groups")


@pulumi.output_type
class WlanDynamicPsk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultPsk":
            suggest = "default_psk"
        elif key == "defaultVlanId":
            suggest = "default_vlan_id"
        elif key == "forceLookup":
            suggest = "force_lookup"
        elif key == "vlanIds":
            suggest = "vlan_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanDynamicPsk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanDynamicPsk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanDynamicPsk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_psk: Optional[str] = None,
                 default_vlan_id: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 force_lookup: Optional[bool] = None,
                 source: Optional[str] = None,
                 vlan_ids: Optional[Sequence[str]] = None):
        """
        :param str default_psk: default PSK to use if cloud WLC is not available, 8-63 characters
        :param bool force_lookup: when 11r is enabled, we'll try to use the cached PMK, this can be disabled
               `false` means auto
        :param str source: enum: `cloud_psks`, `radius`
        """
        if default_psk is not None:
            pulumi.set(__self__, "default_psk", default_psk)
        if default_vlan_id is not None:
            pulumi.set(__self__, "default_vlan_id", default_vlan_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_lookup is not None:
            pulumi.set(__self__, "force_lookup", force_lookup)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="defaultPsk")
    def default_psk(self) -> Optional[str]:
        """
        default PSK to use if cloud WLC is not available, 8-63 characters
        """
        return pulumi.get(self, "default_psk")

    @property
    @pulumi.getter(name="defaultVlanId")
    def default_vlan_id(self) -> Optional[str]:
        return pulumi.get(self, "default_vlan_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="forceLookup")
    def force_lookup(self) -> Optional[bool]:
        """
        when 11r is enabled, we'll try to use the cached PMK, this can be disabled
        `false` means auto
        """
        return pulumi.get(self, "force_lookup")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        enum: `cloud_psks`, `radius`
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vlan_ids")


@pulumi.output_type
class WlanDynamicVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultVlanIds":
            suggest = "default_vlan_ids"
        elif key == "localVlanIds":
            suggest = "local_vlan_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanDynamicVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanDynamicVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanDynamicVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_vlan_ids: Sequence[str],
                 enabled: Optional[bool] = None,
                 local_vlan_ids: Optional[Sequence[str]] = None,
                 type: Optional[str] = None,
                 vlans: Optional[Mapping[str, str]] = None):
        """
        :param Sequence[str] default_vlan_ids: Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        :param bool enabled: whether to enable dynamic vlan
        :param Sequence[str] local_vlan_ids: vlan_ids to be locally bridged
        :param str type: standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        :param Mapping[str, str] vlans: map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
                 * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
                 * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        pulumi.set(__self__, "default_vlan_ids", default_vlan_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if local_vlan_ids is not None:
            pulumi.set(__self__, "local_vlan_ids", local_vlan_ids)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="defaultVlanIds")
    def default_vlan_ids(self) -> Sequence[str]:
        """
        Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        """
        return pulumi.get(self, "default_vlan_ids")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable dynamic vlan
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="localVlanIds")
    def local_vlan_ids(self) -> Optional[Sequence[str]]:
        """
        vlan_ids to be locally bridged
        """
        return pulumi.get(self, "local_vlan_ids")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def vlans(self) -> Optional[Mapping[str, str]]:
        """
        map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
          * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
          * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        return pulumi.get(self, "vlans")


@pulumi.output_type
class WlanHotspot20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainNames":
            suggest = "domain_names"
        elif key == "naiRealms":
            suggest = "nai_realms"
        elif key == "venueName":
            suggest = "venue_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanHotspot20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanHotspot20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanHotspot20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_names: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None,
                 nai_realms: Optional[Sequence[str]] = None,
                 operators: Optional[Sequence[str]] = None,
                 rcois: Optional[Sequence[str]] = None,
                 venue_name: Optional[str] = None):
        """
        :param bool enabled: whether to enable hotspot 2.0 config
        :param Sequence[str] operators: list of operators to support
        :param str venue_name: venue name, default is site name
        """
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if nai_realms is not None:
            pulumi.set(__self__, "nai_realms", nai_realms)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)
        if rcois is not None:
            pulumi.set(__self__, "rcois", rcois)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "domain_names")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable hotspot 2.0 config
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="naiRealms")
    def nai_realms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nai_realms")

    @property
    @pulumi.getter
    def operators(self) -> Optional[Sequence[str]]:
        """
        list of operators to support
        """
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter
    def rcois(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rcois")

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[str]:
        """
        venue name, default is site name
        """
        return pulumi.get(self, "venue_name")


@pulumi.output_type
class WlanInjectDhcpOption82(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "circuitId":
            suggest = "circuit_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanInjectDhcpOption82. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanInjectDhcpOption82.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanInjectDhcpOption82.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 circuit_id: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to inject option 82 when forwarding DHCP packets
        """
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[str]:
        return pulumi.get(self, "circuit_id")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to inject option 82 when forwarding DHCP packets
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WlanMistNac(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: when enabled:
                 * `auth_servers` is ignored
                 * `acct_servers` is ignored
                 * `auth_servers_*` are ignored
                 * `coa_servers` is ignored
                 * `radsec` is ignored
                 * `coa_enabled` is assumed'
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        when enabled:
          * `auth_servers` is ignored
          * `acct_servers` is ignored
          * `auth_servers_*` are ignored
          * `coa_servers` is ignored
          * `radsec` is ignored
          * `coa_enabled` is assumed'
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class WlanPortal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "amazonClientId":
            suggest = "amazon_client_id"
        elif key == "amazonClientSecret":
            suggest = "amazon_client_secret"
        elif key == "amazonEmailDomains":
            suggest = "amazon_email_domains"
        elif key == "amazonEnabled":
            suggest = "amazon_enabled"
        elif key == "amazonExpire":
            suggest = "amazon_expire"
        elif key == "azureClientId":
            suggest = "azure_client_id"
        elif key == "azureClientSecret":
            suggest = "azure_client_secret"
        elif key == "azureEnabled":
            suggest = "azure_enabled"
        elif key == "azureExpire":
            suggest = "azure_expire"
        elif key == "azureTenantId":
            suggest = "azure_tenant_id"
        elif key == "broadnetPassword":
            suggest = "broadnet_password"
        elif key == "broadnetSid":
            suggest = "broadnet_sid"
        elif key == "broadnetUserId":
            suggest = "broadnet_user_id"
        elif key == "bypassWhenCloudDown":
            suggest = "bypass_when_cloud_down"
        elif key == "clickatellApiKey":
            suggest = "clickatell_api_key"
        elif key == "crossSite":
            suggest = "cross_site"
        elif key == "emailEnabled":
            suggest = "email_enabled"
        elif key == "externalPortalUrl":
            suggest = "external_portal_url"
        elif key == "facebookClientId":
            suggest = "facebook_client_id"
        elif key == "facebookClientSecret":
            suggest = "facebook_client_secret"
        elif key == "facebookEmailDomains":
            suggest = "facebook_email_domains"
        elif key == "facebookEnabled":
            suggest = "facebook_enabled"
        elif key == "facebookExpire":
            suggest = "facebook_expire"
        elif key == "forwardUrl":
            suggest = "forward_url"
        elif key == "googleClientId":
            suggest = "google_client_id"
        elif key == "googleClientSecret":
            suggest = "google_client_secret"
        elif key == "googleEmailDomains":
            suggest = "google_email_domains"
        elif key == "googleEnabled":
            suggest = "google_enabled"
        elif key == "googleExpire":
            suggest = "google_expire"
        elif key == "gupshupPassword":
            suggest = "gupshup_password"
        elif key == "gupshupUserid":
            suggest = "gupshup_userid"
        elif key == "microsoftClientId":
            suggest = "microsoft_client_id"
        elif key == "microsoftClientSecret":
            suggest = "microsoft_client_secret"
        elif key == "microsoftEmailDomains":
            suggest = "microsoft_email_domains"
        elif key == "microsoftEnabled":
            suggest = "microsoft_enabled"
        elif key == "microsoftExpire":
            suggest = "microsoft_expire"
        elif key == "passphraseEnabled":
            suggest = "passphrase_enabled"
        elif key == "passphraseExpire":
            suggest = "passphrase_expire"
        elif key == "predefinedSponsorsEnabled":
            suggest = "predefined_sponsors_enabled"
        elif key == "puzzelPassword":
            suggest = "puzzel_password"
        elif key == "puzzelServiceId":
            suggest = "puzzel_service_id"
        elif key == "puzzelUsername":
            suggest = "puzzel_username"
        elif key == "smsEnabled":
            suggest = "sms_enabled"
        elif key == "smsExpire":
            suggest = "sms_expire"
        elif key == "smsMessageFormat":
            suggest = "sms_message_format"
        elif key == "smsProvider":
            suggest = "sms_provider"
        elif key == "sponsorAutoApprove":
            suggest = "sponsor_auto_approve"
        elif key == "sponsorEmailDomains":
            suggest = "sponsor_email_domains"
        elif key == "sponsorEnabled":
            suggest = "sponsor_enabled"
        elif key == "sponsorExpire":
            suggest = "sponsor_expire"
        elif key == "sponsorLinkValidityDuration":
            suggest = "sponsor_link_validity_duration"
        elif key == "sponsorNotifyAll":
            suggest = "sponsor_notify_all"
        elif key == "sponsorStatusNotify":
            suggest = "sponsor_status_notify"
        elif key == "ssoDefaultRole":
            suggest = "sso_default_role"
        elif key == "ssoForcedRole":
            suggest = "sso_forced_role"
        elif key == "ssoIdpCert":
            suggest = "sso_idp_cert"
        elif key == "ssoIdpSignAlgo":
            suggest = "sso_idp_sign_algo"
        elif key == "ssoIdpSsoUrl":
            suggest = "sso_idp_sso_url"
        elif key == "ssoIssuer":
            suggest = "sso_issuer"
        elif key == "ssoNameidFormat":
            suggest = "sso_nameid_format"
        elif key == "telstraClientId":
            suggest = "telstra_client_id"
        elif key == "telstraClientSecret":
            suggest = "telstra_client_secret"
        elif key == "twilioAuthToken":
            suggest = "twilio_auth_token"
        elif key == "twilioPhoneNumber":
            suggest = "twilio_phone_number"
        elif key == "twilioSid":
            suggest = "twilio_sid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanPortal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanPortal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanPortal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 amazon_client_id: Optional[str] = None,
                 amazon_client_secret: Optional[str] = None,
                 amazon_email_domains: Optional[Sequence[str]] = None,
                 amazon_enabled: Optional[bool] = None,
                 amazon_expire: Optional[float] = None,
                 auth: Optional[str] = None,
                 azure_client_id: Optional[str] = None,
                 azure_client_secret: Optional[str] = None,
                 azure_enabled: Optional[bool] = None,
                 azure_expire: Optional[float] = None,
                 azure_tenant_id: Optional[str] = None,
                 broadnet_password: Optional[str] = None,
                 broadnet_sid: Optional[str] = None,
                 broadnet_user_id: Optional[str] = None,
                 bypass_when_cloud_down: Optional[bool] = None,
                 clickatell_api_key: Optional[str] = None,
                 cross_site: Optional[bool] = None,
                 email_enabled: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 expire: Optional[float] = None,
                 external_portal_url: Optional[str] = None,
                 facebook_client_id: Optional[str] = None,
                 facebook_client_secret: Optional[str] = None,
                 facebook_email_domains: Optional[Sequence[str]] = None,
                 facebook_enabled: Optional[bool] = None,
                 facebook_expire: Optional[float] = None,
                 forward: Optional[bool] = None,
                 forward_url: Optional[str] = None,
                 google_client_id: Optional[str] = None,
                 google_client_secret: Optional[str] = None,
                 google_email_domains: Optional[Sequence[str]] = None,
                 google_enabled: Optional[bool] = None,
                 google_expire: Optional[float] = None,
                 gupshup_password: Optional[str] = None,
                 gupshup_userid: Optional[str] = None,
                 microsoft_client_id: Optional[str] = None,
                 microsoft_client_secret: Optional[str] = None,
                 microsoft_email_domains: Optional[Sequence[str]] = None,
                 microsoft_enabled: Optional[bool] = None,
                 microsoft_expire: Optional[float] = None,
                 passphrase_enabled: Optional[bool] = None,
                 passphrase_expire: Optional[float] = None,
                 password: Optional[str] = None,
                 predefined_sponsors_enabled: Optional[bool] = None,
                 privacy: Optional[bool] = None,
                 puzzel_password: Optional[str] = None,
                 puzzel_service_id: Optional[str] = None,
                 puzzel_username: Optional[str] = None,
                 sms_enabled: Optional[bool] = None,
                 sms_expire: Optional[float] = None,
                 sms_message_format: Optional[str] = None,
                 sms_provider: Optional[str] = None,
                 sponsor_auto_approve: Optional[bool] = None,
                 sponsor_email_domains: Optional[Sequence[str]] = None,
                 sponsor_enabled: Optional[bool] = None,
                 sponsor_expire: Optional[float] = None,
                 sponsor_link_validity_duration: Optional[int] = None,
                 sponsor_notify_all: Optional[bool] = None,
                 sponsor_status_notify: Optional[bool] = None,
                 sponsors: Optional[Mapping[str, str]] = None,
                 sso_default_role: Optional[str] = None,
                 sso_forced_role: Optional[str] = None,
                 sso_idp_cert: Optional[str] = None,
                 sso_idp_sign_algo: Optional[str] = None,
                 sso_idp_sso_url: Optional[str] = None,
                 sso_issuer: Optional[str] = None,
                 sso_nameid_format: Optional[str] = None,
                 telstra_client_id: Optional[str] = None,
                 telstra_client_secret: Optional[str] = None,
                 twilio_auth_token: Optional[str] = None,
                 twilio_phone_number: Optional[str] = None,
                 twilio_sid: Optional[str] = None):
        """
        :param str amazon_client_id: amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param str amazon_client_secret: amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        :param Sequence[str] amazon_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param bool amazon_enabled: whether amazon is enabled as a login method
        :param float amazon_expire: interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        :param str auth: authentication scheme. enum: `external`, `none`, `sso`
        :param str azure_client_id: Required if `azure_enabled`==`true`.
               Azure active directory app client id
        :param str azure_client_secret: Required if `azure_enabled`==`true`.
               Azure active directory app client secret
        :param bool azure_enabled: whether Azure Active Directory is enabled as a login method
        :param float azure_expire: interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        :param str azure_tenant_id: Required if `azure_enabled`==`true`.
               Azure active directory tenant id.
        :param str broadnet_password: when `sms_provider`==`broadnet`
        :param str broadnet_sid: when `sms_provider`==`broadnet`
        :param str broadnet_user_id: when `sms_provider`==`broadnet`
        :param bool bypass_when_cloud_down: whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        :param str clickatell_api_key: when `sms_provider`==`clickatell`
        :param bool cross_site: whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        :param bool email_enabled: whether email (access code verification) is enabled as a login method
        :param bool enabled: whether guest portal is enabled
        :param float expire: how long to remain authorized, in minutes
        :param str external_portal_url: external portal URL (e.g. https://host/url) where we can append our query parameters to
        :param str facebook_client_id: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param str facebook_client_secret: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        :param Sequence[str] facebook_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param bool facebook_enabled: whether facebook is enabled as a login method
        :param float facebook_expire: interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        :param bool forward: whether to forward the user to another URL after authorized
        :param str forward_url: the URL to forward the user to
        :param str google_client_id: Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param str google_client_secret: Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        :param Sequence[str] google_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param bool google_enabled: whether google is enabled as login method
        :param float google_expire: interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        :param str gupshup_password: when `sms_provider`==`gupshup`
        :param str gupshup_userid: when `sms_provider`==`gupshup`
        :param str microsoft_client_id: microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param str microsoft_client_secret: microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        :param Sequence[str] microsoft_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param bool microsoft_enabled: whether microsoft 365 is enabled as a login method
        :param float microsoft_expire: interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        :param bool passphrase_enabled: whether password is enabled
        :param float passphrase_expire: interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        :param str password: passphrase
        :param bool predefined_sponsors_enabled: whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        :param str puzzel_password: when `sms_provider`==`puzzel`
        :param str puzzel_service_id: when `sms_provider`==`puzzel`
        :param str puzzel_username: when `sms_provider`==`puzzel`
        :param bool sms_enabled: whether sms is enabled as a login method
        :param float sms_expire: interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        :param str sms_provider: enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        :param bool sponsor_auto_approve: whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        :param Sequence[str] sponsor_email_domains: list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        :param bool sponsor_enabled: whether sponsor is enabled
        :param float sponsor_expire: interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        :param int sponsor_link_validity_duration: how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        :param bool sponsor_notify_all: whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        :param bool sponsor_status_notify: if enabled, guest will get email about sponsor's action (approve/deny)
        :param Mapping[str, str] sponsors: object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.
               Property key is the sponsor email, Property value is the sponsor name
        :param str sso_default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        :param str sso_idp_cert: IDP Cert (used to verify the signed response)
        :param str sso_idp_sign_algo: signing algorithm for SAML Assertion
        :param str sso_idp_sso_url: IDP Single-Sign-On URL
        :param str sso_issuer: IDP issuer URL
        :param str sso_nameid_format: enum: `email`, `unspecified`
        :param str telstra_client_id: when `sms_provider`==`telstra`, Client ID provided by Telstra
        :param str telstra_client_secret: when `sms_provider`==`telstra`, Client secret provided by Telstra
        :param str twilio_auth_token: when `sms_provider`==`twilio`, Auth token account with twilio account
        :param str twilio_phone_number: when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        :param str twilio_sid: when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        if amazon_client_id is not None:
            pulumi.set(__self__, "amazon_client_id", amazon_client_id)
        if amazon_client_secret is not None:
            pulumi.set(__self__, "amazon_client_secret", amazon_client_secret)
        if amazon_email_domains is not None:
            pulumi.set(__self__, "amazon_email_domains", amazon_email_domains)
        if amazon_enabled is not None:
            pulumi.set(__self__, "amazon_enabled", amazon_enabled)
        if amazon_expire is not None:
            pulumi.set(__self__, "amazon_expire", amazon_expire)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_enabled is not None:
            pulumi.set(__self__, "azure_enabled", azure_enabled)
        if azure_expire is not None:
            pulumi.set(__self__, "azure_expire", azure_expire)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if broadnet_password is not None:
            pulumi.set(__self__, "broadnet_password", broadnet_password)
        if broadnet_sid is not None:
            pulumi.set(__self__, "broadnet_sid", broadnet_sid)
        if broadnet_user_id is not None:
            pulumi.set(__self__, "broadnet_user_id", broadnet_user_id)
        if bypass_when_cloud_down is not None:
            pulumi.set(__self__, "bypass_when_cloud_down", bypass_when_cloud_down)
        if clickatell_api_key is not None:
            pulumi.set(__self__, "clickatell_api_key", clickatell_api_key)
        if cross_site is not None:
            pulumi.set(__self__, "cross_site", cross_site)
        if email_enabled is not None:
            pulumi.set(__self__, "email_enabled", email_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if external_portal_url is not None:
            pulumi.set(__self__, "external_portal_url", external_portal_url)
        if facebook_client_id is not None:
            pulumi.set(__self__, "facebook_client_id", facebook_client_id)
        if facebook_client_secret is not None:
            pulumi.set(__self__, "facebook_client_secret", facebook_client_secret)
        if facebook_email_domains is not None:
            pulumi.set(__self__, "facebook_email_domains", facebook_email_domains)
        if facebook_enabled is not None:
            pulumi.set(__self__, "facebook_enabled", facebook_enabled)
        if facebook_expire is not None:
            pulumi.set(__self__, "facebook_expire", facebook_expire)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if forward_url is not None:
            pulumi.set(__self__, "forward_url", forward_url)
        if google_client_id is not None:
            pulumi.set(__self__, "google_client_id", google_client_id)
        if google_client_secret is not None:
            pulumi.set(__self__, "google_client_secret", google_client_secret)
        if google_email_domains is not None:
            pulumi.set(__self__, "google_email_domains", google_email_domains)
        if google_enabled is not None:
            pulumi.set(__self__, "google_enabled", google_enabled)
        if google_expire is not None:
            pulumi.set(__self__, "google_expire", google_expire)
        if gupshup_password is not None:
            pulumi.set(__self__, "gupshup_password", gupshup_password)
        if gupshup_userid is not None:
            pulumi.set(__self__, "gupshup_userid", gupshup_userid)
        if microsoft_client_id is not None:
            pulumi.set(__self__, "microsoft_client_id", microsoft_client_id)
        if microsoft_client_secret is not None:
            pulumi.set(__self__, "microsoft_client_secret", microsoft_client_secret)
        if microsoft_email_domains is not None:
            pulumi.set(__self__, "microsoft_email_domains", microsoft_email_domains)
        if microsoft_enabled is not None:
            pulumi.set(__self__, "microsoft_enabled", microsoft_enabled)
        if microsoft_expire is not None:
            pulumi.set(__self__, "microsoft_expire", microsoft_expire)
        if passphrase_enabled is not None:
            pulumi.set(__self__, "passphrase_enabled", passphrase_enabled)
        if passphrase_expire is not None:
            pulumi.set(__self__, "passphrase_expire", passphrase_expire)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if predefined_sponsors_enabled is not None:
            pulumi.set(__self__, "predefined_sponsors_enabled", predefined_sponsors_enabled)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if puzzel_password is not None:
            pulumi.set(__self__, "puzzel_password", puzzel_password)
        if puzzel_service_id is not None:
            pulumi.set(__self__, "puzzel_service_id", puzzel_service_id)
        if puzzel_username is not None:
            pulumi.set(__self__, "puzzel_username", puzzel_username)
        if sms_enabled is not None:
            pulumi.set(__self__, "sms_enabled", sms_enabled)
        if sms_expire is not None:
            pulumi.set(__self__, "sms_expire", sms_expire)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_provider is not None:
            pulumi.set(__self__, "sms_provider", sms_provider)
        if sponsor_auto_approve is not None:
            pulumi.set(__self__, "sponsor_auto_approve", sponsor_auto_approve)
        if sponsor_email_domains is not None:
            pulumi.set(__self__, "sponsor_email_domains", sponsor_email_domains)
        if sponsor_enabled is not None:
            pulumi.set(__self__, "sponsor_enabled", sponsor_enabled)
        if sponsor_expire is not None:
            pulumi.set(__self__, "sponsor_expire", sponsor_expire)
        if sponsor_link_validity_duration is not None:
            pulumi.set(__self__, "sponsor_link_validity_duration", sponsor_link_validity_duration)
        if sponsor_notify_all is not None:
            pulumi.set(__self__, "sponsor_notify_all", sponsor_notify_all)
        if sponsor_status_notify is not None:
            pulumi.set(__self__, "sponsor_status_notify", sponsor_status_notify)
        if sponsors is not None:
            pulumi.set(__self__, "sponsors", sponsors)
        if sso_default_role is not None:
            pulumi.set(__self__, "sso_default_role", sso_default_role)
        if sso_forced_role is not None:
            pulumi.set(__self__, "sso_forced_role", sso_forced_role)
        if sso_idp_cert is not None:
            pulumi.set(__self__, "sso_idp_cert", sso_idp_cert)
        if sso_idp_sign_algo is not None:
            pulumi.set(__self__, "sso_idp_sign_algo", sso_idp_sign_algo)
        if sso_idp_sso_url is not None:
            pulumi.set(__self__, "sso_idp_sso_url", sso_idp_sso_url)
        if sso_issuer is not None:
            pulumi.set(__self__, "sso_issuer", sso_issuer)
        if sso_nameid_format is not None:
            pulumi.set(__self__, "sso_nameid_format", sso_nameid_format)
        if telstra_client_id is not None:
            pulumi.set(__self__, "telstra_client_id", telstra_client_id)
        if telstra_client_secret is not None:
            pulumi.set(__self__, "telstra_client_secret", telstra_client_secret)
        if twilio_auth_token is not None:
            pulumi.set(__self__, "twilio_auth_token", twilio_auth_token)
        if twilio_phone_number is not None:
            pulumi.set(__self__, "twilio_phone_number", twilio_phone_number)
        if twilio_sid is not None:
            pulumi.set(__self__, "twilio_sid", twilio_sid)

    @property
    @pulumi.getter(name="amazonClientId")
    def amazon_client_id(self) -> Optional[str]:
        """
        amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "amazon_client_id")

    @property
    @pulumi.getter(name="amazonClientSecret")
    def amazon_client_secret(self) -> Optional[str]:
        """
        amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "amazon_client_secret")

    @property
    @pulumi.getter(name="amazonEmailDomains")
    def amazon_email_domains(self) -> Optional[Sequence[str]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "amazon_email_domains")

    @property
    @pulumi.getter(name="amazonEnabled")
    def amazon_enabled(self) -> Optional[bool]:
        """
        whether amazon is enabled as a login method
        """
        return pulumi.get(self, "amazon_enabled")

    @property
    @pulumi.getter(name="amazonExpire")
    def amazon_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "amazon_expire")

    @property
    @pulumi.getter
    def auth(self) -> Optional[str]:
        """
        authentication scheme. enum: `external`, `none`, `sso`
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[str]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client id
        """
        return pulumi.get(self, "azure_client_id")

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[str]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client secret
        """
        return pulumi.get(self, "azure_client_secret")

    @property
    @pulumi.getter(name="azureEnabled")
    def azure_enabled(self) -> Optional[bool]:
        """
        whether Azure Active Directory is enabled as a login method
        """
        return pulumi.get(self, "azure_enabled")

    @property
    @pulumi.getter(name="azureExpire")
    def azure_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "azure_expire")

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[str]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory tenant id.
        """
        return pulumi.get(self, "azure_tenant_id")

    @property
    @pulumi.getter(name="broadnetPassword")
    def broadnet_password(self) -> Optional[str]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_password")

    @property
    @pulumi.getter(name="broadnetSid")
    def broadnet_sid(self) -> Optional[str]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_sid")

    @property
    @pulumi.getter(name="broadnetUserId")
    def broadnet_user_id(self) -> Optional[str]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_user_id")

    @property
    @pulumi.getter(name="bypassWhenCloudDown")
    def bypass_when_cloud_down(self) -> Optional[bool]:
        """
        whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        """
        return pulumi.get(self, "bypass_when_cloud_down")

    @property
    @pulumi.getter(name="clickatellApiKey")
    def clickatell_api_key(self) -> Optional[str]:
        """
        when `sms_provider`==`clickatell`
        """
        return pulumi.get(self, "clickatell_api_key")

    @property
    @pulumi.getter(name="crossSite")
    def cross_site(self) -> Optional[bool]:
        """
        whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        """
        return pulumi.get(self, "cross_site")

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> Optional[bool]:
        """
        whether email (access code verification) is enabled as a login method
        """
        return pulumi.get(self, "email_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether guest portal is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def expire(self) -> Optional[float]:
        """
        how long to remain authorized, in minutes
        """
        return pulumi.get(self, "expire")

    @property
    @pulumi.getter(name="externalPortalUrl")
    def external_portal_url(self) -> Optional[str]:
        """
        external portal URL (e.g. https://host/url) where we can append our query parameters to
        """
        return pulumi.get(self, "external_portal_url")

    @property
    @pulumi.getter(name="facebookClientId")
    def facebook_client_id(self) -> Optional[str]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "facebook_client_id")

    @property
    @pulumi.getter(name="facebookClientSecret")
    def facebook_client_secret(self) -> Optional[str]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "facebook_client_secret")

    @property
    @pulumi.getter(name="facebookEmailDomains")
    def facebook_email_domains(self) -> Optional[Sequence[str]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "facebook_email_domains")

    @property
    @pulumi.getter(name="facebookEnabled")
    def facebook_enabled(self) -> Optional[bool]:
        """
        whether facebook is enabled as a login method
        """
        return pulumi.get(self, "facebook_enabled")

    @property
    @pulumi.getter(name="facebookExpire")
    def facebook_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "facebook_expire")

    @property
    @pulumi.getter
    def forward(self) -> Optional[bool]:
        """
        whether to forward the user to another URL after authorized
        """
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="forwardUrl")
    def forward_url(self) -> Optional[str]:
        """
        the URL to forward the user to
        """
        return pulumi.get(self, "forward_url")

    @property
    @pulumi.getter(name="googleClientId")
    def google_client_id(self) -> Optional[str]:
        """
        Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "google_client_id")

    @property
    @pulumi.getter(name="googleClientSecret")
    def google_client_secret(self) -> Optional[str]:
        """
        Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "google_client_secret")

    @property
    @pulumi.getter(name="googleEmailDomains")
    def google_email_domains(self) -> Optional[Sequence[str]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "google_email_domains")

    @property
    @pulumi.getter(name="googleEnabled")
    def google_enabled(self) -> Optional[bool]:
        """
        whether google is enabled as login method
        """
        return pulumi.get(self, "google_enabled")

    @property
    @pulumi.getter(name="googleExpire")
    def google_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "google_expire")

    @property
    @pulumi.getter(name="gupshupPassword")
    def gupshup_password(self) -> Optional[str]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_password")

    @property
    @pulumi.getter(name="gupshupUserid")
    def gupshup_userid(self) -> Optional[str]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_userid")

    @property
    @pulumi.getter(name="microsoftClientId")
    def microsoft_client_id(self) -> Optional[str]:
        """
        microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "microsoft_client_id")

    @property
    @pulumi.getter(name="microsoftClientSecret")
    def microsoft_client_secret(self) -> Optional[str]:
        """
        microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "microsoft_client_secret")

    @property
    @pulumi.getter(name="microsoftEmailDomains")
    def microsoft_email_domains(self) -> Optional[Sequence[str]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "microsoft_email_domains")

    @property
    @pulumi.getter(name="microsoftEnabled")
    def microsoft_enabled(self) -> Optional[bool]:
        """
        whether microsoft 365 is enabled as a login method
        """
        return pulumi.get(self, "microsoft_enabled")

    @property
    @pulumi.getter(name="microsoftExpire")
    def microsoft_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "microsoft_expire")

    @property
    @pulumi.getter(name="passphraseEnabled")
    def passphrase_enabled(self) -> Optional[bool]:
        """
        whether password is enabled
        """
        return pulumi.get(self, "passphrase_enabled")

    @property
    @pulumi.getter(name="passphraseExpire")
    def passphrase_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        """
        return pulumi.get(self, "passphrase_expire")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        passphrase
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="predefinedSponsorsEnabled")
    def predefined_sponsors_enabled(self) -> Optional[bool]:
        """
        whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        """
        return pulumi.get(self, "predefined_sponsors_enabled")

    @property
    @pulumi.getter
    def privacy(self) -> Optional[bool]:
        return pulumi.get(self, "privacy")

    @property
    @pulumi.getter(name="puzzelPassword")
    def puzzel_password(self) -> Optional[str]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_password")

    @property
    @pulumi.getter(name="puzzelServiceId")
    def puzzel_service_id(self) -> Optional[str]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_service_id")

    @property
    @pulumi.getter(name="puzzelUsername")
    def puzzel_username(self) -> Optional[str]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_username")

    @property
    @pulumi.getter(name="smsEnabled")
    def sms_enabled(self) -> Optional[bool]:
        """
        whether sms is enabled as a login method
        """
        return pulumi.get(self, "sms_enabled")

    @property
    @pulumi.getter(name="smsExpire")
    def sms_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sms_expire")

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[str]:
        return pulumi.get(self, "sms_message_format")

    @property
    @pulumi.getter(name="smsProvider")
    def sms_provider(self) -> Optional[str]:
        """
        enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        """
        return pulumi.get(self, "sms_provider")

    @property
    @pulumi.getter(name="sponsorAutoApprove")
    def sponsor_auto_approve(self) -> Optional[bool]:
        """
        whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        """
        return pulumi.get(self, "sponsor_auto_approve")

    @property
    @pulumi.getter(name="sponsorEmailDomains")
    def sponsor_email_domains(self) -> Optional[Sequence[str]]:
        """
        list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        """
        return pulumi.get(self, "sponsor_email_domains")

    @property
    @pulumi.getter(name="sponsorEnabled")
    def sponsor_enabled(self) -> Optional[bool]:
        """
        whether sponsor is enabled
        """
        return pulumi.get(self, "sponsor_enabled")

    @property
    @pulumi.getter(name="sponsorExpire")
    def sponsor_expire(self) -> Optional[float]:
        """
        interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sponsor_expire")

    @property
    @pulumi.getter(name="sponsorLinkValidityDuration")
    def sponsor_link_validity_duration(self) -> Optional[int]:
        """
        how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        """
        return pulumi.get(self, "sponsor_link_validity_duration")

    @property
    @pulumi.getter(name="sponsorNotifyAll")
    def sponsor_notify_all(self) -> Optional[bool]:
        """
        whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        """
        return pulumi.get(self, "sponsor_notify_all")

    @property
    @pulumi.getter(name="sponsorStatusNotify")
    def sponsor_status_notify(self) -> Optional[bool]:
        """
        if enabled, guest will get email about sponsor's action (approve/deny)
        """
        return pulumi.get(self, "sponsor_status_notify")

    @property
    @pulumi.getter
    def sponsors(self) -> Optional[Mapping[str, str]]:
        """
        object of allowed sponsors email with name. Required if `sponsor_enabled` is `true` and `sponsor_email_domains` is empty.
        Property key is the sponsor email, Property value is the sponsor name
        """
        return pulumi.get(self, "sponsors")

    @property
    @pulumi.getter(name="ssoDefaultRole")
    def sso_default_role(self) -> Optional[str]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        """
        return pulumi.get(self, "sso_default_role")

    @property
    @pulumi.getter(name="ssoForcedRole")
    def sso_forced_role(self) -> Optional[str]:
        return pulumi.get(self, "sso_forced_role")

    @property
    @pulumi.getter(name="ssoIdpCert")
    def sso_idp_cert(self) -> Optional[str]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "sso_idp_cert")

    @property
    @pulumi.getter(name="ssoIdpSignAlgo")
    def sso_idp_sign_algo(self) -> Optional[str]:
        """
        signing algorithm for SAML Assertion
        """
        return pulumi.get(self, "sso_idp_sign_algo")

    @property
    @pulumi.getter(name="ssoIdpSsoUrl")
    def sso_idp_sso_url(self) -> Optional[str]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "sso_idp_sso_url")

    @property
    @pulumi.getter(name="ssoIssuer")
    def sso_issuer(self) -> Optional[str]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "sso_issuer")

    @property
    @pulumi.getter(name="ssoNameidFormat")
    def sso_nameid_format(self) -> Optional[str]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "sso_nameid_format")

    @property
    @pulumi.getter(name="telstraClientId")
    def telstra_client_id(self) -> Optional[str]:
        """
        when `sms_provider`==`telstra`, Client ID provided by Telstra
        """
        return pulumi.get(self, "telstra_client_id")

    @property
    @pulumi.getter(name="telstraClientSecret")
    def telstra_client_secret(self) -> Optional[str]:
        """
        when `sms_provider`==`telstra`, Client secret provided by Telstra
        """
        return pulumi.get(self, "telstra_client_secret")

    @property
    @pulumi.getter(name="twilioAuthToken")
    def twilio_auth_token(self) -> Optional[str]:
        """
        when `sms_provider`==`twilio`, Auth token account with twilio account
        """
        return pulumi.get(self, "twilio_auth_token")

    @property
    @pulumi.getter(name="twilioPhoneNumber")
    def twilio_phone_number(self) -> Optional[str]:
        """
        when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        """
        return pulumi.get(self, "twilio_phone_number")

    @property
    @pulumi.getter(name="twilioSid")
    def twilio_sid(self) -> Optional[str]:
        """
        when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        return pulumi.get(self, "twilio_sid")


@pulumi.output_type
class WlanQos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "class":
            suggest = "class_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanQos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanQos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanQos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 class_: Optional[str] = None,
                 overwrite: Optional[bool] = None):
        """
        :param str class_: enum: `background`, `best_effort`, `video`, `voice`
        :param bool overwrite: whether to overwrite QoS
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        """
        enum: `background`, `best_effort`, `video`, `voice`
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[bool]:
        """
        whether to overwrite QoS
        """
        return pulumi.get(self, "overwrite")


@pulumi.output_type
class WlanRadsec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coaEnabled":
            suggest = "coa_enabled"
        elif key == "idleTimeout":
            suggest = "idle_timeout"
        elif key == "mxclusterIds":
            suggest = "mxcluster_ids"
        elif key == "proxyHosts":
            suggest = "proxy_hosts"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "useMxedge":
            suggest = "use_mxedge"
        elif key == "useSiteMxedge":
            suggest = "use_site_mxedge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlanRadsec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlanRadsec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlanRadsec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coa_enabled: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 idle_timeout: Optional[int] = None,
                 mxcluster_ids: Optional[Sequence[str]] = None,
                 proxy_hosts: Optional[Sequence[str]] = None,
                 server_name: Optional[str] = None,
                 servers: Optional[Sequence['outputs.WlanRadsecServer']] = None,
                 use_mxedge: Optional[bool] = None,
                 use_site_mxedge: Optional[bool] = None):
        """
        :param Sequence[str] mxcluster_ids: To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
               Org mxedge(s) identified by mxcluster_ids
        :param Sequence[str] proxy_hosts: default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
               when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        :param str server_name: name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        :param Sequence['WlanRadsecServerArgs'] servers: List of Radsec Servers. Only if not Mist Edge.
        :param bool use_mxedge: use mxedge(s) as radsecproxy
        :param bool use_site_mxedge: To use Site mxedges when this WLAN does not use mxtunnel
        """
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if mxcluster_ids is not None:
            pulumi.set(__self__, "mxcluster_ids", mxcluster_ids)
        if proxy_hosts is not None:
            pulumi.set(__self__, "proxy_hosts", proxy_hosts)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if use_mxedge is not None:
            pulumi.set(__self__, "use_mxedge", use_mxedge)
        if use_site_mxedge is not None:
            pulumi.set(__self__, "use_site_mxedge", use_site_mxedge)

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "coa_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="mxclusterIds")
    def mxcluster_ids(self) -> Optional[Sequence[str]]:
        """
        To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
        Org mxedge(s) identified by mxcluster_ids
        """
        return pulumi.get(self, "mxcluster_ids")

    @property
    @pulumi.getter(name="proxyHosts")
    def proxy_hosts(self) -> Optional[Sequence[str]]:
        """
        default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
        when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        """
        return pulumi.get(self, "proxy_hosts")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        """
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.WlanRadsecServer']]:
        """
        List of Radsec Servers. Only if not Mist Edge.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="useMxedge")
    def use_mxedge(self) -> Optional[bool]:
        """
        use mxedge(s) as radsecproxy
        """
        return pulumi.get(self, "use_mxedge")

    @property
    @pulumi.getter(name="useSiteMxedge")
    def use_site_mxedge(self) -> Optional[bool]:
        """
        To use Site mxedges when this WLAN does not use mxtunnel
        """
        return pulumi.get(self, "use_site_mxedge")


@pulumi.output_type
class WlanRadsecServer(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class WlanSchedule(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 hours: Optional['outputs.WlanScheduleHours'] = None):
        """
        :param 'WlanScheduleHoursArgs' hours: hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 
               
               **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def hours(self) -> Optional['outputs.WlanScheduleHours']:
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        return pulumi.get(self, "hours")


@pulumi.output_type
class WlanScheduleHours(dict):
    def __init__(__self__, *,
                 fri: Optional[str] = None,
                 mon: Optional[str] = None,
                 sat: Optional[str] = None,
                 sun: Optional[str] = None,
                 thu: Optional[str] = None,
                 tue: Optional[str] = None,
                 wed: Optional[str] = None):
        if fri is not None:
            pulumi.set(__self__, "fri", fri)
        if mon is not None:
            pulumi.set(__self__, "mon", mon)
        if sat is not None:
            pulumi.set(__self__, "sat", sat)
        if sun is not None:
            pulumi.set(__self__, "sun", sun)
        if thu is not None:
            pulumi.set(__self__, "thu", thu)
        if tue is not None:
            pulumi.set(__self__, "tue", tue)
        if wed is not None:
            pulumi.set(__self__, "wed", wed)

    @property
    @pulumi.getter
    def fri(self) -> Optional[str]:
        return pulumi.get(self, "fri")

    @property
    @pulumi.getter
    def mon(self) -> Optional[str]:
        return pulumi.get(self, "mon")

    @property
    @pulumi.getter
    def sat(self) -> Optional[str]:
        return pulumi.get(self, "sat")

    @property
    @pulumi.getter
    def sun(self) -> Optional[str]:
        return pulumi.get(self, "sun")

    @property
    @pulumi.getter
    def thu(self) -> Optional[str]:
        return pulumi.get(self, "thu")

    @property
    @pulumi.getter
    def tue(self) -> Optional[str]:
        return pulumi.get(self, "tue")

    @property
    @pulumi.getter
    def wed(self) -> Optional[str]:
        return pulumi.get(self, "wed")


@pulumi.output_type
class WlantemplateApplies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orgId":
            suggest = "org_id"
        elif key == "siteIds":
            suggest = "site_ids"
        elif key == "sitegroupIds":
            suggest = "sitegroup_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlantemplateApplies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlantemplateApplies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlantemplateApplies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org_id: Optional[str] = None,
                 site_ids: Optional[Sequence[str]] = None,
                 sitegroup_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] site_ids: list of site ids
        :param Sequence[str] sitegroup_ids: list of sitegroup ids
        """
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[Sequence[str]]:
        """
        list of site ids
        """
        return pulumi.get(self, "site_ids")

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[Sequence[str]]:
        """
        list of sitegroup ids
        """
        return pulumi.get(self, "sitegroup_ids")


@pulumi.output_type
class WlantemplateExceptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "siteIds":
            suggest = "site_ids"
        elif key == "sitegroupIds":
            suggest = "sitegroup_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WlantemplateExceptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WlantemplateExceptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WlantemplateExceptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 site_ids: Optional[Sequence[str]] = None,
                 sitegroup_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] site_ids: list of site ids
        :param Sequence[str] sitegroup_ids: list of sitegroup ids
        """
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[Sequence[str]]:
        """
        list of site ids
        """
        return pulumi.get(self, "site_ids")

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[Sequence[str]]:
        """
        list of sitegroup ids
        """
        return pulumi.get(self, "sitegroup_ids")


@pulumi.output_type
class WxtagSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WxtagSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WxtagSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WxtagSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnets: Sequence[str],
                 port_range: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param Sequence[str] subnets: matched destination subnets and/or IP Addresses
        :param str port_range: matched destination port, "0" means any
        :param str protocol: tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        """
        matched destination subnets and/or IP Addresses
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        matched destination port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetDeviceprofilesApDeviceprofileResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetDeviceprofilesGatewayDeviceprofileResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetGatewaytemplatesOrgGatewaytemplateResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetIdpprofilesOrgIdpprofileResult(dict):
    def __init__(__self__, *,
                 base_profile: str,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str,
                 overwrites: Sequence['outputs.GetIdpprofilesOrgIdpprofileOverwriteResult']):
        """
        :param str base_profile: enum: `critical`, `standard`, `strict`
        """
        pulumi.set(__self__, "base_profile", base_profile)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> str:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def overwrites(self) -> Sequence['outputs.GetIdpprofilesOrgIdpprofileOverwriteResult']:
        return pulumi.get(self, "overwrites")


@pulumi.output_type
class GetIdpprofilesOrgIdpprofileOverwriteResult(dict):
    def __init__(__self__, *,
                 action: str,
                 matching: 'outputs.GetIdpprofilesOrgIdpprofileOverwriteMatchingResult',
                 name: str):
        """
        :param str action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "matching", matching)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def matching(self) -> 'outputs.GetIdpprofilesOrgIdpprofileOverwriteMatchingResult':
        return pulumi.get(self, "matching")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIdpprofilesOrgIdpprofileOverwriteMatchingResult(dict):
    def __init__(__self__, *,
                 attack_names: Sequence[str],
                 dst_subnets: Sequence[str],
                 severities: Sequence[str]):
        pulumi.set(__self__, "attack_names", attack_names)
        pulumi.set(__self__, "dst_subnets", dst_subnets)
        pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Sequence[str]:
        return pulumi.get(self, "attack_names")

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "dst_subnets")

    @property
    @pulumi.getter
    def severities(self) -> Sequence[str]:
        return pulumi.get(self, "severities")


@pulumi.output_type
class GetInventoryOrgInventoryResult(dict):
    def __init__(__self__, *,
                 adopted: bool,
                 claim_code: str,
                 connected: bool,
                 created_time: int,
                 deviceprofile_id: str,
                 hostname: str,
                 hw_rev: str,
                 id: str,
                 jsi: bool,
                 mac: str,
                 model: str,
                 modified_time: int,
                 name: str,
                 org_id: str,
                 serial: str,
                 site_id: str,
                 sku: str,
                 vc_mac: str):
        """
        :param bool adopted: only if `type`==`switch` or `type`==`gateway`
               whether the switch/gateway is adopted
        :param str claim_code: device claim code
        :param bool connected: whether the device is connected
        :param int created_time: inventory created time, in epoch
        :param str deviceprofile_id: deviceprofile id if assigned, null if not assigned
        :param str hostname: hostname reported by the device
        :param str hw_rev: device hardware revision number
        :param str id: device id
        :param str mac: device MAC address
        :param str model: device model
        :param int modified_time: inventory last modified time, in epoch
        :param str name: device name if configured
        :param str serial: device serial
        :param str sku: device stock keeping unit
        :param str vc_mac: only if `type`==`switch`, MAC Address of the Virtual Chassis
        """
        pulumi.set(__self__, "adopted", adopted)
        pulumi.set(__self__, "claim_code", claim_code)
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hw_rev", hw_rev)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "jsi", jsi)
        pulumi.set(__self__, "mac", mac)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "vc_mac", vc_mac)

    @property
    @pulumi.getter
    def adopted(self) -> bool:
        """
        only if `type`==`switch` or `type`==`gateway`
        whether the switch/gateway is adopted
        """
        return pulumi.get(self, "adopted")

    @property
    @pulumi.getter(name="claimCode")
    def claim_code(self) -> str:
        """
        device claim code
        """
        return pulumi.get(self, "claim_code")

    @property
    @pulumi.getter
    def connected(self) -> bool:
        """
        whether the device is connected
        """
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> int:
        """
        inventory created time, in epoch
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> str:
        """
        deviceprofile id if assigned, null if not assigned
        """
        return pulumi.get(self, "deviceprofile_id")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        hostname reported by the device
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hwRev")
    def hw_rev(self) -> str:
        """
        device hardware revision number
        """
        return pulumi.get(self, "hw_rev")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        device id
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def jsi(self) -> bool:
        return pulumi.get(self, "jsi")

    @property
    @pulumi.getter
    def mac(self) -> str:
        """
        device MAC address
        """
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def model(self) -> str:
        """
        device model
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        """
        inventory last modified time, in epoch
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        device name if configured
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        """
        device serial
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        device stock keeping unit
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="vcMac")
    def vc_mac(self) -> str:
        """
        only if `type`==`switch`, MAC Address of the Virtual Chassis
        """
        return pulumi.get(self, "vc_mac")


@pulumi.output_type
class GetNacrulesOrgNacruleResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetNactagsOrgNactagResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetNetworksOrgNetworkResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetNetworktemplatesOrgNetworktemplateResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetRftemplatesOrgRftemplateResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetServicepoliciesOrgServicepolicyResult(dict):
    def __init__(__self__, *,
                 action: str,
                 appqoe: 'outputs.GetServicepoliciesOrgServicepolicyAppqoeResult',
                 created_time: float,
                 ewfs: Sequence['outputs.GetServicepoliciesOrgServicepolicyEwfResult'],
                 id: str,
                 idp: 'outputs.GetServicepoliciesOrgServicepolicyIdpResult',
                 local_routing: bool,
                 modified_time: float,
                 name: str,
                 org_id: str,
                 path_preference: str,
                 services: Sequence[str],
                 tenants: Sequence[str]):
        """
        :param str action: enum: `allow`, `deny`
        :param 'GetServicepoliciesOrgServicepolicyAppqoeArgs' appqoe: For SRX Only
        :param bool local_routing: access within the same VRF
        :param str path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "appqoe", appqoe)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "ewfs", ewfs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp", idp)
        pulumi.set(__self__, "local_routing", local_routing)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "path_preference", path_preference)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def appqoe(self) -> 'outputs.GetServicepoliciesOrgServicepolicyAppqoeResult':
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def ewfs(self) -> Sequence['outputs.GetServicepoliciesOrgServicepolicyEwfResult']:
        return pulumi.get(self, "ewfs")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def idp(self) -> 'outputs.GetServicepoliciesOrgServicepolicyIdpResult':
        return pulumi.get(self, "idp")

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> bool:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> str:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence[str]:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GetServicepoliciesOrgServicepolicyAppqoeResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetServicepoliciesOrgServicepolicyEwfResult(dict):
    def __init__(__self__, *,
                 alert_only: bool,
                 block_message: str,
                 enabled: bool,
                 profile: str):
        """
        :param str profile: enum: `critical`, `standard`, `strict`
        """
        pulumi.set(__self__, "alert_only", alert_only)
        pulumi.set(__self__, "block_message", block_message)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> bool:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> str:
        return pulumi.get(self, "block_message")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetServicepoliciesOrgServicepolicyIdpResult(dict):
    def __init__(__self__, *,
                 alert_only: bool,
                 enabled: bool,
                 idpprofile_id: str,
                 profile: str):
        """
        :param str idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param str profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        pulumi.set(__self__, "alert_only", alert_only)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> bool:
        return pulumi.get(self, "alert_only")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> str:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetServicesOrgServiceResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetSitegroupsOrgSitegroupResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str,
                 site_ids: Sequence[str]):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "site_ids", site_ids)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Sequence[str]:
        return pulumi.get(self, "site_ids")


@pulumi.output_type
class GetVpnsOrgVpnResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str,
                 paths: Mapping[str, 'outputs.GetVpnsOrgVpnPathsResult']):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def paths(self) -> Mapping[str, 'outputs.GetVpnsOrgVpnPathsResult']:
        return pulumi.get(self, "paths")


@pulumi.output_type
class GetVpnsOrgVpnPathsResult(dict):
    def __init__(__self__, *,
                 bfd_profile: str,
                 ip: str,
                 pod: int):
        """
        :param str bfd_profile: enum: `broadband`, `lte`
        :param str ip: if different from the wan port
        """
        pulumi.set(__self__, "bfd_profile", bfd_profile)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> str:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        if different from the wan port
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def pod(self) -> int:
        return pulumi.get(self, "pod")


@pulumi.output_type
class GetWlantemplatesOrgWlantemplateResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


@pulumi.output_type
class GetWxtagsOrgWxtagResult(dict):
    def __init__(__self__, *,
                 created_time: float,
                 id: str,
                 modified_time: float,
                 name: str,
                 org_id: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> float:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> float:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")


