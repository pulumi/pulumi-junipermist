# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 api_policy: Optional[pulumi.Input['SettingApiPolicyArgs']] = None,
                 cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 celona: Optional[pulumi.Input['SettingCelonaArgs']] = None,
                 cloudshark: Optional[pulumi.Input['SettingCloudsharkArgs']] = None,
                 cradlepoint: Optional[pulumi.Input['SettingCradlepointArgs']] = None,
                 device_cert: Optional[pulumi.Input['SettingDeviceCertArgs']] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disable_pcap: Optional[pulumi.Input[bool]] = None,
                 disable_remote_shell: Optional[pulumi.Input[bool]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 installer: Optional[pulumi.Input['SettingInstallerArgs']] = None,
                 jcloud: Optional[pulumi.Input['SettingJcloudArgs']] = None,
                 mgmt: Optional[pulumi.Input['SettingMgmtArgs']] = None,
                 mist_nac: Optional[pulumi.Input['SettingMistNacArgs']] = None,
                 mxedge_fips_enabled: Optional[pulumi.Input[bool]] = None,
                 mxedge_mgmt: Optional[pulumi.Input['SettingMxedgeMgmtArgs']] = None,
                 password_policy: Optional[pulumi.Input['SettingPasswordPolicyArgs']] = None,
                 pcap: Optional[pulumi.Input['SettingPcapArgs']] = None,
                 port_channelization: Optional[pulumi.Input['SettingPortChannelizationArgs']] = None,
                 security: Optional[pulumi.Input['SettingSecurityArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['SettingSwitchMgmtArgs']] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input['SettingSyntheticTestArgs']] = None,
                 ui_idle_timeout: Optional[pulumi.Input[int]] = None,
                 vpn_options: Optional[pulumi.Input['SettingVpnOptionsArgs']] = None,
                 wan_pma: Optional[pulumi.Input['SettingWanPmaArgs']] = None,
                 wired_pma: Optional[pulumi.Input['SettingWiredPmaArgs']] = None,
                 wireless_pma: Optional[pulumi.Input['SettingWirelessPmaArgs']] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cacerts: list of PEM-encoded ca certs
        :param pulumi.Input['SettingDeviceCertArgs'] device_cert: common device cert, optional
        :param pulumi.Input[int] device_updown_threshold: enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
               AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
               immediate)
        :param pulumi.Input[bool] disable_pcap: whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        :param pulumi.Input[bool] disable_remote_shell: whether to disable remote shell access for an entire org
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingMgmtArgs'] mgmt: management-related properties
        :param pulumi.Input['SettingPasswordPolicyArgs'] password_policy: password policy
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[int] ui_idle_timeout: automatically logout the user when UI session is inactive. `0` means disabled
        """
        pulumi.set(__self__, "org_id", org_id)
        if ap_updown_threshold is not None:
            pulumi.set(__self__, "ap_updown_threshold", ap_updown_threshold)
        if api_policy is not None:
            pulumi.set(__self__, "api_policy", api_policy)
        if cacerts is not None:
            pulumi.set(__self__, "cacerts", cacerts)
        if celona is not None:
            pulumi.set(__self__, "celona", celona)
        if cloudshark is not None:
            pulumi.set(__self__, "cloudshark", cloudshark)
        if cradlepoint is not None:
            pulumi.set(__self__, "cradlepoint", cradlepoint)
        if device_cert is not None:
            pulumi.set(__self__, "device_cert", device_cert)
        if device_updown_threshold is not None:
            pulumi.set(__self__, "device_updown_threshold", device_updown_threshold)
        if disable_pcap is not None:
            pulumi.set(__self__, "disable_pcap", disable_pcap)
        if disable_remote_shell is not None:
            pulumi.set(__self__, "disable_remote_shell", disable_remote_shell)
        if gateway_updown_threshold is not None:
            pulumi.set(__self__, "gateway_updown_threshold", gateway_updown_threshold)
        if installer is not None:
            pulumi.set(__self__, "installer", installer)
        if jcloud is not None:
            pulumi.set(__self__, "jcloud", jcloud)
        if mgmt is not None:
            pulumi.set(__self__, "mgmt", mgmt)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if mxedge_fips_enabled is not None:
            pulumi.set(__self__, "mxedge_fips_enabled", mxedge_fips_enabled)
        if mxedge_mgmt is not None:
            pulumi.set(__self__, "mxedge_mgmt", mxedge_mgmt)
        if password_policy is not None:
            pulumi.set(__self__, "password_policy", password_policy)
        if pcap is not None:
            pulumi.set(__self__, "pcap", pcap)
        if port_channelization is not None:
            pulumi.set(__self__, "port_channelization", port_channelization)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if switch_updown_threshold is not None:
            pulumi.set(__self__, "switch_updown_threshold", switch_updown_threshold)
        if synthetic_test is not None:
            pulumi.set(__self__, "synthetic_test", synthetic_test)
        if ui_idle_timeout is not None:
            pulumi.set(__self__, "ui_idle_timeout", ui_idle_timeout)
        if vpn_options is not None:
            pulumi.set(__self__, "vpn_options", vpn_options)
        if wan_pma is not None:
            pulumi.set(__self__, "wan_pma", wan_pma)
        if wired_pma is not None:
            pulumi.set(__self__, "wired_pma", wired_pma)
        if wireless_pma is not None:
            pulumi.set(__self__, "wireless_pma", wireless_pma)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @ap_updown_threshold.setter
    def ap_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_updown_threshold", value)

    @property
    @pulumi.getter(name="apiPolicy")
    def api_policy(self) -> Optional[pulumi.Input['SettingApiPolicyArgs']]:
        return pulumi.get(self, "api_policy")

    @api_policy.setter
    def api_policy(self, value: Optional[pulumi.Input['SettingApiPolicyArgs']]):
        pulumi.set(self, "api_policy", value)

    @property
    @pulumi.getter
    def cacerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of PEM-encoded ca certs
        """
        return pulumi.get(self, "cacerts")

    @cacerts.setter
    def cacerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cacerts", value)

    @property
    @pulumi.getter
    def celona(self) -> Optional[pulumi.Input['SettingCelonaArgs']]:
        return pulumi.get(self, "celona")

    @celona.setter
    def celona(self, value: Optional[pulumi.Input['SettingCelonaArgs']]):
        pulumi.set(self, "celona", value)

    @property
    @pulumi.getter
    def cloudshark(self) -> Optional[pulumi.Input['SettingCloudsharkArgs']]:
        return pulumi.get(self, "cloudshark")

    @cloudshark.setter
    def cloudshark(self, value: Optional[pulumi.Input['SettingCloudsharkArgs']]):
        pulumi.set(self, "cloudshark", value)

    @property
    @pulumi.getter
    def cradlepoint(self) -> Optional[pulumi.Input['SettingCradlepointArgs']]:
        return pulumi.get(self, "cradlepoint")

    @cradlepoint.setter
    def cradlepoint(self, value: Optional[pulumi.Input['SettingCradlepointArgs']]):
        pulumi.set(self, "cradlepoint", value)

    @property
    @pulumi.getter(name="deviceCert")
    def device_cert(self) -> Optional[pulumi.Input['SettingDeviceCertArgs']]:
        """
        common device cert, optional
        """
        return pulumi.get(self, "device_cert")

    @device_cert.setter
    def device_cert(self, value: Optional[pulumi.Input['SettingDeviceCertArgs']]):
        pulumi.set(self, "device_cert", value)

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
        AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
        immediate)
        """
        return pulumi.get(self, "device_updown_threshold")

    @device_updown_threshold.setter
    def device_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_updown_threshold", value)

    @property
    @pulumi.getter(name="disablePcap")
    def disable_pcap(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        """
        return pulumi.get(self, "disable_pcap")

    @disable_pcap.setter
    def disable_pcap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_pcap", value)

    @property
    @pulumi.getter(name="disableRemoteShell")
    def disable_remote_shell(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable remote shell access for an entire org
        """
        return pulumi.get(self, "disable_remote_shell")

    @disable_remote_shell.setter
    def disable_remote_shell(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_remote_shell", value)

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @gateway_updown_threshold.setter
    def gateway_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gateway_updown_threshold", value)

    @property
    @pulumi.getter
    def installer(self) -> Optional[pulumi.Input['SettingInstallerArgs']]:
        return pulumi.get(self, "installer")

    @installer.setter
    def installer(self, value: Optional[pulumi.Input['SettingInstallerArgs']]):
        pulumi.set(self, "installer", value)

    @property
    @pulumi.getter
    def jcloud(self) -> Optional[pulumi.Input['SettingJcloudArgs']]:
        return pulumi.get(self, "jcloud")

    @jcloud.setter
    def jcloud(self, value: Optional[pulumi.Input['SettingJcloudArgs']]):
        pulumi.set(self, "jcloud", value)

    @property
    @pulumi.getter
    def mgmt(self) -> Optional[pulumi.Input['SettingMgmtArgs']]:
        """
        management-related properties
        """
        return pulumi.get(self, "mgmt")

    @mgmt.setter
    def mgmt(self, value: Optional[pulumi.Input['SettingMgmtArgs']]):
        pulumi.set(self, "mgmt", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['SettingMistNacArgs']]:
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['SettingMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter(name="mxedgeFipsEnabled")
    def mxedge_fips_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mxedge_fips_enabled")

    @mxedge_fips_enabled.setter
    def mxedge_fips_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mxedge_fips_enabled", value)

    @property
    @pulumi.getter(name="mxedgeMgmt")
    def mxedge_mgmt(self) -> Optional[pulumi.Input['SettingMxedgeMgmtArgs']]:
        return pulumi.get(self, "mxedge_mgmt")

    @mxedge_mgmt.setter
    def mxedge_mgmt(self, value: Optional[pulumi.Input['SettingMxedgeMgmtArgs']]):
        pulumi.set(self, "mxedge_mgmt", value)

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> Optional[pulumi.Input['SettingPasswordPolicyArgs']]:
        """
        password policy
        """
        return pulumi.get(self, "password_policy")

    @password_policy.setter
    def password_policy(self, value: Optional[pulumi.Input['SettingPasswordPolicyArgs']]):
        pulumi.set(self, "password_policy", value)

    @property
    @pulumi.getter
    def pcap(self) -> Optional[pulumi.Input['SettingPcapArgs']]:
        return pulumi.get(self, "pcap")

    @pcap.setter
    def pcap(self, value: Optional[pulumi.Input['SettingPcapArgs']]):
        pulumi.set(self, "pcap", value)

    @property
    @pulumi.getter(name="portChannelization")
    def port_channelization(self) -> Optional[pulumi.Input['SettingPortChannelizationArgs']]:
        return pulumi.get(self, "port_channelization")

    @port_channelization.setter
    def port_channelization(self, value: Optional[pulumi.Input['SettingPortChannelizationArgs']]):
        pulumi.set(self, "port_channelization", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['SettingSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['SettingSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['SettingSwitchMgmtArgs']]:
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['SettingSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @switch_updown_threshold.setter
    def switch_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_updown_threshold", value)

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> Optional[pulumi.Input['SettingSyntheticTestArgs']]:
        return pulumi.get(self, "synthetic_test")

    @synthetic_test.setter
    def synthetic_test(self, value: Optional[pulumi.Input['SettingSyntheticTestArgs']]):
        pulumi.set(self, "synthetic_test", value)

    @property
    @pulumi.getter(name="uiIdleTimeout")
    def ui_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        automatically logout the user when UI session is inactive. `0` means disabled
        """
        return pulumi.get(self, "ui_idle_timeout")

    @ui_idle_timeout.setter
    def ui_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ui_idle_timeout", value)

    @property
    @pulumi.getter(name="vpnOptions")
    def vpn_options(self) -> Optional[pulumi.Input['SettingVpnOptionsArgs']]:
        return pulumi.get(self, "vpn_options")

    @vpn_options.setter
    def vpn_options(self, value: Optional[pulumi.Input['SettingVpnOptionsArgs']]):
        pulumi.set(self, "vpn_options", value)

    @property
    @pulumi.getter(name="wanPma")
    def wan_pma(self) -> Optional[pulumi.Input['SettingWanPmaArgs']]:
        return pulumi.get(self, "wan_pma")

    @wan_pma.setter
    def wan_pma(self, value: Optional[pulumi.Input['SettingWanPmaArgs']]):
        pulumi.set(self, "wan_pma", value)

    @property
    @pulumi.getter(name="wiredPma")
    def wired_pma(self) -> Optional[pulumi.Input['SettingWiredPmaArgs']]:
        return pulumi.get(self, "wired_pma")

    @wired_pma.setter
    def wired_pma(self, value: Optional[pulumi.Input['SettingWiredPmaArgs']]):
        pulumi.set(self, "wired_pma", value)

    @property
    @pulumi.getter(name="wirelessPma")
    def wireless_pma(self) -> Optional[pulumi.Input['SettingWirelessPmaArgs']]:
        return pulumi.get(self, "wireless_pma")

    @wireless_pma.setter
    def wireless_pma(self, value: Optional[pulumi.Input['SettingWirelessPmaArgs']]):
        pulumi.set(self, "wireless_pma", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 api_policy: Optional[pulumi.Input['SettingApiPolicyArgs']] = None,
                 cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 celona: Optional[pulumi.Input['SettingCelonaArgs']] = None,
                 cloudshark: Optional[pulumi.Input['SettingCloudsharkArgs']] = None,
                 cradlepoint: Optional[pulumi.Input['SettingCradlepointArgs']] = None,
                 device_cert: Optional[pulumi.Input['SettingDeviceCertArgs']] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disable_pcap: Optional[pulumi.Input[bool]] = None,
                 disable_remote_shell: Optional[pulumi.Input[bool]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 installer: Optional[pulumi.Input['SettingInstallerArgs']] = None,
                 jcloud: Optional[pulumi.Input['SettingJcloudArgs']] = None,
                 juniper: Optional[pulumi.Input['SettingJuniperArgs']] = None,
                 mgmt: Optional[pulumi.Input['SettingMgmtArgs']] = None,
                 mist_nac: Optional[pulumi.Input['SettingMistNacArgs']] = None,
                 mxedge_fips_enabled: Optional[pulumi.Input[bool]] = None,
                 mxedge_mgmt: Optional[pulumi.Input['SettingMxedgeMgmtArgs']] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 password_policy: Optional[pulumi.Input['SettingPasswordPolicyArgs']] = None,
                 pcap: Optional[pulumi.Input['SettingPcapArgs']] = None,
                 port_channelization: Optional[pulumi.Input['SettingPortChannelizationArgs']] = None,
                 security: Optional[pulumi.Input['SettingSecurityArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['SettingSwitchMgmtArgs']] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input['SettingSyntheticTestArgs']] = None,
                 ui_idle_timeout: Optional[pulumi.Input[int]] = None,
                 vpn_options: Optional[pulumi.Input['SettingVpnOptionsArgs']] = None,
                 wan_pma: Optional[pulumi.Input['SettingWanPmaArgs']] = None,
                 wired_pma: Optional[pulumi.Input['SettingWiredPmaArgs']] = None,
                 wireless_pma: Optional[pulumi.Input['SettingWirelessPmaArgs']] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cacerts: list of PEM-encoded ca certs
        :param pulumi.Input['SettingDeviceCertArgs'] device_cert: common device cert, optional
        :param pulumi.Input[int] device_updown_threshold: enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
               AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
               immediate)
        :param pulumi.Input[bool] disable_pcap: whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        :param pulumi.Input[bool] disable_remote_shell: whether to disable remote shell access for an entire org
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingMgmtArgs'] mgmt: management-related properties
        :param pulumi.Input['SettingPasswordPolicyArgs'] password_policy: password policy
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[int] ui_idle_timeout: automatically logout the user when UI session is inactive. `0` means disabled
        """
        if ap_updown_threshold is not None:
            pulumi.set(__self__, "ap_updown_threshold", ap_updown_threshold)
        if api_policy is not None:
            pulumi.set(__self__, "api_policy", api_policy)
        if cacerts is not None:
            pulumi.set(__self__, "cacerts", cacerts)
        if celona is not None:
            pulumi.set(__self__, "celona", celona)
        if cloudshark is not None:
            pulumi.set(__self__, "cloudshark", cloudshark)
        if cradlepoint is not None:
            pulumi.set(__self__, "cradlepoint", cradlepoint)
        if device_cert is not None:
            pulumi.set(__self__, "device_cert", device_cert)
        if device_updown_threshold is not None:
            pulumi.set(__self__, "device_updown_threshold", device_updown_threshold)
        if disable_pcap is not None:
            pulumi.set(__self__, "disable_pcap", disable_pcap)
        if disable_remote_shell is not None:
            pulumi.set(__self__, "disable_remote_shell", disable_remote_shell)
        if gateway_updown_threshold is not None:
            pulumi.set(__self__, "gateway_updown_threshold", gateway_updown_threshold)
        if installer is not None:
            pulumi.set(__self__, "installer", installer)
        if jcloud is not None:
            pulumi.set(__self__, "jcloud", jcloud)
        if juniper is not None:
            pulumi.set(__self__, "juniper", juniper)
        if mgmt is not None:
            pulumi.set(__self__, "mgmt", mgmt)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if mxedge_fips_enabled is not None:
            pulumi.set(__self__, "mxedge_fips_enabled", mxedge_fips_enabled)
        if mxedge_mgmt is not None:
            pulumi.set(__self__, "mxedge_mgmt", mxedge_mgmt)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if password_policy is not None:
            pulumi.set(__self__, "password_policy", password_policy)
        if pcap is not None:
            pulumi.set(__self__, "pcap", pcap)
        if port_channelization is not None:
            pulumi.set(__self__, "port_channelization", port_channelization)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if switch_updown_threshold is not None:
            pulumi.set(__self__, "switch_updown_threshold", switch_updown_threshold)
        if synthetic_test is not None:
            pulumi.set(__self__, "synthetic_test", synthetic_test)
        if ui_idle_timeout is not None:
            pulumi.set(__self__, "ui_idle_timeout", ui_idle_timeout)
        if vpn_options is not None:
            pulumi.set(__self__, "vpn_options", vpn_options)
        if wan_pma is not None:
            pulumi.set(__self__, "wan_pma", wan_pma)
        if wired_pma is not None:
            pulumi.set(__self__, "wired_pma", wired_pma)
        if wireless_pma is not None:
            pulumi.set(__self__, "wireless_pma", wireless_pma)

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @ap_updown_threshold.setter
    def ap_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_updown_threshold", value)

    @property
    @pulumi.getter(name="apiPolicy")
    def api_policy(self) -> Optional[pulumi.Input['SettingApiPolicyArgs']]:
        return pulumi.get(self, "api_policy")

    @api_policy.setter
    def api_policy(self, value: Optional[pulumi.Input['SettingApiPolicyArgs']]):
        pulumi.set(self, "api_policy", value)

    @property
    @pulumi.getter
    def cacerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of PEM-encoded ca certs
        """
        return pulumi.get(self, "cacerts")

    @cacerts.setter
    def cacerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cacerts", value)

    @property
    @pulumi.getter
    def celona(self) -> Optional[pulumi.Input['SettingCelonaArgs']]:
        return pulumi.get(self, "celona")

    @celona.setter
    def celona(self, value: Optional[pulumi.Input['SettingCelonaArgs']]):
        pulumi.set(self, "celona", value)

    @property
    @pulumi.getter
    def cloudshark(self) -> Optional[pulumi.Input['SettingCloudsharkArgs']]:
        return pulumi.get(self, "cloudshark")

    @cloudshark.setter
    def cloudshark(self, value: Optional[pulumi.Input['SettingCloudsharkArgs']]):
        pulumi.set(self, "cloudshark", value)

    @property
    @pulumi.getter
    def cradlepoint(self) -> Optional[pulumi.Input['SettingCradlepointArgs']]:
        return pulumi.get(self, "cradlepoint")

    @cradlepoint.setter
    def cradlepoint(self, value: Optional[pulumi.Input['SettingCradlepointArgs']]):
        pulumi.set(self, "cradlepoint", value)

    @property
    @pulumi.getter(name="deviceCert")
    def device_cert(self) -> Optional[pulumi.Input['SettingDeviceCertArgs']]:
        """
        common device cert, optional
        """
        return pulumi.get(self, "device_cert")

    @device_cert.setter
    def device_cert(self, value: Optional[pulumi.Input['SettingDeviceCertArgs']]):
        pulumi.set(self, "device_cert", value)

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
        AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
        immediate)
        """
        return pulumi.get(self, "device_updown_threshold")

    @device_updown_threshold.setter
    def device_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_updown_threshold", value)

    @property
    @pulumi.getter(name="disablePcap")
    def disable_pcap(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        """
        return pulumi.get(self, "disable_pcap")

    @disable_pcap.setter
    def disable_pcap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_pcap", value)

    @property
    @pulumi.getter(name="disableRemoteShell")
    def disable_remote_shell(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable remote shell access for an entire org
        """
        return pulumi.get(self, "disable_remote_shell")

    @disable_remote_shell.setter
    def disable_remote_shell(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_remote_shell", value)

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @gateway_updown_threshold.setter
    def gateway_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gateway_updown_threshold", value)

    @property
    @pulumi.getter
    def installer(self) -> Optional[pulumi.Input['SettingInstallerArgs']]:
        return pulumi.get(self, "installer")

    @installer.setter
    def installer(self, value: Optional[pulumi.Input['SettingInstallerArgs']]):
        pulumi.set(self, "installer", value)

    @property
    @pulumi.getter
    def jcloud(self) -> Optional[pulumi.Input['SettingJcloudArgs']]:
        return pulumi.get(self, "jcloud")

    @jcloud.setter
    def jcloud(self, value: Optional[pulumi.Input['SettingJcloudArgs']]):
        pulumi.set(self, "jcloud", value)

    @property
    @pulumi.getter
    def juniper(self) -> Optional[pulumi.Input['SettingJuniperArgs']]:
        return pulumi.get(self, "juniper")

    @juniper.setter
    def juniper(self, value: Optional[pulumi.Input['SettingJuniperArgs']]):
        pulumi.set(self, "juniper", value)

    @property
    @pulumi.getter
    def mgmt(self) -> Optional[pulumi.Input['SettingMgmtArgs']]:
        """
        management-related properties
        """
        return pulumi.get(self, "mgmt")

    @mgmt.setter
    def mgmt(self, value: Optional[pulumi.Input['SettingMgmtArgs']]):
        pulumi.set(self, "mgmt", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['SettingMistNacArgs']]:
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['SettingMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter(name="mxedgeFipsEnabled")
    def mxedge_fips_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mxedge_fips_enabled")

    @mxedge_fips_enabled.setter
    def mxedge_fips_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mxedge_fips_enabled", value)

    @property
    @pulumi.getter(name="mxedgeMgmt")
    def mxedge_mgmt(self) -> Optional[pulumi.Input['SettingMxedgeMgmtArgs']]:
        return pulumi.get(self, "mxedge_mgmt")

    @mxedge_mgmt.setter
    def mxedge_mgmt(self, value: Optional[pulumi.Input['SettingMxedgeMgmtArgs']]):
        pulumi.set(self, "mxedge_mgmt", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> Optional[pulumi.Input['SettingPasswordPolicyArgs']]:
        """
        password policy
        """
        return pulumi.get(self, "password_policy")

    @password_policy.setter
    def password_policy(self, value: Optional[pulumi.Input['SettingPasswordPolicyArgs']]):
        pulumi.set(self, "password_policy", value)

    @property
    @pulumi.getter
    def pcap(self) -> Optional[pulumi.Input['SettingPcapArgs']]:
        return pulumi.get(self, "pcap")

    @pcap.setter
    def pcap(self, value: Optional[pulumi.Input['SettingPcapArgs']]):
        pulumi.set(self, "pcap", value)

    @property
    @pulumi.getter(name="portChannelization")
    def port_channelization(self) -> Optional[pulumi.Input['SettingPortChannelizationArgs']]:
        return pulumi.get(self, "port_channelization")

    @port_channelization.setter
    def port_channelization(self, value: Optional[pulumi.Input['SettingPortChannelizationArgs']]):
        pulumi.set(self, "port_channelization", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['SettingSecurityArgs']]:
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['SettingSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['SettingSwitchMgmtArgs']]:
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['SettingSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @switch_updown_threshold.setter
    def switch_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_updown_threshold", value)

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> Optional[pulumi.Input['SettingSyntheticTestArgs']]:
        return pulumi.get(self, "synthetic_test")

    @synthetic_test.setter
    def synthetic_test(self, value: Optional[pulumi.Input['SettingSyntheticTestArgs']]):
        pulumi.set(self, "synthetic_test", value)

    @property
    @pulumi.getter(name="uiIdleTimeout")
    def ui_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        automatically logout the user when UI session is inactive. `0` means disabled
        """
        return pulumi.get(self, "ui_idle_timeout")

    @ui_idle_timeout.setter
    def ui_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ui_idle_timeout", value)

    @property
    @pulumi.getter(name="vpnOptions")
    def vpn_options(self) -> Optional[pulumi.Input['SettingVpnOptionsArgs']]:
        return pulumi.get(self, "vpn_options")

    @vpn_options.setter
    def vpn_options(self, value: Optional[pulumi.Input['SettingVpnOptionsArgs']]):
        pulumi.set(self, "vpn_options", value)

    @property
    @pulumi.getter(name="wanPma")
    def wan_pma(self) -> Optional[pulumi.Input['SettingWanPmaArgs']]:
        return pulumi.get(self, "wan_pma")

    @wan_pma.setter
    def wan_pma(self, value: Optional[pulumi.Input['SettingWanPmaArgs']]):
        pulumi.set(self, "wan_pma", value)

    @property
    @pulumi.getter(name="wiredPma")
    def wired_pma(self) -> Optional[pulumi.Input['SettingWiredPmaArgs']]:
        return pulumi.get(self, "wired_pma")

    @wired_pma.setter
    def wired_pma(self, value: Optional[pulumi.Input['SettingWiredPmaArgs']]):
        pulumi.set(self, "wired_pma", value)

    @property
    @pulumi.getter(name="wirelessPma")
    def wireless_pma(self) -> Optional[pulumi.Input['SettingWirelessPmaArgs']]:
        return pulumi.get(self, "wireless_pma")

    @wireless_pma.setter
    def wireless_pma(self, value: Optional[pulumi.Input['SettingWirelessPmaArgs']]):
        pulumi.set(self, "wireless_pma", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 api_policy: Optional[pulumi.Input[Union['SettingApiPolicyArgs', 'SettingApiPolicyArgsDict']]] = None,
                 cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 celona: Optional[pulumi.Input[Union['SettingCelonaArgs', 'SettingCelonaArgsDict']]] = None,
                 cloudshark: Optional[pulumi.Input[Union['SettingCloudsharkArgs', 'SettingCloudsharkArgsDict']]] = None,
                 cradlepoint: Optional[pulumi.Input[Union['SettingCradlepointArgs', 'SettingCradlepointArgsDict']]] = None,
                 device_cert: Optional[pulumi.Input[Union['SettingDeviceCertArgs', 'SettingDeviceCertArgsDict']]] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disable_pcap: Optional[pulumi.Input[bool]] = None,
                 disable_remote_shell: Optional[pulumi.Input[bool]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 installer: Optional[pulumi.Input[Union['SettingInstallerArgs', 'SettingInstallerArgsDict']]] = None,
                 jcloud: Optional[pulumi.Input[Union['SettingJcloudArgs', 'SettingJcloudArgsDict']]] = None,
                 mgmt: Optional[pulumi.Input[Union['SettingMgmtArgs', 'SettingMgmtArgsDict']]] = None,
                 mist_nac: Optional[pulumi.Input[Union['SettingMistNacArgs', 'SettingMistNacArgsDict']]] = None,
                 mxedge_fips_enabled: Optional[pulumi.Input[bool]] = None,
                 mxedge_mgmt: Optional[pulumi.Input[Union['SettingMxedgeMgmtArgs', 'SettingMxedgeMgmtArgsDict']]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 password_policy: Optional[pulumi.Input[Union['SettingPasswordPolicyArgs', 'SettingPasswordPolicyArgsDict']]] = None,
                 pcap: Optional[pulumi.Input[Union['SettingPcapArgs', 'SettingPcapArgsDict']]] = None,
                 port_channelization: Optional[pulumi.Input[Union['SettingPortChannelizationArgs', 'SettingPortChannelizationArgsDict']]] = None,
                 security: Optional[pulumi.Input[Union['SettingSecurityArgs', 'SettingSecurityArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['SettingSwitchMgmtArgs', 'SettingSwitchMgmtArgsDict']]] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
                 ui_idle_timeout: Optional[pulumi.Input[int]] = None,
                 vpn_options: Optional[pulumi.Input[Union['SettingVpnOptionsArgs', 'SettingVpnOptionsArgsDict']]] = None,
                 wan_pma: Optional[pulumi.Input[Union['SettingWanPmaArgs', 'SettingWanPmaArgsDict']]] = None,
                 wired_pma: Optional[pulumi.Input[Union['SettingWiredPmaArgs', 'SettingWiredPmaArgsDict']]] = None,
                 wireless_pma: Optional[pulumi.Input[Union['SettingWirelessPmaArgs', 'SettingWirelessPmaArgsDict']]] = None,
                 __props__=None):
        """
        This resource manages the Org Settings.
        The Org Settings can be used to customize the Org configuration

        ## Import

        Using `pulumi import`, import `mist_org_setting` with:

        Org Setting can be imported by specifying the org_id

        ```sh
        $ pulumi import junipermist:org/setting:Setting setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cacerts: list of PEM-encoded ca certs
        :param pulumi.Input[Union['SettingDeviceCertArgs', 'SettingDeviceCertArgsDict']] device_cert: common device cert, optional
        :param pulumi.Input[int] device_updown_threshold: enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
               AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
               immediate)
        :param pulumi.Input[bool] disable_pcap: whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        :param pulumi.Input[bool] disable_remote_shell: whether to disable remote shell access for an entire org
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingMgmtArgs', 'SettingMgmtArgsDict']] mgmt: management-related properties
        :param pulumi.Input[Union['SettingPasswordPolicyArgs', 'SettingPasswordPolicyArgsDict']] password_policy: password policy
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[int] ui_idle_timeout: automatically logout the user when UI session is inactive. `0` means disabled
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Org Settings.
        The Org Settings can be used to customize the Org configuration

        ## Import

        Using `pulumi import`, import `mist_org_setting` with:

        Org Setting can be imported by specifying the org_id

        ```sh
        $ pulumi import junipermist:org/setting:Setting setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
        ```

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 api_policy: Optional[pulumi.Input[Union['SettingApiPolicyArgs', 'SettingApiPolicyArgsDict']]] = None,
                 cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 celona: Optional[pulumi.Input[Union['SettingCelonaArgs', 'SettingCelonaArgsDict']]] = None,
                 cloudshark: Optional[pulumi.Input[Union['SettingCloudsharkArgs', 'SettingCloudsharkArgsDict']]] = None,
                 cradlepoint: Optional[pulumi.Input[Union['SettingCradlepointArgs', 'SettingCradlepointArgsDict']]] = None,
                 device_cert: Optional[pulumi.Input[Union['SettingDeviceCertArgs', 'SettingDeviceCertArgsDict']]] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disable_pcap: Optional[pulumi.Input[bool]] = None,
                 disable_remote_shell: Optional[pulumi.Input[bool]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 installer: Optional[pulumi.Input[Union['SettingInstallerArgs', 'SettingInstallerArgsDict']]] = None,
                 jcloud: Optional[pulumi.Input[Union['SettingJcloudArgs', 'SettingJcloudArgsDict']]] = None,
                 mgmt: Optional[pulumi.Input[Union['SettingMgmtArgs', 'SettingMgmtArgsDict']]] = None,
                 mist_nac: Optional[pulumi.Input[Union['SettingMistNacArgs', 'SettingMistNacArgsDict']]] = None,
                 mxedge_fips_enabled: Optional[pulumi.Input[bool]] = None,
                 mxedge_mgmt: Optional[pulumi.Input[Union['SettingMxedgeMgmtArgs', 'SettingMxedgeMgmtArgsDict']]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 password_policy: Optional[pulumi.Input[Union['SettingPasswordPolicyArgs', 'SettingPasswordPolicyArgsDict']]] = None,
                 pcap: Optional[pulumi.Input[Union['SettingPcapArgs', 'SettingPcapArgsDict']]] = None,
                 port_channelization: Optional[pulumi.Input[Union['SettingPortChannelizationArgs', 'SettingPortChannelizationArgsDict']]] = None,
                 security: Optional[pulumi.Input[Union['SettingSecurityArgs', 'SettingSecurityArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['SettingSwitchMgmtArgs', 'SettingSwitchMgmtArgsDict']]] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
                 ui_idle_timeout: Optional[pulumi.Input[int]] = None,
                 vpn_options: Optional[pulumi.Input[Union['SettingVpnOptionsArgs', 'SettingVpnOptionsArgsDict']]] = None,
                 wan_pma: Optional[pulumi.Input[Union['SettingWanPmaArgs', 'SettingWanPmaArgsDict']]] = None,
                 wired_pma: Optional[pulumi.Input[Union['SettingWiredPmaArgs', 'SettingWiredPmaArgsDict']]] = None,
                 wireless_pma: Optional[pulumi.Input[Union['SettingWirelessPmaArgs', 'SettingWirelessPmaArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["ap_updown_threshold"] = ap_updown_threshold
            __props__.__dict__["api_policy"] = api_policy
            __props__.__dict__["cacerts"] = cacerts
            __props__.__dict__["celona"] = celona
            __props__.__dict__["cloudshark"] = cloudshark
            __props__.__dict__["cradlepoint"] = cradlepoint
            __props__.__dict__["device_cert"] = device_cert
            __props__.__dict__["device_updown_threshold"] = device_updown_threshold
            __props__.__dict__["disable_pcap"] = disable_pcap
            __props__.__dict__["disable_remote_shell"] = disable_remote_shell
            __props__.__dict__["gateway_updown_threshold"] = gateway_updown_threshold
            __props__.__dict__["installer"] = installer
            __props__.__dict__["jcloud"] = jcloud
            __props__.__dict__["mgmt"] = mgmt
            __props__.__dict__["mist_nac"] = mist_nac
            __props__.__dict__["mxedge_fips_enabled"] = mxedge_fips_enabled
            __props__.__dict__["mxedge_mgmt"] = mxedge_mgmt
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["password_policy"] = password_policy
            __props__.__dict__["pcap"] = pcap
            __props__.__dict__["port_channelization"] = port_channelization
            __props__.__dict__["security"] = security
            __props__.__dict__["switch_mgmt"] = switch_mgmt
            __props__.__dict__["switch_updown_threshold"] = switch_updown_threshold
            __props__.__dict__["synthetic_test"] = synthetic_test
            __props__.__dict__["ui_idle_timeout"] = ui_idle_timeout
            __props__.__dict__["vpn_options"] = vpn_options
            __props__.__dict__["wan_pma"] = wan_pma
            __props__.__dict__["wired_pma"] = wired_pma
            __props__.__dict__["wireless_pma"] = wireless_pma
            __props__.__dict__["juniper"] = None
        super(Setting, __self__).__init__(
            'junipermist:org/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ap_updown_threshold: Optional[pulumi.Input[int]] = None,
            api_policy: Optional[pulumi.Input[Union['SettingApiPolicyArgs', 'SettingApiPolicyArgsDict']]] = None,
            cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            celona: Optional[pulumi.Input[Union['SettingCelonaArgs', 'SettingCelonaArgsDict']]] = None,
            cloudshark: Optional[pulumi.Input[Union['SettingCloudsharkArgs', 'SettingCloudsharkArgsDict']]] = None,
            cradlepoint: Optional[pulumi.Input[Union['SettingCradlepointArgs', 'SettingCradlepointArgsDict']]] = None,
            device_cert: Optional[pulumi.Input[Union['SettingDeviceCertArgs', 'SettingDeviceCertArgsDict']]] = None,
            device_updown_threshold: Optional[pulumi.Input[int]] = None,
            disable_pcap: Optional[pulumi.Input[bool]] = None,
            disable_remote_shell: Optional[pulumi.Input[bool]] = None,
            gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
            installer: Optional[pulumi.Input[Union['SettingInstallerArgs', 'SettingInstallerArgsDict']]] = None,
            jcloud: Optional[pulumi.Input[Union['SettingJcloudArgs', 'SettingJcloudArgsDict']]] = None,
            juniper: Optional[pulumi.Input[Union['SettingJuniperArgs', 'SettingJuniperArgsDict']]] = None,
            mgmt: Optional[pulumi.Input[Union['SettingMgmtArgs', 'SettingMgmtArgsDict']]] = None,
            mist_nac: Optional[pulumi.Input[Union['SettingMistNacArgs', 'SettingMistNacArgsDict']]] = None,
            mxedge_fips_enabled: Optional[pulumi.Input[bool]] = None,
            mxedge_mgmt: Optional[pulumi.Input[Union['SettingMxedgeMgmtArgs', 'SettingMxedgeMgmtArgsDict']]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            password_policy: Optional[pulumi.Input[Union['SettingPasswordPolicyArgs', 'SettingPasswordPolicyArgsDict']]] = None,
            pcap: Optional[pulumi.Input[Union['SettingPcapArgs', 'SettingPcapArgsDict']]] = None,
            port_channelization: Optional[pulumi.Input[Union['SettingPortChannelizationArgs', 'SettingPortChannelizationArgsDict']]] = None,
            security: Optional[pulumi.Input[Union['SettingSecurityArgs', 'SettingSecurityArgsDict']]] = None,
            switch_mgmt: Optional[pulumi.Input[Union['SettingSwitchMgmtArgs', 'SettingSwitchMgmtArgsDict']]] = None,
            switch_updown_threshold: Optional[pulumi.Input[int]] = None,
            synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
            ui_idle_timeout: Optional[pulumi.Input[int]] = None,
            vpn_options: Optional[pulumi.Input[Union['SettingVpnOptionsArgs', 'SettingVpnOptionsArgsDict']]] = None,
            wan_pma: Optional[pulumi.Input[Union['SettingWanPmaArgs', 'SettingWanPmaArgsDict']]] = None,
            wired_pma: Optional[pulumi.Input[Union['SettingWiredPmaArgs', 'SettingWiredPmaArgsDict']]] = None,
            wireless_pma: Optional[pulumi.Input[Union['SettingWirelessPmaArgs', 'SettingWirelessPmaArgsDict']]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cacerts: list of PEM-encoded ca certs
        :param pulumi.Input[Union['SettingDeviceCertArgs', 'SettingDeviceCertArgsDict']] device_cert: common device cert, optional
        :param pulumi.Input[int] device_updown_threshold: enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
               AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
               immediate)
        :param pulumi.Input[bool] disable_pcap: whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        :param pulumi.Input[bool] disable_remote_shell: whether to disable remote shell access for an entire org
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingMgmtArgs', 'SettingMgmtArgsDict']] mgmt: management-related properties
        :param pulumi.Input[Union['SettingPasswordPolicyArgs', 'SettingPasswordPolicyArgsDict']] password_policy: password policy
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[int] ui_idle_timeout: automatically logout the user when UI session is inactive. `0` means disabled
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["ap_updown_threshold"] = ap_updown_threshold
        __props__.__dict__["api_policy"] = api_policy
        __props__.__dict__["cacerts"] = cacerts
        __props__.__dict__["celona"] = celona
        __props__.__dict__["cloudshark"] = cloudshark
        __props__.__dict__["cradlepoint"] = cradlepoint
        __props__.__dict__["device_cert"] = device_cert
        __props__.__dict__["device_updown_threshold"] = device_updown_threshold
        __props__.__dict__["disable_pcap"] = disable_pcap
        __props__.__dict__["disable_remote_shell"] = disable_remote_shell
        __props__.__dict__["gateway_updown_threshold"] = gateway_updown_threshold
        __props__.__dict__["installer"] = installer
        __props__.__dict__["jcloud"] = jcloud
        __props__.__dict__["juniper"] = juniper
        __props__.__dict__["mgmt"] = mgmt
        __props__.__dict__["mist_nac"] = mist_nac
        __props__.__dict__["mxedge_fips_enabled"] = mxedge_fips_enabled
        __props__.__dict__["mxedge_mgmt"] = mxedge_mgmt
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["password_policy"] = password_policy
        __props__.__dict__["pcap"] = pcap
        __props__.__dict__["port_channelization"] = port_channelization
        __props__.__dict__["security"] = security
        __props__.__dict__["switch_mgmt"] = switch_mgmt
        __props__.__dict__["switch_updown_threshold"] = switch_updown_threshold
        __props__.__dict__["synthetic_test"] = synthetic_test
        __props__.__dict__["ui_idle_timeout"] = ui_idle_timeout
        __props__.__dict__["vpn_options"] = vpn_options
        __props__.__dict__["wan_pma"] = wan_pma
        __props__.__dict__["wired_pma"] = wired_pma
        __props__.__dict__["wireless_pma"] = wireless_pma
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @property
    @pulumi.getter(name="apiPolicy")
    def api_policy(self) -> pulumi.Output[Optional['outputs.SettingApiPolicy']]:
        return pulumi.get(self, "api_policy")

    @property
    @pulumi.getter
    def cacerts(self) -> pulumi.Output[Sequence[str]]:
        """
        list of PEM-encoded ca certs
        """
        return pulumi.get(self, "cacerts")

    @property
    @pulumi.getter
    def celona(self) -> pulumi.Output[Optional['outputs.SettingCelona']]:
        return pulumi.get(self, "celona")

    @property
    @pulumi.getter
    def cloudshark(self) -> pulumi.Output[Optional['outputs.SettingCloudshark']]:
        return pulumi.get(self, "cloudshark")

    @property
    @pulumi.getter
    def cradlepoint(self) -> pulumi.Output[Optional['outputs.SettingCradlepoint']]:
        return pulumi.get(self, "cradlepoint")

    @property
    @pulumi.getter(name="deviceCert")
    def device_cert(self) -> pulumi.Output[Optional['outputs.SettingDeviceCert']]:
        """
        common device cert, optional
        """
        return pulumi.get(self, "device_cert")

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
        AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
        immediate)
        """
        return pulumi.get(self, "device_updown_threshold")

    @property
    @pulumi.getter(name="disablePcap")
    def disable_pcap(self) -> pulumi.Output[bool]:
        """
        whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
        """
        return pulumi.get(self, "disable_pcap")

    @property
    @pulumi.getter(name="disableRemoteShell")
    def disable_remote_shell(self) -> pulumi.Output[bool]:
        """
        whether to disable remote shell access for an entire org
        """
        return pulumi.get(self, "disable_remote_shell")

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @property
    @pulumi.getter
    def installer(self) -> pulumi.Output[Optional['outputs.SettingInstaller']]:
        return pulumi.get(self, "installer")

    @property
    @pulumi.getter
    def jcloud(self) -> pulumi.Output[Optional['outputs.SettingJcloud']]:
        return pulumi.get(self, "jcloud")

    @property
    @pulumi.getter
    def juniper(self) -> pulumi.Output['outputs.SettingJuniper']:
        return pulumi.get(self, "juniper")

    @property
    @pulumi.getter
    def mgmt(self) -> pulumi.Output[Optional['outputs.SettingMgmt']]:
        """
        management-related properties
        """
        return pulumi.get(self, "mgmt")

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> pulumi.Output[Optional['outputs.SettingMistNac']]:
        return pulumi.get(self, "mist_nac")

    @property
    @pulumi.getter(name="mxedgeFipsEnabled")
    def mxedge_fips_enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "mxedge_fips_enabled")

    @property
    @pulumi.getter(name="mxedgeMgmt")
    def mxedge_mgmt(self) -> pulumi.Output[Optional['outputs.SettingMxedgeMgmt']]:
        return pulumi.get(self, "mxedge_mgmt")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> pulumi.Output[Optional['outputs.SettingPasswordPolicy']]:
        """
        password policy
        """
        return pulumi.get(self, "password_policy")

    @property
    @pulumi.getter
    def pcap(self) -> pulumi.Output[Optional['outputs.SettingPcap']]:
        return pulumi.get(self, "pcap")

    @property
    @pulumi.getter(name="portChannelization")
    def port_channelization(self) -> pulumi.Output[Optional['outputs.SettingPortChannelization']]:
        return pulumi.get(self, "port_channelization")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[Optional['outputs.SettingSecurity']]:
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> pulumi.Output[Optional['outputs.SettingSwitchMgmt']]:
        return pulumi.get(self, "switch_mgmt")

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> pulumi.Output[Optional['outputs.SettingSyntheticTest']]:
        return pulumi.get(self, "synthetic_test")

    @property
    @pulumi.getter(name="uiIdleTimeout")
    def ui_idle_timeout(self) -> pulumi.Output[int]:
        """
        automatically logout the user when UI session is inactive. `0` means disabled
        """
        return pulumi.get(self, "ui_idle_timeout")

    @property
    @pulumi.getter(name="vpnOptions")
    def vpn_options(self) -> pulumi.Output[Optional['outputs.SettingVpnOptions']]:
        return pulumi.get(self, "vpn_options")

    @property
    @pulumi.getter(name="wanPma")
    def wan_pma(self) -> pulumi.Output[Optional['outputs.SettingWanPma']]:
        return pulumi.get(self, "wan_pma")

    @property
    @pulumi.getter(name="wiredPma")
    def wired_pma(self) -> pulumi.Output[Optional['outputs.SettingWiredPma']]:
        return pulumi.get(self, "wired_pma")

    @property
    @pulumi.getter(name="wirelessPma")
    def wireless_pma(self) -> pulumi.Output[Optional['outputs.SettingWirelessPma']]:
        return pulumi.get(self, "wireless_pma")

