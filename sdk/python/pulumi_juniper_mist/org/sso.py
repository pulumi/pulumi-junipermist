# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SsoArgs', 'Sso']

@pulumi.input_type
class SsoArgs:
    def __init__(__self__, *,
                 idp_cert: pulumi.Input[str],
                 idp_sign_algo: pulumi.Input[str],
                 idp_sso_url: pulumi.Input[str],
                 issuer: pulumi.Input[str],
                 org_id: pulumi.Input[str],
                 custom_logout_url: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 ignore_unmatched_roles: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameid_format: Optional[pulumi.Input[str]] = None,
                 role_attr_extraction: Optional[pulumi.Input[str]] = None,
                 role_attr_from: Optional[pulumi.Input[str]] = None,
                 scim_enabled: Optional[pulumi.Input[bool]] = None,
                 scim_secret_token: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sso resource.
        :param pulumi.Input[str] idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] idp_sign_algo: Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        :param pulumi.Input[str] idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[str] issuer: IDP issuer URL
        :param pulumi.Input[str] custom_logout_url: a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
               different from SP-initiated SLO process)
        :param pulumi.Input[str] default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
               matched
        :param pulumi.Input[bool] ignore_unmatched_roles: ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] role_attr_extraction: custom role attribute parsing scheme\\n\\nSupported Role Parsing
               Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
               SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
               (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
               is “cn”</li></ul></td></tr></table>
        :param pulumi.Input[str] role_attr_from: name of the attribute in SAML Assertion to extract role from. Default: `Role`
        :param pulumi.Input[bool] scim_enabled: if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        :param pulumi.Input[str] scim_secret_token: if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
               Authorization header of SCIM provisioning requests by the IDP
        """
        pulumi.set(__self__, "idp_cert", idp_cert)
        pulumi.set(__self__, "idp_sign_algo", idp_sign_algo)
        pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "org_id", org_id)
        if custom_logout_url is not None:
            pulumi.set(__self__, "custom_logout_url", custom_logout_url)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if ignore_unmatched_roles is not None:
            pulumi.set(__self__, "ignore_unmatched_roles", ignore_unmatched_roles)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameid_format is not None:
            pulumi.set(__self__, "nameid_format", nameid_format)
        if role_attr_extraction is not None:
            pulumi.set(__self__, "role_attr_extraction", role_attr_extraction)
        if role_attr_from is not None:
            pulumi.set(__self__, "role_attr_from", role_attr_from)
        if scim_enabled is not None:
            pulumi.set(__self__, "scim_enabled", scim_enabled)
        if scim_secret_token is not None:
            pulumi.set(__self__, "scim_secret_token", scim_secret_token)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Input[str]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpSignAlgo")
    def idp_sign_algo(self) -> pulumi.Input[str]:
        """
        Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        """
        return pulumi.get(self, "idp_sign_algo")

    @idp_sign_algo.setter
    def idp_sign_algo(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_sign_algo", value)

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> pulumi.Input[str]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "idp_sso_url")

    @idp_sso_url.setter
    def idp_sso_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_sso_url", value)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="customLogoutUrl")
    def custom_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        different from SP-initiated SLO process)
        """
        return pulumi.get(self, "custom_logout_url")

    @custom_logout_url.setter
    def custom_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_logout_url", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        matched
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter(name="ignoreUnmatchedRoles")
    def ignore_unmatched_roles(self) -> Optional[pulumi.Input[bool]]:
        """
        ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        """
        return pulumi.get(self, "ignore_unmatched_roles")

    @ignore_unmatched_roles.setter
    def ignore_unmatched_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_unmatched_roles", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameidFormat")
    def nameid_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "nameid_format")

    @nameid_format.setter
    def nameid_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameid_format", value)

    @property
    @pulumi.getter(name="roleAttrExtraction")
    def role_attr_extraction(self) -> Optional[pulumi.Input[str]]:
        """
        custom role attribute parsing scheme\\n\\nSupported Role Parsing
        Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
        SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
        (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
        is “cn”</li></ul></td></tr></table>
        """
        return pulumi.get(self, "role_attr_extraction")

    @role_attr_extraction.setter
    def role_attr_extraction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_attr_extraction", value)

    @property
    @pulumi.getter(name="roleAttrFrom")
    def role_attr_from(self) -> Optional[pulumi.Input[str]]:
        """
        name of the attribute in SAML Assertion to extract role from. Default: `Role`
        """
        return pulumi.get(self, "role_attr_from")

    @role_attr_from.setter
    def role_attr_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_attr_from", value)

    @property
    @pulumi.getter(name="scimEnabled")
    def scim_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        """
        return pulumi.get(self, "scim_enabled")

    @scim_enabled.setter
    def scim_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scim_enabled", value)

    @property
    @pulumi.getter(name="scimSecretToken")
    def scim_secret_token(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
        Authorization header of SCIM provisioning requests by the IDP
        """
        return pulumi.get(self, "scim_secret_token")

    @scim_secret_token.setter
    def scim_secret_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scim_secret_token", value)


@pulumi.input_type
class _SsoState:
    def __init__(__self__, *,
                 custom_logout_url: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_sign_algo: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 ignore_unmatched_roles: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameid_format: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role_attr_extraction: Optional[pulumi.Input[str]] = None,
                 role_attr_from: Optional[pulumi.Input[str]] = None,
                 scim_enabled: Optional[pulumi.Input[bool]] = None,
                 scim_secret_token: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Sso resources.
        :param pulumi.Input[str] custom_logout_url: a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
               different from SP-initiated SLO process)
        :param pulumi.Input[str] default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
               matched
        :param pulumi.Input[str] domain: random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
               `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
               `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        :param pulumi.Input[str] idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] idp_sign_algo: Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        :param pulumi.Input[str] idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[bool] ignore_unmatched_roles: ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        :param pulumi.Input[str] issuer: IDP issuer URL
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] role_attr_extraction: custom role attribute parsing scheme\\n\\nSupported Role Parsing
               Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
               SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
               (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
               is “cn”</li></ul></td></tr></table>
        :param pulumi.Input[str] role_attr_from: name of the attribute in SAML Assertion to extract role from. Default: `Role`
        :param pulumi.Input[bool] scim_enabled: if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        :param pulumi.Input[str] scim_secret_token: if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
               Authorization header of SCIM provisioning requests by the IDP
        """
        if custom_logout_url is not None:
            pulumi.set(__self__, "custom_logout_url", custom_logout_url)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if idp_cert is not None:
            pulumi.set(__self__, "idp_cert", idp_cert)
        if idp_sign_algo is not None:
            pulumi.set(__self__, "idp_sign_algo", idp_sign_algo)
        if idp_sso_url is not None:
            pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        if ignore_unmatched_roles is not None:
            pulumi.set(__self__, "ignore_unmatched_roles", ignore_unmatched_roles)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameid_format is not None:
            pulumi.set(__self__, "nameid_format", nameid_format)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if role_attr_extraction is not None:
            pulumi.set(__self__, "role_attr_extraction", role_attr_extraction)
        if role_attr_from is not None:
            pulumi.set(__self__, "role_attr_from", role_attr_from)
        if scim_enabled is not None:
            pulumi.set(__self__, "scim_enabled", scim_enabled)
        if scim_secret_token is not None:
            pulumi.set(__self__, "scim_secret_token", scim_secret_token)

    @property
    @pulumi.getter(name="customLogoutUrl")
    def custom_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        different from SP-initiated SLO process)
        """
        return pulumi.get(self, "custom_logout_url")

    @custom_logout_url.setter
    def custom_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_logout_url", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        matched
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
        `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
        `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "idp_cert")

    @idp_cert.setter
    def idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_cert", value)

    @property
    @pulumi.getter(name="idpSignAlgo")
    def idp_sign_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        """
        return pulumi.get(self, "idp_sign_algo")

    @idp_sign_algo.setter
    def idp_sign_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_sign_algo", value)

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "idp_sso_url")

    @idp_sso_url.setter
    def idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_sso_url", value)

    @property
    @pulumi.getter(name="ignoreUnmatchedRoles")
    def ignore_unmatched_roles(self) -> Optional[pulumi.Input[bool]]:
        """
        ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        """
        return pulumi.get(self, "ignore_unmatched_roles")

    @ignore_unmatched_roles.setter
    def ignore_unmatched_roles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_unmatched_roles", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameidFormat")
    def nameid_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "nameid_format")

    @nameid_format.setter
    def nameid_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameid_format", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="roleAttrExtraction")
    def role_attr_extraction(self) -> Optional[pulumi.Input[str]]:
        """
        custom role attribute parsing scheme\\n\\nSupported Role Parsing
        Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
        SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
        (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
        is “cn”</li></ul></td></tr></table>
        """
        return pulumi.get(self, "role_attr_extraction")

    @role_attr_extraction.setter
    def role_attr_extraction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_attr_extraction", value)

    @property
    @pulumi.getter(name="roleAttrFrom")
    def role_attr_from(self) -> Optional[pulumi.Input[str]]:
        """
        name of the attribute in SAML Assertion to extract role from. Default: `Role`
        """
        return pulumi.get(self, "role_attr_from")

    @role_attr_from.setter
    def role_attr_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_attr_from", value)

    @property
    @pulumi.getter(name="scimEnabled")
    def scim_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        """
        return pulumi.get(self, "scim_enabled")

    @scim_enabled.setter
    def scim_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scim_enabled", value)

    @property
    @pulumi.getter(name="scimSecretToken")
    def scim_secret_token(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
        Authorization header of SCIM provisioning requests by the IDP
        """
        return pulumi.get(self, "scim_secret_token")

    @scim_secret_token.setter
    def scim_secret_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scim_secret_token", value)


class Sso(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_logout_url: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_sign_algo: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 ignore_unmatched_roles: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameid_format: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role_attr_extraction: Optional[pulumi.Input[str]] = None,
                 role_attr_from: Optional[pulumi.Input[str]] = None,
                 scim_enabled: Optional[pulumi.Input[bool]] = None,
                 scim_secret_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages Org API Tokens.
        Org API token is a unique identifier used by an application to authenticate and access a service's API. These tokens are used to authenticate requests made to the API server and ensure secure access to the API. They are not bound to any specific user and provide access to the organization as a whole.
        Organization tokens support different privileges and can only be used for the specific organization they are generated for.
        Rate limiting is done on an individual token basis, so if one token reaches its rate limit, it does not impact other tokens.

        The SSO Metadata can be retrieved with the `org_get_sso_metadata` data source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        sso_admin_one = junipermist.org.Sso("sso_admin_one",
            org_id=terraform_test["id"],
            name="sso_admin_one",
            custom_logout_url="https://idp.com/logout",
            idp_cert="-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
            idp_sign_algo="sha512",
            idp_sso_url="https://idp.com/login",
            issuer="my_idp_issuer",
            nameid_format="email")
        ```

        ## Import

        Using `pulumi import`, import `mist_org_sso` with:

        Org PSK can be imported by specifying the org_id and the sso_id

        ```sh
        $ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_logout_url: a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
               different from SP-initiated SLO process)
        :param pulumi.Input[str] default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
               matched
        :param pulumi.Input[str] idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] idp_sign_algo: Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        :param pulumi.Input[str] idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[bool] ignore_unmatched_roles: ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        :param pulumi.Input[str] issuer: IDP issuer URL
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] role_attr_extraction: custom role attribute parsing scheme\\n\\nSupported Role Parsing
               Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
               SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
               (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
               is “cn”</li></ul></td></tr></table>
        :param pulumi.Input[str] role_attr_from: name of the attribute in SAML Assertion to extract role from. Default: `Role`
        :param pulumi.Input[bool] scim_enabled: if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        :param pulumi.Input[str] scim_secret_token: if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
               Authorization header of SCIM provisioning requests by the IDP
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SsoArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages Org API Tokens.
        Org API token is a unique identifier used by an application to authenticate and access a service's API. These tokens are used to authenticate requests made to the API server and ensure secure access to the API. They are not bound to any specific user and provide access to the organization as a whole.
        Organization tokens support different privileges and can only be used for the specific organization they are generated for.
        Rate limiting is done on an individual token basis, so if one token reaches its rate limit, it does not impact other tokens.

        The SSO Metadata can be retrieved with the `org_get_sso_metadata` data source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        sso_admin_one = junipermist.org.Sso("sso_admin_one",
            org_id=terraform_test["id"],
            name="sso_admin_one",
            custom_logout_url="https://idp.com/logout",
            idp_cert="-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
            idp_sign_algo="sha512",
            idp_sso_url="https://idp.com/login",
            issuer="my_idp_issuer",
            nameid_format="email")
        ```

        ## Import

        Using `pulumi import`, import `mist_org_sso` with:

        Org PSK can be imported by specifying the org_id and the sso_id

        ```sh
        $ pulumi import junipermist:org/sso:Sso sso_admin_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param SsoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SsoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_logout_url: Optional[pulumi.Input[str]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 idp_cert: Optional[pulumi.Input[str]] = None,
                 idp_sign_algo: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 ignore_unmatched_roles: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameid_format: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 role_attr_extraction: Optional[pulumi.Input[str]] = None,
                 role_attr_from: Optional[pulumi.Input[str]] = None,
                 scim_enabled: Optional[pulumi.Input[bool]] = None,
                 scim_secret_token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SsoArgs.__new__(SsoArgs)

            __props__.__dict__["custom_logout_url"] = custom_logout_url
            __props__.__dict__["default_role"] = default_role
            if idp_cert is None and not opts.urn:
                raise TypeError("Missing required property 'idp_cert'")
            __props__.__dict__["idp_cert"] = idp_cert
            if idp_sign_algo is None and not opts.urn:
                raise TypeError("Missing required property 'idp_sign_algo'")
            __props__.__dict__["idp_sign_algo"] = idp_sign_algo
            if idp_sso_url is None and not opts.urn:
                raise TypeError("Missing required property 'idp_sso_url'")
            __props__.__dict__["idp_sso_url"] = idp_sso_url
            __props__.__dict__["ignore_unmatched_roles"] = ignore_unmatched_roles
            if issuer is None and not opts.urn:
                raise TypeError("Missing required property 'issuer'")
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["name"] = name
            __props__.__dict__["nameid_format"] = nameid_format
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["role_attr_extraction"] = role_attr_extraction
            __props__.__dict__["role_attr_from"] = role_attr_from
            __props__.__dict__["scim_enabled"] = scim_enabled
            __props__.__dict__["scim_secret_token"] = scim_secret_token
            __props__.__dict__["domain"] = None
        super(Sso, __self__).__init__(
            'junipermist:org/sso:Sso',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_logout_url: Optional[pulumi.Input[str]] = None,
            default_role: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            idp_cert: Optional[pulumi.Input[str]] = None,
            idp_sign_algo: Optional[pulumi.Input[str]] = None,
            idp_sso_url: Optional[pulumi.Input[str]] = None,
            ignore_unmatched_roles: Optional[pulumi.Input[bool]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nameid_format: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            role_attr_extraction: Optional[pulumi.Input[str]] = None,
            role_attr_from: Optional[pulumi.Input[str]] = None,
            scim_enabled: Optional[pulumi.Input[bool]] = None,
            scim_secret_token: Optional[pulumi.Input[str]] = None) -> 'Sso':
        """
        Get an existing Sso resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_logout_url: a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
               different from SP-initiated SLO process)
        :param pulumi.Input[str] default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
               matched
        :param pulumi.Input[str] domain: random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
               `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
               `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        :param pulumi.Input[str] idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] idp_sign_algo: Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        :param pulumi.Input[str] idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[bool] ignore_unmatched_roles: ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        :param pulumi.Input[str] issuer: IDP issuer URL
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] role_attr_extraction: custom role attribute parsing scheme\\n\\nSupported Role Parsing
               Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
               SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
               (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
               is “cn”</li></ul></td></tr></table>
        :param pulumi.Input[str] role_attr_from: name of the attribute in SAML Assertion to extract role from. Default: `Role`
        :param pulumi.Input[bool] scim_enabled: if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        :param pulumi.Input[str] scim_secret_token: if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
               Authorization header of SCIM provisioning requests by the IDP
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SsoState.__new__(_SsoState)

        __props__.__dict__["custom_logout_url"] = custom_logout_url
        __props__.__dict__["default_role"] = default_role
        __props__.__dict__["domain"] = domain
        __props__.__dict__["idp_cert"] = idp_cert
        __props__.__dict__["idp_sign_algo"] = idp_sign_algo
        __props__.__dict__["idp_sso_url"] = idp_sso_url
        __props__.__dict__["ignore_unmatched_roles"] = ignore_unmatched_roles
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["name"] = name
        __props__.__dict__["nameid_format"] = nameid_format
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["role_attr_extraction"] = role_attr_extraction
        __props__.__dict__["role_attr_from"] = role_attr_from
        __props__.__dict__["scim_enabled"] = scim_enabled
        __props__.__dict__["scim_secret_token"] = scim_secret_token
        return Sso(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customLogoutUrl")
    def custom_logout_url(self) -> pulumi.Output[Optional[str]]:
        """
        a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is
        different from SP-initiated SLO process)
        """
        return pulumi.get(self, "custom_logout_url")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> pulumi.Output[Optional[str]]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role
        matched
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        random string generated during the SSO creation and used to generate the SAML URLs: * ACS URL =
        `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`) * Single Logout URL =
        `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="idpCert")
    def idp_cert(self) -> pulumi.Output[str]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "idp_cert")

    @property
    @pulumi.getter(name="idpSignAlgo")
    def idp_sign_algo(self) -> pulumi.Output[str]:
        """
        Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`
        """
        return pulumi.get(self, "idp_sign_algo")

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> pulumi.Output[str]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "idp_sso_url")

    @property
    @pulumi.getter(name="ignoreUnmatchedRoles")
    def ignore_unmatched_roles(self) -> pulumi.Output[Optional[bool]]:
        """
        ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role
        """
        return pulumi.get(self, "ignore_unmatched_roles")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[str]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameidFormat")
    def nameid_format(self) -> pulumi.Output[str]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "nameid_format")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="roleAttrExtraction")
    def role_attr_extraction(self) -> pulumi.Output[Optional[str]]:
        """
        custom role attribute parsing scheme\\n\\nSupported Role Parsing
        Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in
        SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected
        (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value
        is “cn”</li></ul></td></tr></table>
        """
        return pulumi.get(self, "role_attr_extraction")

    @property
    @pulumi.getter(name="roleAttrFrom")
    def role_attr_from(self) -> pulumi.Output[str]:
        """
        name of the attribute in SAML Assertion to extract role from. Default: `Role`
        """
        return pulumi.get(self, "role_attr_from")

    @property
    @pulumi.getter(name="scimEnabled")
    def scim_enabled(self) -> pulumi.Output[bool]:
        """
        if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
        """
        return pulumi.get(self, "scim_enabled")

    @property
    @pulumi.getter(name="scimSecretToken")
    def scim_secret_token(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the
        Authorization header of SCIM provisioning requests by the IDP
        """
        return pulumi.get(self, "scim_secret_token")

