# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceprofileApArgs', 'DeviceprofileAp']

@pulumi.input_type
class DeviceprofileApArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 aeroscout: Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']] = None,
                 ble_config: Optional[pulumi.Input['DeviceprofileApBleConfigArgs']] = None,
                 disable_eth1: Optional[pulumi.Input[bool]] = None,
                 disable_eth2: Optional[pulumi.Input[bool]] = None,
                 disable_eth3: Optional[pulumi.Input[bool]] = None,
                 disable_module: Optional[pulumi.Input[bool]] = None,
                 esl_config: Optional[pulumi.Input['DeviceprofileApEslConfigArgs']] = None,
                 ip_config: Optional[pulumi.Input['DeviceprofileApIpConfigArgs']] = None,
                 led: Optional[pulumi.Input['DeviceprofileApLedArgs']] = None,
                 mesh: Optional[pulumi.Input['DeviceprofileApMeshArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 poe_passthrough: Optional[pulumi.Input[bool]] = None,
                 pwr_config: Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']] = None,
                 radio_config: Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 uplink_port_config: Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']] = None,
                 usb_config: Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DeviceprofileAp resource.
        :param pulumi.Input['DeviceprofileApAeroscoutArgs'] aeroscout: Aeroscout AP settings
        :param pulumi.Input['DeviceprofileApBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[bool] disable_eth1: whether to disable eth1 port
        :param pulumi.Input[bool] disable_eth2: whether to disable eth2 port
        :param pulumi.Input[bool] disable_eth3: whether to disable eth3 port
        :param pulumi.Input[bool] disable_module: whether to disable module port
        :param pulumi.Input['DeviceprofileApIpConfigArgs'] ip_config: IP AP settings
        :param pulumi.Input['DeviceprofileApLedArgs'] led: LED AP settings
        :param pulumi.Input['DeviceprofileApMeshArgs'] mesh: Mesh AP settings
        :param pulumi.Input[bool] poe_passthrough: whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input['DeviceprofileApPwrConfigArgs'] pwr_config: power related configs
        :param pulumi.Input['DeviceprofileApRadioConfigArgs'] radio_config: Radio AP settings
        :param pulumi.Input['DeviceprofileApUsbConfigArgs'] usb_config: USB AP settings
               Note: if native imagotag is enabled, BLE will be disabled automatically
               Note: legacy, new config moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        pulumi.set(__self__, "org_id", org_id)
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if disable_eth1 is not None:
            pulumi.set(__self__, "disable_eth1", disable_eth1)
        if disable_eth2 is not None:
            pulumi.set(__self__, "disable_eth2", disable_eth2)
        if disable_eth3 is not None:
            pulumi.set(__self__, "disable_eth3", disable_eth3)
        if disable_module is not None:
            pulumi.set(__self__, "disable_module", disable_module)
        if esl_config is not None:
            pulumi.set(__self__, "esl_config", esl_config)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if poe_passthrough is not None:
            pulumi.set(__self__, "poe_passthrough", poe_passthrough)
        if pwr_config is not None:
            pulumi.set(__self__, "pwr_config", pwr_config)
        if radio_config is not None:
            pulumi.set(__self__, "radio_config", radio_config)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if usb_config is not None:
            pulumi.set(__self__, "usb_config", usb_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']]):
        pulumi.set(self, "aeroscout", value)

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['DeviceprofileApBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['DeviceprofileApBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @disable_eth1.setter
    def disable_eth1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth1", value)

    @property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @disable_eth2.setter
    def disable_eth2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth2", value)

    @property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @disable_eth3.setter
    def disable_eth3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth3", value)

    @property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @disable_module.setter
    def disable_module(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_module", value)

    @property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> Optional[pulumi.Input['DeviceprofileApEslConfigArgs']]:
        return pulumi.get(self, "esl_config")

    @esl_config.setter
    def esl_config(self, value: Optional[pulumi.Input['DeviceprofileApEslConfigArgs']]):
        pulumi.set(self, "esl_config", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['DeviceprofileApIpConfigArgs']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['DeviceprofileApIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['DeviceprofileApLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['DeviceprofileApLedArgs']]):
        pulumi.set(self, "led", value)

    @property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['DeviceprofileApMeshArgs']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['DeviceprofileApMeshArgs']]):
        pulumi.set(self, "mesh", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @poe_passthrough.setter
    def poe_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_passthrough", value)

    @property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']]:
        """
        power related configs
        """
        return pulumi.get(self, "pwr_config")

    @pwr_config.setter
    def pwr_config(self, value: Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']]):
        pulumi.set(self, "pwr_config", value)

    @property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @radio_config.setter
    def radio_config(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']]):
        pulumi.set(self, "radio_config", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']]:
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']]:
        """
        USB AP settings
        Note: if native imagotag is enabled, BLE will be disabled automatically
        Note: legacy, new config moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @usb_config.setter
    def usb_config(self, value: Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']]):
        pulumi.set(self, "usb_config", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


@pulumi.input_type
class _DeviceprofileApState:
    def __init__(__self__, *,
                 aeroscout: Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']] = None,
                 ble_config: Optional[pulumi.Input['DeviceprofileApBleConfigArgs']] = None,
                 disable_eth1: Optional[pulumi.Input[bool]] = None,
                 disable_eth2: Optional[pulumi.Input[bool]] = None,
                 disable_eth3: Optional[pulumi.Input[bool]] = None,
                 disable_module: Optional[pulumi.Input[bool]] = None,
                 esl_config: Optional[pulumi.Input['DeviceprofileApEslConfigArgs']] = None,
                 ip_config: Optional[pulumi.Input['DeviceprofileApIpConfigArgs']] = None,
                 led: Optional[pulumi.Input['DeviceprofileApLedArgs']] = None,
                 mesh: Optional[pulumi.Input['DeviceprofileApMeshArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 poe_passthrough: Optional[pulumi.Input[bool]] = None,
                 pwr_config: Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']] = None,
                 radio_config: Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uplink_port_config: Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']] = None,
                 usb_config: Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DeviceprofileAp resources.
        :param pulumi.Input['DeviceprofileApAeroscoutArgs'] aeroscout: Aeroscout AP settings
        :param pulumi.Input['DeviceprofileApBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[bool] disable_eth1: whether to disable eth1 port
        :param pulumi.Input[bool] disable_eth2: whether to disable eth2 port
        :param pulumi.Input[bool] disable_eth3: whether to disable eth3 port
        :param pulumi.Input[bool] disable_module: whether to disable module port
        :param pulumi.Input['DeviceprofileApIpConfigArgs'] ip_config: IP AP settings
        :param pulumi.Input['DeviceprofileApLedArgs'] led: LED AP settings
        :param pulumi.Input['DeviceprofileApMeshArgs'] mesh: Mesh AP settings
        :param pulumi.Input[bool] poe_passthrough: whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input['DeviceprofileApPwrConfigArgs'] pwr_config: power related configs
        :param pulumi.Input['DeviceprofileApRadioConfigArgs'] radio_config: Radio AP settings
        :param pulumi.Input[str] type: Device Type. enum: `ap`
        :param pulumi.Input['DeviceprofileApUsbConfigArgs'] usb_config: USB AP settings
               Note: if native imagotag is enabled, BLE will be disabled automatically
               Note: legacy, new config moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if disable_eth1 is not None:
            pulumi.set(__self__, "disable_eth1", disable_eth1)
        if disable_eth2 is not None:
            pulumi.set(__self__, "disable_eth2", disable_eth2)
        if disable_eth3 is not None:
            pulumi.set(__self__, "disable_eth3", disable_eth3)
        if disable_module is not None:
            pulumi.set(__self__, "disable_module", disable_module)
        if esl_config is not None:
            pulumi.set(__self__, "esl_config", esl_config)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if poe_passthrough is not None:
            pulumi.set(__self__, "poe_passthrough", poe_passthrough)
        if pwr_config is not None:
            pulumi.set(__self__, "pwr_config", pwr_config)
        if radio_config is not None:
            pulumi.set(__self__, "radio_config", radio_config)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if usb_config is not None:
            pulumi.set(__self__, "usb_config", usb_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input['DeviceprofileApAeroscoutArgs']]):
        pulumi.set(self, "aeroscout", value)

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['DeviceprofileApBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['DeviceprofileApBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @disable_eth1.setter
    def disable_eth1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth1", value)

    @property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @disable_eth2.setter
    def disable_eth2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth2", value)

    @property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @disable_eth3.setter
    def disable_eth3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eth3", value)

    @property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @disable_module.setter
    def disable_module(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_module", value)

    @property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> Optional[pulumi.Input['DeviceprofileApEslConfigArgs']]:
        return pulumi.get(self, "esl_config")

    @esl_config.setter
    def esl_config(self, value: Optional[pulumi.Input['DeviceprofileApEslConfigArgs']]):
        pulumi.set(self, "esl_config", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['DeviceprofileApIpConfigArgs']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['DeviceprofileApIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['DeviceprofileApLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['DeviceprofileApLedArgs']]):
        pulumi.set(self, "led", value)

    @property
    @pulumi.getter
    def mesh(self) -> Optional[pulumi.Input['DeviceprofileApMeshArgs']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @mesh.setter
    def mesh(self, value: Optional[pulumi.Input['DeviceprofileApMeshArgs']]):
        pulumi.set(self, "mesh", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @poe_passthrough.setter
    def poe_passthrough(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_passthrough", value)

    @property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']]:
        """
        power related configs
        """
        return pulumi.get(self, "pwr_config")

    @pwr_config.setter
    def pwr_config(self, value: Optional[pulumi.Input['DeviceprofileApPwrConfigArgs']]):
        pulumi.set(self, "pwr_config", value)

    @property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @radio_config.setter
    def radio_config(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigArgs']]):
        pulumi.set(self, "radio_config", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Device Type. enum: `ap`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']]:
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['DeviceprofileApUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']]:
        """
        USB AP settings
        Note: if native imagotag is enabled, BLE will be disabled automatically
        Note: legacy, new config moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @usb_config.setter
    def usb_config(self, value: Optional[pulumi.Input['DeviceprofileApUsbConfigArgs']]):
        pulumi.set(self, "usb_config", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)


class DeviceprofileAp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aeroscout: Optional[pulumi.Input[Union['DeviceprofileApAeroscoutArgs', 'DeviceprofileApAeroscoutArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['DeviceprofileApBleConfigArgs', 'DeviceprofileApBleConfigArgsDict']]] = None,
                 disable_eth1: Optional[pulumi.Input[bool]] = None,
                 disable_eth2: Optional[pulumi.Input[bool]] = None,
                 disable_eth3: Optional[pulumi.Input[bool]] = None,
                 disable_module: Optional[pulumi.Input[bool]] = None,
                 esl_config: Optional[pulumi.Input[Union['DeviceprofileApEslConfigArgs', 'DeviceprofileApEslConfigArgsDict']]] = None,
                 ip_config: Optional[pulumi.Input[Union['DeviceprofileApIpConfigArgs', 'DeviceprofileApIpConfigArgsDict']]] = None,
                 led: Optional[pulumi.Input[Union['DeviceprofileApLedArgs', 'DeviceprofileApLedArgsDict']]] = None,
                 mesh: Optional[pulumi.Input[Union['DeviceprofileApMeshArgs', 'DeviceprofileApMeshArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 poe_passthrough: Optional[pulumi.Input[bool]] = None,
                 pwr_config: Optional[pulumi.Input[Union['DeviceprofileApPwrConfigArgs', 'DeviceprofileApPwrConfigArgsDict']]] = None,
                 radio_config: Optional[pulumi.Input[Union['DeviceprofileApRadioConfigArgs', 'DeviceprofileApRadioConfigArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['DeviceprofileApUplinkPortConfigArgs', 'DeviceprofileApUplinkPortConfigArgsDict']]] = None,
                 usb_config: Optional[pulumi.Input[Union['DeviceprofileApUsbConfigArgs', 'DeviceprofileApUsbConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        This resource manages the AP Device Profiles.
        AP Device profiles for aps are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They allow for efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.

        The AP Devide Profile can be assigned to a gateway with the `org.DeviceprofileAssign` resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        deviceprofile_ap_one = junipermist.org.DeviceprofileAp("deviceprofile_ap_one",
            name="deviceprofile_ap_one",
            org_id=terraform_test["id"],
            esl_config={
                "enabled": True,
                "host": "1.2.3.4",
                "type": "native",
            })
        ```

        ## Import

        Using `pulumi import`, import `mist_org_deviceprofile_ap` with:

        Device Profile can be imported by specifying the org_id and the deviceprofile_id

        ```sh
        $ pulumi import junipermist:org/deviceprofileAp:DeviceprofileAp deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DeviceprofileApAeroscoutArgs', 'DeviceprofileApAeroscoutArgsDict']] aeroscout: Aeroscout AP settings
        :param pulumi.Input[Union['DeviceprofileApBleConfigArgs', 'DeviceprofileApBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[bool] disable_eth1: whether to disable eth1 port
        :param pulumi.Input[bool] disable_eth2: whether to disable eth2 port
        :param pulumi.Input[bool] disable_eth3: whether to disable eth3 port
        :param pulumi.Input[bool] disable_module: whether to disable module port
        :param pulumi.Input[Union['DeviceprofileApIpConfigArgs', 'DeviceprofileApIpConfigArgsDict']] ip_config: IP AP settings
        :param pulumi.Input[Union['DeviceprofileApLedArgs', 'DeviceprofileApLedArgsDict']] led: LED AP settings
        :param pulumi.Input[Union['DeviceprofileApMeshArgs', 'DeviceprofileApMeshArgsDict']] mesh: Mesh AP settings
        :param pulumi.Input[bool] poe_passthrough: whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Union['DeviceprofileApPwrConfigArgs', 'DeviceprofileApPwrConfigArgsDict']] pwr_config: power related configs
        :param pulumi.Input[Union['DeviceprofileApRadioConfigArgs', 'DeviceprofileApRadioConfigArgsDict']] radio_config: Radio AP settings
        :param pulumi.Input[Union['DeviceprofileApUsbConfigArgs', 'DeviceprofileApUsbConfigArgsDict']] usb_config: USB AP settings
               Note: if native imagotag is enabled, BLE will be disabled automatically
               Note: legacy, new config moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceprofileApArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the AP Device Profiles.
        AP Device profiles for aps are used to specify a configuration that can be applied to a select set of aps from any site in the organization. They allow for efficient application of configurations based on ap groups, wlan groups, RF settings, and sites. Device profiles enable various use cases such as activating ethernet passthrough, applying different rf settings, applying mesh configuration, activating specific features like esl or vble, and more.

        The AP Devide Profile can be assigned to a gateway with the `org.DeviceprofileAssign` resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        deviceprofile_ap_one = junipermist.org.DeviceprofileAp("deviceprofile_ap_one",
            name="deviceprofile_ap_one",
            org_id=terraform_test["id"],
            esl_config={
                "enabled": True,
                "host": "1.2.3.4",
                "type": "native",
            })
        ```

        ## Import

        Using `pulumi import`, import `mist_org_deviceprofile_ap` with:

        Device Profile can be imported by specifying the org_id and the deviceprofile_id

        ```sh
        $ pulumi import junipermist:org/deviceprofileAp:DeviceprofileAp deviceprofile_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param DeviceprofileApArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceprofileApArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aeroscout: Optional[pulumi.Input[Union['DeviceprofileApAeroscoutArgs', 'DeviceprofileApAeroscoutArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['DeviceprofileApBleConfigArgs', 'DeviceprofileApBleConfigArgsDict']]] = None,
                 disable_eth1: Optional[pulumi.Input[bool]] = None,
                 disable_eth2: Optional[pulumi.Input[bool]] = None,
                 disable_eth3: Optional[pulumi.Input[bool]] = None,
                 disable_module: Optional[pulumi.Input[bool]] = None,
                 esl_config: Optional[pulumi.Input[Union['DeviceprofileApEslConfigArgs', 'DeviceprofileApEslConfigArgsDict']]] = None,
                 ip_config: Optional[pulumi.Input[Union['DeviceprofileApIpConfigArgs', 'DeviceprofileApIpConfigArgsDict']]] = None,
                 led: Optional[pulumi.Input[Union['DeviceprofileApLedArgs', 'DeviceprofileApLedArgsDict']]] = None,
                 mesh: Optional[pulumi.Input[Union['DeviceprofileApMeshArgs', 'DeviceprofileApMeshArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 poe_passthrough: Optional[pulumi.Input[bool]] = None,
                 pwr_config: Optional[pulumi.Input[Union['DeviceprofileApPwrConfigArgs', 'DeviceprofileApPwrConfigArgsDict']]] = None,
                 radio_config: Optional[pulumi.Input[Union['DeviceprofileApRadioConfigArgs', 'DeviceprofileApRadioConfigArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['DeviceprofileApUplinkPortConfigArgs', 'DeviceprofileApUplinkPortConfigArgsDict']]] = None,
                 usb_config: Optional[pulumi.Input[Union['DeviceprofileApUsbConfigArgs', 'DeviceprofileApUsbConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceprofileApArgs.__new__(DeviceprofileApArgs)

            __props__.__dict__["aeroscout"] = aeroscout
            __props__.__dict__["ble_config"] = ble_config
            __props__.__dict__["disable_eth1"] = disable_eth1
            __props__.__dict__["disable_eth2"] = disable_eth2
            __props__.__dict__["disable_eth3"] = disable_eth3
            __props__.__dict__["disable_module"] = disable_module
            __props__.__dict__["esl_config"] = esl_config
            __props__.__dict__["ip_config"] = ip_config
            __props__.__dict__["led"] = led
            __props__.__dict__["mesh"] = mesh
            __props__.__dict__["name"] = name
            __props__.__dict__["ntp_servers"] = ntp_servers
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["poe_passthrough"] = poe_passthrough
            __props__.__dict__["pwr_config"] = pwr_config
            __props__.__dict__["radio_config"] = radio_config
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["uplink_port_config"] = uplink_port_config
            __props__.__dict__["usb_config"] = usb_config
            __props__.__dict__["vars"] = vars
            __props__.__dict__["type"] = None
        super(DeviceprofileAp, __self__).__init__(
            'junipermist:org/deviceprofileAp:DeviceprofileAp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aeroscout: Optional[pulumi.Input[Union['DeviceprofileApAeroscoutArgs', 'DeviceprofileApAeroscoutArgsDict']]] = None,
            ble_config: Optional[pulumi.Input[Union['DeviceprofileApBleConfigArgs', 'DeviceprofileApBleConfigArgsDict']]] = None,
            disable_eth1: Optional[pulumi.Input[bool]] = None,
            disable_eth2: Optional[pulumi.Input[bool]] = None,
            disable_eth3: Optional[pulumi.Input[bool]] = None,
            disable_module: Optional[pulumi.Input[bool]] = None,
            esl_config: Optional[pulumi.Input[Union['DeviceprofileApEslConfigArgs', 'DeviceprofileApEslConfigArgsDict']]] = None,
            ip_config: Optional[pulumi.Input[Union['DeviceprofileApIpConfigArgs', 'DeviceprofileApIpConfigArgsDict']]] = None,
            led: Optional[pulumi.Input[Union['DeviceprofileApLedArgs', 'DeviceprofileApLedArgsDict']]] = None,
            mesh: Optional[pulumi.Input[Union['DeviceprofileApMeshArgs', 'DeviceprofileApMeshArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            poe_passthrough: Optional[pulumi.Input[bool]] = None,
            pwr_config: Optional[pulumi.Input[Union['DeviceprofileApPwrConfigArgs', 'DeviceprofileApPwrConfigArgsDict']]] = None,
            radio_config: Optional[pulumi.Input[Union['DeviceprofileApRadioConfigArgs', 'DeviceprofileApRadioConfigArgsDict']]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uplink_port_config: Optional[pulumi.Input[Union['DeviceprofileApUplinkPortConfigArgs', 'DeviceprofileApUplinkPortConfigArgsDict']]] = None,
            usb_config: Optional[pulumi.Input[Union['DeviceprofileApUsbConfigArgs', 'DeviceprofileApUsbConfigArgsDict']]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'DeviceprofileAp':
        """
        Get an existing DeviceprofileAp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['DeviceprofileApAeroscoutArgs', 'DeviceprofileApAeroscoutArgsDict']] aeroscout: Aeroscout AP settings
        :param pulumi.Input[Union['DeviceprofileApBleConfigArgs', 'DeviceprofileApBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[bool] disable_eth1: whether to disable eth1 port
        :param pulumi.Input[bool] disable_eth2: whether to disable eth2 port
        :param pulumi.Input[bool] disable_eth3: whether to disable eth3 port
        :param pulumi.Input[bool] disable_module: whether to disable module port
        :param pulumi.Input[Union['DeviceprofileApIpConfigArgs', 'DeviceprofileApIpConfigArgsDict']] ip_config: IP AP settings
        :param pulumi.Input[Union['DeviceprofileApLedArgs', 'DeviceprofileApLedArgsDict']] led: LED AP settings
        :param pulumi.Input[Union['DeviceprofileApMeshArgs', 'DeviceprofileApMeshArgsDict']] mesh: Mesh AP settings
        :param pulumi.Input[bool] poe_passthrough: whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        :param pulumi.Input[Union['DeviceprofileApPwrConfigArgs', 'DeviceprofileApPwrConfigArgsDict']] pwr_config: power related configs
        :param pulumi.Input[Union['DeviceprofileApRadioConfigArgs', 'DeviceprofileApRadioConfigArgsDict']] radio_config: Radio AP settings
        :param pulumi.Input[str] type: Device Type. enum: `ap`
        :param pulumi.Input[Union['DeviceprofileApUsbConfigArgs', 'DeviceprofileApUsbConfigArgsDict']] usb_config: USB AP settings
               Note: if native imagotag is enabled, BLE will be disabled automatically
               Note: legacy, new config moved to ESL Config.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceprofileApState.__new__(_DeviceprofileApState)

        __props__.__dict__["aeroscout"] = aeroscout
        __props__.__dict__["ble_config"] = ble_config
        __props__.__dict__["disable_eth1"] = disable_eth1
        __props__.__dict__["disable_eth2"] = disable_eth2
        __props__.__dict__["disable_eth3"] = disable_eth3
        __props__.__dict__["disable_module"] = disable_module
        __props__.__dict__["esl_config"] = esl_config
        __props__.__dict__["ip_config"] = ip_config
        __props__.__dict__["led"] = led
        __props__.__dict__["mesh"] = mesh
        __props__.__dict__["name"] = name
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["poe_passthrough"] = poe_passthrough
        __props__.__dict__["pwr_config"] = pwr_config
        __props__.__dict__["radio_config"] = radio_config
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["type"] = type
        __props__.__dict__["uplink_port_config"] = uplink_port_config
        __props__.__dict__["usb_config"] = usb_config
        __props__.__dict__["vars"] = vars
        return DeviceprofileAp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aeroscout(self) -> pulumi.Output[Optional['outputs.DeviceprofileApAeroscout']]:
        """
        Aeroscout AP settings
        """
        return pulumi.get(self, "aeroscout")

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApBleConfig']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @property
    @pulumi.getter(name="disableEth1")
    def disable_eth1(self) -> pulumi.Output[bool]:
        """
        whether to disable eth1 port
        """
        return pulumi.get(self, "disable_eth1")

    @property
    @pulumi.getter(name="disableEth2")
    def disable_eth2(self) -> pulumi.Output[bool]:
        """
        whether to disable eth2 port
        """
        return pulumi.get(self, "disable_eth2")

    @property
    @pulumi.getter(name="disableEth3")
    def disable_eth3(self) -> pulumi.Output[bool]:
        """
        whether to disable eth3 port
        """
        return pulumi.get(self, "disable_eth3")

    @property
    @pulumi.getter(name="disableModule")
    def disable_module(self) -> pulumi.Output[bool]:
        """
        whether to disable module port
        """
        return pulumi.get(self, "disable_module")

    @property
    @pulumi.getter(name="eslConfig")
    def esl_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApEslConfig']]:
        return pulumi.get(self, "esl_config")

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApIpConfig']]:
        """
        IP AP settings
        """
        return pulumi.get(self, "ip_config")

    @property
    @pulumi.getter
    def led(self) -> pulumi.Output[Optional['outputs.DeviceprofileApLed']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @property
    @pulumi.getter
    def mesh(self) -> pulumi.Output[Optional['outputs.DeviceprofileApMesh']]:
        """
        Mesh AP settings
        """
        return pulumi.get(self, "mesh")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="poePassthrough")
    def poe_passthrough(self) -> pulumi.Output[bool]:
        """
        whether to enable power out through module port (for APH) or eth1 (for APL/BT11)
        """
        return pulumi.get(self, "poe_passthrough")

    @property
    @pulumi.getter(name="pwrConfig")
    def pwr_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApPwrConfig']]:
        """
        power related configs
        """
        return pulumi.get(self, "pwr_config")

    @property
    @pulumi.getter(name="radioConfig")
    def radio_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApRadioConfig']]:
        """
        Radio AP settings
        """
        return pulumi.get(self, "radio_config")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Device Type. enum: `ap`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApUplinkPortConfig']]:
        return pulumi.get(self, "uplink_port_config")

    @property
    @pulumi.getter(name="usbConfig")
    def usb_config(self) -> pulumi.Output[Optional['outputs.DeviceprofileApUsbConfig']]:
        """
        USB AP settings
        Note: if native imagotag is enabled, BLE will be disabled automatically
        Note: legacy, new config moved to ESL Config.
        """
        return pulumi.get(self, "usb_config")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

