# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworktemplateArgs', 'Networktemplate']

@pulumi.input_type
class NetworktemplateArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_snooping: Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]] = None,
                 mist_nac: Optional[pulumi.Input['NetworktemplateMistNacArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]] = None,
                 radius_config: Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']] = None,
                 remote_syslog: Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 snmp_config: Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']] = None,
                 switch_matching: Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']] = None,
                 vrf_config: Optional[pulumi.Input['NetworktemplateVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]] = None):
        """
        The set of arguments for constructing a Networktemplate resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input['NetworktemplateMistNacArgs'] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
               takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input['NetworktemplateRadiusConfigArgs'] radius_config: Junos Radius config
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input['NetworktemplateSwitchMatchingArgs'] switch_matching: Switch template
        :param pulumi.Input['NetworktemplateSwitchMgmtArgs'] switch_mgmt: Switch settings
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]] vrf_instances: Property key is the network name
        """
        pulumi.set(__self__, "org_id", org_id)
        if acl_policies is not None:
            pulumi.set(__self__, "acl_policies", acl_policies)
        if acl_tags is not None:
            pulumi.set(__self__, "acl_tags", acl_tags)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if ospf_areas is not None:
            pulumi.set(__self__, "ospf_areas", ospf_areas)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if port_usages is not None:
            pulumi.set(__self__, "port_usages", port_usages)
        if radius_config is not None:
            pulumi.set(__self__, "radius_config", radius_config)
        if remote_syslog is not None:
            pulumi.set(__self__, "remote_syslog", remote_syslog)
        if remove_existing_configs is not None:
            pulumi.set(__self__, "remove_existing_configs", remove_existing_configs)
        if snmp_config is not None:
            pulumi.set(__self__, "snmp_config", snmp_config)
        if switch_matching is not None:
            pulumi.set(__self__, "switch_matching", switch_matching)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]]:
        return pulumi.get(self, "acl_policies")

    @acl_policies.setter
    def acl_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]]):
        pulumi.set(self, "acl_policies", value)

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @acl_tags.setter
    def acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]]):
        pulumi.set(self, "acl_tags", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]]:
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['NetworktemplateMistNacArgs']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['NetworktemplateMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @ospf_areas.setter
    def ospf_areas(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]]):
        pulumi.set(self, "ospf_areas", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
        takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]]:
        return pulumi.get(self, "port_usages")

    @port_usages.setter
    def port_usages(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]]):
        pulumi.set(self, "port_usages", value)

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @radius_config.setter
    def radius_config(self, value: Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']]):
        pulumi.set(self, "radius_config", value)

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']]:
        return pulumi.get(self, "remote_syslog")

    @remote_syslog.setter
    def remote_syslog(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']]):
        pulumi.set(self, "remote_syslog", value)

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @remove_existing_configs.setter
    def remove_existing_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_existing_configs", value)

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']]:
        return pulumi.get(self, "snmp_config")

    @snmp_config.setter
    def snmp_config(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']]):
        pulumi.set(self, "snmp_config", value)

    @property
    @pulumi.getter(name="switchMatching")
    def switch_matching(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']]:
        """
        Switch template
        """
        return pulumi.get(self, "switch_matching")

    @switch_matching.setter
    def switch_matching(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']]):
        pulumi.set(self, "switch_matching", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['NetworktemplateVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['NetworktemplateVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)


@pulumi.input_type
class _NetworktemplateState:
    def __init__(__self__, *,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_snooping: Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]] = None,
                 mist_nac: Optional[pulumi.Input['NetworktemplateMistNacArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]] = None,
                 radius_config: Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']] = None,
                 remote_syslog: Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 snmp_config: Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']] = None,
                 switch_matching: Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']] = None,
                 switch_mgmt: Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']] = None,
                 vrf_config: Optional[pulumi.Input['NetworktemplateVrfConfigArgs']] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]] = None):
        """
        Input properties used for looking up and filtering Networktemplate resources.
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input['NetworktemplateMistNacArgs'] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
               takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input['NetworktemplateRadiusConfigArgs'] radius_config: Junos Radius config
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input['NetworktemplateSwitchMatchingArgs'] switch_matching: Switch template
        :param pulumi.Input['NetworktemplateSwitchMgmtArgs'] switch_mgmt: Switch settings
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]] vrf_instances: Property key is the network name
        """
        if acl_policies is not None:
            pulumi.set(__self__, "acl_policies", acl_policies)
        if acl_tags is not None:
            pulumi.set(__self__, "acl_tags", acl_tags)
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if extra_routes6 is not None:
            pulumi.set(__self__, "extra_routes6", extra_routes6)
        if mist_nac is not None:
            pulumi.set(__self__, "mist_nac", mist_nac)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if ospf_areas is not None:
            pulumi.set(__self__, "ospf_areas", ospf_areas)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)
        if port_usages is not None:
            pulumi.set(__self__, "port_usages", port_usages)
        if radius_config is not None:
            pulumi.set(__self__, "radius_config", radius_config)
        if remote_syslog is not None:
            pulumi.set(__self__, "remote_syslog", remote_syslog)
        if remove_existing_configs is not None:
            pulumi.set(__self__, "remove_existing_configs", remove_existing_configs)
        if snmp_config is not None:
            pulumi.set(__self__, "snmp_config", snmp_config)
        if switch_matching is not None:
            pulumi.set(__self__, "switch_matching", switch_matching)
        if switch_mgmt is not None:
            pulumi.set(__self__, "switch_mgmt", switch_mgmt)
        if vrf_config is not None:
            pulumi.set(__self__, "vrf_config", vrf_config)
        if vrf_instances is not None:
            pulumi.set(__self__, "vrf_instances", vrf_instances)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]]:
        return pulumi.get(self, "acl_policies")

    @acl_policies.setter
    def acl_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyArgs']]]]):
        pulumi.set(self, "acl_policies", value)

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @acl_tags.setter
    def acl_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateAclTagsArgs']]]]):
        pulumi.set(self, "acl_tags", value)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']]:
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input['NetworktemplateDhcpSnoopingArgs']]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]]:
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @extra_routes6.setter
    def extra_routes6(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6Args']]]]):
        pulumi.set(self, "extra_routes6", value)

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> Optional[pulumi.Input['NetworktemplateMistNacArgs']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @mist_nac.setter
    def mist_nac(self, value: Optional[pulumi.Input['NetworktemplateMistNacArgs']]):
        pulumi.set(self, "mist_nac", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateNetworksArgs']]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @ntp_servers.setter
    def ntp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ntp_servers", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @ospf_areas.setter
    def ospf_areas(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasArgs']]]]):
        pulumi.set(self, "ospf_areas", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
        takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]]:
        return pulumi.get(self, "port_usages")

    @port_usages.setter
    def port_usages(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplatePortUsagesArgs']]]]):
        pulumi.set(self, "port_usages", value)

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @radius_config.setter
    def radius_config(self, value: Optional[pulumi.Input['NetworktemplateRadiusConfigArgs']]):
        pulumi.set(self, "radius_config", value)

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']]:
        return pulumi.get(self, "remote_syslog")

    @remote_syslog.setter
    def remote_syslog(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogArgs']]):
        pulumi.set(self, "remote_syslog", value)

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @remove_existing_configs.setter
    def remove_existing_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_existing_configs", value)

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']]:
        return pulumi.get(self, "snmp_config")

    @snmp_config.setter
    def snmp_config(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigArgs']]):
        pulumi.set(self, "snmp_config", value)

    @property
    @pulumi.getter(name="switchMatching")
    def switch_matching(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']]:
        """
        Switch template
        """
        return pulumi.get(self, "switch_matching")

    @switch_matching.setter
    def switch_matching(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingArgs']]):
        pulumi.set(self, "switch_matching", value)

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @switch_mgmt.setter
    def switch_mgmt(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtArgs']]):
        pulumi.set(self, "switch_mgmt", value)

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> Optional[pulumi.Input['NetworktemplateVrfConfigArgs']]:
        return pulumi.get(self, "vrf_config")

    @vrf_config.setter
    def vrf_config(self, value: Optional[pulumi.Input['NetworktemplateVrfConfigArgs']]):
        pulumi.set(self, "vrf_config", value)

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

    @vrf_instances.setter
    def vrf_instances(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesArgs']]]]):
        pulumi.set(self, "vrf_instances", value)


class Networktemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworktemplateAclPolicyArgs', 'NetworktemplateAclPolicyArgsDict']]]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateAclTagsArgs', 'NetworktemplateAclTagsArgsDict']]]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_snooping: Optional[pulumi.Input[Union['NetworktemplateDhcpSnoopingArgs', 'NetworktemplateDhcpSnoopingArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutesArgs', 'NetworktemplateExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutes6Args', 'NetworktemplateExtraRoutes6ArgsDict']]]]] = None,
                 mist_nac: Optional[pulumi.Input[Union['NetworktemplateMistNacArgs', 'NetworktemplateMistNacArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateNetworksArgs', 'NetworktemplateNetworksArgsDict']]]]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateOspfAreasArgs', 'NetworktemplateOspfAreasArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortMirroringArgs', 'NetworktemplatePortMirroringArgsDict']]]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortUsagesArgs', 'NetworktemplatePortUsagesArgsDict']]]]] = None,
                 radius_config: Optional[pulumi.Input[Union['NetworktemplateRadiusConfigArgs', 'NetworktemplateRadiusConfigArgsDict']]] = None,
                 remote_syslog: Optional[pulumi.Input[Union['NetworktemplateRemoteSyslogArgs', 'NetworktemplateRemoteSyslogArgsDict']]] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 snmp_config: Optional[pulumi.Input[Union['NetworktemplateSnmpConfigArgs', 'NetworktemplateSnmpConfigArgsDict']]] = None,
                 switch_matching: Optional[pulumi.Input[Union['NetworktemplateSwitchMatchingArgs', 'NetworktemplateSwitchMatchingArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['NetworktemplateSwitchMgmtArgs', 'NetworktemplateSwitchMgmtArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['NetworktemplateVrfConfigArgs', 'NetworktemplateVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateVrfInstancesArgs', 'NetworktemplateVrfInstancesArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource managed the Org Network Templates (Switch templates).
        A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings. Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.

        ## Import

        Using `pulumi import`, import `mist_org_networktemplate` with:

        Org Network Template can be imported by specifying the org_id and the networktemplate_id

        ```sh
        $ pulumi import junipermist:org/networktemplate:Networktemplate networktemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateAclTagsArgs', 'NetworktemplateAclTagsArgsDict']]]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutes6Args', 'NetworktemplateExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Union['NetworktemplateMistNacArgs', 'NetworktemplateMistNacArgsDict']] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateNetworksArgs', 'NetworktemplateNetworksArgsDict']]]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateOspfAreasArgs', 'NetworktemplateOspfAreasArgsDict']]]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortMirroringArgs', 'NetworktemplatePortMirroringArgsDict']]]] port_mirroring: Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
               takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input[Union['NetworktemplateRadiusConfigArgs', 'NetworktemplateRadiusConfigArgsDict']] radius_config: Junos Radius config
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[Union['NetworktemplateSwitchMatchingArgs', 'NetworktemplateSwitchMatchingArgsDict']] switch_matching: Switch template
        :param pulumi.Input[Union['NetworktemplateSwitchMgmtArgs', 'NetworktemplateSwitchMgmtArgsDict']] switch_mgmt: Switch settings
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateVrfInstancesArgs', 'NetworktemplateVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworktemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource managed the Org Network Templates (Switch templates).
        A network template is a predefined configuration that provides a consistent and reusable set of network settings for devices within an organization. It includes various parameters such as ip addressing, vlan configurations, routing protocols, security policies, and other network-specific settings. Network templates simplify the deployment and management of switches by ensuring consistent configurations across multiple devices and sites. They help enforce standardization, reduce human error, and streamline troubleshooting and maintenance tasks.

        ## Import

        Using `pulumi import`, import `mist_org_networktemplate` with:

        Org Network Template can be imported by specifying the org_id and the networktemplate_id

        ```sh
        $ pulumi import junipermist:org/networktemplate:Networktemplate networktemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param NetworktemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworktemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworktemplateAclPolicyArgs', 'NetworktemplateAclPolicyArgsDict']]]]] = None,
                 acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateAclTagsArgs', 'NetworktemplateAclTagsArgsDict']]]]] = None,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dhcp_snooping: Optional[pulumi.Input[Union['NetworktemplateDhcpSnoopingArgs', 'NetworktemplateDhcpSnoopingArgsDict']]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutesArgs', 'NetworktemplateExtraRoutesArgsDict']]]]] = None,
                 extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutes6Args', 'NetworktemplateExtraRoutes6ArgsDict']]]]] = None,
                 mist_nac: Optional[pulumi.Input[Union['NetworktemplateMistNacArgs', 'NetworktemplateMistNacArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateNetworksArgs', 'NetworktemplateNetworksArgsDict']]]]] = None,
                 ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateOspfAreasArgs', 'NetworktemplateOspfAreasArgsDict']]]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortMirroringArgs', 'NetworktemplatePortMirroringArgsDict']]]]] = None,
                 port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortUsagesArgs', 'NetworktemplatePortUsagesArgsDict']]]]] = None,
                 radius_config: Optional[pulumi.Input[Union['NetworktemplateRadiusConfigArgs', 'NetworktemplateRadiusConfigArgsDict']]] = None,
                 remote_syslog: Optional[pulumi.Input[Union['NetworktemplateRemoteSyslogArgs', 'NetworktemplateRemoteSyslogArgsDict']]] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 snmp_config: Optional[pulumi.Input[Union['NetworktemplateSnmpConfigArgs', 'NetworktemplateSnmpConfigArgsDict']]] = None,
                 switch_matching: Optional[pulumi.Input[Union['NetworktemplateSwitchMatchingArgs', 'NetworktemplateSwitchMatchingArgsDict']]] = None,
                 switch_mgmt: Optional[pulumi.Input[Union['NetworktemplateSwitchMgmtArgs', 'NetworktemplateSwitchMgmtArgsDict']]] = None,
                 vrf_config: Optional[pulumi.Input[Union['NetworktemplateVrfConfigArgs', 'NetworktemplateVrfConfigArgsDict']]] = None,
                 vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateVrfInstancesArgs', 'NetworktemplateVrfInstancesArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworktemplateArgs.__new__(NetworktemplateArgs)

            __props__.__dict__["acl_policies"] = acl_policies
            __props__.__dict__["acl_tags"] = acl_tags
            __props__.__dict__["additional_config_cmds"] = additional_config_cmds
            __props__.__dict__["dhcp_snooping"] = dhcp_snooping
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["dns_suffixes"] = dns_suffixes
            __props__.__dict__["extra_routes"] = extra_routes
            __props__.__dict__["extra_routes6"] = extra_routes6
            __props__.__dict__["mist_nac"] = mist_nac
            __props__.__dict__["name"] = name
            __props__.__dict__["networks"] = networks
            __props__.__dict__["ntp_servers"] = ntp_servers
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["ospf_areas"] = ospf_areas
            __props__.__dict__["port_mirroring"] = port_mirroring
            __props__.__dict__["port_usages"] = port_usages
            __props__.__dict__["radius_config"] = radius_config
            __props__.__dict__["remote_syslog"] = remote_syslog
            __props__.__dict__["remove_existing_configs"] = remove_existing_configs
            __props__.__dict__["snmp_config"] = snmp_config
            __props__.__dict__["switch_matching"] = switch_matching
            __props__.__dict__["switch_mgmt"] = switch_mgmt
            __props__.__dict__["vrf_config"] = vrf_config
            __props__.__dict__["vrf_instances"] = vrf_instances
        super(Networktemplate, __self__).__init__(
            'junipermist:org/networktemplate:Networktemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl_policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetworktemplateAclPolicyArgs', 'NetworktemplateAclPolicyArgsDict']]]]] = None,
            acl_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateAclTagsArgs', 'NetworktemplateAclTagsArgsDict']]]]] = None,
            additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dhcp_snooping: Optional[pulumi.Input[Union['NetworktemplateDhcpSnoopingArgs', 'NetworktemplateDhcpSnoopingArgsDict']]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutesArgs', 'NetworktemplateExtraRoutesArgsDict']]]]] = None,
            extra_routes6: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutes6Args', 'NetworktemplateExtraRoutes6ArgsDict']]]]] = None,
            mist_nac: Optional[pulumi.Input[Union['NetworktemplateMistNacArgs', 'NetworktemplateMistNacArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateNetworksArgs', 'NetworktemplateNetworksArgsDict']]]]] = None,
            ntp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            ospf_areas: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateOspfAreasArgs', 'NetworktemplateOspfAreasArgsDict']]]]] = None,
            port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortMirroringArgs', 'NetworktemplatePortMirroringArgsDict']]]]] = None,
            port_usages: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortUsagesArgs', 'NetworktemplatePortUsagesArgsDict']]]]] = None,
            radius_config: Optional[pulumi.Input[Union['NetworktemplateRadiusConfigArgs', 'NetworktemplateRadiusConfigArgsDict']]] = None,
            remote_syslog: Optional[pulumi.Input[Union['NetworktemplateRemoteSyslogArgs', 'NetworktemplateRemoteSyslogArgsDict']]] = None,
            remove_existing_configs: Optional[pulumi.Input[bool]] = None,
            snmp_config: Optional[pulumi.Input[Union['NetworktemplateSnmpConfigArgs', 'NetworktemplateSnmpConfigArgsDict']]] = None,
            switch_matching: Optional[pulumi.Input[Union['NetworktemplateSwitchMatchingArgs', 'NetworktemplateSwitchMatchingArgsDict']]] = None,
            switch_mgmt: Optional[pulumi.Input[Union['NetworktemplateSwitchMgmtArgs', 'NetworktemplateSwitchMgmtArgsDict']]] = None,
            vrf_config: Optional[pulumi.Input[Union['NetworktemplateVrfConfigArgs', 'NetworktemplateVrfConfigArgsDict']]] = None,
            vrf_instances: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateVrfInstancesArgs', 'NetworktemplateVrfInstancesArgsDict']]]]] = None) -> 'Networktemplate':
        """
        Get an existing Networktemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateAclTagsArgs', 'NetworktemplateAclTagsArgsDict']]]] acl_tags: ACL Tags to identify traffic source or destination. Key name is the tag name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config **Note**: no check is done
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateExtraRoutes6Args', 'NetworktemplateExtraRoutes6ArgsDict']]]] extra_routes6: Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        :param pulumi.Input[Union['NetworktemplateMistNacArgs', 'NetworktemplateMistNacArgsDict']] mist_nac: enable mist_nac to use radsec
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateNetworksArgs', 'NetworktemplateNetworksArgsDict']]]] networks: Property key is network name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ntp_servers: list of NTP servers specific to this device. By default, those in Site Settings will be used
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateOspfAreasArgs', 'NetworktemplateOspfAreasArgsDict']]]] ospf_areas: Junos OSPF areas
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplatePortMirroringArgs', 'NetworktemplatePortMirroringArgsDict']]]] port_mirroring: Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
               takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        :param pulumi.Input[Union['NetworktemplateRadiusConfigArgs', 'NetworktemplateRadiusConfigArgsDict']] radius_config: Junos Radius config
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[Union['NetworktemplateSwitchMatchingArgs', 'NetworktemplateSwitchMatchingArgsDict']] switch_matching: Switch template
        :param pulumi.Input[Union['NetworktemplateSwitchMgmtArgs', 'NetworktemplateSwitchMgmtArgsDict']] switch_mgmt: Switch settings
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['NetworktemplateVrfInstancesArgs', 'NetworktemplateVrfInstancesArgsDict']]]] vrf_instances: Property key is the network name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworktemplateState.__new__(_NetworktemplateState)

        __props__.__dict__["acl_policies"] = acl_policies
        __props__.__dict__["acl_tags"] = acl_tags
        __props__.__dict__["additional_config_cmds"] = additional_config_cmds
        __props__.__dict__["dhcp_snooping"] = dhcp_snooping
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["dns_suffixes"] = dns_suffixes
        __props__.__dict__["extra_routes"] = extra_routes
        __props__.__dict__["extra_routes6"] = extra_routes6
        __props__.__dict__["mist_nac"] = mist_nac
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["ntp_servers"] = ntp_servers
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["ospf_areas"] = ospf_areas
        __props__.__dict__["port_mirroring"] = port_mirroring
        __props__.__dict__["port_usages"] = port_usages
        __props__.__dict__["radius_config"] = radius_config
        __props__.__dict__["remote_syslog"] = remote_syslog
        __props__.__dict__["remove_existing_configs"] = remove_existing_configs
        __props__.__dict__["snmp_config"] = snmp_config
        __props__.__dict__["switch_matching"] = switch_matching
        __props__.__dict__["switch_mgmt"] = switch_mgmt
        __props__.__dict__["vrf_config"] = vrf_config
        __props__.__dict__["vrf_instances"] = vrf_instances
        return Networktemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aclPolicies")
    def acl_policies(self) -> pulumi.Output[Optional[Sequence['outputs.NetworktemplateAclPolicy']]]:
        return pulumi.get(self, "acl_policies")

    @property
    @pulumi.getter(name="aclTags")
    def acl_tags(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateAclTags']]]:
        """
        ACL Tags to identify traffic source or destination. Key name is the tag name
        """
        return pulumi.get(self, "acl_tags")

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        additional CLI commands to append to the generated Junos config **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> pulumi.Output[Optional['outputs.NetworktemplateDhcpSnooping']]:
        return pulumi.get(self, "dhcp_snooping")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global dns settings. To keep compatibility, dns settings in `ip_config` and `oob_ip_config` will overwrite this setting
        """
        return pulumi.get(self, "dns_suffixes")

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutes']]]:
        return pulumi.get(self, "extra_routes")

    @property
    @pulumi.getter(name="extraRoutes6")
    def extra_routes6(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateExtraRoutes6']]]:
        """
        Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
        """
        return pulumi.get(self, "extra_routes6")

    @property
    @pulumi.getter(name="mistNac")
    def mist_nac(self) -> pulumi.Output[Optional['outputs.NetworktemplateMistNac']]:
        """
        enable mist_nac to use radsec
        """
        return pulumi.get(self, "mist_nac")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateNetworks']]]:
        """
        Property key is network name
        """
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        list of NTP servers specific to this device. By default, those in Site Settings will be used
        """
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="ospfAreas")
    def ospf_areas(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateOspfAreas']]]:
        """
        Junos OSPF areas
        """
        return pulumi.get(self, "ospf_areas")

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplatePortMirroring']]]:
        """
        Property key is the port mirroring instance name (Maximum: 4) port_mirroring can be added under device/site settings. It
        takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @property
    @pulumi.getter(name="portUsages")
    def port_usages(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplatePortUsages']]]:
        return pulumi.get(self, "port_usages")

    @property
    @pulumi.getter(name="radiusConfig")
    def radius_config(self) -> pulumi.Output[Optional['outputs.NetworktemplateRadiusConfig']]:
        """
        Junos Radius config
        """
        return pulumi.get(self, "radius_config")

    @property
    @pulumi.getter(name="remoteSyslog")
    def remote_syslog(self) -> pulumi.Output[Optional['outputs.NetworktemplateRemoteSyslog']]:
        return pulumi.get(self, "remote_syslog")

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> pulumi.Output[bool]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @property
    @pulumi.getter(name="snmpConfig")
    def snmp_config(self) -> pulumi.Output[Optional['outputs.NetworktemplateSnmpConfig']]:
        return pulumi.get(self, "snmp_config")

    @property
    @pulumi.getter(name="switchMatching")
    def switch_matching(self) -> pulumi.Output[Optional['outputs.NetworktemplateSwitchMatching']]:
        """
        Switch template
        """
        return pulumi.get(self, "switch_matching")

    @property
    @pulumi.getter(name="switchMgmt")
    def switch_mgmt(self) -> pulumi.Output[Optional['outputs.NetworktemplateSwitchMgmt']]:
        """
        Switch settings
        """
        return pulumi.get(self, "switch_mgmt")

    @property
    @pulumi.getter(name="vrfConfig")
    def vrf_config(self) -> pulumi.Output[Optional['outputs.NetworktemplateVrfConfig']]:
        return pulumi.get(self, "vrf_config")

    @property
    @pulumi.getter(name="vrfInstances")
    def vrf_instances(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.NetworktemplateVrfInstances']]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "vrf_instances")

