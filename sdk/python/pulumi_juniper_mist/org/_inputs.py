# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DeviceprofileApAeroscoutArgs',
    'DeviceprofileApBleConfigArgs',
    'DeviceprofileApEslConfigArgs',
    'DeviceprofileApIpConfigArgs',
    'DeviceprofileApLedArgs',
    'DeviceprofileApMeshArgs',
    'DeviceprofileApPwrConfigArgs',
    'DeviceprofileApRadioConfigArgs',
    'DeviceprofileApRadioConfigBand24Args',
    'DeviceprofileApRadioConfigBand5Args',
    'DeviceprofileApRadioConfigBand5On24RadioArgs',
    'DeviceprofileApRadioConfigBand6Args',
    'DeviceprofileApUplinkPortConfigArgs',
    'DeviceprofileApUsbConfigArgs',
    'DeviceprofileGatewayBgpConfigArgs',
    'DeviceprofileGatewayBgpConfigCommunityArgs',
    'DeviceprofileGatewayBgpConfigNeighborsArgs',
    'DeviceprofileGatewayDhcpdConfigArgs',
    'DeviceprofileGatewayDhcpdConfigConfigArgs',
    'DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs',
    'DeviceprofileGatewayDhcpdConfigConfigOptionsArgs',
    'DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs',
    'DeviceprofileGatewayExtraRoutes6Args',
    'DeviceprofileGatewayExtraRoutesArgs',
    'DeviceprofileGatewayIdpProfilesArgs',
    'DeviceprofileGatewayIdpProfilesOverwriteArgs',
    'DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs',
    'DeviceprofileGatewayIpConfigsArgs',
    'DeviceprofileGatewayNetworkArgs',
    'DeviceprofileGatewayNetworkInternalAccessArgs',
    'DeviceprofileGatewayNetworkInternetAccessArgs',
    'DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs',
    'DeviceprofileGatewayNetworkInternetAccessStaticNatArgs',
    'DeviceprofileGatewayNetworkTenantsArgs',
    'DeviceprofileGatewayNetworkVpnAccessArgs',
    'DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs',
    'DeviceprofileGatewayNetworkVpnAccessSourceNatArgs',
    'DeviceprofileGatewayNetworkVpnAccessStaticNatArgs',
    'DeviceprofileGatewayOobIpConfigArgs',
    'DeviceprofileGatewayOobIpConfigNode1Args',
    'DeviceprofileGatewayPathPreferencesArgs',
    'DeviceprofileGatewayPathPreferencesPathArgs',
    'DeviceprofileGatewayPortConfigArgs',
    'DeviceprofileGatewayPortConfigIpConfigArgs',
    'DeviceprofileGatewayPortConfigTrafficShapingArgs',
    'DeviceprofileGatewayPortConfigVpnPathsArgs',
    'DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs',
    'DeviceprofileGatewayPortConfigWanSourceNatArgs',
    'DeviceprofileGatewayRoutingPoliciesArgs',
    'DeviceprofileGatewayRoutingPoliciesTermArgs',
    'DeviceprofileGatewayRoutingPoliciesTermActionArgs',
    'DeviceprofileGatewayRoutingPoliciesTermMatchingArgs',
    'DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs',
    'DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs',
    'DeviceprofileGatewayServicePolicyArgs',
    'DeviceprofileGatewayServicePolicyAppqoeArgs',
    'DeviceprofileGatewayServicePolicyEwfArgs',
    'DeviceprofileGatewayServicePolicyIdpArgs',
    'DeviceprofileGatewayTunnelConfigsArgs',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionArgs',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs',
    'DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs',
    'DeviceprofileGatewayTunnelConfigsIkeProposalArgs',
    'DeviceprofileGatewayTunnelConfigsIpsecProposalArgs',
    'DeviceprofileGatewayTunnelConfigsPrimaryArgs',
    'DeviceprofileGatewayTunnelConfigsProbeArgs',
    'DeviceprofileGatewayTunnelConfigsSecondaryArgs',
    'DeviceprofileGatewayTunnelProviderOptionsArgs',
    'DeviceprofileGatewayTunnelProviderOptionsJseArgs',
    'DeviceprofileGatewayTunnelProviderOptionsZscalerArgs',
    'DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs',
    'DeviceprofileGatewayVrfConfigArgs',
    'DeviceprofileGatewayVrfInstancesArgs',
    'GatewaytemplateBgpConfigArgs',
    'GatewaytemplateBgpConfigCommunityArgs',
    'GatewaytemplateBgpConfigNeighborsArgs',
    'GatewaytemplateDhcpdConfigArgs',
    'GatewaytemplateDhcpdConfigConfigArgs',
    'GatewaytemplateDhcpdConfigConfigFixedBindingsArgs',
    'GatewaytemplateDhcpdConfigConfigOptionsArgs',
    'GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs',
    'GatewaytemplateExtraRoutes6Args',
    'GatewaytemplateExtraRoutesArgs',
    'GatewaytemplateIdpProfilesArgs',
    'GatewaytemplateIdpProfilesOverwriteArgs',
    'GatewaytemplateIdpProfilesOverwriteMatchingArgs',
    'GatewaytemplateIpConfigsArgs',
    'GatewaytemplateNetworkArgs',
    'GatewaytemplateNetworkInternalAccessArgs',
    'GatewaytemplateNetworkInternetAccessArgs',
    'GatewaytemplateNetworkInternetAccessDestinationNatArgs',
    'GatewaytemplateNetworkInternetAccessStaticNatArgs',
    'GatewaytemplateNetworkTenantsArgs',
    'GatewaytemplateNetworkVpnAccessArgs',
    'GatewaytemplateNetworkVpnAccessDestinationNatArgs',
    'GatewaytemplateNetworkVpnAccessSourceNatArgs',
    'GatewaytemplateNetworkVpnAccessStaticNatArgs',
    'GatewaytemplateOobIpConfigArgs',
    'GatewaytemplateOobIpConfigNode1Args',
    'GatewaytemplatePathPreferencesArgs',
    'GatewaytemplatePathPreferencesPathArgs',
    'GatewaytemplatePortConfigArgs',
    'GatewaytemplatePortConfigIpConfigArgs',
    'GatewaytemplatePortConfigTrafficShapingArgs',
    'GatewaytemplatePortConfigVpnPathsArgs',
    'GatewaytemplatePortConfigVpnPathsTrafficShapingArgs',
    'GatewaytemplatePortConfigWanSourceNatArgs',
    'GatewaytemplateRoutingPoliciesArgs',
    'GatewaytemplateRoutingPoliciesTermArgs',
    'GatewaytemplateRoutingPoliciesTermActionArgs',
    'GatewaytemplateRoutingPoliciesTermMatchingArgs',
    'GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs',
    'GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs',
    'GatewaytemplateServicePolicyArgs',
    'GatewaytemplateServicePolicyAppqoeArgs',
    'GatewaytemplateServicePolicyEwfArgs',
    'GatewaytemplateServicePolicyIdpArgs',
    'GatewaytemplateTunnelConfigsArgs',
    'GatewaytemplateTunnelConfigsAutoProvisionArgs',
    'GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs',
    'GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs',
    'GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs',
    'GatewaytemplateTunnelConfigsIkeProposalArgs',
    'GatewaytemplateTunnelConfigsIpsecProposalArgs',
    'GatewaytemplateTunnelConfigsPrimaryArgs',
    'GatewaytemplateTunnelConfigsProbeArgs',
    'GatewaytemplateTunnelConfigsSecondaryArgs',
    'GatewaytemplateTunnelProviderOptionsArgs',
    'GatewaytemplateTunnelProviderOptionsJseArgs',
    'GatewaytemplateTunnelProviderOptionsZscalerArgs',
    'GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs',
    'GatewaytemplateVrfConfigArgs',
    'GatewaytemplateVrfInstancesArgs',
    'IdpprofileOverwriteArgs',
    'IdpprofileOverwriteMatchingArgs',
    'InventoryDeviceArgs',
    'NacruleMatchingArgs',
    'NacruleNotMatchingArgs',
    'NetworkInternalAccessArgs',
    'NetworkInternetAccessArgs',
    'NetworkInternetAccessDestinationNatArgs',
    'NetworkInternetAccessStaticNatArgs',
    'NetworkTenantsArgs',
    'NetworkVpnAccessArgs',
    'NetworkVpnAccessDestinationNatArgs',
    'NetworkVpnAccessSourceNatArgs',
    'NetworkVpnAccessStaticNatArgs',
    'NetworktemplateAclPolicyArgs',
    'NetworktemplateAclPolicyActionArgs',
    'NetworktemplateAclTagsArgs',
    'NetworktemplateAclTagsSpecArgs',
    'NetworktemplateDhcpSnoopingArgs',
    'NetworktemplateExtraRoutes6Args',
    'NetworktemplateExtraRoutes6NextQualifiedArgs',
    'NetworktemplateExtraRoutesArgs',
    'NetworktemplateExtraRoutesNextQualifiedArgs',
    'NetworktemplateMistNacArgs',
    'NetworktemplateNetworksArgs',
    'NetworktemplatePortMirroringArgs',
    'NetworktemplatePortUsagesArgs',
    'NetworktemplatePortUsagesRuleArgs',
    'NetworktemplatePortUsagesStormControlArgs',
    'NetworktemplateRadiusConfigArgs',
    'NetworktemplateRadiusConfigAcctServerArgs',
    'NetworktemplateRadiusConfigAuthServerArgs',
    'NetworktemplateRemoteSyslogArgs',
    'NetworktemplateRemoteSyslogArchiveArgs',
    'NetworktemplateRemoteSyslogConsoleArgs',
    'NetworktemplateRemoteSyslogConsoleContentArgs',
    'NetworktemplateRemoteSyslogFileArgs',
    'NetworktemplateRemoteSyslogFileArchiveArgs',
    'NetworktemplateRemoteSyslogFileContentArgs',
    'NetworktemplateRemoteSyslogServerArgs',
    'NetworktemplateRemoteSyslogServerContentArgs',
    'NetworktemplateRemoteSyslogUserArgs',
    'NetworktemplateRemoteSyslogUserContentArgs',
    'NetworktemplateSnmpConfigArgs',
    'NetworktemplateSnmpConfigClientListArgs',
    'NetworktemplateSnmpConfigTrapGroupArgs',
    'NetworktemplateSnmpConfigV2cConfigArgs',
    'NetworktemplateSnmpConfigV3ConfigArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs',
    'NetworktemplateSnmpConfigV3ConfigTargetAddressArgs',
    'NetworktemplateSnmpConfigV3ConfigTargetParameterArgs',
    'NetworktemplateSnmpConfigV3ConfigUsmArgs',
    'NetworktemplateSnmpConfigV3ConfigUsmUserArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs',
    'NetworktemplateSnmpConfigViewArgs',
    'NetworktemplateSwitchMatchingArgs',
    'NetworktemplateSwitchMatchingRuleArgs',
    'NetworktemplateSwitchMatchingRuleIpConfigArgs',
    'NetworktemplateSwitchMatchingRuleOobIpConfigArgs',
    'NetworktemplateSwitchMatchingRulePortConfigArgs',
    'NetworktemplateSwitchMatchingRulePortMirroringArgs',
    'NetworktemplateSwitchMgmtArgs',
    'NetworktemplateSwitchMgmtLocalAccountsArgs',
    'NetworktemplateSwitchMgmtProtectReArgs',
    'NetworktemplateSwitchMgmtProtectReCustomArgs',
    'NetworktemplateSwitchMgmtTacacsArgs',
    'NetworktemplateSwitchMgmtTacacsAcctServerArgs',
    'NetworktemplateSwitchMgmtTacacsTacplusServerArgs',
    'NetworktemplateVrfConfigArgs',
    'NetworktemplateVrfInstancesArgs',
    'NetworktemplateVrfInstancesExtraRoutesArgs',
    'RftemplateBand24Args',
    'RftemplateBand5Args',
    'RftemplateBand5On24RadioArgs',
    'RftemplateBand6Args',
    'RftemplateModelSpecificArgs',
    'RftemplateModelSpecificBand24Args',
    'RftemplateModelSpecificBand5Args',
    'RftemplateModelSpecificBand5On24RadioArgs',
    'RftemplateModelSpecificBand6Args',
    'ServiceSpecArgs',
    'ServicepolicyAppqoeArgs',
    'ServicepolicyEwfArgs',
    'ServicepolicyIdpArgs',
    'SettingApiPolicyArgs',
    'SettingCelonaArgs',
    'SettingCloudsharkArgs',
    'SettingCradlepointArgs',
    'SettingDeviceCertArgs',
    'SettingInstallerArgs',
    'SettingJcloudArgs',
    'SettingJuniperArgs',
    'SettingJuniperAccountArgs',
    'SettingMgmtArgs',
    'SettingMistNacArgs',
    'SettingMistNacIdpArgs',
    'SettingMistNacServerCertArgs',
    'SettingMxedgeMgmtArgs',
    'SettingPasswordPolicyArgs',
    'SettingPcapArgs',
    'SettingPortChannelizationArgs',
    'SettingSecurityArgs',
    'SettingSwitchMgmtArgs',
    'SettingSyntheticTestArgs',
    'SettingSyntheticTestVlanArgs',
    'SettingSyntheticTestWanSpeedtestArgs',
    'SettingVpnOptionsArgs',
    'VpnPathsArgs',
    'WlanAcctServerArgs',
    'WlanAirwatchArgs',
    'WlanAppLimitArgs',
    'WlanAppQosArgs',
    'WlanAppQosAppsArgs',
    'WlanAppQosOtherArgs',
    'WlanAuthArgs',
    'WlanAuthServerArgs',
    'WlanBonjourArgs',
    'WlanBonjourServicesArgs',
    'WlanCiscoCwaArgs',
    'WlanCoaServerArgs',
    'WlanDnsServerRewriteArgs',
    'WlanDynamicPskArgs',
    'WlanDynamicVlanArgs',
    'WlanHotspot20Args',
    'WlanInjectDhcpOption82Args',
    'WlanMistNacArgs',
    'WlanPortalArgs',
    'WlanPortalTemplatePortalTemplateArgs',
    'WlanPortalTemplatePortalTemplateLocalesArgs',
    'WlanQosArgs',
    'WlanRadsecArgs',
    'WlanRadsecServerArgs',
    'WlanScheduleArgs',
    'WlanScheduleHoursArgs',
    'WlantemplateAppliesArgs',
    'WlantemplateExceptionsArgs',
    'WxtagSpecArgs',
]

@pulumi.input_type
class DeviceprofileApAeroscoutArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 locate_connected: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable aeroscout config
        :param pulumi.Input[str] host: required if enabled, aeroscout server host
        :param pulumi.Input[bool] locate_connected: whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if locate_connected is not None:
            pulumi.set(__self__, "locate_connected", locate_connected)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable aeroscout config
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        required if enabled, aeroscout server host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="locateConnected")
    def locate_connected(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable the feature to allow wireless clients data received and sent to AES server for location calculation
        """
        return pulumi.get(self, "locate_connected")

    @locate_connected.setter
    def locate_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locate_connected", value)


@pulumi.input_type
class DeviceprofileApBleConfigArgs:
    def __init__(__self__, *,
                 beacon_enabled: Optional[pulumi.Input[bool]] = None,
                 beacon_rate: Optional[pulumi.Input[int]] = None,
                 beacon_rate_mode: Optional[pulumi.Input[str]] = None,
                 beam_disableds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 custom_ble_packet_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_ble_packet_frame: Optional[pulumi.Input[str]] = None,
                 custom_ble_packet_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_adv_power: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_beams: Optional[pulumi.Input[str]] = None,
                 eddystone_uid_enabled: Optional[pulumi.Input[bool]] = None,
                 eddystone_uid_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_instance: Optional[pulumi.Input[str]] = None,
                 eddystone_uid_namespace: Optional[pulumi.Input[str]] = None,
                 eddystone_url_adv_power: Optional[pulumi.Input[int]] = None,
                 eddystone_url_beams: Optional[pulumi.Input[str]] = None,
                 eddystone_url_enabled: Optional[pulumi.Input[bool]] = None,
                 eddystone_url_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_url_url: Optional[pulumi.Input[str]] = None,
                 ibeacon_adv_power: Optional[pulumi.Input[int]] = None,
                 ibeacon_beams: Optional[pulumi.Input[str]] = None,
                 ibeacon_enabled: Optional[pulumi.Input[bool]] = None,
                 ibeacon_freq_msec: Optional[pulumi.Input[int]] = None,
                 ibeacon_major: Optional[pulumi.Input[int]] = None,
                 ibeacon_minor: Optional[pulumi.Input[int]] = None,
                 ibeacon_uuid: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] beacon_enabled: whether Mist beacons is enabled
        :param pulumi.Input[int] beacon_rate: required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        :param pulumi.Input[str] beacon_rate_mode: enum: `custom`, `default`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] beam_disableds: list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        :param pulumi.Input[bool] custom_ble_packet_enabled: can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        :param pulumi.Input[str] custom_ble_packet_frame: The custom frame to be sent out in this beacon. The frame must be a hexstring
        :param pulumi.Input[int] custom_ble_packet_freq_msec: Frequency (msec) of data emitted by custom ble beacon
        :param pulumi.Input[int] eddystone_uid_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] eddystone_uid_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        :param pulumi.Input[int] eddystone_uid_freq_msec: Frequency (msec) of data emmit by Eddystone-UID beacon
        :param pulumi.Input[str] eddystone_uid_instance: Eddystone-UID instance for the device
        :param pulumi.Input[str] eddystone_uid_namespace: Eddystone-UID namespace
        :param pulumi.Input[int] eddystone_url_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] eddystone_url_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        :param pulumi.Input[int] eddystone_url_freq_msec: Frequency (msec) of data emit by Eddystone-UID beacon
        :param pulumi.Input[str] eddystone_url_url: URL pointed by Eddystone-URL beacon
        :param pulumi.Input[int] ibeacon_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] ibeacon_enabled: can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        :param pulumi.Input[int] ibeacon_freq_msec: Frequency (msec) of data emmit for iBeacon
        :param pulumi.Input[int] ibeacon_major: Major number for iBeacon
        :param pulumi.Input[int] ibeacon_minor: Minor number for iBeacon
        :param pulumi.Input[str] ibeacon_uuid: optional, if not specified, the same UUID as the beacon will be used
        :param pulumi.Input[int] power: required if `power_mode`==`custom`
        :param pulumi.Input[str] power_mode: enum: `custom`, `default`
        """
        if beacon_enabled is not None:
            pulumi.set(__self__, "beacon_enabled", beacon_enabled)
        if beacon_rate is not None:
            pulumi.set(__self__, "beacon_rate", beacon_rate)
        if beacon_rate_mode is not None:
            pulumi.set(__self__, "beacon_rate_mode", beacon_rate_mode)
        if beam_disableds is not None:
            pulumi.set(__self__, "beam_disableds", beam_disableds)
        if custom_ble_packet_enabled is not None:
            pulumi.set(__self__, "custom_ble_packet_enabled", custom_ble_packet_enabled)
        if custom_ble_packet_frame is not None:
            pulumi.set(__self__, "custom_ble_packet_frame", custom_ble_packet_frame)
        if custom_ble_packet_freq_msec is not None:
            pulumi.set(__self__, "custom_ble_packet_freq_msec", custom_ble_packet_freq_msec)
        if eddystone_uid_adv_power is not None:
            pulumi.set(__self__, "eddystone_uid_adv_power", eddystone_uid_adv_power)
        if eddystone_uid_beams is not None:
            pulumi.set(__self__, "eddystone_uid_beams", eddystone_uid_beams)
        if eddystone_uid_enabled is not None:
            pulumi.set(__self__, "eddystone_uid_enabled", eddystone_uid_enabled)
        if eddystone_uid_freq_msec is not None:
            pulumi.set(__self__, "eddystone_uid_freq_msec", eddystone_uid_freq_msec)
        if eddystone_uid_instance is not None:
            pulumi.set(__self__, "eddystone_uid_instance", eddystone_uid_instance)
        if eddystone_uid_namespace is not None:
            pulumi.set(__self__, "eddystone_uid_namespace", eddystone_uid_namespace)
        if eddystone_url_adv_power is not None:
            pulumi.set(__self__, "eddystone_url_adv_power", eddystone_url_adv_power)
        if eddystone_url_beams is not None:
            pulumi.set(__self__, "eddystone_url_beams", eddystone_url_beams)
        if eddystone_url_enabled is not None:
            pulumi.set(__self__, "eddystone_url_enabled", eddystone_url_enabled)
        if eddystone_url_freq_msec is not None:
            pulumi.set(__self__, "eddystone_url_freq_msec", eddystone_url_freq_msec)
        if eddystone_url_url is not None:
            pulumi.set(__self__, "eddystone_url_url", eddystone_url_url)
        if ibeacon_adv_power is not None:
            pulumi.set(__self__, "ibeacon_adv_power", ibeacon_adv_power)
        if ibeacon_beams is not None:
            pulumi.set(__self__, "ibeacon_beams", ibeacon_beams)
        if ibeacon_enabled is not None:
            pulumi.set(__self__, "ibeacon_enabled", ibeacon_enabled)
        if ibeacon_freq_msec is not None:
            pulumi.set(__self__, "ibeacon_freq_msec", ibeacon_freq_msec)
        if ibeacon_major is not None:
            pulumi.set(__self__, "ibeacon_major", ibeacon_major)
        if ibeacon_minor is not None:
            pulumi.set(__self__, "ibeacon_minor", ibeacon_minor)
        if ibeacon_uuid is not None:
            pulumi.set(__self__, "ibeacon_uuid", ibeacon_uuid)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)

    @property
    @pulumi.getter(name="beaconEnabled")
    def beacon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether Mist beacons is enabled
        """
        return pulumi.get(self, "beacon_enabled")

    @beacon_enabled.setter
    def beacon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "beacon_enabled", value)

    @property
    @pulumi.getter(name="beaconRate")
    def beacon_rate(self) -> Optional[pulumi.Input[int]]:
        """
        required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        """
        return pulumi.get(self, "beacon_rate")

    @beacon_rate.setter
    def beacon_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_rate", value)

    @property
    @pulumi.getter(name="beaconRateMode")
    def beacon_rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "beacon_rate_mode")

    @beacon_rate_mode.setter
    def beacon_rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_rate_mode", value)

    @property
    @pulumi.getter(name="beamDisableds")
    def beam_disableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        """
        return pulumi.get(self, "beam_disableds")

    @beam_disableds.setter
    def beam_disableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "beam_disableds", value)

    @property
    @pulumi.getter(name="customBlePacketEnabled")
    def custom_ble_packet_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        """
        return pulumi.get(self, "custom_ble_packet_enabled")

    @custom_ble_packet_enabled.setter
    def custom_ble_packet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_ble_packet_enabled", value)

    @property
    @pulumi.getter(name="customBlePacketFrame")
    def custom_ble_packet_frame(self) -> Optional[pulumi.Input[str]]:
        """
        The custom frame to be sent out in this beacon. The frame must be a hexstring
        """
        return pulumi.get(self, "custom_ble_packet_frame")

    @custom_ble_packet_frame.setter
    def custom_ble_packet_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_ble_packet_frame", value)

    @property
    @pulumi.getter(name="customBlePacketFreqMsec")
    def custom_ble_packet_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emitted by custom ble beacon
        """
        return pulumi.get(self, "custom_ble_packet_freq_msec")

    @custom_ble_packet_freq_msec.setter
    def custom_ble_packet_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_ble_packet_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUidAdvPower")
    def eddystone_uid_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_uid_adv_power")

    @eddystone_uid_adv_power.setter
    def eddystone_uid_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_uid_adv_power", value)

    @property
    @pulumi.getter(name="eddystoneUidBeams")
    def eddystone_uid_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eddystone_uid_beams")

    @eddystone_uid_beams.setter
    def eddystone_uid_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_beams", value)

    @property
    @pulumi.getter(name="eddystoneUidEnabled")
    def eddystone_uid_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        """
        return pulumi.get(self, "eddystone_uid_enabled")

    @eddystone_uid_enabled.setter
    def eddystone_uid_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eddystone_uid_enabled", value)

    @property
    @pulumi.getter(name="eddystoneUidFreqMsec")
    def eddystone_uid_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_uid_freq_msec")

    @eddystone_uid_freq_msec.setter
    def eddystone_uid_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_uid_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUidInstance")
    def eddystone_uid_instance(self) -> Optional[pulumi.Input[str]]:
        """
        Eddystone-UID instance for the device
        """
        return pulumi.get(self, "eddystone_uid_instance")

    @eddystone_uid_instance.setter
    def eddystone_uid_instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_instance", value)

    @property
    @pulumi.getter(name="eddystoneUidNamespace")
    def eddystone_uid_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Eddystone-UID namespace
        """
        return pulumi.get(self, "eddystone_uid_namespace")

    @eddystone_uid_namespace.setter
    def eddystone_uid_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_namespace", value)

    @property
    @pulumi.getter(name="eddystoneUrlAdvPower")
    def eddystone_url_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_url_adv_power")

    @eddystone_url_adv_power.setter
    def eddystone_url_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_url_adv_power", value)

    @property
    @pulumi.getter(name="eddystoneUrlBeams")
    def eddystone_url_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eddystone_url_beams")

    @eddystone_url_beams.setter
    def eddystone_url_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_url_beams", value)

    @property
    @pulumi.getter(name="eddystoneUrlEnabled")
    def eddystone_url_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        """
        return pulumi.get(self, "eddystone_url_enabled")

    @eddystone_url_enabled.setter
    def eddystone_url_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eddystone_url_enabled", value)

    @property
    @pulumi.getter(name="eddystoneUrlFreqMsec")
    def eddystone_url_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_url_freq_msec")

    @eddystone_url_freq_msec.setter
    def eddystone_url_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_url_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUrlUrl")
    def eddystone_url_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL pointed by Eddystone-URL beacon
        """
        return pulumi.get(self, "eddystone_url_url")

    @eddystone_url_url.setter
    def eddystone_url_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_url_url", value)

    @property
    @pulumi.getter(name="ibeaconAdvPower")
    def ibeacon_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "ibeacon_adv_power")

    @ibeacon_adv_power.setter
    def ibeacon_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_adv_power", value)

    @property
    @pulumi.getter(name="ibeaconBeams")
    def ibeacon_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ibeacon_beams")

    @ibeacon_beams.setter
    def ibeacon_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibeacon_beams", value)

    @property
    @pulumi.getter(name="ibeaconEnabled")
    def ibeacon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        """
        return pulumi.get(self, "ibeacon_enabled")

    @ibeacon_enabled.setter
    def ibeacon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ibeacon_enabled", value)

    @property
    @pulumi.getter(name="ibeaconFreqMsec")
    def ibeacon_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emmit for iBeacon
        """
        return pulumi.get(self, "ibeacon_freq_msec")

    @ibeacon_freq_msec.setter
    def ibeacon_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_freq_msec", value)

    @property
    @pulumi.getter(name="ibeaconMajor")
    def ibeacon_major(self) -> Optional[pulumi.Input[int]]:
        """
        Major number for iBeacon
        """
        return pulumi.get(self, "ibeacon_major")

    @ibeacon_major.setter
    def ibeacon_major(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_major", value)

    @property
    @pulumi.getter(name="ibeaconMinor")
    def ibeacon_minor(self) -> Optional[pulumi.Input[int]]:
        """
        Minor number for iBeacon
        """
        return pulumi.get(self, "ibeacon_minor")

    @ibeacon_minor.setter
    def ibeacon_minor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_minor", value)

    @property
    @pulumi.getter(name="ibeaconUuid")
    def ibeacon_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        optional, if not specified, the same UUID as the beacon will be used
        """
        return pulumi.get(self, "ibeacon_uuid")

    @ibeacon_uuid.setter
    def ibeacon_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibeacon_uuid", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        required if `power_mode`==`custom`
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)


@pulumi.input_type
class DeviceprofileApEslConfigArgs:
    def __init__(__self__, *,
                 cacert: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] cacert: Only if `type`==`imagotag` or `type`==`native`
        :param pulumi.Input[int] channel: Only if `type`==`imagotag` or `type`==`native`
        :param pulumi.Input[bool] enabled: usb*config is ignored if esl*config enabled
        :param pulumi.Input[str] host: Only if `type`==`imagotag` or `type`==`native`
        :param pulumi.Input[int] port: Only if `type`==`imagotag` or `type`==`native`
        :param pulumi.Input[str] type: note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        :param pulumi.Input[bool] verify_cert: Only if `type`==`imagotag` or `type`==`native`
        :param pulumi.Input[int] vlan_id: Only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        usb*config is ignored if esl*config enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        note: ble*config will be ingored if esl*config is enabled and with native mode. enum: `hanshow`, `imagotag`, `native`, `solum`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `type`==`imagotag` or `type`==`native`
        """
        return pulumi.get(self, "verify_cert")

    @verify_cert.setter
    def verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_cert", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class DeviceprofileApIpConfigArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 netmask6: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type6: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: if `type`==`static`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: required if `type`==`static`
        :param pulumi.Input[str] gateway: required if `type`==`static`
        :param pulumi.Input[str] ip: required if `type`==`static`
        :param pulumi.Input[str] netmask: required if `type`==`static`
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[str] type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        :param pulumi.Input[int] vlan_id: management vlan id, default is 1 (untagged)
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if netmask6 is not None:
            pulumi.set(__self__, "netmask6", netmask6)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        required if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def netmask6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "netmask6")

    @netmask6.setter
    def netmask6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask6", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def type6(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "type6")

    @type6.setter
    def type6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type6", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        management vlan id, default is 1 (untagged)
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class DeviceprofileApLedArgs:
    def __init__(__self__, *,
                 brightness: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileApMeshArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: whether mesh is enabled on this AP
        :param pulumi.Input[int] group: mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        :param pulumi.Input[str] role: enum: `base`, `remote`
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether mesh is enabled on this AP
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[int]]:
        """
        mesh group, base AP(s) will only allow remote AP(s) in the same mesh group to join, 1-9, optional
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `base`, `remote`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class DeviceprofileApPwrConfigArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[int]] = None,
                 prefer_usb_over_wifi: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] base: additional power to request during negotiating with PSE over PoE, in mW
        :param pulumi.Input[bool] prefer_usb_over_wifi: whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        if base is not None:
            pulumi.set(__self__, "base", base)
        if prefer_usb_over_wifi is not None:
            pulumi.set(__self__, "prefer_usb_over_wifi", prefer_usb_over_wifi)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[int]]:
        """
        additional power to request during negotiating with PSE over PoE, in mW
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="preferUsbOverWifi")
    def prefer_usb_over_wifi(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable power out to peripheral, meanwhile will reduce power to wifi (only for AP45 at power mode)
        """
        return pulumi.get(self, "prefer_usb_over_wifi")

    @prefer_usb_over_wifi.setter
    def prefer_usb_over_wifi(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer_usb_over_wifi", value)


@pulumi.input_type
class DeviceprofileApRadioConfigArgs:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain24: Optional[pulumi.Input[int]] = None,
                 ant_gain5: Optional[pulumi.Input[int]] = None,
                 ant_gain6: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 band24: Optional[pulumi.Input['DeviceprofileApRadioConfigBand24Args']] = None,
                 band24_usage: Optional[pulumi.Input[str]] = None,
                 band5: Optional[pulumi.Input['DeviceprofileApRadioConfigBand5Args']] = None,
                 band5_on24_radio: Optional[pulumi.Input['DeviceprofileApRadioConfigBand5On24RadioArgs']] = None,
                 band6: Optional[pulumi.Input['DeviceprofileApRadioConfigBand6Args']] = None,
                 indoor_use: Optional[pulumi.Input[bool]] = None,
                 scanning_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] ant_gain24: antenna gain for 2.4G - for models with external antenna only
        :param pulumi.Input[int] ant_gain5: antenna gain for 5G - for models with external antenna only
        :param pulumi.Input[int] ant_gain6: antenna gain for 6G - for models with external antenna only
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input['DeviceprofileApRadioConfigBand24Args'] band24: Radio Band AP settings
        :param pulumi.Input[str] band24_usage: enum: `24`, `5`, `6`, `auto`
        :param pulumi.Input['DeviceprofileApRadioConfigBand5Args'] band5: Radio Band AP settings
        :param pulumi.Input['DeviceprofileApRadioConfigBand5On24RadioArgs'] band5_on24_radio: Radio Band AP settings
        :param pulumi.Input['DeviceprofileApRadioConfigBand6Args'] band6: Radio Band AP settings
        :param pulumi.Input[bool] indoor_use: to make an outdoor operate indoor.
               for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        :param pulumi.Input[bool] scanning_enabled: whether scanning radio is enabled
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain24 is not None:
            pulumi.set(__self__, "ant_gain24", ant_gain24)
        if ant_gain5 is not None:
            pulumi.set(__self__, "ant_gain5", ant_gain5)
        if ant_gain6 is not None:
            pulumi.set(__self__, "ant_gain6", ant_gain6)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if band24 is not None:
            pulumi.set(__self__, "band24", band24)
        if band24_usage is not None:
            pulumi.set(__self__, "band24_usage", band24_usage)
        if band5 is not None:
            pulumi.set(__self__, "band5", band5)
        if band5_on24_radio is not None:
            pulumi.set(__self__, "band5_on24_radio", band5_on24_radio)
        if band6 is not None:
            pulumi.set(__self__, "band6", band6)
        if indoor_use is not None:
            pulumi.set(__self__, "indoor_use", indoor_use)
        if scanning_enabled is not None:
            pulumi.set(__self__, "scanning_enabled", scanning_enabled)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain24")
    def ant_gain24(self) -> Optional[pulumi.Input[int]]:
        """
        antenna gain for 2.4G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain24")

    @ant_gain24.setter
    def ant_gain24(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain24", value)

    @property
    @pulumi.getter(name="antGain5")
    def ant_gain5(self) -> Optional[pulumi.Input[int]]:
        """
        antenna gain for 5G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain5")

    @ant_gain5.setter
    def ant_gain5(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain5", value)

    @property
    @pulumi.getter(name="antGain6")
    def ant_gain6(self) -> Optional[pulumi.Input[int]]:
        """
        antenna gain for 6G - for models with external antenna only
        """
        return pulumi.get(self, "ant_gain6")

    @ant_gain6.setter
    def ant_gain6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain6", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def band24(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigBand24Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band24")

    @band24.setter
    def band24(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigBand24Args']]):
        pulumi.set(self, "band24", value)

    @property
    @pulumi.getter(name="band24Usage")
    def band24_usage(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `24`, `5`, `6`, `auto`
        """
        return pulumi.get(self, "band24_usage")

    @band24_usage.setter
    def band24_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band24_usage", value)

    @property
    @pulumi.getter
    def band5(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigBand5Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5")

    @band5.setter
    def band5(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigBand5Args']]):
        pulumi.set(self, "band5", value)

    @property
    @pulumi.getter(name="band5On24Radio")
    def band5_on24_radio(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigBand5On24RadioArgs']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5_on24_radio")

    @band5_on24_radio.setter
    def band5_on24_radio(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigBand5On24RadioArgs']]):
        pulumi.set(self, "band5_on24_radio", value)

    @property
    @pulumi.getter
    def band6(self) -> Optional[pulumi.Input['DeviceprofileApRadioConfigBand6Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band6")

    @band6.setter
    def band6(self, value: Optional[pulumi.Input['DeviceprofileApRadioConfigBand6Args']]):
        pulumi.set(self, "band6", value)

    @property
    @pulumi.getter(name="indoorUse")
    def indoor_use(self) -> Optional[pulumi.Input[bool]]:
        """
        to make an outdoor operate indoor.
        for an outdoor-ap, some channels are disallowed by default, this allows the user to use it as an indoor-ap
        """
        return pulumi.get(self, "indoor_use")

    @indoor_use.setter
    def indoor_use(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "indoor_use", value)

    @property
    @pulumi.getter(name="scanningEnabled")
    def scanning_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether scanning radio is enabled
        """
        return pulumi.get(self, "scanning_enabled")

    @scanning_enabled.setter
    def scanning_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scanning_enabled", value)


@pulumi.input_type
class DeviceprofileApRadioConfigBand24Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param pulumi.Input[int] channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class DeviceprofileApRadioConfigBand5Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[int] channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class DeviceprofileApRadioConfigBand5On24RadioArgs:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[int] channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class DeviceprofileApRadioConfigBand6Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None,
                 standard_power: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param pulumi.Input[int] channel: For Device. (primary) channel for the band, 0 means using the Site Setting
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        :param pulumi.Input[bool] standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        For Device. (primary) channel for the band, 0 means using the Site Setting
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[pulumi.Input[bool]]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")

    @standard_power.setter
    def standard_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_power", value)


@pulumi.input_type
class DeviceprofileApUplinkPortConfigArgs:
    def __init__(__self__, *,
                 dot1x: Optional[pulumi.Input[bool]] = None,
                 keep_wlans_up_if_down: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] dot1x: Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        :param pulumi.Input[bool] keep_wlans_up_if_down: by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        if dot1x is not None:
            pulumi.set(__self__, "dot1x", dot1x)
        if keep_wlans_up_if_down is not None:
            pulumi.set(__self__, "keep_wlans_up_if_down", keep_wlans_up_if_down)

    @property
    @pulumi.getter
    def dot1x(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        return pulumi.get(self, "dot1x")

    @dot1x.setter
    def dot1x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dot1x", value)

    @property
    @pulumi.getter(name="keepWlansUpIfDown")
    def keep_wlans_up_if_down(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        return pulumi.get(self, "keep_wlans_up_if_down")

    @keep_wlans_up_if_down.setter
    def keep_wlans_up_if_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_wlans_up_if_down", value)


@pulumi.input_type
class DeviceprofileApUsbConfigArgs:
    def __init__(__self__, *,
                 cacert: Optional[pulumi.Input[str]] = None,
                 channel: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] cacert: only if `type`==`imagotag`
        :param pulumi.Input[int] channel: only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        :param pulumi.Input[bool] enabled: whether to enable any usb config
        :param pulumi.Input[str] host: only if `type`==`imagotag`
        :param pulumi.Input[int] port: only if `type`==`imagotag`
        :param pulumi.Input[str] type: usb config type. enum: `hanshow`, `imagotag`, `solum`
        :param pulumi.Input[bool] verify_cert: only if `type`==`imagotag`, whether to turn on SSL verification
        :param pulumi.Input[int] vlan_id: only if `type`==`solum` or `type`==`hanshow`
        """
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[int]]:
        """
        only if `type`==`imagotag`, channel selection, not needed by default, required for manual channel override only
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable any usb config
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        only if `type`==`imagotag`
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        usb config type. enum: `hanshow`, `imagotag`, `solum`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `type`==`imagotag`, whether to turn on SSL verification
        """
        return pulumi.get(self, "verify_cert")

    @verify_cert.setter
    def verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_cert", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        only if `type`==`solum` or `type`==`hanshow`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class DeviceprofileGatewayBgpConfigArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 bfd_minimum_interval: Optional[pulumi.Input[int]] = None,
                 bfd_multiplier: Optional[pulumi.Input[int]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayBgpConfigCommunityArgs']]]] = None,
                 disable_bfd: Optional[pulumi.Input[bool]] = None,
                 export: Optional[pulumi.Input[str]] = None,
                 export_policy: Optional[pulumi.Input[str]] = None,
                 extended_v4_nexthop: Optional[pulumi.Input[bool]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 hold_time: Optional[pulumi.Input[int]] = None,
                 import_: Optional[pulumi.Input[str]] = None,
                 import_policy: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 neighbor_as: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigNeighborsArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 tunnel_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 via: Optional[pulumi.Input[str]] = None,
                 vpn_name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] bfd_minimum_interval: when bfd_multiplier is configured alone. Default:
                 * 1000 if `type`==`external`
                 * 350 `type`==`internal`
        :param pulumi.Input[int] bfd_multiplier: when bfd_minimum_interval_is_configured alone
        :param pulumi.Input[bool] disable_bfd: BFD provides faster path failure detection and is enabled by default
        :param pulumi.Input[str] export_policy: default export policies if no per-neighbor policies defined
        :param pulumi.Input[bool] extended_v4_nexthop: by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
               for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        :param pulumi.Input[int] graceful_restart_time: `0` means disable
        :param pulumi.Input[str] import_policy: default import policies if no per-neighbor policies defined
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigNeighborsArgs']]] neighbors: if per-neighbor as is desired. Property key is the neighbor address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        :param pulumi.Input[bool] no_readvertise_to_overlay: by default, we'll re-advertise all learned BGP routers toward overlay
        :param pulumi.Input[str] tunnel_name: if `type`==`tunnel`
        :param pulumi.Input[str] type: enum: `external`, `internal`
        :param pulumi.Input[str] via: network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        :param pulumi.Input[str] wan_name: if `via`==`wan`
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if disable_bfd is not None:
            pulumi.set(__self__, "disable_bfd", disable_bfd)
        if export is not None:
            pulumi.set(__self__, "export", export)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if extended_v4_nexthop is not None:
            pulumi.set(__self__, "extended_v4_nexthop", extended_v4_nexthop)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if via is not None:
            pulumi.set(__self__, "via", via)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[pulumi.Input[int]]:
        """
        when bfd_multiplier is configured alone. Default:
          * 1000 if `type`==`external`
          * 350 `type`==`internal`
        """
        return pulumi.get(self, "bfd_minimum_interval")

    @bfd_minimum_interval.setter
    def bfd_minimum_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_minimum_interval", value)

    @property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        when bfd_minimum_interval_is_configured alone
        """
        return pulumi.get(self, "bfd_multiplier")

    @bfd_multiplier.setter
    def bfd_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_multiplier", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayBgpConfigCommunityArgs']]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayBgpConfigCommunityArgs']]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter(name="disableBfd")
    def disable_bfd(self) -> Optional[pulumi.Input[bool]]:
        """
        BFD provides faster path failure detection and is enabled by default
        """
        return pulumi.get(self, "disable_bfd")

    @disable_bfd.setter
    def disable_bfd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_bfd", value)

    @property
    @pulumi.getter
    def export(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export")

    @export.setter
    def export(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export", value)

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[pulumi.Input[str]]:
        """
        default export policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "export_policy")

    @export_policy.setter
    def export_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_policy", value)

    @property
    @pulumi.getter(name="extendedV4Nexthop")
    def extended_v4_nexthop(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
        for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        """
        return pulumi.get(self, "extended_v4_nexthop")

    @extended_v4_nexthop.setter
    def extended_v4_nexthop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extended_v4_nexthop", value)

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        `0` means disable
        """
        return pulumi.get(self, "graceful_restart_time")

    @graceful_restart_time.setter
    def graceful_restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_restart_time", value)

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_time", value)

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_", value)

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[pulumi.Input[str]]:
        """
        default import policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "import_policy")

    @import_policy.setter
    def import_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_as")

    @neighbor_as.setter
    def neighbor_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_as", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigNeighborsArgs']]]]:
        """
        if per-neighbor as is desired. Property key is the neighbor address
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayBgpConfigNeighborsArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, we'll re-advertise all learned BGP routers toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`tunnel`
        """
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `external`, `internal`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def via(self) -> Optional[pulumi.Input[str]]:
        """
        network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_name")

    @vpn_name.setter
    def vpn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        if `via`==`wan`
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class DeviceprofileGatewayBgpConfigCommunityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 local_preference: Optional[pulumi.Input[int]] = None,
                 vpn_name: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_preference", value)

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_name")

    @vpn_name.setter
    def vpn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_name", value)


@pulumi.input_type
class DeviceprofileGatewayBgpConfigNeighborsArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 export_policy: Optional[pulumi.Input[str]] = None,
                 hold_time: Optional[pulumi.Input[int]] = None,
                 import_policy: Optional[pulumi.Input[str]] = None,
                 multihop_ttl: Optional[pulumi.Input[int]] = None,
                 neighbor_as: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] disabled: If true, the BGP session to this neighbor will be administratively disabled/shutdown
        :param pulumi.Input[int] multihop_ttl: assuming BGP neighbor is directly connected
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if multihop_ttl is not None:
            pulumi.set(__self__, "multihop_ttl", multihop_ttl)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the BGP session to this neighbor will be administratively disabled/shutdown
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_policy")

    @export_policy.setter
    def export_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_policy", value)

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_time", value)

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_policy")

    @import_policy.setter
    def import_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy", value)

    @property
    @pulumi.getter(name="multihopTtl")
    def multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        assuming BGP neighbor is directly connected
        """
        return pulumi.get(self, "multihop_ttl")

    @multihop_ttl.setter
    def multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multihop_ttl", value)

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_as")

    @neighbor_as.setter
    def neighbor_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_as", value)


@pulumi.input_type
class DeviceprofileGatewayDhcpdConfigArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigArgs']]] config: Property key is the network name
        :param pulumi.Input[bool] enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigArgs']]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayDhcpdConfigConfigArgs:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixed_bindings: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs']]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip_end: Optional[pulumi.Input[str]] = None,
                 ip_end6: Optional[pulumi.Input[str]] = None,
                 ip_start: Optional[pulumi.Input[str]] = None,
                 ip_start6: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigOptionsArgs']]]] = None,
                 server_id_override: Optional[pulumi.Input[bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 servers6s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type6: Optional[pulumi.Input[str]] = None,
                 vendor_encapulated: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs']]] fixed_bindings: Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        :param pulumi.Input[str] gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param pulumi.Input[str] ip_end: if `type`==`local`
        :param pulumi.Input[str] ip_end6: if `type6`==`local`
        :param pulumi.Input[str] ip_start: if `type`==`local`
        :param pulumi.Input[str] ip_start6: if `type6`==`local`
        :param pulumi.Input[int] lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigOptionsArgs']]] options: Property key is the DHCP option number
        :param pulumi.Input[bool] server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers: if `type`==`relay`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers6s: if `type6`==`relay`
        :param pulumi.Input[str] type: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param pulumi.Input[str] type6: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs']]] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs']]]]:
        """
        Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        return pulumi.get(self, "fixed_bindings")

    @fixed_bindings.setter
    def fixed_bindings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs']]]]):
        pulumi.set(self, "fixed_bindings", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @ip_end.setter
    def ip_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_end", value)

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[pulumi.Input[str]]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @ip_end6.setter
    def ip_end6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_end6", value)

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @ip_start.setter
    def ip_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_start", value)

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[pulumi.Input[str]]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @ip_start6.setter
    def ip_start6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_start6", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigOptionsArgs']]]]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigOptionsArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[pulumi.Input[bool]]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @server_id_override.setter
    def server_id_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_id_override", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @servers6s.setter
    def servers6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers6s", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def type6(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type6")

    @type6.setter
    def type6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type6", value)

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs']]]]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")

    @vendor_encapulated.setter
    def vendor_encapulated(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs']]]]):
        pulumi.set(self, "vendor_encapulated", value)


@pulumi.input_type
class DeviceprofileGatewayDhcpdConfigConfigFixedBindingsArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeviceprofileGatewayDhcpdConfigConfigOptionsArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeviceprofileGatewayDhcpdConfigConfigVendorEncapulatedArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeviceprofileGatewayExtraRoutes6Args:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class DeviceprofileGatewayExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class DeviceprofileGatewayIdpProfilesArgs:
    def __init__(__self__, *,
                 base_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 overwrites: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteArgs']]]] = None):
        """
        :param pulumi.Input[str] base_profile: enum: `critical`, `standard`, `strict`
        """
        if base_profile is not None:
            pulumi.set(__self__, "base_profile", base_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if overwrites is not None:
            pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @base_profile.setter
    def base_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def overwrites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteArgs']]]]:
        return pulumi.get(self, "overwrites")

    @overwrites.setter
    def overwrites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteArgs']]]]):
        pulumi.set(self, "overwrites", value)


@pulumi.input_type
class DeviceprofileGatewayIdpProfilesOverwriteArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 matching: Optional[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def matching(self) -> Optional[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs']]:
        return pulumi.get(self, "matching")

    @matching.setter
    def matching(self, value: Optional[pulumi.Input['DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs']]):
        pulumi.set(self, "matching", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DeviceprofileGatewayIdpProfilesOverwriteMatchingArgs:
    def __init__(__self__, *,
                 attack_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dst_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attack_names")

    @attack_names.setter
    def attack_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attack_names", value)

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dst_subnets")

    @dst_subnets.setter
    def dst_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dst_subnets", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severities", value)


@pulumi.input_type
class DeviceprofileGatewayIpConfigsArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 secondary_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secondary_ips: optional list of secondary IPs in CIDR format
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask", netmask)
        if secondary_ips is not None:
            pulumi.set(__self__, "secondary_ips", secondary_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="secondaryIps")
    def secondary_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional list of secondary IPs in CIDR format
        """
        return pulumi.get(self, "secondary_ips")

    @secondary_ips.setter
    def secondary_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secondary_ips", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 disallow_mist_services: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 internal_access: Optional[pulumi.Input['DeviceprofileGatewayNetworkInternalAccessArgs']] = None,
                 internet_access: Optional[pulumi.Input['DeviceprofileGatewayNetworkInternetAccessArgs']] = None,
                 isolation: Optional[pulumi.Input[bool]] = None,
                 routed_for_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet6: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkTenantsArgs']]]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None,
                 vpn_access: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessArgs']]]] = None):
        """
        :param pulumi.Input[bool] disallow_mist_services: whether to disallow Mist Devices in the network
        :param pulumi.Input['DeviceprofileGatewayNetworkInternetAccessArgs'] internet_access: whether this network has direct internet access
        :param pulumi.Input[bool] isolation: whether to allow clients in the network to talk to each other
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routed_for_networks: for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessArgs']]] vpn_access: Property key is the VPN name. Whether this network can be accessed from vpn
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        if disallow_mist_services is not None:
            pulumi.set(__self__, "disallow_mist_services", disallow_mist_services)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if internal_access is not None:
            pulumi.set(__self__, "internal_access", internal_access)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if routed_for_networks is not None:
            pulumi.set(__self__, "routed_for_networks", routed_for_networks)
        if subnet6 is not None:
            pulumi.set(__self__, "subnet6", subnet6)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_access is not None:
            pulumi.set(__self__, "vpn_access", vpn_access)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="disallowMistServices")
    def disallow_mist_services(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disallow Mist Devices in the network
        """
        return pulumi.get(self, "disallow_mist_services")

    @disallow_mist_services.setter
    def disallow_mist_services(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_mist_services", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="internalAccess")
    def internal_access(self) -> Optional[pulumi.Input['DeviceprofileGatewayNetworkInternalAccessArgs']]:
        return pulumi.get(self, "internal_access")

    @internal_access.setter
    def internal_access(self, value: Optional[pulumi.Input['DeviceprofileGatewayNetworkInternalAccessArgs']]):
        pulumi.set(self, "internal_access", value)

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[pulumi.Input['DeviceprofileGatewayNetworkInternetAccessArgs']]:
        """
        whether this network has direct internet access
        """
        return pulumi.get(self, "internet_access")

    @internet_access.setter
    def internet_access(self, value: Optional[pulumi.Input['DeviceprofileGatewayNetworkInternetAccessArgs']]):
        pulumi.set(self, "internet_access", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow clients in the network to talk to each other
        """
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="routedForNetworks")
    def routed_for_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        """
        return pulumi.get(self, "routed_for_networks")

    @routed_for_networks.setter
    def routed_for_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routed_for_networks", value)

    @property
    @pulumi.getter
    def subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet6")

    @subnet6.setter
    def subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet6", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkTenantsArgs']]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkTenantsArgs']]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessArgs']]]]:
        """
        Property key is the VPN name. Whether this network can be accessed from vpn
        """
        return pulumi.get(self, "vpn_access")

    @vpn_access.setter
    def vpn_access(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessArgs']]]]):
        pulumi.set(self, "vpn_access", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkInternalAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkInternetAccessArgs:
    def __init__(__self__, *,
                 create_simple_service_policy: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessStaticNatArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[bool] restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_simple_service_policy")

    @create_simple_service_policy.setter
    def create_simple_service_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_simple_service_policy", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkInternetAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkInternetAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkInternetAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkTenantsArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkVpnAccessArgs:
    def __init__(__self__, *,
                 advertised_subnet: Optional[pulumi.Input[str]] = None,
                 allow_ping: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs']]]] = None,
                 nat_pool: Optional[pulumi.Input[str]] = None,
                 no_readvertise_to_lan_bgp: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_lan_ospf: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 other_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 routed: Optional[pulumi.Input[bool]] = None,
                 source_nat: Optional[pulumi.Input['DeviceprofileGatewayNetworkVpnAccessSourceNatArgs']] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessStaticNatArgs']]]] = None,
                 summarized_subnet: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_bgp: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_ospf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param pulumi.Input[bool] allow_ping: whether to allow ping from vpn into this routed network
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[str] nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param pulumi.Input[bool] no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[bool] no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param pulumi.Input[bool] no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param pulumi.Input[bool] routed: whether this network is routable
        :param pulumi.Input['DeviceprofileGatewayNetworkVpnAccessSourceNatArgs'] source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param pulumi.Input[str] summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[str] summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[str] summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @advertised_subnet.setter
    def advertised_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertised_subnet", value)

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @allow_ping.setter
    def allow_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ping", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_pool", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @no_readvertise_to_lan_bgp.setter
    def no_readvertise_to_lan_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_bgp", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @no_readvertise_to_lan_ospf.setter
    def no_readvertise_to_lan_ospf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_ospf", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @other_vrfs.setter
    def other_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "other_vrfs", value)

    @property
    @pulumi.getter
    def routed(self) -> Optional[pulumi.Input[bool]]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @routed.setter
    def routed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "routed", value)

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional[pulumi.Input['DeviceprofileGatewayNetworkVpnAccessSourceNatArgs']]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @source_nat.setter
    def source_nat(self, value: Optional[pulumi.Input['DeviceprofileGatewayNetworkVpnAccessSourceNatArgs']]):
        pulumi.set(self, "source_nat", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayNetworkVpnAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @summarized_subnet.setter
    def summarized_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @summarized_subnet_to_lan_bgp.setter
    def summarized_subnet_to_lan_bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_bgp", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")

    @summarized_subnet_to_lan_ospf.setter
    def summarized_subnet_to_lan_ospf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_ospf", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkVpnAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkVpnAccessSourceNatArgs:
    def __init__(__self__, *,
                 external_ip: Optional[pulumi.Input[str]] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)


@pulumi.input_type
class DeviceprofileGatewayNetworkVpnAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class DeviceprofileGatewayOobIpConfigArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 node1: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigNode1Args']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gateway: if `type`==`static`
        :param pulumi.Input[str] ip: if `type`==`static`
        :param pulumi.Input[str] netmask: if `type`==`static`
        :param pulumi.Input['DeviceprofileGatewayOobIpConfigNode1Args'] node1: for HA Cluster, node1 can have different IP Config
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if node1 is not None:
            pulumi.set(__self__, "node1", node1)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def node1(self) -> Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigNode1Args']]:
        """
        for HA Cluster, node1 can have different IP Config
        """
        return pulumi.get(self, "node1")

    @node1.setter
    def node1(self, value: Optional[pulumi.Input['DeviceprofileGatewayOobIpConfigNode1Args']]):
        pulumi.set(self, "node1", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class DeviceprofileGatewayOobIpConfigNode1Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gateway: if `type`==`static`
        :param pulumi.Input[str] netmask: used only if `subnet` is not specified in `networks`
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class DeviceprofileGatewayPathPreferencesArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayPathPreferencesPathArgs']]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] strategy: enum: `ecmp`, `ordered`, `weighted`
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayPathPreferencesPathArgs']]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayPathPreferencesPathArgs']]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ecmp`, `ordered`, `weighted`
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class DeviceprofileGatewayPathPreferencesPathArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 internet_access: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disabled: For SSR Only. `true`, if this specific path is undesired
        :param pulumi.Input[str] gateway_ip: only if `type`==`local`, if a different gateway is desired
        :param pulumi.Input[bool] internet_access: only if `type`==`vpn`, if this vpn path can be used for internet
        :param pulumi.Input[str] name: required when 
                 * `type`==`vpn`: the name of the VPN Path to use 
                 * `type`==`wan`: the name of the WAN interface to use'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: required when `type`==`local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_ips: if `type`==`local`, if destination IP is to be replaced
        :param pulumi.Input[str] type: enum: `local`, `tunnel`, `vpn`, `wan`
        :param pulumi.Input[str] wan_name: optional if `type`==`vpn`
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if target_ips is not None:
            pulumi.set(__self__, "target_ips", target_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        For SSR Only. `true`, if this specific path is undesired
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`==`local`, if a different gateway is desired
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `type`==`vpn`, if this vpn path can be used for internet
        """
        return pulumi.get(self, "internet_access")

    @internet_access.setter
    def internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internet_access", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        required when 
          * `type`==`vpn`: the name of the VPN Path to use 
          * `type`==`wan`: the name of the WAN interface to use'
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required when `type`==`local`
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="targetIps")
    def target_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local`, if destination IP is to be replaced
        """
        return pulumi.get(self, "target_ips")

    @target_ips.setter
    def target_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_ips", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        optional if `type`==`vpn`
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigArgs:
    def __init__(__self__, *,
                 usage: pulumi.Input[str],
                 ae_disable_lacp: Optional[pulumi.Input[bool]] = None,
                 ae_idx: Optional[pulumi.Input[str]] = None,
                 ae_lacp_force_up: Optional[pulumi.Input[bool]] = None,
                 aggregated: Optional[pulumi.Input[bool]] = None,
                 critical: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dsl_type: Optional[pulumi.Input[str]] = None,
                 dsl_vci: Optional[pulumi.Input[int]] = None,
                 dsl_vpi: Optional[pulumi.Input[int]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 ip_config: Optional[pulumi.Input['DeviceprofileGatewayPortConfigIpConfigArgs']] = None,
                 lte_apn: Optional[pulumi.Input[str]] = None,
                 lte_auth: Optional[pulumi.Input[str]] = None,
                 lte_backup: Optional[pulumi.Input[bool]] = None,
                 lte_password: Optional[pulumi.Input[str]] = None,
                 lte_username: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outer_vlan_id: Optional[pulumi.Input[int]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 port_network: Optional[pulumi.Input[str]] = None,
                 preserve_dscp: Optional[pulumi.Input[bool]] = None,
                 redundant: Optional[pulumi.Input[bool]] = None,
                 reth_idx: Optional[pulumi.Input[int]] = None,
                 reth_node: Optional[pulumi.Input[str]] = None,
                 reth_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 ssr_no_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 svr_port_range: Optional[pulumi.Input[str]] = None,
                 traffic_shaping: Optional[pulumi.Input['DeviceprofileGatewayPortConfigTrafficShapingArgs']] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vpn_paths: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsArgs']]]] = None,
                 wan_arp_policer: Optional[pulumi.Input[str]] = None,
                 wan_ext_ip: Optional[pulumi.Input[str]] = None,
                 wan_source_nat: Optional[pulumi.Input['DeviceprofileGatewayPortConfigWanSourceNatArgs']] = None,
                 wan_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] usage: port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        :param pulumi.Input[bool] ae_disable_lacp: if `aggregated`==`true`. To disable LCP support for the AE interface
        :param pulumi.Input[str] ae_idx: if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        :param pulumi.Input[bool] ae_lacp_force_up: For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
               Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
               Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        :param pulumi.Input[bool] critical: if want to generate port up/down alarm, set it to true
        :param pulumi.Input[bool] disabled: port admin up (true) / down (false)
        :param pulumi.Input[str] dsl_type: if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        :param pulumi.Input[int] dsl_vci: if `wan_type`==`dsl`
               16 bit int
        :param pulumi.Input[int] dsl_vpi: if `wan_type`==`dsl`
               8 bit int
        :param pulumi.Input[str] duplex: enum: `auto`, `full`, `half`
        :param pulumi.Input['DeviceprofileGatewayPortConfigIpConfigArgs'] ip_config: Junos IP Config
        :param pulumi.Input[str] lte_apn: if `wan_type`==`lte`
        :param pulumi.Input[str] lte_auth: if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        :param pulumi.Input[str] lte_password: if `wan_type`==`lte`
        :param pulumi.Input[str] lte_username: if `wan_type`==`lte`
        :param pulumi.Input[str] name: name that we'll use to derive config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `usage`==`lan`
        :param pulumi.Input[int] outer_vlan_id: for Q-in-Q
        :param pulumi.Input[str] port_network: if `usage`==`lan`
        :param pulumi.Input[bool] preserve_dscp: whether to preserve dscp when sending traffic over VPN (SSR-only)
        :param pulumi.Input[bool] redundant: if HA mode
        :param pulumi.Input[int] reth_idx: if HA mode
        :param pulumi.Input[str] reth_node: if HA mode
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reth_nodes: SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        :param pulumi.Input[bool] ssr_no_virtual_mac: when SSR is running as VM, this is required on certain hosting platforms
        :param pulumi.Input[str] svr_port_range: for SSR only
        :param pulumi.Input[int] vlan_id: if WAN interface is on a VLAN
        :param pulumi.Input[str] wan_arp_policer: when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        :param pulumi.Input[str] wan_ext_ip: optional, if spoke should reach this port by a different IP
        :param pulumi.Input['DeviceprofileGatewayPortConfigWanSourceNatArgs'] wan_source_nat: optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        :param pulumi.Input[str] wan_type: if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_force_up is not None:
            pulumi.set(__self__, "ae_lacp_force_up", ae_lacp_force_up)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if dsl_vci is not None:
            pulumi.set(__self__, "dsl_vci", dsl_vci)
        if dsl_vpi is not None:
            pulumi.set(__self__, "dsl_vpi", dsl_vpi)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth is not None:
            pulumi.set(__self__, "lte_auth", lte_auth)
        if lte_backup is not None:
            pulumi.set(__self__, "lte_backup", lte_backup)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if outer_vlan_id is not None:
            pulumi.set(__self__, "outer_vlan_id", outer_vlan_id)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if preserve_dscp is not None:
            pulumi.set(__self__, "preserve_dscp", preserve_dscp)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if reth_idx is not None:
            pulumi.set(__self__, "reth_idx", reth_idx)
        if reth_node is not None:
            pulumi.set(__self__, "reth_node", reth_node)
        if reth_nodes is not None:
            pulumi.set(__self__, "reth_nodes", reth_nodes)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if ssr_no_virtual_mac is not None:
            pulumi.set(__self__, "ssr_no_virtual_mac", ssr_no_virtual_mac)
        if svr_port_range is not None:
            pulumi.set(__self__, "svr_port_range", svr_port_range)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)
        if wan_arp_policer is not None:
            pulumi.set(__self__, "wan_arp_policer", wan_arp_policer)
        if wan_ext_ip is not None:
            pulumi.set(__self__, "wan_ext_ip", wan_ext_ip)
        if wan_source_nat is not None:
            pulumi.set(__self__, "wan_source_nat", wan_source_nat)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[str]:
        """
        port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[pulumi.Input[bool]]:
        """
        if `aggregated`==`true`. To disable LCP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @ae_disable_lacp.setter
    def ae_disable_lacp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_disable_lacp", value)

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[pulumi.Input[str]]:
        """
        if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        """
        return pulumi.get(self, "ae_idx")

    @ae_idx.setter
    def ae_idx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ae_idx", value)

    @property
    @pulumi.getter(name="aeLacpForceUp")
    def ae_lacp_force_up(self) -> Optional[pulumi.Input[bool]]:
        """
        For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
        Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
        Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        """
        return pulumi.get(self, "ae_lacp_force_up")

    @ae_lacp_force_up.setter
    def ae_lacp_force_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_lacp_force_up", value)

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aggregated")

    @aggregated.setter
    def aggregated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aggregated", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if want to generate port up/down alarm, set it to true
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        port admin up (true) / down (false)
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        """
        return pulumi.get(self, "dsl_type")

    @dsl_type.setter
    def dsl_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsl_type", value)

    @property
    @pulumi.getter(name="dslVci")
    def dsl_vci(self) -> Optional[pulumi.Input[int]]:
        """
        if `wan_type`==`dsl`
        16 bit int
        """
        return pulumi.get(self, "dsl_vci")

    @dsl_vci.setter
    def dsl_vci(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsl_vci", value)

    @property
    @pulumi.getter(name="dslVpi")
    def dsl_vpi(self) -> Optional[pulumi.Input[int]]:
        """
        if `wan_type`==`dsl`
        8 bit int
        """
        return pulumi.get(self, "dsl_vpi")

    @dsl_vpi.setter
    def dsl_vpi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsl_vpi", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['DeviceprofileGatewayPortConfigIpConfigArgs']]:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['DeviceprofileGatewayPortConfigIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_apn")

    @lte_apn.setter
    def lte_apn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_apn", value)

    @property
    @pulumi.getter(name="lteAuth")
    def lte_auth(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "lte_auth")

    @lte_auth.setter
    def lte_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_auth", value)

    @property
    @pulumi.getter(name="lteBackup")
    def lte_backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lte_backup")

    @lte_backup.setter
    def lte_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lte_backup", value)

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_password")

    @lte_password.setter
    def lte_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_password", value)

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_username")

    @lte_username.setter
    def lte_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_username", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name that we'll use to derive config
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="outerVlanId")
    def outer_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        for Q-in-Q
        """
        return pulumi.get(self, "outer_vlan_id")

    @outer_vlan_id.setter
    def outer_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_vlan_id", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[pulumi.Input[str]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "port_network")

    @port_network.setter
    def port_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_network", value)

    @property
    @pulumi.getter(name="preserveDscp")
    def preserve_dscp(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to preserve dscp when sending traffic over VPN (SSR-only)
        """
        return pulumi.get(self, "preserve_dscp")

    @preserve_dscp.setter
    def preserve_dscp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_dscp", value)

    @property
    @pulumi.getter
    def redundant(self) -> Optional[pulumi.Input[bool]]:
        """
        if HA mode
        """
        return pulumi.get(self, "redundant")

    @redundant.setter
    def redundant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant", value)

    @property
    @pulumi.getter(name="rethIdx")
    def reth_idx(self) -> Optional[pulumi.Input[int]]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_idx")

    @reth_idx.setter
    def reth_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reth_idx", value)

    @property
    @pulumi.getter(name="rethNode")
    def reth_node(self) -> Optional[pulumi.Input[str]]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_node")

    @reth_node.setter
    def reth_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reth_node", value)

    @property
    @pulumi.getter(name="rethNodes")
    def reth_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        """
        return pulumi.get(self, "reth_nodes")

    @reth_nodes.setter
    def reth_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reth_nodes", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="ssrNoVirtualMac")
    def ssr_no_virtual_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        when SSR is running as VM, this is required on certain hosting platforms
        """
        return pulumi.get(self, "ssr_no_virtual_mac")

    @ssr_no_virtual_mac.setter
    def ssr_no_virtual_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssr_no_virtual_mac", value)

    @property
    @pulumi.getter(name="svrPortRange")
    def svr_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        for SSR only
        """
        return pulumi.get(self, "svr_port_range")

    @svr_port_range.setter
    def svr_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svr_port_range", value)

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional[pulumi.Input['DeviceprofileGatewayPortConfigTrafficShapingArgs']]:
        return pulumi.get(self, "traffic_shaping")

    @traffic_shaping.setter
    def traffic_shaping(self, value: Optional[pulumi.Input['DeviceprofileGatewayPortConfigTrafficShapingArgs']]):
        pulumi.set(self, "traffic_shaping", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        if WAN interface is on a VLAN
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsArgs']]]]:
        return pulumi.get(self, "vpn_paths")

    @vpn_paths.setter
    def vpn_paths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsArgs']]]]):
        pulumi.set(self, "vpn_paths", value)

    @property
    @pulumi.getter(name="wanArpPolicer")
    def wan_arp_policer(self) -> Optional[pulumi.Input[str]]:
        """
        when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        """
        return pulumi.get(self, "wan_arp_policer")

    @wan_arp_policer.setter
    def wan_arp_policer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_arp_policer", value)

    @property
    @pulumi.getter(name="wanExtIp")
    def wan_ext_ip(self) -> Optional[pulumi.Input[str]]:
        """
        optional, if spoke should reach this port by a different IP
        """
        return pulumi.get(self, "wan_ext_ip")

    @wan_ext_ip.setter
    def wan_ext_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_ext_ip", value)

    @property
    @pulumi.getter(name="wanSourceNat")
    def wan_source_nat(self) -> Optional[pulumi.Input['DeviceprofileGatewayPortConfigWanSourceNatArgs']]:
        """
        optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        """
        return pulumi.get(self, "wan_source_nat")

    @wan_source_nat.setter
    def wan_source_nat(self, value: Optional[pulumi.Input['DeviceprofileGatewayPortConfigWanSourceNatArgs']]):
        pulumi.set(self, "wan_source_nat", value)

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        return pulumi.get(self, "wan_type")

    @wan_type.setter
    def wan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_type", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigIpConfigArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 poser_password: Optional[pulumi.Input[str]] = None,
                 pppoe_auth: Optional[pulumi.Input[str]] = None,
                 pppoe_username: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[str] gateway: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[str] netmask: used only if `subnet` is not specified in `networks`
        :param pulumi.Input[str] network: optional, the network to be used for mgmt
        :param pulumi.Input[str] poser_password: if `type`==`pppoe`
        :param pulumi.Input[str] pppoe_auth: if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        :param pulumi.Input[str] pppoe_username: if `type`==`pppoe`
        :param pulumi.Input[str] type: enum: `dhcp`, `pppoe`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if poser_password is not None:
            pulumi.set(__self__, "poser_password", poser_password)
        if pppoe_auth is not None:
            pulumi.set(__self__, "pppoe_auth", pppoe_auth)
        if pppoe_username is not None:
            pulumi.set(__self__, "pppoe_username", pppoe_username)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="poserPassword")
    def poser_password(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "poser_password")

    @poser_password.setter
    def poser_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poser_password", value)

    @property
    @pulumi.getter(name="pppoeAuth")
    def pppoe_auth(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "pppoe_auth")

    @pppoe_auth.setter
    def pppoe_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_auth", value)

    @property
    @pulumi.getter(name="pppoeUsername")
    def pppoe_username(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "pppoe_username")

    @pppoe_username.setter
    def pppoe_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_username", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `pppoe`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigTrafficShapingArgs:
    def __init__(__self__, *,
                 class_percentages: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @class_percentages.setter
    def class_percentages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "class_percentages", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigVpnPathsArgs:
    def __init__(__self__, *,
                 bfd_profile: Optional[pulumi.Input[str]] = None,
                 bfd_use_tunnel_mode: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 traffic_shaping: Optional[pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs']] = None):
        """
        :param pulumi.Input[str] bfd_profile: enum: `broadband`, `lte`
        :param pulumi.Input[bool] bfd_use_tunnel_mode: whether to use tunnel mode. SSR only
        :param pulumi.Input[int] preference: for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        :param pulumi.Input[str] role: enum: `hub`, `spoke`
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if bfd_use_tunnel_mode is not None:
            pulumi.set(__self__, "bfd_use_tunnel_mode", bfd_use_tunnel_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @bfd_profile.setter
    def bfd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_profile", value)

    @property
    @pulumi.getter(name="bfdUseTunnelMode")
    def bfd_use_tunnel_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use tunnel mode. SSR only
        """
        return pulumi.get(self, "bfd_use_tunnel_mode")

    @bfd_use_tunnel_mode.setter
    def bfd_use_tunnel_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_use_tunnel_mode", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        """
        for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `hub`, `spoke`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional[pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs']]:
        return pulumi.get(self, "traffic_shaping")

    @traffic_shaping.setter
    def traffic_shaping(self, value: Optional[pulumi.Input['DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs']]):
        pulumi.set(self, "traffic_shaping", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigVpnPathsTrafficShapingArgs:
    def __init__(__self__, *,
                 class_percentages: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @class_percentages.setter
    def class_percentages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "class_percentages", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayPortConfigWanSourceNatArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 nat_pool: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disabled: or to disable the source-nat
        :param pulumi.Input[str] nat_pool: if alternative nat_pool is desired
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        or to disable the source-nat
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        if alternative nat_pool is desired
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_pool", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesArgs:
    def __init__(__self__, *,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermArgs']]] terms: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermArgs']]]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermArgs']]]]):
        pulumi.set(self, "terms", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesTermArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermActionArgs']] = None,
                 matching: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingArgs']] = None):
        """
        :param pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermActionArgs'] action: when used as import policy
        :param pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingArgs'] matching: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermActionArgs']]:
        """
        when used as import policy
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def matching(self) -> Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingArgs']]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "matching")

    @matching.setter
    def matching(self, value: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingArgs']]):
        pulumi.set(self, "matching", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesTermActionArgs:
    def __init__(__self__, *,
                 accept: Optional[pulumi.Input[bool]] = None,
                 add_communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 add_target_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 export_communitites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 local_preference: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_target_vrfs: for SSR, hub decides how VRF routes are leaked on spoke
        :param pulumi.Input[Sequence[pulumi.Input[str]]] communities: when used as export policy, optional
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_as_paths: when used as export policy, optional. To exclude certain AS
        :param pulumi.Input[Sequence[pulumi.Input[str]]] export_communitites: when used as export policy, optional
        :param pulumi.Input[str] local_preference: optional, for an import policy, local_preference can be changed
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if add_communities is not None:
            pulumi.set(__self__, "add_communities", add_communities)
        if add_target_vrfs is not None:
            pulumi.set(__self__, "add_target_vrfs", add_target_vrfs)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if exclude_as_paths is not None:
            pulumi.set(__self__, "exclude_as_paths", exclude_as_paths)
        if exclude_communities is not None:
            pulumi.set(__self__, "exclude_communities", exclude_communities)
        if export_communitites is not None:
            pulumi.set(__self__, "export_communitites", export_communitites)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)

    @property
    @pulumi.getter
    def accept(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept")

    @accept.setter
    def accept(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept", value)

    @property
    @pulumi.getter(name="addCommunities")
    def add_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "add_communities")

    @add_communities.setter
    def add_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_communities", value)

    @property
    @pulumi.getter(name="addTargetVrfs")
    def add_target_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        for SSR, hub decides how VRF routes are leaked on spoke
        """
        return pulumi.get(self, "add_target_vrfs")

    @add_target_vrfs.setter
    def add_target_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_target_vrfs", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter(name="excludeAsPaths")
    def exclude_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional. To exclude certain AS
        """
        return pulumi.get(self, "exclude_as_paths")

    @exclude_as_paths.setter
    def exclude_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_as_paths", value)

    @property
    @pulumi.getter(name="excludeCommunities")
    def exclude_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_communities")

    @exclude_communities.setter
    def exclude_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_communities", value)

    @property
    @pulumi.getter(name="exportCommunitites")
    def export_communitites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "export_communitites")

    @export_communitites.setter
    def export_communitites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "export_communitites", value)

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[str]]:
        """
        optional, for an import policy, local_preference can be changed
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_preference", value)

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        return pulumi.get(self, "prepend_as_paths")

    @prepend_as_paths.setter
    def prepend_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prepend_as_paths", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesTermMatchingArgs:
    def __init__(__self__, *,
                 as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_exists: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs']] = None,
                 vpn_neighbor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpn_path_sla: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs']] = None,
                 vpn_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] as_paths: takes regular expression
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prefixes: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: `direct`, `bgp`, `osp`, ...
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpn_neighbor_macs: overlay-facing criteria (used for bgp_config where via=vpn)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpn_paths: overlay-facing criteria (used for bgp_config where via=vpn)
               ordered-
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_exists is not None:
            pulumi.set(__self__, "route_exists", route_exists)
        if vpn_neighbor_macs is not None:
            pulumi.set(__self__, "vpn_neighbor_macs", vpn_neighbor_macs)
        if vpn_path_sla is not None:
            pulumi.set(__self__, "vpn_path_sla", vpn_path_sla)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        takes regular expression
        """
        return pulumi.get(self, "as_paths")

    @as_paths.setter
    def as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "as_paths", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prefixes", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        `direct`, `bgp`, `osp`, ...
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeExists")
    def route_exists(self) -> Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs']]:
        return pulumi.get(self, "route_exists")

    @route_exists.setter
    def route_exists(self, value: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs']]):
        pulumi.set(self, "route_exists", value)

    @property
    @pulumi.getter(name="vpnNeighborMacs")
    def vpn_neighbor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        """
        return pulumi.get(self, "vpn_neighbor_macs")

    @vpn_neighbor_macs.setter
    def vpn_neighbor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_neighbor_macs", value)

    @property
    @pulumi.getter(name="vpnPathSla")
    def vpn_path_sla(self) -> Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs']]:
        return pulumi.get(self, "vpn_path_sla")

    @vpn_path_sla.setter
    def vpn_path_sla(self, value: Optional[pulumi.Input['DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs']]):
        pulumi.set(self, "vpn_path_sla", value)

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        ordered-
        """
        return pulumi.get(self, "vpn_paths")

    @vpn_paths.setter
    def vpn_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_paths", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesTermMatchingRouteExistsArgs:
    def __init__(__self__, *,
                 route: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vrf_name: name of the vrf instance
               it can also be the name of the VPN or wan if they
        """
        if route is not None:
            pulumi.set(__self__, "route", route)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the vrf instance
        it can also be the name of the VPN or wan if they
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


@pulumi.input_type
class DeviceprofileGatewayRoutingPoliciesTermMatchingVpnPathSlaArgs:
    def __init__(__self__, *,
                 max_jitter: Optional[pulumi.Input[int]] = None,
                 max_latency: Optional[pulumi.Input[int]] = None,
                 max_loss: Optional[pulumi.Input[int]] = None):
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_jitter")

    @max_jitter.setter
    def max_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_jitter", value)

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_latency")

    @max_latency.setter
    def max_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_latency", value)

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_loss")

    @max_loss.setter
    def max_loss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_loss", value)


@pulumi.input_type
class DeviceprofileGatewayServicePolicyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 appqoe: Optional[pulumi.Input['DeviceprofileGatewayServicePolicyAppqoeArgs']] = None,
                 ewfs: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyEwfArgs']]]] = None,
                 idp: Optional[pulumi.Input['DeviceprofileGatewayServicePolicyIdpArgs']] = None,
                 local_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_preference: Optional[pulumi.Input[str]] = None,
                 servicepolicy_id: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] action: enum: `allow`, `deny`
        :param pulumi.Input['DeviceprofileGatewayServicePolicyAppqoeArgs'] appqoe: For SRX Only
        :param pulumi.Input[bool] local_routing: access within the same VRF
        :param pulumi.Input[str] path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        :param pulumi.Input[str] servicepolicy_id: used to link servicepolicy defined at org level and overwrite some attributes
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if appqoe is not None:
            pulumi.set(__self__, "appqoe", appqoe)
        if ewfs is not None:
            pulumi.set(__self__, "ewfs", ewfs)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if local_routing is not None:
            pulumi.set(__self__, "local_routing", local_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_preference is not None:
            pulumi.set(__self__, "path_preference", path_preference)
        if servicepolicy_id is not None:
            pulumi.set(__self__, "servicepolicy_id", servicepolicy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def appqoe(self) -> Optional[pulumi.Input['DeviceprofileGatewayServicePolicyAppqoeArgs']]:
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @appqoe.setter
    def appqoe(self, value: Optional[pulumi.Input['DeviceprofileGatewayServicePolicyAppqoeArgs']]):
        pulumi.set(self, "appqoe", value)

    @property
    @pulumi.getter
    def ewfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyEwfArgs']]]]:
        return pulumi.get(self, "ewfs")

    @ewfs.setter
    def ewfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayServicePolicyEwfArgs']]]]):
        pulumi.set(self, "ewfs", value)

    @property
    @pulumi.getter
    def idp(self) -> Optional[pulumi.Input['DeviceprofileGatewayServicePolicyIdpArgs']]:
        return pulumi.get(self, "idp")

    @idp.setter
    def idp(self, value: Optional[pulumi.Input['DeviceprofileGatewayServicePolicyIdpArgs']]):
        pulumi.set(self, "idp", value)

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @local_routing.setter
    def local_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_routing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> Optional[pulumi.Input[str]]:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @path_preference.setter
    def path_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_preference", value)

    @property
    @pulumi.getter(name="servicepolicyId")
    def servicepolicy_id(self) -> Optional[pulumi.Input[str]]:
        """
        used to link servicepolicy defined at org level and overwrite some attributes
        """
        return pulumi.get(self, "servicepolicy_id")

    @servicepolicy_id.setter
    def servicepolicy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servicepolicy_id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)


@pulumi.input_type
class DeviceprofileGatewayServicePolicyAppqoeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayServicePolicyEwfArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class DeviceprofileGatewayServicePolicyIdpArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 idpprofile_id: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param pulumi.Input[str] profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[pulumi.Input[str]]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @idpprofile_id.setter
    def idpprofile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idpprofile_id", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsArgs:
    def __init__(__self__, *,
                 auto_provision: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionArgs']] = None,
                 ike_lifetime: Optional[pulumi.Input[int]] = None,
                 ike_mode: Optional[pulumi.Input[str]] = None,
                 ike_proposals: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIkeProposalArgs']]]] = None,
                 ipsec_lifetime: Optional[pulumi.Input[int]] = None,
                 ipsec_proposals: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIpsecProposalArgs']]]] = None,
                 local_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsPrimaryArgs']] = None,
                 probe: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsProbeArgs']] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 psk: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsSecondaryArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ike_lifetime: Only if `provider`== `custom-ipsec`
        :param pulumi.Input[str] ike_mode: Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        :param pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIkeProposalArgs']]] ike_proposals: if `provider`== `custom-ipsec`
        :param pulumi.Input[int] ipsec_lifetime: if `provider`== `custom-ipsec`
        :param pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIpsecProposalArgs']]] ipsec_proposals: Only if  `provider`== `custom-ipsec`
        :param pulumi.Input[str] local_id: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param pulumi.Input[str] mode: enum: `active-active`, `active-standby`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: networks reachable via this tunnel
        :param pulumi.Input['DeviceprofileGatewayTunnelConfigsProbeArgs'] probe: Only if `provider`== `custom-ipsec`
        :param pulumi.Input[str] protocol: Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        :param pulumi.Input[str] provider: enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        :param pulumi.Input[str] psk: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param pulumi.Input[str] version: Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        if auto_provision is not None:
            pulumi.set(__self__, "auto_provision", auto_provision)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_mode is not None:
            pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_proposals is not None:
            pulumi.set(__self__, "ike_proposals", ike_proposals)
        if ipsec_lifetime is not None:
            pulumi.set(__self__, "ipsec_lifetime", ipsec_lifetime)
        if ipsec_proposals is not None:
            pulumi.set(__self__, "ipsec_proposals", ipsec_proposals)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoProvision")
    def auto_provision(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionArgs']]:
        return pulumi.get(self, "auto_provision")

    @auto_provision.setter
    def auto_provision(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionArgs']]):
        pulumi.set(self, "auto_provision", value)

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_lifetime")

    @ike_lifetime.setter
    def ike_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_lifetime", value)

    @property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        """
        return pulumi.get(self, "ike_mode")

    @ike_mode.setter
    def ike_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_mode", value)

    @property
    @pulumi.getter(name="ikeProposals")
    def ike_proposals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIkeProposalArgs']]]]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_proposals")

    @ike_proposals.setter
    def ike_proposals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIkeProposalArgs']]]]):
        pulumi.set(self, "ike_proposals", value)

    @property
    @pulumi.getter(name="ipsecLifetime")
    def ipsec_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_lifetime")

    @ipsec_lifetime.setter
    def ipsec_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lifetime", value)

    @property
    @pulumi.getter(name="ipsecProposals")
    def ipsec_proposals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIpsecProposalArgs']]]]:
        """
        Only if  `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_proposals")

    @ipsec_proposals.setter
    def ipsec_proposals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelConfigsIpsecProposalArgs']]]]):
        pulumi.set(self, "ipsec_proposals", value)

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[str]]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `active-active`, `active-standby`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        networks reachable via this tunnel
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsPrimaryArgs']]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def probe(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsProbeArgs']]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "probe")

    @probe.setter
    def probe(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsProbeArgs']]):
        pulumi.set(self, "probe", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def psk(self) -> Optional[pulumi.Input[str]]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psk", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsSecondaryArgs']]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsSecondaryArgs']]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 latlng: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs']] = None,
                 primary: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs']] = None,
                 secondary: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs']] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if latlng is not None:
            pulumi.set(__self__, "latlng", latlng)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def latlng(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs']]:
        return pulumi.get(self, "latlng")

    @latlng.setter
    def latlng(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs']]):
        pulumi.set(self, "latlng", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs']]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs']]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs']]):
        pulumi.set(self, "secondary", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionLatlngArgs:
    def __init__(__self__, *,
                 lat: pulumi.Input[float],
                 lng: pulumi.Input[float]):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: pulumi.Input[float]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lng(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lng")

    @lng.setter
    def lng(self, value: pulumi.Input[float]):
        pulumi.set(self, "lng", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionPrimaryArgs:
    def __init__(__self__, *,
                 num_hosts: Optional[pulumi.Input[str]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_hosts")

    @num_hosts.setter
    def num_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_hosts", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsAutoProvisionSecondaryArgs:
    def __init__(__self__, *,
                 num_hosts: Optional[pulumi.Input[str]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_hosts")

    @num_hosts.setter
    def num_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_hosts", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsIkeProposalArgs:
    def __init__(__self__, *,
                 auth_algo: Optional[pulumi.Input[str]] = None,
                 dh_group: Optional[pulumi.Input[str]] = None,
                 enc_algo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_algo: enum: `md5`, `sha1`, `sha2`
        :param pulumi.Input[str] dh_group: enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param pulumi.Input[str] enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @auth_algo.setter
    def auth_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_algo", value)

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @dh_group.setter
    def dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_group", value)

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")

    @enc_algo.setter
    def enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algo", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsIpsecProposalArgs:
    def __init__(__self__, *,
                 auth_algo: Optional[pulumi.Input[str]] = None,
                 dh_group: Optional[pulumi.Input[str]] = None,
                 enc_algo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_algo: enum: `md5`, `sha1`, `sha2`
        :param pulumi.Input[str] dh_group: Only if `provider`== `custom-ipsec`. enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param pulumi.Input[str] enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @auth_algo.setter
    def auth_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_algo", value)

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @dh_group.setter
    def dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_group", value)

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")

    @enc_algo.setter
    def enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algo", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsPrimaryArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internal_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 probe_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remote_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @internal_ips.setter
    def internal_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_ips", value)

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "probe_ips")

    @probe_ips.setter
    def probe_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "probe_ips", value)

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @remote_ids.setter
    def remote_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_ids", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsProbeArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: how often to trigger the probe
        :param pulumi.Input[int] threshold: number of consecutive misses before declaring the tunnel down
        :param pulumi.Input[int] timeout: time within which to complete the connectivity check
        :param pulumi.Input[str] type: enum: `http`, `icmp`
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        how often to trigger the probe
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        number of consecutive misses before declaring the tunnel down
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        time within which to complete the connectivity check
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelConfigsSecondaryArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internal_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 probe_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remote_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @internal_ips.setter
    def internal_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_ips", value)

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "probe_ips")

    @probe_ips.setter
    def probe_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "probe_ips", value)

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @remote_ids.setter
    def remote_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_ids", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelProviderOptionsArgs:
    def __init__(__self__, *,
                 jse: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsJseArgs']] = None,
                 zscaler: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerArgs']] = None):
        """
        :param pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsJseArgs'] jse: for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        :param pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerArgs'] zscaler: for zscaler-ipsec and zscaler-gre
        """
        if jse is not None:
            pulumi.set(__self__, "jse", jse)
        if zscaler is not None:
            pulumi.set(__self__, "zscaler", zscaler)

    @property
    @pulumi.getter
    def jse(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsJseArgs']]:
        """
        for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        """
        return pulumi.get(self, "jse")

    @jse.setter
    def jse(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsJseArgs']]):
        pulumi.set(self, "jse", value)

    @property
    @pulumi.getter
    def zscaler(self) -> Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerArgs']]:
        """
        for zscaler-ipsec and zscaler-gre
        """
        return pulumi.get(self, "zscaler")

    @zscaler.setter
    def zscaler(self, value: Optional[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerArgs']]):
        pulumi.set(self, "zscaler", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelProviderOptionsJseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 num_users: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_users is not None:
            pulumi.set(__self__, "num_users", num_users)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numUsers")
    def num_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_users")

    @num_users.setter
    def num_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_users", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelProviderOptionsZscalerArgs:
    def __init__(__self__, *,
                 aup_acceptance_required: Optional[pulumi.Input[bool]] = None,
                 aup_expire: Optional[pulumi.Input[int]] = None,
                 aup_ssl_proxy: Optional[pulumi.Input[bool]] = None,
                 download_mbps: Optional[pulumi.Input[int]] = None,
                 enable_aup: Optional[pulumi.Input[bool]] = None,
                 enable_caution: Optional[pulumi.Input[bool]] = None,
                 enforce_authentication: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sub_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs']]]] = None,
                 upload_mbps: Optional[pulumi.Input[int]] = None,
                 use_xff: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] aup_expire: days before AUP is requested again
        :param pulumi.Input[bool] aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param pulumi.Input[int] download_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param pulumi.Input[bool] enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs']]] sub_locations: if `use_xff`==`true`
        :param pulumi.Input[int] upload_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] use_xff: location uses proxy chaining to forward traffic
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_locations is not None:
            pulumi.set(__self__, "sub_locations", sub_locations)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)
        if use_xff is not None:
            pulumi.set(__self__, "use_xff", use_xff)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aup_acceptance_required")

    @aup_acceptance_required.setter
    def aup_acceptance_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_acceptance_required", value)

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[pulumi.Input[int]]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @aup_expire.setter
    def aup_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_expire", value)

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @aup_ssl_proxy.setter
    def aup_ssl_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_ssl_proxy", value)

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @download_mbps.setter
    def download_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_mbps", value)

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[pulumi.Input[bool]]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @enable_aup.setter
    def enable_aup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aup", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[pulumi.Input[bool]]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subLocations")
    def sub_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs']]]]:
        """
        if `use_xff`==`true`
        """
        return pulumi.get(self, "sub_locations")

    @sub_locations.setter
    def sub_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs']]]]):
        pulumi.set(self, "sub_locations", value)

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @upload_mbps.setter
    def upload_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_mbps", value)

    @property
    @pulumi.getter(name="useXff")
    def use_xff(self) -> Optional[pulumi.Input[bool]]:
        """
        location uses proxy chaining to forward traffic
        """
        return pulumi.get(self, "use_xff")

    @use_xff.setter
    def use_xff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_xff", value)


@pulumi.input_type
class DeviceprofileGatewayTunnelProviderOptionsZscalerSubLocationArgs:
    def __init__(__self__, *,
                 aup_acceptance_required: Optional[pulumi.Input[bool]] = None,
                 aup_expire: Optional[pulumi.Input[int]] = None,
                 aup_ssl_proxy: Optional[pulumi.Input[bool]] = None,
                 download_mbps: Optional[pulumi.Input[int]] = None,
                 enable_aup: Optional[pulumi.Input[bool]] = None,
                 enable_caution: Optional[pulumi.Input[bool]] = None,
                 enforce_authentication: Optional[pulumi.Input[bool]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upload_mbps: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] aup_expire: days before AUP is requested again
        :param pulumi.Input[bool] aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param pulumi.Input[int] download_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param pulumi.Input[bool] enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param pulumi.Input[int] upload_mbps: the download bandwidth cap of the link, in Mbps
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aup_acceptance_required")

    @aup_acceptance_required.setter
    def aup_acceptance_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_acceptance_required", value)

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[pulumi.Input[int]]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @aup_expire.setter
    def aup_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_expire", value)

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @aup_ssl_proxy.setter
    def aup_ssl_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_ssl_proxy", value)

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @download_mbps.setter
    def download_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_mbps", value)

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[pulumi.Input[bool]]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @enable_aup.setter
    def enable_aup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aup", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[pulumi.Input[bool]]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @upload_mbps.setter
    def upload_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_mbps", value)


@pulumi.input_type
class DeviceprofileGatewayVrfConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class DeviceprofileGatewayVrfInstancesArgs:
    def __init__(__self__, *,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


@pulumi.input_type
class GatewaytemplateBgpConfigArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 bfd_minimum_interval: Optional[pulumi.Input[int]] = None,
                 bfd_multiplier: Optional[pulumi.Input[int]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateBgpConfigCommunityArgs']]]] = None,
                 disable_bfd: Optional[pulumi.Input[bool]] = None,
                 export: Optional[pulumi.Input[str]] = None,
                 export_policy: Optional[pulumi.Input[str]] = None,
                 extended_v4_nexthop: Optional[pulumi.Input[bool]] = None,
                 graceful_restart_time: Optional[pulumi.Input[int]] = None,
                 hold_time: Optional[pulumi.Input[int]] = None,
                 import_: Optional[pulumi.Input[str]] = None,
                 import_policy: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 neighbor_as: Optional[pulumi.Input[int]] = None,
                 neighbors: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateBgpConfigNeighborsArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 tunnel_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 via: Optional[pulumi.Input[str]] = None,
                 vpn_name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] bfd_minimum_interval: when bfd_multiplier is configured alone. Default:
                 * 1000 if `type`==`external`
                 * 350 `type`==`internal`
        :param pulumi.Input[int] bfd_multiplier: when bfd_minimum_interval_is_configured alone
        :param pulumi.Input[bool] disable_bfd: BFD provides faster path failure detection and is enabled by default
        :param pulumi.Input[str] export_policy: default export policies if no per-neighbor policies defined
        :param pulumi.Input[bool] extended_v4_nexthop: by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
               for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        :param pulumi.Input[int] graceful_restart_time: `0` means disable
        :param pulumi.Input[str] import_policy: default import policies if no per-neighbor policies defined
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateBgpConfigNeighborsArgs']]] neighbors: if per-neighbor as is desired. Property key is the neighbor address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        :param pulumi.Input[bool] no_readvertise_to_overlay: by default, we'll re-advertise all learned BGP routers toward overlay
        :param pulumi.Input[str] tunnel_name: if `type`==`tunnel`
        :param pulumi.Input[str] type: enum: `external`, `internal`
        :param pulumi.Input[str] via: network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        :param pulumi.Input[str] wan_name: if `via`==`wan`
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if bfd_multiplier is not None:
            pulumi.set(__self__, "bfd_multiplier", bfd_multiplier)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if disable_bfd is not None:
            pulumi.set(__self__, "disable_bfd", disable_bfd)
        if export is not None:
            pulumi.set(__self__, "export", export)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if extended_v4_nexthop is not None:
            pulumi.set(__self__, "extended_v4_nexthop", extended_v4_nexthop)
        if graceful_restart_time is not None:
            pulumi.set(__self__, "graceful_restart_time", graceful_restart_time)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_ is not None:
            pulumi.set(__self__, "import_", import_)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if via is not None:
            pulumi.set(__self__, "via", via)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[pulumi.Input[int]]:
        """
        when bfd_multiplier is configured alone. Default:
          * 1000 if `type`==`external`
          * 350 `type`==`internal`
        """
        return pulumi.get(self, "bfd_minimum_interval")

    @bfd_minimum_interval.setter
    def bfd_minimum_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_minimum_interval", value)

    @property
    @pulumi.getter(name="bfdMultiplier")
    def bfd_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        when bfd_minimum_interval_is_configured alone
        """
        return pulumi.get(self, "bfd_multiplier")

    @bfd_multiplier.setter
    def bfd_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_multiplier", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateBgpConfigCommunityArgs']]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateBgpConfigCommunityArgs']]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter(name="disableBfd")
    def disable_bfd(self) -> Optional[pulumi.Input[bool]]:
        """
        BFD provides faster path failure detection and is enabled by default
        """
        return pulumi.get(self, "disable_bfd")

    @disable_bfd.setter
    def disable_bfd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_bfd", value)

    @property
    @pulumi.getter
    def export(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export")

    @export.setter
    def export(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export", value)

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[pulumi.Input[str]]:
        """
        default export policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "export_policy")

    @export_policy.setter
    def export_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_policy", value)

    @property
    @pulumi.getter(name="extendedV4Nexthop")
    def extended_v4_nexthop(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, either inet/net6 unicast depending on neighbor IP family (v4 or v6)
        for v6 neighbors, to exchange v4 nexthop, which allows dual-stack support, enable this
        """
        return pulumi.get(self, "extended_v4_nexthop")

    @extended_v4_nexthop.setter
    def extended_v4_nexthop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extended_v4_nexthop", value)

    @property
    @pulumi.getter(name="gracefulRestartTime")
    def graceful_restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        `0` means disable
        """
        return pulumi.get(self, "graceful_restart_time")

    @graceful_restart_time.setter
    def graceful_restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_restart_time", value)

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_time", value)

    @property
    @pulumi.getter(name="import")
    def import_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_")

    @import_.setter
    def import_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_", value)

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[pulumi.Input[str]]:
        """
        default import policies if no per-neighbor policies defined
        """
        return pulumi.get(self, "import_policy")

    @import_policy.setter
    def import_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_as")

    @neighbor_as.setter
    def neighbor_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_as", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateBgpConfigNeighborsArgs']]]]:
        """
        if per-neighbor as is desired. Property key is the neighbor address
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateBgpConfigNeighborsArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`!=`external`or `via`==`wan`networks where we expect BGP neighbor to connect to/from
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, we'll re-advertise all learned BGP routers toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`tunnel`
        """
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `external`, `internal`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def via(self) -> Optional[pulumi.Input[str]]:
        """
        network name. enum: `lan`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_name")

    @vpn_name.setter
    def vpn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        if `via`==`wan`
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class GatewaytemplateBgpConfigCommunityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 local_preference: Optional[pulumi.Input[int]] = None,
                 vpn_name: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if vpn_name is not None:
            pulumi.set(__self__, "vpn_name", vpn_name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_preference", value)

    @property
    @pulumi.getter(name="vpnName")
    def vpn_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_name")

    @vpn_name.setter
    def vpn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_name", value)


@pulumi.input_type
class GatewaytemplateBgpConfigNeighborsArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 export_policy: Optional[pulumi.Input[str]] = None,
                 hold_time: Optional[pulumi.Input[int]] = None,
                 import_policy: Optional[pulumi.Input[str]] = None,
                 multihop_ttl: Optional[pulumi.Input[int]] = None,
                 neighbor_as: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] disabled: If true, the BGP session to this neighbor will be administratively disabled/shutdown
        :param pulumi.Input[int] multihop_ttl: assuming BGP neighbor is directly connected
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hold_time is not None:
            pulumi.set(__self__, "hold_time", hold_time)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if multihop_ttl is not None:
            pulumi.set(__self__, "multihop_ttl", multihop_ttl)
        if neighbor_as is not None:
            pulumi.set(__self__, "neighbor_as", neighbor_as)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the BGP session to this neighbor will be administratively disabled/shutdown
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_policy")

    @export_policy.setter
    def export_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_policy", value)

    @property
    @pulumi.getter(name="holdTime")
    def hold_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hold_time")

    @hold_time.setter
    def hold_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_time", value)

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_policy")

    @import_policy.setter
    def import_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy", value)

    @property
    @pulumi.getter(name="multihopTtl")
    def multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        assuming BGP neighbor is directly connected
        """
        return pulumi.get(self, "multihop_ttl")

    @multihop_ttl.setter
    def multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "multihop_ttl", value)

    @property
    @pulumi.getter(name="neighborAs")
    def neighbor_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "neighbor_as")

    @neighbor_as.setter
    def neighbor_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "neighbor_as", value)


@pulumi.input_type
class GatewaytemplateDhcpdConfigArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigArgs']]] config: Property key is the network name
        :param pulumi.Input[bool] enabled: if set to `true`, enable the DHCP server
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigArgs']]]]:
        """
        Property key is the network name
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigArgs']]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        if set to `true`, enable the DHCP server
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplateDhcpdConfigConfigArgs:
    def __init__(__self__, *,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fixed_bindings: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigFixedBindingsArgs']]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip_end: Optional[pulumi.Input[str]] = None,
                 ip_end6: Optional[pulumi.Input[str]] = None,
                 ip_start: Optional[pulumi.Input[str]] = None,
                 ip_start6: Optional[pulumi.Input[str]] = None,
                 lease_time: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigOptionsArgs']]]] = None,
                 server_id_override: Optional[pulumi.Input[bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 servers6s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type6: Optional[pulumi.Input[str]] = None,
                 vendor_encapulated: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: if `type`==`local` - optional, if not defined, system one will be used
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: if `type`==`local` - optional, if not defined, system one will be used
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigFixedBindingsArgs']]] fixed_bindings: Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        :param pulumi.Input[str] gateway: if `type`==`local` - optional, `ip` will be used if not provided
        :param pulumi.Input[str] ip_end: if `type`==`local`
        :param pulumi.Input[str] ip_end6: if `type6`==`local`
        :param pulumi.Input[str] ip_start: if `type`==`local`
        :param pulumi.Input[str] ip_start6: if `type6`==`local`
        :param pulumi.Input[int] lease_time: in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigOptionsArgs']]] options: Property key is the DHCP option number
        :param pulumi.Input[bool] server_id_override: `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
               should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers: if `type`==`relay`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers6s: if `type6`==`relay`
        :param pulumi.Input[str] type: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param pulumi.Input[str] type6: enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs']]] vendor_encapulated: Property key is <enterprise number>:<sub option code>, with
                 * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
                 * sub option code: 1-255, sub-option code'
        """
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if fixed_bindings is not None:
            pulumi.set(__self__, "fixed_bindings", fixed_bindings)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip_end is not None:
            pulumi.set(__self__, "ip_end", ip_end)
        if ip_end6 is not None:
            pulumi.set(__self__, "ip_end6", ip_end6)
        if ip_start is not None:
            pulumi.set(__self__, "ip_start", ip_start)
        if ip_start6 is not None:
            pulumi.set(__self__, "ip_start6", ip_start6)
        if lease_time is not None:
            pulumi.set(__self__, "lease_time", lease_time)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if server_id_override is not None:
            pulumi.set(__self__, "server_id_override", server_id_override)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if servers6s is not None:
            pulumi.set(__self__, "servers6s", servers6s)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type6 is not None:
            pulumi.set(__self__, "type6", type6)
        if vendor_encapulated is not None:
            pulumi.set(__self__, "vendor_encapulated", vendor_encapulated)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local` - optional, if not defined, system one will be used
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter(name="fixedBindings")
    def fixed_bindings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigFixedBindingsArgs']]]]:
        """
        Property key is the MAC Address. Format is `[0-9a-f]{12}` (e.g "5684dae9ac8b")
        """
        return pulumi.get(self, "fixed_bindings")

    @fixed_bindings.setter
    def fixed_bindings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigFixedBindingsArgs']]]]):
        pulumi.set(self, "fixed_bindings", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local` - optional, `ip` will be used if not provided
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="ipEnd")
    def ip_end(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_end")

    @ip_end.setter
    def ip_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_end", value)

    @property
    @pulumi.getter(name="ipEnd6")
    def ip_end6(self) -> Optional[pulumi.Input[str]]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_end6")

    @ip_end6.setter
    def ip_end6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_end6", value)

    @property
    @pulumi.getter(name="ipStart")
    def ip_start(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`local`
        """
        return pulumi.get(self, "ip_start")

    @ip_start.setter
    def ip_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_start", value)

    @property
    @pulumi.getter(name="ipStart6")
    def ip_start6(self) -> Optional[pulumi.Input[str]]:
        """
        if `type6`==`local`
        """
        return pulumi.get(self, "ip_start6")

    @ip_start6.setter
    def ip_start6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_start6", value)

    @property
    @pulumi.getter(name="leaseTime")
    def lease_time(self) -> Optional[pulumi.Input[int]]:
        """
        in seconds, lease time has to be between 3600 [1hr] - 604800 [1 week], default is 86400 [1 day]
        """
        return pulumi.get(self, "lease_time")

    @lease_time.setter
    def lease_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lease_time", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigOptionsArgs']]]]:
        """
        Property key is the DHCP option number
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigOptionsArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="serverIdOverride")
    def server_id_override(self) -> Optional[pulumi.Input[bool]]:
        """
        `server_id_override`==`true` means the device, when acts as DHCP relay and forwards DHCP responses from DHCP server to clients, 
        should overwrite the Sever Identifier option (i.e. DHCP option 54) in DHCP responses with its own IP address.
        """
        return pulumi.get(self, "server_id_override")

    @server_id_override.setter
    def server_id_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_id_override", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`relay`
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def servers6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type6`==`relay`
        """
        return pulumi.get(self, "servers6s")

    @servers6s.setter
    def servers6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers6s", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def type6(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local` (DHCP Server), `none`, `relay` (DHCP Relay)
        """
        return pulumi.get(self, "type6")

    @type6.setter
    def type6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type6", value)

    @property
    @pulumi.getter(name="vendorEncapulated")
    def vendor_encapulated(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs']]]]:
        """
        Property key is <enterprise number>:<sub option code>, with
          * enterprise number: 1-65535 (https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers)
          * sub option code: 1-255, sub-option code'
        """
        return pulumi.get(self, "vendor_encapulated")

    @vendor_encapulated.setter
    def vendor_encapulated(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs']]]]):
        pulumi.set(self, "vendor_encapulated", value)


@pulumi.input_type
class GatewaytemplateDhcpdConfigConfigFixedBindingsArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GatewaytemplateDhcpdConfigConfigOptionsArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GatewaytemplateDhcpdConfigConfigVendorEncapulatedArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `boolean`, `hex`, `int16`, `int32`, `ip`, `string`, `uint16`, `uint32`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GatewaytemplateExtraRoutes6Args:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class GatewaytemplateExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class GatewaytemplateIdpProfilesArgs:
    def __init__(__self__, *,
                 base_profile: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 overwrites: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateIdpProfilesOverwriteArgs']]]] = None):
        """
        :param pulumi.Input[str] base_profile: enum: `critical`, `standard`, `strict`
        """
        if base_profile is not None:
            pulumi.set(__self__, "base_profile", base_profile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if overwrites is not None:
            pulumi.set(__self__, "overwrites", overwrites)

    @property
    @pulumi.getter(name="baseProfile")
    def base_profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "base_profile")

    @base_profile.setter
    def base_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_profile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def overwrites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateIdpProfilesOverwriteArgs']]]]:
        return pulumi.get(self, "overwrites")

    @overwrites.setter
    def overwrites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateIdpProfilesOverwriteArgs']]]]):
        pulumi.set(self, "overwrites", value)


@pulumi.input_type
class GatewaytemplateIdpProfilesOverwriteArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 matching: Optional[pulumi.Input['GatewaytemplateIdpProfilesOverwriteMatchingArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def matching(self) -> Optional[pulumi.Input['GatewaytemplateIdpProfilesOverwriteMatchingArgs']]:
        return pulumi.get(self, "matching")

    @matching.setter
    def matching(self, value: Optional[pulumi.Input['GatewaytemplateIdpProfilesOverwriteMatchingArgs']]):
        pulumi.set(self, "matching", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GatewaytemplateIdpProfilesOverwriteMatchingArgs:
    def __init__(__self__, *,
                 attack_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dst_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attack_names")

    @attack_names.setter
    def attack_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attack_names", value)

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dst_subnets")

    @dst_subnets.setter
    def dst_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dst_subnets", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severities", value)


@pulumi.input_type
class GatewaytemplateIpConfigsArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 netmask: pulumi.Input[str],
                 secondary_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] secondary_ips: optional list of secondary IPs in CIDR format
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask", netmask)
        if secondary_ips is not None:
            pulumi.set(__self__, "secondary_ips", secondary_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: pulumi.Input[str]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter(name="secondaryIps")
    def secondary_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional list of secondary IPs in CIDR format
        """
        return pulumi.get(self, "secondary_ips")

    @secondary_ips.setter
    def secondary_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "secondary_ips", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GatewaytemplateNetworkArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 disallow_mist_services: Optional[pulumi.Input[bool]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 internal_access: Optional[pulumi.Input['GatewaytemplateNetworkInternalAccessArgs']] = None,
                 internet_access: Optional[pulumi.Input['GatewaytemplateNetworkInternetAccessArgs']] = None,
                 isolation: Optional[pulumi.Input[bool]] = None,
                 routed_for_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet6: Optional[pulumi.Input[str]] = None,
                 tenants: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkTenantsArgs']]]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None,
                 vpn_access: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessArgs']]]] = None):
        """
        :param pulumi.Input[bool] disallow_mist_services: whether to disallow Mist Devices in the network
        :param pulumi.Input['GatewaytemplateNetworkInternetAccessArgs'] internet_access: whether this network has direct internet access
        :param pulumi.Input[bool] isolation: whether to allow clients in the network to talk to each other
        :param pulumi.Input[Sequence[pulumi.Input[str]]] routed_for_networks: for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessArgs']]] vpn_access: Property key is the VPN name. Whether this network can be accessed from vpn
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet", subnet)
        if disallow_mist_services is not None:
            pulumi.set(__self__, "disallow_mist_services", disallow_mist_services)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if internal_access is not None:
            pulumi.set(__self__, "internal_access", internal_access)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if routed_for_networks is not None:
            pulumi.set(__self__, "routed_for_networks", routed_for_networks)
        if subnet6 is not None:
            pulumi.set(__self__, "subnet6", subnet6)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_access is not None:
            pulumi.set(__self__, "vpn_access", vpn_access)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="disallowMistServices")
    def disallow_mist_services(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disallow Mist Devices in the network
        """
        return pulumi.get(self, "disallow_mist_services")

    @disallow_mist_services.setter
    def disallow_mist_services(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_mist_services", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="internalAccess")
    def internal_access(self) -> Optional[pulumi.Input['GatewaytemplateNetworkInternalAccessArgs']]:
        return pulumi.get(self, "internal_access")

    @internal_access.setter
    def internal_access(self, value: Optional[pulumi.Input['GatewaytemplateNetworkInternalAccessArgs']]):
        pulumi.set(self, "internal_access", value)

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[pulumi.Input['GatewaytemplateNetworkInternetAccessArgs']]:
        """
        whether this network has direct internet access
        """
        return pulumi.get(self, "internet_access")

    @internet_access.setter
    def internet_access(self, value: Optional[pulumi.Input['GatewaytemplateNetworkInternetAccessArgs']]):
        pulumi.set(self, "internet_access", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow clients in the network to talk to each other
        """
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="routedForNetworks")
    def routed_for_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
        """
        return pulumi.get(self, "routed_for_networks")

    @routed_for_networks.setter
    def routed_for_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "routed_for_networks", value)

    @property
    @pulumi.getter
    def subnet6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet6")

    @subnet6.setter
    def subnet6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet6", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkTenantsArgs']]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkTenantsArgs']]]]):
        pulumi.set(self, "tenants", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vpnAccess")
    def vpn_access(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessArgs']]]]:
        """
        Property key is the VPN name. Whether this network can be accessed from vpn
        """
        return pulumi.get(self, "vpn_access")

    @vpn_access.setter
    def vpn_access(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessArgs']]]]):
        pulumi.set(self, "vpn_access", value)


@pulumi.input_type
class GatewaytemplateNetworkInternalAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplateNetworkInternetAccessArgs:
    def __init__(__self__, *,
                 create_simple_service_policy: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessDestinationNatArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessStaticNatArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[bool] restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_simple_service_policy")

    @create_simple_service_policy.setter
    def create_simple_service_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_simple_service_policy", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkInternetAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)


@pulumi.input_type
class GatewaytemplateNetworkInternetAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewaytemplateNetworkInternetAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class GatewaytemplateNetworkTenantsArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)


@pulumi.input_type
class GatewaytemplateNetworkVpnAccessArgs:
    def __init__(__self__, *,
                 advertised_subnet: Optional[pulumi.Input[str]] = None,
                 allow_ping: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessDestinationNatArgs']]]] = None,
                 nat_pool: Optional[pulumi.Input[str]] = None,
                 no_readvertise_to_lan_bgp: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_lan_ospf: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 other_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 routed: Optional[pulumi.Input[bool]] = None,
                 source_nat: Optional[pulumi.Input['GatewaytemplateNetworkVpnAccessSourceNatArgs']] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessStaticNatArgs']]]] = None,
                 summarized_subnet: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_bgp: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_ospf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param pulumi.Input[bool] allow_ping: whether to allow ping from vpn into this routed network
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[str] nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param pulumi.Input[bool] no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[bool] no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param pulumi.Input[bool] no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param pulumi.Input[bool] routed: whether this network is routable
        :param pulumi.Input['GatewaytemplateNetworkVpnAccessSourceNatArgs'] source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param pulumi.Input[str] summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[str] summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[str] summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @advertised_subnet.setter
    def advertised_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertised_subnet", value)

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @allow_ping.setter
    def allow_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ping", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_pool", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @no_readvertise_to_lan_bgp.setter
    def no_readvertise_to_lan_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_bgp", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @no_readvertise_to_lan_ospf.setter
    def no_readvertise_to_lan_ospf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_ospf", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @other_vrfs.setter
    def other_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "other_vrfs", value)

    @property
    @pulumi.getter
    def routed(self) -> Optional[pulumi.Input[bool]]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @routed.setter
    def routed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "routed", value)

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional[pulumi.Input['GatewaytemplateNetworkVpnAccessSourceNatArgs']]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @source_nat.setter
    def source_nat(self, value: Optional[pulumi.Input['GatewaytemplateNetworkVpnAccessSourceNatArgs']]):
        pulumi.set(self, "source_nat", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplateNetworkVpnAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @summarized_subnet.setter
    def summarized_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @summarized_subnet_to_lan_bgp.setter
    def summarized_subnet_to_lan_bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_bgp", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")

    @summarized_subnet_to_lan_ospf.setter
    def summarized_subnet_to_lan_ospf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_ospf", value)


@pulumi.input_type
class GatewaytemplateNetworkVpnAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewaytemplateNetworkVpnAccessSourceNatArgs:
    def __init__(__self__, *,
                 external_ip: Optional[pulumi.Input[str]] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)


@pulumi.input_type
class GatewaytemplateNetworkVpnAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class GatewaytemplateOobIpConfigArgs:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 node1: Optional[pulumi.Input['GatewaytemplateOobIpConfigNode1Args']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gateway: if `type`==`static`
        :param pulumi.Input[str] ip: if `type`==`static`
        :param pulumi.Input[str] netmask: if `type`==`static`
        :param pulumi.Input['GatewaytemplateOobIpConfigNode1Args'] node1: for HA Cluster, node1 can have different IP Config
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if node1 is not None:
            pulumi.set(__self__, "node1", node1)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def node1(self) -> Optional[pulumi.Input['GatewaytemplateOobIpConfigNode1Args']]:
        """
        for HA Cluster, node1 can have different IP Config
        """
        return pulumi.get(self, "node1")

    @node1.setter
    def node1(self, value: Optional[pulumi.Input['GatewaytemplateOobIpConfigNode1Args']]):
        pulumi.set(self, "node1", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class GatewaytemplateOobIpConfigNode1Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gateway: if `type`==`static`
        :param pulumi.Input[str] netmask: used only if `subnet` is not specified in `networks`
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: if supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`static`
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        if supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use `mgmt_junos` for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class GatewaytemplatePathPreferencesArgs:
    def __init__(__self__, *,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplatePathPreferencesPathArgs']]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] strategy: enum: `ecmp`, `ordered`, `weighted`
        """
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplatePathPreferencesPathArgs']]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplatePathPreferencesPathArgs']]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ecmp`, `ordered`, `weighted`
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class GatewaytemplatePathPreferencesPathArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 internet_access: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 target_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disabled: For SSR Only. `true`, if this specific path is undesired
        :param pulumi.Input[str] gateway_ip: only if `type`==`local`, if a different gateway is desired
        :param pulumi.Input[bool] internet_access: only if `type`==`vpn`, if this vpn path can be used for internet
        :param pulumi.Input[str] name: required when 
                 * `type`==`vpn`: the name of the VPN Path to use 
                 * `type`==`wan`: the name of the WAN interface to use'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: required when `type`==`local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] target_ips: if `type`==`local`, if destination IP is to be replaced
        :param pulumi.Input[str] type: enum: `local`, `tunnel`, `vpn`, `wan`
        :param pulumi.Input[str] wan_name: optional if `type`==`vpn`
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if internet_access is not None:
            pulumi.set(__self__, "internet_access", internet_access)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if target_ips is not None:
            pulumi.set(__self__, "target_ips", target_ips)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        For SSR Only. `true`, if this specific path is undesired
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`==`local`, if a different gateway is desired
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="internetAccess")
    def internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `type`==`vpn`, if this vpn path can be used for internet
        """
        return pulumi.get(self, "internet_access")

    @internet_access.setter
    def internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internet_access", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        required when 
          * `type`==`vpn`: the name of the VPN Path to use 
          * `type`==`wan`: the name of the WAN interface to use'
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required when `type`==`local`
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="targetIps")
    def target_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `type`==`local`, if destination IP is to be replaced
        """
        return pulumi.get(self, "target_ips")

    @target_ips.setter
    def target_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_ips", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local`, `tunnel`, `vpn`, `wan`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        optional if `type`==`vpn`
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class GatewaytemplatePortConfigArgs:
    def __init__(__self__, *,
                 usage: pulumi.Input[str],
                 ae_disable_lacp: Optional[pulumi.Input[bool]] = None,
                 ae_idx: Optional[pulumi.Input[str]] = None,
                 ae_lacp_force_up: Optional[pulumi.Input[bool]] = None,
                 aggregated: Optional[pulumi.Input[bool]] = None,
                 critical: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 dsl_type: Optional[pulumi.Input[str]] = None,
                 dsl_vci: Optional[pulumi.Input[int]] = None,
                 dsl_vpi: Optional[pulumi.Input[int]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 ip_config: Optional[pulumi.Input['GatewaytemplatePortConfigIpConfigArgs']] = None,
                 lte_apn: Optional[pulumi.Input[str]] = None,
                 lte_auth: Optional[pulumi.Input[str]] = None,
                 lte_backup: Optional[pulumi.Input[bool]] = None,
                 lte_password: Optional[pulumi.Input[str]] = None,
                 lte_username: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outer_vlan_id: Optional[pulumi.Input[int]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 port_network: Optional[pulumi.Input[str]] = None,
                 preserve_dscp: Optional[pulumi.Input[bool]] = None,
                 redundant: Optional[pulumi.Input[bool]] = None,
                 reth_idx: Optional[pulumi.Input[int]] = None,
                 reth_node: Optional[pulumi.Input[str]] = None,
                 reth_nodes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 ssr_no_virtual_mac: Optional[pulumi.Input[bool]] = None,
                 svr_port_range: Optional[pulumi.Input[str]] = None,
                 traffic_shaping: Optional[pulumi.Input['GatewaytemplatePortConfigTrafficShapingArgs']] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vpn_paths: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplatePortConfigVpnPathsArgs']]]] = None,
                 wan_arp_policer: Optional[pulumi.Input[str]] = None,
                 wan_ext_ip: Optional[pulumi.Input[str]] = None,
                 wan_source_nat: Optional[pulumi.Input['GatewaytemplatePortConfigWanSourceNatArgs']] = None,
                 wan_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] usage: port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        :param pulumi.Input[bool] ae_disable_lacp: if `aggregated`==`true`. To disable LCP support for the AE interface
        :param pulumi.Input[str] ae_idx: if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        :param pulumi.Input[bool] ae_lacp_force_up: For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
               Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
               Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        :param pulumi.Input[bool] critical: if want to generate port up/down alarm, set it to true
        :param pulumi.Input[bool] disabled: port admin up (true) / down (false)
        :param pulumi.Input[str] dsl_type: if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        :param pulumi.Input[int] dsl_vci: if `wan_type`==`dsl`
               16 bit int
        :param pulumi.Input[int] dsl_vpi: if `wan_type`==`dsl`
               8 bit int
        :param pulumi.Input[str] duplex: enum: `auto`, `full`, `half`
        :param pulumi.Input['GatewaytemplatePortConfigIpConfigArgs'] ip_config: Junos IP Config
        :param pulumi.Input[str] lte_apn: if `wan_type`==`lte`
        :param pulumi.Input[str] lte_auth: if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        :param pulumi.Input[str] lte_password: if `wan_type`==`lte`
        :param pulumi.Input[str] lte_username: if `wan_type`==`lte`
        :param pulumi.Input[str] name: name that we'll use to derive config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `usage`==`lan`
        :param pulumi.Input[int] outer_vlan_id: for Q-in-Q
        :param pulumi.Input[str] port_network: if `usage`==`lan`
        :param pulumi.Input[bool] preserve_dscp: whether to preserve dscp when sending traffic over VPN (SSR-only)
        :param pulumi.Input[bool] redundant: if HA mode
        :param pulumi.Input[int] reth_idx: if HA mode
        :param pulumi.Input[str] reth_node: if HA mode
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reth_nodes: SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        :param pulumi.Input[bool] ssr_no_virtual_mac: when SSR is running as VM, this is required on certain hosting platforms
        :param pulumi.Input[str] svr_port_range: for SSR only
        :param pulumi.Input[int] vlan_id: if WAN interface is on a VLAN
        :param pulumi.Input[str] wan_arp_policer: when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        :param pulumi.Input[str] wan_ext_ip: optional, if spoke should reach this port by a different IP
        :param pulumi.Input['GatewaytemplatePortConfigWanSourceNatArgs'] wan_source_nat: optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        :param pulumi.Input[str] wan_type: if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_force_up is not None:
            pulumi.set(__self__, "ae_lacp_force_up", ae_lacp_force_up)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if dsl_type is not None:
            pulumi.set(__self__, "dsl_type", dsl_type)
        if dsl_vci is not None:
            pulumi.set(__self__, "dsl_vci", dsl_vci)
        if dsl_vpi is not None:
            pulumi.set(__self__, "dsl_vpi", dsl_vpi)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if lte_apn is not None:
            pulumi.set(__self__, "lte_apn", lte_apn)
        if lte_auth is not None:
            pulumi.set(__self__, "lte_auth", lte_auth)
        if lte_backup is not None:
            pulumi.set(__self__, "lte_backup", lte_backup)
        if lte_password is not None:
            pulumi.set(__self__, "lte_password", lte_password)
        if lte_username is not None:
            pulumi.set(__self__, "lte_username", lte_username)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if outer_vlan_id is not None:
            pulumi.set(__self__, "outer_vlan_id", outer_vlan_id)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if preserve_dscp is not None:
            pulumi.set(__self__, "preserve_dscp", preserve_dscp)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if reth_idx is not None:
            pulumi.set(__self__, "reth_idx", reth_idx)
        if reth_node is not None:
            pulumi.set(__self__, "reth_node", reth_node)
        if reth_nodes is not None:
            pulumi.set(__self__, "reth_nodes", reth_nodes)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if ssr_no_virtual_mac is not None:
            pulumi.set(__self__, "ssr_no_virtual_mac", ssr_no_virtual_mac)
        if svr_port_range is not None:
            pulumi.set(__self__, "svr_port_range", svr_port_range)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)
        if wan_arp_policer is not None:
            pulumi.set(__self__, "wan_arp_policer", wan_arp_policer)
        if wan_ext_ip is not None:
            pulumi.set(__self__, "wan_ext_ip", wan_ext_ip)
        if wan_source_nat is not None:
            pulumi.set(__self__, "wan_source_nat", wan_source_nat)
        if wan_type is not None:
            pulumi.set(__self__, "wan_type", wan_type)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[str]:
        """
        port usage name. enum: `ha_control`, `ha_data`, `lan`, `wan`
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[pulumi.Input[bool]]:
        """
        if `aggregated`==`true`. To disable LCP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @ae_disable_lacp.setter
    def ae_disable_lacp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_disable_lacp", value)

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[pulumi.Input[str]]:
        """
        if `aggregated`==`true`. Users could force to use the designated AE name (must be an integer between 0 and 127)
        """
        return pulumi.get(self, "ae_idx")

    @ae_idx.setter
    def ae_idx(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ae_idx", value)

    @property
    @pulumi.getter(name="aeLacpForceUp")
    def ae_lacp_force_up(self) -> Optional[pulumi.Input[bool]]:
        """
        For SRX Only, if `aggregated`==`true`.Sets the state of the interface as UP when the peer has limited LACP capability.\\n
        Use case: When a device connected to this AE port is ZTPing for the first time, it will not have LACP configured on the other end\\n
        Note: Turning this on will enable force-up on one of the interfaces in the bundle only
        """
        return pulumi.get(self, "ae_lacp_force_up")

    @ae_lacp_force_up.setter
    def ae_lacp_force_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_lacp_force_up", value)

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aggregated")

    @aggregated.setter
    def aggregated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aggregated", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if want to generate port up/down alarm, set it to true
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        port admin up (true) / down (false)
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="dslType")
    def dsl_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`dsl`. enum: `adsl`, `vdsl`
        """
        return pulumi.get(self, "dsl_type")

    @dsl_type.setter
    def dsl_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dsl_type", value)

    @property
    @pulumi.getter(name="dslVci")
    def dsl_vci(self) -> Optional[pulumi.Input[int]]:
        """
        if `wan_type`==`dsl`
        16 bit int
        """
        return pulumi.get(self, "dsl_vci")

    @dsl_vci.setter
    def dsl_vci(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsl_vci", value)

    @property
    @pulumi.getter(name="dslVpi")
    def dsl_vpi(self) -> Optional[pulumi.Input[int]]:
        """
        if `wan_type`==`dsl`
        8 bit int
        """
        return pulumi.get(self, "dsl_vpi")

    @dsl_vpi.setter
    def dsl_vpi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dsl_vpi", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['GatewaytemplatePortConfigIpConfigArgs']]:
        """
        Junos IP Config
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['GatewaytemplatePortConfigIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter(name="lteApn")
    def lte_apn(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_apn")

    @lte_apn.setter
    def lte_apn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_apn", value)

    @property
    @pulumi.getter(name="lteAuth")
    def lte_auth(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "lte_auth")

    @lte_auth.setter
    def lte_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_auth", value)

    @property
    @pulumi.getter(name="lteBackup")
    def lte_backup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lte_backup")

    @lte_backup.setter
    def lte_backup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lte_backup", value)

    @property
    @pulumi.getter(name="ltePassword")
    def lte_password(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_password")

    @lte_password.setter
    def lte_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_password", value)

    @property
    @pulumi.getter(name="lteUsername")
    def lte_username(self) -> Optional[pulumi.Input[str]]:
        """
        if `wan_type`==`lte`
        """
        return pulumi.get(self, "lte_username")

    @lte_username.setter
    def lte_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lte_username", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name that we'll use to derive config
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="outerVlanId")
    def outer_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        for Q-in-Q
        """
        return pulumi.get(self, "outer_vlan_id")

    @outer_vlan_id.setter
    def outer_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_vlan_id", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[pulumi.Input[str]]:
        """
        if `usage`==`lan`
        """
        return pulumi.get(self, "port_network")

    @port_network.setter
    def port_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_network", value)

    @property
    @pulumi.getter(name="preserveDscp")
    def preserve_dscp(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to preserve dscp when sending traffic over VPN (SSR-only)
        """
        return pulumi.get(self, "preserve_dscp")

    @preserve_dscp.setter
    def preserve_dscp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_dscp", value)

    @property
    @pulumi.getter
    def redundant(self) -> Optional[pulumi.Input[bool]]:
        """
        if HA mode
        """
        return pulumi.get(self, "redundant")

    @redundant.setter
    def redundant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "redundant", value)

    @property
    @pulumi.getter(name="rethIdx")
    def reth_idx(self) -> Optional[pulumi.Input[int]]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_idx")

    @reth_idx.setter
    def reth_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reth_idx", value)

    @property
    @pulumi.getter(name="rethNode")
    def reth_node(self) -> Optional[pulumi.Input[str]]:
        """
        if HA mode
        """
        return pulumi.get(self, "reth_node")

    @reth_node.setter
    def reth_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reth_node", value)

    @property
    @pulumi.getter(name="rethNodes")
    def reth_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSR only - supporting vlan-based redundancy (matching the size of `networks`)
        """
        return pulumi.get(self, "reth_nodes")

    @reth_nodes.setter
    def reth_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reth_nodes", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="ssrNoVirtualMac")
    def ssr_no_virtual_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        when SSR is running as VM, this is required on certain hosting platforms
        """
        return pulumi.get(self, "ssr_no_virtual_mac")

    @ssr_no_virtual_mac.setter
    def ssr_no_virtual_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssr_no_virtual_mac", value)

    @property
    @pulumi.getter(name="svrPortRange")
    def svr_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        for SSR only
        """
        return pulumi.get(self, "svr_port_range")

    @svr_port_range.setter
    def svr_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svr_port_range", value)

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional[pulumi.Input['GatewaytemplatePortConfigTrafficShapingArgs']]:
        return pulumi.get(self, "traffic_shaping")

    @traffic_shaping.setter
    def traffic_shaping(self, value: Optional[pulumi.Input['GatewaytemplatePortConfigTrafficShapingArgs']]):
        pulumi.set(self, "traffic_shaping", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        if WAN interface is on a VLAN
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplatePortConfigVpnPathsArgs']]]]:
        return pulumi.get(self, "vpn_paths")

    @vpn_paths.setter
    def vpn_paths(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewaytemplatePortConfigVpnPathsArgs']]]]):
        pulumi.set(self, "vpn_paths", value)

    @property
    @pulumi.getter(name="wanArpPolicer")
    def wan_arp_policer(self) -> Optional[pulumi.Input[str]]:
        """
        when `wan_type`==`broadband`. enum: `default`, `max`, `recommended`
        """
        return pulumi.get(self, "wan_arp_policer")

    @wan_arp_policer.setter
    def wan_arp_policer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_arp_policer", value)

    @property
    @pulumi.getter(name="wanExtIp")
    def wan_ext_ip(self) -> Optional[pulumi.Input[str]]:
        """
        optional, if spoke should reach this port by a different IP
        """
        return pulumi.get(self, "wan_ext_ip")

    @wan_ext_ip.setter
    def wan_ext_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_ext_ip", value)

    @property
    @pulumi.getter(name="wanSourceNat")
    def wan_source_nat(self) -> Optional[pulumi.Input['GatewaytemplatePortConfigWanSourceNatArgs']]:
        """
        optional, by default, source-NAT is performed on all WAN Ports using the interface-ip
        """
        return pulumi.get(self, "wan_source_nat")

    @wan_source_nat.setter
    def wan_source_nat(self, value: Optional[pulumi.Input['GatewaytemplatePortConfigWanSourceNatArgs']]):
        pulumi.set(self, "wan_source_nat", value)

    @property
    @pulumi.getter(name="wanType")
    def wan_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `usage`==`wan`. enum: `broadband`, `dsl`, `lte`
        """
        return pulumi.get(self, "wan_type")

    @wan_type.setter
    def wan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_type", value)


@pulumi.input_type
class GatewaytemplatePortConfigIpConfigArgs:
    def __init__(__self__, *,
                 dns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_suffixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 poser_password: Optional[pulumi.Input[str]] = None,
                 pppoe_auth: Optional[pulumi.Input[str]] = None,
                 pppoe_username: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_suffixes: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[str] gateway: except for out-of_band interface (vme/em0/fxp0)
        :param pulumi.Input[str] netmask: used only if `subnet` is not specified in `networks`
        :param pulumi.Input[str] network: optional, the network to be used for mgmt
        :param pulumi.Input[str] poser_password: if `type`==`pppoe`
        :param pulumi.Input[str] pppoe_auth: if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        :param pulumi.Input[str] pppoe_username: if `type`==`pppoe`
        :param pulumi.Input[str] type: enum: `dhcp`, `pppoe`, `static`
        """
        if dns is not None:
            pulumi.set(__self__, "dns", dns)
        if dns_suffixes is not None:
            pulumi.set(__self__, "dns_suffixes", dns_suffixes)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if poser_password is not None:
            pulumi.set(__self__, "poser_password", poser_password)
        if pppoe_auth is not None:
            pulumi.set(__self__, "pppoe_auth", pppoe_auth)
        if pppoe_username is not None:
            pulumi.set(__self__, "pppoe_username", pppoe_username)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dnsSuffixes")
    def dns_suffixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "dns_suffixes")

    @dns_suffixes.setter
    def dns_suffixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_suffixes", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        except for out-of_band interface (vme/em0/fxp0)
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        used only if `subnet` is not specified in `networks`
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        optional, the network to be used for mgmt
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="poserPassword")
    def poser_password(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "poser_password")

    @poser_password.setter
    def poser_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poser_password", value)

    @property
    @pulumi.getter(name="pppoeAuth")
    def pppoe_auth(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`. enum: `chap`, `none`, `pap`
        """
        return pulumi.get(self, "pppoe_auth")

    @pppoe_auth.setter
    def pppoe_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_auth", value)

    @property
    @pulumi.getter(name="pppoeUsername")
    def pppoe_username(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`pppoe`
        """
        return pulumi.get(self, "pppoe_username")

    @pppoe_username.setter
    def pppoe_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pppoe_username", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `pppoe`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GatewaytemplatePortConfigTrafficShapingArgs:
    def __init__(__self__, *,
                 class_percentages: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @class_percentages.setter
    def class_percentages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "class_percentages", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplatePortConfigVpnPathsArgs:
    def __init__(__self__, *,
                 bfd_profile: Optional[pulumi.Input[str]] = None,
                 bfd_use_tunnel_mode: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 traffic_shaping: Optional[pulumi.Input['GatewaytemplatePortConfigVpnPathsTrafficShapingArgs']] = None):
        """
        :param pulumi.Input[str] bfd_profile: enum: `broadband`, `lte`
        :param pulumi.Input[bool] bfd_use_tunnel_mode: whether to use tunnel mode. SSR only
        :param pulumi.Input[int] preference: for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        :param pulumi.Input[str] role: enum: `hub`, `spoke`
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if bfd_use_tunnel_mode is not None:
            pulumi.set(__self__, "bfd_use_tunnel_mode", bfd_use_tunnel_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_shaping is not None:
            pulumi.set(__self__, "traffic_shaping", traffic_shaping)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @bfd_profile.setter
    def bfd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_profile", value)

    @property
    @pulumi.getter(name="bfdUseTunnelMode")
    def bfd_use_tunnel_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use tunnel mode. SSR only
        """
        return pulumi.get(self, "bfd_use_tunnel_mode")

    @bfd_use_tunnel_mode.setter
    def bfd_use_tunnel_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_use_tunnel_mode", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        """
        for a given VPN, when `path_selection.strategy`==`simple`, the preference for a path (lower is preferred)
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `hub`, `spoke`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="trafficShaping")
    def traffic_shaping(self) -> Optional[pulumi.Input['GatewaytemplatePortConfigVpnPathsTrafficShapingArgs']]:
        return pulumi.get(self, "traffic_shaping")

    @traffic_shaping.setter
    def traffic_shaping(self, value: Optional[pulumi.Input['GatewaytemplatePortConfigVpnPathsTrafficShapingArgs']]):
        pulumi.set(self, "traffic_shaping", value)


@pulumi.input_type
class GatewaytemplatePortConfigVpnPathsTrafficShapingArgs:
    def __init__(__self__, *,
                 class_percentages: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] class_percentages: percentages for differet class of traffic: high / medium / low / best-effort
               sum must be equal to 100
        """
        if class_percentages is not None:
            pulumi.set(__self__, "class_percentages", class_percentages)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="classPercentages")
    def class_percentages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        percentages for differet class of traffic: high / medium / low / best-effort
        sum must be equal to 100
        """
        return pulumi.get(self, "class_percentages")

    @class_percentages.setter
    def class_percentages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "class_percentages", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplatePortConfigWanSourceNatArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 nat_pool: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disabled: or to disable the source-nat
        :param pulumi.Input[str] nat_pool: if alternative nat_pool is desired
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        or to disable the source-nat
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        if alternative nat_pool is desired
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_pool", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesArgs:
    def __init__(__self__, *,
                 terms: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateRoutingPoliciesTermArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GatewaytemplateRoutingPoliciesTermArgs']]] terms: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if terms is not None:
            pulumi.set(__self__, "terms", terms)

    @property
    @pulumi.getter
    def terms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateRoutingPoliciesTermArgs']]]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "terms")

    @terms.setter
    def terms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateRoutingPoliciesTermArgs']]]]):
        pulumi.set(self, "terms", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesTermArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermActionArgs']] = None,
                 matching: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingArgs']] = None):
        """
        :param pulumi.Input['GatewaytemplateRoutingPoliciesTermActionArgs'] action: when used as import policy
        :param pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingArgs'] matching: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermActionArgs']]:
        """
        when used as import policy
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermActionArgs']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def matching(self) -> Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingArgs']]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "matching")

    @matching.setter
    def matching(self, value: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingArgs']]):
        pulumi.set(self, "matching", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesTermActionArgs:
    def __init__(__self__, *,
                 accept: Optional[pulumi.Input[bool]] = None,
                 add_communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 add_target_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 export_communitites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 local_preference: Optional[pulumi.Input[str]] = None,
                 prepend_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] add_target_vrfs: for SSR, hub decides how VRF routes are leaked on spoke
        :param pulumi.Input[Sequence[pulumi.Input[str]]] communities: when used as export policy, optional
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_as_paths: when used as export policy, optional. To exclude certain AS
        :param pulumi.Input[Sequence[pulumi.Input[str]]] export_communitites: when used as export policy, optional
        :param pulumi.Input[str] local_preference: optional, for an import policy, local_preference can be changed
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prepend_as_paths: when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        if accept is not None:
            pulumi.set(__self__, "accept", accept)
        if add_communities is not None:
            pulumi.set(__self__, "add_communities", add_communities)
        if add_target_vrfs is not None:
            pulumi.set(__self__, "add_target_vrfs", add_target_vrfs)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if exclude_as_paths is not None:
            pulumi.set(__self__, "exclude_as_paths", exclude_as_paths)
        if exclude_communities is not None:
            pulumi.set(__self__, "exclude_communities", exclude_communities)
        if export_communitites is not None:
            pulumi.set(__self__, "export_communitites", export_communitites)
        if local_preference is not None:
            pulumi.set(__self__, "local_preference", local_preference)
        if prepend_as_paths is not None:
            pulumi.set(__self__, "prepend_as_paths", prepend_as_paths)

    @property
    @pulumi.getter
    def accept(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept")

    @accept.setter
    def accept(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept", value)

    @property
    @pulumi.getter(name="addCommunities")
    def add_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "add_communities")

    @add_communities.setter
    def add_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_communities", value)

    @property
    @pulumi.getter(name="addTargetVrfs")
    def add_target_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        for SSR, hub decides how VRF routes are leaked on spoke
        """
        return pulumi.get(self, "add_target_vrfs")

    @add_target_vrfs.setter
    def add_target_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "add_target_vrfs", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter(name="excludeAsPaths")
    def exclude_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional. To exclude certain AS
        """
        return pulumi.get(self, "exclude_as_paths")

    @exclude_as_paths.setter
    def exclude_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_as_paths", value)

    @property
    @pulumi.getter(name="excludeCommunities")
    def exclude_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_communities")

    @exclude_communities.setter
    def exclude_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_communities", value)

    @property
    @pulumi.getter(name="exportCommunitites")
    def export_communitites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional
        """
        return pulumi.get(self, "export_communitites")

    @export_communitites.setter
    def export_communitites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "export_communitites", value)

    @property
    @pulumi.getter(name="localPreference")
    def local_preference(self) -> Optional[pulumi.Input[str]]:
        """
        optional, for an import policy, local_preference can be changed
        """
        return pulumi.get(self, "local_preference")

    @local_preference.setter
    def local_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_preference", value)

    @property
    @pulumi.getter(name="prependAsPaths")
    def prepend_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when used as export policy, optional. By default, the local AS will be prepended, to change it
        """
        return pulumi.get(self, "prepend_as_paths")

    @prepend_as_paths.setter
    def prepend_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prepend_as_paths", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesTermMatchingArgs:
    def __init__(__self__, *,
                 as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_exists: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs']] = None,
                 vpn_neighbor_macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpn_path_sla: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs']] = None,
                 vpn_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] as_paths: takes regular expression
        :param pulumi.Input[Sequence[pulumi.Input[str]]] prefixes: zero or more criteria/filter can be specified to match the term, all criteria have to be met
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: `direct`, `bgp`, `osp`, ...
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpn_neighbor_macs: overlay-facing criteria (used for bgp_config where via=vpn)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpn_paths: overlay-facing criteria (used for bgp_config where via=vpn)
               ordered-
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if communities is not None:
            pulumi.set(__self__, "communities", communities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if prefixes is not None:
            pulumi.set(__self__, "prefixes", prefixes)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_exists is not None:
            pulumi.set(__self__, "route_exists", route_exists)
        if vpn_neighbor_macs is not None:
            pulumi.set(__self__, "vpn_neighbor_macs", vpn_neighbor_macs)
        if vpn_path_sla is not None:
            pulumi.set(__self__, "vpn_path_sla", vpn_path_sla)
        if vpn_paths is not None:
            pulumi.set(__self__, "vpn_paths", vpn_paths)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        takes regular expression
        """
        return pulumi.get(self, "as_paths")

    @as_paths.setter
    def as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "as_paths", value)

    @property
    @pulumi.getter
    def communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "communities")

    @communities.setter
    def communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "communities", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        zero or more criteria/filter can be specified to match the term, all criteria have to be met
        """
        return pulumi.get(self, "prefixes")

    @prefixes.setter
    def prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "prefixes", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        `direct`, `bgp`, `osp`, ...
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeExists")
    def route_exists(self) -> Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs']]:
        return pulumi.get(self, "route_exists")

    @route_exists.setter
    def route_exists(self, value: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs']]):
        pulumi.set(self, "route_exists", value)

    @property
    @pulumi.getter(name="vpnNeighborMacs")
    def vpn_neighbor_macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        """
        return pulumi.get(self, "vpn_neighbor_macs")

    @vpn_neighbor_macs.setter
    def vpn_neighbor_macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_neighbor_macs", value)

    @property
    @pulumi.getter(name="vpnPathSla")
    def vpn_path_sla(self) -> Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs']]:
        return pulumi.get(self, "vpn_path_sla")

    @vpn_path_sla.setter
    def vpn_path_sla(self, value: Optional[pulumi.Input['GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs']]):
        pulumi.set(self, "vpn_path_sla", value)

    @property
    @pulumi.getter(name="vpnPaths")
    def vpn_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        overlay-facing criteria (used for bgp_config where via=vpn)
        ordered-
        """
        return pulumi.get(self, "vpn_paths")

    @vpn_paths.setter
    def vpn_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpn_paths", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesTermMatchingRouteExistsArgs:
    def __init__(__self__, *,
                 route: Optional[pulumi.Input[str]] = None,
                 vrf_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vrf_name: name of the vrf instance
               it can also be the name of the VPN or wan if they
        """
        if route is not None:
            pulumi.set(__self__, "route", route)
        if vrf_name is not None:
            pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the vrf instance
        it can also be the name of the VPN or wan if they
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_name", value)


@pulumi.input_type
class GatewaytemplateRoutingPoliciesTermMatchingVpnPathSlaArgs:
    def __init__(__self__, *,
                 max_jitter: Optional[pulumi.Input[int]] = None,
                 max_latency: Optional[pulumi.Input[int]] = None,
                 max_loss: Optional[pulumi.Input[int]] = None):
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_jitter")

    @max_jitter.setter
    def max_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_jitter", value)

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_latency")

    @max_latency.setter
    def max_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_latency", value)

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_loss")

    @max_loss.setter
    def max_loss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_loss", value)


@pulumi.input_type
class GatewaytemplateServicePolicyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 appqoe: Optional[pulumi.Input['GatewaytemplateServicePolicyAppqoeArgs']] = None,
                 ewfs: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateServicePolicyEwfArgs']]]] = None,
                 idp: Optional[pulumi.Input['GatewaytemplateServicePolicyIdpArgs']] = None,
                 local_routing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path_preference: Optional[pulumi.Input[str]] = None,
                 servicepolicy_id: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] action: enum: `allow`, `deny`
        :param pulumi.Input['GatewaytemplateServicePolicyAppqoeArgs'] appqoe: For SRX Only
        :param pulumi.Input[bool] local_routing: access within the same VRF
        :param pulumi.Input[str] path_preference: by default, we derive all paths available and use them
               optionally, you can customize by using `path_preference`
        :param pulumi.Input[str] servicepolicy_id: used to link servicepolicy defined at org level and overwrite some attributes
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if appqoe is not None:
            pulumi.set(__self__, "appqoe", appqoe)
        if ewfs is not None:
            pulumi.set(__self__, "ewfs", ewfs)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if local_routing is not None:
            pulumi.set(__self__, "local_routing", local_routing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path_preference is not None:
            pulumi.set(__self__, "path_preference", path_preference)
        if servicepolicy_id is not None:
            pulumi.set(__self__, "servicepolicy_id", servicepolicy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def appqoe(self) -> Optional[pulumi.Input['GatewaytemplateServicePolicyAppqoeArgs']]:
        """
        For SRX Only
        """
        return pulumi.get(self, "appqoe")

    @appqoe.setter
    def appqoe(self, value: Optional[pulumi.Input['GatewaytemplateServicePolicyAppqoeArgs']]):
        pulumi.set(self, "appqoe", value)

    @property
    @pulumi.getter
    def ewfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateServicePolicyEwfArgs']]]]:
        return pulumi.get(self, "ewfs")

    @ewfs.setter
    def ewfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateServicePolicyEwfArgs']]]]):
        pulumi.set(self, "ewfs", value)

    @property
    @pulumi.getter
    def idp(self) -> Optional[pulumi.Input['GatewaytemplateServicePolicyIdpArgs']]:
        return pulumi.get(self, "idp")

    @idp.setter
    def idp(self, value: Optional[pulumi.Input['GatewaytemplateServicePolicyIdpArgs']]):
        pulumi.set(self, "idp", value)

    @property
    @pulumi.getter(name="localRouting")
    def local_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        access within the same VRF
        """
        return pulumi.get(self, "local_routing")

    @local_routing.setter
    def local_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_routing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pathPreference")
    def path_preference(self) -> Optional[pulumi.Input[str]]:
        """
        by default, we derive all paths available and use them
        optionally, you can customize by using `path_preference`
        """
        return pulumi.get(self, "path_preference")

    @path_preference.setter
    def path_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_preference", value)

    @property
    @pulumi.getter(name="servicepolicyId")
    def servicepolicy_id(self) -> Optional[pulumi.Input[str]]:
        """
        used to link servicepolicy defined at org level and overwrite some attributes
        """
        return pulumi.get(self, "servicepolicy_id")

    @servicepolicy_id.setter
    def servicepolicy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servicepolicy_id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenants", value)


@pulumi.input_type
class GatewaytemplateServicePolicyAppqoeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplateServicePolicyEwfArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class GatewaytemplateServicePolicyIdpArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 idpprofile_id: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param pulumi.Input[str] profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[pulumi.Input[str]]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @idpprofile_id.setter
    def idpprofile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idpprofile_id", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsArgs:
    def __init__(__self__, *,
                 auto_provision: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionArgs']] = None,
                 ike_lifetime: Optional[pulumi.Input[int]] = None,
                 ike_mode: Optional[pulumi.Input[str]] = None,
                 ike_proposals: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIkeProposalArgs']]]] = None,
                 ipsec_lifetime: Optional[pulumi.Input[int]] = None,
                 ipsec_proposals: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIpsecProposalArgs']]]] = None,
                 local_id: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary: Optional[pulumi.Input['GatewaytemplateTunnelConfigsPrimaryArgs']] = None,
                 probe: Optional[pulumi.Input['GatewaytemplateTunnelConfigsProbeArgs']] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 psk: Optional[pulumi.Input[str]] = None,
                 secondary: Optional[pulumi.Input['GatewaytemplateTunnelConfigsSecondaryArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ike_lifetime: Only if `provider`== `custom-ipsec`
        :param pulumi.Input[str] ike_mode: Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        :param pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIkeProposalArgs']]] ike_proposals: if `provider`== `custom-ipsec`
        :param pulumi.Input[int] ipsec_lifetime: if `provider`== `custom-ipsec`
        :param pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIpsecProposalArgs']]] ipsec_proposals: Only if  `provider`== `custom-ipsec`
        :param pulumi.Input[str] local_id: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param pulumi.Input[str] mode: enum: `active-active`, `active-standby`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: networks reachable via this tunnel
        :param pulumi.Input['GatewaytemplateTunnelConfigsProbeArgs'] probe: Only if `provider`== `custom-ipsec`
        :param pulumi.Input[str] protocol: Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        :param pulumi.Input[str] provider: enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        :param pulumi.Input[str] psk: Only if:
                 * `provider`== `zscaler-ipsec`
                 * `provider`==`jse-ipsec`
                 * `provider`== `custom-ipsec`
        :param pulumi.Input[str] version: Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        if auto_provision is not None:
            pulumi.set(__self__, "auto_provision", auto_provision)
        if ike_lifetime is not None:
            pulumi.set(__self__, "ike_lifetime", ike_lifetime)
        if ike_mode is not None:
            pulumi.set(__self__, "ike_mode", ike_mode)
        if ike_proposals is not None:
            pulumi.set(__self__, "ike_proposals", ike_proposals)
        if ipsec_lifetime is not None:
            pulumi.set(__self__, "ipsec_lifetime", ipsec_lifetime)
        if ipsec_proposals is not None:
            pulumi.set(__self__, "ipsec_proposals", ipsec_proposals)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if probe is not None:
            pulumi.set(__self__, "probe", probe)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoProvision")
    def auto_provision(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionArgs']]:
        return pulumi.get(self, "auto_provision")

    @auto_provision.setter
    def auto_provision(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionArgs']]):
        pulumi.set(self, "auto_provision", value)

    @property
    @pulumi.getter(name="ikeLifetime")
    def ike_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_lifetime")

    @ike_lifetime.setter
    def ike_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ike_lifetime", value)

    @property
    @pulumi.getter(name="ikeMode")
    def ike_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum: `aggressive`, `main`
        """
        return pulumi.get(self, "ike_mode")

    @ike_mode.setter
    def ike_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ike_mode", value)

    @property
    @pulumi.getter(name="ikeProposals")
    def ike_proposals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIkeProposalArgs']]]]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ike_proposals")

    @ike_proposals.setter
    def ike_proposals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIkeProposalArgs']]]]):
        pulumi.set(self, "ike_proposals", value)

    @property
    @pulumi.getter(name="ipsecLifetime")
    def ipsec_lifetime(self) -> Optional[pulumi.Input[int]]:
        """
        if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_lifetime")

    @ipsec_lifetime.setter
    def ipsec_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipsec_lifetime", value)

    @property
    @pulumi.getter(name="ipsecProposals")
    def ipsec_proposals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIpsecProposalArgs']]]]:
        """
        Only if  `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "ipsec_proposals")

    @ipsec_proposals.setter
    def ipsec_proposals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelConfigsIpsecProposalArgs']]]]):
        pulumi.set(self, "ipsec_proposals", value)

    @property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[pulumi.Input[str]]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "local_id")

    @local_id.setter
    def local_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `active-active`, `active-standby`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        networks reachable via this tunnel
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsPrimaryArgs']]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def probe(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsProbeArgs']]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "probe")

    @probe.setter
    def probe(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsProbeArgs']]):
        pulumi.set(self, "probe", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum: `gre`, `ipsec`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom-ipsec`, `customer-gre`, `jse-ipsec`, `zscaler-gre`, `zscaler-ipsec`
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def psk(self) -> Optional[pulumi.Input[str]]:
        """
        Only if:
          * `provider`== `zscaler-ipsec`
          * `provider`==`jse-ipsec`
          * `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psk", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsSecondaryArgs']]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsSecondaryArgs']]):
        pulumi.set(self, "secondary", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-gre` or `provider`== `custom-ipsec`. enum: `1`, `2`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsAutoProvisionArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 latlng: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs']] = None,
                 primary: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs']] = None,
                 secondary: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs']] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if latlng is not None:
            pulumi.set(__self__, "latlng", latlng)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def latlng(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs']]:
        return pulumi.get(self, "latlng")

    @latlng.setter
    def latlng(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs']]):
        pulumi.set(self, "latlng", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs']]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs']]:
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input['GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs']]):
        pulumi.set(self, "secondary", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsAutoProvisionLatlngArgs:
    def __init__(__self__, *,
                 lat: pulumi.Input[float],
                 lng: pulumi.Input[float]):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: pulumi.Input[float]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lng(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lng")

    @lng.setter
    def lng(self, value: pulumi.Input[float]):
        pulumi.set(self, "lng", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsAutoProvisionPrimaryArgs:
    def __init__(__self__, *,
                 num_hosts: Optional[pulumi.Input[str]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_hosts")

    @num_hosts.setter
    def num_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_hosts", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsAutoProvisionSecondaryArgs:
    def __init__(__self__, *,
                 num_hosts: Optional[pulumi.Input[str]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] wan_names: optional, only needed if `vars_only`==`false`
        """
        if num_hosts is not None:
            pulumi.set(__self__, "num_hosts", num_hosts)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter(name="numHosts")
    def num_hosts(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_hosts")

    @num_hosts.setter
    def num_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_hosts", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, only needed if `vars_only`==`false`
        """
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsIkeProposalArgs:
    def __init__(__self__, *,
                 auth_algo: Optional[pulumi.Input[str]] = None,
                 dh_group: Optional[pulumi.Input[str]] = None,
                 enc_algo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_algo: enum: `md5`, `sha1`, `sha2`
        :param pulumi.Input[str] dh_group: enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param pulumi.Input[str] enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @auth_algo.setter
    def auth_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_algo", value)

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @dh_group.setter
    def dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_group", value)

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")

    @enc_algo.setter
    def enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algo", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsIpsecProposalArgs:
    def __init__(__self__, *,
                 auth_algo: Optional[pulumi.Input[str]] = None,
                 dh_group: Optional[pulumi.Input[str]] = None,
                 enc_algo: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_algo: enum: `md5`, `sha1`, `sha2`
        :param pulumi.Input[str] dh_group: Only if `provider`== `custom-ipsec`. enum:
                 * 1
                 * 2 (1024-bit)
                 * 5
                 * 14 (default, 2048-bit)
                 * 15 (3072-bit)
                 * 16 (4096-bit)
                 * 19 (256-bit ECP)
                 * 20 (384-bit ECP)
                 * 21 (521-bit ECP)
                 * 24 (2048-bit ECP)
        :param pulumi.Input[str] enc_algo: enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        if auth_algo is not None:
            pulumi.set(__self__, "auth_algo", auth_algo)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if enc_algo is not None:
            pulumi.set(__self__, "enc_algo", enc_algo)

    @property
    @pulumi.getter(name="authAlgo")
    def auth_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `md5`, `sha1`, `sha2`
        """
        return pulumi.get(self, "auth_algo")

    @auth_algo.setter
    def auth_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_algo", value)

    @property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `provider`== `custom-ipsec`. enum:
          * 1
          * 2 (1024-bit)
          * 5
          * 14 (default, 2048-bit)
          * 15 (3072-bit)
          * 16 (4096-bit)
          * 19 (256-bit ECP)
          * 20 (384-bit ECP)
          * 21 (521-bit ECP)
          * 24 (2048-bit ECP)
        """
        return pulumi.get(self, "dh_group")

    @dh_group.setter
    def dh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dh_group", value)

    @property
    @pulumi.getter(name="encAlgo")
    def enc_algo(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `3des`, `aes128`, `aes256`, `aes_gcm128`, `aes_gcm256`
        """
        return pulumi.get(self, "enc_algo")

    @enc_algo.setter
    def enc_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_algo", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsPrimaryArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internal_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 probe_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remote_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @internal_ips.setter
    def internal_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_ips", value)

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "probe_ips")

    @probe_ips.setter
    def probe_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "probe_ips", value)

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @remote_ids.setter
    def remote_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_ids", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsProbeArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: how often to trigger the probe
        :param pulumi.Input[int] threshold: number of consecutive misses before declaring the tunnel down
        :param pulumi.Input[int] timeout: time within which to complete the connectivity check
        :param pulumi.Input[str] type: enum: `http`, `icmp`
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        how often to trigger the probe
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        number of consecutive misses before declaring the tunnel down
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        time within which to complete the connectivity check
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GatewaytemplateTunnelConfigsSecondaryArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 internal_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 probe_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remote_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 wan_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] internal_ips: Only if:
                 * `provider`== `zscaler-gre`
                 * `provider`== `custom-gre`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_ids: Only if `provider`== `custom-ipsec`
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if internal_ips is not None:
            pulumi.set(__self__, "internal_ips", internal_ips)
        if probe_ips is not None:
            pulumi.set(__self__, "probe_ips", probe_ips)
        if remote_ids is not None:
            pulumi.set(__self__, "remote_ids", remote_ids)
        if wan_names is not None:
            pulumi.set(__self__, "wan_names", wan_names)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="internalIps")
    def internal_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if:
          * `provider`== `zscaler-gre`
          * `provider`== `custom-gre`
        """
        return pulumi.get(self, "internal_ips")

    @internal_ips.setter
    def internal_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "internal_ips", value)

    @property
    @pulumi.getter(name="probeIps")
    def probe_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "probe_ips")

    @probe_ips.setter
    def probe_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "probe_ips", value)

    @property
    @pulumi.getter(name="remoteIds")
    def remote_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `provider`== `custom-ipsec`
        """
        return pulumi.get(self, "remote_ids")

    @remote_ids.setter
    def remote_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_ids", value)

    @property
    @pulumi.getter(name="wanNames")
    def wan_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "wan_names")

    @wan_names.setter
    def wan_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "wan_names", value)


@pulumi.input_type
class GatewaytemplateTunnelProviderOptionsArgs:
    def __init__(__self__, *,
                 jse: Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsJseArgs']] = None,
                 zscaler: Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerArgs']] = None):
        """
        :param pulumi.Input['GatewaytemplateTunnelProviderOptionsJseArgs'] jse: for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        :param pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerArgs'] zscaler: for zscaler-ipsec and zscaler-gre
        """
        if jse is not None:
            pulumi.set(__self__, "jse", jse)
        if zscaler is not None:
            pulumi.set(__self__, "zscaler", zscaler)

    @property
    @pulumi.getter
    def jse(self) -> Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsJseArgs']]:
        """
        for jse-ipsec, this allow provisioning of adequate resource on JSE. Make sure adequate licenses are added
        """
        return pulumi.get(self, "jse")

    @jse.setter
    def jse(self, value: Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsJseArgs']]):
        pulumi.set(self, "jse", value)

    @property
    @pulumi.getter
    def zscaler(self) -> Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerArgs']]:
        """
        for zscaler-ipsec and zscaler-gre
        """
        return pulumi.get(self, "zscaler")

    @zscaler.setter
    def zscaler(self, value: Optional[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerArgs']]):
        pulumi.set(self, "zscaler", value)


@pulumi.input_type
class GatewaytemplateTunnelProviderOptionsJseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 num_users: Optional[pulumi.Input[int]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if num_users is not None:
            pulumi.set(__self__, "num_users", num_users)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numUsers")
    def num_users(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_users")

    @num_users.setter
    def num_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_users", value)


@pulumi.input_type
class GatewaytemplateTunnelProviderOptionsZscalerArgs:
    def __init__(__self__, *,
                 aup_acceptance_required: Optional[pulumi.Input[bool]] = None,
                 aup_expire: Optional[pulumi.Input[int]] = None,
                 aup_ssl_proxy: Optional[pulumi.Input[bool]] = None,
                 download_mbps: Optional[pulumi.Input[int]] = None,
                 enable_aup: Optional[pulumi.Input[bool]] = None,
                 enable_caution: Optional[pulumi.Input[bool]] = None,
                 enforce_authentication: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sub_locations: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs']]]] = None,
                 upload_mbps: Optional[pulumi.Input[int]] = None,
                 use_xff: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] aup_expire: days before AUP is requested again
        :param pulumi.Input[bool] aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param pulumi.Input[int] download_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param pulumi.Input[bool] enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs']]] sub_locations: if `use_xff`==`true`
        :param pulumi.Input[int] upload_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] use_xff: location uses proxy chaining to forward traffic
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_locations is not None:
            pulumi.set(__self__, "sub_locations", sub_locations)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)
        if use_xff is not None:
            pulumi.set(__self__, "use_xff", use_xff)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aup_acceptance_required")

    @aup_acceptance_required.setter
    def aup_acceptance_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_acceptance_required", value)

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[pulumi.Input[int]]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @aup_expire.setter
    def aup_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_expire", value)

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @aup_ssl_proxy.setter
    def aup_ssl_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_ssl_proxy", value)

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @download_mbps.setter
    def download_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_mbps", value)

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[pulumi.Input[bool]]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @enable_aup.setter
    def enable_aup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aup", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[pulumi.Input[bool]]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subLocations")
    def sub_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs']]]]:
        """
        if `use_xff`==`true`
        """
        return pulumi.get(self, "sub_locations")

    @sub_locations.setter
    def sub_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs']]]]):
        pulumi.set(self, "sub_locations", value)

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @upload_mbps.setter
    def upload_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_mbps", value)

    @property
    @pulumi.getter(name="useXff")
    def use_xff(self) -> Optional[pulumi.Input[bool]]:
        """
        location uses proxy chaining to forward traffic
        """
        return pulumi.get(self, "use_xff")

    @use_xff.setter
    def use_xff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_xff", value)


@pulumi.input_type
class GatewaytemplateTunnelProviderOptionsZscalerSubLocationArgs:
    def __init__(__self__, *,
                 aup_acceptance_required: Optional[pulumi.Input[bool]] = None,
                 aup_expire: Optional[pulumi.Input[int]] = None,
                 aup_ssl_proxy: Optional[pulumi.Input[bool]] = None,
                 download_mbps: Optional[pulumi.Input[int]] = None,
                 enable_aup: Optional[pulumi.Input[bool]] = None,
                 enable_caution: Optional[pulumi.Input[bool]] = None,
                 enforce_authentication: Optional[pulumi.Input[bool]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upload_mbps: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] aup_expire: days before AUP is requested again
        :param pulumi.Input[bool] aup_ssl_proxy: proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        :param pulumi.Input[int] download_mbps: the download bandwidth cap of the link, in Mbps
        :param pulumi.Input[bool] enable_aup: if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        :param pulumi.Input[bool] enable_caution: when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        :param pulumi.Input[int] upload_mbps: the download bandwidth cap of the link, in Mbps
        """
        if aup_acceptance_required is not None:
            pulumi.set(__self__, "aup_acceptance_required", aup_acceptance_required)
        if aup_expire is not None:
            pulumi.set(__self__, "aup_expire", aup_expire)
        if aup_ssl_proxy is not None:
            pulumi.set(__self__, "aup_ssl_proxy", aup_ssl_proxy)
        if download_mbps is not None:
            pulumi.set(__self__, "download_mbps", download_mbps)
        if enable_aup is not None:
            pulumi.set(__self__, "enable_aup", enable_aup)
        if enable_caution is not None:
            pulumi.set(__self__, "enable_caution", enable_caution)
        if enforce_authentication is not None:
            pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if upload_mbps is not None:
            pulumi.set(__self__, "upload_mbps", upload_mbps)

    @property
    @pulumi.getter(name="aupAcceptanceRequired")
    def aup_acceptance_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aup_acceptance_required")

    @aup_acceptance_required.setter
    def aup_acceptance_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_acceptance_required", value)

    @property
    @pulumi.getter(name="aupExpire")
    def aup_expire(self) -> Optional[pulumi.Input[int]]:
        """
        days before AUP is requested again
        """
        return pulumi.get(self, "aup_expire")

    @aup_expire.setter
    def aup_expire(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_expire", value)

    @property
    @pulumi.getter(name="aupSslProxy")
    def aup_ssl_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        proxy HTTPs traffic, requiring Zscaler cert to be installed in browser
        """
        return pulumi.get(self, "aup_ssl_proxy")

    @aup_ssl_proxy.setter
    def aup_ssl_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_ssl_proxy", value)

    @property
    @pulumi.getter(name="downloadMbps")
    def download_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "download_mbps")

    @download_mbps.setter
    def download_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_mbps", value)

    @property
    @pulumi.getter(name="enableAup")
    def enable_aup(self) -> Optional[pulumi.Input[bool]]:
        """
        if `use_xff`==`true`, display Acceptable Use Policy (AUP)
        """
        return pulumi.get(self, "enable_aup")

    @enable_aup.setter
    def enable_aup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_aup", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> Optional[pulumi.Input[bool]]:
        """
        when `enforce_authentication`==`false`, display caution notification for non-authenticated users
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="uploadMbps")
    def upload_mbps(self) -> Optional[pulumi.Input[int]]:
        """
        the download bandwidth cap of the link, in Mbps
        """
        return pulumi.get(self, "upload_mbps")

    @upload_mbps.setter
    def upload_mbps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_mbps", value)


@pulumi.input_type
class GatewaytemplateVrfConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GatewaytemplateVrfInstancesArgs:
    def __init__(__self__, *,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


@pulumi.input_type
class IdpprofileOverwriteArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 matching: Optional[pulumi.Input['IdpprofileOverwriteMatchingArgs']] = None):
        """
        :param pulumi.Input[str] action: enum:
                 * alert (default)
                 * drop: siliently dropping packets
                 * close: notify client/server to close connection
        """
        pulumi.set(__self__, "name", name)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if matching is not None:
            pulumi.set(__self__, "matching", matching)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum:
          * alert (default)
          * drop: siliently dropping packets
          * close: notify client/server to close connection
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def matching(self) -> Optional[pulumi.Input['IdpprofileOverwriteMatchingArgs']]:
        return pulumi.get(self, "matching")

    @matching.setter
    def matching(self, value: Optional[pulumi.Input['IdpprofileOverwriteMatchingArgs']]):
        pulumi.set(self, "matching", value)


@pulumi.input_type
class IdpprofileOverwriteMatchingArgs:
    def __init__(__self__, *,
                 attack_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dst_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if attack_names is not None:
            pulumi.set(__self__, "attack_names", attack_names)
        if dst_subnets is not None:
            pulumi.set(__self__, "dst_subnets", dst_subnets)
        if severities is not None:
            pulumi.set(__self__, "severities", severities)

    @property
    @pulumi.getter(name="attackNames")
    def attack_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attack_names")

    @attack_names.setter
    def attack_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attack_names", value)

    @property
    @pulumi.getter(name="dstSubnets")
    def dst_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dst_subnets")

    @dst_subnets.setter
    def dst_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dst_subnets", value)

    @property
    @pulumi.getter
    def severities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "severities")

    @severities.setter
    def severities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severities", value)


@pulumi.input_type
class InventoryDeviceArgs:
    def __init__(__self__, *,
                 claim_code: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vc_mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] claim_code: Device Claim Code. Required for claimed devices. Removing an adopted device from the list will release it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
        :param pulumi.Input[str] hostname: Device Hostname
        :param pulumi.Input[str] id: Mist Device ID
        :param pulumi.Input[str] mac: Device MAC address. Required to assign adopted devices to site. Removing an adopted device from the list will not release it, but will unassign it from the site. Cannot be specified when `claim_code` is used. Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
        :param pulumi.Input[str] model: Device model
        :param pulumi.Input[str] serial: Device serial
        :param pulumi.Input[str] site_id: Site ID. Used to assign device to a Site
        :param pulumi.Input[str] vc_mac: Virtual Chassis MAC Address
        """
        if claim_code is not None:
            pulumi.set(__self__, "claim_code", claim_code)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vc_mac is not None:
            pulumi.set(__self__, "vc_mac", vc_mac)

    @property
    @pulumi.getter(name="claimCode")
    def claim_code(self) -> Optional[pulumi.Input[str]]:
        """
        Device Claim Code. Required for claimed devices. Removing an adopted device from the list will release it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`)
        """
        return pulumi.get(self, "claim_code")

    @claim_code.setter
    def claim_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "claim_code", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Device Hostname
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Mist Device ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Device MAC address. Required to assign adopted devices to site. Removing an adopted device from the list will not release it, but will unassign it from the site. Cannot be specified when `claim_code` is used. Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`)
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Device model
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Device serial
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID. Used to assign device to a Site
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vcMac")
    def vc_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Chassis MAC Address
        """
        return pulumi.get(self, "vc_mac")

    @vc_mac.setter
    def vc_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vc_mac", value)


@pulumi.input_type
class NacruleMatchingArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 nactags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 site_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sitegroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] auth_type: enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] site_ids: list of site ids to match
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sitegroup_ids: list of sitegroup ids to match
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vendors: list of vendors to match
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if nactags is not None:
            pulumi.set(__self__, "nactags", nactags)
        if port_types is not None:
            pulumi.set(__self__, "port_types", port_types)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def nactags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nactags")

    @nactags.setter
    def nactags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nactags", value)

    @property
    @pulumi.getter(name="portTypes")
    def port_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "port_types")

    @port_types.setter
    def port_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "port_types", value)

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of site ids to match
        """
        return pulumi.get(self, "site_ids")

    @site_ids.setter
    def site_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_ids", value)

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of sitegroup ids to match
        """
        return pulumi.get(self, "sitegroup_ids")

    @sitegroup_ids.setter
    def sitegroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sitegroup_ids", value)

    @property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of vendors to match
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vendors", value)


@pulumi.input_type
class NacruleNotMatchingArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 nactags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 port_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 site_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sitegroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vendors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] auth_type: enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] site_ids: list of site ids to match
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sitegroup_ids: list of sitegroup ids to match
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vendors: list of vendors to match
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if nactags is not None:
            pulumi.set(__self__, "nactags", nactags)
        if port_types is not None:
            pulumi.set(__self__, "port_types", port_types)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)
        if vendors is not None:
            pulumi.set(__self__, "vendors", vendors)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `psk`
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def nactags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nactags")

    @nactags.setter
    def nactags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nactags", value)

    @property
    @pulumi.getter(name="portTypes")
    def port_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "port_types")

    @port_types.setter
    def port_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "port_types", value)

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of site ids to match
        """
        return pulumi.get(self, "site_ids")

    @site_ids.setter
    def site_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_ids", value)

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of sitegroup ids to match
        """
        return pulumi.get(self, "sitegroup_ids")

    @sitegroup_ids.setter
    def sitegroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sitegroup_ids", value)

    @property
    @pulumi.getter
    def vendors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of vendors to match
        """
        return pulumi.get(self, "vendors")

    @vendors.setter
    def vendors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vendors", value)


@pulumi.input_type
class NetworkInternalAccessArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class NetworkInternetAccessArgs:
    def __init__(__self__, *,
                 create_simple_service_policy: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessDestinationNatArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 restricted: Optional[pulumi.Input[bool]] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessStaticNatArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[bool] restricted: by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        if create_simple_service_policy is not None:
            pulumi.set(__self__, "create_simple_service_policy", create_simple_service_policy)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restricted is not None:
            pulumi.set(__self__, "restricted", restricted)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)

    @property
    @pulumi.getter(name="createSimpleServicePolicy")
    def create_simple_service_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_simple_service_policy")

    @create_simple_service_policy.setter
    def create_simple_service_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_simple_service_policy", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def restricted(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, all access is allowed, to only allow certain traffic, make `restricted`=`true` and define service_policies
        """
        return pulumi.get(self, "restricted")

    @restricted.setter
    def restricted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restricted", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkInternetAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)


@pulumi.input_type
class NetworkInternetAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class NetworkInternetAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class NetworkTenantsArgs:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addresses", value)


@pulumi.input_type
class NetworkVpnAccessArgs:
    def __init__(__self__, *,
                 advertised_subnet: Optional[pulumi.Input[str]] = None,
                 allow_ping: Optional[pulumi.Input[bool]] = None,
                 destination_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessDestinationNatArgs']]]] = None,
                 nat_pool: Optional[pulumi.Input[str]] = None,
                 no_readvertise_to_lan_bgp: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_lan_ospf: Optional[pulumi.Input[bool]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 other_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 routed: Optional[pulumi.Input[bool]] = None,
                 source_nat: Optional[pulumi.Input['NetworkVpnAccessSourceNatArgs']] = None,
                 static_nat: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessStaticNatArgs']]]] = None,
                 summarized_subnet: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_bgp: Optional[pulumi.Input[str]] = None,
                 summarized_subnet_to_lan_ospf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertised_subnet: if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        :param pulumi.Input[bool] allow_ping: whether to allow ping from vpn into this routed network
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessDestinationNatArgs']]] destination_nat: Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        :param pulumi.Input[str] nat_pool: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        :param pulumi.Input[bool] no_readvertise_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[bool] no_readvertise_to_lan_ospf: toward LAN-side OSPF peers
        :param pulumi.Input[bool] no_readvertise_to_overlay: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[Sequence[pulumi.Input[str]]] other_vrfs: by default, the routes are only readvertised toward the same vrf on spoke
               to allow it to be leaked to other vrfs
        :param pulumi.Input[bool] routed: whether this network is routable
        :param pulumi.Input['NetworkVpnAccessSourceNatArgs'] source_nat: if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessStaticNatArgs']]] static_nat: Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        :param pulumi.Input[str] summarized_subnet: toward overlay
               how HUB should deal with routes it received from Spokes
        :param pulumi.Input[str] summarized_subnet_to_lan_bgp: toward LAN-side BGP peers
        :param pulumi.Input[str] summarized_subnet_to_lan_ospf: toward LAN-side OSPF peers
        """
        if advertised_subnet is not None:
            pulumi.set(__self__, "advertised_subnet", advertised_subnet)
        if allow_ping is not None:
            pulumi.set(__self__, "allow_ping", allow_ping)
        if destination_nat is not None:
            pulumi.set(__self__, "destination_nat", destination_nat)
        if nat_pool is not None:
            pulumi.set(__self__, "nat_pool", nat_pool)
        if no_readvertise_to_lan_bgp is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_bgp", no_readvertise_to_lan_bgp)
        if no_readvertise_to_lan_ospf is not None:
            pulumi.set(__self__, "no_readvertise_to_lan_ospf", no_readvertise_to_lan_ospf)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if other_vrfs is not None:
            pulumi.set(__self__, "other_vrfs", other_vrfs)
        if routed is not None:
            pulumi.set(__self__, "routed", routed)
        if source_nat is not None:
            pulumi.set(__self__, "source_nat", source_nat)
        if static_nat is not None:
            pulumi.set(__self__, "static_nat", static_nat)
        if summarized_subnet is not None:
            pulumi.set(__self__, "summarized_subnet", summarized_subnet)
        if summarized_subnet_to_lan_bgp is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_bgp", summarized_subnet_to_lan_bgp)
        if summarized_subnet_to_lan_ospf is not None:
            pulumi.set(__self__, "summarized_subnet_to_lan_ospf", summarized_subnet_to_lan_ospf)

    @property
    @pulumi.getter(name="advertisedSubnet")
    def advertised_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`true`, whether to advertise an aggregated subnet toward HUB this is useful when there are multiple networks on SPOKE's side
        """
        return pulumi.get(self, "advertised_subnet")

    @advertised_subnet.setter
    def advertised_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertised_subnet", value)

    @property
    @pulumi.getter(name="allowPing")
    def allow_ping(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow ping from vpn into this routed network
        """
        return pulumi.get(self, "allow_ping")

    @allow_ping.setter
    def allow_ping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_ping", value)

    @property
    @pulumi.getter(name="destinationNat")
    def destination_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessDestinationNatArgs']]]]:
        """
        Property key may be an IP/Port (i.e. "63.16.0.3:443"), or a port (i.e. ":2222")
        """
        return pulumi.get(self, "destination_nat")

    @destination_nat.setter
    def destination_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessDestinationNatArgs']]]]):
        pulumi.set(self, "destination_nat", value)

    @property
    @pulumi.getter(name="natPool")
    def nat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub, a subnet is required to create and advertise the route to Hub
        """
        return pulumi.get(self, "nat_pool")

    @nat_pool.setter
    def nat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_pool", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanBgp")
    def no_readvertise_to_lan_bgp(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_bgp")

    @no_readvertise_to_lan_bgp.setter
    def no_readvertise_to_lan_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_bgp", value)

    @property
    @pulumi.getter(name="noReadvertiseToLanOspf")
    def no_readvertise_to_lan_ospf(self) -> Optional[pulumi.Input[bool]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "no_readvertise_to_lan_ospf")

    @no_readvertise_to_lan_ospf.setter
    def no_readvertise_to_lan_ospf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_lan_ospf", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter(name="otherVrfs")
    def other_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        by default, the routes are only readvertised toward the same vrf on spoke
        to allow it to be leaked to other vrfs
        """
        return pulumi.get(self, "other_vrfs")

    @other_vrfs.setter
    def other_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "other_vrfs", value)

    @property
    @pulumi.getter
    def routed(self) -> Optional[pulumi.Input[bool]]:
        """
        whether this network is routable
        """
        return pulumi.get(self, "routed")

    @routed.setter
    def routed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "routed", value)

    @property
    @pulumi.getter(name="sourceNat")
    def source_nat(self) -> Optional[pulumi.Input['NetworkVpnAccessSourceNatArgs']]:
        """
        if `routed`==`false` (usually at Spoke), but some hosts needs to be reachable from Hub
        """
        return pulumi.get(self, "source_nat")

    @source_nat.setter
    def source_nat(self, value: Optional[pulumi.Input['NetworkVpnAccessSourceNatArgs']]):
        pulumi.set(self, "source_nat", value)

    @property
    @pulumi.getter(name="staticNat")
    def static_nat(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessStaticNatArgs']]]]:
        """
        Property key may be an IP Address (i.e. "172.16.0.1"), and IP Address and Port (i.e. "172.16.0.1:8443") or a CIDR (i.e. "172.16.0.12/20")
        """
        return pulumi.get(self, "static_nat")

    @static_nat.setter
    def static_nat(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworkVpnAccessStaticNatArgs']]]]):
        pulumi.set(self, "static_nat", value)

    @property
    @pulumi.getter(name="summarizedSubnet")
    def summarized_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        toward overlay
        how HUB should deal with routes it received from Spokes
        """
        return pulumi.get(self, "summarized_subnet")

    @summarized_subnet.setter
    def summarized_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanBgp")
    def summarized_subnet_to_lan_bgp(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side BGP peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_bgp")

    @summarized_subnet_to_lan_bgp.setter
    def summarized_subnet_to_lan_bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_bgp", value)

    @property
    @pulumi.getter(name="summarizedSubnetToLanOspf")
    def summarized_subnet_to_lan_ospf(self) -> Optional[pulumi.Input[str]]:
        """
        toward LAN-side OSPF peers
        """
        return pulumi.get(self, "summarized_subnet_to_lan_ospf")

    @summarized_subnet_to_lan_ospf.setter
    def summarized_subnet_to_lan_ospf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summarized_subnet_to_lan_ospf", value)


@pulumi.input_type
class NetworkVpnAccessDestinationNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class NetworkVpnAccessSourceNatArgs:
    def __init__(__self__, *,
                 external_ip: Optional[pulumi.Input[str]] = None):
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)


@pulumi.input_type
class NetworkVpnAccessStaticNatArgs:
    def __init__(__self__, *,
                 internal_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 wan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wan_name: If not set, we configure the nat policies against all WAN ports for simplicity
        """
        if internal_ip is not None:
            pulumi.set(__self__, "internal_ip", internal_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wan_name is not None:
            pulumi.set(__self__, "wan_name", wan_name)

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_ip")

    @internal_ip.setter
    def internal_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="wanName")
    def wan_name(self) -> Optional[pulumi.Input[str]]:
        """
        If not set, we configure the nat policies against all WAN ports for simplicity
        """
        return pulumi.get(self, "wan_name")

    @wan_name.setter
    def wan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_name", value)


@pulumi.input_type
class NetworktemplateAclPolicyArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]] actions: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_tags: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_tags is not None:
            pulumi.set(__self__, "src_tags", src_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="srcTags")
    def src_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "src_tags")

    @src_tags.setter
    def src_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_tags", value)


@pulumi.input_type
class NetworktemplateAclPolicyActionArgs:
    def __init__(__self__, *,
                 dst_tag: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: enum: `allow`, `deny`
        """
        pulumi.set(__self__, "dst_tag", dst_tag)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter(name="dstTag")
    def dst_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_tag")

    @dst_tag.setter
    def dst_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_tag", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)


@pulumi.input_type
class NetworktemplateAclTagsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 gbp_tag: Optional[pulumi.Input[int]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 radius_group: Optional[pulumi.Input[str]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] type: enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        :param pulumi.Input[int] gbp_tag: required if
               - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
               - `type`==`static_gbp` (applying gbp tag against matching conditions)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] macs: required if 
               - `type`==`mac`
               - `type`==`static_gbp` if from matching mac
        :param pulumi.Input[str] network: if:
                 * `type`==`mac` (optional. default is `any`)
                 * `type`==`subnet` (optional. default is `any`)
                 * `type`==`network`
                 * `type`==`resource` (optional. default is `any`)
                 * `type`==`static_gbp` if from matching network (vlan)'
        :param pulumi.Input[str] radius_group: required if:
                 * `type`==`radius_group`
                 * `type`==`static_gbp`
               if from matching radius_group
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]] specs: if `type`==`resource`
               empty means unrestricted, i.e. any
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: if 
               - `type`==`subnet` 
               - `type`==`resource` (optional. default is `any`)
               - `type`==`static_gbp` if from matching subnet
        """
        pulumi.set(__self__, "type", type)
        if gbp_tag is not None:
            pulumi.set(__self__, "gbp_tag", gbp_tag)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if radius_group is not None:
            pulumi.set(__self__, "radius_group", radius_group)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        enum: `any`, `dynamic_gbp`, `mac`, `network`, `radius_group`, `resource`, `static_gbp`, `subnet`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="gbpTag")
    def gbp_tag(self) -> Optional[pulumi.Input[int]]:
        """
        required if
        - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
        - `type`==`static_gbp` (applying gbp tag against matching conditions)
        """
        return pulumi.get(self, "gbp_tag")

    @gbp_tag.setter
    def gbp_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gbp_tag", value)

    @property
    @pulumi.getter
    def macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required if 
        - `type`==`mac`
        - `type`==`static_gbp` if from matching mac
        """
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "macs", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        if:
          * `type`==`mac` (optional. default is `any`)
          * `type`==`subnet` (optional. default is `any`)
          * `type`==`network`
          * `type`==`resource` (optional. default is `any`)
          * `type`==`static_gbp` if from matching network (vlan)'
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="radiusGroup")
    def radius_group(self) -> Optional[pulumi.Input[str]]:
        """
        required if:
          * `type`==`radius_group`
          * `type`==`static_gbp`
        if from matching radius_group
        """
        return pulumi.get(self, "radius_group")

    @radius_group.setter
    def radius_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_group", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]]:
        """
        if `type`==`resource`
        empty means unrestricted, i.e. any
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]]):
        pulumi.set(self, "specs", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if 
        - `type`==`subnet` 
        - `type`==`resource` (optional. default is `any`)
        - `type`==`static_gbp` if from matching subnet
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class NetworktemplateAclTagsSpecArgs:
    def __init__(__self__, *,
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port_range: matched dst port, "0" means any
        :param pulumi.Input[str] protocol: `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class NetworktemplateDhcpSnoopingArgs:
    def __init__(__self__, *,
                 all_networks: Optional[pulumi.Input[bool]] = None,
                 enable_arp_spoof_check: Optional[pulumi.Input[bool]] = None,
                 enable_ip_source_guard: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enable_arp_spoof_check: Enable for dynamic ARP inspection check
        :param pulumi.Input[bool] enable_ip_source_guard: Enable for check for forging source IP address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if enable_arp_spoof_check is not None:
            pulumi.set(__self__, "enable_arp_spoof_check", enable_arp_spoof_check)
        if enable_ip_source_guard is not None:
            pulumi.set(__self__, "enable_ip_source_guard", enable_ip_source_guard)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_networks")

    @all_networks.setter
    def all_networks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_networks", value)

    @property
    @pulumi.getter(name="enableArpSpoofCheck")
    def enable_arp_spoof_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable for dynamic ARP inspection check
        """
        return pulumi.get(self, "enable_arp_spoof_check")

    @enable_arp_spoof_check.setter
    def enable_arp_spoof_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_arp_spoof_check", value)

    @property
    @pulumi.getter(name="enableIpSourceGuard")
    def enable_ip_source_guard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable for check for forging source IP address
        """
        return pulumi.get(self, "enable_ip_source_guard")

    @enable_ip_source_guard.setter
    def enable_ip_source_guard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ip_source_guard", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


@pulumi.input_type
class NetworktemplateExtraRoutes6Args:
    def __init__(__self__, *,
                 via: pulumi.Input[str],
                 discard: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 next_qualified: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]] = None,
                 no_resolve: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] via: next-hop IP Address
        :param pulumi.Input[bool] discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter
    def discard(self) -> Optional[pulumi.Input[bool]]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @discard.setter
    def discard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discard", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]]:
        return pulumi.get(self, "next_qualified")

    @next_qualified.setter
    def next_qualified(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]]):
        pulumi.set(self, "next_qualified", value)

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_resolve")

    @no_resolve.setter
    def no_resolve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_resolve", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


@pulumi.input_type
class NetworktemplateExtraRoutes6NextQualifiedArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


@pulumi.input_type
class NetworktemplateExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str],
                 discard: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 next_qualified: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]] = None,
                 no_resolve: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] via: next-hop IP Address
        :param pulumi.Input[bool] discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter
    def discard(self) -> Optional[pulumi.Input[bool]]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @discard.setter
    def discard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discard", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]]:
        return pulumi.get(self, "next_qualified")

    @next_qualified.setter
    def next_qualified(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]]):
        pulumi.set(self, "next_qualified", value)

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_resolve")

    @no_resolve.setter
    def no_resolve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_resolve", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


@pulumi.input_type
class NetworktemplateExtraRoutesNextQualifiedArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


@pulumi.input_type
class NetworktemplateMistNacArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class NetworktemplateNetworksArgs:
    def __init__(__self__, *,
                 vlan_id: pulumi.Input[str],
                 isolation: Optional[pulumi.Input[bool]] = None,
                 isolation_vlan_id: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] isolation: whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
               NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        :param pulumi.Input[str] subnet: optional for pure switching, required when L3 / routing features are used
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if isolation_vlan_id is not None:
            pulumi.set(__self__, "isolation_vlan_id", isolation_vlan_id)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
        NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        """
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="isolationVlanId")
    def isolation_vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isolation_vlan_id")

    @isolation_vlan_id.setter
    def isolation_vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isolation_vlan_id", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        optional for pure switching, required when L3 / routing features are used
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class NetworktemplatePortMirroringArgs:
    def __init__(__self__, *,
                 input_networks_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_egresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 output_network: Optional[pulumi.Input[str]] = None,
                 output_port_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[str] output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param pulumi.Input[str] output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @input_networks_ingresses.setter
    def input_networks_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_networks_ingresses", value)

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @input_port_ids_egresses.setter
    def input_port_ids_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_egresses", value)

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @input_port_ids_ingresses.setter
    def input_port_ids_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_ingresses", value)

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @output_network.setter
    def output_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_network", value)

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")

    @output_port_id.setter
    def output_port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_port_id", value)


@pulumi.input_type
class NetworktemplatePortUsagesArgs:
    def __init__(__self__, *,
                 all_networks: Optional[pulumi.Input[bool]] = None,
                 allow_dhcpd: Optional[pulumi.Input[bool]] = None,
                 allow_multiple_supplicants: Optional[pulumi.Input[bool]] = None,
                 bypass_auth_when_server_down: Optional[pulumi.Input[bool]] = None,
                 bypass_auth_when_server_down_for_unkonwn_client: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_mac_auth: Optional[pulumi.Input[bool]] = None,
                 enable_qos: Optional[pulumi.Input[bool]] = None,
                 guest_network: Optional[pulumi.Input[str]] = None,
                 inter_switch_link: Optional[pulumi.Input[bool]] = None,
                 mac_auth_only: Optional[pulumi.Input[bool]] = None,
                 mac_auth_preferred: Optional[pulumi.Input[bool]] = None,
                 mac_auth_protocol: Optional[pulumi.Input[str]] = None,
                 mac_limit: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 persist_mac: Optional[pulumi.Input[bool]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 port_auth: Optional[pulumi.Input[str]] = None,
                 port_network: Optional[pulumi.Input[str]] = None,
                 reauth_interval: Optional[pulumi.Input[int]] = None,
                 reset_default_when: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]] = None,
                 server_fail_network: Optional[pulumi.Input[str]] = None,
                 server_reject_network: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 storm_control: Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']] = None,
                 stp_edge: Optional[pulumi.Input[bool]] = None,
                 stp_no_root_port: Optional[pulumi.Input[bool]] = None,
                 stp_p2p: Optional[pulumi.Input[bool]] = None,
                 voip_network: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] all_networks: Only if `mode`==`trunk` whether to trunk all network/vlans
        :param pulumi.Input[bool] allow_dhcpd: Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.
               
               When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        :param pulumi.Input[bool] allow_multiple_supplicants: Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] bypass_auth_when_server_down: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        :param pulumi.Input[bool] bypass_auth_when_server_down_for_unkonwn_client: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        :param pulumi.Input[str] description: Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] disable_autoneg: Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        :param pulumi.Input[bool] disabled: Only if `mode`!=`dynamic` whether the port is disabled
        :param pulumi.Input[str] duplex: Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dynamic_vlan_networks: Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        :param pulumi.Input[bool] enable_mac_auth: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        :param pulumi.Input[bool] enable_qos: Only if `mode`!=`dynamic`
        :param pulumi.Input[str] guest_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        :param pulumi.Input[bool] inter_switch_link: Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
               NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        :param pulumi.Input[bool] mac_auth_only: Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        :param pulumi.Input[bool] mac_auth_preferred: Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        :param pulumi.Input[str] mac_auth_protocol: Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        :param pulumi.Input[int] mac_limit: Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        :param pulumi.Input[str] mode: `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        :param pulumi.Input[int] mtu: Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: Only if `mode`==`trunk`, the list of network/vlans
        :param pulumi.Input[bool] persist_mac: Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        :param pulumi.Input[bool] poe_disabled: Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        :param pulumi.Input[str] port_auth: Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        :param pulumi.Input[str] port_network: Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        :param pulumi.Input[int] reauth_interval: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        :param pulumi.Input[str] reset_default_when: Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]] rules: Only if `mode`==`dynamic`
        :param pulumi.Input[str] server_fail_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        :param pulumi.Input[str] server_reject_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        :param pulumi.Input[str] speed: Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        :param pulumi.Input['NetworktemplatePortUsagesStormControlArgs'] storm_control: Switch storm control
               Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] stp_edge: Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        :param pulumi.Input[str] voip_network: Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if allow_dhcpd is not None:
            pulumi.set(__self__, "allow_dhcpd", allow_dhcpd)
        if allow_multiple_supplicants is not None:
            pulumi.set(__self__, "allow_multiple_supplicants", allow_multiple_supplicants)
        if bypass_auth_when_server_down is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down", bypass_auth_when_server_down)
        if bypass_auth_when_server_down_for_unkonwn_client is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down_for_unkonwn_client", bypass_auth_when_server_down_for_unkonwn_client)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_vlan_networks is not None:
            pulumi.set(__self__, "dynamic_vlan_networks", dynamic_vlan_networks)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if enable_qos is not None:
            pulumi.set(__self__, "enable_qos", enable_qos)
        if guest_network is not None:
            pulumi.set(__self__, "guest_network", guest_network)
        if inter_switch_link is not None:
            pulumi.set(__self__, "inter_switch_link", inter_switch_link)
        if mac_auth_only is not None:
            pulumi.set(__self__, "mac_auth_only", mac_auth_only)
        if mac_auth_preferred is not None:
            pulumi.set(__self__, "mac_auth_preferred", mac_auth_preferred)
        if mac_auth_protocol is not None:
            pulumi.set(__self__, "mac_auth_protocol", mac_auth_protocol)
        if mac_limit is not None:
            pulumi.set(__self__, "mac_limit", mac_limit)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if persist_mac is not None:
            pulumi.set(__self__, "persist_mac", persist_mac)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_auth is not None:
            pulumi.set(__self__, "port_auth", port_auth)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if reauth_interval is not None:
            pulumi.set(__self__, "reauth_interval", reauth_interval)
        if reset_default_when is not None:
            pulumi.set(__self__, "reset_default_when", reset_default_when)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if server_fail_network is not None:
            pulumi.set(__self__, "server_fail_network", server_fail_network)
        if server_reject_network is not None:
            pulumi.set(__self__, "server_reject_network", server_reject_network)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_edge is not None:
            pulumi.set(__self__, "stp_edge", stp_edge)
        if stp_no_root_port is not None:
            pulumi.set(__self__, "stp_no_root_port", stp_no_root_port)
        if stp_p2p is not None:
            pulumi.set(__self__, "stp_p2p", stp_p2p)
        if voip_network is not None:
            pulumi.set(__self__, "voip_network", voip_network)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`==`trunk` whether to trunk all network/vlans
        """
        return pulumi.get(self, "all_networks")

    @all_networks.setter
    def all_networks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_networks", value)

    @property
    @pulumi.getter(name="allowDhcpd")
    def allow_dhcpd(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.

        When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        """
        return pulumi.get(self, "allow_dhcpd")

    @allow_dhcpd.setter
    def allow_dhcpd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_dhcpd", value)

    @property
    @pulumi.getter(name="allowMultipleSupplicants")
    def allow_multiple_supplicants(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "allow_multiple_supplicants")

    @allow_multiple_supplicants.setter
    def allow_multiple_supplicants(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multiple_supplicants", value)

    @property
    @pulumi.getter(name="bypassAuthWhenServerDown")
    def bypass_auth_when_server_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down")

    @bypass_auth_when_server_down.setter
    def bypass_auth_when_server_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_auth_when_server_down", value)

    @property
    @pulumi.getter(name="bypassAuthWhenServerDownForUnkonwnClient")
    def bypass_auth_when_server_down_for_unkonwn_client(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down_for_unkonwn_client")

    @bypass_auth_when_server_down_for_unkonwn_client.setter
    def bypass_auth_when_server_down_for_unkonwn_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_auth_when_server_down_for_unkonwn_client", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` whether the port is disabled
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="dynamicVlanNetworks")
    def dynamic_vlan_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        """
        return pulumi.get(self, "dynamic_vlan_networks")

    @dynamic_vlan_networks.setter
    def dynamic_vlan_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dynamic_vlan_networks", value)

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        """
        return pulumi.get(self, "enable_mac_auth")

    @enable_mac_auth.setter
    def enable_mac_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mac_auth", value)

    @property
    @pulumi.getter(name="enableQos")
    def enable_qos(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "enable_qos")

    @enable_qos.setter
    def enable_qos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_qos", value)

    @property
    @pulumi.getter(name="guestNetwork")
    def guest_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        """
        return pulumi.get(self, "guest_network")

    @guest_network.setter
    def guest_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_network", value)

    @property
    @pulumi.getter(name="interSwitchLink")
    def inter_switch_link(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
        NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        """
        return pulumi.get(self, "inter_switch_link")

    @inter_switch_link.setter
    def inter_switch_link(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inter_switch_link", value)

    @property
    @pulumi.getter(name="macAuthOnly")
    def mac_auth_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        """
        return pulumi.get(self, "mac_auth_only")

    @mac_auth_only.setter
    def mac_auth_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mac_auth_only", value)

    @property
    @pulumi.getter(name="macAuthPreferred")
    def mac_auth_preferred(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        """
        return pulumi.get(self, "mac_auth_preferred")

    @mac_auth_preferred.setter
    def mac_auth_preferred(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mac_auth_preferred", value)

    @property
    @pulumi.getter(name="macAuthProtocol")
    def mac_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        """
        return pulumi.get(self, "mac_auth_protocol")

    @mac_auth_protocol.setter
    def mac_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_auth_protocol", value)

    @property
    @pulumi.getter(name="macLimit")
    def mac_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        """
        return pulumi.get(self, "mac_limit")

    @mac_limit.setter
    def mac_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_limit", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `mode`==`trunk`, the list of network/vlans
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="persistMac")
    def persist_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        """
        return pulumi.get(self, "persist_mac")

    @persist_mac.setter
    def persist_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_mac", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        """
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter(name="portAuth")
    def port_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        """
        return pulumi.get(self, "port_auth")

    @port_auth.setter
    def port_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_auth", value)

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        """
        return pulumi.get(self, "port_network")

    @port_network.setter
    def port_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_network", value)

    @property
    @pulumi.getter(name="reauthInterval")
    def reauth_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        """
        return pulumi.get(self, "reauth_interval")

    @reauth_interval.setter
    def reauth_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_interval", value)

    @property
    @pulumi.getter(name="resetDefaultWhen")
    def reset_default_when(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        """
        return pulumi.get(self, "reset_default_when")

    @reset_default_when.setter
    def reset_default_when(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset_default_when", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]]:
        """
        Only if `mode`==`dynamic`
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="serverFailNetwork")
    def server_fail_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        """
        return pulumi.get(self, "server_fail_network")

    @server_fail_network.setter
    def server_fail_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_fail_network", value)

    @property
    @pulumi.getter(name="serverRejectNetwork")
    def server_reject_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        """
        return pulumi.get(self, "server_reject_network")

    @server_reject_network.setter
    def server_reject_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reject_network", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']]:
        """
        Switch storm control
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpEdge")
    def stp_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        """
        return pulumi.get(self, "stp_edge")

    @stp_edge.setter
    def stp_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_edge", value)

    @property
    @pulumi.getter(name="stpNoRootPort")
    def stp_no_root_port(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stp_no_root_port")

    @stp_no_root_port.setter
    def stp_no_root_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_no_root_port", value)

    @property
    @pulumi.getter(name="stpP2p")
    def stp_p2p(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stp_p2p")

    @stp_p2p.setter
    def stp_p2p(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_p2p", value)

    @property
    @pulumi.getter(name="voipNetwork")
    def voip_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        return pulumi.get(self, "voip_network")

    @voip_network.setter
    def voip_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_network", value)


@pulumi.input_type
class NetworktemplatePortUsagesRuleArgs:
    def __init__(__self__, *,
                 src: pulumi.Input[str],
                 equals: Optional[pulumi.Input[str]] = None,
                 equals_anies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] src: enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] equals_anies: use `equals_any` to match any item in a list
        :param pulumi.Input[str] expression: "[0:3]":"abcdef" > "abc"
               "split(.)[1]": "a.b.c" > "b"
               "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        :param pulumi.Input[str] usage: `port_usage` name
        """
        pulumi.set(__self__, "src", src)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if equals_anies is not None:
            pulumi.set(__self__, "equals_anies", equals_anies)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def src(self) -> pulumi.Input[str]:
        """
        enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: pulumi.Input[str]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def equals(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "equals")

    @equals.setter
    def equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equals", value)

    @property
    @pulumi.getter(name="equalsAnies")
    def equals_anies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        use `equals_any` to match any item in a list
        """
        return pulumi.get(self, "equals_anies")

    @equals_anies.setter
    def equals_anies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "equals_anies", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        "[0:3]":"abcdef" > "abc"
        "split(.)[1]": "a.b.c" > "b"
        "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        """
        `port_usage` name
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class NetworktemplatePortUsagesStormControlArgs:
    def __init__(__self__, *,
                 no_broadcast: Optional[pulumi.Input[bool]] = None,
                 no_multicast: Optional[pulumi.Input[bool]] = None,
                 no_registered_multicast: Optional[pulumi.Input[bool]] = None,
                 no_unknown_unicast: Optional[pulumi.Input[bool]] = None,
                 percentage: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] no_broadcast: whether to disable storm control on broadcast traffic
        :param pulumi.Input[bool] no_multicast: whether to disable storm control on multicast traffic
        :param pulumi.Input[bool] no_registered_multicast: whether to disable storm control on registered multicast traffic
        :param pulumi.Input[bool] no_unknown_unicast: whether to disable storm control on unknown unicast traffic
        :param pulumi.Input[int] percentage: bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        if no_broadcast is not None:
            pulumi.set(__self__, "no_broadcast", no_broadcast)
        if no_multicast is not None:
            pulumi.set(__self__, "no_multicast", no_multicast)
        if no_registered_multicast is not None:
            pulumi.set(__self__, "no_registered_multicast", no_registered_multicast)
        if no_unknown_unicast is not None:
            pulumi.set(__self__, "no_unknown_unicast", no_unknown_unicast)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="noBroadcast")
    def no_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on broadcast traffic
        """
        return pulumi.get(self, "no_broadcast")

    @no_broadcast.setter
    def no_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_broadcast", value)

    @property
    @pulumi.getter(name="noMulticast")
    def no_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on multicast traffic
        """
        return pulumi.get(self, "no_multicast")

    @no_multicast.setter
    def no_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_multicast", value)

    @property
    @pulumi.getter(name="noRegisteredMulticast")
    def no_registered_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on registered multicast traffic
        """
        return pulumi.get(self, "no_registered_multicast")

    @no_registered_multicast.setter
    def no_registered_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_registered_multicast", value)

    @property
    @pulumi.getter(name="noUnknownUnicast")
    def no_unknown_unicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on unknown unicast traffic
        """
        return pulumi.get(self, "no_unknown_unicast")

    @no_unknown_unicast.setter
    def no_unknown_unicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_unknown_unicast", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        """
        bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class NetworktemplateRadiusConfigArgs:
    def __init__(__self__, *,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]] = None,
                 auth_servers_retries: Optional[pulumi.Input[int]] = None,
                 auth_servers_timeout: Optional[pulumi.Input[int]] = None,
                 coa_enabled: Optional[pulumi.Input[bool]] = None,
                 coa_port: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] acct_interim_interval: how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        :param pulumi.Input[int] auth_servers_retries: radius auth session retries
        :param pulumi.Input[int] auth_servers_timeout: radius auth session timeout
        :param pulumi.Input[str] network: use `network`or `source_ip`
               which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        :param pulumi.Input[str] source_ip: use `network`or `source_ip`
        """
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if auth_servers_retries is not None:
            pulumi.set(__self__, "auth_servers_retries", auth_servers_retries)
        if auth_servers_timeout is not None:
            pulumi.set(__self__, "auth_servers_timeout", auth_servers_timeout)
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if coa_port is not None:
            pulumi.set(__self__, "coa_port", coa_port)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        """
        how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        """
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]]:
        return pulumi.get(self, "auth_servers")

    @auth_servers.setter
    def auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]]):
        pulumi.set(self, "auth_servers", value)

    @property
    @pulumi.getter(name="authServersRetries")
    def auth_servers_retries(self) -> Optional[pulumi.Input[int]]:
        """
        radius auth session retries
        """
        return pulumi.get(self, "auth_servers_retries")

    @auth_servers_retries.setter
    def auth_servers_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_servers_retries", value)

    @property
    @pulumi.getter(name="authServersTimeout")
    def auth_servers_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        radius auth session timeout
        """
        return pulumi.get(self, "auth_servers_timeout")

    @auth_servers_timeout.setter
    def auth_servers_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_servers_timeout", value)

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "coa_enabled")

    @coa_enabled.setter
    def coa_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "coa_enabled", value)

    @property
    @pulumi.getter(name="coaPort")
    def coa_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "coa_port")

    @coa_port.setter
    def coa_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "coa_port", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        use `network`or `source_ip`
        which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        use `network`or `source_ip`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class NetworktemplateRadiusConfigAcctServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class NetworktemplateRadiusConfigAuthServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 require_message_authenticator: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Auth port of RADIUS server
        :param pulumi.Input[bool] require_message_authenticator: whether to require Message-Authenticator in requests
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if require_message_authenticator is not None:
            pulumi.set(__self__, "require_message_authenticator", require_message_authenticator)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="requireMessageAuthenticator")
    def require_message_authenticator(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to require Message-Authenticator in requests
        """
        return pulumi.get(self, "require_message_authenticator")

    @require_message_authenticator.setter
    def require_message_authenticator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_message_authenticator", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogArgs:
    def __init__(__self__, *,
                 archive: Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']] = None,
                 console: Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 send_to_all_servers: Optional[pulumi.Input[bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]] = None):
        """
        :param pulumi.Input[str] network: if source_address is configured, will use the vlan firstly otherwise use source_ip
        :param pulumi.Input[str] time_format: enum: `millisecond`, `year`, `year millisecond`
        """
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if send_to_all_servers is not None:
            pulumi.set(__self__, "send_to_all_servers", send_to_all_servers)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def console(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']]:
        return pulumi.get(self, "console")

    @console.setter
    def console(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']]):
        pulumi.set(self, "console", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="sendToAllServers")
    def send_to_all_servers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_to_all_servers")

    @send_to_all_servers.setter
    def send_to_all_servers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_to_all_servers", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `millisecond`, `year`, `year millisecond`
        """
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogArchiveArgs:
    def __init__(__self__, *,
                 files: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogConsoleArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]]):
        pulumi.set(self, "contents", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogConsoleContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogFileArgs:
    def __init__(__self__, *,
                 archive: Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]] = None,
                 explicit_priority: Optional[pulumi.Input[bool]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 structured_data: Optional[pulumi.Input[bool]] = None):
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "explicit_priority")

    @explicit_priority.setter
    def explicit_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_priority", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "structured_data")

    @structured_data.setter
    def structured_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "structured_data", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogFileArchiveArgs:
    def __init__(__self__, *,
                 files: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogFileContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogServerArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]] = None,
                 explicit_priority: Optional[pulumi.Input[bool]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routing_instance: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 structured_data: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] protocol: enum: `tcp`, `udp`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        :param pulumi.Input[str] source_address: if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routing_instance is not None:
            pulumi.set(__self__, "routing_instance", routing_instance)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "explicit_priority")

    @explicit_priority.setter
    def explicit_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_priority", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="routingInstance")
    def routing_instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routing_instance")

    @routing_instance.setter
    def routing_instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_instance", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[pulumi.Input[str]]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address", value)

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "structured_data")

    @structured_data.setter
    def structured_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "structured_data", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogServerContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogUserArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class NetworktemplateRemoteSyslogUserContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class NetworktemplateSnmpConfigArgs:
    def __init__(__self__, *,
                 client_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 trap_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]] = None,
                 v2c_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]] = None,
                 v3_config: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]] = None):
        """
        :param pulumi.Input[str] engine_id: enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        if client_lists is not None:
            pulumi.set(__self__, "client_lists", client_lists)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if trap_groups is not None:
            pulumi.set(__self__, "trap_groups", trap_groups)
        if v2c_configs is not None:
            pulumi.set(__self__, "v2c_configs", v2c_configs)
        if v3_config is not None:
            pulumi.set(__self__, "v3_config", v3_config)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="clientLists")
    def client_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]]:
        return pulumi.get(self, "client_lists")

    @client_lists.setter
    def client_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]]):
        pulumi.set(self, "client_lists", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="trapGroups")
    def trap_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]]:
        return pulumi.get(self, "trap_groups")

    @trap_groups.setter
    def trap_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]]):
        pulumi.set(self, "trap_groups", value)

    @property
    @pulumi.getter(name="v2cConfigs")
    def v2c_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]]:
        return pulumi.get(self, "v2c_configs")

    @v2c_configs.setter
    def v2c_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]]):
        pulumi.set(self, "v2c_configs", value)

    @property
    @pulumi.getter(name="v3Config")
    def v3_config(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']]:
        return pulumi.get(self, "v3_config")

    @v3_config.setter
    def v3_config(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']]):
        pulumi.set(self, "v3_config", value)

    @property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]]:
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]]):
        pulumi.set(self, "views", value)


@pulumi.input_type
class NetworktemplateSnmpConfigClientListArgs:
    def __init__(__self__, *,
                 client_list_name: Optional[pulumi.Input[str]] = None,
                 clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if clients is not None:
            pulumi.set(__self__, "clients", clients)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_list_name")

    @client_list_name.setter
    def client_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_list_name", value)

    @property
    @pulumi.getter
    def clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "clients")

    @clients.setter
    def clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clients", value)


@pulumi.input_type
class NetworktemplateSnmpConfigTrapGroupArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_name: Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        :param pulumi.Input[str] version: enum: `all`, `v1`, `v2`
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `all`, `v1`, `v2`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV2cConfigArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input[str]] = None,
                 client_list_name: Optional[pulumi.Input[str]] = None,
                 community_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_list_name: client_list_name here should refer to client_list above
        :param pulumi.Input[str] view: view name here should be defined in views above
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[pulumi.Input[str]]:
        """
        client_list_name here should refer to client_list above
        """
        return pulumi.get(self, "client_list_name")

    @client_list_name.setter
    def client_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_list_name", value)

    @property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_name")

    @community_name.setter
    def community_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        view name here should be defined in views above
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigArgs:
    def __init__(__self__, *,
                 notifies: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]] = None,
                 notify_filters: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]] = None,
                 target_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]] = None,
                 target_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]] = None,
                 usm: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']] = None,
                 vacm: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']] = None):
        if notifies is not None:
            pulumi.set(__self__, "notifies", notifies)
        if notify_filters is not None:
            pulumi.set(__self__, "notify_filters", notify_filters)
        if target_addresses is not None:
            pulumi.set(__self__, "target_addresses", target_addresses)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)
        if usm is not None:
            pulumi.set(__self__, "usm", usm)
        if vacm is not None:
            pulumi.set(__self__, "vacm", vacm)

    @property
    @pulumi.getter
    def notifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]]:
        return pulumi.get(self, "notifies")

    @notifies.setter
    def notifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]]):
        pulumi.set(self, "notifies", value)

    @property
    @pulumi.getter(name="notifyFilters")
    def notify_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]]:
        return pulumi.get(self, "notify_filters")

    @notify_filters.setter
    def notify_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]]):
        pulumi.set(self, "notify_filters", value)

    @property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]]:
        return pulumi.get(self, "target_addresses")

    @target_addresses.setter
    def target_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]]):
        pulumi.set(self, "target_addresses", value)

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]]:
        return pulumi.get(self, "target_parameters")

    @target_parameters.setter
    def target_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]]):
        pulumi.set(self, "target_parameters", value)

    @property
    @pulumi.getter
    def usm(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']]:
        return pulumi.get(self, "usm")

    @usm.setter
    def usm(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']]):
        pulumi.set(self, "usm", value)

    @property
    @pulumi.getter
    def vacm(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']]:
        return pulumi.get(self, "vacm")

    @vacm.setter
    def vacm(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']]):
        pulumi.set(self, "vacm", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `inform`, `trap`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `inform`, `trap`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_name", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs:
    def __init__(__self__, *,
                 include: Optional[pulumi.Input[bool]] = None,
                 oid: Optional[pulumi.Input[str]] = None):
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigTargetAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 address_mask: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tag_list: Optional[pulumi.Input[str]] = None,
                 target_address_name: Optional[pulumi.Input[str]] = None,
                 target_parameters: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_list: <refer to notify tag, can be multiple with blank
        :param pulumi.Input[str] target_parameters: refer to notify target parameters name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_mask is not None:
            pulumi.set(__self__, "address_mask", address_mask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tag_list is not None:
            pulumi.set(__self__, "tag_list", tag_list)
        if target_address_name is not None:
            pulumi.set(__self__, "target_address_name", target_address_name)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressMask")
    def address_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_mask")

    @address_mask.setter
    def address_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_mask", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="tagList")
    def tag_list(self) -> Optional[pulumi.Input[str]]:
        """
        <refer to notify tag, can be multiple with blank
        """
        return pulumi.get(self, "tag_list")

    @tag_list.setter
    def tag_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_list", value)

    @property
    @pulumi.getter(name="targetAddressName")
    def target_address_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_address_name")

    @target_address_name.setter
    def target_address_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_address_name", value)

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        refer to notify target parameters name
        """
        return pulumi.get(self, "target_parameters")

    @target_parameters.setter
    def target_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_parameters", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigTargetParameterArgs:
    def __init__(__self__, *,
                 message_processing_model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_filter: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 security_model: Optional[pulumi.Input[str]] = None,
                 security_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] message_processing_model: enum: `v1`, `v2c`, `v3`
        :param pulumi.Input[str] notify_filter: refer to profile-name in notify_filter
        :param pulumi.Input[str] security_level: enum: `authentication`, `none`, `privacy`
        :param pulumi.Input[str] security_model: enum: `usm`, `v1`, `v2c`
        :param pulumi.Input[str] security_name: refer to security_name in usm
        """
        if message_processing_model is not None:
            pulumi.set(__self__, "message_processing_model", message_processing_model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_filter is not None:
            pulumi.set(__self__, "notify_filter", notify_filter)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter(name="messageProcessingModel")
    def message_processing_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `v1`, `v2c`, `v3`
        """
        return pulumi.get(self, "message_processing_model")

    @message_processing_model.setter
    def message_processing_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_processing_model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyFilter")
    def notify_filter(self) -> Optional[pulumi.Input[str]]:
        """
        refer to profile-name in notify_filter
        """
        return pulumi.get(self, "notify_filter")

    @notify_filter.setter
    def notify_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_filter", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[pulumi.Input[str]]:
        """
        refer to security_name in usm
        """
        return pulumi.get(self, "security_name")

    @security_name.setter
    def security_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_name", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigUsmArgs:
    def __init__(__self__, *,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engineid: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]] = None):
        """
        :param pulumi.Input[str] engine_type: enum: `local_engine`, `remote_engine`
        :param pulumi.Input[str] engineid: required only if `engine_type`==`remote_engine`
        """
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engineid is not None:
            pulumi.set(__self__, "engineid", engineid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local_engine`, `remote_engine`
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter
    def engineid(self) -> Optional[pulumi.Input[str]]:
        """
        required only if `engine_type`==`remote_engine`
        """
        return pulumi.get(self, "engineid")

    @engineid.setter
    def engineid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engineid", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigUsmUserArgs:
    def __init__(__self__, *,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 encryption_password: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication_password: Not required if `authentication_type`==`authentication_none`
               include alphabetic, numeric, and special characters, but it cannot include control characters.
        :param pulumi.Input[str] authentication_type: sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        :param pulumi.Input[str] encryption_password: Not required if `encryption_type`==`privacy-none`
               include alphabetic, numeric, and special characters, but it cannot include control characters
        :param pulumi.Input[str] encryption_type: enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if encryption_password is not None:
            pulumi.set(__self__, "encryption_password", encryption_password)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[str]]:
        """
        Not required if `authentication_type`==`authentication_none`
        include alphabetic, numeric, and special characters, but it cannot include control characters.
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_password", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="encryptionPassword")
    def encryption_password(self) -> Optional[pulumi.Input[str]]:
        """
        Not required if `encryption_type`==`privacy-none`
        include alphabetic, numeric, and special characters, but it cannot include control characters
        """
        return pulumi.get(self, "encryption_password")

    @encryption_password.setter
    def encryption_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_password", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmArgs:
    def __init__(__self__, *,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]] = None,
                 security_to_group: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if security_to_group is not None:
            pulumi.set(__self__, "security_to_group", security_to_group)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]]):
        pulumi.set(self, "accesses", value)

    @property
    @pulumi.getter(name="securityToGroup")
    def security_to_group(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']]:
        return pulumi.get(self, "security_to_group")

    @security_to_group.setter
    def security_to_group(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']]):
        pulumi.set(self, "security_to_group", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmAccessArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]]:
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]]):
        pulumi.set(self, "prefix_lists", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs:
    def __init__(__self__, *,
                 context_prefix: Optional[pulumi.Input[str]] = None,
                 notify_view: Optional[pulumi.Input[str]] = None,
                 read_view: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 security_model: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 write_view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] context_prefix: only required if `type`==`context_prefix`
        :param pulumi.Input[str] notify_view: refer to view name
        :param pulumi.Input[str] read_view: refer to view name
        :param pulumi.Input[str] security_level: enum: `authentication`, `none`, `privacy`
        :param pulumi.Input[str] security_model: enum: `any`, `usm`, `v1`, `v2c`
        :param pulumi.Input[str] type: enum: `context_prefix`, `default_context_prefix`
        :param pulumi.Input[str] write_view: refer to view name
        """
        if context_prefix is not None:
            pulumi.set(__self__, "context_prefix", context_prefix)
        if notify_view is not None:
            pulumi.set(__self__, "notify_view", notify_view)
        if read_view is not None:
            pulumi.set(__self__, "read_view", read_view)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if write_view is not None:
            pulumi.set(__self__, "write_view", write_view)

    @property
    @pulumi.getter(name="contextPrefix")
    def context_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        only required if `type`==`context_prefix`
        """
        return pulumi.get(self, "context_prefix")

    @context_prefix.setter
    def context_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_prefix", value)

    @property
    @pulumi.getter(name="notifyView")
    def notify_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "notify_view")

    @notify_view.setter
    def notify_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_view", value)

    @property
    @pulumi.getter(name="readView")
    def read_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "read_view")

    @read_view.setter
    def read_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_view", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `context_prefix`, `default_context_prefix`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="writeView")
    def write_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "write_view")

    @write_view.setter
    def write_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_view", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]] = None,
                 security_model: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] security_model: enum: `usm`, `v1`, `v2c`
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)


@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 security_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group: refer to group_name under access
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        refer to group_name under access
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_name")

    @security_name.setter
    def security_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_name", value)


@pulumi.input_type
class NetworktemplateSnmpConfigViewArgs:
    def __init__(__self__, *,
                 include: Optional[pulumi.Input[bool]] = None,
                 oid: Optional[pulumi.Input[str]] = None,
                 view_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include: if the root oid configured is included
        """
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[bool]]:
        """
        if the root oid configured is included
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_name")

    @view_name.setter
    def view_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_name", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingRuleArgs:
    def __init__(__self__, *,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_config: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']] = None,
                 match_role: Optional[pulumi.Input[str]] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 match_value: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oob_ip_config: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config
               
               **Note**: no check is done
        :param pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs'] ip_config: In-Band Management interface configuration
        :param pulumi.Input[str] match_role: role to match
        :param pulumi.Input[str] match_type: 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        :param pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs'] oob_ip_config: Out-of-Band Management interface configuration
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]] port_config: Propery key is the interface name or interface range
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name
               port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if match_role is not None:
            pulumi.set(__self__, "match_role", match_role)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config

        **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']]:
        """
        In-Band Management interface configuration
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter(name="matchRole")
    def match_role(self) -> Optional[pulumi.Input[str]]:
        """
        role to match
        """
        return pulumi.get(self, "match_role")

    @match_role.setter
    def match_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_role", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        """
        'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']]:
        """
        Out-of-Band Management interface configuration
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]]:
        """
        Propery key is the interface name or interface range
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name
        port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output.
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingRuleIpConfigArgs:
    def __init__(__self__, *,
                 network: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] network: VLAN Name for the management interface
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        """
        if network is not None:
            pulumi.set(__self__, "network", network)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN Name for the management interface
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingRuleOobIpConfigArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: f supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        f supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingRulePortConfigArgs:
    def __init__(__self__, *,
                 usage: pulumi.Input[str],
                 ae_disable_lacp: Optional[pulumi.Input[bool]] = None,
                 ae_idx: Optional[pulumi.Input[int]] = None,
                 ae_lacp_slow: Optional[pulumi.Input[bool]] = None,
                 aggregated: Optional[pulumi.Input[bool]] = None,
                 critical: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 dynamic_usage: Optional[pulumi.Input[str]] = None,
                 esilag: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 no_local_overwrite: Optional[pulumi.Input[bool]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 speed: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] usage: port usage name. 
               
               If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        :param pulumi.Input[bool] ae_disable_lacp: To disable LACP support for the AE interface
        :param pulumi.Input[int] ae_idx: Users could force to use the designated AE name
        :param pulumi.Input[bool] ae_lacp_slow: to use fast timeout
        :param pulumi.Input[bool] critical: if want to generate port up/down alarm
        :param pulumi.Input[bool] disable_autoneg: if `speed` and `duplex` are specified, whether to disable autonegotiation
        :param pulumi.Input[str] duplex: enum: `auto`, `full`, `half`
        :param pulumi.Input[str] dynamic_usage: Enable dynamic usage for this port. Set to `dynamic` to enable.
        :param pulumi.Input[int] mtu: media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        :param pulumi.Input[bool] no_local_overwrite: prevent helpdesk to override the port config
        :param pulumi.Input[str] speed: enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_slow is not None:
            pulumi.set(__self__, "ae_lacp_slow", ae_lacp_slow)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_usage is not None:
            pulumi.set(__self__, "dynamic_usage", dynamic_usage)
        if esilag is not None:
            pulumi.set(__self__, "esilag", esilag)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if no_local_overwrite is not None:
            pulumi.set(__self__, "no_local_overwrite", no_local_overwrite)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[str]:
        """
        port usage name. 

        If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[pulumi.Input[bool]]:
        """
        To disable LACP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @ae_disable_lacp.setter
    def ae_disable_lacp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_disable_lacp", value)

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[pulumi.Input[int]]:
        """
        Users could force to use the designated AE name
        """
        return pulumi.get(self, "ae_idx")

    @ae_idx.setter
    def ae_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ae_idx", value)

    @property
    @pulumi.getter(name="aeLacpSlow")
    def ae_lacp_slow(self) -> Optional[pulumi.Input[bool]]:
        """
        to use fast timeout
        """
        return pulumi.get(self, "ae_lacp_slow")

    @ae_lacp_slow.setter
    def ae_lacp_slow(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_lacp_slow", value)

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aggregated")

    @aggregated.setter
    def aggregated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aggregated", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if want to generate port up/down alarm
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        """
        if `speed` and `duplex` are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="dynamicUsage")
    def dynamic_usage(self) -> Optional[pulumi.Input[str]]:
        """
        Enable dynamic usage for this port. Set to `dynamic` to enable.
        """
        return pulumi.get(self, "dynamic_usage")

    @dynamic_usage.setter
    def dynamic_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_usage", value)

    @property
    @pulumi.getter
    def esilag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "esilag")

    @esilag.setter
    def esilag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "esilag", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="noLocalOverwrite")
    def no_local_overwrite(self) -> Optional[pulumi.Input[bool]]:
        """
        prevent helpdesk to override the port config
        """
        return pulumi.get(self, "no_local_overwrite")

    @no_local_overwrite.setter
    def no_local_overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_local_overwrite", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)


@pulumi.input_type
class NetworktemplateSwitchMatchingRulePortMirroringArgs:
    def __init__(__self__, *,
                 input_networks_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_egresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 output_network: Optional[pulumi.Input[str]] = None,
                 output_port_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[str] output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param pulumi.Input[str] output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @input_networks_ingresses.setter
    def input_networks_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_networks_ingresses", value)

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @input_port_ids_egresses.setter
    def input_port_ids_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_egresses", value)

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @input_port_ids_ingresses.setter
    def input_port_ids_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_ingresses", value)

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @output_network.setter
    def output_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_network", value)

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")

    @output_port_id.setter
    def output_port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_port_id", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtArgs:
    def __init__(__self__, *,
                 ap_affinity_threshold: Optional[pulumi.Input[int]] = None,
                 cli_banner: Optional[pulumi.Input[str]] = None,
                 cli_idle_timeout: Optional[pulumi.Input[int]] = None,
                 config_revert_timer: Optional[pulumi.Input[int]] = None,
                 dhcp_option_fqdn: Optional[pulumi.Input[bool]] = None,
                 disable_oob_down_alarm: Optional[pulumi.Input[bool]] = None,
                 local_accounts: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]] = None,
                 mxedge_proxy_host: Optional[pulumi.Input[str]] = None,
                 mxedge_proxy_port: Optional[pulumi.Input[int]] = None,
                 protect_re: Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 tacacs: Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']] = None,
                 use_mxedge_proxy: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] ap_affinity_threshold: ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        :param pulumi.Input[str] cli_banner: Set Banners for switches. Allows markup formatting
        :param pulumi.Input[int] cli_idle_timeout: Sets timeout for switches
        :param pulumi.Input[int] config_revert_timer: the rollback timer for commit confirmed
        :param pulumi.Input[bool] dhcp_option_fqdn: Enable to provide the FQDN with DHCP option 81
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]] local_accounts: Property key is the user name. For Local user authentication
        :param pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs'] protect_re: restrict inbound-traffic to host
               when enabled, all traffic that is not essential to our operation will be dropped 
               e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[bool] use_mxedge_proxy: to use mxedge as proxy
        """
        if ap_affinity_threshold is not None:
            pulumi.set(__self__, "ap_affinity_threshold", ap_affinity_threshold)
        if cli_banner is not None:
            pulumi.set(__self__, "cli_banner", cli_banner)
        if cli_idle_timeout is not None:
            pulumi.set(__self__, "cli_idle_timeout", cli_idle_timeout)
        if config_revert_timer is not None:
            pulumi.set(__self__, "config_revert_timer", config_revert_timer)
        if dhcp_option_fqdn is not None:
            pulumi.set(__self__, "dhcp_option_fqdn", dhcp_option_fqdn)
        if disable_oob_down_alarm is not None:
            pulumi.set(__self__, "disable_oob_down_alarm", disable_oob_down_alarm)
        if local_accounts is not None:
            pulumi.set(__self__, "local_accounts", local_accounts)
        if mxedge_proxy_host is not None:
            pulumi.set(__self__, "mxedge_proxy_host", mxedge_proxy_host)
        if mxedge_proxy_port is not None:
            pulumi.set(__self__, "mxedge_proxy_port", mxedge_proxy_port)
        if protect_re is not None:
            pulumi.set(__self__, "protect_re", protect_re)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if tacacs is not None:
            pulumi.set(__self__, "tacacs", tacacs)
        if use_mxedge_proxy is not None:
            pulumi.set(__self__, "use_mxedge_proxy", use_mxedge_proxy)

    @property
    @pulumi.getter(name="apAffinityThreshold")
    def ap_affinity_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        return pulumi.get(self, "ap_affinity_threshold")

    @ap_affinity_threshold.setter
    def ap_affinity_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_affinity_threshold", value)

    @property
    @pulumi.getter(name="cliBanner")
    def cli_banner(self) -> Optional[pulumi.Input[str]]:
        """
        Set Banners for switches. Allows markup formatting
        """
        return pulumi.get(self, "cli_banner")

    @cli_banner.setter
    def cli_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_banner", value)

    @property
    @pulumi.getter(name="cliIdleTimeout")
    def cli_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Sets timeout for switches
        """
        return pulumi.get(self, "cli_idle_timeout")

    @cli_idle_timeout.setter
    def cli_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_idle_timeout", value)

    @property
    @pulumi.getter(name="configRevertTimer")
    def config_revert_timer(self) -> Optional[pulumi.Input[int]]:
        """
        the rollback timer for commit confirmed
        """
        return pulumi.get(self, "config_revert_timer")

    @config_revert_timer.setter
    def config_revert_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_revert_timer", value)

    @property
    @pulumi.getter(name="dhcpOptionFqdn")
    def dhcp_option_fqdn(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to provide the FQDN with DHCP option 81
        """
        return pulumi.get(self, "dhcp_option_fqdn")

    @dhcp_option_fqdn.setter
    def dhcp_option_fqdn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_option_fqdn", value)

    @property
    @pulumi.getter(name="disableOobDownAlarm")
    def disable_oob_down_alarm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_oob_down_alarm")

    @disable_oob_down_alarm.setter
    def disable_oob_down_alarm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_oob_down_alarm", value)

    @property
    @pulumi.getter(name="localAccounts")
    def local_accounts(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]]:
        """
        Property key is the user name. For Local user authentication
        """
        return pulumi.get(self, "local_accounts")

    @local_accounts.setter
    def local_accounts(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]]):
        pulumi.set(self, "local_accounts", value)

    @property
    @pulumi.getter(name="mxedgeProxyHost")
    def mxedge_proxy_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mxedge_proxy_host")

    @mxedge_proxy_host.setter
    def mxedge_proxy_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mxedge_proxy_host", value)

    @property
    @pulumi.getter(name="mxedgeProxyPort")
    def mxedge_proxy_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mxedge_proxy_port")

    @mxedge_proxy_port.setter
    def mxedge_proxy_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mxedge_proxy_port", value)

    @property
    @pulumi.getter(name="protectRe")
    def protect_re(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']]:
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "protect_re")

    @protect_re.setter
    def protect_re(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']]):
        pulumi.set(self, "protect_re", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter
    def tacacs(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']]:
        return pulumi.get(self, "tacacs")

    @tacacs.setter
    def tacacs(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']]):
        pulumi.set(self, "tacacs", value)

    @property
    @pulumi.getter(name="useMxedgeProxy")
    def use_mxedge_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        to use mxedge as proxy
        """
        return pulumi.get(self, "use_mxedge_proxy")

    @use_mxedge_proxy.setter
    def use_mxedge_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mxedge_proxy", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtLocalAccountsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role: enum: `admin`, `helpdesk`, `none`, `read`
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtProtectReArgs:
    def __init__(__self__, *,
                 allowed_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 customs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 trusted_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_services: optionally, services we'll allow
        :param pulumi.Input[bool] enabled: when enabled, all traffic that is not essential to our operation will be dropped
               e.g. ntp / dns / traffic to mist will be allowed by default
                    if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trusted_hosts: host/subnets we'll allow traffic to/from
        """
        if allowed_services is not None:
            pulumi.set(__self__, "allowed_services", allowed_services)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if trusted_hosts is not None:
            pulumi.set(__self__, "trusted_hosts", trusted_hosts)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optionally, services we'll allow
        """
        return pulumi.get(self, "allowed_services")

    @allowed_services.setter
    def allowed_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_services", value)

    @property
    @pulumi.getter
    def customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]]:
        return pulumi.get(self, "customs")

    @customs.setter
    def customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]]):
        pulumi.set(self, "customs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trustedHosts")
    def trusted_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        host/subnets we'll allow traffic to/from
        """
        return pulumi.get(self, "trusted_hosts")

    @trusted_hosts.setter
    def trusted_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_hosts", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtProtectReCustomArgs:
    def __init__(__self__, *,
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] port_range: matched dst port, "0" means any
        :param pulumi.Input[str] protocol: enum: `any`, `icmp`, `tcp`, `udp`
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `icmp`, `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsArgs:
    def __init__(__self__, *,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 tacplus_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]] = None):
        """
        :param pulumi.Input[str] default_role: enum: `admin`, `helpdesk`, `none`, `read`
        :param pulumi.Input[str] network: which network the TACACS server resides
        """
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if tacplus_servers is not None:
            pulumi.set(__self__, "tacplus_servers", tacplus_servers)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        which network the TACACS server resides
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="tacplusServers")
    def tacplus_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]]:
        return pulumi.get(self, "tacplus_servers")

    @tacplus_servers.setter
    def tacplus_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]]):
        pulumi.set(self, "tacplus_servers", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsAcctServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsTacplusServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class NetworktemplateVrfConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class NetworktemplateVrfInstancesArgs:
    def __init__(__self__, *,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


@pulumi.input_type
class NetworktemplateVrfInstancesExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        """
        :param pulumi.Input[str] via: Next-hop address
        """
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        Next-hop address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


@pulumi.input_type
class RftemplateBand24Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateBand5Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateBand5On24RadioArgs:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateBand6Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None,
                 standard_power: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        :param pulumi.Input[bool] standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[pulumi.Input[bool]]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")

    @standard_power.setter
    def standard_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_power", value)


@pulumi.input_type
class RftemplateModelSpecificArgs:
    def __init__(__self__, *,
                 ant_gain24: Optional[pulumi.Input[int]] = None,
                 ant_gain5: Optional[pulumi.Input[int]] = None,
                 ant_gain6: Optional[pulumi.Input[int]] = None,
                 band24: Optional[pulumi.Input['RftemplateModelSpecificBand24Args']] = None,
                 band24_usage: Optional[pulumi.Input[str]] = None,
                 band5: Optional[pulumi.Input['RftemplateModelSpecificBand5Args']] = None,
                 band5_on24_radio: Optional[pulumi.Input['RftemplateModelSpecificBand5On24RadioArgs']] = None,
                 band6: Optional[pulumi.Input['RftemplateModelSpecificBand6Args']] = None):
        """
        :param pulumi.Input['RftemplateModelSpecificBand24Args'] band24: Radio Band AP settings
        :param pulumi.Input[str] band24_usage: enum: `24`, `5`, `6`, `auto`
        :param pulumi.Input['RftemplateModelSpecificBand5Args'] band5: Radio Band AP settings
        :param pulumi.Input['RftemplateModelSpecificBand5On24RadioArgs'] band5_on24_radio: Radio Band AP settings
        :param pulumi.Input['RftemplateModelSpecificBand6Args'] band6: Radio Band AP settings
        """
        if ant_gain24 is not None:
            pulumi.set(__self__, "ant_gain24", ant_gain24)
        if ant_gain5 is not None:
            pulumi.set(__self__, "ant_gain5", ant_gain5)
        if ant_gain6 is not None:
            pulumi.set(__self__, "ant_gain6", ant_gain6)
        if band24 is not None:
            pulumi.set(__self__, "band24", band24)
        if band24_usage is not None:
            pulumi.set(__self__, "band24_usage", band24_usage)
        if band5 is not None:
            pulumi.set(__self__, "band5", band5)
        if band5_on24_radio is not None:
            pulumi.set(__self__, "band5_on24_radio", band5_on24_radio)
        if band6 is not None:
            pulumi.set(__self__, "band6", band6)

    @property
    @pulumi.getter(name="antGain24")
    def ant_gain24(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain24")

    @ant_gain24.setter
    def ant_gain24(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain24", value)

    @property
    @pulumi.getter(name="antGain5")
    def ant_gain5(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain5")

    @ant_gain5.setter
    def ant_gain5(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain5", value)

    @property
    @pulumi.getter(name="antGain6")
    def ant_gain6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain6")

    @ant_gain6.setter
    def ant_gain6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain6", value)

    @property
    @pulumi.getter
    def band24(self) -> Optional[pulumi.Input['RftemplateModelSpecificBand24Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band24")

    @band24.setter
    def band24(self, value: Optional[pulumi.Input['RftemplateModelSpecificBand24Args']]):
        pulumi.set(self, "band24", value)

    @property
    @pulumi.getter(name="band24Usage")
    def band24_usage(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `24`, `5`, `6`, `auto`
        """
        return pulumi.get(self, "band24_usage")

    @band24_usage.setter
    def band24_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band24_usage", value)

    @property
    @pulumi.getter
    def band5(self) -> Optional[pulumi.Input['RftemplateModelSpecificBand5Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5")

    @band5.setter
    def band5(self, value: Optional[pulumi.Input['RftemplateModelSpecificBand5Args']]):
        pulumi.set(self, "band5", value)

    @property
    @pulumi.getter(name="band5On24Radio")
    def band5_on24_radio(self) -> Optional[pulumi.Input['RftemplateModelSpecificBand5On24RadioArgs']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band5_on24_radio")

    @band5_on24_radio.setter
    def band5_on24_radio(self, value: Optional[pulumi.Input['RftemplateModelSpecificBand5On24RadioArgs']]):
        pulumi.set(self, "band5_on24_radio", value)

    @property
    @pulumi.getter
    def band6(self) -> Optional[pulumi.Input['RftemplateModelSpecificBand6Args']]:
        """
        Radio Band AP settings
        """
        return pulumi.get(self, "band6")

    @band6.setter
    def band6(self, value: Optional[pulumi.Input['RftemplateModelSpecificBand6Args']]):
        pulumi.set(self, "band6", value)


@pulumi.input_type
class RftemplateModelSpecificBand24Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 2.4GHz band. enum: `20`, `40`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 2.4GHz band. enum: `20`, `40`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateModelSpecificBand5Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateModelSpecificBand5On24RadioArgs:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 5GHz band. enum: `20`, `40`, `80`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 5GHz band. enum: `20`, `40`, `80`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)


@pulumi.input_type
class RftemplateModelSpecificBand6Args:
    def __init__(__self__, *,
                 allow_rrm_disable: Optional[pulumi.Input[bool]] = None,
                 ant_gain: Optional[pulumi.Input[int]] = None,
                 antenna_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_max: Optional[pulumi.Input[int]] = None,
                 power_min: Optional[pulumi.Input[int]] = None,
                 preamble: Optional[pulumi.Input[str]] = None,
                 standard_power: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] antenna_mode: enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        :param pulumi.Input[int] bandwidth: channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] channels: For RFTemplates. List of channels, null or empty array means auto
        :param pulumi.Input[bool] disabled: whether to disable the radio
        :param pulumi.Input[int] power: TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        :param pulumi.Input[int] power_max: when power=0, max tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[int] power_min: when power=0, min tx power to use, HW-specific values will be used if not set
        :param pulumi.Input[str] preamble: enum: `auto`, `long`, `short`
        :param pulumi.Input[bool] standard_power: for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        if allow_rrm_disable is not None:
            pulumi.set(__self__, "allow_rrm_disable", allow_rrm_disable)
        if ant_gain is not None:
            pulumi.set(__self__, "ant_gain", ant_gain)
        if antenna_mode is not None:
            pulumi.set(__self__, "antenna_mode", antenna_mode)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_max is not None:
            pulumi.set(__self__, "power_max", power_max)
        if power_min is not None:
            pulumi.set(__self__, "power_min", power_min)
        if preamble is not None:
            pulumi.set(__self__, "preamble", preamble)
        if standard_power is not None:
            pulumi.set(__self__, "standard_power", standard_power)

    @property
    @pulumi.getter(name="allowRrmDisable")
    def allow_rrm_disable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_rrm_disable")

    @allow_rrm_disable.setter
    def allow_rrm_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_rrm_disable", value)

    @property
    @pulumi.getter(name="antGain")
    def ant_gain(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ant_gain")

    @ant_gain.setter
    def ant_gain(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ant_gain", value)

    @property
    @pulumi.getter(name="antennaMode")
    def antenna_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `1x1`, `2x2`, `3x3`, `4x4`, `default`
        """
        return pulumi.get(self, "antenna_mode")

    @antenna_mode.setter
    def antenna_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antenna_mode", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        channel width for the 6GHz band. enum: `20`, `40`, `80`, `160`
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        For RFTemplates. List of channels, null or empty array means auto
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable the radio
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        TX power of the radio. For Devices, 0 means auto. -1 / -2 / -3 / …: treated as 0 / -1 / -2 / …
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMax")
    def power_max(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, max tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_max")

    @power_max.setter
    def power_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_max", value)

    @property
    @pulumi.getter(name="powerMin")
    def power_min(self) -> Optional[pulumi.Input[int]]:
        """
        when power=0, min tx power to use, HW-specific values will be used if not set
        """
        return pulumi.get(self, "power_min")

    @power_min.setter
    def power_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_min", value)

    @property
    @pulumi.getter
    def preamble(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `long`, `short`
        """
        return pulumi.get(self, "preamble")

    @preamble.setter
    def preamble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preamble", value)

    @property
    @pulumi.getter(name="standardPower")
    def standard_power(self) -> Optional[pulumi.Input[bool]]:
        """
        for 6GHz Only, standard-power operation, AFC (Automatic Frequency Coordination) will be performed and we'll fallback to Low Power Indoor if AFC failed
        """
        return pulumi.get(self, "standard_power")

    @standard_power.setter
    def standard_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_power", value)


@pulumi.input_type
class ServiceSpecArgs:
    def __init__(__self__, *,
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port_range: port number, port range, or variable
        :param pulumi.Input[str] protocol: `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
               `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        port number, port range, or variable
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        `https`/ `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`.
        `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class ServicepolicyAppqoeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ServicepolicyEwfArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] profile: enum: `critical`, `standard`, `strict`
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `critical`, `standard`, `strict`
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class ServicepolicyIdpArgs:
    def __init__(__self__, *,
                 alert_only: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 idpprofile_id: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idpprofile_id: org_level IDP Profile can be used, this takes precedence over `profile`
        :param pulumi.Input[str] profile: `strict` (default) / `standard` / or keys from from idp_profiles
        """
        if alert_only is not None:
            pulumi.set(__self__, "alert_only", alert_only)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idpprofile_id is not None:
            pulumi.set(__self__, "idpprofile_id", idpprofile_id)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="alertOnly")
    def alert_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alert_only")

    @alert_only.setter
    def alert_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_only", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idpprofileId")
    def idpprofile_id(self) -> Optional[pulumi.Input[str]]:
        """
        org_level IDP Profile can be used, this takes precedence over `profile`
        """
        return pulumi.get(self, "idpprofile_id")

    @idpprofile_id.setter
    def idpprofile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idpprofile_id", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        `strict` (default) / `standard` / or keys from from idp_profiles
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class SettingApiPolicyArgs:
    def __init__(__self__, *,
                 no_reveal: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] no_reveal: by default, API hides password/secrets when the user doesn't have write access
                 * `true`: API will hide passwords/secrets for all users
                 * `false`: API will hide passwords/secrets for read-only users
        """
        if no_reveal is not None:
            pulumi.set(__self__, "no_reveal", no_reveal)

    @property
    @pulumi.getter(name="noReveal")
    def no_reveal(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, API hides password/secrets when the user doesn't have write access
          * `true`: API will hide passwords/secrets for all users
          * `false`: API will hide passwords/secrets for read-only users
        """
        return pulumi.get(self, "no_reveal")

    @no_reveal.setter
    def no_reveal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_reveal", value)


@pulumi.input_type
class SettingCelonaArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 api_prefix: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_prefix", api_prefix)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiPrefix")
    def api_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_prefix")

    @api_prefix.setter
    def api_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_prefix", value)


@pulumi.input_type
class SettingCloudsharkArgs:
    def __init__(__self__, *,
                 apitoken: pulumi.Input[str],
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: if using CS Enteprise
        """
        pulumi.set(__self__, "apitoken", apitoken)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def apitoken(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apitoken")

    @apitoken.setter
    def apitoken(self, value: pulumi.Input[str]):
        pulumi.set(self, "apitoken", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        if using CS Enteprise
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SettingCradlepointArgs:
    def __init__(__self__, *,
                 cp_api_id: pulumi.Input[str],
                 cp_api_key: pulumi.Input[str],
                 ecm_api_id: pulumi.Input[str],
                 ecm_api_key: pulumi.Input[str]):
        pulumi.set(__self__, "cp_api_id", cp_api_id)
        pulumi.set(__self__, "cp_api_key", cp_api_key)
        pulumi.set(__self__, "ecm_api_id", ecm_api_id)
        pulumi.set(__self__, "ecm_api_key", ecm_api_key)

    @property
    @pulumi.getter(name="cpApiId")
    def cp_api_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cp_api_id")

    @cp_api_id.setter
    def cp_api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cp_api_id", value)

    @property
    @pulumi.getter(name="cpApiKey")
    def cp_api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cp_api_key")

    @cp_api_key.setter
    def cp_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "cp_api_key", value)

    @property
    @pulumi.getter(name="ecmApiId")
    def ecm_api_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ecm_api_id")

    @ecm_api_id.setter
    def ecm_api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ecm_api_id", value)

    @property
    @pulumi.getter(name="ecmApiKey")
    def ecm_api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ecm_api_key")

    @ecm_api_key.setter
    def ecm_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ecm_api_key", value)


@pulumi.input_type
class SettingDeviceCertArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[str],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class SettingInstallerArgs:
    def __init__(__self__, *,
                 allow_all_devices: Optional[pulumi.Input[bool]] = None,
                 allow_all_sites: Optional[pulumi.Input[bool]] = None,
                 extra_site_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None):
        if allow_all_devices is not None:
            pulumi.set(__self__, "allow_all_devices", allow_all_devices)
        if allow_all_sites is not None:
            pulumi.set(__self__, "allow_all_sites", allow_all_sites)
        if extra_site_ids is not None:
            pulumi.set(__self__, "extra_site_ids", extra_site_ids)
        if grace_period is not None:
            pulumi.set(__self__, "grace_period", grace_period)

    @property
    @pulumi.getter(name="allowAllDevices")
    def allow_all_devices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_all_devices")

    @allow_all_devices.setter
    def allow_all_devices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_devices", value)

    @property
    @pulumi.getter(name="allowAllSites")
    def allow_all_sites(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_all_sites")

    @allow_all_sites.setter
    def allow_all_sites(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_sites", value)

    @property
    @pulumi.getter(name="extraSiteIds")
    def extra_site_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_site_ids")

    @extra_site_ids.setter
    def extra_site_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_site_ids", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)


@pulumi.input_type
class SettingJcloudArgs:
    def __init__(__self__, *,
                 org_apitoken: pulumi.Input[str],
                 org_apitoken_name: pulumi.Input[str],
                 org_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] org_apitoken: JCloud Org Token
        :param pulumi.Input[str] org_apitoken_name: JCloud Org Token Name
        :param pulumi.Input[str] org_id: JCloud Org ID
        """
        pulumi.set(__self__, "org_apitoken", org_apitoken)
        pulumi.set(__self__, "org_apitoken_name", org_apitoken_name)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="orgApitoken")
    def org_apitoken(self) -> pulumi.Input[str]:
        """
        JCloud Org Token
        """
        return pulumi.get(self, "org_apitoken")

    @org_apitoken.setter
    def org_apitoken(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_apitoken", value)

    @property
    @pulumi.getter(name="orgApitokenName")
    def org_apitoken_name(self) -> pulumi.Input[str]:
        """
        JCloud Org Token Name
        """
        return pulumi.get(self, "org_apitoken_name")

    @org_apitoken_name.setter
    def org_apitoken_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_apitoken_name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        """
        JCloud Org ID
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)


@pulumi.input_type
class SettingJuniperArgs:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input[Sequence[pulumi.Input['SettingJuniperAccountArgs']]]] = None):
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingJuniperAccountArgs']]]]:
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingJuniperAccountArgs']]]]):
        pulumi.set(self, "accounts", value)


@pulumi.input_type
class SettingJuniperAccountArgs:
    def __init__(__self__, *,
                 linked_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if linked_by is not None:
            pulumi.set(__self__, "linked_by", linked_by)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="linkedBy")
    def linked_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "linked_by")

    @linked_by.setter
    def linked_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SettingMgmtArgs:
    def __init__(__self__, *,
                 mxtunnel_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_mxtunnel: Optional[pulumi.Input[bool]] = None,
                 use_wxtunnel: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mxtunnel_ids: list of Mist Tunnels
        :param pulumi.Input[bool] use_mxtunnel: whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
        :param pulumi.Input[bool] use_wxtunnel: whether to use wxtunnel for mgmt connectivity
        """
        if mxtunnel_ids is not None:
            pulumi.set(__self__, "mxtunnel_ids", mxtunnel_ids)
        if use_mxtunnel is not None:
            pulumi.set(__self__, "use_mxtunnel", use_mxtunnel)
        if use_wxtunnel is not None:
            pulumi.set(__self__, "use_wxtunnel", use_wxtunnel)

    @property
    @pulumi.getter(name="mxtunnelIds")
    def mxtunnel_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of Mist Tunnels
        """
        return pulumi.get(self, "mxtunnel_ids")

    @mxtunnel_ids.setter
    def mxtunnel_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mxtunnel_ids", value)

    @property
    @pulumi.getter(name="useMxtunnel")
    def use_mxtunnel(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use Mist Tunnel for mgmt connectivity, this takes precedence over use_wxtunnel
        """
        return pulumi.get(self, "use_mxtunnel")

    @use_mxtunnel.setter
    def use_mxtunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mxtunnel", value)

    @property
    @pulumi.getter(name="useWxtunnel")
    def use_wxtunnel(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to use wxtunnel for mgmt connectivity
        """
        return pulumi.get(self, "use_wxtunnel")

    @use_wxtunnel.setter
    def use_wxtunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_wxtunnel", value)


@pulumi.input_type
class SettingMistNacArgs:
    def __init__(__self__, *,
                 cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_idp_id: Optional[pulumi.Input[str]] = None,
                 disable_rsae_algorithms: Optional[pulumi.Input[bool]] = None,
                 eap_ssl_security_level: Optional[pulumi.Input[int]] = None,
                 eu_only: Optional[pulumi.Input[bool]] = None,
                 idp_machine_cert_lookup_field: Optional[pulumi.Input[str]] = None,
                 idp_user_cert_lookup_field: Optional[pulumi.Input[str]] = None,
                 idps: Optional[pulumi.Input[Sequence[pulumi.Input['SettingMistNacIdpArgs']]]] = None,
                 server_cert: Optional[pulumi.Input['SettingMistNacServerCertArgs']] = None,
                 use_ip_version: Optional[pulumi.Input[str]] = None,
                 use_ssl_port: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cacerts: list of PEM-encoded ca certs
        :param pulumi.Input[str] default_idp_id: use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
        :param pulumi.Input[bool] disable_rsae_algorithms: to disable RSAE_PSS_SHA256, RSAE_PSS_SHA384, RSAE_PSS_SHA512 from server side. see https://www.openssl.org/docs/man3.0/man1/openssl-ciphers.html
        :param pulumi.Input[int] eap_ssl_security_level: eap ssl security level
               see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
        :param pulumi.Input[bool] eu_only: By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
               For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled
        :param pulumi.Input[str] idp_machine_cert_lookup_field: allow customer to choose the EAP-TLS client certificate's field to use for IDP Machine Groups lookup
        :param pulumi.Input[str] idp_user_cert_lookup_field: allow customer to choose the EAP-TLS client certificate's field to use for IDP User Groups lookup
        :param pulumi.Input['SettingMistNacServerCertArgs'] server_cert: radius server cert to be presented in EAP TLS
        :param pulumi.Input[str] use_ip_version: by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
        :param pulumi.Input[bool] use_ssl_port: By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac. 
               Set `use_ssl_port`==`true` to override that port with TCP43 (ssl), 
               This is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled
        """
        if cacerts is not None:
            pulumi.set(__self__, "cacerts", cacerts)
        if default_idp_id is not None:
            pulumi.set(__self__, "default_idp_id", default_idp_id)
        if disable_rsae_algorithms is not None:
            pulumi.set(__self__, "disable_rsae_algorithms", disable_rsae_algorithms)
        if eap_ssl_security_level is not None:
            pulumi.set(__self__, "eap_ssl_security_level", eap_ssl_security_level)
        if eu_only is not None:
            pulumi.set(__self__, "eu_only", eu_only)
        if idp_machine_cert_lookup_field is not None:
            pulumi.set(__self__, "idp_machine_cert_lookup_field", idp_machine_cert_lookup_field)
        if idp_user_cert_lookup_field is not None:
            pulumi.set(__self__, "idp_user_cert_lookup_field", idp_user_cert_lookup_field)
        if idps is not None:
            pulumi.set(__self__, "idps", idps)
        if server_cert is not None:
            pulumi.set(__self__, "server_cert", server_cert)
        if use_ip_version is not None:
            pulumi.set(__self__, "use_ip_version", use_ip_version)
        if use_ssl_port is not None:
            pulumi.set(__self__, "use_ssl_port", use_ssl_port)

    @property
    @pulumi.getter
    def cacerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of PEM-encoded ca certs
        """
        return pulumi.get(self, "cacerts")

    @cacerts.setter
    def cacerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cacerts", value)

    @property
    @pulumi.getter(name="defaultIdpId")
    def default_idp_id(self) -> Optional[pulumi.Input[str]]:
        """
        use this IDP when no explicit realm present in the incoming username/CN OR when no IDP is explicitly mapped to the incoming realm.
        """
        return pulumi.get(self, "default_idp_id")

    @default_idp_id.setter
    def default_idp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_idp_id", value)

    @property
    @pulumi.getter(name="disableRsaeAlgorithms")
    def disable_rsae_algorithms(self) -> Optional[pulumi.Input[bool]]:
        """
        to disable RSAE_PSS_SHA256, RSAE_PSS_SHA384, RSAE_PSS_SHA512 from server side. see https://www.openssl.org/docs/man3.0/man1/openssl-ciphers.html
        """
        return pulumi.get(self, "disable_rsae_algorithms")

    @disable_rsae_algorithms.setter
    def disable_rsae_algorithms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_rsae_algorithms", value)

    @property
    @pulumi.getter(name="eapSslSecurityLevel")
    def eap_ssl_security_level(self) -> Optional[pulumi.Input[int]]:
        """
        eap ssl security level
        see https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_security_level.html#DEFAULT-CALLBACK-BEHAVIOUR
        """
        return pulumi.get(self, "eap_ssl_security_level")

    @eap_ssl_security_level.setter
    def eap_ssl_security_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eap_ssl_security_level", value)

    @property
    @pulumi.getter(name="euOnly")
    def eu_only(self) -> Optional[pulumi.Input[bool]]:
        """
        By default NAC POD failover considers all NAC pods available around the globe, i.e. EU, US, or APAC based, failover happens based on geo IP of the originating site.
        For strict GDPR compliancy NAC POD failover would only happen between the PODs located within the EU environment, and no authentication would take place outside of EU. This is an org setting that is applicable to WLANs, switch templates, mxedge clusters that have mist_nac enabled
        """
        return pulumi.get(self, "eu_only")

    @eu_only.setter
    def eu_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eu_only", value)

    @property
    @pulumi.getter(name="idpMachineCertLookupField")
    def idp_machine_cert_lookup_field(self) -> Optional[pulumi.Input[str]]:
        """
        allow customer to choose the EAP-TLS client certificate's field to use for IDP Machine Groups lookup
        """
        return pulumi.get(self, "idp_machine_cert_lookup_field")

    @idp_machine_cert_lookup_field.setter
    def idp_machine_cert_lookup_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_machine_cert_lookup_field", value)

    @property
    @pulumi.getter(name="idpUserCertLookupField")
    def idp_user_cert_lookup_field(self) -> Optional[pulumi.Input[str]]:
        """
        allow customer to choose the EAP-TLS client certificate's field to use for IDP User Groups lookup
        """
        return pulumi.get(self, "idp_user_cert_lookup_field")

    @idp_user_cert_lookup_field.setter
    def idp_user_cert_lookup_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_user_cert_lookup_field", value)

    @property
    @pulumi.getter
    def idps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingMistNacIdpArgs']]]]:
        return pulumi.get(self, "idps")

    @idps.setter
    def idps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingMistNacIdpArgs']]]]):
        pulumi.set(self, "idps", value)

    @property
    @pulumi.getter(name="serverCert")
    def server_cert(self) -> Optional[pulumi.Input['SettingMistNacServerCertArgs']]:
        """
        radius server cert to be presented in EAP TLS
        """
        return pulumi.get(self, "server_cert")

    @server_cert.setter
    def server_cert(self, value: Optional[pulumi.Input['SettingMistNacServerCertArgs']]):
        pulumi.set(self, "server_cert", value)

    @property
    @pulumi.getter(name="useIpVersion")
    def use_ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        by default NAS devices(switches/aps) and proxies(mxedge) are configured to reach mist-nac via IPv4. enum: `v4`, `v6`
        """
        return pulumi.get(self, "use_ip_version")

    @use_ip_version.setter
    def use_ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_ip_version", value)

    @property
    @pulumi.getter(name="useSslPort")
    def use_ssl_port(self) -> Optional[pulumi.Input[bool]]:
        """
        By default NAS devices (switches/aps) and proxies(mxedge) are configured to use port TCP2083(radsec) to reach mist-nac. 
        Set `use_ssl_port`==`true` to override that port with TCP43 (ssl), 
        This is a org level setting that is applicable to wlans, switch_templates, and mxedge_clusters that have mist-nac enabled
        """
        return pulumi.get(self, "use_ssl_port")

    @use_ssl_port.setter
    def use_ssl_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ssl_port", value)


@pulumi.input_type
class SettingMistNacIdpArgs:
    def __init__(__self__, *,
                 exclude_realms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 user_realms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_realms: when the IDP of mxedge_proxy type, exclude the following realms from proxying in addition to other valid home realms in this org
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_realms: which realm should trigger this IDP. User Realm is extracted from:
                 * Username-AVP (`mist.com` from john@mist.com)
                 * Cert CN
        """
        if exclude_realms is not None:
            pulumi.set(__self__, "exclude_realms", exclude_realms)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if user_realms is not None:
            pulumi.set(__self__, "user_realms", user_realms)

    @property
    @pulumi.getter(name="excludeRealms")
    def exclude_realms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when the IDP of mxedge_proxy type, exclude the following realms from proxying in addition to other valid home realms in this org
        """
        return pulumi.get(self, "exclude_realms")

    @exclude_realms.setter
    def exclude_realms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_realms", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="userRealms")
    def user_realms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        which realm should trigger this IDP. User Realm is extracted from:
          * Username-AVP (`mist.com` from john@mist.com)
          * Cert CN
        """
        return pulumi.get(self, "user_realms")

    @user_realms.setter
    def user_realms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_realms", value)


@pulumi.input_type
class SettingMistNacServerCertArgs:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: private key password (optional)
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        private key password (optional)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class SettingMxedgeMgmtArgs:
    def __init__(__self__, *,
                 fips_enabled: Optional[pulumi.Input[bool]] = None,
                 mist_password: Optional[pulumi.Input[str]] = None,
                 oob_ip_type: Optional[pulumi.Input[str]] = None,
                 oob_ip_type6: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] oob_ip_type: enum: `dhcp`, `disabled`, `static`
        :param pulumi.Input[str] oob_ip_type6: enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        if fips_enabled is not None:
            pulumi.set(__self__, "fips_enabled", fips_enabled)
        if mist_password is not None:
            pulumi.set(__self__, "mist_password", mist_password)
        if oob_ip_type is not None:
            pulumi.set(__self__, "oob_ip_type", oob_ip_type)
        if oob_ip_type6 is not None:
            pulumi.set(__self__, "oob_ip_type6", oob_ip_type6)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)

    @property
    @pulumi.getter(name="fipsEnabled")
    def fips_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fips_enabled")

    @fips_enabled.setter
    def fips_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fips_enabled", value)

    @property
    @pulumi.getter(name="mistPassword")
    def mist_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mist_password")

    @mist_password.setter
    def mist_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mist_password", value)

    @property
    @pulumi.getter(name="oobIpType")
    def oob_ip_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "oob_ip_type")

    @oob_ip_type.setter
    def oob_ip_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_ip_type", value)

    @property
    @pulumi.getter(name="oobIpType6")
    def oob_ip_type6(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `autoconf`, `dhcp`, `disabled`, `static`
        """
        return pulumi.get(self, "oob_ip_type6")

    @oob_ip_type6.setter
    def oob_ip_type6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oob_ip_type6", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)


@pulumi.input_type
class SettingPasswordPolicyArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expiry_in_days: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 requires_special_char: Optional[pulumi.Input[bool]] = None,
                 requires_two_factor_auth: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether the policy is enabled
        :param pulumi.Input[int] expiry_in_days: password expiry in days
        :param pulumi.Input[int] min_length: required password length
        :param pulumi.Input[bool] requires_special_char: whether to require special character
        :param pulumi.Input[bool] requires_two_factor_auth: whether to require two-factor auth
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expiry_in_days is not None:
            pulumi.set(__self__, "expiry_in_days", expiry_in_days)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if requires_special_char is not None:
            pulumi.set(__self__, "requires_special_char", requires_special_char)
        if requires_two_factor_auth is not None:
            pulumi.set(__self__, "requires_two_factor_auth", requires_two_factor_auth)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether the policy is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expiryInDays")
    def expiry_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        password expiry in days
        """
        return pulumi.get(self, "expiry_in_days")

    @expiry_in_days.setter
    def expiry_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expiry_in_days", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        """
        required password length
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="requiresSpecialChar")
    def requires_special_char(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to require special character
        """
        return pulumi.get(self, "requires_special_char")

    @requires_special_char.setter
    def requires_special_char(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_special_char", value)

    @property
    @pulumi.getter(name="requiresTwoFactorAuth")
    def requires_two_factor_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to require two-factor auth
        """
        return pulumi.get(self, "requires_two_factor_auth")

    @requires_two_factor_auth.setter
    def requires_two_factor_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "requires_two_factor_auth", value)


@pulumi.input_type
class SettingPcapArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 max_pkt_len: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_pkt_len: max_len of non-management packets to capture
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if max_pkt_len is not None:
            pulumi.set(__self__, "max_pkt_len", max_pkt_len)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="maxPktLen")
    def max_pkt_len(self) -> Optional[pulumi.Input[int]]:
        """
        max_len of non-management packets to capture
        """
        return pulumi.get(self, "max_pkt_len")

    @max_pkt_len.setter
    def max_pkt_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pkt_len", value)


@pulumi.input_type
class SettingPortChannelizationArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Property key is the interface name or range (e.g. `et-0/0/47`, `et-0/0/48-49`), Property value is the interface speed (e.g. `25g`, `50g`)
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Property key is the interface name or range (e.g. `et-0/0/47`, `et-0/0/48-49`), Property value is the interface speed (e.g. `25g`, `50g`)
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class SettingSecurityArgs:
    def __init__(__self__, *,
                 disable_local_ssh: Optional[pulumi.Input[bool]] = None,
                 fips_zeroize_password: Optional[pulumi.Input[str]] = None,
                 limit_ssh_access: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] disable_local_ssh: whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
        :param pulumi.Input[str] fips_zeroize_password: password required to zeroize devices (FIPS) on site level
        :param pulumi.Input[bool] limit_ssh_access: whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
        """
        if disable_local_ssh is not None:
            pulumi.set(__self__, "disable_local_ssh", disable_local_ssh)
        if fips_zeroize_password is not None:
            pulumi.set(__self__, "fips_zeroize_password", fips_zeroize_password)
        if limit_ssh_access is not None:
            pulumi.set(__self__, "limit_ssh_access", limit_ssh_access)

    @property
    @pulumi.getter(name="disableLocalSsh")
    def disable_local_ssh(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable local SSH (by default, local SSH is enabled with allow_mist in Org is enabled
        """
        return pulumi.get(self, "disable_local_ssh")

    @disable_local_ssh.setter
    def disable_local_ssh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local_ssh", value)

    @property
    @pulumi.getter(name="fipsZeroizePassword")
    def fips_zeroize_password(self) -> Optional[pulumi.Input[str]]:
        """
        password required to zeroize devices (FIPS) on site level
        """
        return pulumi.get(self, "fips_zeroize_password")

    @fips_zeroize_password.setter
    def fips_zeroize_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fips_zeroize_password", value)

    @property
    @pulumi.getter(name="limitSshAccess")
    def limit_ssh_access(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow certain SSH keys to SSH into the AP (see Site:Setting)
        """
        return pulumi.get(self, "limit_ssh_access")

    @limit_ssh_access.setter
    def limit_ssh_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "limit_ssh_access", value)


@pulumi.input_type
class SettingSwitchMgmtArgs:
    def __init__(__self__, *,
                 ap_affinity_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] ap_affinity_threshold: If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        if ap_affinity_threshold is not None:
            pulumi.set(__self__, "ap_affinity_threshold", ap_affinity_threshold)

    @property
    @pulumi.getter(name="apAffinityThreshold")
    def ap_affinity_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        return pulumi.get(self, "ap_affinity_threshold")

    @ap_affinity_threshold.setter
    def ap_affinity_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_affinity_threshold", value)


@pulumi.input_type
class SettingSyntheticTestArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]] = None,
                 wan_speedtest: Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)
        if wan_speedtest is not None:
            pulumi.set(__self__, "wan_speedtest", wan_speedtest)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]]:
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]]):
        pulumi.set(self, "vlans", value)

    @property
    @pulumi.getter(name="wanSpeedtest")
    def wan_speedtest(self) -> Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']]:
        return pulumi.get(self, "wan_speedtest")

    @wan_speedtest.setter
    def wan_speedtest(self, value: Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']]):
        pulumi.set(self, "wan_speedtest", value)


@pulumi.input_type
class SettingSyntheticTestVlanArgs:
    def __init__(__self__, *,
                 custom_test_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] disabled: for some vlans where we don't want this to run
        """
        if custom_test_urls is not None:
            pulumi.set(__self__, "custom_test_urls", custom_test_urls)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="customTestUrls")
    def custom_test_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_test_urls")

    @custom_test_urls.setter
    def custom_test_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_test_urls", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        for some vlans where we don't want this to run
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vlan_ids", value)


@pulumi.input_type
class SettingSyntheticTestWanSpeedtestArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 time_od_fay: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] time_od_fay: any / HH:MM (24-hour format)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if time_od_fay is not None:
            pulumi.set(__self__, "time_od_fay", time_od_fay)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="timeOdFay")
    def time_od_fay(self) -> Optional[pulumi.Input[str]]:
        """
        any / HH:MM (24-hour format)
        """
        return pulumi.get(self, "time_od_fay")

    @time_od_fay.setter
    def time_od_fay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_od_fay", value)


@pulumi.input_type
class SettingVpnOptionsArgs:
    def __init__(__self__, *,
                 as_base: Optional[pulumi.Input[int]] = None,
                 st_subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] st_subnet: equiring /12 or bigger to support 16 private IPs for 65535 gateways
        """
        if as_base is not None:
            pulumi.set(__self__, "as_base", as_base)
        if st_subnet is not None:
            pulumi.set(__self__, "st_subnet", st_subnet)

    @property
    @pulumi.getter(name="asBase")
    def as_base(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "as_base")

    @as_base.setter
    def as_base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "as_base", value)

    @property
    @pulumi.getter(name="stSubnet")
    def st_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        equiring /12 or bigger to support 16 private IPs for 65535 gateways
        """
        return pulumi.get(self, "st_subnet")

    @st_subnet.setter
    def st_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "st_subnet", value)


@pulumi.input_type
class VpnPathsArgs:
    def __init__(__self__, *,
                 bfd_profile: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 pod: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] bfd_profile: enum: `broadband`, `lte`
        :param pulumi.Input[str] ip: if different from the wan port
        """
        if bfd_profile is not None:
            pulumi.set(__self__, "bfd_profile", bfd_profile)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pod is not None:
            pulumi.set(__self__, "pod", pod)

    @property
    @pulumi.getter(name="bfdProfile")
    def bfd_profile(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `broadband`, `lte`
        """
        return pulumi.get(self, "bfd_profile")

    @bfd_profile.setter
    def bfd_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_profile", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        if different from the wan port
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pod", value)


@pulumi.input_type
class WlanAcctServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WlanAirwatchArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 console_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] api_key: API Key
        :param pulumi.Input[str] console_url: console URL
        :param pulumi.Input[str] password: password
        :param pulumi.Input[str] username: username
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "console_url", console_url)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API Key
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> pulumi.Input[str]:
        """
        console URL
        """
        return pulumi.get(self, "console_url")

    @console_url.setter
    def console_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "console_url", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WlanAppLimitArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 wxtag_ids: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] apps: Map from app key to bandwidth in kbps. 
               Property key is the app key, defined in Get Application List
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] wxtag_ids: Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
               Property key is the wxtag id
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if wxtag_ids is not None:
            pulumi.set(__self__, "wxtag_ids", wxtag_ids)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        Map from app key to bandwidth in kbps. 
        Property key is the app key, defined in Get Application List
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="wxtagIds")
    def wxtag_ids(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
        Property key is the wxtag id
        """
        return pulumi.get(self, "wxtag_ids")

    @wxtag_ids.setter
    def wxtag_ids(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "wxtag_ids", value)


@pulumi.input_type
class WlanAppQosArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 others: Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]] = None):
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if others is not None:
            pulumi.set(__self__, "others", others)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]]:
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def others(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]]:
        return pulumi.get(self, "others")

    @others.setter
    def others(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]]):
        pulumi.set(self, "others", value)


@pulumi.input_type
class WlanAppQosAppsArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        :param pulumi.Input[str] src_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


@pulumi.input_type
class WlanAppQosOtherArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 port_ranges: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


@pulumi.input_type
class WlanAuthArgs:
    def __init__(__self__, *,
                 anticlog_threshold: Optional[pulumi.Input[int]] = None,
                 eap_reauth: Optional[pulumi.Input[bool]] = None,
                 enable_mac_auth: Optional[pulumi.Input[bool]] = None,
                 key_idx: Optional[pulumi.Input[int]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 multi_psk_only: Optional[pulumi.Input[bool]] = None,
                 owe: Optional[pulumi.Input[str]] = None,
                 pairwises: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_wlan: Optional[pulumi.Input[bool]] = None,
                 psk: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wep_as_secondary_auth: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] anticlog_threshold: SAE anti-clogging token threshold
        :param pulumi.Input[bool] eap_reauth: whether to trigger EAP reauth when the session ends
        :param pulumi.Input[bool] enable_mac_auth: whether to enable MAC Auth, uses the same auth_servers
        :param pulumi.Input[int] key_idx: when `type`==`wep`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] keys: when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        :param pulumi.Input[bool] multi_psk_only: when `type`==`psk`, whether to only use multi_psk
        :param pulumi.Input[str] owe: if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pairwises: when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        :param pulumi.Input[bool] private_wlan: when `multi_psk_only`==`true`, whether private wlan is enabled
        :param pulumi.Input[str] psk: when `type`==`psk`, 8-64 characters, or 64 hex characters
        :param pulumi.Input[str] type: enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        :param pulumi.Input[bool] wep_as_secondary_auth: enable WEP as secondary auth
        """
        if anticlog_threshold is not None:
            pulumi.set(__self__, "anticlog_threshold", anticlog_threshold)
        if eap_reauth is not None:
            pulumi.set(__self__, "eap_reauth", eap_reauth)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if key_idx is not None:
            pulumi.set(__self__, "key_idx", key_idx)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if multi_psk_only is not None:
            pulumi.set(__self__, "multi_psk_only", multi_psk_only)
        if owe is not None:
            pulumi.set(__self__, "owe", owe)
        if pairwises is not None:
            pulumi.set(__self__, "pairwises", pairwises)
        if private_wlan is not None:
            pulumi.set(__self__, "private_wlan", private_wlan)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wep_as_secondary_auth is not None:
            pulumi.set(__self__, "wep_as_secondary_auth", wep_as_secondary_auth)

    @property
    @pulumi.getter(name="anticlogThreshold")
    def anticlog_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        SAE anti-clogging token threshold
        """
        return pulumi.get(self, "anticlog_threshold")

    @anticlog_threshold.setter
    def anticlog_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anticlog_threshold", value)

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to trigger EAP reauth when the session ends
        """
        return pulumi.get(self, "eap_reauth")

    @eap_reauth.setter
    def eap_reauth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eap_reauth", value)

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable MAC Auth, uses the same auth_servers
        """
        return pulumi.get(self, "enable_mac_auth")

    @enable_mac_auth.setter
    def enable_mac_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mac_auth", value)

    @property
    @pulumi.getter(name="keyIdx")
    def key_idx(self) -> Optional[pulumi.Input[int]]:
        """
        when `type`==`wep`
        """
        return pulumi.get(self, "key_idx")

    @key_idx.setter
    def key_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_idx", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="multiPskOnly")
    def multi_psk_only(self) -> Optional[pulumi.Input[bool]]:
        """
        when `type`==`psk`, whether to only use multi_psk
        """
        return pulumi.get(self, "multi_psk_only")

    @multi_psk_only.setter
    def multi_psk_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_psk_only", value)

    @property
    @pulumi.getter
    def owe(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        """
        return pulumi.get(self, "owe")

    @owe.setter
    def owe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe", value)

    @property
    @pulumi.getter
    def pairwises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        """
        return pulumi.get(self, "pairwises")

    @pairwises.setter
    def pairwises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pairwises", value)

    @property
    @pulumi.getter(name="privateWlan")
    def private_wlan(self) -> Optional[pulumi.Input[bool]]:
        """
        when `multi_psk_only`==`true`, whether private wlan is enabled
        """
        return pulumi.get(self, "private_wlan")

    @private_wlan.setter
    def private_wlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_wlan", value)

    @property
    @pulumi.getter
    def psk(self) -> Optional[pulumi.Input[str]]:
        """
        when `type`==`psk`, 8-64 characters, or 64 hex characters
        """
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psk", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wepAsSecondaryAuth")
    def wep_as_secondary_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        enable WEP as secondary auth
        """
        return pulumi.get(self, "wep_as_secondary_auth")

    @wep_as_secondary_auth.setter
    def wep_as_secondary_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wep_as_secondary_auth", value)


@pulumi.input_type
class WlanAuthServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Auth port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WlanBonjourArgs:
    def __init__(__self__, *,
                 additional_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 services: pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_vlan_ids: additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        :param pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]] services: what services are allowed. 
               Property key is the service name
        :param pulumi.Input[bool] enabled: whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        pulumi.set(__self__, "additional_vlan_ids", additional_vlan_ids)
        pulumi.set(__self__, "services", services)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="additionalVlanIds")
    def additional_vlan_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        """
        return pulumi.get(self, "additional_vlan_ids")

    @additional_vlan_ids.setter
    def additional_vlan_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "additional_vlan_ids", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]]:
        """
        what services are allowed. 
        Property key is the service name
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WlanBonjourServicesArgs:
    def __init__(__self__, *,
                 disable_local: Optional[pulumi.Input[bool]] = None,
                 radius_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_local: whether to prevent wireless clients to discover bonjour devices on the same WLAN
        :param pulumi.Input[Sequence[pulumi.Input[str]]] radius_groups: optional, if the service is further restricted for certain RADIUS groups
        :param pulumi.Input[str] scope: how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        if disable_local is not None:
            pulumi.set(__self__, "disable_local", disable_local)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="disableLocal")
    def disable_local(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to prevent wireless clients to discover bonjour devices on the same WLAN
        """
        return pulumi.get(self, "disable_local")

    @disable_local.setter
    def disable_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local", value)

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, if the service is further restricted for certain RADIUS groups
        """
        return pulumi.get(self, "radius_groups")

    @radius_groups.setter
    def radius_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "radius_groups", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class WlanCiscoCwaArgs:
    def __init__(__self__, *,
                 allowed_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blocked_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_hostnames: list of hostnames without http(s):// (matched by substring)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_subnets: list of CIDRs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blocked_subnets: list of blocked CIDRs
        """
        if allowed_hostnames is not None:
            pulumi.set(__self__, "allowed_hostnames", allowed_hostnames)
        if allowed_subnets is not None:
            pulumi.set(__self__, "allowed_subnets", allowed_subnets)
        if blocked_subnets is not None:
            pulumi.set(__self__, "blocked_subnets", blocked_subnets)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedHostnames")
    def allowed_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of hostnames without http(s):// (matched by substring)
        """
        return pulumi.get(self, "allowed_hostnames")

    @allowed_hostnames.setter
    def allowed_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_hostnames", value)

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of CIDRs
        """
        return pulumi.get(self, "allowed_subnets")

    @allowed_subnets.setter
    def allowed_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_subnets", value)

    @property
    @pulumi.getter(name="blockedSubnets")
    def blocked_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of blocked CIDRs
        """
        return pulumi.get(self, "blocked_subnets")

    @blocked_subnets.setter
    def blocked_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocked_subnets", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WlanCoaServerArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 disable_event_timestamp_check: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] disable_event_timestamp_check: whether to disable Event-Timestamp Check
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "secret", secret)
        if disable_event_timestamp_check is not None:
            pulumi.set(__self__, "disable_event_timestamp_check", disable_event_timestamp_check)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="disableEventTimestampCheck")
    def disable_event_timestamp_check(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable Event-Timestamp Check
        """
        return pulumi.get(self, "disable_event_timestamp_check")

    @disable_event_timestamp_check.setter
    def disable_event_timestamp_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_event_timestamp_check", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WlanDnsServerRewriteArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 radius_groups: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] radius_groups: map between radius_group and the desired DNS server (IPv4 only)
               Property key is the RADIUS group, property value is the desired DNS Server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        map between radius_group and the desired DNS server (IPv4 only)
        Property key is the RADIUS group, property value is the desired DNS Server
        """
        return pulumi.get(self, "radius_groups")

    @radius_groups.setter
    def radius_groups(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "radius_groups", value)


@pulumi.input_type
class WlanDynamicPskArgs:
    def __init__(__self__, *,
                 default_psk: Optional[pulumi.Input[str]] = None,
                 default_vlan_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force_lookup: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] default_psk: default PSK to use if cloud WLC is not available, 8-63 characters
        :param pulumi.Input[bool] force_lookup: when 11r is enabled, we'll try to use the cached PMK, this can be disabled
               `false` means auto
        :param pulumi.Input[str] source: enum: `cloud_psks`, `radius`
        """
        if default_psk is not None:
            pulumi.set(__self__, "default_psk", default_psk)
        if default_vlan_id is not None:
            pulumi.set(__self__, "default_vlan_id", default_vlan_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_lookup is not None:
            pulumi.set(__self__, "force_lookup", force_lookup)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="defaultPsk")
    def default_psk(self) -> Optional[pulumi.Input[str]]:
        """
        default PSK to use if cloud WLC is not available, 8-63 characters
        """
        return pulumi.get(self, "default_psk")

    @default_psk.setter
    def default_psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_psk", value)

    @property
    @pulumi.getter(name="defaultVlanId")
    def default_vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_vlan_id")

    @default_vlan_id.setter
    def default_vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_vlan_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceLookup")
    def force_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        when 11r is enabled, we'll try to use the cached PMK, this can be disabled
        `false` means auto
        """
        return pulumi.get(self, "force_lookup")

    @force_lookup.setter
    def force_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_lookup", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `cloud_psks`, `radius`
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vlan_ids", value)


@pulumi.input_type
class WlanDynamicVlanArgs:
    def __init__(__self__, *,
                 default_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_vlan_ids: Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        :param pulumi.Input[bool] enabled: whether to enable dynamic vlan
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_vlan_ids: vlan_ids to be locally bridged
        :param pulumi.Input[str] type: standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vlans: map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
                 * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
                 * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        pulumi.set(__self__, "default_vlan_ids", default_vlan_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if local_vlan_ids is not None:
            pulumi.set(__self__, "local_vlan_ids", local_vlan_ids)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="defaultVlanIds")
    def default_vlan_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        """
        return pulumi.get(self, "default_vlan_ids")

    @default_vlan_ids.setter
    def default_vlan_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "default_vlan_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable dynamic vlan
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="localVlanIds")
    def local_vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vlan_ids to be locally bridged
        """
        return pulumi.get(self, "local_vlan_ids")

    @local_vlan_ids.setter
    def local_vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "local_vlan_ids", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
          * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
          * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class WlanHotspot20Args:
    def __init__(__self__, *,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 nai_realms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rcois: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable hotspot 2.0 config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] operators: list of operators to support
        :param pulumi.Input[str] venue_name: venue name, default is site name
        """
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if nai_realms is not None:
            pulumi.set(__self__, "nai_realms", nai_realms)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)
        if rcois is not None:
            pulumi.set(__self__, "rcois", rcois)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable hotspot 2.0 config
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="naiRealms")
    def nai_realms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nai_realms")

    @nai_realms.setter
    def nai_realms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nai_realms", value)

    @property
    @pulumi.getter
    def operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of operators to support
        """
        return pulumi.get(self, "operators")

    @operators.setter
    def operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "operators", value)

    @property
    @pulumi.getter
    def rcois(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rcois")

    @rcois.setter
    def rcois(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rcois", value)

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[pulumi.Input[str]]:
        """
        venue name, default is site name
        """
        return pulumi.get(self, "venue_name")

    @venue_name.setter
    def venue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_name", value)


@pulumi.input_type
class WlanInjectDhcpOption82Args:
    def __init__(__self__, *,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to inject option 82 when forwarding DHCP packets
        """
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to inject option 82 when forwarding DHCP packets
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WlanMistNacArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: when enabled:
                 * `auth_servers` is ignored
                 * `acct_servers` is ignored
                 * `auth_servers_*` are ignored
                 * `coa_servers` is ignored
                 * `radsec` is ignored
                 * `coa_enabled` is assumed'
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        when enabled:
          * `auth_servers` is ignored
          * `acct_servers` is ignored
          * `auth_servers_*` are ignored
          * `coa_servers` is ignored
          * `radsec` is ignored
          * `coa_enabled` is assumed'
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WlanPortalArgs:
    def __init__(__self__, *,
                 amazon_client_id: Optional[pulumi.Input[str]] = None,
                 amazon_client_secret: Optional[pulumi.Input[str]] = None,
                 amazon_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 amazon_enabled: Optional[pulumi.Input[bool]] = None,
                 amazon_expire: Optional[pulumi.Input[float]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_expire: Optional[pulumi.Input[float]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 broadnet_password: Optional[pulumi.Input[str]] = None,
                 broadnet_sid: Optional[pulumi.Input[str]] = None,
                 broadnet_user_id: Optional[pulumi.Input[str]] = None,
                 bypass_when_cloud_down: Optional[pulumi.Input[bool]] = None,
                 clickatell_api_key: Optional[pulumi.Input[str]] = None,
                 cross_site: Optional[pulumi.Input[bool]] = None,
                 email_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expire: Optional[pulumi.Input[float]] = None,
                 external_portal_url: Optional[pulumi.Input[str]] = None,
                 facebook_client_id: Optional[pulumi.Input[str]] = None,
                 facebook_client_secret: Optional[pulumi.Input[str]] = None,
                 facebook_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 facebook_enabled: Optional[pulumi.Input[bool]] = None,
                 facebook_expire: Optional[pulumi.Input[float]] = None,
                 forward: Optional[pulumi.Input[bool]] = None,
                 forward_url: Optional[pulumi.Input[str]] = None,
                 google_client_id: Optional[pulumi.Input[str]] = None,
                 google_client_secret: Optional[pulumi.Input[str]] = None,
                 google_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 google_enabled: Optional[pulumi.Input[bool]] = None,
                 google_expire: Optional[pulumi.Input[float]] = None,
                 gupshup_password: Optional[pulumi.Input[str]] = None,
                 gupshup_userid: Optional[pulumi.Input[str]] = None,
                 microsoft_client_id: Optional[pulumi.Input[str]] = None,
                 microsoft_client_secret: Optional[pulumi.Input[str]] = None,
                 microsoft_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 microsoft_enabled: Optional[pulumi.Input[bool]] = None,
                 microsoft_expire: Optional[pulumi.Input[float]] = None,
                 passphrase_enabled: Optional[pulumi.Input[bool]] = None,
                 passphrase_expire: Optional[pulumi.Input[float]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 predefined_sponsors_enabled: Optional[pulumi.Input[bool]] = None,
                 predefined_sponsors_hide_email: Optional[pulumi.Input[bool]] = None,
                 privacy: Optional[pulumi.Input[bool]] = None,
                 puzzel_password: Optional[pulumi.Input[str]] = None,
                 puzzel_service_id: Optional[pulumi.Input[str]] = None,
                 puzzel_username: Optional[pulumi.Input[str]] = None,
                 sms_enabled: Optional[pulumi.Input[bool]] = None,
                 sms_expire: Optional[pulumi.Input[float]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_provider: Optional[pulumi.Input[str]] = None,
                 sponsor_auto_approve: Optional[pulumi.Input[bool]] = None,
                 sponsor_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sponsor_enabled: Optional[pulumi.Input[bool]] = None,
                 sponsor_expire: Optional[pulumi.Input[float]] = None,
                 sponsor_link_validity_duration: Optional[pulumi.Input[str]] = None,
                 sponsor_notify_all: Optional[pulumi.Input[bool]] = None,
                 sponsor_status_notify: Optional[pulumi.Input[bool]] = None,
                 sponsors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sso_default_role: Optional[pulumi.Input[str]] = None,
                 sso_forced_role: Optional[pulumi.Input[str]] = None,
                 sso_idp_cert: Optional[pulumi.Input[str]] = None,
                 sso_idp_sign_algo: Optional[pulumi.Input[str]] = None,
                 sso_idp_sso_url: Optional[pulumi.Input[str]] = None,
                 sso_issuer: Optional[pulumi.Input[str]] = None,
                 sso_nameid_format: Optional[pulumi.Input[str]] = None,
                 telstra_client_id: Optional[pulumi.Input[str]] = None,
                 telstra_client_secret: Optional[pulumi.Input[str]] = None,
                 twilio_auth_token: Optional[pulumi.Input[str]] = None,
                 twilio_phone_number: Optional[pulumi.Input[str]] = None,
                 twilio_sid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amazon_client_id: amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] amazon_client_secret: amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] amazon_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] amazon_enabled: whether amazon is enabled as a login method
        :param pulumi.Input[float] amazon_expire: interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] auth: authentication scheme. enum: `external`, `none`, `sso`
        :param pulumi.Input[str] azure_client_id: Required if `azure_enabled`==`true`.
               Azure active directory app client id
        :param pulumi.Input[str] azure_client_secret: Required if `azure_enabled`==`true`.
               Azure active directory app client secret
        :param pulumi.Input[bool] azure_enabled: whether Azure Active Directory is enabled as a login method
        :param pulumi.Input[float] azure_expire: interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] azure_tenant_id: Required if `azure_enabled`==`true`.
               Azure active directory tenant id.
        :param pulumi.Input[str] broadnet_password: when `sms_provider`==`broadnet`
        :param pulumi.Input[str] broadnet_sid: when `sms_provider`==`broadnet`
        :param pulumi.Input[str] broadnet_user_id: when `sms_provider`==`broadnet`
        :param pulumi.Input[bool] bypass_when_cloud_down: whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        :param pulumi.Input[str] clickatell_api_key: when `sms_provider`==`clickatell`
        :param pulumi.Input[bool] cross_site: whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        :param pulumi.Input[bool] email_enabled: whether email (access code verification) is enabled as a login method
        :param pulumi.Input[bool] enabled: whether guest portal is enabled
        :param pulumi.Input[float] expire: how long to remain authorized, in minutes
        :param pulumi.Input[str] external_portal_url: external portal URL (e.g. https://host/url) where we can append our query parameters to
        :param pulumi.Input[str] facebook_client_id: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] facebook_client_secret: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] facebook_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] facebook_enabled: whether facebook is enabled as a login method
        :param pulumi.Input[float] facebook_expire: interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[bool] forward: whether to forward the user to another URL after authorized
        :param pulumi.Input[str] forward_url: the URL to forward the user to
        :param pulumi.Input[str] google_client_id: Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] google_client_secret: Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] google_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] google_enabled: whether google is enabled as login method
        :param pulumi.Input[float] google_expire: interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] gupshup_password: when `sms_provider`==`gupshup`
        :param pulumi.Input[str] gupshup_userid: when `sms_provider`==`gupshup`
        :param pulumi.Input[str] microsoft_client_id: microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] microsoft_client_secret: microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] microsoft_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] microsoft_enabled: whether microsoft 365 is enabled as a login method
        :param pulumi.Input[float] microsoft_expire: interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[bool] passphrase_enabled: whether password is enabled
        :param pulumi.Input[float] passphrase_expire: interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        :param pulumi.Input[str] password: passphrase
        :param pulumi.Input[bool] predefined_sponsors_enabled: whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        :param pulumi.Input[bool] predefined_sponsors_hide_email: whether to hide sponsor’s email from list of sponsors
        :param pulumi.Input[str] puzzel_password: when `sms_provider`==`puzzel`
        :param pulumi.Input[str] puzzel_service_id: when `sms_provider`==`puzzel`
        :param pulumi.Input[str] puzzel_username: when `sms_provider`==`puzzel`
        :param pulumi.Input[bool] sms_enabled: whether sms is enabled as a login method
        :param pulumi.Input[float] sms_expire: interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] sms_provider: enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        :param pulumi.Input[bool] sponsor_auto_approve: whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sponsor_email_domains: list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        :param pulumi.Input[bool] sponsor_enabled: whether sponsor is enabled
        :param pulumi.Input[float] sponsor_expire: interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] sponsor_link_validity_duration: how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        :param pulumi.Input[bool] sponsor_notify_all: whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        :param pulumi.Input[bool] sponsor_status_notify: if enabled, guest will get email about sponsor's action (approve/deny)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] sponsors: object of allowed sponsors email with name. Required if `sponsor_enabled`
                           is `true` and `sponsor_email_domains` is empty.
               
                           Property key is the sponsor email, Property value is the sponsor name
        :param pulumi.Input[str] sso_default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        :param pulumi.Input[str] sso_idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] sso_idp_sign_algo: signing algorithm for SAML Assertion
        :param pulumi.Input[str] sso_idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[str] sso_issuer: IDP issuer URL
        :param pulumi.Input[str] sso_nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] telstra_client_id: when `sms_provider`==`telstra`, Client ID provided by Telstra
        :param pulumi.Input[str] telstra_client_secret: when `sms_provider`==`telstra`, Client secret provided by Telstra
        :param pulumi.Input[str] twilio_auth_token: when `sms_provider`==`twilio`, Auth token account with twilio account
        :param pulumi.Input[str] twilio_phone_number: when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        :param pulumi.Input[str] twilio_sid: when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        if amazon_client_id is not None:
            pulumi.set(__self__, "amazon_client_id", amazon_client_id)
        if amazon_client_secret is not None:
            pulumi.set(__self__, "amazon_client_secret", amazon_client_secret)
        if amazon_email_domains is not None:
            pulumi.set(__self__, "amazon_email_domains", amazon_email_domains)
        if amazon_enabled is not None:
            pulumi.set(__self__, "amazon_enabled", amazon_enabled)
        if amazon_expire is not None:
            pulumi.set(__self__, "amazon_expire", amazon_expire)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_enabled is not None:
            pulumi.set(__self__, "azure_enabled", azure_enabled)
        if azure_expire is not None:
            pulumi.set(__self__, "azure_expire", azure_expire)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if broadnet_password is not None:
            pulumi.set(__self__, "broadnet_password", broadnet_password)
        if broadnet_sid is not None:
            pulumi.set(__self__, "broadnet_sid", broadnet_sid)
        if broadnet_user_id is not None:
            pulumi.set(__self__, "broadnet_user_id", broadnet_user_id)
        if bypass_when_cloud_down is not None:
            pulumi.set(__self__, "bypass_when_cloud_down", bypass_when_cloud_down)
        if clickatell_api_key is not None:
            pulumi.set(__self__, "clickatell_api_key", clickatell_api_key)
        if cross_site is not None:
            pulumi.set(__self__, "cross_site", cross_site)
        if email_enabled is not None:
            pulumi.set(__self__, "email_enabled", email_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if external_portal_url is not None:
            pulumi.set(__self__, "external_portal_url", external_portal_url)
        if facebook_client_id is not None:
            pulumi.set(__self__, "facebook_client_id", facebook_client_id)
        if facebook_client_secret is not None:
            pulumi.set(__self__, "facebook_client_secret", facebook_client_secret)
        if facebook_email_domains is not None:
            pulumi.set(__self__, "facebook_email_domains", facebook_email_domains)
        if facebook_enabled is not None:
            pulumi.set(__self__, "facebook_enabled", facebook_enabled)
        if facebook_expire is not None:
            pulumi.set(__self__, "facebook_expire", facebook_expire)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if forward_url is not None:
            pulumi.set(__self__, "forward_url", forward_url)
        if google_client_id is not None:
            pulumi.set(__self__, "google_client_id", google_client_id)
        if google_client_secret is not None:
            pulumi.set(__self__, "google_client_secret", google_client_secret)
        if google_email_domains is not None:
            pulumi.set(__self__, "google_email_domains", google_email_domains)
        if google_enabled is not None:
            pulumi.set(__self__, "google_enabled", google_enabled)
        if google_expire is not None:
            pulumi.set(__self__, "google_expire", google_expire)
        if gupshup_password is not None:
            pulumi.set(__self__, "gupshup_password", gupshup_password)
        if gupshup_userid is not None:
            pulumi.set(__self__, "gupshup_userid", gupshup_userid)
        if microsoft_client_id is not None:
            pulumi.set(__self__, "microsoft_client_id", microsoft_client_id)
        if microsoft_client_secret is not None:
            pulumi.set(__self__, "microsoft_client_secret", microsoft_client_secret)
        if microsoft_email_domains is not None:
            pulumi.set(__self__, "microsoft_email_domains", microsoft_email_domains)
        if microsoft_enabled is not None:
            pulumi.set(__self__, "microsoft_enabled", microsoft_enabled)
        if microsoft_expire is not None:
            pulumi.set(__self__, "microsoft_expire", microsoft_expire)
        if passphrase_enabled is not None:
            pulumi.set(__self__, "passphrase_enabled", passphrase_enabled)
        if passphrase_expire is not None:
            pulumi.set(__self__, "passphrase_expire", passphrase_expire)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if predefined_sponsors_enabled is not None:
            pulumi.set(__self__, "predefined_sponsors_enabled", predefined_sponsors_enabled)
        if predefined_sponsors_hide_email is not None:
            pulumi.set(__self__, "predefined_sponsors_hide_email", predefined_sponsors_hide_email)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if puzzel_password is not None:
            pulumi.set(__self__, "puzzel_password", puzzel_password)
        if puzzel_service_id is not None:
            pulumi.set(__self__, "puzzel_service_id", puzzel_service_id)
        if puzzel_username is not None:
            pulumi.set(__self__, "puzzel_username", puzzel_username)
        if sms_enabled is not None:
            pulumi.set(__self__, "sms_enabled", sms_enabled)
        if sms_expire is not None:
            pulumi.set(__self__, "sms_expire", sms_expire)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_provider is not None:
            pulumi.set(__self__, "sms_provider", sms_provider)
        if sponsor_auto_approve is not None:
            pulumi.set(__self__, "sponsor_auto_approve", sponsor_auto_approve)
        if sponsor_email_domains is not None:
            pulumi.set(__self__, "sponsor_email_domains", sponsor_email_domains)
        if sponsor_enabled is not None:
            pulumi.set(__self__, "sponsor_enabled", sponsor_enabled)
        if sponsor_expire is not None:
            pulumi.set(__self__, "sponsor_expire", sponsor_expire)
        if sponsor_link_validity_duration is not None:
            pulumi.set(__self__, "sponsor_link_validity_duration", sponsor_link_validity_duration)
        if sponsor_notify_all is not None:
            pulumi.set(__self__, "sponsor_notify_all", sponsor_notify_all)
        if sponsor_status_notify is not None:
            pulumi.set(__self__, "sponsor_status_notify", sponsor_status_notify)
        if sponsors is not None:
            pulumi.set(__self__, "sponsors", sponsors)
        if sso_default_role is not None:
            pulumi.set(__self__, "sso_default_role", sso_default_role)
        if sso_forced_role is not None:
            pulumi.set(__self__, "sso_forced_role", sso_forced_role)
        if sso_idp_cert is not None:
            pulumi.set(__self__, "sso_idp_cert", sso_idp_cert)
        if sso_idp_sign_algo is not None:
            pulumi.set(__self__, "sso_idp_sign_algo", sso_idp_sign_algo)
        if sso_idp_sso_url is not None:
            pulumi.set(__self__, "sso_idp_sso_url", sso_idp_sso_url)
        if sso_issuer is not None:
            pulumi.set(__self__, "sso_issuer", sso_issuer)
        if sso_nameid_format is not None:
            pulumi.set(__self__, "sso_nameid_format", sso_nameid_format)
        if telstra_client_id is not None:
            pulumi.set(__self__, "telstra_client_id", telstra_client_id)
        if telstra_client_secret is not None:
            pulumi.set(__self__, "telstra_client_secret", telstra_client_secret)
        if twilio_auth_token is not None:
            pulumi.set(__self__, "twilio_auth_token", twilio_auth_token)
        if twilio_phone_number is not None:
            pulumi.set(__self__, "twilio_phone_number", twilio_phone_number)
        if twilio_sid is not None:
            pulumi.set(__self__, "twilio_sid", twilio_sid)

    @property
    @pulumi.getter(name="amazonClientId")
    def amazon_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "amazon_client_id")

    @amazon_client_id.setter
    def amazon_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_client_id", value)

    @property
    @pulumi.getter(name="amazonClientSecret")
    def amazon_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "amazon_client_secret")

    @amazon_client_secret.setter
    def amazon_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_client_secret", value)

    @property
    @pulumi.getter(name="amazonEmailDomains")
    def amazon_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "amazon_email_domains")

    @amazon_email_domains.setter
    def amazon_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "amazon_email_domains", value)

    @property
    @pulumi.getter(name="amazonEnabled")
    def amazon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether amazon is enabled as a login method
        """
        return pulumi.get(self, "amazon_enabled")

    @amazon_enabled.setter
    def amazon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "amazon_enabled", value)

    @property
    @pulumi.getter(name="amazonExpire")
    def amazon_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "amazon_expire")

    @amazon_expire.setter
    def amazon_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "amazon_expire", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        authentication scheme. enum: `external`, `none`, `sso`
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client id
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client secret
        """
        return pulumi.get(self, "azure_client_secret")

    @azure_client_secret.setter
    def azure_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_secret", value)

    @property
    @pulumi.getter(name="azureEnabled")
    def azure_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether Azure Active Directory is enabled as a login method
        """
        return pulumi.get(self, "azure_enabled")

    @azure_enabled.setter
    def azure_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_enabled", value)

    @property
    @pulumi.getter(name="azureExpire")
    def azure_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "azure_expire")

    @azure_expire.setter
    def azure_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "azure_expire", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory tenant id.
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @property
    @pulumi.getter(name="broadnetPassword")
    def broadnet_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_password")

    @broadnet_password.setter
    def broadnet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_password", value)

    @property
    @pulumi.getter(name="broadnetSid")
    def broadnet_sid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_sid")

    @broadnet_sid.setter
    def broadnet_sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_sid", value)

    @property
    @pulumi.getter(name="broadnetUserId")
    def broadnet_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_user_id")

    @broadnet_user_id.setter
    def broadnet_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_user_id", value)

    @property
    @pulumi.getter(name="bypassWhenCloudDown")
    def bypass_when_cloud_down(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        """
        return pulumi.get(self, "bypass_when_cloud_down")

    @bypass_when_cloud_down.setter
    def bypass_when_cloud_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_when_cloud_down", value)

    @property
    @pulumi.getter(name="clickatellApiKey")
    def clickatell_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`clickatell`
        """
        return pulumi.get(self, "clickatell_api_key")

    @clickatell_api_key.setter
    def clickatell_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clickatell_api_key", value)

    @property
    @pulumi.getter(name="crossSite")
    def cross_site(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        """
        return pulumi.get(self, "cross_site")

    @cross_site.setter
    def cross_site(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cross_site", value)

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether email (access code verification) is enabled as a login method
        """
        return pulumi.get(self, "email_enabled")

    @email_enabled.setter
    def email_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether guest portal is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[float]]:
        """
        how long to remain authorized, in minutes
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter(name="externalPortalUrl")
    def external_portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        external portal URL (e.g. https://host/url) where we can append our query parameters to
        """
        return pulumi.get(self, "external_portal_url")

    @external_portal_url.setter
    def external_portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_portal_url", value)

    @property
    @pulumi.getter(name="facebookClientId")
    def facebook_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "facebook_client_id")

    @facebook_client_id.setter
    def facebook_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facebook_client_id", value)

    @property
    @pulumi.getter(name="facebookClientSecret")
    def facebook_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "facebook_client_secret")

    @facebook_client_secret.setter
    def facebook_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facebook_client_secret", value)

    @property
    @pulumi.getter(name="facebookEmailDomains")
    def facebook_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "facebook_email_domains")

    @facebook_email_domains.setter
    def facebook_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "facebook_email_domains", value)

    @property
    @pulumi.getter(name="facebookEnabled")
    def facebook_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether facebook is enabled as a login method
        """
        return pulumi.get(self, "facebook_enabled")

    @facebook_enabled.setter
    def facebook_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facebook_enabled", value)

    @property
    @pulumi.getter(name="facebookExpire")
    def facebook_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "facebook_expire")

    @facebook_expire.setter
    def facebook_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "facebook_expire", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to forward the user to another URL after authorized
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="forwardUrl")
    def forward_url(self) -> Optional[pulumi.Input[str]]:
        """
        the URL to forward the user to
        """
        return pulumi.get(self, "forward_url")

    @forward_url.setter
    def forward_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_url", value)

    @property
    @pulumi.getter(name="googleClientId")
    def google_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "google_client_id")

    @google_client_id.setter
    def google_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_client_id", value)

    @property
    @pulumi.getter(name="googleClientSecret")
    def google_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "google_client_secret")

    @google_client_secret.setter
    def google_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_client_secret", value)

    @property
    @pulumi.getter(name="googleEmailDomains")
    def google_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "google_email_domains")

    @google_email_domains.setter
    def google_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "google_email_domains", value)

    @property
    @pulumi.getter(name="googleEnabled")
    def google_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether google is enabled as login method
        """
        return pulumi.get(self, "google_enabled")

    @google_enabled.setter
    def google_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "google_enabled", value)

    @property
    @pulumi.getter(name="googleExpire")
    def google_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "google_expire")

    @google_expire.setter
    def google_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "google_expire", value)

    @property
    @pulumi.getter(name="gupshupPassword")
    def gupshup_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_password")

    @gupshup_password.setter
    def gupshup_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gupshup_password", value)

    @property
    @pulumi.getter(name="gupshupUserid")
    def gupshup_userid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_userid")

    @gupshup_userid.setter
    def gupshup_userid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gupshup_userid", value)

    @property
    @pulumi.getter(name="microsoftClientId")
    def microsoft_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "microsoft_client_id")

    @microsoft_client_id.setter
    def microsoft_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_client_id", value)

    @property
    @pulumi.getter(name="microsoftClientSecret")
    def microsoft_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "microsoft_client_secret")

    @microsoft_client_secret.setter
    def microsoft_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_client_secret", value)

    @property
    @pulumi.getter(name="microsoftEmailDomains")
    def microsoft_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "microsoft_email_domains")

    @microsoft_email_domains.setter
    def microsoft_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "microsoft_email_domains", value)

    @property
    @pulumi.getter(name="microsoftEnabled")
    def microsoft_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether microsoft 365 is enabled as a login method
        """
        return pulumi.get(self, "microsoft_enabled")

    @microsoft_enabled.setter
    def microsoft_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "microsoft_enabled", value)

    @property
    @pulumi.getter(name="microsoftExpire")
    def microsoft_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "microsoft_expire")

    @microsoft_expire.setter
    def microsoft_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "microsoft_expire", value)

    @property
    @pulumi.getter(name="passphraseEnabled")
    def passphrase_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether password is enabled
        """
        return pulumi.get(self, "passphrase_enabled")

    @passphrase_enabled.setter
    def passphrase_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passphrase_enabled", value)

    @property
    @pulumi.getter(name="passphraseExpire")
    def passphrase_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        """
        return pulumi.get(self, "passphrase_expire")

    @passphrase_expire.setter
    def passphrase_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "passphrase_expire", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        passphrase
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="predefinedSponsorsEnabled")
    def predefined_sponsors_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        """
        return pulumi.get(self, "predefined_sponsors_enabled")

    @predefined_sponsors_enabled.setter
    def predefined_sponsors_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined_sponsors_enabled", value)

    @property
    @pulumi.getter(name="predefinedSponsorsHideEmail")
    def predefined_sponsors_hide_email(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to hide sponsor’s email from list of sponsors
        """
        return pulumi.get(self, "predefined_sponsors_hide_email")

    @predefined_sponsors_hide_email.setter
    def predefined_sponsors_hide_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined_sponsors_hide_email", value)

    @property
    @pulumi.getter
    def privacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="puzzelPassword")
    def puzzel_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_password")

    @puzzel_password.setter
    def puzzel_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_password", value)

    @property
    @pulumi.getter(name="puzzelServiceId")
    def puzzel_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_service_id")

    @puzzel_service_id.setter
    def puzzel_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_service_id", value)

    @property
    @pulumi.getter(name="puzzelUsername")
    def puzzel_username(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_username")

    @puzzel_username.setter
    def puzzel_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_username", value)

    @property
    @pulumi.getter(name="smsEnabled")
    def sms_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether sms is enabled as a login method
        """
        return pulumi.get(self, "sms_enabled")

    @sms_enabled.setter
    def sms_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_enabled", value)

    @property
    @pulumi.getter(name="smsExpire")
    def sms_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sms_expire")

    @sms_expire.setter
    def sms_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sms_expire", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsProvider")
    def sms_provider(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        """
        return pulumi.get(self, "sms_provider")

    @sms_provider.setter
    def sms_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_provider", value)

    @property
    @pulumi.getter(name="sponsorAutoApprove")
    def sponsor_auto_approve(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        """
        return pulumi.get(self, "sponsor_auto_approve")

    @sponsor_auto_approve.setter
    def sponsor_auto_approve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_auto_approve", value)

    @property
    @pulumi.getter(name="sponsorEmailDomains")
    def sponsor_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        """
        return pulumi.get(self, "sponsor_email_domains")

    @sponsor_email_domains.setter
    def sponsor_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sponsor_email_domains", value)

    @property
    @pulumi.getter(name="sponsorEnabled")
    def sponsor_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether sponsor is enabled
        """
        return pulumi.get(self, "sponsor_enabled")

    @sponsor_enabled.setter
    def sponsor_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_enabled", value)

    @property
    @pulumi.getter(name="sponsorExpire")
    def sponsor_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sponsor_expire")

    @sponsor_expire.setter
    def sponsor_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sponsor_expire", value)

    @property
    @pulumi.getter(name="sponsorLinkValidityDuration")
    def sponsor_link_validity_duration(self) -> Optional[pulumi.Input[str]]:
        """
        how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        """
        return pulumi.get(self, "sponsor_link_validity_duration")

    @sponsor_link_validity_duration.setter
    def sponsor_link_validity_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_link_validity_duration", value)

    @property
    @pulumi.getter(name="sponsorNotifyAll")
    def sponsor_notify_all(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        """
        return pulumi.get(self, "sponsor_notify_all")

    @sponsor_notify_all.setter
    def sponsor_notify_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_notify_all", value)

    @property
    @pulumi.getter(name="sponsorStatusNotify")
    def sponsor_status_notify(self) -> Optional[pulumi.Input[bool]]:
        """
        if enabled, guest will get email about sponsor's action (approve/deny)
        """
        return pulumi.get(self, "sponsor_status_notify")

    @sponsor_status_notify.setter
    def sponsor_status_notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_status_notify", value)

    @property
    @pulumi.getter
    def sponsors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        object of allowed sponsors email with name. Required if `sponsor_enabled`
                    is `true` and `sponsor_email_domains` is empty.

                    Property key is the sponsor email, Property value is the sponsor name
        """
        return pulumi.get(self, "sponsors")

    @sponsors.setter
    def sponsors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sponsors", value)

    @property
    @pulumi.getter(name="ssoDefaultRole")
    def sso_default_role(self) -> Optional[pulumi.Input[str]]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        """
        return pulumi.get(self, "sso_default_role")

    @sso_default_role.setter
    def sso_default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_default_role", value)

    @property
    @pulumi.getter(name="ssoForcedRole")
    def sso_forced_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_forced_role")

    @sso_forced_role.setter
    def sso_forced_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_forced_role", value)

    @property
    @pulumi.getter(name="ssoIdpCert")
    def sso_idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "sso_idp_cert")

    @sso_idp_cert.setter
    def sso_idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_cert", value)

    @property
    @pulumi.getter(name="ssoIdpSignAlgo")
    def sso_idp_sign_algo(self) -> Optional[pulumi.Input[str]]:
        """
        signing algorithm for SAML Assertion
        """
        return pulumi.get(self, "sso_idp_sign_algo")

    @sso_idp_sign_algo.setter
    def sso_idp_sign_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_sign_algo", value)

    @property
    @pulumi.getter(name="ssoIdpSsoUrl")
    def sso_idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "sso_idp_sso_url")

    @sso_idp_sso_url.setter
    def sso_idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_sso_url", value)

    @property
    @pulumi.getter(name="ssoIssuer")
    def sso_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "sso_issuer")

    @sso_issuer.setter
    def sso_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_issuer", value)

    @property
    @pulumi.getter(name="ssoNameidFormat")
    def sso_nameid_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "sso_nameid_format")

    @sso_nameid_format.setter
    def sso_nameid_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_nameid_format", value)

    @property
    @pulumi.getter(name="telstraClientId")
    def telstra_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`telstra`, Client ID provided by Telstra
        """
        return pulumi.get(self, "telstra_client_id")

    @telstra_client_id.setter
    def telstra_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telstra_client_id", value)

    @property
    @pulumi.getter(name="telstraClientSecret")
    def telstra_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`telstra`, Client secret provided by Telstra
        """
        return pulumi.get(self, "telstra_client_secret")

    @telstra_client_secret.setter
    def telstra_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telstra_client_secret", value)

    @property
    @pulumi.getter(name="twilioAuthToken")
    def twilio_auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Auth token account with twilio account
        """
        return pulumi.get(self, "twilio_auth_token")

    @twilio_auth_token.setter
    def twilio_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_auth_token", value)

    @property
    @pulumi.getter(name="twilioPhoneNumber")
    def twilio_phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        """
        return pulumi.get(self, "twilio_phone_number")

    @twilio_phone_number.setter
    def twilio_phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_phone_number", value)

    @property
    @pulumi.getter(name="twilioSid")
    def twilio_sid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        return pulumi.get(self, "twilio_sid")

    @twilio_sid.setter
    def twilio_sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_sid", value)


@pulumi.input_type
class WlanPortalTemplatePortalTemplateArgs:
    def __init__(__self__, *,
                 access_code_alternate_email: Optional[pulumi.Input[str]] = None,
                 alignment: Optional[pulumi.Input[str]] = None,
                 auth_button_amazon: Optional[pulumi.Input[str]] = None,
                 auth_button_azure: Optional[pulumi.Input[str]] = None,
                 auth_button_email: Optional[pulumi.Input[str]] = None,
                 auth_button_facebook: Optional[pulumi.Input[str]] = None,
                 auth_button_google: Optional[pulumi.Input[str]] = None,
                 auth_button_microsoft: Optional[pulumi.Input[str]] = None,
                 auth_button_passphrase: Optional[pulumi.Input[str]] = None,
                 auth_button_sms: Optional[pulumi.Input[str]] = None,
                 auth_button_sponsor: Optional[pulumi.Input[str]] = None,
                 auth_label: Optional[pulumi.Input[str]] = None,
                 back_link: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 color_dark: Optional[pulumi.Input[str]] = None,
                 color_light: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[bool]] = None,
                 company_error: Optional[pulumi.Input[str]] = None,
                 company_label: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 email_access_domain_error: Optional[pulumi.Input[str]] = None,
                 email_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_error: Optional[pulumi.Input[str]] = None,
                 email_code_field_label: Optional[pulumi.Input[str]] = None,
                 email_code_message: Optional[pulumi.Input[str]] = None,
                 email_code_submit: Optional[pulumi.Input[str]] = None,
                 email_code_title: Optional[pulumi.Input[str]] = None,
                 email_error: Optional[pulumi.Input[str]] = None,
                 email_field_label: Optional[pulumi.Input[str]] = None,
                 email_label: Optional[pulumi.Input[str]] = None,
                 email_message: Optional[pulumi.Input[str]] = None,
                 email_submit: Optional[pulumi.Input[str]] = None,
                 email_title: Optional[pulumi.Input[str]] = None,
                 field1: Optional[pulumi.Input[bool]] = None,
                 field1error: Optional[pulumi.Input[str]] = None,
                 field1label: Optional[pulumi.Input[str]] = None,
                 field1required: Optional[pulumi.Input[bool]] = None,
                 field2: Optional[pulumi.Input[bool]] = None,
                 field2error: Optional[pulumi.Input[str]] = None,
                 field2label: Optional[pulumi.Input[str]] = None,
                 field2required: Optional[pulumi.Input[bool]] = None,
                 field3: Optional[pulumi.Input[bool]] = None,
                 field3error: Optional[pulumi.Input[str]] = None,
                 field3label: Optional[pulumi.Input[str]] = None,
                 field3required: Optional[pulumi.Input[bool]] = None,
                 field4: Optional[pulumi.Input[bool]] = None,
                 field4error: Optional[pulumi.Input[str]] = None,
                 field4label: Optional[pulumi.Input[str]] = None,
                 field4required: Optional[pulumi.Input[bool]] = None,
                 locales: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 multi_auth: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[bool]] = None,
                 name_error: Optional[pulumi.Input[str]] = None,
                 name_label: Optional[pulumi.Input[str]] = None,
                 opt_out_default: Optional[pulumi.Input[bool]] = None,
                 optout: Optional[pulumi.Input[bool]] = None,
                 optout_label: Optional[pulumi.Input[str]] = None,
                 page_title: Optional[pulumi.Input[str]] = None,
                 passphrase_cancel: Optional[pulumi.Input[str]] = None,
                 passphrase_error: Optional[pulumi.Input[str]] = None,
                 passphrase_label: Optional[pulumi.Input[str]] = None,
                 passphrase_message: Optional[pulumi.Input[str]] = None,
                 passphrase_submit: Optional[pulumi.Input[str]] = None,
                 passphrase_title: Optional[pulumi.Input[str]] = None,
                 powered_by: Optional[pulumi.Input[bool]] = None,
                 privacy: Optional[pulumi.Input[bool]] = None,
                 privacy_policy_accept_label: Optional[pulumi.Input[str]] = None,
                 privacy_policy_error: Optional[pulumi.Input[str]] = None,
                 privacy_policy_link: Optional[pulumi.Input[str]] = None,
                 privacy_policy_text: Optional[pulumi.Input[str]] = None,
                 required_field_label: Optional[pulumi.Input[str]] = None,
                 responsive_layout: Optional[pulumi.Input[bool]] = None,
                 sign_in_label: Optional[pulumi.Input[str]] = None,
                 sms_carrier_default: Optional[pulumi.Input[str]] = None,
                 sms_carrier_error: Optional[pulumi.Input[str]] = None,
                 sms_carrier_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_cancel: Optional[pulumi.Input[str]] = None,
                 sms_code_error: Optional[pulumi.Input[str]] = None,
                 sms_code_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_message: Optional[pulumi.Input[str]] = None,
                 sms_code_submit: Optional[pulumi.Input[str]] = None,
                 sms_code_title: Optional[pulumi.Input[str]] = None,
                 sms_country_field_label: Optional[pulumi.Input[str]] = None,
                 sms_country_format: Optional[pulumi.Input[str]] = None,
                 sms_have_access_code: Optional[pulumi.Input[str]] = None,
                 sms_is_twilio: Optional[pulumi.Input[bool]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_number_cancel: Optional[pulumi.Input[str]] = None,
                 sms_number_error: Optional[pulumi.Input[str]] = None,
                 sms_number_field_label: Optional[pulumi.Input[str]] = None,
                 sms_number_format: Optional[pulumi.Input[str]] = None,
                 sms_number_message: Optional[pulumi.Input[str]] = None,
                 sms_number_submit: Optional[pulumi.Input[str]] = None,
                 sms_number_title: Optional[pulumi.Input[str]] = None,
                 sms_username_format: Optional[pulumi.Input[str]] = None,
                 sms_validity_duration: Optional[pulumi.Input[int]] = None,
                 sponsor_back_link: Optional[pulumi.Input[str]] = None,
                 sponsor_cancel: Optional[pulumi.Input[str]] = None,
                 sponsor_email: Optional[pulumi.Input[str]] = None,
                 sponsor_email_error: Optional[pulumi.Input[str]] = None,
                 sponsor_email_template: Optional[pulumi.Input[str]] = None,
                 sponsor_info_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_info_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_info_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_name: Optional[pulumi.Input[str]] = None,
                 sponsor_name_error: Optional[pulumi.Input[str]] = None,
                 sponsor_note_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_request_access: Optional[pulumi.Input[str]] = None,
                 sponsor_status_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_status_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_status_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_submit: Optional[pulumi.Input[str]] = None,
                 sponsors_error: Optional[pulumi.Input[str]] = None,
                 sponsors_field_label: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[bool]] = None,
                 tos_accept_label: Optional[pulumi.Input[str]] = None,
                 tos_error: Optional[pulumi.Input[str]] = None,
                 tos_link: Optional[pulumi.Input[str]] = None,
                 tos_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alignment: defines alignment on portal. enum: `center`, `left`, `right`
        :param pulumi.Input[str] auth_button_amazon: label for Amazon auth button
        :param pulumi.Input[str] auth_button_azure: label for Azure auth button
        :param pulumi.Input[str] auth_button_email: label for Email auth button
        :param pulumi.Input[str] auth_button_facebook: label for Facebook auth button
        :param pulumi.Input[str] auth_button_google: label for Google auth button
        :param pulumi.Input[str] auth_button_microsoft: label for Microsoft auth button
        :param pulumi.Input[str] auth_button_passphrase: label for passphrase auth button
        :param pulumi.Input[str] auth_button_sms: label for SMS auth button
        :param pulumi.Input[str] auth_button_sponsor: label for Sponsor auth button
        :param pulumi.Input[str] back_link: label of the link to go back to /logon
        :param pulumi.Input[str] color: Portal main color
        :param pulumi.Input[bool] company: whether company field is required
        :param pulumi.Input[str] company_error: error message when company not provided
        :param pulumi.Input[str] company_label: label of company field
        :param pulumi.Input[bool] email: whether email field is required
        :param pulumi.Input[str] email_access_domain_error: error message when a user has valid social login but doesn't match specified email domains.
        :param pulumi.Input[str] email_cancel: Label for cancel confirmation code submission using email auth
        :param pulumi.Input[str] email_error: error message when email not provided
        :param pulumi.Input[str] email_label: label of email field
        :param pulumi.Input[str] email_submit: Label for confirmation code submit button using email auth
        :param pulumi.Input[str] email_title: Title for the Email registration
        :param pulumi.Input[bool] field1: whether to ask field1
        :param pulumi.Input[str] field1error: error message when field1 not provided
        :param pulumi.Input[str] field1label: label of field1
        :param pulumi.Input[bool] field1required: whether field1 is required field
        :param pulumi.Input[bool] field2: whether to ask field2
        :param pulumi.Input[str] field2error: error message when field2 not provided
        :param pulumi.Input[str] field2label: label of field2
        :param pulumi.Input[bool] field2required: whether field2 is required field
        :param pulumi.Input[bool] field3: whether to ask field3
        :param pulumi.Input[str] field3error: error message when field3 not provided
        :param pulumi.Input[str] field3label: label of field3
        :param pulumi.Input[bool] field3required: whether field3 is required field
        :param pulumi.Input[bool] field4: whether to ask field4
        :param pulumi.Input[str] field4error: error message when field4 not provided
        :param pulumi.Input[str] field4label: label of field4
        :param pulumi.Input[bool] field4required: whether field4 is required field
        :param pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]] locales: Can be used to localize the portal based on the User Agent. Allowed property key values are:
                 `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
                 `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
                 `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
                 `zh-Hans`, `zh-Hant`
        :param pulumi.Input[str] logo: path to the background image file. File must be a `png` image less than 100kB and image dimension must be less 500px x 200px (width x height).
        :param pulumi.Input[bool] name: whether name field is required
        :param pulumi.Input[str] name_error: error message when name not provided
        :param pulumi.Input[str] name_label: label of name field
        :param pulumi.Input[bool] opt_out_default: Default value for the `Do not store` checkbox
        :param pulumi.Input[bool] optout: whether to display Do Not Store My Personal Information
        :param pulumi.Input[str] optout_label: label for Do Not Store My Personal Information
        :param pulumi.Input[str] passphrase_cancel: Label for the Passphrase cancel button
        :param pulumi.Input[str] passphrase_error: error message when invalid passphrase is provided
        :param pulumi.Input[str] passphrase_label: Passphrase
        :param pulumi.Input[str] passphrase_submit: Label for the Passphrase submit button
        :param pulumi.Input[str] passphrase_title: Title for passphrase details page
        :param pulumi.Input[bool] powered_by: whether to show \\"Powered by Mist\\"
        :param pulumi.Input[bool] privacy: wheter to require the Privacy Term acceptance
        :param pulumi.Input[str] privacy_policy_accept_label: prefix of the label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_error: error message when Privacy Policy not accepted
        :param pulumi.Input[str] privacy_policy_link: label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_text: text of the Privacy Policy
        :param pulumi.Input[str] required_field_label: label to denote required field
        :param pulumi.Input[str] sign_in_label: label of the button to /signin
        :param pulumi.Input[str] sms_carrier_field_label: label for mobile carrier drop-down list
        :param pulumi.Input[str] sms_code_cancel: Label for cancel confirmation code submission
        :param pulumi.Input[str] sms_code_error: error message when confirmation code is invalid
        :param pulumi.Input[str] sms_code_submit: Label for confirmation code submit button
        :param pulumi.Input[str] sms_have_access_code: Label for checkbox to specify that the user has access code
        :param pulumi.Input[str] sms_message_format: format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        :param pulumi.Input[str] sms_number_cancel: label for canceling mobile details for SMS auth
        :param pulumi.Input[str] sms_number_field_label: label for field to provide mobile number
        :param pulumi.Input[str] sms_number_submit: label for submit button for code generation
        :param pulumi.Input[str] sms_number_title: Title for phone number details
        :param pulumi.Input[int] sms_validity_duration: how long confirmation code should be considered valid (in minutes)
        :param pulumi.Input[str] sponsor_email: label for Sponsor Email
        :param pulumi.Input[str] sponsor_email_template: html template to replace/override default sponsor email template 
               Sponsor Email Template supports following template variables:
                 * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
                 * `deny_url`: Renders URL to reject the request
                 * `guest_email`: Renders Email ID of the guest
                 * `guest_name`: Renders Name of the guest
                 * `field1`: Renders value of the Custom Field 1
                 * `field2`: Renders value of the Custom Field 2
                 * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
                 * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
        :param pulumi.Input[str] sponsor_name: label for Sponsor Name
        :param pulumi.Input[str] sponsor_request_access: submit button label request Wifi Access and notify sponsor about guest request
        :param pulumi.Input[str] sponsor_status_approved: text to display if sponsor approves request
        :param pulumi.Input[str] sponsor_status_denied: text to display when sponsor denies request
        :param pulumi.Input[str] sponsor_status_pending: text to display if request is still pending
        :param pulumi.Input[str] sponsor_submit: submit button label to notify sponsor about guest request
        :param pulumi.Input[str] tos_accept_label: prefix of the label of the link to go to tos
        :param pulumi.Input[str] tos_error: error message when tos not accepted
        :param pulumi.Input[str] tos_link: label of the link to go to tos
        :param pulumi.Input[str] tos_text: text of the Terms of Service
        """
        if access_code_alternate_email is not None:
            pulumi.set(__self__, "access_code_alternate_email", access_code_alternate_email)
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if auth_button_amazon is not None:
            pulumi.set(__self__, "auth_button_amazon", auth_button_amazon)
        if auth_button_azure is not None:
            pulumi.set(__self__, "auth_button_azure", auth_button_azure)
        if auth_button_email is not None:
            pulumi.set(__self__, "auth_button_email", auth_button_email)
        if auth_button_facebook is not None:
            pulumi.set(__self__, "auth_button_facebook", auth_button_facebook)
        if auth_button_google is not None:
            pulumi.set(__self__, "auth_button_google", auth_button_google)
        if auth_button_microsoft is not None:
            pulumi.set(__self__, "auth_button_microsoft", auth_button_microsoft)
        if auth_button_passphrase is not None:
            pulumi.set(__self__, "auth_button_passphrase", auth_button_passphrase)
        if auth_button_sms is not None:
            pulumi.set(__self__, "auth_button_sms", auth_button_sms)
        if auth_button_sponsor is not None:
            pulumi.set(__self__, "auth_button_sponsor", auth_button_sponsor)
        if auth_label is not None:
            pulumi.set(__self__, "auth_label", auth_label)
        if back_link is not None:
            pulumi.set(__self__, "back_link", back_link)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_dark is not None:
            pulumi.set(__self__, "color_dark", color_dark)
        if color_light is not None:
            pulumi.set(__self__, "color_light", color_light)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if company_error is not None:
            pulumi.set(__self__, "company_error", company_error)
        if company_label is not None:
            pulumi.set(__self__, "company_label", company_label)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_access_domain_error is not None:
            pulumi.set(__self__, "email_access_domain_error", email_access_domain_error)
        if email_cancel is not None:
            pulumi.set(__self__, "email_cancel", email_cancel)
        if email_code_cancel is not None:
            pulumi.set(__self__, "email_code_cancel", email_code_cancel)
        if email_code_error is not None:
            pulumi.set(__self__, "email_code_error", email_code_error)
        if email_code_field_label is not None:
            pulumi.set(__self__, "email_code_field_label", email_code_field_label)
        if email_code_message is not None:
            pulumi.set(__self__, "email_code_message", email_code_message)
        if email_code_submit is not None:
            pulumi.set(__self__, "email_code_submit", email_code_submit)
        if email_code_title is not None:
            pulumi.set(__self__, "email_code_title", email_code_title)
        if email_error is not None:
            pulumi.set(__self__, "email_error", email_error)
        if email_field_label is not None:
            pulumi.set(__self__, "email_field_label", email_field_label)
        if email_label is not None:
            pulumi.set(__self__, "email_label", email_label)
        if email_message is not None:
            pulumi.set(__self__, "email_message", email_message)
        if email_submit is not None:
            pulumi.set(__self__, "email_submit", email_submit)
        if email_title is not None:
            pulumi.set(__self__, "email_title", email_title)
        if field1 is not None:
            pulumi.set(__self__, "field1", field1)
        if field1error is not None:
            pulumi.set(__self__, "field1error", field1error)
        if field1label is not None:
            pulumi.set(__self__, "field1label", field1label)
        if field1required is not None:
            pulumi.set(__self__, "field1required", field1required)
        if field2 is not None:
            pulumi.set(__self__, "field2", field2)
        if field2error is not None:
            pulumi.set(__self__, "field2error", field2error)
        if field2label is not None:
            pulumi.set(__self__, "field2label", field2label)
        if field2required is not None:
            pulumi.set(__self__, "field2required", field2required)
        if field3 is not None:
            pulumi.set(__self__, "field3", field3)
        if field3error is not None:
            pulumi.set(__self__, "field3error", field3error)
        if field3label is not None:
            pulumi.set(__self__, "field3label", field3label)
        if field3required is not None:
            pulumi.set(__self__, "field3required", field3required)
        if field4 is not None:
            pulumi.set(__self__, "field4", field4)
        if field4error is not None:
            pulumi.set(__self__, "field4error", field4error)
        if field4label is not None:
            pulumi.set(__self__, "field4label", field4label)
        if field4required is not None:
            pulumi.set(__self__, "field4required", field4required)
        if locales is not None:
            pulumi.set(__self__, "locales", locales)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if multi_auth is not None:
            pulumi.set(__self__, "multi_auth", multi_auth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_error is not None:
            pulumi.set(__self__, "name_error", name_error)
        if name_label is not None:
            pulumi.set(__self__, "name_label", name_label)
        if opt_out_default is not None:
            pulumi.set(__self__, "opt_out_default", opt_out_default)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if optout_label is not None:
            pulumi.set(__self__, "optout_label", optout_label)
        if page_title is not None:
            pulumi.set(__self__, "page_title", page_title)
        if passphrase_cancel is not None:
            pulumi.set(__self__, "passphrase_cancel", passphrase_cancel)
        if passphrase_error is not None:
            pulumi.set(__self__, "passphrase_error", passphrase_error)
        if passphrase_label is not None:
            pulumi.set(__self__, "passphrase_label", passphrase_label)
        if passphrase_message is not None:
            pulumi.set(__self__, "passphrase_message", passphrase_message)
        if passphrase_submit is not None:
            pulumi.set(__self__, "passphrase_submit", passphrase_submit)
        if passphrase_title is not None:
            pulumi.set(__self__, "passphrase_title", passphrase_title)
        if powered_by is not None:
            pulumi.set(__self__, "powered_by", powered_by)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if privacy_policy_accept_label is not None:
            pulumi.set(__self__, "privacy_policy_accept_label", privacy_policy_accept_label)
        if privacy_policy_error is not None:
            pulumi.set(__self__, "privacy_policy_error", privacy_policy_error)
        if privacy_policy_link is not None:
            pulumi.set(__self__, "privacy_policy_link", privacy_policy_link)
        if privacy_policy_text is not None:
            pulumi.set(__self__, "privacy_policy_text", privacy_policy_text)
        if required_field_label is not None:
            pulumi.set(__self__, "required_field_label", required_field_label)
        if responsive_layout is not None:
            pulumi.set(__self__, "responsive_layout", responsive_layout)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if sms_carrier_default is not None:
            pulumi.set(__self__, "sms_carrier_default", sms_carrier_default)
        if sms_carrier_error is not None:
            pulumi.set(__self__, "sms_carrier_error", sms_carrier_error)
        if sms_carrier_field_label is not None:
            pulumi.set(__self__, "sms_carrier_field_label", sms_carrier_field_label)
        if sms_code_cancel is not None:
            pulumi.set(__self__, "sms_code_cancel", sms_code_cancel)
        if sms_code_error is not None:
            pulumi.set(__self__, "sms_code_error", sms_code_error)
        if sms_code_field_label is not None:
            pulumi.set(__self__, "sms_code_field_label", sms_code_field_label)
        if sms_code_message is not None:
            pulumi.set(__self__, "sms_code_message", sms_code_message)
        if sms_code_submit is not None:
            pulumi.set(__self__, "sms_code_submit", sms_code_submit)
        if sms_code_title is not None:
            pulumi.set(__self__, "sms_code_title", sms_code_title)
        if sms_country_field_label is not None:
            pulumi.set(__self__, "sms_country_field_label", sms_country_field_label)
        if sms_country_format is not None:
            pulumi.set(__self__, "sms_country_format", sms_country_format)
        if sms_have_access_code is not None:
            pulumi.set(__self__, "sms_have_access_code", sms_have_access_code)
        if sms_is_twilio is not None:
            pulumi.set(__self__, "sms_is_twilio", sms_is_twilio)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_number_cancel is not None:
            pulumi.set(__self__, "sms_number_cancel", sms_number_cancel)
        if sms_number_error is not None:
            pulumi.set(__self__, "sms_number_error", sms_number_error)
        if sms_number_field_label is not None:
            pulumi.set(__self__, "sms_number_field_label", sms_number_field_label)
        if sms_number_format is not None:
            pulumi.set(__self__, "sms_number_format", sms_number_format)
        if sms_number_message is not None:
            pulumi.set(__self__, "sms_number_message", sms_number_message)
        if sms_number_submit is not None:
            pulumi.set(__self__, "sms_number_submit", sms_number_submit)
        if sms_number_title is not None:
            pulumi.set(__self__, "sms_number_title", sms_number_title)
        if sms_username_format is not None:
            pulumi.set(__self__, "sms_username_format", sms_username_format)
        if sms_validity_duration is not None:
            pulumi.set(__self__, "sms_validity_duration", sms_validity_duration)
        if sponsor_back_link is not None:
            pulumi.set(__self__, "sponsor_back_link", sponsor_back_link)
        if sponsor_cancel is not None:
            pulumi.set(__self__, "sponsor_cancel", sponsor_cancel)
        if sponsor_email is not None:
            pulumi.set(__self__, "sponsor_email", sponsor_email)
        if sponsor_email_error is not None:
            pulumi.set(__self__, "sponsor_email_error", sponsor_email_error)
        if sponsor_email_template is not None:
            pulumi.set(__self__, "sponsor_email_template", sponsor_email_template)
        if sponsor_info_approved is not None:
            pulumi.set(__self__, "sponsor_info_approved", sponsor_info_approved)
        if sponsor_info_denied is not None:
            pulumi.set(__self__, "sponsor_info_denied", sponsor_info_denied)
        if sponsor_info_pending is not None:
            pulumi.set(__self__, "sponsor_info_pending", sponsor_info_pending)
        if sponsor_name is not None:
            pulumi.set(__self__, "sponsor_name", sponsor_name)
        if sponsor_name_error is not None:
            pulumi.set(__self__, "sponsor_name_error", sponsor_name_error)
        if sponsor_note_pending is not None:
            pulumi.set(__self__, "sponsor_note_pending", sponsor_note_pending)
        if sponsor_request_access is not None:
            pulumi.set(__self__, "sponsor_request_access", sponsor_request_access)
        if sponsor_status_approved is not None:
            pulumi.set(__self__, "sponsor_status_approved", sponsor_status_approved)
        if sponsor_status_denied is not None:
            pulumi.set(__self__, "sponsor_status_denied", sponsor_status_denied)
        if sponsor_status_pending is not None:
            pulumi.set(__self__, "sponsor_status_pending", sponsor_status_pending)
        if sponsor_submit is not None:
            pulumi.set(__self__, "sponsor_submit", sponsor_submit)
        if sponsors_error is not None:
            pulumi.set(__self__, "sponsors_error", sponsors_error)
        if sponsors_field_label is not None:
            pulumi.set(__self__, "sponsors_field_label", sponsors_field_label)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_accept_label is not None:
            pulumi.set(__self__, "tos_accept_label", tos_accept_label)
        if tos_error is not None:
            pulumi.set(__self__, "tos_error", tos_error)
        if tos_link is not None:
            pulumi.set(__self__, "tos_link", tos_link)
        if tos_text is not None:
            pulumi.set(__self__, "tos_text", tos_text)

    @property
    @pulumi.getter(name="accessCodeAlternateEmail")
    def access_code_alternate_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_code_alternate_email")

    @access_code_alternate_email.setter
    def access_code_alternate_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_code_alternate_email", value)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input[str]]:
        """
        defines alignment on portal. enum: `center`, `left`, `right`
        """
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter(name="authButtonAmazon")
    def auth_button_amazon(self) -> Optional[pulumi.Input[str]]:
        """
        label for Amazon auth button
        """
        return pulumi.get(self, "auth_button_amazon")

    @auth_button_amazon.setter
    def auth_button_amazon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_amazon", value)

    @property
    @pulumi.getter(name="authButtonAzure")
    def auth_button_azure(self) -> Optional[pulumi.Input[str]]:
        """
        label for Azure auth button
        """
        return pulumi.get(self, "auth_button_azure")

    @auth_button_azure.setter
    def auth_button_azure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_azure", value)

    @property
    @pulumi.getter(name="authButtonEmail")
    def auth_button_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Email auth button
        """
        return pulumi.get(self, "auth_button_email")

    @auth_button_email.setter
    def auth_button_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_email", value)

    @property
    @pulumi.getter(name="authButtonFacebook")
    def auth_button_facebook(self) -> Optional[pulumi.Input[str]]:
        """
        label for Facebook auth button
        """
        return pulumi.get(self, "auth_button_facebook")

    @auth_button_facebook.setter
    def auth_button_facebook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_facebook", value)

    @property
    @pulumi.getter(name="authButtonGoogle")
    def auth_button_google(self) -> Optional[pulumi.Input[str]]:
        """
        label for Google auth button
        """
        return pulumi.get(self, "auth_button_google")

    @auth_button_google.setter
    def auth_button_google(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_google", value)

    @property
    @pulumi.getter(name="authButtonMicrosoft")
    def auth_button_microsoft(self) -> Optional[pulumi.Input[str]]:
        """
        label for Microsoft auth button
        """
        return pulumi.get(self, "auth_button_microsoft")

    @auth_button_microsoft.setter
    def auth_button_microsoft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_microsoft", value)

    @property
    @pulumi.getter(name="authButtonPassphrase")
    def auth_button_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        label for passphrase auth button
        """
        return pulumi.get(self, "auth_button_passphrase")

    @auth_button_passphrase.setter
    def auth_button_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_passphrase", value)

    @property
    @pulumi.getter(name="authButtonSms")
    def auth_button_sms(self) -> Optional[pulumi.Input[str]]:
        """
        label for SMS auth button
        """
        return pulumi.get(self, "auth_button_sms")

    @auth_button_sms.setter
    def auth_button_sms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sms", value)

    @property
    @pulumi.getter(name="authButtonSponsor")
    def auth_button_sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor auth button
        """
        return pulumi.get(self, "auth_button_sponsor")

    @auth_button_sponsor.setter
    def auth_button_sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sponsor", value)

    @property
    @pulumi.getter(name="authLabel")
    def auth_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_label")

    @auth_label.setter
    def auth_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_label", value)

    @property
    @pulumi.getter(name="backLink")
    def back_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go back to /logon
        """
        return pulumi.get(self, "back_link")

    @back_link.setter
    def back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "back_link", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        Portal main color
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorDark")
    def color_dark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_dark")

    @color_dark.setter
    def color_dark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_dark", value)

    @property
    @pulumi.getter(name="colorLight")
    def color_light(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_light")

    @color_light.setter
    def color_light(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_light", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[bool]]:
        """
        whether company field is required
        """
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter(name="companyError")
    def company_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when company not provided
        """
        return pulumi.get(self, "company_error")

    @company_error.setter
    def company_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_error", value)

    @property
    @pulumi.getter(name="companyLabel")
    def company_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of company field
        """
        return pulumi.get(self, "company_label")

    @company_label.setter
    def company_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_label", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        """
        whether email field is required
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailAccessDomainError")
    def email_access_domain_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        return pulumi.get(self, "email_access_domain_error")

    @email_access_domain_error.setter
    def email_access_domain_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_access_domain_error", value)

    @property
    @pulumi.getter(name="emailCancel")
    def email_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission using email auth
        """
        return pulumi.get(self, "email_cancel")

    @email_cancel.setter
    def email_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_cancel", value)

    @property
    @pulumi.getter(name="emailCodeCancel")
    def email_code_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_cancel")

    @email_code_cancel.setter
    def email_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_cancel", value)

    @property
    @pulumi.getter(name="emailCodeError")
    def email_code_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_error")

    @email_code_error.setter
    def email_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_error", value)

    @property
    @pulumi.getter(name="emailCodeFieldLabel")
    def email_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_field_label")

    @email_code_field_label.setter
    def email_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_field_label", value)

    @property
    @pulumi.getter(name="emailCodeMessage")
    def email_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_message")

    @email_code_message.setter
    def email_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_message", value)

    @property
    @pulumi.getter(name="emailCodeSubmit")
    def email_code_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_submit")

    @email_code_submit.setter
    def email_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_submit", value)

    @property
    @pulumi.getter(name="emailCodeTitle")
    def email_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_title")

    @email_code_title.setter
    def email_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_title", value)

    @property
    @pulumi.getter(name="emailError")
    def email_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when email not provided
        """
        return pulumi.get(self, "email_error")

    @email_error.setter
    def email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_error", value)

    @property
    @pulumi.getter(name="emailFieldLabel")
    def email_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_field_label")

    @email_field_label.setter
    def email_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_field_label", value)

    @property
    @pulumi.getter(name="emailLabel")
    def email_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of email field
        """
        return pulumi.get(self, "email_label")

    @email_label.setter
    def email_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_label", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="emailSubmit")
    def email_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button using email auth
        """
        return pulumi.get(self, "email_submit")

    @email_submit.setter
    def email_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_submit", value)

    @property
    @pulumi.getter(name="emailTitle")
    def email_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the Email registration
        """
        return pulumi.get(self, "email_title")

    @email_title.setter
    def email_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_title", value)

    @property
    @pulumi.getter
    def field1(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field1
        """
        return pulumi.get(self, "field1")

    @field1.setter
    def field1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field1", value)

    @property
    @pulumi.getter
    def field1error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field1 not provided
        """
        return pulumi.get(self, "field1error")

    @field1error.setter
    def field1error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1error", value)

    @property
    @pulumi.getter
    def field1label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field1
        """
        return pulumi.get(self, "field1label")

    @field1label.setter
    def field1label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1label", value)

    @property
    @pulumi.getter
    def field1required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field1 is required field
        """
        return pulumi.get(self, "field1required")

    @field1required.setter
    def field1required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field1required", value)

    @property
    @pulumi.getter
    def field2(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field2
        """
        return pulumi.get(self, "field2")

    @field2.setter
    def field2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field2", value)

    @property
    @pulumi.getter
    def field2error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field2 not provided
        """
        return pulumi.get(self, "field2error")

    @field2error.setter
    def field2error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2error", value)

    @property
    @pulumi.getter
    def field2label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field2
        """
        return pulumi.get(self, "field2label")

    @field2label.setter
    def field2label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2label", value)

    @property
    @pulumi.getter
    def field2required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field2 is required field
        """
        return pulumi.get(self, "field2required")

    @field2required.setter
    def field2required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field2required", value)

    @property
    @pulumi.getter
    def field3(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field3
        """
        return pulumi.get(self, "field3")

    @field3.setter
    def field3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field3", value)

    @property
    @pulumi.getter
    def field3error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field3 not provided
        """
        return pulumi.get(self, "field3error")

    @field3error.setter
    def field3error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3error", value)

    @property
    @pulumi.getter
    def field3label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field3
        """
        return pulumi.get(self, "field3label")

    @field3label.setter
    def field3label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3label", value)

    @property
    @pulumi.getter
    def field3required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field3 is required field
        """
        return pulumi.get(self, "field3required")

    @field3required.setter
    def field3required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field3required", value)

    @property
    @pulumi.getter
    def field4(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field4
        """
        return pulumi.get(self, "field4")

    @field4.setter
    def field4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field4", value)

    @property
    @pulumi.getter
    def field4error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field4 not provided
        """
        return pulumi.get(self, "field4error")

    @field4error.setter
    def field4error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4error", value)

    @property
    @pulumi.getter
    def field4label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field4
        """
        return pulumi.get(self, "field4label")

    @field4label.setter
    def field4label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4label", value)

    @property
    @pulumi.getter
    def field4required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field4 is required field
        """
        return pulumi.get(self, "field4required")

    @field4required.setter
    def field4required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field4required", value)

    @property
    @pulumi.getter
    def locales(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]]:
        """
        Can be used to localize the portal based on the User Agent. Allowed property key values are:
          `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
          `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
          `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
          `zh-Hans`, `zh-Hant`
        """
        return pulumi.get(self, "locales")

    @locales.setter
    def locales(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]]):
        pulumi.set(self, "locales", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        path to the background image file. File must be a `png` image less than 100kB and image dimension must be less 500px x 200px (width x height).
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="multiAuth")
    def multi_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_auth")

    @multi_auth.setter
    def multi_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_auth", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[bool]]:
        """
        whether name field is required
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameError")
    def name_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when name not provided
        """
        return pulumi.get(self, "name_error")

    @name_error.setter
    def name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_error", value)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of name field
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_label", value)

    @property
    @pulumi.getter(name="optOutDefault")
    def opt_out_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default value for the `Do not store` checkbox
        """
        return pulumi.get(self, "opt_out_default")

    @opt_out_default.setter
    def opt_out_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "opt_out_default", value)

    @property
    @pulumi.getter
    def optout(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to display Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout")

    @optout.setter
    def optout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optout", value)

    @property
    @pulumi.getter(name="optoutLabel")
    def optout_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout_label")

    @optout_label.setter
    def optout_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optout_label", value)

    @property
    @pulumi.getter(name="pageTitle")
    def page_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_title")

    @page_title.setter
    def page_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_title", value)

    @property
    @pulumi.getter(name="passphraseCancel")
    def passphrase_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase cancel button
        """
        return pulumi.get(self, "passphrase_cancel")

    @passphrase_cancel.setter
    def passphrase_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_cancel", value)

    @property
    @pulumi.getter(name="passphraseError")
    def passphrase_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when invalid passphrase is provided
        """
        return pulumi.get(self, "passphrase_error")

    @passphrase_error.setter
    def passphrase_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_error", value)

    @property
    @pulumi.getter(name="passphraseLabel")
    def passphrase_label(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase
        """
        return pulumi.get(self, "passphrase_label")

    @passphrase_label.setter
    def passphrase_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_label", value)

    @property
    @pulumi.getter(name="passphraseMessage")
    def passphrase_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_message")

    @passphrase_message.setter
    def passphrase_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_message", value)

    @property
    @pulumi.getter(name="passphraseSubmit")
    def passphrase_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase submit button
        """
        return pulumi.get(self, "passphrase_submit")

    @passphrase_submit.setter
    def passphrase_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_submit", value)

    @property
    @pulumi.getter(name="passphraseTitle")
    def passphrase_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for passphrase details page
        """
        return pulumi.get(self, "passphrase_title")

    @passphrase_title.setter
    def passphrase_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_title", value)

    @property
    @pulumi.getter(name="poweredBy")
    def powered_by(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show \\"Powered by Mist\\"
        """
        return pulumi.get(self, "powered_by")

    @powered_by.setter
    def powered_by(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "powered_by", value)

    @property
    @pulumi.getter
    def privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        wheter to require the Privacy Term acceptance
        """
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="privacyPolicyAcceptLabel")
    def privacy_policy_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_accept_label")

    @privacy_policy_accept_label.setter
    def privacy_policy_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_accept_label", value)

    @property
    @pulumi.getter(name="privacyPolicyError")
    def privacy_policy_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when Privacy Policy not accepted
        """
        return pulumi.get(self, "privacy_policy_error")

    @privacy_policy_error.setter
    def privacy_policy_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_error", value)

    @property
    @pulumi.getter(name="privacyPolicyLink")
    def privacy_policy_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_link")

    @privacy_policy_link.setter
    def privacy_policy_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_link", value)

    @property
    @pulumi.getter(name="privacyPolicyText")
    def privacy_policy_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_text")

    @privacy_policy_text.setter
    def privacy_policy_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_text", value)

    @property
    @pulumi.getter(name="requiredFieldLabel")
    def required_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label to denote required field
        """
        return pulumi.get(self, "required_field_label")

    @required_field_label.setter
    def required_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_field_label", value)

    @property
    @pulumi.getter(name="responsiveLayout")
    def responsive_layout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "responsive_layout")

    @responsive_layout.setter
    def responsive_layout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "responsive_layout", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of the button to /signin
        """
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="smsCarrierDefault")
    def sms_carrier_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_default")

    @sms_carrier_default.setter
    def sms_carrier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_default", value)

    @property
    @pulumi.getter(name="smsCarrierError")
    def sms_carrier_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_error")

    @sms_carrier_error.setter
    def sms_carrier_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_error", value)

    @property
    @pulumi.getter(name="smsCarrierFieldLabel")
    def sms_carrier_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for mobile carrier drop-down list
        """
        return pulumi.get(self, "sms_carrier_field_label")

    @sms_carrier_field_label.setter
    def sms_carrier_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_field_label", value)

    @property
    @pulumi.getter(name="smsCodeCancel")
    def sms_code_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission
        """
        return pulumi.get(self, "sms_code_cancel")

    @sms_code_cancel.setter
    def sms_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_cancel", value)

    @property
    @pulumi.getter(name="smsCodeError")
    def sms_code_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when confirmation code is invalid
        """
        return pulumi.get(self, "sms_code_error")

    @sms_code_error.setter
    def sms_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_error", value)

    @property
    @pulumi.getter(name="smsCodeFieldLabel")
    def sms_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_field_label")

    @sms_code_field_label.setter
    def sms_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_field_label", value)

    @property
    @pulumi.getter(name="smsCodeMessage")
    def sms_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_message")

    @sms_code_message.setter
    def sms_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_message", value)

    @property
    @pulumi.getter(name="smsCodeSubmit")
    def sms_code_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button
        """
        return pulumi.get(self, "sms_code_submit")

    @sms_code_submit.setter
    def sms_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_submit", value)

    @property
    @pulumi.getter(name="smsCodeTitle")
    def sms_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_title")

    @sms_code_title.setter
    def sms_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_title", value)

    @property
    @pulumi.getter(name="smsCountryFieldLabel")
    def sms_country_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_field_label")

    @sms_country_field_label.setter
    def sms_country_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_field_label", value)

    @property
    @pulumi.getter(name="smsCountryFormat")
    def sms_country_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_format")

    @sms_country_format.setter
    def sms_country_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_format", value)

    @property
    @pulumi.getter(name="smsHaveAccessCode")
    def sms_have_access_code(self) -> Optional[pulumi.Input[str]]:
        """
        Label for checkbox to specify that the user has access code
        """
        return pulumi.get(self, "sms_have_access_code")

    @sms_have_access_code.setter
    def sms_have_access_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_have_access_code", value)

    @property
    @pulumi.getter(name="smsIsTwilio")
    def sms_is_twilio(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms_is_twilio")

    @sms_is_twilio.setter
    def sms_is_twilio(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_is_twilio", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsNumberCancel")
    def sms_number_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        label for canceling mobile details for SMS auth
        """
        return pulumi.get(self, "sms_number_cancel")

    @sms_number_cancel.setter
    def sms_number_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_cancel", value)

    @property
    @pulumi.getter(name="smsNumberError")
    def sms_number_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_error")

    @sms_number_error.setter
    def sms_number_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_error", value)

    @property
    @pulumi.getter(name="smsNumberFieldLabel")
    def sms_number_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for field to provide mobile number
        """
        return pulumi.get(self, "sms_number_field_label")

    @sms_number_field_label.setter
    def sms_number_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_field_label", value)

    @property
    @pulumi.getter(name="smsNumberFormat")
    def sms_number_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_format")

    @sms_number_format.setter
    def sms_number_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_format", value)

    @property
    @pulumi.getter(name="smsNumberMessage")
    def sms_number_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_message")

    @sms_number_message.setter
    def sms_number_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_message", value)

    @property
    @pulumi.getter(name="smsNumberSubmit")
    def sms_number_submit(self) -> Optional[pulumi.Input[str]]:
        """
        label for submit button for code generation
        """
        return pulumi.get(self, "sms_number_submit")

    @sms_number_submit.setter
    def sms_number_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_submit", value)

    @property
    @pulumi.getter(name="smsNumberTitle")
    def sms_number_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for phone number details
        """
        return pulumi.get(self, "sms_number_title")

    @sms_number_title.setter
    def sms_number_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_title", value)

    @property
    @pulumi.getter(name="smsUsernameFormat")
    def sms_username_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_username_format")

    @sms_username_format.setter
    def sms_username_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_username_format", value)

    @property
    @pulumi.getter(name="smsValidityDuration")
    def sms_validity_duration(self) -> Optional[pulumi.Input[int]]:
        """
        how long confirmation code should be considered valid (in minutes)
        """
        return pulumi.get(self, "sms_validity_duration")

    @sms_validity_duration.setter
    def sms_validity_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sms_validity_duration", value)

    @property
    @pulumi.getter(name="sponsorBackLink")
    def sponsor_back_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_back_link")

    @sponsor_back_link.setter
    def sponsor_back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_back_link", value)

    @property
    @pulumi.getter(name="sponsorCancel")
    def sponsor_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_cancel")

    @sponsor_cancel.setter
    def sponsor_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_cancel", value)

    @property
    @pulumi.getter(name="sponsorEmail")
    def sponsor_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Email
        """
        return pulumi.get(self, "sponsor_email")

    @sponsor_email.setter
    def sponsor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email", value)

    @property
    @pulumi.getter(name="sponsorEmailError")
    def sponsor_email_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_email_error")

    @sponsor_email_error.setter
    def sponsor_email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_error", value)

    @property
    @pulumi.getter(name="sponsorEmailTemplate")
    def sponsor_email_template(self) -> Optional[pulumi.Input[str]]:
        """
        html template to replace/override default sponsor email template 
        Sponsor Email Template supports following template variables:
          * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
          * `deny_url`: Renders URL to reject the request
          * `guest_email`: Renders Email ID of the guest
          * `guest_name`: Renders Name of the guest
          * `field1`: Renders value of the Custom Field 1
          * `field2`: Renders value of the Custom Field 2
          * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
          * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
        """
        return pulumi.get(self, "sponsor_email_template")

    @sponsor_email_template.setter
    def sponsor_email_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_template", value)

    @property
    @pulumi.getter(name="sponsorInfoApproved")
    def sponsor_info_approved(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_approved")

    @sponsor_info_approved.setter
    def sponsor_info_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_approved", value)

    @property
    @pulumi.getter(name="sponsorInfoDenied")
    def sponsor_info_denied(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_denied")

    @sponsor_info_denied.setter
    def sponsor_info_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_denied", value)

    @property
    @pulumi.getter(name="sponsorInfoPending")
    def sponsor_info_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_pending")

    @sponsor_info_pending.setter
    def sponsor_info_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_pending", value)

    @property
    @pulumi.getter(name="sponsorName")
    def sponsor_name(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Name
        """
        return pulumi.get(self, "sponsor_name")

    @sponsor_name.setter
    def sponsor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name", value)

    @property
    @pulumi.getter(name="sponsorNameError")
    def sponsor_name_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_name_error")

    @sponsor_name_error.setter
    def sponsor_name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name_error", value)

    @property
    @pulumi.getter(name="sponsorNotePending")
    def sponsor_note_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_note_pending")

    @sponsor_note_pending.setter
    def sponsor_note_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_note_pending", value)

    @property
    @pulumi.getter(name="sponsorRequestAccess")
    def sponsor_request_access(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_request_access")

    @sponsor_request_access.setter
    def sponsor_request_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_request_access", value)

    @property
    @pulumi.getter(name="sponsorStatusApproved")
    def sponsor_status_approved(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if sponsor approves request
        """
        return pulumi.get(self, "sponsor_status_approved")

    @sponsor_status_approved.setter
    def sponsor_status_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_approved", value)

    @property
    @pulumi.getter(name="sponsorStatusDenied")
    def sponsor_status_denied(self) -> Optional[pulumi.Input[str]]:
        """
        text to display when sponsor denies request
        """
        return pulumi.get(self, "sponsor_status_denied")

    @sponsor_status_denied.setter
    def sponsor_status_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_denied", value)

    @property
    @pulumi.getter(name="sponsorStatusPending")
    def sponsor_status_pending(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if request is still pending
        """
        return pulumi.get(self, "sponsor_status_pending")

    @sponsor_status_pending.setter
    def sponsor_status_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_pending", value)

    @property
    @pulumi.getter(name="sponsorSubmit")
    def sponsor_submit(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label to notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_submit")

    @sponsor_submit.setter
    def sponsor_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_submit", value)

    @property
    @pulumi.getter(name="sponsorsError")
    def sponsors_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_error")

    @sponsors_error.setter
    def sponsors_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_error", value)

    @property
    @pulumi.getter(name="sponsorsFieldLabel")
    def sponsors_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_field_label")

    @sponsors_field_label.setter
    def sponsors_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_field_label", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosAcceptLabel")
    def tos_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to tos
        """
        return pulumi.get(self, "tos_accept_label")

    @tos_accept_label.setter
    def tos_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_accept_label", value)

    @property
    @pulumi.getter(name="tosError")
    def tos_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when tos not accepted
        """
        return pulumi.get(self, "tos_error")

    @tos_error.setter
    def tos_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_error", value)

    @property
    @pulumi.getter(name="tosLink")
    def tos_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to tos
        """
        return pulumi.get(self, "tos_link")

    @tos_link.setter
    def tos_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_link", value)

    @property
    @pulumi.getter(name="tosText")
    def tos_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Terms of Service
        """
        return pulumi.get(self, "tos_text")

    @tos_text.setter
    def tos_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_text", value)


@pulumi.input_type
class WlanPortalTemplatePortalTemplateLocalesArgs:
    def __init__(__self__, *,
                 auth_button_amazon: Optional[pulumi.Input[str]] = None,
                 auth_button_azure: Optional[pulumi.Input[str]] = None,
                 auth_button_email: Optional[pulumi.Input[str]] = None,
                 auth_button_facebook: Optional[pulumi.Input[str]] = None,
                 auth_button_google: Optional[pulumi.Input[str]] = None,
                 auth_button_microsoft: Optional[pulumi.Input[str]] = None,
                 auth_button_passphrase: Optional[pulumi.Input[str]] = None,
                 auth_button_sms: Optional[pulumi.Input[str]] = None,
                 auth_button_sponsor: Optional[pulumi.Input[str]] = None,
                 auth_label: Optional[pulumi.Input[str]] = None,
                 back_link: Optional[pulumi.Input[str]] = None,
                 company_error: Optional[pulumi.Input[str]] = None,
                 company_label: Optional[pulumi.Input[str]] = None,
                 email_access_domain_error: Optional[pulumi.Input[str]] = None,
                 email_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_error: Optional[pulumi.Input[str]] = None,
                 email_code_field_label: Optional[pulumi.Input[str]] = None,
                 email_code_message: Optional[pulumi.Input[str]] = None,
                 email_code_submit: Optional[pulumi.Input[str]] = None,
                 email_code_title: Optional[pulumi.Input[str]] = None,
                 email_error: Optional[pulumi.Input[str]] = None,
                 email_field_label: Optional[pulumi.Input[str]] = None,
                 email_label: Optional[pulumi.Input[str]] = None,
                 email_message: Optional[pulumi.Input[str]] = None,
                 email_submit: Optional[pulumi.Input[str]] = None,
                 email_title: Optional[pulumi.Input[str]] = None,
                 field1error: Optional[pulumi.Input[str]] = None,
                 field1label: Optional[pulumi.Input[str]] = None,
                 field2error: Optional[pulumi.Input[str]] = None,
                 field2label: Optional[pulumi.Input[str]] = None,
                 field3error: Optional[pulumi.Input[str]] = None,
                 field3label: Optional[pulumi.Input[str]] = None,
                 field4error: Optional[pulumi.Input[str]] = None,
                 field4label: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name_error: Optional[pulumi.Input[str]] = None,
                 name_label: Optional[pulumi.Input[str]] = None,
                 optout_label: Optional[pulumi.Input[str]] = None,
                 page_title: Optional[pulumi.Input[str]] = None,
                 passphrase_cancel: Optional[pulumi.Input[str]] = None,
                 passphrase_error: Optional[pulumi.Input[str]] = None,
                 passphrase_label: Optional[pulumi.Input[str]] = None,
                 passphrase_message: Optional[pulumi.Input[str]] = None,
                 passphrase_submit: Optional[pulumi.Input[str]] = None,
                 passphrase_title: Optional[pulumi.Input[str]] = None,
                 privacy_policy_accept_label: Optional[pulumi.Input[str]] = None,
                 privacy_policy_error: Optional[pulumi.Input[str]] = None,
                 privacy_policy_link: Optional[pulumi.Input[str]] = None,
                 privacy_policy_text: Optional[pulumi.Input[str]] = None,
                 required_field_label: Optional[pulumi.Input[str]] = None,
                 sign_in_label: Optional[pulumi.Input[str]] = None,
                 sms_carrier_default: Optional[pulumi.Input[str]] = None,
                 sms_carrier_error: Optional[pulumi.Input[str]] = None,
                 sms_carrier_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_cancel: Optional[pulumi.Input[str]] = None,
                 sms_code_error: Optional[pulumi.Input[str]] = None,
                 sms_code_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_message: Optional[pulumi.Input[str]] = None,
                 sms_code_submit: Optional[pulumi.Input[str]] = None,
                 sms_code_title: Optional[pulumi.Input[str]] = None,
                 sms_country_field_label: Optional[pulumi.Input[str]] = None,
                 sms_country_format: Optional[pulumi.Input[str]] = None,
                 sms_have_access_code: Optional[pulumi.Input[str]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_number_cancel: Optional[pulumi.Input[str]] = None,
                 sms_number_error: Optional[pulumi.Input[str]] = None,
                 sms_number_field_label: Optional[pulumi.Input[str]] = None,
                 sms_number_format: Optional[pulumi.Input[str]] = None,
                 sms_number_message: Optional[pulumi.Input[str]] = None,
                 sms_number_submit: Optional[pulumi.Input[str]] = None,
                 sms_number_title: Optional[pulumi.Input[str]] = None,
                 sms_username_format: Optional[pulumi.Input[str]] = None,
                 sponsor_back_link: Optional[pulumi.Input[str]] = None,
                 sponsor_cancel: Optional[pulumi.Input[str]] = None,
                 sponsor_email: Optional[pulumi.Input[str]] = None,
                 sponsor_email_error: Optional[pulumi.Input[str]] = None,
                 sponsor_info_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_info_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_info_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_name: Optional[pulumi.Input[str]] = None,
                 sponsor_name_error: Optional[pulumi.Input[str]] = None,
                 sponsor_note_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_request_access: Optional[pulumi.Input[str]] = None,
                 sponsor_status_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_status_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_status_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_submit: Optional[pulumi.Input[str]] = None,
                 sponsors_error: Optional[pulumi.Input[str]] = None,
                 sponsors_field_label: Optional[pulumi.Input[str]] = None,
                 tos_accept_label: Optional[pulumi.Input[str]] = None,
                 tos_error: Optional[pulumi.Input[str]] = None,
                 tos_link: Optional[pulumi.Input[str]] = None,
                 tos_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_button_amazon: label for Amazon auth button
        :param pulumi.Input[str] auth_button_azure: label for Azure auth button
        :param pulumi.Input[str] auth_button_email: label for Email auth button
        :param pulumi.Input[str] auth_button_facebook: label for Facebook auth button
        :param pulumi.Input[str] auth_button_google: label for Google auth button
        :param pulumi.Input[str] auth_button_microsoft: label for Microsoft auth button
        :param pulumi.Input[str] auth_button_passphrase: label for passphrase auth button
        :param pulumi.Input[str] auth_button_sms: label for SMS auth button
        :param pulumi.Input[str] auth_button_sponsor: label for Sponsor auth button
        :param pulumi.Input[str] back_link: label of the link to go back to /logon
        :param pulumi.Input[str] company_error: error message when company not provided
        :param pulumi.Input[str] company_label: label of company field
        :param pulumi.Input[str] email_access_domain_error: error message when a user has valid social login but doesn't match specified email domains.
        :param pulumi.Input[str] email_cancel: Label for cancel confirmation code submission using email auth
        :param pulumi.Input[str] email_error: error message when email not provided
        :param pulumi.Input[str] email_label: label of email field
        :param pulumi.Input[str] email_submit: Label for confirmation code submit button using email auth
        :param pulumi.Input[str] email_title: Title for the Email registration
        :param pulumi.Input[str] field1error: error message when field1 not provided
        :param pulumi.Input[str] field1label: label of field1
        :param pulumi.Input[str] field2error: error message when field2 not provided
        :param pulumi.Input[str] field2label: label of field2
        :param pulumi.Input[str] field3error: error message when field3 not provided
        :param pulumi.Input[str] field3label: label of field3
        :param pulumi.Input[str] field4error: error message when field4 not provided
        :param pulumi.Input[str] field4label: label of field4
        :param pulumi.Input[str] name_error: error message when name not provided
        :param pulumi.Input[str] name_label: label of name field
        :param pulumi.Input[str] optout_label: label for Do Not Store My Personal Information
        :param pulumi.Input[str] passphrase_cancel: Label for the Passphrase cancel button
        :param pulumi.Input[str] passphrase_error: error message when invalid passphrase is provided
        :param pulumi.Input[str] passphrase_label: Passphrase
        :param pulumi.Input[str] passphrase_submit: Label for the Passphrase submit button
        :param pulumi.Input[str] passphrase_title: Title for passphrase details page
        :param pulumi.Input[str] privacy_policy_accept_label: prefix of the label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_error: error message when Privacy Policy not accepted
        :param pulumi.Input[str] privacy_policy_link: label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_text: text of the Privacy Policy
        :param pulumi.Input[str] required_field_label: label to denote required field
        :param pulumi.Input[str] sign_in_label: label of the button to /signin
        :param pulumi.Input[str] sms_carrier_field_label: label for mobile carrier drop-down list
        :param pulumi.Input[str] sms_code_cancel: Label for cancel confirmation code submission
        :param pulumi.Input[str] sms_code_error: error message when confirmation code is invalid
        :param pulumi.Input[str] sms_code_submit: Label for confirmation code submit button
        :param pulumi.Input[str] sms_have_access_code: Label for checkbox to specify that the user has access code
        :param pulumi.Input[str] sms_message_format: format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        :param pulumi.Input[str] sms_number_cancel: label for canceling mobile details for SMS auth
        :param pulumi.Input[str] sms_number_field_label: label for field to provide mobile number
        :param pulumi.Input[str] sms_number_submit: label for submit button for code generation
        :param pulumi.Input[str] sms_number_title: Title for phone number details
        :param pulumi.Input[str] sponsor_email: label for Sponsor Email
        :param pulumi.Input[str] sponsor_name: label for Sponsor Name
        :param pulumi.Input[str] sponsor_request_access: submit button label request Wifi Access and notify sponsor about guest request
        :param pulumi.Input[str] sponsor_status_approved: text to display if sponsor approves request
        :param pulumi.Input[str] sponsor_status_denied: text to display when sponsor denies request
        :param pulumi.Input[str] sponsor_status_pending: text to display if request is still pending
        :param pulumi.Input[str] sponsor_submit: submit button label to notify sponsor about guest request
        :param pulumi.Input[str] tos_accept_label: prefix of the label of the link to go to tos
        :param pulumi.Input[str] tos_error: error message when tos not accepted
        :param pulumi.Input[str] tos_link: label of the link to go to tos
        :param pulumi.Input[str] tos_text: text of the Terms of Service
        """
        if auth_button_amazon is not None:
            pulumi.set(__self__, "auth_button_amazon", auth_button_amazon)
        if auth_button_azure is not None:
            pulumi.set(__self__, "auth_button_azure", auth_button_azure)
        if auth_button_email is not None:
            pulumi.set(__self__, "auth_button_email", auth_button_email)
        if auth_button_facebook is not None:
            pulumi.set(__self__, "auth_button_facebook", auth_button_facebook)
        if auth_button_google is not None:
            pulumi.set(__self__, "auth_button_google", auth_button_google)
        if auth_button_microsoft is not None:
            pulumi.set(__self__, "auth_button_microsoft", auth_button_microsoft)
        if auth_button_passphrase is not None:
            pulumi.set(__self__, "auth_button_passphrase", auth_button_passphrase)
        if auth_button_sms is not None:
            pulumi.set(__self__, "auth_button_sms", auth_button_sms)
        if auth_button_sponsor is not None:
            pulumi.set(__self__, "auth_button_sponsor", auth_button_sponsor)
        if auth_label is not None:
            pulumi.set(__self__, "auth_label", auth_label)
        if back_link is not None:
            pulumi.set(__self__, "back_link", back_link)
        if company_error is not None:
            pulumi.set(__self__, "company_error", company_error)
        if company_label is not None:
            pulumi.set(__self__, "company_label", company_label)
        if email_access_domain_error is not None:
            pulumi.set(__self__, "email_access_domain_error", email_access_domain_error)
        if email_cancel is not None:
            pulumi.set(__self__, "email_cancel", email_cancel)
        if email_code_cancel is not None:
            pulumi.set(__self__, "email_code_cancel", email_code_cancel)
        if email_code_error is not None:
            pulumi.set(__self__, "email_code_error", email_code_error)
        if email_code_field_label is not None:
            pulumi.set(__self__, "email_code_field_label", email_code_field_label)
        if email_code_message is not None:
            pulumi.set(__self__, "email_code_message", email_code_message)
        if email_code_submit is not None:
            pulumi.set(__self__, "email_code_submit", email_code_submit)
        if email_code_title is not None:
            pulumi.set(__self__, "email_code_title", email_code_title)
        if email_error is not None:
            pulumi.set(__self__, "email_error", email_error)
        if email_field_label is not None:
            pulumi.set(__self__, "email_field_label", email_field_label)
        if email_label is not None:
            pulumi.set(__self__, "email_label", email_label)
        if email_message is not None:
            pulumi.set(__self__, "email_message", email_message)
        if email_submit is not None:
            pulumi.set(__self__, "email_submit", email_submit)
        if email_title is not None:
            pulumi.set(__self__, "email_title", email_title)
        if field1error is not None:
            pulumi.set(__self__, "field1error", field1error)
        if field1label is not None:
            pulumi.set(__self__, "field1label", field1label)
        if field2error is not None:
            pulumi.set(__self__, "field2error", field2error)
        if field2label is not None:
            pulumi.set(__self__, "field2label", field2label)
        if field3error is not None:
            pulumi.set(__self__, "field3error", field3error)
        if field3label is not None:
            pulumi.set(__self__, "field3label", field3label)
        if field4error is not None:
            pulumi.set(__self__, "field4error", field4error)
        if field4label is not None:
            pulumi.set(__self__, "field4label", field4label)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name_error is not None:
            pulumi.set(__self__, "name_error", name_error)
        if name_label is not None:
            pulumi.set(__self__, "name_label", name_label)
        if optout_label is not None:
            pulumi.set(__self__, "optout_label", optout_label)
        if page_title is not None:
            pulumi.set(__self__, "page_title", page_title)
        if passphrase_cancel is not None:
            pulumi.set(__self__, "passphrase_cancel", passphrase_cancel)
        if passphrase_error is not None:
            pulumi.set(__self__, "passphrase_error", passphrase_error)
        if passphrase_label is not None:
            pulumi.set(__self__, "passphrase_label", passphrase_label)
        if passphrase_message is not None:
            pulumi.set(__self__, "passphrase_message", passphrase_message)
        if passphrase_submit is not None:
            pulumi.set(__self__, "passphrase_submit", passphrase_submit)
        if passphrase_title is not None:
            pulumi.set(__self__, "passphrase_title", passphrase_title)
        if privacy_policy_accept_label is not None:
            pulumi.set(__self__, "privacy_policy_accept_label", privacy_policy_accept_label)
        if privacy_policy_error is not None:
            pulumi.set(__self__, "privacy_policy_error", privacy_policy_error)
        if privacy_policy_link is not None:
            pulumi.set(__self__, "privacy_policy_link", privacy_policy_link)
        if privacy_policy_text is not None:
            pulumi.set(__self__, "privacy_policy_text", privacy_policy_text)
        if required_field_label is not None:
            pulumi.set(__self__, "required_field_label", required_field_label)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if sms_carrier_default is not None:
            pulumi.set(__self__, "sms_carrier_default", sms_carrier_default)
        if sms_carrier_error is not None:
            pulumi.set(__self__, "sms_carrier_error", sms_carrier_error)
        if sms_carrier_field_label is not None:
            pulumi.set(__self__, "sms_carrier_field_label", sms_carrier_field_label)
        if sms_code_cancel is not None:
            pulumi.set(__self__, "sms_code_cancel", sms_code_cancel)
        if sms_code_error is not None:
            pulumi.set(__self__, "sms_code_error", sms_code_error)
        if sms_code_field_label is not None:
            pulumi.set(__self__, "sms_code_field_label", sms_code_field_label)
        if sms_code_message is not None:
            pulumi.set(__self__, "sms_code_message", sms_code_message)
        if sms_code_submit is not None:
            pulumi.set(__self__, "sms_code_submit", sms_code_submit)
        if sms_code_title is not None:
            pulumi.set(__self__, "sms_code_title", sms_code_title)
        if sms_country_field_label is not None:
            pulumi.set(__self__, "sms_country_field_label", sms_country_field_label)
        if sms_country_format is not None:
            pulumi.set(__self__, "sms_country_format", sms_country_format)
        if sms_have_access_code is not None:
            pulumi.set(__self__, "sms_have_access_code", sms_have_access_code)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_number_cancel is not None:
            pulumi.set(__self__, "sms_number_cancel", sms_number_cancel)
        if sms_number_error is not None:
            pulumi.set(__self__, "sms_number_error", sms_number_error)
        if sms_number_field_label is not None:
            pulumi.set(__self__, "sms_number_field_label", sms_number_field_label)
        if sms_number_format is not None:
            pulumi.set(__self__, "sms_number_format", sms_number_format)
        if sms_number_message is not None:
            pulumi.set(__self__, "sms_number_message", sms_number_message)
        if sms_number_submit is not None:
            pulumi.set(__self__, "sms_number_submit", sms_number_submit)
        if sms_number_title is not None:
            pulumi.set(__self__, "sms_number_title", sms_number_title)
        if sms_username_format is not None:
            pulumi.set(__self__, "sms_username_format", sms_username_format)
        if sponsor_back_link is not None:
            pulumi.set(__self__, "sponsor_back_link", sponsor_back_link)
        if sponsor_cancel is not None:
            pulumi.set(__self__, "sponsor_cancel", sponsor_cancel)
        if sponsor_email is not None:
            pulumi.set(__self__, "sponsor_email", sponsor_email)
        if sponsor_email_error is not None:
            pulumi.set(__self__, "sponsor_email_error", sponsor_email_error)
        if sponsor_info_approved is not None:
            pulumi.set(__self__, "sponsor_info_approved", sponsor_info_approved)
        if sponsor_info_denied is not None:
            pulumi.set(__self__, "sponsor_info_denied", sponsor_info_denied)
        if sponsor_info_pending is not None:
            pulumi.set(__self__, "sponsor_info_pending", sponsor_info_pending)
        if sponsor_name is not None:
            pulumi.set(__self__, "sponsor_name", sponsor_name)
        if sponsor_name_error is not None:
            pulumi.set(__self__, "sponsor_name_error", sponsor_name_error)
        if sponsor_note_pending is not None:
            pulumi.set(__self__, "sponsor_note_pending", sponsor_note_pending)
        if sponsor_request_access is not None:
            pulumi.set(__self__, "sponsor_request_access", sponsor_request_access)
        if sponsor_status_approved is not None:
            pulumi.set(__self__, "sponsor_status_approved", sponsor_status_approved)
        if sponsor_status_denied is not None:
            pulumi.set(__self__, "sponsor_status_denied", sponsor_status_denied)
        if sponsor_status_pending is not None:
            pulumi.set(__self__, "sponsor_status_pending", sponsor_status_pending)
        if sponsor_submit is not None:
            pulumi.set(__self__, "sponsor_submit", sponsor_submit)
        if sponsors_error is not None:
            pulumi.set(__self__, "sponsors_error", sponsors_error)
        if sponsors_field_label is not None:
            pulumi.set(__self__, "sponsors_field_label", sponsors_field_label)
        if tos_accept_label is not None:
            pulumi.set(__self__, "tos_accept_label", tos_accept_label)
        if tos_error is not None:
            pulumi.set(__self__, "tos_error", tos_error)
        if tos_link is not None:
            pulumi.set(__self__, "tos_link", tos_link)
        if tos_text is not None:
            pulumi.set(__self__, "tos_text", tos_text)

    @property
    @pulumi.getter(name="authButtonAmazon")
    def auth_button_amazon(self) -> Optional[pulumi.Input[str]]:
        """
        label for Amazon auth button
        """
        return pulumi.get(self, "auth_button_amazon")

    @auth_button_amazon.setter
    def auth_button_amazon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_amazon", value)

    @property
    @pulumi.getter(name="authButtonAzure")
    def auth_button_azure(self) -> Optional[pulumi.Input[str]]:
        """
        label for Azure auth button
        """
        return pulumi.get(self, "auth_button_azure")

    @auth_button_azure.setter
    def auth_button_azure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_azure", value)

    @property
    @pulumi.getter(name="authButtonEmail")
    def auth_button_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Email auth button
        """
        return pulumi.get(self, "auth_button_email")

    @auth_button_email.setter
    def auth_button_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_email", value)

    @property
    @pulumi.getter(name="authButtonFacebook")
    def auth_button_facebook(self) -> Optional[pulumi.Input[str]]:
        """
        label for Facebook auth button
        """
        return pulumi.get(self, "auth_button_facebook")

    @auth_button_facebook.setter
    def auth_button_facebook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_facebook", value)

    @property
    @pulumi.getter(name="authButtonGoogle")
    def auth_button_google(self) -> Optional[pulumi.Input[str]]:
        """
        label for Google auth button
        """
        return pulumi.get(self, "auth_button_google")

    @auth_button_google.setter
    def auth_button_google(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_google", value)

    @property
    @pulumi.getter(name="authButtonMicrosoft")
    def auth_button_microsoft(self) -> Optional[pulumi.Input[str]]:
        """
        label for Microsoft auth button
        """
        return pulumi.get(self, "auth_button_microsoft")

    @auth_button_microsoft.setter
    def auth_button_microsoft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_microsoft", value)

    @property
    @pulumi.getter(name="authButtonPassphrase")
    def auth_button_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        label for passphrase auth button
        """
        return pulumi.get(self, "auth_button_passphrase")

    @auth_button_passphrase.setter
    def auth_button_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_passphrase", value)

    @property
    @pulumi.getter(name="authButtonSms")
    def auth_button_sms(self) -> Optional[pulumi.Input[str]]:
        """
        label for SMS auth button
        """
        return pulumi.get(self, "auth_button_sms")

    @auth_button_sms.setter
    def auth_button_sms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sms", value)

    @property
    @pulumi.getter(name="authButtonSponsor")
    def auth_button_sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor auth button
        """
        return pulumi.get(self, "auth_button_sponsor")

    @auth_button_sponsor.setter
    def auth_button_sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sponsor", value)

    @property
    @pulumi.getter(name="authLabel")
    def auth_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_label")

    @auth_label.setter
    def auth_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_label", value)

    @property
    @pulumi.getter(name="backLink")
    def back_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go back to /logon
        """
        return pulumi.get(self, "back_link")

    @back_link.setter
    def back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "back_link", value)

    @property
    @pulumi.getter(name="companyError")
    def company_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when company not provided
        """
        return pulumi.get(self, "company_error")

    @company_error.setter
    def company_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_error", value)

    @property
    @pulumi.getter(name="companyLabel")
    def company_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of company field
        """
        return pulumi.get(self, "company_label")

    @company_label.setter
    def company_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_label", value)

    @property
    @pulumi.getter(name="emailAccessDomainError")
    def email_access_domain_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        return pulumi.get(self, "email_access_domain_error")

    @email_access_domain_error.setter
    def email_access_domain_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_access_domain_error", value)

    @property
    @pulumi.getter(name="emailCancel")
    def email_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission using email auth
        """
        return pulumi.get(self, "email_cancel")

    @email_cancel.setter
    def email_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_cancel", value)

    @property
    @pulumi.getter(name="emailCodeCancel")
    def email_code_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_cancel")

    @email_code_cancel.setter
    def email_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_cancel", value)

    @property
    @pulumi.getter(name="emailCodeError")
    def email_code_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_error")

    @email_code_error.setter
    def email_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_error", value)

    @property
    @pulumi.getter(name="emailCodeFieldLabel")
    def email_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_field_label")

    @email_code_field_label.setter
    def email_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_field_label", value)

    @property
    @pulumi.getter(name="emailCodeMessage")
    def email_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_message")

    @email_code_message.setter
    def email_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_message", value)

    @property
    @pulumi.getter(name="emailCodeSubmit")
    def email_code_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_submit")

    @email_code_submit.setter
    def email_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_submit", value)

    @property
    @pulumi.getter(name="emailCodeTitle")
    def email_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_title")

    @email_code_title.setter
    def email_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_title", value)

    @property
    @pulumi.getter(name="emailError")
    def email_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when email not provided
        """
        return pulumi.get(self, "email_error")

    @email_error.setter
    def email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_error", value)

    @property
    @pulumi.getter(name="emailFieldLabel")
    def email_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_field_label")

    @email_field_label.setter
    def email_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_field_label", value)

    @property
    @pulumi.getter(name="emailLabel")
    def email_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of email field
        """
        return pulumi.get(self, "email_label")

    @email_label.setter
    def email_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_label", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="emailSubmit")
    def email_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button using email auth
        """
        return pulumi.get(self, "email_submit")

    @email_submit.setter
    def email_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_submit", value)

    @property
    @pulumi.getter(name="emailTitle")
    def email_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the Email registration
        """
        return pulumi.get(self, "email_title")

    @email_title.setter
    def email_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_title", value)

    @property
    @pulumi.getter
    def field1error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field1 not provided
        """
        return pulumi.get(self, "field1error")

    @field1error.setter
    def field1error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1error", value)

    @property
    @pulumi.getter
    def field1label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field1
        """
        return pulumi.get(self, "field1label")

    @field1label.setter
    def field1label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1label", value)

    @property
    @pulumi.getter
    def field2error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field2 not provided
        """
        return pulumi.get(self, "field2error")

    @field2error.setter
    def field2error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2error", value)

    @property
    @pulumi.getter
    def field2label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field2
        """
        return pulumi.get(self, "field2label")

    @field2label.setter
    def field2label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2label", value)

    @property
    @pulumi.getter
    def field3error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field3 not provided
        """
        return pulumi.get(self, "field3error")

    @field3error.setter
    def field3error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3error", value)

    @property
    @pulumi.getter
    def field3label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field3
        """
        return pulumi.get(self, "field3label")

    @field3label.setter
    def field3label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3label", value)

    @property
    @pulumi.getter
    def field4error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field4 not provided
        """
        return pulumi.get(self, "field4error")

    @field4error.setter
    def field4error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4error", value)

    @property
    @pulumi.getter
    def field4label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field4
        """
        return pulumi.get(self, "field4label")

    @field4label.setter
    def field4label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4label", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="nameError")
    def name_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when name not provided
        """
        return pulumi.get(self, "name_error")

    @name_error.setter
    def name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_error", value)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of name field
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_label", value)

    @property
    @pulumi.getter(name="optoutLabel")
    def optout_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout_label")

    @optout_label.setter
    def optout_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optout_label", value)

    @property
    @pulumi.getter(name="pageTitle")
    def page_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_title")

    @page_title.setter
    def page_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_title", value)

    @property
    @pulumi.getter(name="passphraseCancel")
    def passphrase_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase cancel button
        """
        return pulumi.get(self, "passphrase_cancel")

    @passphrase_cancel.setter
    def passphrase_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_cancel", value)

    @property
    @pulumi.getter(name="passphraseError")
    def passphrase_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when invalid passphrase is provided
        """
        return pulumi.get(self, "passphrase_error")

    @passphrase_error.setter
    def passphrase_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_error", value)

    @property
    @pulumi.getter(name="passphraseLabel")
    def passphrase_label(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase
        """
        return pulumi.get(self, "passphrase_label")

    @passphrase_label.setter
    def passphrase_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_label", value)

    @property
    @pulumi.getter(name="passphraseMessage")
    def passphrase_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_message")

    @passphrase_message.setter
    def passphrase_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_message", value)

    @property
    @pulumi.getter(name="passphraseSubmit")
    def passphrase_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase submit button
        """
        return pulumi.get(self, "passphrase_submit")

    @passphrase_submit.setter
    def passphrase_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_submit", value)

    @property
    @pulumi.getter(name="passphraseTitle")
    def passphrase_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for passphrase details page
        """
        return pulumi.get(self, "passphrase_title")

    @passphrase_title.setter
    def passphrase_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_title", value)

    @property
    @pulumi.getter(name="privacyPolicyAcceptLabel")
    def privacy_policy_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_accept_label")

    @privacy_policy_accept_label.setter
    def privacy_policy_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_accept_label", value)

    @property
    @pulumi.getter(name="privacyPolicyError")
    def privacy_policy_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when Privacy Policy not accepted
        """
        return pulumi.get(self, "privacy_policy_error")

    @privacy_policy_error.setter
    def privacy_policy_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_error", value)

    @property
    @pulumi.getter(name="privacyPolicyLink")
    def privacy_policy_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_link")

    @privacy_policy_link.setter
    def privacy_policy_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_link", value)

    @property
    @pulumi.getter(name="privacyPolicyText")
    def privacy_policy_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_text")

    @privacy_policy_text.setter
    def privacy_policy_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_text", value)

    @property
    @pulumi.getter(name="requiredFieldLabel")
    def required_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label to denote required field
        """
        return pulumi.get(self, "required_field_label")

    @required_field_label.setter
    def required_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_field_label", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of the button to /signin
        """
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="smsCarrierDefault")
    def sms_carrier_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_default")

    @sms_carrier_default.setter
    def sms_carrier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_default", value)

    @property
    @pulumi.getter(name="smsCarrierError")
    def sms_carrier_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_error")

    @sms_carrier_error.setter
    def sms_carrier_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_error", value)

    @property
    @pulumi.getter(name="smsCarrierFieldLabel")
    def sms_carrier_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for mobile carrier drop-down list
        """
        return pulumi.get(self, "sms_carrier_field_label")

    @sms_carrier_field_label.setter
    def sms_carrier_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_field_label", value)

    @property
    @pulumi.getter(name="smsCodeCancel")
    def sms_code_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission
        """
        return pulumi.get(self, "sms_code_cancel")

    @sms_code_cancel.setter
    def sms_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_cancel", value)

    @property
    @pulumi.getter(name="smsCodeError")
    def sms_code_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when confirmation code is invalid
        """
        return pulumi.get(self, "sms_code_error")

    @sms_code_error.setter
    def sms_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_error", value)

    @property
    @pulumi.getter(name="smsCodeFieldLabel")
    def sms_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_field_label")

    @sms_code_field_label.setter
    def sms_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_field_label", value)

    @property
    @pulumi.getter(name="smsCodeMessage")
    def sms_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_message")

    @sms_code_message.setter
    def sms_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_message", value)

    @property
    @pulumi.getter(name="smsCodeSubmit")
    def sms_code_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button
        """
        return pulumi.get(self, "sms_code_submit")

    @sms_code_submit.setter
    def sms_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_submit", value)

    @property
    @pulumi.getter(name="smsCodeTitle")
    def sms_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_title")

    @sms_code_title.setter
    def sms_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_title", value)

    @property
    @pulumi.getter(name="smsCountryFieldLabel")
    def sms_country_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_field_label")

    @sms_country_field_label.setter
    def sms_country_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_field_label", value)

    @property
    @pulumi.getter(name="smsCountryFormat")
    def sms_country_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_format")

    @sms_country_format.setter
    def sms_country_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_format", value)

    @property
    @pulumi.getter(name="smsHaveAccessCode")
    def sms_have_access_code(self) -> Optional[pulumi.Input[str]]:
        """
        Label for checkbox to specify that the user has access code
        """
        return pulumi.get(self, "sms_have_access_code")

    @sms_have_access_code.setter
    def sms_have_access_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_have_access_code", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsNumberCancel")
    def sms_number_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        label for canceling mobile details for SMS auth
        """
        return pulumi.get(self, "sms_number_cancel")

    @sms_number_cancel.setter
    def sms_number_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_cancel", value)

    @property
    @pulumi.getter(name="smsNumberError")
    def sms_number_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_error")

    @sms_number_error.setter
    def sms_number_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_error", value)

    @property
    @pulumi.getter(name="smsNumberFieldLabel")
    def sms_number_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for field to provide mobile number
        """
        return pulumi.get(self, "sms_number_field_label")

    @sms_number_field_label.setter
    def sms_number_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_field_label", value)

    @property
    @pulumi.getter(name="smsNumberFormat")
    def sms_number_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_format")

    @sms_number_format.setter
    def sms_number_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_format", value)

    @property
    @pulumi.getter(name="smsNumberMessage")
    def sms_number_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_message")

    @sms_number_message.setter
    def sms_number_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_message", value)

    @property
    @pulumi.getter(name="smsNumberSubmit")
    def sms_number_submit(self) -> Optional[pulumi.Input[str]]:
        """
        label for submit button for code generation
        """
        return pulumi.get(self, "sms_number_submit")

    @sms_number_submit.setter
    def sms_number_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_submit", value)

    @property
    @pulumi.getter(name="smsNumberTitle")
    def sms_number_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for phone number details
        """
        return pulumi.get(self, "sms_number_title")

    @sms_number_title.setter
    def sms_number_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_title", value)

    @property
    @pulumi.getter(name="smsUsernameFormat")
    def sms_username_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_username_format")

    @sms_username_format.setter
    def sms_username_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_username_format", value)

    @property
    @pulumi.getter(name="sponsorBackLink")
    def sponsor_back_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_back_link")

    @sponsor_back_link.setter
    def sponsor_back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_back_link", value)

    @property
    @pulumi.getter(name="sponsorCancel")
    def sponsor_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_cancel")

    @sponsor_cancel.setter
    def sponsor_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_cancel", value)

    @property
    @pulumi.getter(name="sponsorEmail")
    def sponsor_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Email
        """
        return pulumi.get(self, "sponsor_email")

    @sponsor_email.setter
    def sponsor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email", value)

    @property
    @pulumi.getter(name="sponsorEmailError")
    def sponsor_email_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_email_error")

    @sponsor_email_error.setter
    def sponsor_email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_error", value)

    @property
    @pulumi.getter(name="sponsorInfoApproved")
    def sponsor_info_approved(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_approved")

    @sponsor_info_approved.setter
    def sponsor_info_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_approved", value)

    @property
    @pulumi.getter(name="sponsorInfoDenied")
    def sponsor_info_denied(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_denied")

    @sponsor_info_denied.setter
    def sponsor_info_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_denied", value)

    @property
    @pulumi.getter(name="sponsorInfoPending")
    def sponsor_info_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_pending")

    @sponsor_info_pending.setter
    def sponsor_info_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_pending", value)

    @property
    @pulumi.getter(name="sponsorName")
    def sponsor_name(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Name
        """
        return pulumi.get(self, "sponsor_name")

    @sponsor_name.setter
    def sponsor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name", value)

    @property
    @pulumi.getter(name="sponsorNameError")
    def sponsor_name_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_name_error")

    @sponsor_name_error.setter
    def sponsor_name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name_error", value)

    @property
    @pulumi.getter(name="sponsorNotePending")
    def sponsor_note_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_note_pending")

    @sponsor_note_pending.setter
    def sponsor_note_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_note_pending", value)

    @property
    @pulumi.getter(name="sponsorRequestAccess")
    def sponsor_request_access(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_request_access")

    @sponsor_request_access.setter
    def sponsor_request_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_request_access", value)

    @property
    @pulumi.getter(name="sponsorStatusApproved")
    def sponsor_status_approved(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if sponsor approves request
        """
        return pulumi.get(self, "sponsor_status_approved")

    @sponsor_status_approved.setter
    def sponsor_status_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_approved", value)

    @property
    @pulumi.getter(name="sponsorStatusDenied")
    def sponsor_status_denied(self) -> Optional[pulumi.Input[str]]:
        """
        text to display when sponsor denies request
        """
        return pulumi.get(self, "sponsor_status_denied")

    @sponsor_status_denied.setter
    def sponsor_status_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_denied", value)

    @property
    @pulumi.getter(name="sponsorStatusPending")
    def sponsor_status_pending(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if request is still pending
        """
        return pulumi.get(self, "sponsor_status_pending")

    @sponsor_status_pending.setter
    def sponsor_status_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_pending", value)

    @property
    @pulumi.getter(name="sponsorSubmit")
    def sponsor_submit(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label to notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_submit")

    @sponsor_submit.setter
    def sponsor_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_submit", value)

    @property
    @pulumi.getter(name="sponsorsError")
    def sponsors_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_error")

    @sponsors_error.setter
    def sponsors_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_error", value)

    @property
    @pulumi.getter(name="sponsorsFieldLabel")
    def sponsors_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_field_label")

    @sponsors_field_label.setter
    def sponsors_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_field_label", value)

    @property
    @pulumi.getter(name="tosAcceptLabel")
    def tos_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to tos
        """
        return pulumi.get(self, "tos_accept_label")

    @tos_accept_label.setter
    def tos_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_accept_label", value)

    @property
    @pulumi.getter(name="tosError")
    def tos_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when tos not accepted
        """
        return pulumi.get(self, "tos_error")

    @tos_error.setter
    def tos_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_error", value)

    @property
    @pulumi.getter(name="tosLink")
    def tos_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to tos
        """
        return pulumi.get(self, "tos_link")

    @tos_link.setter
    def tos_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_link", value)

    @property
    @pulumi.getter(name="tosText")
    def tos_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Terms of Service
        """
        return pulumi.get(self, "tos_text")

    @tos_text.setter
    def tos_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_text", value)


@pulumi.input_type
class WlanQosArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[str]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] class_: enum: `background`, `best_effort`, `video`, `voice`
        :param pulumi.Input[bool] overwrite: whether to overwrite QoS
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `background`, `best_effort`, `video`, `voice`
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to overwrite QoS
        """
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)


@pulumi.input_type
class WlanRadsecArgs:
    def __init__(__self__, *,
                 coa_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 mxcluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]] = None,
                 use_mxedge: Optional[pulumi.Input[bool]] = None,
                 use_site_mxedge: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mxcluster_ids: To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
               Org mxedge(s) identified by mxcluster_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] proxy_hosts: default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
               when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        :param pulumi.Input[str] server_name: name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        :param pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]] servers: List of Radsec Servers. Only if not Mist Edge.
        :param pulumi.Input[bool] use_mxedge: use mxedge(s) as radsecproxy
        :param pulumi.Input[bool] use_site_mxedge: To use Site mxedges when this WLAN does not use mxtunnel
        """
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if mxcluster_ids is not None:
            pulumi.set(__self__, "mxcluster_ids", mxcluster_ids)
        if proxy_hosts is not None:
            pulumi.set(__self__, "proxy_hosts", proxy_hosts)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if use_mxedge is not None:
            pulumi.set(__self__, "use_mxedge", use_mxedge)
        if use_site_mxedge is not None:
            pulumi.set(__self__, "use_site_mxedge", use_site_mxedge)

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "coa_enabled")

    @coa_enabled.setter
    def coa_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "coa_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="mxclusterIds")
    def mxcluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
        Org mxedge(s) identified by mxcluster_ids
        """
        return pulumi.get(self, "mxcluster_ids")

    @mxcluster_ids.setter
    def mxcluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mxcluster_ids", value)

    @property
    @pulumi.getter(name="proxyHosts")
    def proxy_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
        when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        """
        return pulumi.get(self, "proxy_hosts")

    @proxy_hosts.setter
    def proxy_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "proxy_hosts", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]]:
        """
        List of Radsec Servers. Only if not Mist Edge.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="useMxedge")
    def use_mxedge(self) -> Optional[pulumi.Input[bool]]:
        """
        use mxedge(s) as radsecproxy
        """
        return pulumi.get(self, "use_mxedge")

    @use_mxedge.setter
    def use_mxedge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mxedge", value)

    @property
    @pulumi.getter(name="useSiteMxedge")
    def use_site_mxedge(self) -> Optional[pulumi.Input[bool]]:
        """
        To use Site mxedges when this WLAN does not use mxtunnel
        """
        return pulumi.get(self, "use_site_mxedge")

    @use_site_mxedge.setter
    def use_site_mxedge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_site_mxedge", value)


@pulumi.input_type
class WlanRadsecServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WlanScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input['WlanScheduleHoursArgs']] = None):
        """
        :param pulumi.Input['WlanScheduleHoursArgs'] hours: hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 
               
               **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input['WlanScheduleHoursArgs']]:
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input['WlanScheduleHoursArgs']]):
        pulumi.set(self, "hours", value)


@pulumi.input_type
class WlanScheduleHoursArgs:
    def __init__(__self__, *,
                 fri: Optional[pulumi.Input[str]] = None,
                 mon: Optional[pulumi.Input[str]] = None,
                 sat: Optional[pulumi.Input[str]] = None,
                 sun: Optional[pulumi.Input[str]] = None,
                 thu: Optional[pulumi.Input[str]] = None,
                 tue: Optional[pulumi.Input[str]] = None,
                 wed: Optional[pulumi.Input[str]] = None):
        if fri is not None:
            pulumi.set(__self__, "fri", fri)
        if mon is not None:
            pulumi.set(__self__, "mon", mon)
        if sat is not None:
            pulumi.set(__self__, "sat", sat)
        if sun is not None:
            pulumi.set(__self__, "sun", sun)
        if thu is not None:
            pulumi.set(__self__, "thu", thu)
        if tue is not None:
            pulumi.set(__self__, "tue", tue)
        if wed is not None:
            pulumi.set(__self__, "wed", wed)

    @property
    @pulumi.getter
    def fri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fri")

    @fri.setter
    def fri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fri", value)

    @property
    @pulumi.getter
    def mon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mon")

    @mon.setter
    def mon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mon", value)

    @property
    @pulumi.getter
    def sat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sat")

    @sat.setter
    def sat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sat", value)

    @property
    @pulumi.getter
    def sun(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sun")

    @sun.setter
    def sun(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sun", value)

    @property
    @pulumi.getter
    def thu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thu")

    @thu.setter
    def thu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thu", value)

    @property
    @pulumi.getter
    def tue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tue")

    @tue.setter
    def tue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tue", value)

    @property
    @pulumi.getter
    def wed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wed")

    @wed.setter
    def wed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wed", value)


@pulumi.input_type
class WlantemplateAppliesArgs:
    def __init__(__self__, *,
                 org_id: Optional[pulumi.Input[str]] = None,
                 site_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sitegroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] site_ids: list of site ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sitegroup_ids: list of sitegroup ids
        """
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of site ids
        """
        return pulumi.get(self, "site_ids")

    @site_ids.setter
    def site_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_ids", value)

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of sitegroup ids
        """
        return pulumi.get(self, "sitegroup_ids")

    @sitegroup_ids.setter
    def sitegroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sitegroup_ids", value)


@pulumi.input_type
class WlantemplateExceptionsArgs:
    def __init__(__self__, *,
                 site_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sitegroup_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] site_ids: list of site ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sitegroup_ids: list of sitegroup ids
        """
        if site_ids is not None:
            pulumi.set(__self__, "site_ids", site_ids)
        if sitegroup_ids is not None:
            pulumi.set(__self__, "sitegroup_ids", sitegroup_ids)

    @property
    @pulumi.getter(name="siteIds")
    def site_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of site ids
        """
        return pulumi.get(self, "site_ids")

    @site_ids.setter
    def site_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "site_ids", value)

    @property
    @pulumi.getter(name="sitegroupIds")
    def sitegroup_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of sitegroup ids
        """
        return pulumi.get(self, "sitegroup_ids")

    @sitegroup_ids.setter
    def sitegroup_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sitegroup_ids", value)


@pulumi.input_type
class WxtagSpecArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: matched destination subnets and/or IP Addresses
        :param pulumi.Input[str] port_range: matched destination port, "0" means any
        :param pulumi.Input[str] protocol: tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        matched destination subnets and/or IP Addresses
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched destination port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


