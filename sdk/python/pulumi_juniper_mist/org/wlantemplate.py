# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WlantemplateArgs', 'Wlantemplate']

@pulumi.input_type
class WlantemplateArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 applies: Optional[pulumi.Input['WlantemplateAppliesArgs']] = None,
                 deviceprofile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptions: Optional[pulumi.Input['WlantemplateExceptionsArgs']] = None,
                 filter_by_deviceprofile: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Wlantemplate resource.
        :param pulumi.Input['WlantemplateAppliesArgs'] applies: where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deviceprofile_ids: list of Device Profile ids
        :param pulumi.Input['WlantemplateExceptionsArgs'] exceptions: where this template should not be applied to (takes precedence)
        :param pulumi.Input[bool] filter_by_deviceprofile: whether to further filter by Device Profile
        """
        pulumi.set(__self__, "org_id", org_id)
        if applies is not None:
            pulumi.set(__self__, "applies", applies)
        if deviceprofile_ids is not None:
            pulumi.set(__self__, "deviceprofile_ids", deviceprofile_ids)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if filter_by_deviceprofile is not None:
            pulumi.set(__self__, "filter_by_deviceprofile", filter_by_deviceprofile)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def applies(self) -> Optional[pulumi.Input['WlantemplateAppliesArgs']]:
        """
        where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        """
        return pulumi.get(self, "applies")

    @applies.setter
    def applies(self, value: Optional[pulumi.Input['WlantemplateAppliesArgs']]):
        pulumi.set(self, "applies", value)

    @property
    @pulumi.getter(name="deviceprofileIds")
    def deviceprofile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of Device Profile ids
        """
        return pulumi.get(self, "deviceprofile_ids")

    @deviceprofile_ids.setter
    def deviceprofile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deviceprofile_ids", value)

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input['WlantemplateExceptionsArgs']]:
        """
        where this template should not be applied to (takes precedence)
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input['WlantemplateExceptionsArgs']]):
        pulumi.set(self, "exceptions", value)

    @property
    @pulumi.getter(name="filterByDeviceprofile")
    def filter_by_deviceprofile(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to further filter by Device Profile
        """
        return pulumi.get(self, "filter_by_deviceprofile")

    @filter_by_deviceprofile.setter
    def filter_by_deviceprofile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_by_deviceprofile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _WlantemplateState:
    def __init__(__self__, *,
                 applies: Optional[pulumi.Input['WlantemplateAppliesArgs']] = None,
                 deviceprofile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptions: Optional[pulumi.Input['WlantemplateExceptionsArgs']] = None,
                 filter_by_deviceprofile: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Wlantemplate resources.
        :param pulumi.Input['WlantemplateAppliesArgs'] applies: where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deviceprofile_ids: list of Device Profile ids
        :param pulumi.Input['WlantemplateExceptionsArgs'] exceptions: where this template should not be applied to (takes precedence)
        :param pulumi.Input[bool] filter_by_deviceprofile: whether to further filter by Device Profile
        """
        if applies is not None:
            pulumi.set(__self__, "applies", applies)
        if deviceprofile_ids is not None:
            pulumi.set(__self__, "deviceprofile_ids", deviceprofile_ids)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if filter_by_deviceprofile is not None:
            pulumi.set(__self__, "filter_by_deviceprofile", filter_by_deviceprofile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter
    def applies(self) -> Optional[pulumi.Input['WlantemplateAppliesArgs']]:
        """
        where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        """
        return pulumi.get(self, "applies")

    @applies.setter
    def applies(self, value: Optional[pulumi.Input['WlantemplateAppliesArgs']]):
        pulumi.set(self, "applies", value)

    @property
    @pulumi.getter(name="deviceprofileIds")
    def deviceprofile_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of Device Profile ids
        """
        return pulumi.get(self, "deviceprofile_ids")

    @deviceprofile_ids.setter
    def deviceprofile_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deviceprofile_ids", value)

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input['WlantemplateExceptionsArgs']]:
        """
        where this template should not be applied to (takes precedence)
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input['WlantemplateExceptionsArgs']]):
        pulumi.set(self, "exceptions", value)

    @property
    @pulumi.getter(name="filterByDeviceprofile")
    def filter_by_deviceprofile(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to further filter by Device Profile
        """
        return pulumi.get(self, "filter_by_deviceprofile")

    @filter_by_deviceprofile.setter
    def filter_by_deviceprofile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_by_deviceprofile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)


class Wlantemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applies: Optional[pulumi.Input[Union['WlantemplateAppliesArgs', 'WlantemplateAppliesArgsDict']]] = None,
                 deviceprofile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptions: Optional[pulumi.Input[Union['WlantemplateExceptionsArgs', 'WlantemplateExceptionsArgsDict']]] = None,
                 filter_by_deviceprofile: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages the Org WLAN Templates.
        A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level. WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles. They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.

        ## Import

        Using `pulumi import`, import `mist_org_wlantemplate` with:

        Org WLAN Template can be imported by specifying the org_id and the wlantemplate_id

        ```sh
        $ pulumi import junipermist:org/wlantemplate:Wlantemplate wlantemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WlantemplateAppliesArgs', 'WlantemplateAppliesArgsDict']] applies: where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deviceprofile_ids: list of Device Profile ids
        :param pulumi.Input[Union['WlantemplateExceptionsArgs', 'WlantemplateExceptionsArgsDict']] exceptions: where this template should not be applied to (takes precedence)
        :param pulumi.Input[bool] filter_by_deviceprofile: whether to further filter by Device Profile
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WlantemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Org WLAN Templates.
        A WLAN template is a collection of WLANs, tunneling policies, and wxlan policies. It is used to create and manage wlan configurations at an organizational level. WLAN templates allow for modular, scalable, and easy-to-manage configuration of ssids and their application to specific sites, site groups, or ap device profiles. They are valuable for automating configuration across multiple sites and profiles, making it easier to scale efficiently.

        ## Import

        Using `pulumi import`, import `mist_org_wlantemplate` with:

        Org WLAN Template can be imported by specifying the org_id and the wlantemplate_id

        ```sh
        $ pulumi import junipermist:org/wlantemplate:Wlantemplate wlantemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param WlantemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WlantemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applies: Optional[pulumi.Input[Union['WlantemplateAppliesArgs', 'WlantemplateAppliesArgsDict']]] = None,
                 deviceprofile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exceptions: Optional[pulumi.Input[Union['WlantemplateExceptionsArgs', 'WlantemplateExceptionsArgsDict']]] = None,
                 filter_by_deviceprofile: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WlantemplateArgs.__new__(WlantemplateArgs)

            __props__.__dict__["applies"] = applies
            __props__.__dict__["deviceprofile_ids"] = deviceprofile_ids
            __props__.__dict__["exceptions"] = exceptions
            __props__.__dict__["filter_by_deviceprofile"] = filter_by_deviceprofile
            __props__.__dict__["name"] = name
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
        super(Wlantemplate, __self__).__init__(
            'junipermist:org/wlantemplate:Wlantemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applies: Optional[pulumi.Input[Union['WlantemplateAppliesArgs', 'WlantemplateAppliesArgsDict']]] = None,
            deviceprofile_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            exceptions: Optional[pulumi.Input[Union['WlantemplateExceptionsArgs', 'WlantemplateExceptionsArgsDict']]] = None,
            filter_by_deviceprofile: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None) -> 'Wlantemplate':
        """
        Get an existing Wlantemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WlantemplateAppliesArgs', 'WlantemplateAppliesArgsDict']] applies: where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deviceprofile_ids: list of Device Profile ids
        :param pulumi.Input[Union['WlantemplateExceptionsArgs', 'WlantemplateExceptionsArgsDict']] exceptions: where this template should not be applied to (takes precedence)
        :param pulumi.Input[bool] filter_by_deviceprofile: whether to further filter by Device Profile
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WlantemplateState.__new__(_WlantemplateState)

        __props__.__dict__["applies"] = applies
        __props__.__dict__["deviceprofile_ids"] = deviceprofile_ids
        __props__.__dict__["exceptions"] = exceptions
        __props__.__dict__["filter_by_deviceprofile"] = filter_by_deviceprofile
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        return Wlantemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applies(self) -> pulumi.Output['outputs.WlantemplateApplies']:
        """
        where this template should be applied to, can be org*id, site*ids, sitegroup_ids
        """
        return pulumi.get(self, "applies")

    @property
    @pulumi.getter(name="deviceprofileIds")
    def deviceprofile_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        list of Device Profile ids
        """
        return pulumi.get(self, "deviceprofile_ids")

    @property
    @pulumi.getter
    def exceptions(self) -> pulumi.Output['outputs.WlantemplateExceptions']:
        """
        where this template should not be applied to (takes precedence)
        """
        return pulumi.get(self, "exceptions")

    @property
    @pulumi.getter(name="filterByDeviceprofile")
    def filter_by_deviceprofile(self) -> pulumi.Output[bool]:
        """
        whether to further filter by Device Profile
        """
        return pulumi.get(self, "filter_by_deviceprofile")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

