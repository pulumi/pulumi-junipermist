# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['WebhookArgs', 'Webhook']

@pulumi.input_type
class WebhookArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 topics: pulumi.Input[Sequence[pulumi.Input[str]]],
                 url: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_client_id: Optional[pulumi.Input[str]] = None,
                 oauth2_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth2_grant_type: Optional[pulumi.Input[str]] = None,
                 oauth2_password: Optional[pulumi.Input[str]] = None,
                 oauth2_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oauth2_token_url: Optional[pulumi.Input[str]] = None,
                 oauth2_username: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Webhook resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        :param pulumi.Input[bool] enabled: whether webhook is enabled
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: if `type`=`http-post`, additional custom HTTP headers to add
               the headers name and value must be string, total bytes of headers name and value must be less than 1000
        :param pulumi.Input[str] name: name of the webhook
        :param pulumi.Input[str] oauth2_client_id: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_client_secret: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_grant_type: required when `type`==`oauth2`. enum: `client_credentials`, `password`
        :param pulumi.Input[str] oauth2_password: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth2_scopes: required when `type`==`oauth2`, if provided, will be used in the token request
        :param pulumi.Input[str] oauth2_token_url: required when `type`==`oauth2`
        :param pulumi.Input[str] oauth2_username: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[str] secret: only if `type`=`http-post`
        :param pulumi.Input[str] splunk_token: required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
               the webhook receiver is configured to accept it.'
        :param pulumi.Input[str] type: enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        :param pulumi.Input[bool] verify_cert: when url uses HTTPS, whether to verify the certificate
        """
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "topics", topics)
        pulumi.set(__self__, "url", url)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth2_client_id is not None:
            pulumi.set(__self__, "oauth2_client_id", oauth2_client_id)
        if oauth2_client_secret is not None:
            pulumi.set(__self__, "oauth2_client_secret", oauth2_client_secret)
        if oauth2_grant_type is not None:
            pulumi.set(__self__, "oauth2_grant_type", oauth2_grant_type)
        if oauth2_password is not None:
            pulumi.set(__self__, "oauth2_password", oauth2_password)
        if oauth2_scopes is not None:
            pulumi.set(__self__, "oauth2_scopes", oauth2_scopes)
        if oauth2_token_url is not None:
            pulumi.set(__self__, "oauth2_token_url", oauth2_token_url)
        if oauth2_username is not None:
            pulumi.set(__self__, "oauth2_username", oauth2_username)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if splunk_token is not None:
            pulumi.set(__self__, "splunk_token", splunk_token)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def topics(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        if `type`=`http-post`, additional custom HTTP headers to add
        the headers name and value must be string, total bytes of headers name and value must be less than 1000
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the webhook
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_id")

    @oauth2_client_id.setter
    def oauth2_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_client_id", value)

    @property
    @pulumi.getter(name="oauth2ClientSecret")
    def oauth2_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_secret")

    @oauth2_client_secret.setter
    def oauth2_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_client_secret", value)

    @property
    @pulumi.getter(name="oauth2GrantType")
    def oauth2_grant_type(self) -> Optional[pulumi.Input[str]]:
        """
        required when `type`==`oauth2`. enum: `client_credentials`, `password`
        """
        return pulumi.get(self, "oauth2_grant_type")

    @oauth2_grant_type.setter
    def oauth2_grant_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_grant_type", value)

    @property
    @pulumi.getter(name="oauth2Password")
    def oauth2_password(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_password")

    @oauth2_password.setter
    def oauth2_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_password", value)

    @property
    @pulumi.getter(name="oauth2Scopes")
    def oauth2_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required when `type`==`oauth2`, if provided, will be used in the token request
        """
        return pulumi.get(self, "oauth2_scopes")

    @oauth2_scopes.setter
    def oauth2_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth2_scopes", value)

    @property
    @pulumi.getter(name="oauth2TokenUrl")
    def oauth2_token_url(self) -> Optional[pulumi.Input[str]]:
        """
        required when `type`==`oauth2`
        """
        return pulumi.get(self, "oauth2_token_url")

    @oauth2_token_url.setter
    def oauth2_token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_token_url", value)

    @property
    @pulumi.getter(name="oauth2Username")
    def oauth2_username(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_username")

    @oauth2_username.setter
    def oauth2_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_username", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`=`http-post`
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> Optional[pulumi.Input[str]]:
        """
        required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        the webhook receiver is configured to accept it.'
        """
        return pulumi.get(self, "splunk_token")

    @splunk_token.setter
    def splunk_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_token", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        when url uses HTTPS, whether to verify the certificate
        """
        return pulumi.get(self, "verify_cert")

    @verify_cert.setter
    def verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_cert", value)


@pulumi.input_type
class _WebhookState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_client_id: Optional[pulumi.Input[str]] = None,
                 oauth2_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth2_grant_type: Optional[pulumi.Input[str]] = None,
                 oauth2_password: Optional[pulumi.Input[str]] = None,
                 oauth2_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oauth2_token_url: Optional[pulumi.Input[str]] = None,
                 oauth2_username: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Webhook resources.
        :param pulumi.Input[bool] enabled: whether webhook is enabled
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: if `type`=`http-post`, additional custom HTTP headers to add
               the headers name and value must be string, total bytes of headers name and value must be less than 1000
        :param pulumi.Input[str] name: name of the webhook
        :param pulumi.Input[str] oauth2_client_id: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_client_secret: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_grant_type: required when `type`==`oauth2`. enum: `client_credentials`, `password`
        :param pulumi.Input[str] oauth2_password: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth2_scopes: required when `type`==`oauth2`, if provided, will be used in the token request
        :param pulumi.Input[str] oauth2_token_url: required when `type`==`oauth2`
        :param pulumi.Input[str] oauth2_username: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[str] secret: only if `type`=`http-post`
        :param pulumi.Input[str] splunk_token: required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
               the webhook receiver is configured to accept it.'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        :param pulumi.Input[str] type: enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        :param pulumi.Input[bool] verify_cert: when url uses HTTPS, whether to verify the certificate
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth2_client_id is not None:
            pulumi.set(__self__, "oauth2_client_id", oauth2_client_id)
        if oauth2_client_secret is not None:
            pulumi.set(__self__, "oauth2_client_secret", oauth2_client_secret)
        if oauth2_grant_type is not None:
            pulumi.set(__self__, "oauth2_grant_type", oauth2_grant_type)
        if oauth2_password is not None:
            pulumi.set(__self__, "oauth2_password", oauth2_password)
        if oauth2_scopes is not None:
            pulumi.set(__self__, "oauth2_scopes", oauth2_scopes)
        if oauth2_token_url is not None:
            pulumi.set(__self__, "oauth2_token_url", oauth2_token_url)
        if oauth2_username is not None:
            pulumi.set(__self__, "oauth2_username", oauth2_username)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if splunk_token is not None:
            pulumi.set(__self__, "splunk_token", splunk_token)
        if topics is not None:
            pulumi.set(__self__, "topics", topics)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if verify_cert is not None:
            pulumi.set(__self__, "verify_cert", verify_cert)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        if `type`=`http-post`, additional custom HTTP headers to add
        the headers name and value must be string, total bytes of headers name and value must be less than 1000
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the webhook
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_id")

    @oauth2_client_id.setter
    def oauth2_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_client_id", value)

    @property
    @pulumi.getter(name="oauth2ClientSecret")
    def oauth2_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_secret")

    @oauth2_client_secret.setter
    def oauth2_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_client_secret", value)

    @property
    @pulumi.getter(name="oauth2GrantType")
    def oauth2_grant_type(self) -> Optional[pulumi.Input[str]]:
        """
        required when `type`==`oauth2`. enum: `client_credentials`, `password`
        """
        return pulumi.get(self, "oauth2_grant_type")

    @oauth2_grant_type.setter
    def oauth2_grant_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_grant_type", value)

    @property
    @pulumi.getter(name="oauth2Password")
    def oauth2_password(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_password")

    @oauth2_password.setter
    def oauth2_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_password", value)

    @property
    @pulumi.getter(name="oauth2Scopes")
    def oauth2_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required when `type`==`oauth2`, if provided, will be used in the token request
        """
        return pulumi.get(self, "oauth2_scopes")

    @oauth2_scopes.setter
    def oauth2_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth2_scopes", value)

    @property
    @pulumi.getter(name="oauth2TokenUrl")
    def oauth2_token_url(self) -> Optional[pulumi.Input[str]]:
        """
        required when `type`==`oauth2`
        """
        return pulumi.get(self, "oauth2_token_url")

    @oauth2_token_url.setter
    def oauth2_token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_token_url", value)

    @property
    @pulumi.getter(name="oauth2Username")
    def oauth2_username(self) -> Optional[pulumi.Input[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_username")

    @oauth2_username.setter
    def oauth2_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth2_username", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        only if `type`=`http-post`
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> Optional[pulumi.Input[str]]:
        """
        required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        the webhook receiver is configured to accept it.'
        """
        return pulumi.get(self, "splunk_token")

    @splunk_token.setter
    def splunk_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_token", value)

    @property
    @pulumi.getter
    def topics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        """
        return pulumi.get(self, "topics")

    @topics.setter
    def topics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "topics", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        when url uses HTTPS, whether to verify the certificate
        """
        return pulumi.get(self, "verify_cert")

    @verify_cert.setter
    def verify_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_cert", value)


class Webhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_client_id: Optional[pulumi.Input[str]] = None,
                 oauth2_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth2_grant_type: Optional[pulumi.Input[str]] = None,
                 oauth2_password: Optional[pulumi.Input[str]] = None,
                 oauth2_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oauth2_token_url: Optional[pulumi.Input[str]] = None,
                 oauth2_username: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource manages Org Webhooks.

        ## Import

        Using `pulumi import`, import `mist_org_webhook` with:

        Org Webhook can be imported by specifying the org_id and the webhook_id

        ```sh
        $ pulumi import junipermist:org/webhook:Webhook webhook_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: whether webhook is enabled
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: if `type`=`http-post`, additional custom HTTP headers to add
               the headers name and value must be string, total bytes of headers name and value must be less than 1000
        :param pulumi.Input[str] name: name of the webhook
        :param pulumi.Input[str] oauth2_client_id: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_client_secret: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_grant_type: required when `type`==`oauth2`. enum: `client_credentials`, `password`
        :param pulumi.Input[str] oauth2_password: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth2_scopes: required when `type`==`oauth2`, if provided, will be used in the token request
        :param pulumi.Input[str] oauth2_token_url: required when `type`==`oauth2`
        :param pulumi.Input[str] oauth2_username: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[str] secret: only if `type`=`http-post`
        :param pulumi.Input[str] splunk_token: required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
               the webhook receiver is configured to accept it.'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        :param pulumi.Input[str] type: enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        :param pulumi.Input[bool] verify_cert: when url uses HTTPS, whether to verify the certificate
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages Org Webhooks.

        ## Import

        Using `pulumi import`, import `mist_org_webhook` with:

        Org Webhook can be imported by specifying the org_id and the webhook_id

        ```sh
        $ pulumi import junipermist:org/webhook:Webhook webhook_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param WebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth2_client_id: Optional[pulumi.Input[str]] = None,
                 oauth2_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth2_grant_type: Optional[pulumi.Input[str]] = None,
                 oauth2_password: Optional[pulumi.Input[str]] = None,
                 oauth2_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oauth2_token_url: Optional[pulumi.Input[str]] = None,
                 oauth2_username: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None,
                 topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 verify_cert: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookArgs.__new__(WebhookArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["headers"] = headers
            __props__.__dict__["name"] = name
            __props__.__dict__["oauth2_client_id"] = oauth2_client_id
            __props__.__dict__["oauth2_client_secret"] = None if oauth2_client_secret is None else pulumi.Output.secret(oauth2_client_secret)
            __props__.__dict__["oauth2_grant_type"] = oauth2_grant_type
            __props__.__dict__["oauth2_password"] = None if oauth2_password is None else pulumi.Output.secret(oauth2_password)
            __props__.__dict__["oauth2_scopes"] = oauth2_scopes
            __props__.__dict__["oauth2_token_url"] = oauth2_token_url
            __props__.__dict__["oauth2_username"] = oauth2_username
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            __props__.__dict__["splunk_token"] = None if splunk_token is None else pulumi.Output.secret(splunk_token)
            if topics is None and not opts.urn:
                raise TypeError("Missing required property 'topics'")
            __props__.__dict__["topics"] = topics
            __props__.__dict__["type"] = type
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["verify_cert"] = verify_cert
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["oauth2ClientSecret", "oauth2Password", "secret", "splunkToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Webhook, __self__).__init__(
            'junipermist:org/webhook:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oauth2_client_id: Optional[pulumi.Input[str]] = None,
            oauth2_client_secret: Optional[pulumi.Input[str]] = None,
            oauth2_grant_type: Optional[pulumi.Input[str]] = None,
            oauth2_password: Optional[pulumi.Input[str]] = None,
            oauth2_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oauth2_token_url: Optional[pulumi.Input[str]] = None,
            oauth2_username: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            splunk_token: Optional[pulumi.Input[str]] = None,
            topics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            verify_cert: Optional[pulumi.Input[bool]] = None) -> 'Webhook':
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: whether webhook is enabled
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: if `type`=`http-post`, additional custom HTTP headers to add
               the headers name and value must be string, total bytes of headers name and value must be less than 1000
        :param pulumi.Input[str] name: name of the webhook
        :param pulumi.Input[str] oauth2_client_id: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_client_secret: required when `oauth2_grant_type`==`client_credentials`
        :param pulumi.Input[str] oauth2_grant_type: required when `type`==`oauth2`. enum: `client_credentials`, `password`
        :param pulumi.Input[str] oauth2_password: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth2_scopes: required when `type`==`oauth2`, if provided, will be used in the token request
        :param pulumi.Input[str] oauth2_token_url: required when `type`==`oauth2`
        :param pulumi.Input[str] oauth2_username: required when `oauth2_grant_type`==`password`
        :param pulumi.Input[str] secret: only if `type`=`http-post`
        :param pulumi.Input[str] splunk_token: required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
               the webhook receiver is configured to accept it.'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] topics: enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        :param pulumi.Input[str] type: enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        :param pulumi.Input[bool] verify_cert: when url uses HTTPS, whether to verify the certificate
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookState.__new__(_WebhookState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["headers"] = headers
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth2_client_id"] = oauth2_client_id
        __props__.__dict__["oauth2_client_secret"] = oauth2_client_secret
        __props__.__dict__["oauth2_grant_type"] = oauth2_grant_type
        __props__.__dict__["oauth2_password"] = oauth2_password
        __props__.__dict__["oauth2_scopes"] = oauth2_scopes
        __props__.__dict__["oauth2_token_url"] = oauth2_token_url
        __props__.__dict__["oauth2_username"] = oauth2_username
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["secret"] = secret
        __props__.__dict__["splunk_token"] = splunk_token
        __props__.__dict__["topics"] = topics
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["verify_cert"] = verify_cert
        return Webhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        whether webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        if `type`=`http-post`, additional custom HTTP headers to add
        the headers name and value must be string, total bytes of headers name and value must be less than 1000
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the webhook
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauth2ClientId")
    def oauth2_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_id")

    @property
    @pulumi.getter(name="oauth2ClientSecret")
    def oauth2_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        required when `oauth2_grant_type`==`client_credentials`
        """
        return pulumi.get(self, "oauth2_client_secret")

    @property
    @pulumi.getter(name="oauth2GrantType")
    def oauth2_grant_type(self) -> pulumi.Output[Optional[str]]:
        """
        required when `type`==`oauth2`. enum: `client_credentials`, `password`
        """
        return pulumi.get(self, "oauth2_grant_type")

    @property
    @pulumi.getter(name="oauth2Password")
    def oauth2_password(self) -> pulumi.Output[Optional[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_password")

    @property
    @pulumi.getter(name="oauth2Scopes")
    def oauth2_scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        required when `type`==`oauth2`, if provided, will be used in the token request
        """
        return pulumi.get(self, "oauth2_scopes")

    @property
    @pulumi.getter(name="oauth2TokenUrl")
    def oauth2_token_url(self) -> pulumi.Output[Optional[str]]:
        """
        required when `type`==`oauth2`
        """
        return pulumi.get(self, "oauth2_token_url")

    @property
    @pulumi.getter(name="oauth2Username")
    def oauth2_username(self) -> pulumi.Output[Optional[str]]:
        """
        required when `oauth2_grant_type`==`password`
        """
        return pulumi.get(self, "oauth2_username")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        only if `type`=`http-post`
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> pulumi.Output[Optional[str]]:
        """
        required if `type`=`splunk` If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if
        the webhook receiver is configured to accept it.'
        """
        return pulumi.get(self, "splunk_token")

    @property
    @pulumi.getter
    def topics(self) -> pulumi.Output[Sequence[str]]:
        """
        enum: `alarms`, `audits`, `client-info`, `client-join`, `client-sessions`, `device-updowns`, `device-events`, `mxedge-events`, `nac-accounting`, `nac_events`
        """
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="verifyCert")
    def verify_cert(self) -> pulumi.Output[bool]:
        """
        when url uses HTTPS, whether to verify the certificate
        """
        return pulumi.get(self, "verify_cert")

