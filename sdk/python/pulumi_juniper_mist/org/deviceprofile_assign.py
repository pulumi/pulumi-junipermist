# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DeviceprofileAssignArgs', 'DeviceprofileAssign']

@pulumi.input_type
class DeviceprofileAssignArgs:
    def __init__(__self__, *,
                 deviceprofile_id: pulumi.Input[str],
                 macs: pulumi.Input[Sequence[pulumi.Input[str]]],
                 org_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a DeviceprofileAssign resource.
        """
        pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        pulumi.set(__self__, "macs", macs)
        pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deviceprofile_id")

    @deviceprofile_id.setter
    def deviceprofile_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deviceprofile_id", value)

    @property
    @pulumi.getter
    def macs(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "macs", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)


@pulumi.input_type
class _DeviceprofileAssignState:
    def __init__(__self__, *,
                 deviceprofile_id: Optional[pulumi.Input[str]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DeviceprofileAssign resources.
        """
        if deviceprofile_id is not None:
            pulumi.set(__self__, "deviceprofile_id", deviceprofile_id)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deviceprofile_id")

    @deviceprofile_id.setter
    def deviceprofile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deviceprofile_id", value)

    @property
    @pulumi.getter
    def macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "macs", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)


class DeviceprofileAssign(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deviceprofile_id: Optional[pulumi.Input[str]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resourceis used to assign/unassign a device profile to one or multiple devices
        The `org.DeviceprofileGateway` resource can be assigned to GatewaysThe `org.DeviceprofileAp` resource can be assigned the Wireless Access Points

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        deviceprofile_assign = junipermist.org.DeviceprofileAssign("deviceprofile_assign",
            org_id=terraform_test["id"],
            deviceprofile_id=hub_one["id"],
            macs=[
                "4c9614000000",
                "4c9614000001",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceprofileAssignArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resourceis used to assign/unassign a device profile to one or multiple devices
        The `org.DeviceprofileGateway` resource can be assigned to GatewaysThe `org.DeviceprofileAp` resource can be assigned the Wireless Access Points

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        deviceprofile_assign = junipermist.org.DeviceprofileAssign("deviceprofile_assign",
            org_id=terraform_test["id"],
            deviceprofile_id=hub_one["id"],
            macs=[
                "4c9614000000",
                "4c9614000001",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param DeviceprofileAssignArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceprofileAssignArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 deviceprofile_id: Optional[pulumi.Input[str]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceprofileAssignArgs.__new__(DeviceprofileAssignArgs)

            if deviceprofile_id is None and not opts.urn:
                raise TypeError("Missing required property 'deviceprofile_id'")
            __props__.__dict__["deviceprofile_id"] = deviceprofile_id
            if macs is None and not opts.urn:
                raise TypeError("Missing required property 'macs'")
            __props__.__dict__["macs"] = macs
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
        super(DeviceprofileAssign, __self__).__init__(
            'junipermist:org/deviceprofileAssign:DeviceprofileAssign',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            deviceprofile_id: Optional[pulumi.Input[str]] = None,
            macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            org_id: Optional[pulumi.Input[str]] = None) -> 'DeviceprofileAssign':
        """
        Get an existing DeviceprofileAssign resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceprofileAssignState.__new__(_DeviceprofileAssignState)

        __props__.__dict__["deviceprofile_id"] = deviceprofile_id
        __props__.__dict__["macs"] = macs
        __props__.__dict__["org_id"] = org_id
        return DeviceprofileAssign(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceprofileId")
    def deviceprofile_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deviceprofile_id")

    @property
    @pulumi.getter
    def macs(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "macs")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

