# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['NacidpArgs', 'Nacidp']

@pulumi.input_type
class NacidpArgs:
    def __init__(__self__, *,
                 idp_type: pulumi.Input[str],
                 org_id: pulumi.Input[str],
                 group_filter: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_password: Optional[pulumi.Input[str]] = None,
                 ldap_cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_client_cert: Optional[pulumi.Input[str]] = None,
                 ldap_client_key: Optional[pulumi.Input[str]] = None,
                 ldap_group_attr: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 ldap_resolve_groups: Optional[pulumi.Input[bool]] = None,
                 ldap_server_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_type: Optional[pulumi.Input[str]] = None,
                 ldap_user_filter: Optional[pulumi.Input[str]] = None,
                 member_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_discovery_url: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_tenant_id: Optional[pulumi.Input[str]] = None,
                 oauth_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Nacidp resource.
        :param pulumi.Input[str] idp_type: enum: `ldap`, `mxedge_proxy`, `oauth`
        :param pulumi.Input[str] group_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        :param pulumi.Input[str] ldap_base_dn: Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        :param pulumi.Input[str] ldap_bind_dn: Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        :param pulumi.Input[str] ldap_bind_password: Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_cacerts: Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        :param pulumi.Input[str] ldap_client_cert: if `idp_type`==`ldap`, LDAPS Client certificate
        :param pulumi.Input[str] ldap_client_key: if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        :param pulumi.Input[str] ldap_group_attr: if `ldap_type`==`custom`
        :param pulumi.Input[str] ldap_group_dn: if `ldap_type`==`custom`
        :param pulumi.Input[bool] ldap_resolve_groups: if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_server_hosts: if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        :param pulumi.Input[str] ldap_type: if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        :param pulumi.Input[str] ldap_user_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        :param pulumi.Input[str] member_filter: Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] oauth_cc_client_id: Required if `idp_type`==`oauth`, Client Credentials
        :param pulumi.Input[str] oauth_cc_client_secret: Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        :param pulumi.Input[str] oauth_discovery_url: if `idp_type`==`oauth`
        :param pulumi.Input[str] oauth_ropc_client_id: if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        :param pulumi.Input[str] oauth_ropc_client_secret: if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        :param pulumi.Input[str] oauth_tenant_id: Required if `idp_type`==`oauth`, oauth*tenant*id
        :param pulumi.Input[str] oauth_type: if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        pulumi.set(__self__, "idp_type", idp_type)
        pulumi.set(__self__, "org_id", org_id)
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if ldap_base_dn is not None:
            pulumi.set(__self__, "ldap_base_dn", ldap_base_dn)
        if ldap_bind_dn is not None:
            pulumi.set(__self__, "ldap_bind_dn", ldap_bind_dn)
        if ldap_bind_password is not None:
            pulumi.set(__self__, "ldap_bind_password", ldap_bind_password)
        if ldap_cacerts is not None:
            pulumi.set(__self__, "ldap_cacerts", ldap_cacerts)
        if ldap_client_cert is not None:
            pulumi.set(__self__, "ldap_client_cert", ldap_client_cert)
        if ldap_client_key is not None:
            pulumi.set(__self__, "ldap_client_key", ldap_client_key)
        if ldap_group_attr is not None:
            pulumi.set(__self__, "ldap_group_attr", ldap_group_attr)
        if ldap_group_dn is not None:
            pulumi.set(__self__, "ldap_group_dn", ldap_group_dn)
        if ldap_resolve_groups is not None:
            pulumi.set(__self__, "ldap_resolve_groups", ldap_resolve_groups)
        if ldap_server_hosts is not None:
            pulumi.set(__self__, "ldap_server_hosts", ldap_server_hosts)
        if ldap_type is not None:
            pulumi.set(__self__, "ldap_type", ldap_type)
        if ldap_user_filter is not None:
            pulumi.set(__self__, "ldap_user_filter", ldap_user_filter)
        if member_filter is not None:
            pulumi.set(__self__, "member_filter", member_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_cc_client_id is not None:
            pulumi.set(__self__, "oauth_cc_client_id", oauth_cc_client_id)
        if oauth_cc_client_secret is not None:
            pulumi.set(__self__, "oauth_cc_client_secret", oauth_cc_client_secret)
        if oauth_discovery_url is not None:
            pulumi.set(__self__, "oauth_discovery_url", oauth_discovery_url)
        if oauth_ropc_client_id is not None:
            pulumi.set(__self__, "oauth_ropc_client_id", oauth_ropc_client_id)
        if oauth_ropc_client_secret is not None:
            pulumi.set(__self__, "oauth_ropc_client_secret", oauth_ropc_client_secret)
        if oauth_tenant_id is not None:
            pulumi.set(__self__, "oauth_tenant_id", oauth_tenant_id)
        if oauth_type is not None:
            pulumi.set(__self__, "oauth_type", oauth_type)

    @property
    @pulumi.getter(name="idpType")
    def idp_type(self) -> pulumi.Input[str]:
        """
        enum: `ldap`, `mxedge_proxy`, `oauth`
        """
        return pulumi.get(self, "idp_type")

    @idp_type.setter
    def idp_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "idp_type", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        """
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        """
        return pulumi.get(self, "ldap_base_dn")

    @ldap_base_dn.setter
    def ldap_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_base_dn", value)

    @property
    @pulumi.getter(name="ldapBindDn")
    def ldap_bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_dn")

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_bind_dn", value)

    @property
    @pulumi.getter(name="ldapBindPassword")
    def ldap_bind_password(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_password")

    @ldap_bind_password.setter
    def ldap_bind_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_bind_password", value)

    @property
    @pulumi.getter(name="ldapCacerts")
    def ldap_cacerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        """
        return pulumi.get(self, "ldap_cacerts")

    @ldap_cacerts.setter
    def ldap_cacerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ldap_cacerts", value)

    @property
    @pulumi.getter(name="ldapClientCert")
    def ldap_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`, LDAPS Client certificate
        """
        return pulumi.get(self, "ldap_client_cert")

    @ldap_client_cert.setter
    def ldap_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_client_cert", value)

    @property
    @pulumi.getter(name="ldapClientKey")
    def ldap_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        """
        return pulumi.get(self, "ldap_client_key")

    @ldap_client_key.setter
    def ldap_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_client_key", value)

    @property
    @pulumi.getter(name="ldapGroupAttr")
    def ldap_group_attr(self) -> Optional[pulumi.Input[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_attr")

    @ldap_group_attr.setter
    def ldap_group_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_attr", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)

    @property
    @pulumi.getter(name="ldapResolveGroups")
    def ldap_resolve_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        """
        return pulumi.get(self, "ldap_resolve_groups")

    @ldap_resolve_groups.setter
    def ldap_resolve_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_resolve_groups", value)

    @property
    @pulumi.getter(name="ldapServerHosts")
    def ldap_server_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        """
        return pulumi.get(self, "ldap_server_hosts")

    @ldap_server_hosts.setter
    def ldap_server_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ldap_server_hosts", value)

    @property
    @pulumi.getter(name="ldapType")
    def ldap_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "ldap_type")

    @ldap_type.setter
    def ldap_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_type", value)

    @property
    @pulumi.getter(name="ldapUserFilter")
    def ldap_user_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        """
        return pulumi.get(self, "ldap_user_filter")

    @ldap_user_filter.setter
    def ldap_user_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_user_filter", value)

    @property
    @pulumi.getter(name="memberFilter")
    def member_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        """
        return pulumi.get(self, "member_filter")

    @member_filter.setter
    def member_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthCcClientId")
    def oauth_cc_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, Client Credentials
        """
        return pulumi.get(self, "oauth_cc_client_id")

    @oauth_cc_client_id.setter
    def oauth_cc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_cc_client_id", value)

    @property
    @pulumi.getter(name="oauthCcClientSecret")
    def oauth_cc_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        """
        return pulumi.get(self, "oauth_cc_client_secret")

    @oauth_cc_client_secret.setter
    def oauth_cc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_cc_client_secret", value)

    @property
    @pulumi.getter(name="oauthDiscoveryUrl")
    def oauth_discovery_url(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`
        """
        return pulumi.get(self, "oauth_discovery_url")

    @oauth_discovery_url.setter
    def oauth_discovery_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_discovery_url", value)

    @property
    @pulumi.getter(name="oauthRopcClientId")
    def oauth_ropc_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        """
        return pulumi.get(self, "oauth_ropc_client_id")

    @oauth_ropc_client_id.setter
    def oauth_ropc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_ropc_client_id", value)

    @property
    @pulumi.getter(name="oauthRopcClientSecret")
    def oauth_ropc_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        """
        return pulumi.get(self, "oauth_ropc_client_secret")

    @oauth_ropc_client_secret.setter
    def oauth_ropc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_ropc_client_secret", value)

    @property
    @pulumi.getter(name="oauthTenantId")
    def oauth_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*tenant*id
        """
        return pulumi.get(self, "oauth_tenant_id")

    @oauth_tenant_id.setter
    def oauth_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_tenant_id", value)

    @property
    @pulumi.getter(name="oauthType")
    def oauth_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "oauth_type")

    @oauth_type.setter
    def oauth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_type", value)


@pulumi.input_type
class _NacidpState:
    def __init__(__self__, *,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 idp_type: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_password: Optional[pulumi.Input[str]] = None,
                 ldap_cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_client_cert: Optional[pulumi.Input[str]] = None,
                 ldap_client_key: Optional[pulumi.Input[str]] = None,
                 ldap_group_attr: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 ldap_resolve_groups: Optional[pulumi.Input[bool]] = None,
                 ldap_server_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_type: Optional[pulumi.Input[str]] = None,
                 ldap_user_filter: Optional[pulumi.Input[str]] = None,
                 member_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_discovery_url: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_tenant_id: Optional[pulumi.Input[str]] = None,
                 oauth_type: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Nacidp resources.
        :param pulumi.Input[str] group_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        :param pulumi.Input[str] idp_type: enum: `ldap`, `mxedge_proxy`, `oauth`
        :param pulumi.Input[str] ldap_base_dn: Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        :param pulumi.Input[str] ldap_bind_dn: Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        :param pulumi.Input[str] ldap_bind_password: Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_cacerts: Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        :param pulumi.Input[str] ldap_client_cert: if `idp_type`==`ldap`, LDAPS Client certificate
        :param pulumi.Input[str] ldap_client_key: if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        :param pulumi.Input[str] ldap_group_attr: if `ldap_type`==`custom`
        :param pulumi.Input[str] ldap_group_dn: if `ldap_type`==`custom`
        :param pulumi.Input[bool] ldap_resolve_groups: if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_server_hosts: if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        :param pulumi.Input[str] ldap_type: if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        :param pulumi.Input[str] ldap_user_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        :param pulumi.Input[str] member_filter: Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] oauth_cc_client_id: Required if `idp_type`==`oauth`, Client Credentials
        :param pulumi.Input[str] oauth_cc_client_secret: Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        :param pulumi.Input[str] oauth_discovery_url: if `idp_type`==`oauth`
        :param pulumi.Input[str] oauth_ropc_client_id: if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        :param pulumi.Input[str] oauth_ropc_client_secret: if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        :param pulumi.Input[str] oauth_tenant_id: Required if `idp_type`==`oauth`, oauth*tenant*id
        :param pulumi.Input[str] oauth_type: if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        if group_filter is not None:
            pulumi.set(__self__, "group_filter", group_filter)
        if idp_type is not None:
            pulumi.set(__self__, "idp_type", idp_type)
        if ldap_base_dn is not None:
            pulumi.set(__self__, "ldap_base_dn", ldap_base_dn)
        if ldap_bind_dn is not None:
            pulumi.set(__self__, "ldap_bind_dn", ldap_bind_dn)
        if ldap_bind_password is not None:
            pulumi.set(__self__, "ldap_bind_password", ldap_bind_password)
        if ldap_cacerts is not None:
            pulumi.set(__self__, "ldap_cacerts", ldap_cacerts)
        if ldap_client_cert is not None:
            pulumi.set(__self__, "ldap_client_cert", ldap_client_cert)
        if ldap_client_key is not None:
            pulumi.set(__self__, "ldap_client_key", ldap_client_key)
        if ldap_group_attr is not None:
            pulumi.set(__self__, "ldap_group_attr", ldap_group_attr)
        if ldap_group_dn is not None:
            pulumi.set(__self__, "ldap_group_dn", ldap_group_dn)
        if ldap_resolve_groups is not None:
            pulumi.set(__self__, "ldap_resolve_groups", ldap_resolve_groups)
        if ldap_server_hosts is not None:
            pulumi.set(__self__, "ldap_server_hosts", ldap_server_hosts)
        if ldap_type is not None:
            pulumi.set(__self__, "ldap_type", ldap_type)
        if ldap_user_filter is not None:
            pulumi.set(__self__, "ldap_user_filter", ldap_user_filter)
        if member_filter is not None:
            pulumi.set(__self__, "member_filter", member_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oauth_cc_client_id is not None:
            pulumi.set(__self__, "oauth_cc_client_id", oauth_cc_client_id)
        if oauth_cc_client_secret is not None:
            pulumi.set(__self__, "oauth_cc_client_secret", oauth_cc_client_secret)
        if oauth_discovery_url is not None:
            pulumi.set(__self__, "oauth_discovery_url", oauth_discovery_url)
        if oauth_ropc_client_id is not None:
            pulumi.set(__self__, "oauth_ropc_client_id", oauth_ropc_client_id)
        if oauth_ropc_client_secret is not None:
            pulumi.set(__self__, "oauth_ropc_client_secret", oauth_ropc_client_secret)
        if oauth_tenant_id is not None:
            pulumi.set(__self__, "oauth_tenant_id", oauth_tenant_id)
        if oauth_type is not None:
            pulumi.set(__self__, "oauth_type", oauth_type)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        """
        return pulumi.get(self, "group_filter")

    @group_filter.setter
    def group_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_filter", value)

    @property
    @pulumi.getter(name="idpType")
    def idp_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ldap`, `mxedge_proxy`, `oauth`
        """
        return pulumi.get(self, "idp_type")

    @idp_type.setter
    def idp_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_type", value)

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        """
        return pulumi.get(self, "ldap_base_dn")

    @ldap_base_dn.setter
    def ldap_base_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_base_dn", value)

    @property
    @pulumi.getter(name="ldapBindDn")
    def ldap_bind_dn(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_dn")

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_bind_dn", value)

    @property
    @pulumi.getter(name="ldapBindPassword")
    def ldap_bind_password(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_password")

    @ldap_bind_password.setter
    def ldap_bind_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_bind_password", value)

    @property
    @pulumi.getter(name="ldapCacerts")
    def ldap_cacerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        """
        return pulumi.get(self, "ldap_cacerts")

    @ldap_cacerts.setter
    def ldap_cacerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ldap_cacerts", value)

    @property
    @pulumi.getter(name="ldapClientCert")
    def ldap_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`, LDAPS Client certificate
        """
        return pulumi.get(self, "ldap_client_cert")

    @ldap_client_cert.setter
    def ldap_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_client_cert", value)

    @property
    @pulumi.getter(name="ldapClientKey")
    def ldap_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        """
        return pulumi.get(self, "ldap_client_key")

    @ldap_client_key.setter
    def ldap_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_client_key", value)

    @property
    @pulumi.getter(name="ldapGroupAttr")
    def ldap_group_attr(self) -> Optional[pulumi.Input[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_attr")

    @ldap_group_attr.setter
    def ldap_group_attr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_attr", value)

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> Optional[pulumi.Input[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_dn")

    @ldap_group_dn.setter
    def ldap_group_dn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_group_dn", value)

    @property
    @pulumi.getter(name="ldapResolveGroups")
    def ldap_resolve_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        """
        return pulumi.get(self, "ldap_resolve_groups")

    @ldap_resolve_groups.setter
    def ldap_resolve_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_resolve_groups", value)

    @property
    @pulumi.getter(name="ldapServerHosts")
    def ldap_server_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        """
        return pulumi.get(self, "ldap_server_hosts")

    @ldap_server_hosts.setter
    def ldap_server_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ldap_server_hosts", value)

    @property
    @pulumi.getter(name="ldapType")
    def ldap_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "ldap_type")

    @ldap_type.setter
    def ldap_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_type", value)

    @property
    @pulumi.getter(name="ldapUserFilter")
    def ldap_user_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        """
        return pulumi.get(self, "ldap_user_filter")

    @ldap_user_filter.setter
    def ldap_user_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap_user_filter", value)

    @property
    @pulumi.getter(name="memberFilter")
    def member_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        """
        return pulumi.get(self, "member_filter")

    @member_filter.setter
    def member_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oauthCcClientId")
    def oauth_cc_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, Client Credentials
        """
        return pulumi.get(self, "oauth_cc_client_id")

    @oauth_cc_client_id.setter
    def oauth_cc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_cc_client_id", value)

    @property
    @pulumi.getter(name="oauthCcClientSecret")
    def oauth_cc_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        """
        return pulumi.get(self, "oauth_cc_client_secret")

    @oauth_cc_client_secret.setter
    def oauth_cc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_cc_client_secret", value)

    @property
    @pulumi.getter(name="oauthDiscoveryUrl")
    def oauth_discovery_url(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`
        """
        return pulumi.get(self, "oauth_discovery_url")

    @oauth_discovery_url.setter
    def oauth_discovery_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_discovery_url", value)

    @property
    @pulumi.getter(name="oauthRopcClientId")
    def oauth_ropc_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        """
        return pulumi.get(self, "oauth_ropc_client_id")

    @oauth_ropc_client_id.setter
    def oauth_ropc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_ropc_client_id", value)

    @property
    @pulumi.getter(name="oauthRopcClientSecret")
    def oauth_ropc_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        """
        return pulumi.get(self, "oauth_ropc_client_secret")

    @oauth_ropc_client_secret.setter
    def oauth_ropc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_ropc_client_secret", value)

    @property
    @pulumi.getter(name="oauthTenantId")
    def oauth_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*tenant*id
        """
        return pulumi.get(self, "oauth_tenant_id")

    @oauth_tenant_id.setter
    def oauth_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_tenant_id", value)

    @property
    @pulumi.getter(name="oauthType")
    def oauth_type(self) -> Optional[pulumi.Input[str]]:
        """
        if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "oauth_type")

    @oauth_type.setter
    def oauth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oauth_type", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)


class Nacidp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 idp_type: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_password: Optional[pulumi.Input[str]] = None,
                 ldap_cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_client_cert: Optional[pulumi.Input[str]] = None,
                 ldap_client_key: Optional[pulumi.Input[str]] = None,
                 ldap_group_attr: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 ldap_resolve_groups: Optional[pulumi.Input[bool]] = None,
                 ldap_server_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_type: Optional[pulumi.Input[str]] = None,
                 ldap_user_filter: Optional[pulumi.Input[str]] = None,
                 member_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_discovery_url: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_tenant_id: Optional[pulumi.Input[str]] = None,
                 oauth_type: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource manages NAC IDPs (Identity Providers).
        The NAC IDPs to validate NAC client accounts against an IDP with OAuth2.0, LDAP/LDAPS, or a local Mist Edge.
        Mist Access Assurance can also retrieve group membership from the IDP, and use this information in the NAC Rules (`org.Nacrule` resource)

        IMPORTANT:
        * Once created, the NAC IDP must be registered in the `org.Setting` resource (full path: `mist_org_setting.mist_nac.idps`).
        * The associated REALMS are configured under `mist_org_setting.mist_nac.idps`
        * To make the IDP the Default IDP, set the IDP ID under `mist_org_setting.mist_nac.default_idp_id`

        For SAML IDP, the NAC IDP Metadata can be retrieved with the `org_get_nacidp_metadata` data source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        # OAuth with Azure Example
        idp_azure = junipermist.org.Nacidp("idp_azure",
            org_id=terraform_test["id"],
            name="idp_azure",
            idp_type="oauth",
            oauth_cc_client_id="client_id",
            oauth_cc_client_secret="-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
            oauth_ropc_client_id="ropc_client_id",
            oauth_ropc_client_secret="ropc_client_secret",
            oauth_tenant_id="tenant_id",
            oauth_type="azure")
        # Custom LDAP Example
        idp_ldap = junipermist.org.Nacidp("idp_ldap",
            org_id=terraform_test["id"],
            name="idp_ldap",
            idp_type="ldap",
            ldap_type="custom",
            group_filter="memberOf",
            member_filter="memberOf",
            ldap_user_filter="(mail=%s)",
            ldap_server_hosts=[
                "ldap.mycorp.com",
                "1.2.3.4",
            ],
            ldap_base_dn="DC=abc,DC=com",
            ldap_bind_dn="CN=admin,CN=users,DC=abc,DC=com",
            ldap_bind_password="secret!password",
            ldap_cacerts=[
                \"\"\"-----BEGIN CERTIFICATE-----
        MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE
        -----END CERTIFICATE-----\"\"\",
                \"\"\"-----BEGIN CERTIFICATE-----
        BhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\"\"\",
            ],
            ldap_client_cert=\"\"\"-----BEGIN CERTIFICATE-----
        MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE
        -----END CERTIFICATE-----\"\"\",
            ldap_client_key="-----BEGIN PRI...")
        ```

        ## Import

        Using `pulumi import`, import `mist_org_nacidp` with:

        Org PSK can be imported by specifying the org_id and the nacidp_id

        ```sh
        $ pulumi import junipermist:org/nacidp:Nacidp idp_azure 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        :param pulumi.Input[str] idp_type: enum: `ldap`, `mxedge_proxy`, `oauth`
        :param pulumi.Input[str] ldap_base_dn: Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        :param pulumi.Input[str] ldap_bind_dn: Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        :param pulumi.Input[str] ldap_bind_password: Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_cacerts: Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        :param pulumi.Input[str] ldap_client_cert: if `idp_type`==`ldap`, LDAPS Client certificate
        :param pulumi.Input[str] ldap_client_key: if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        :param pulumi.Input[str] ldap_group_attr: if `ldap_type`==`custom`
        :param pulumi.Input[str] ldap_group_dn: if `ldap_type`==`custom`
        :param pulumi.Input[bool] ldap_resolve_groups: if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_server_hosts: if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        :param pulumi.Input[str] ldap_type: if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        :param pulumi.Input[str] ldap_user_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        :param pulumi.Input[str] member_filter: Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] oauth_cc_client_id: Required if `idp_type`==`oauth`, Client Credentials
        :param pulumi.Input[str] oauth_cc_client_secret: Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        :param pulumi.Input[str] oauth_discovery_url: if `idp_type`==`oauth`
        :param pulumi.Input[str] oauth_ropc_client_id: if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        :param pulumi.Input[str] oauth_ropc_client_secret: if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        :param pulumi.Input[str] oauth_tenant_id: Required if `idp_type`==`oauth`, oauth*tenant*id
        :param pulumi.Input[str] oauth_type: if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NacidpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages NAC IDPs (Identity Providers).
        The NAC IDPs to validate NAC client accounts against an IDP with OAuth2.0, LDAP/LDAPS, or a local Mist Edge.
        Mist Access Assurance can also retrieve group membership from the IDP, and use this information in the NAC Rules (`org.Nacrule` resource)

        IMPORTANT:
        * Once created, the NAC IDP must be registered in the `org.Setting` resource (full path: `mist_org_setting.mist_nac.idps`).
        * The associated REALMS are configured under `mist_org_setting.mist_nac.idps`
        * To make the IDP the Default IDP, set the IDP ID under `mist_org_setting.mist_nac.default_idp_id`

        For SAML IDP, the NAC IDP Metadata can be retrieved with the `org_get_nacidp_metadata` data source.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_juniper_mist as junipermist

        # OAuth with Azure Example
        idp_azure = junipermist.org.Nacidp("idp_azure",
            org_id=terraform_test["id"],
            name="idp_azure",
            idp_type="oauth",
            oauth_cc_client_id="client_id",
            oauth_cc_client_secret="-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----",
            oauth_ropc_client_id="ropc_client_id",
            oauth_ropc_client_secret="ropc_client_secret",
            oauth_tenant_id="tenant_id",
            oauth_type="azure")
        # Custom LDAP Example
        idp_ldap = junipermist.org.Nacidp("idp_ldap",
            org_id=terraform_test["id"],
            name="idp_ldap",
            idp_type="ldap",
            ldap_type="custom",
            group_filter="memberOf",
            member_filter="memberOf",
            ldap_user_filter="(mail=%s)",
            ldap_server_hosts=[
                "ldap.mycorp.com",
                "1.2.3.4",
            ],
            ldap_base_dn="DC=abc,DC=com",
            ldap_bind_dn="CN=admin,CN=users,DC=abc,DC=com",
            ldap_bind_password="secret!password",
            ldap_cacerts=[
                \"\"\"-----BEGIN CERTIFICATE-----
        MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE
        -----END CERTIFICATE-----\"\"\",
                \"\"\"-----BEGIN CERTIFICATE-----
        BhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----\"\"\",
            ],
            ldap_client_cert=\"\"\"-----BEGIN CERTIFICATE-----
        MIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE
        -----END CERTIFICATE-----\"\"\",
            ldap_client_key="-----BEGIN PRI...")
        ```

        ## Import

        Using `pulumi import`, import `mist_org_nacidp` with:

        Org PSK can be imported by specifying the org_id and the nacidp_id

        ```sh
        $ pulumi import junipermist:org/nacidp:Nacidp idp_azure 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param NacidpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NacidpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_filter: Optional[pulumi.Input[str]] = None,
                 idp_type: Optional[pulumi.Input[str]] = None,
                 ldap_base_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_dn: Optional[pulumi.Input[str]] = None,
                 ldap_bind_password: Optional[pulumi.Input[str]] = None,
                 ldap_cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_client_cert: Optional[pulumi.Input[str]] = None,
                 ldap_client_key: Optional[pulumi.Input[str]] = None,
                 ldap_group_attr: Optional[pulumi.Input[str]] = None,
                 ldap_group_dn: Optional[pulumi.Input[str]] = None,
                 ldap_resolve_groups: Optional[pulumi.Input[bool]] = None,
                 ldap_server_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ldap_type: Optional[pulumi.Input[str]] = None,
                 ldap_user_filter: Optional[pulumi.Input[str]] = None,
                 member_filter: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_cc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_discovery_url: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_id: Optional[pulumi.Input[str]] = None,
                 oauth_ropc_client_secret: Optional[pulumi.Input[str]] = None,
                 oauth_tenant_id: Optional[pulumi.Input[str]] = None,
                 oauth_type: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NacidpArgs.__new__(NacidpArgs)

            __props__.__dict__["group_filter"] = group_filter
            if idp_type is None and not opts.urn:
                raise TypeError("Missing required property 'idp_type'")
            __props__.__dict__["idp_type"] = idp_type
            __props__.__dict__["ldap_base_dn"] = ldap_base_dn
            __props__.__dict__["ldap_bind_dn"] = ldap_bind_dn
            __props__.__dict__["ldap_bind_password"] = ldap_bind_password
            __props__.__dict__["ldap_cacerts"] = ldap_cacerts
            __props__.__dict__["ldap_client_cert"] = ldap_client_cert
            __props__.__dict__["ldap_client_key"] = ldap_client_key
            __props__.__dict__["ldap_group_attr"] = ldap_group_attr
            __props__.__dict__["ldap_group_dn"] = ldap_group_dn
            __props__.__dict__["ldap_resolve_groups"] = ldap_resolve_groups
            __props__.__dict__["ldap_server_hosts"] = ldap_server_hosts
            __props__.__dict__["ldap_type"] = ldap_type
            __props__.__dict__["ldap_user_filter"] = ldap_user_filter
            __props__.__dict__["member_filter"] = member_filter
            __props__.__dict__["name"] = name
            __props__.__dict__["oauth_cc_client_id"] = oauth_cc_client_id
            __props__.__dict__["oauth_cc_client_secret"] = oauth_cc_client_secret
            __props__.__dict__["oauth_discovery_url"] = oauth_discovery_url
            __props__.__dict__["oauth_ropc_client_id"] = oauth_ropc_client_id
            __props__.__dict__["oauth_ropc_client_secret"] = oauth_ropc_client_secret
            __props__.__dict__["oauth_tenant_id"] = oauth_tenant_id
            __props__.__dict__["oauth_type"] = oauth_type
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
        super(Nacidp, __self__).__init__(
            'junipermist:org/nacidp:Nacidp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_filter: Optional[pulumi.Input[str]] = None,
            idp_type: Optional[pulumi.Input[str]] = None,
            ldap_base_dn: Optional[pulumi.Input[str]] = None,
            ldap_bind_dn: Optional[pulumi.Input[str]] = None,
            ldap_bind_password: Optional[pulumi.Input[str]] = None,
            ldap_cacerts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ldap_client_cert: Optional[pulumi.Input[str]] = None,
            ldap_client_key: Optional[pulumi.Input[str]] = None,
            ldap_group_attr: Optional[pulumi.Input[str]] = None,
            ldap_group_dn: Optional[pulumi.Input[str]] = None,
            ldap_resolve_groups: Optional[pulumi.Input[bool]] = None,
            ldap_server_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ldap_type: Optional[pulumi.Input[str]] = None,
            ldap_user_filter: Optional[pulumi.Input[str]] = None,
            member_filter: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oauth_cc_client_id: Optional[pulumi.Input[str]] = None,
            oauth_cc_client_secret: Optional[pulumi.Input[str]] = None,
            oauth_discovery_url: Optional[pulumi.Input[str]] = None,
            oauth_ropc_client_id: Optional[pulumi.Input[str]] = None,
            oauth_ropc_client_secret: Optional[pulumi.Input[str]] = None,
            oauth_tenant_id: Optional[pulumi.Input[str]] = None,
            oauth_type: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None) -> 'Nacidp':
        """
        Get an existing Nacidp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        :param pulumi.Input[str] idp_type: enum: `ldap`, `mxedge_proxy`, `oauth`
        :param pulumi.Input[str] ldap_base_dn: Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        :param pulumi.Input[str] ldap_bind_dn: Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        :param pulumi.Input[str] ldap_bind_password: Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_cacerts: Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        :param pulumi.Input[str] ldap_client_cert: if `idp_type`==`ldap`, LDAPS Client certificate
        :param pulumi.Input[str] ldap_client_key: if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        :param pulumi.Input[str] ldap_group_attr: if `ldap_type`==`custom`
        :param pulumi.Input[str] ldap_group_dn: if `ldap_type`==`custom`
        :param pulumi.Input[bool] ldap_resolve_groups: if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ldap_server_hosts: if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        :param pulumi.Input[str] ldap_type: if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        :param pulumi.Input[str] ldap_user_filter: Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        :param pulumi.Input[str] member_filter: Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        :param pulumi.Input[str] name: name
        :param pulumi.Input[str] oauth_cc_client_id: Required if `idp_type`==`oauth`, Client Credentials
        :param pulumi.Input[str] oauth_cc_client_secret: Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        :param pulumi.Input[str] oauth_discovery_url: if `idp_type`==`oauth`
        :param pulumi.Input[str] oauth_ropc_client_id: if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        :param pulumi.Input[str] oauth_ropc_client_secret: if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        :param pulumi.Input[str] oauth_tenant_id: Required if `idp_type`==`oauth`, oauth*tenant*id
        :param pulumi.Input[str] oauth_type: if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NacidpState.__new__(_NacidpState)

        __props__.__dict__["group_filter"] = group_filter
        __props__.__dict__["idp_type"] = idp_type
        __props__.__dict__["ldap_base_dn"] = ldap_base_dn
        __props__.__dict__["ldap_bind_dn"] = ldap_bind_dn
        __props__.__dict__["ldap_bind_password"] = ldap_bind_password
        __props__.__dict__["ldap_cacerts"] = ldap_cacerts
        __props__.__dict__["ldap_client_cert"] = ldap_client_cert
        __props__.__dict__["ldap_client_key"] = ldap_client_key
        __props__.__dict__["ldap_group_attr"] = ldap_group_attr
        __props__.__dict__["ldap_group_dn"] = ldap_group_dn
        __props__.__dict__["ldap_resolve_groups"] = ldap_resolve_groups
        __props__.__dict__["ldap_server_hosts"] = ldap_server_hosts
        __props__.__dict__["ldap_type"] = ldap_type
        __props__.__dict__["ldap_user_filter"] = ldap_user_filter
        __props__.__dict__["member_filter"] = member_filter
        __props__.__dict__["name"] = name
        __props__.__dict__["oauth_cc_client_id"] = oauth_cc_client_id
        __props__.__dict__["oauth_cc_client_secret"] = oauth_cc_client_secret
        __props__.__dict__["oauth_discovery_url"] = oauth_discovery_url
        __props__.__dict__["oauth_ropc_client_id"] = oauth_ropc_client_id
        __props__.__dict__["oauth_ropc_client_secret"] = oauth_ropc_client_secret
        __props__.__dict__["oauth_tenant_id"] = oauth_tenant_id
        __props__.__dict__["oauth_type"] = oauth_type
        __props__.__dict__["org_id"] = org_id
        return Nacidp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupFilter")
    def group_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of group
        """
        return pulumi.get(self, "group_filter")

    @property
    @pulumi.getter(name="idpType")
    def idp_type(self) -> pulumi.Output[str]:
        """
        enum: `ldap`, `mxedge_proxy`, `oauth`
        """
        return pulumi.get(self, "idp_type")

    @property
    @pulumi.getter(name="ldapBaseDn")
    def ldap_base_dn(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
        """
        return pulumi.get(self, "ldap_base_dn")

    @property
    @pulumi.getter(name="ldapBindDn")
    def ldap_bind_dn(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`ldap`, the account used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_dn")

    @property
    @pulumi.getter(name="ldapBindPassword")
    def ldap_bind_password(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`ldap`, the password used to authenticate against the LDAP
        """
        return pulumi.get(self, "ldap_bind_password")

    @property
    @pulumi.getter(name="ldapCacerts")
    def ldap_cacerts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Required if `idp_type`==`ldap`, list of CA certificates to validate the LDAP certificate
        """
        return pulumi.get(self, "ldap_cacerts")

    @property
    @pulumi.getter(name="ldapClientCert")
    def ldap_client_cert(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`ldap`, LDAPS Client certificate
        """
        return pulumi.get(self, "ldap_client_cert")

    @property
    @pulumi.getter(name="ldapClientKey")
    def ldap_client_key(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`ldap`, Key for the `ldap_client_cert`
        """
        return pulumi.get(self, "ldap_client_key")

    @property
    @pulumi.getter(name="ldapGroupAttr")
    def ldap_group_attr(self) -> pulumi.Output[Optional[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_attr")

    @property
    @pulumi.getter(name="ldapGroupDn")
    def ldap_group_dn(self) -> pulumi.Output[Optional[str]]:
        """
        if `ldap_type`==`custom`
        """
        return pulumi.get(self, "ldap_group_dn")

    @property
    @pulumi.getter(name="ldapResolveGroups")
    def ldap_resolve_groups(self) -> pulumi.Output[bool]:
        """
        if `idp_type`==`ldap`, whether to recursively resolve LDAP groups
        """
        return pulumi.get(self, "ldap_resolve_groups")

    @property
    @pulumi.getter(name="ldapServerHosts")
    def ldap_server_hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        if `idp_type`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
        """
        return pulumi.get(self, "ldap_server_hosts")

    @property
    @pulumi.getter(name="ldapType")
    def ldap_type(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "ldap_type")

    @property
    @pulumi.getter(name="ldapUserFilter")
    def ldap_user_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `ldap_type`==`custom`, LDAP filter that will identify the type of user
        """
        return pulumi.get(self, "ldap_user_filter")

    @property
    @pulumi.getter(name="memberFilter")
    def member_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `ldap_type`==`custom`,LDAP filter that will identify the type of member
        """
        return pulumi.get(self, "member_filter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oauthCcClientId")
    def oauth_cc_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`oauth`, Client Credentials
        """
        return pulumi.get(self, "oauth_cc_client_id")

    @property
    @pulumi.getter(name="oauthCcClientSecret")
    def oauth_cc_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
        """
        return pulumi.get(self, "oauth_cc_client_secret")

    @property
    @pulumi.getter(name="oauthDiscoveryUrl")
    def oauth_discovery_url(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`oauth`
        """
        return pulumi.get(self, "oauth_discovery_url")

    @property
    @pulumi.getter(name="oauthRopcClientId")
    def oauth_ropc_client_id(self) -> pulumi.Output[Optional[str]]:
        """
        if `idp_type`==`oauth`, ropc = Resource Owner Password Credentials
        """
        return pulumi.get(self, "oauth_ropc_client_id")

    @property
    @pulumi.getter(name="oauthRopcClientSecret")
    def oauth_ropc_client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        if `oauth_type`==`azure` or `oauth_type`==`azure-gov`. oauth*ropc*client_secret can be empty
        """
        return pulumi.get(self, "oauth_ropc_client_secret")

    @property
    @pulumi.getter(name="oauthTenantId")
    def oauth_tenant_id(self) -> pulumi.Output[Optional[str]]:
        """
        Required if `idp_type`==`oauth`, oauth*tenant*id
        """
        return pulumi.get(self, "oauth_tenant_id")

    @property
    @pulumi.getter(name="oauthType")
    def oauth_type(self) -> pulumi.Output[str]:
        """
        if `idp_type`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `ping_identity`
        """
        return pulumi.get(self, "oauth_type")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

