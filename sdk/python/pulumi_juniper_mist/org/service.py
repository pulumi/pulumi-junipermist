# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[builtins.str],
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_subcategories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 client_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dscp: Optional[pulumi.Input[builtins.str]] = None,
                 failover_policy: Optional[pulumi.Input[builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_jitter: Optional[pulumi.Input[builtins.str]] = None,
                 max_latency: Optional[pulumi.Input[builtins.str]] = None,
                 max_loss: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 service_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 service_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 sle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]] = None,
                 ssr_relaxed_tcp_state_enforcement: Optional[pulumi.Input[builtins.bool]] = None,
                 traffic_class: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addresses: If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_categories: When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_subcategories: When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] apps: When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
               /insight/top_app_by-bytes?wired=true
        :param pulumi.Input[builtins.int] client_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] client_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.str] failover_policy: enum: `non_revertible`, `none`, `revertible`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] hostnames: If `type`==`custom`, web filtering
        :param pulumi.Input[builtins.int] service_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] service_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.bool] sle_enabled: Whether to enable measure SLE
        :param pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]] specs: When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        :param pulumi.Input[builtins.str] traffic_class: when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        :param pulumi.Input[builtins.str] traffic_type: values from List Traffic Types
        :param pulumi.Input[builtins.str] type: enum: `app_categories`, `apps`, `custom`, `urls`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] urls: When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        pulumi.set(__self__, "org_id", org_id)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_subcategories is not None:
            pulumi.set(__self__, "app_subcategories", app_subcategories)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if client_limit_down is not None:
            pulumi.set(__self__, "client_limit_down", client_limit_down)
        if client_limit_up is not None:
            pulumi.set(__self__, "client_limit_up", client_limit_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if failover_policy is not None:
            pulumi.set(__self__, "failover_policy", failover_policy)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_limit_down is not None:
            pulumi.set(__self__, "service_limit_down", service_limit_down)
        if service_limit_up is not None:
            pulumi.set(__self__, "service_limit_up", service_limit_up)
        if sle_enabled is not None:
            pulumi.set(__self__, "sle_enabled", sle_enabled)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if ssr_relaxed_tcp_state_enforcement is not None:
            pulumi.set(__self__, "ssr_relaxed_tcp_state_enforcement", ssr_relaxed_tcp_state_enforcement)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appSubcategories")
    def app_subcategories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        """
        return pulumi.get(self, "app_subcategories")

    @app_subcategories.setter
    def app_subcategories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_subcategories", value)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
        /insight/top_app_by-bytes?wired=true
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter(name="clientLimitDown")
    def client_limit_down(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_down")

    @client_limit_down.setter
    def client_limit_down(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "client_limit_down", value)

    @property
    @pulumi.getter(name="clientLimitUp")
    def client_limit_up(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_up")

    @client_limit_up.setter
    def client_limit_up(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "client_limit_up", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="failoverPolicy")
    def failover_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enum: `non_revertible`, `none`, `revertible`
        """
        return pulumi.get(self, "failover_policy")

    @failover_policy.setter
    def failover_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "failover_policy", value)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        If `type`==`custom`, web filtering
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_jitter")

    @max_jitter.setter
    def max_jitter(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_jitter", value)

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_latency")

    @max_latency.setter
    def max_latency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_latency", value)

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_loss")

    @max_loss.setter
    def max_loss(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_loss", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceLimitDown")
    def service_limit_down(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_down")

    @service_limit_down.setter
    def service_limit_down(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "service_limit_down", value)

    @property
    @pulumi.getter(name="serviceLimitUp")
    def service_limit_up(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_up")

    @service_limit_up.setter
    def service_limit_up(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "service_limit_up", value)

    @property
    @pulumi.getter(name="sleEnabled")
    def sle_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable measure SLE
        """
        return pulumi.get(self, "sle_enabled")

    @sle_enabled.setter
    def sle_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sle_enabled", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]]:
        """
        When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]]):
        pulumi.set(self, "specs", value)

    @property
    @pulumi.getter(name="ssrRelaxedTcpStateEnforcement")
    def ssr_relaxed_tcp_state_enforcement(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ssr_relaxed_tcp_state_enforcement")

    @ssr_relaxed_tcp_state_enforcement.setter
    def ssr_relaxed_tcp_state_enforcement(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssr_relaxed_tcp_state_enforcement", value)

    @property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        """
        return pulumi.get(self, "traffic_class")

    @traffic_class.setter
    def traffic_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_class", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        values from List Traffic Types
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enum: `app_categories`, `apps`, `custom`, `urls`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "urls", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_subcategories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 client_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dscp: Optional[pulumi.Input[builtins.str]] = None,
                 failover_policy: Optional[pulumi.Input[builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_jitter: Optional[pulumi.Input[builtins.str]] = None,
                 max_latency: Optional[pulumi.Input[builtins.str]] = None,
                 max_loss: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 service_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 sle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]] = None,
                 ssr_relaxed_tcp_state_enforcement: Optional[pulumi.Input[builtins.bool]] = None,
                 traffic_class: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addresses: If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_categories: When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_subcategories: When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] apps: When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
               /insight/top_app_by-bytes?wired=true
        :param pulumi.Input[builtins.int] client_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] client_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.str] failover_policy: enum: `non_revertible`, `none`, `revertible`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] hostnames: If `type`==`custom`, web filtering
        :param pulumi.Input[builtins.int] service_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] service_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.bool] sle_enabled: Whether to enable measure SLE
        :param pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]] specs: When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        :param pulumi.Input[builtins.str] traffic_class: when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        :param pulumi.Input[builtins.str] traffic_type: values from List Traffic Types
        :param pulumi.Input[builtins.str] type: enum: `app_categories`, `apps`, `custom`, `urls`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] urls: When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if app_categories is not None:
            pulumi.set(__self__, "app_categories", app_categories)
        if app_subcategories is not None:
            pulumi.set(__self__, "app_subcategories", app_subcategories)
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if client_limit_down is not None:
            pulumi.set(__self__, "client_limit_down", client_limit_down)
        if client_limit_up is not None:
            pulumi.set(__self__, "client_limit_up", client_limit_up)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if failover_policy is not None:
            pulumi.set(__self__, "failover_policy", failover_policy)
        if hostnames is not None:
            pulumi.set(__self__, "hostnames", hostnames)
        if max_jitter is not None:
            pulumi.set(__self__, "max_jitter", max_jitter)
        if max_latency is not None:
            pulumi.set(__self__, "max_latency", max_latency)
        if max_loss is not None:
            pulumi.set(__self__, "max_loss", max_loss)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if service_limit_down is not None:
            pulumi.set(__self__, "service_limit_down", service_limit_down)
        if service_limit_up is not None:
            pulumi.set(__self__, "service_limit_up", service_limit_up)
        if sle_enabled is not None:
            pulumi.set(__self__, "sle_enabled", sle_enabled)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if ssr_relaxed_tcp_state_enforcement is not None:
            pulumi.set(__self__, "ssr_relaxed_tcp_state_enforcement", ssr_relaxed_tcp_state_enforcement)
        if traffic_class is not None:
            pulumi.set(__self__, "traffic_class", traffic_class)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        """
        return pulumi.get(self, "app_categories")

    @app_categories.setter
    def app_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_categories", value)

    @property
    @pulumi.getter(name="appSubcategories")
    def app_subcategories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        """
        return pulumi.get(self, "app_subcategories")

    @app_subcategories.setter
    def app_subcategories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "app_subcategories", value)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
        /insight/top_app_by-bytes?wired=true
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter(name="clientLimitDown")
    def client_limit_down(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_down")

    @client_limit_down.setter
    def client_limit_down(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "client_limit_down", value)

    @property
    @pulumi.getter(name="clientLimitUp")
    def client_limit_up(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_up")

    @client_limit_up.setter
    def client_limit_up(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "client_limit_up", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="failoverPolicy")
    def failover_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enum: `non_revertible`, `none`, `revertible`
        """
        return pulumi.get(self, "failover_policy")

    @failover_policy.setter
    def failover_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "failover_policy", value)

    @property
    @pulumi.getter
    def hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        If `type`==`custom`, web filtering
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_jitter")

    @max_jitter.setter
    def max_jitter(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_jitter", value)

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_latency")

    @max_latency.setter
    def max_latency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_latency", value)

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "max_loss")

    @max_loss.setter
    def max_loss(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_loss", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="serviceLimitDown")
    def service_limit_down(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_down")

    @service_limit_down.setter
    def service_limit_down(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "service_limit_down", value)

    @property
    @pulumi.getter(name="serviceLimitUp")
    def service_limit_up(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_up")

    @service_limit_up.setter
    def service_limit_up(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "service_limit_up", value)

    @property
    @pulumi.getter(name="sleEnabled")
    def sle_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether to enable measure SLE
        """
        return pulumi.get(self, "sle_enabled")

    @sle_enabled.setter
    def sle_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sle_enabled", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]]:
        """
        When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceSpecArgs']]]]):
        pulumi.set(self, "specs", value)

    @property
    @pulumi.getter(name="ssrRelaxedTcpStateEnforcement")
    def ssr_relaxed_tcp_state_enforcement(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "ssr_relaxed_tcp_state_enforcement")

    @ssr_relaxed_tcp_state_enforcement.setter
    def ssr_relaxed_tcp_state_enforcement(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssr_relaxed_tcp_state_enforcement", value)

    @property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        """
        return pulumi.get(self, "traffic_class")

    @traffic_class.setter
    def traffic_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_class", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        values from List Traffic Types
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        enum: `app_categories`, `apps`, `custom`, `urls`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "urls", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_subcategories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 client_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dscp: Optional[pulumi.Input[builtins.str]] = None,
                 failover_policy: Optional[pulumi.Input[builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_jitter: Optional[pulumi.Input[builtins.str]] = None,
                 max_latency: Optional[pulumi.Input[builtins.str]] = None,
                 max_loss: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 service_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 sle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceSpecArgs', 'ServiceSpecArgsDict']]]]] = None,
                 ssr_relaxed_tcp_state_enforcement: Optional[pulumi.Input[builtins.bool]] = None,
                 traffic_class: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        This resource manages WAN Assurance Services (Applications).

        A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
        * the Service Policies (`mist_org_servicepolicy.services`)
        * the Gateway configuration (`mist_device_gateway.service_policies.services`)
        * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
        * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)

        ## Import

        Using `pulumi import`, import `mist_org_service` with:

        Org Service can be imported by specifying the org_id and the service_id

        ```sh
        $ pulumi import junipermist:org/service:Service service_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addresses: If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_categories: When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_subcategories: When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] apps: When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
               /insight/top_app_by-bytes?wired=true
        :param pulumi.Input[builtins.int] client_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] client_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.str] failover_policy: enum: `non_revertible`, `none`, `revertible`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] hostnames: If `type`==`custom`, web filtering
        :param pulumi.Input[builtins.int] service_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] service_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.bool] sle_enabled: Whether to enable measure SLE
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceSpecArgs', 'ServiceSpecArgsDict']]]] specs: When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        :param pulumi.Input[builtins.str] traffic_class: when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        :param pulumi.Input[builtins.str] traffic_type: values from List Traffic Types
        :param pulumi.Input[builtins.str] type: enum: `app_categories`, `apps`, `custom`, `urls`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] urls: When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages WAN Assurance Services (Applications).

        A Service is used to define a Custom Application that can be used in the `service_policies`. These Services can be referenced by their name in
        * the Service Policies (`mist_org_servicepolicy.services`)
        * the Gateway configuration (`mist_device_gateway.service_policies.services`)
        * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
        * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)

        ## Import

        Using `pulumi import`, import `mist_org_service` with:

        Org Service can be imported by specifying the org_id and the service_id

        ```sh
        $ pulumi import junipermist:org/service:Service service_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 app_subcategories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 client_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 client_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dscp: Optional[pulumi.Input[builtins.str]] = None,
                 failover_policy: Optional[pulumi.Input[builtins.str]] = None,
                 hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 max_jitter: Optional[pulumi.Input[builtins.str]] = None,
                 max_latency: Optional[pulumi.Input[builtins.str]] = None,
                 max_loss: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 org_id: Optional[pulumi.Input[builtins.str]] = None,
                 service_limit_down: Optional[pulumi.Input[builtins.int]] = None,
                 service_limit_up: Optional[pulumi.Input[builtins.int]] = None,
                 sle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceSpecArgs', 'ServiceSpecArgsDict']]]]] = None,
                 ssr_relaxed_tcp_state_enforcement: Optional[pulumi.Input[builtins.bool]] = None,
                 traffic_class: Optional[pulumi.Input[builtins.str]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["addresses"] = addresses
            __props__.__dict__["app_categories"] = app_categories
            __props__.__dict__["app_subcategories"] = app_subcategories
            __props__.__dict__["apps"] = apps
            __props__.__dict__["client_limit_down"] = client_limit_down
            __props__.__dict__["client_limit_up"] = client_limit_up
            __props__.__dict__["description"] = description
            __props__.__dict__["dscp"] = dscp
            __props__.__dict__["failover_policy"] = failover_policy
            __props__.__dict__["hostnames"] = hostnames
            __props__.__dict__["max_jitter"] = max_jitter
            __props__.__dict__["max_latency"] = max_latency
            __props__.__dict__["max_loss"] = max_loss
            __props__.__dict__["name"] = name
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["service_limit_down"] = service_limit_down
            __props__.__dict__["service_limit_up"] = service_limit_up
            __props__.__dict__["sle_enabled"] = sle_enabled
            __props__.__dict__["specs"] = specs
            __props__.__dict__["ssr_relaxed_tcp_state_enforcement"] = ssr_relaxed_tcp_state_enforcement
            __props__.__dict__["traffic_class"] = traffic_class
            __props__.__dict__["traffic_type"] = traffic_type
            __props__.__dict__["type"] = type
            __props__.__dict__["urls"] = urls
        super(Service, __self__).__init__(
            'junipermist:org/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            app_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            app_subcategories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            client_limit_down: Optional[pulumi.Input[builtins.int]] = None,
            client_limit_up: Optional[pulumi.Input[builtins.int]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dscp: Optional[pulumi.Input[builtins.str]] = None,
            failover_policy: Optional[pulumi.Input[builtins.str]] = None,
            hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            max_jitter: Optional[pulumi.Input[builtins.str]] = None,
            max_latency: Optional[pulumi.Input[builtins.str]] = None,
            max_loss: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            org_id: Optional[pulumi.Input[builtins.str]] = None,
            service_limit_down: Optional[pulumi.Input[builtins.int]] = None,
            service_limit_up: Optional[pulumi.Input[builtins.int]] = None,
            sle_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            specs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceSpecArgs', 'ServiceSpecArgsDict']]]]] = None,
            ssr_relaxed_tcp_state_enforcement: Optional[pulumi.Input[builtins.bool]] = None,
            traffic_class: Optional[pulumi.Input[builtins.str]] = None,
            traffic_type: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] addresses: If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_categories: When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] app_subcategories: When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] apps: When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
               /insight/top_app_by-bytes?wired=true
        :param pulumi.Input[builtins.int] client_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] client_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.str] failover_policy: enum: `non_revertible`, `none`, `revertible`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] hostnames: If `type`==`custom`, web filtering
        :param pulumi.Input[builtins.int] service_limit_down: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.int] service_limit_up: 0 means unlimited, value from 0 to 107374182
        :param pulumi.Input[builtins.bool] sle_enabled: Whether to enable measure SLE
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceSpecArgs', 'ServiceSpecArgsDict']]]] specs: When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        :param pulumi.Input[builtins.str] traffic_class: when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        :param pulumi.Input[builtins.str] traffic_type: values from List Traffic Types
        :param pulumi.Input[builtins.str] type: enum: `app_categories`, `apps`, `custom`, `urls`
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] urls: When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["addresses"] = addresses
        __props__.__dict__["app_categories"] = app_categories
        __props__.__dict__["app_subcategories"] = app_subcategories
        __props__.__dict__["apps"] = apps
        __props__.__dict__["client_limit_down"] = client_limit_down
        __props__.__dict__["client_limit_up"] = client_limit_up
        __props__.__dict__["description"] = description
        __props__.__dict__["dscp"] = dscp
        __props__.__dict__["failover_policy"] = failover_policy
        __props__.__dict__["hostnames"] = hostnames
        __props__.__dict__["max_jitter"] = max_jitter
        __props__.__dict__["max_latency"] = max_latency
        __props__.__dict__["max_loss"] = max_loss
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["service_limit_down"] = service_limit_down
        __props__.__dict__["service_limit_up"] = service_limit_up
        __props__.__dict__["sle_enabled"] = sle_enabled
        __props__.__dict__["specs"] = specs
        __props__.__dict__["ssr_relaxed_tcp_state_enforcement"] = ssr_relaxed_tcp_state_enforcement
        __props__.__dict__["traffic_class"] = traffic_class
        __props__.__dict__["traffic_type"] = traffic_type
        __props__.__dict__["type"] = type
        __props__.__dict__["urls"] = urls
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def addresses(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        If `type`==`custom`, ip subnets (e.g. 10.0.0.0/8)
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="appCategories")
    def app_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Category Definitions
        """
        return pulumi.get(self, "app_categories")

    @property
    @pulumi.getter(name="appSubcategories")
    def app_subcategories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        When `type`==`app_categories`, list of application categories are available through List App Sub Category Definitions
        """
        return pulumi.get(self, "app_subcategories")

    @property
    @pulumi.getter
    def apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        When `type`==`apps`, list of applications are available through: * List Applications * List Gateway Applications *
        /insight/top_app_by-bytes?wired=true
        """
        return pulumi.get(self, "apps")

    @property
    @pulumi.getter(name="clientLimitDown")
    def client_limit_down(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_down")

    @property
    @pulumi.getter(name="clientLimitUp")
    def client_limit_up(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "client_limit_up")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dscp(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter(name="failoverPolicy")
    def failover_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        enum: `non_revertible`, `none`, `revertible`
        """
        return pulumi.get(self, "failover_policy")

    @property
    @pulumi.getter
    def hostnames(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        If `type`==`custom`, web filtering
        """
        return pulumi.get(self, "hostnames")

    @property
    @pulumi.getter(name="maxJitter")
    def max_jitter(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "max_jitter")

    @property
    @pulumi.getter(name="maxLatency")
    def max_latency(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "max_latency")

    @property
    @pulumi.getter(name="maxLoss")
    def max_loss(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "max_loss")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="serviceLimitDown")
    def service_limit_down(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_down")

    @property
    @pulumi.getter(name="serviceLimitUp")
    def service_limit_up(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        0 means unlimited, value from 0 to 107374182
        """
        return pulumi.get(self, "service_limit_up")

    @property
    @pulumi.getter(name="sleEnabled")
    def sle_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Whether to enable measure SLE
        """
        return pulumi.get(self, "sle_enabled")

    @property
    @pulumi.getter
    def specs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceSpec']]]:
        """
        When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
        """
        return pulumi.get(self, "specs")

    @property
    @pulumi.getter(name="ssrRelaxedTcpStateEnforcement")
    def ssr_relaxed_tcp_state_enforcement(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "ssr_relaxed_tcp_state_enforcement")

    @property
    @pulumi.getter(name="trafficClass")
    def traffic_class(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        when `traffic_type`==`custom`. enum: `best_effort`, `high`, `low`, `medium`
        """
        return pulumi.get(self, "traffic_class")

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> pulumi.Output[builtins.str]:
        """
        values from List Traffic Types
        """
        return pulumi.get(self, "traffic_type")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        enum: `app_categories`, `apps`, `custom`, `urls`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        When `type`==`urls`, no need for spec as URL can encode the ports being used
        """
        return pulumi.get(self, "urls")

