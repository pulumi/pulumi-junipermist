# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInventoryResult',
    'AwaitableGetInventoryResult',
    'get_inventory',
    'get_inventory_output',
]

@pulumi.output_type
class GetInventoryResult:
    """
    A collection of values returned by getInventory.
    """
    def __init__(__self__, id=None, mac=None, model=None, org_id=None, org_inventories=None, serial=None, site_id=None, type=None, unassigned=None, vc=None, vc_mac=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mac and not isinstance(mac, str):
            raise TypeError("Expected argument 'mac' to be a str")
        pulumi.set(__self__, "mac", mac)
        if model and not isinstance(model, str):
            raise TypeError("Expected argument 'model' to be a str")
        pulumi.set(__self__, "model", model)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if org_inventories and not isinstance(org_inventories, list):
            raise TypeError("Expected argument 'org_inventories' to be a list")
        pulumi.set(__self__, "org_inventories", org_inventories)
        if serial and not isinstance(serial, str):
            raise TypeError("Expected argument 'serial' to be a str")
        pulumi.set(__self__, "serial", serial)
        if site_id and not isinstance(site_id, str):
            raise TypeError("Expected argument 'site_id' to be a str")
        pulumi.set(__self__, "site_id", site_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if unassigned and not isinstance(unassigned, bool):
            raise TypeError("Expected argument 'unassigned' to be a bool")
        pulumi.set(__self__, "unassigned", unassigned)
        if vc and not isinstance(vc, bool):
            raise TypeError("Expected argument 'vc' to be a bool")
        pulumi.set(__self__, "vc", vc)
        if vc_mac and not isinstance(vc_mac, str):
            raise TypeError("Expected argument 'vc_mac' to be a str")
        pulumi.set(__self__, "vc_mac", vc_mac)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def mac(self) -> Optional[_builtins.str]:
        """
        MAC address
        """
        return pulumi.get(self, "mac")

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[_builtins.str]:
        """
        Device model
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter(name="orgId")
    def org_id(self) -> _builtins.str:
        return pulumi.get(self, "org_id")

    @_builtins.property
    @pulumi.getter(name="orgInventories")
    def org_inventories(self) -> Sequence['outputs.GetInventoryOrgInventoryResult']:
        return pulumi.get(self, "org_inventories")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> Optional[_builtins.str]:
        """
        Device serial
        """
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[_builtins.str]:
        """
        Site id if assigned, null if not assigned
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        enum: `ap`, `gateway`, `switch`
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unassigned(self) -> Optional[_builtins.bool]:
        """
        To display Unassigned devices
        """
        return pulumi.get(self, "unassigned")

    @_builtins.property
    @pulumi.getter
    def vc(self) -> Optional[_builtins.bool]:
        """
        To display Virtual Chassis members
        """
        return pulumi.get(self, "vc")

    @_builtins.property
    @pulumi.getter(name="vcMac")
    def vc_mac(self) -> Optional[_builtins.str]:
        """
        Virtual Chassis MAC Address
        """
        return pulumi.get(self, "vc_mac")


class AwaitableGetInventoryResult(GetInventoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInventoryResult(
            id=self.id,
            mac=self.mac,
            model=self.model,
            org_id=self.org_id,
            org_inventories=self.org_inventories,
            serial=self.serial,
            site_id=self.site_id,
            type=self.type,
            unassigned=self.unassigned,
            vc=self.vc,
            vc_mac=self.vc_mac)


def get_inventory(mac: Optional[_builtins.str] = None,
                  model: Optional[_builtins.str] = None,
                  org_id: Optional[_builtins.str] = None,
                  serial: Optional[_builtins.str] = None,
                  site_id: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  unassigned: Optional[_builtins.bool] = None,
                  vc: Optional[_builtins.bool] = None,
                  vc_mac: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInventoryResult:
    """
    This data source provides the list of Devices in the Org inventory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    inventory = junipermist.org.get_inventory(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        mac="485a0d000000",
        model="EX4100-F-12P",
        serial="F00000000000",
        unassigned=False,
        vc=True,
        vc_mac="485a0d000001",
        site_id="4a422ae5-7ca0-4599-87a3-8e49aa63685f")
    ```


    :param _builtins.str mac: MAC address
    :param _builtins.str model: Device model
    :param _builtins.str serial: Device serial
    :param _builtins.str site_id: Site id if assigned, null if not assigned
    :param _builtins.str type: enum: `ap`, `gateway`, `switch`
    :param _builtins.bool unassigned: To display Unassigned devices
    :param _builtins.bool vc: To display Virtual Chassis members
    :param _builtins.str vc_mac: Virtual Chassis MAC Address
    """
    __args__ = dict()
    __args__['mac'] = mac
    __args__['model'] = model
    __args__['orgId'] = org_id
    __args__['serial'] = serial
    __args__['siteId'] = site_id
    __args__['type'] = type
    __args__['unassigned'] = unassigned
    __args__['vc'] = vc
    __args__['vcMac'] = vc_mac
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('junipermist:org/getInventory:getInventory', __args__, opts=opts, typ=GetInventoryResult).value

    return AwaitableGetInventoryResult(
        id=pulumi.get(__ret__, 'id'),
        mac=pulumi.get(__ret__, 'mac'),
        model=pulumi.get(__ret__, 'model'),
        org_id=pulumi.get(__ret__, 'org_id'),
        org_inventories=pulumi.get(__ret__, 'org_inventories'),
        serial=pulumi.get(__ret__, 'serial'),
        site_id=pulumi.get(__ret__, 'site_id'),
        type=pulumi.get(__ret__, 'type'),
        unassigned=pulumi.get(__ret__, 'unassigned'),
        vc=pulumi.get(__ret__, 'vc'),
        vc_mac=pulumi.get(__ret__, 'vc_mac'))
def get_inventory_output(mac: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         model: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         org_id: Optional[pulumi.Input[_builtins.str]] = None,
                         serial: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         site_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         unassigned: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         vc: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                         vc_mac: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInventoryResult]:
    """
    This data source provides the list of Devices in the Org inventory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    inventory = junipermist.org.get_inventory(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        mac="485a0d000000",
        model="EX4100-F-12P",
        serial="F00000000000",
        unassigned=False,
        vc=True,
        vc_mac="485a0d000001",
        site_id="4a422ae5-7ca0-4599-87a3-8e49aa63685f")
    ```


    :param _builtins.str mac: MAC address
    :param _builtins.str model: Device model
    :param _builtins.str serial: Device serial
    :param _builtins.str site_id: Site id if assigned, null if not assigned
    :param _builtins.str type: enum: `ap`, `gateway`, `switch`
    :param _builtins.bool unassigned: To display Unassigned devices
    :param _builtins.bool vc: To display Virtual Chassis members
    :param _builtins.str vc_mac: Virtual Chassis MAC Address
    """
    __args__ = dict()
    __args__['mac'] = mac
    __args__['model'] = model
    __args__['orgId'] = org_id
    __args__['serial'] = serial
    __args__['siteId'] = site_id
    __args__['type'] = type
    __args__['unassigned'] = unassigned
    __args__['vc'] = vc
    __args__['vcMac'] = vc_mac
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('junipermist:org/getInventory:getInventory', __args__, opts=opts, typ=GetInventoryResult)
    return __ret__.apply(lambda __response__: GetInventoryResult(
        id=pulumi.get(__response__, 'id'),
        mac=pulumi.get(__response__, 'mac'),
        model=pulumi.get(__response__, 'model'),
        org_id=pulumi.get(__response__, 'org_id'),
        org_inventories=pulumi.get(__response__, 'org_inventories'),
        serial=pulumi.get(__response__, 'serial'),
        site_id=pulumi.get(__response__, 'site_id'),
        type=pulumi.get(__response__, 'type'),
        unassigned=pulumi.get(__response__, 'unassigned'),
        vc=pulumi.get(__response__, 'vc'),
        vc_mac=pulumi.get(__response__, 'vc_mac')))
