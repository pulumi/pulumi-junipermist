# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmtemplateArgs', 'Alarmtemplate']

@pulumi.input_type
class AlarmtemplateArgs:
    def __init__(__self__, *,
                 delivery: pulumi.Input['AlarmtemplateDeliveryArgs'],
                 org_id: pulumi.Input[str],
                 rules: pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Alarmtemplate resource.
        :param pulumi.Input['AlarmtemplateDeliveryArgs'] delivery: Delivery object to configure the alarm delivery
        :param pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]] rules: Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        :param pulumi.Input[str] name: Some string to name the alarm template
        """
        pulumi.set(__self__, "delivery", delivery)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "rules", rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def delivery(self) -> pulumi.Input['AlarmtemplateDeliveryArgs']:
        """
        Delivery object to configure the alarm delivery
        """
        return pulumi.get(self, "delivery")

    @delivery.setter
    def delivery(self, value: pulumi.Input['AlarmtemplateDeliveryArgs']):
        pulumi.set(self, "delivery", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]]:
        """
        Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Some string to name the alarm template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AlarmtemplateState:
    def __init__(__self__, *,
                 delivery: Optional[pulumi.Input['AlarmtemplateDeliveryArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]]] = None):
        """
        Input properties used for looking up and filtering Alarmtemplate resources.
        :param pulumi.Input['AlarmtemplateDeliveryArgs'] delivery: Delivery object to configure the alarm delivery
        :param pulumi.Input[str] name: Some string to name the alarm template
        :param pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]] rules: Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        if delivery is not None:
            pulumi.set(__self__, "delivery", delivery)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def delivery(self) -> Optional[pulumi.Input['AlarmtemplateDeliveryArgs']]:
        """
        Delivery object to configure the alarm delivery
        """
        return pulumi.get(self, "delivery")

    @delivery.setter
    def delivery(self, value: Optional[pulumi.Input['AlarmtemplateDeliveryArgs']]):
        pulumi.set(self, "delivery", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Some string to name the alarm template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]]]:
        """
        Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['AlarmtemplateRulesArgs']]]]):
        pulumi.set(self, "rules", value)


class Alarmtemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delivery: Optional[pulumi.Input[Union['AlarmtemplateDeliveryArgs', 'AlarmtemplateDeliveryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['AlarmtemplateRulesArgs', 'AlarmtemplateRulesArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource manages Alarm Templates.
        An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.

        Once created, the Alarm template must be assigned with the `alarmtemplate_id` attribute to one of the following
        	* the whole org with the `org.base` resource
        	* one or multiple sites with the `site.base` resource

        It is possible to use the `get_const_alarms` data source to get a list of the available alarms

        ## Import

        Using `pulumi import`, import `mist_org_alarmtemplate` with:

        Org RF Template can be imported by specifying the org_id and the alarmtemplate_id

        ```sh
        $ pulumi import junipermist:org/alarmtemplate:Alarmtemplate alarmtemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AlarmtemplateDeliveryArgs', 'AlarmtemplateDeliveryArgsDict']] delivery: Delivery object to configure the alarm delivery
        :param pulumi.Input[str] name: Some string to name the alarm template
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['AlarmtemplateRulesArgs', 'AlarmtemplateRulesArgsDict']]]] rules: Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmtemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages Alarm Templates.
        An Alarm Template is a set of Alarm Rules that could be applied to one or more sites (while each site can only pick one Alarm Template), or to the whole org.

        Once created, the Alarm template must be assigned with the `alarmtemplate_id` attribute to one of the following
        	* the whole org with the `org.base` resource
        	* one or multiple sites with the `site.base` resource

        It is possible to use the `get_const_alarms` data source to get a list of the available alarms

        ## Import

        Using `pulumi import`, import `mist_org_alarmtemplate` with:

        Org RF Template can be imported by specifying the org_id and the alarmtemplate_id

        ```sh
        $ pulumi import junipermist:org/alarmtemplate:Alarmtemplate alarmtemplate_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param AlarmtemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmtemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delivery: Optional[pulumi.Input[Union['AlarmtemplateDeliveryArgs', 'AlarmtemplateDeliveryArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['AlarmtemplateRulesArgs', 'AlarmtemplateRulesArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmtemplateArgs.__new__(AlarmtemplateArgs)

            if delivery is None and not opts.urn:
                raise TypeError("Missing required property 'delivery'")
            __props__.__dict__["delivery"] = delivery
            __props__.__dict__["name"] = name
            if org_id is None and not opts.urn:
                raise TypeError("Missing required property 'org_id'")
            __props__.__dict__["org_id"] = org_id
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
        super(Alarmtemplate, __self__).__init__(
            'junipermist:org/alarmtemplate:Alarmtemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delivery: Optional[pulumi.Input[Union['AlarmtemplateDeliveryArgs', 'AlarmtemplateDeliveryArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['AlarmtemplateRulesArgs', 'AlarmtemplateRulesArgsDict']]]]] = None) -> 'Alarmtemplate':
        """
        Get an existing Alarmtemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AlarmtemplateDeliveryArgs', 'AlarmtemplateDeliveryArgsDict']] delivery: Delivery object to configure the alarm delivery
        :param pulumi.Input[str] name: Some string to name the alarm template
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['AlarmtemplateRulesArgs', 'AlarmtemplateRulesArgsDict']]]] rules: Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmtemplateState.__new__(_AlarmtemplateState)

        __props__.__dict__["delivery"] = delivery
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["rules"] = rules
        return Alarmtemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def delivery(self) -> pulumi.Output['outputs.AlarmtemplateDelivery']:
        """
        Delivery object to configure the alarm delivery
        """
        return pulumi.get(self, "delivery")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Some string to name the alarm template
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Mapping[str, 'outputs.AlarmtemplateRules']]:
        """
        Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `get_const_alarms` data source).
        """
        return pulumi.get(self, "rules")

