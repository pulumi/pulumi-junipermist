# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetWxtagsResult',
    'AwaitableGetWxtagsResult',
    'get_wxtags',
    'get_wxtags_output',
]

@pulumi.output_type
class GetWxtagsResult:
    """
    A collection of values returned by getWxtags.
    """
    def __init__(__self__, id=None, org_id=None, org_wxtags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if org_wxtags and not isinstance(org_wxtags, list):
            raise TypeError("Expected argument 'org_wxtags' to be a list")
        pulumi.set(__self__, "org_wxtags", org_wxtags)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="orgWxtags")
    def org_wxtags(self) -> Sequence['outputs.GetWxtagsOrgWxtagResult']:
        return pulumi.get(self, "org_wxtags")


class AwaitableGetWxtagsResult(GetWxtagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWxtagsResult(
            id=self.id,
            org_id=self.org_id,
            org_wxtags=self.org_wxtags)


def get_wxtags(org_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWxtagsResult:
    """
    This resource provides the list of Org WxLan tags (labels).A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    switch_stats = junipermist.device.get_switch_stats(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550")
    ```
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('junipermist:org/getWxtags:getWxtags', __args__, opts=opts, typ=GetWxtagsResult).value

    return AwaitableGetWxtagsResult(
        id=pulumi.get(__ret__, 'id'),
        org_id=pulumi.get(__ret__, 'org_id'),
        org_wxtags=pulumi.get(__ret__, 'org_wxtags'))


@_utilities.lift_output_func(get_wxtags)
def get_wxtags_output(org_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWxtagsResult]:
    """
    This resource provides the list of Org WxLan tags (labels).A WxTag is a label or tag used in the mist system to classify and categorize applications, users, and resources for the purpose of creating policies and making network management decisions.They can be used   * within the WxRules to create filtering rules, or assign specific VLAN  * in the WLANs configuration to assign a WLAN to specific APs  * to identify unknown application used by Wi-Fi clients

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    switch_stats = junipermist.device.get_switch_stats(org_id="15fca2ac-b1a6-47cc-9953-cc6906281550")
    ```
    """
    ...
