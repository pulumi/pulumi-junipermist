# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EvpnTopologyArgs', 'EvpnTopology']

@pulumi.input_type
class EvpnTopologyArgs:
    def __init__(__self__, *,
                 site_id: pulumi.Input[str],
                 switches: pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]],
                 evpn_options: Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a EvpnTopology resource.
        :param pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]] switches: Property key can be the switch MAC Address
        :param pulumi.Input['EvpnTopologyEvpnOptionsArgs'] evpn_options: EVPN Options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_names: Property key is the pod number
        """
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "switches", switches)
        if evpn_options is not None:
            pulumi.set(__self__, "evpn_options", evpn_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_names is not None:
            pulumi.set(__self__, "pod_names", pod_names)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def switches(self) -> pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]]:
        """
        Property key can be the switch MAC Address
        """
        return pulumi.get(self, "switches")

    @switches.setter
    def switches(self, value: pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]]):
        pulumi.set(self, "switches", value)

    @property
    @pulumi.getter(name="evpnOptions")
    def evpn_options(self) -> Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']]:
        """
        EVPN Options
        """
        return pulumi.get(self, "evpn_options")

    @evpn_options.setter
    def evpn_options(self, value: Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']]):
        pulumi.set(self, "evpn_options", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podNames")
    def pod_names(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Property key is the pod number
        """
        return pulumi.get(self, "pod_names")

    @pod_names.setter
    def pod_names(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_names", value)


@pulumi.input_type
class _EvpnTopologyState:
    def __init__(__self__, *,
                 evpn_options: Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 pod_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 switches: Optional[pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]]] = None):
        """
        Input properties used for looking up and filtering EvpnTopology resources.
        :param pulumi.Input['EvpnTopologyEvpnOptionsArgs'] evpn_options: EVPN Options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_names: Property key is the pod number
        :param pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]] switches: Property key can be the switch MAC Address
        """
        if evpn_options is not None:
            pulumi.set(__self__, "evpn_options", evpn_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if pod_names is not None:
            pulumi.set(__self__, "pod_names", pod_names)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if switches is not None:
            pulumi.set(__self__, "switches", switches)

    @property
    @pulumi.getter(name="evpnOptions")
    def evpn_options(self) -> Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']]:
        """
        EVPN Options
        """
        return pulumi.get(self, "evpn_options")

    @evpn_options.setter
    def evpn_options(self, value: Optional[pulumi.Input['EvpnTopologyEvpnOptionsArgs']]):
        pulumi.set(self, "evpn_options", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="podNames")
    def pod_names(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Property key is the pod number
        """
        return pulumi.get(self, "pod_names")

    @pod_names.setter
    def pod_names(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pod_names", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def switches(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]]]:
        """
        Property key can be the switch MAC Address
        """
        return pulumi.get(self, "switches")

    @switches.setter
    def switches(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EvpnTopologySwitchesArgs']]]]):
        pulumi.set(self, "switches", value)


class EvpnTopology(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 evpn_options: Optional[pulumi.Input[Union['EvpnTopologyEvpnOptionsArgs', 'EvpnTopologyEvpnOptionsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 switches: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['EvpnTopologySwitchesArgs', 'EvpnTopologySwitchesArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource manages the Site Evpn Topologys.
        EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.

        > To create or manage your EVPN Topology with the Mist Provider, please refer to the `How To - EVPN Topology` Guide.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mist as mist

        evpn_one = mist.index.SiteSiteEvpnTopology("evpn_one",
            site_id=terraform_test.id,
            name=evpn_one,
            evpn_options={
                routedAt: core,
                overlay: {
                    as: 65000,
                },
                coreAsBorder: True,
                autoLoopbackSubnet: 172.16.192.0/24,
                autoLoopbackSubnet6: fd33:ab00:2::/64,
                perVlanVgaV4Mac: False,
                underlay: {
                    asBase: 65001,
                    useIpv6: False,
                    subnet: 10.255.240.0/20,
                },
                autoRouterIdSubnet: 172.16.254.0/23,
            },
            switches=[
                {
                    mac: 020004000001,
                    role: core,
                },
                {
                    mac: 02000400002,
                    role: core,
                },
                {
                    mac: 02000400003,
                    role: distribution,
                },
                {
                    mac: 02000400004,
                    role: distribution,
                },
                {
                    mac: 02000400005,
                    role: access,
                },
                {
                    mac: 02000400006,
                    role: access,
                },
            ])
        ```

        ## Import

        Using `pulumi import`, import `mist_site_evpn_topology` with:

        EVPN Topology can be imported by specifying the site_id and the evpn_topology_id

        ```sh
        $ pulumi import junipermist:site/evpnTopology:EvpnTopology evpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EvpnTopologyEvpnOptionsArgs', 'EvpnTopologyEvpnOptionsArgsDict']] evpn_options: EVPN Options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_names: Property key is the pod number
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['EvpnTopologySwitchesArgs', 'EvpnTopologySwitchesArgsDict']]]] switches: Property key can be the switch MAC Address
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EvpnTopologyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Site Evpn Topologys.
        EVPN allows an alternative but more efficient LAN architecture utilizing VxLAN / MP-BGP to separate the control plane (MAC / IP Learning) from the forwarding plane.

        > To create or manage your EVPN Topology with the Mist Provider, please refer to the `How To - EVPN Topology` Guide.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mist as mist

        evpn_one = mist.index.SiteSiteEvpnTopology("evpn_one",
            site_id=terraform_test.id,
            name=evpn_one,
            evpn_options={
                routedAt: core,
                overlay: {
                    as: 65000,
                },
                coreAsBorder: True,
                autoLoopbackSubnet: 172.16.192.0/24,
                autoLoopbackSubnet6: fd33:ab00:2::/64,
                perVlanVgaV4Mac: False,
                underlay: {
                    asBase: 65001,
                    useIpv6: False,
                    subnet: 10.255.240.0/20,
                },
                autoRouterIdSubnet: 172.16.254.0/23,
            },
            switches=[
                {
                    mac: 020004000001,
                    role: core,
                },
                {
                    mac: 02000400002,
                    role: core,
                },
                {
                    mac: 02000400003,
                    role: distribution,
                },
                {
                    mac: 02000400004,
                    role: distribution,
                },
                {
                    mac: 02000400005,
                    role: access,
                },
                {
                    mac: 02000400006,
                    role: access,
                },
            ])
        ```

        ## Import

        Using `pulumi import`, import `mist_site_evpn_topology` with:

        EVPN Topology can be imported by specifying the site_id and the evpn_topology_id

        ```sh
        $ pulumi import junipermist:site/evpnTopology:EvpnTopology evpn_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
        ```

        :param str resource_name: The name of the resource.
        :param EvpnTopologyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnTopologyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 evpn_options: Optional[pulumi.Input[Union['EvpnTopologyEvpnOptionsArgs', 'EvpnTopologyEvpnOptionsArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 switches: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['EvpnTopologySwitchesArgs', 'EvpnTopologySwitchesArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnTopologyArgs.__new__(EvpnTopologyArgs)

            __props__.__dict__["evpn_options"] = evpn_options
            __props__.__dict__["name"] = name
            __props__.__dict__["pod_names"] = pod_names
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            if switches is None and not opts.urn:
                raise TypeError("Missing required property 'switches'")
            __props__.__dict__["switches"] = switches
            __props__.__dict__["org_id"] = None
        super(EvpnTopology, __self__).__init__(
            'junipermist:site/evpnTopology:EvpnTopology',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            evpn_options: Optional[pulumi.Input[Union['EvpnTopologyEvpnOptionsArgs', 'EvpnTopologyEvpnOptionsArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            pod_names: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            switches: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['EvpnTopologySwitchesArgs', 'EvpnTopologySwitchesArgsDict']]]]] = None) -> 'EvpnTopology':
        """
        Get an existing EvpnTopology resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['EvpnTopologyEvpnOptionsArgs', 'EvpnTopologyEvpnOptionsArgsDict']] evpn_options: EVPN Options
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pod_names: Property key is the pod number
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['EvpnTopologySwitchesArgs', 'EvpnTopologySwitchesArgsDict']]]] switches: Property key can be the switch MAC Address
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnTopologyState.__new__(_EvpnTopologyState)

        __props__.__dict__["evpn_options"] = evpn_options
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["pod_names"] = pod_names
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["switches"] = switches
        return EvpnTopology(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="evpnOptions")
    def evpn_options(self) -> pulumi.Output[Optional['outputs.EvpnTopologyEvpnOptions']]:
        """
        EVPN Options
        """
        return pulumi.get(self, "evpn_options")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="podNames")
    def pod_names(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Property key is the pod number
        """
        return pulumi.get(self, "pod_names")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def switches(self) -> pulumi.Output[Mapping[str, 'outputs.EvpnTopologySwitches']]:
        """
        Property key can be the switch MAC Address
        """
        return pulumi.get(self, "switches")

