# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'NetworktemplateAclPolicyArgs',
    'NetworktemplateAclPolicyArgsDict',
    'NetworktemplateAclPolicyActionArgs',
    'NetworktemplateAclPolicyActionArgsDict',
    'NetworktemplateAclTagsArgs',
    'NetworktemplateAclTagsArgsDict',
    'NetworktemplateAclTagsSpecArgs',
    'NetworktemplateAclTagsSpecArgsDict',
    'NetworktemplateDhcpSnoopingArgs',
    'NetworktemplateDhcpSnoopingArgsDict',
    'NetworktemplateExtraRoutes6Args',
    'NetworktemplateExtraRoutes6ArgsDict',
    'NetworktemplateExtraRoutes6NextQualifiedArgs',
    'NetworktemplateExtraRoutes6NextQualifiedArgsDict',
    'NetworktemplateExtraRoutesArgs',
    'NetworktemplateExtraRoutesArgsDict',
    'NetworktemplateExtraRoutesNextQualifiedArgs',
    'NetworktemplateExtraRoutesNextQualifiedArgsDict',
    'NetworktemplateMistNacArgs',
    'NetworktemplateMistNacArgsDict',
    'NetworktemplateNetworksArgs',
    'NetworktemplateNetworksArgsDict',
    'NetworktemplateOspfAreasArgs',
    'NetworktemplateOspfAreasArgsDict',
    'NetworktemplateOspfAreasOspfNetworksArgs',
    'NetworktemplateOspfAreasOspfNetworksArgsDict',
    'NetworktemplatePortMirroringArgs',
    'NetworktemplatePortMirroringArgsDict',
    'NetworktemplatePortUsagesArgs',
    'NetworktemplatePortUsagesArgsDict',
    'NetworktemplatePortUsagesRuleArgs',
    'NetworktemplatePortUsagesRuleArgsDict',
    'NetworktemplatePortUsagesStormControlArgs',
    'NetworktemplatePortUsagesStormControlArgsDict',
    'NetworktemplateRadiusConfigArgs',
    'NetworktemplateRadiusConfigArgsDict',
    'NetworktemplateRadiusConfigAcctServerArgs',
    'NetworktemplateRadiusConfigAcctServerArgsDict',
    'NetworktemplateRadiusConfigAuthServerArgs',
    'NetworktemplateRadiusConfigAuthServerArgsDict',
    'NetworktemplateRemoteSyslogArgs',
    'NetworktemplateRemoteSyslogArgsDict',
    'NetworktemplateRemoteSyslogArchiveArgs',
    'NetworktemplateRemoteSyslogArchiveArgsDict',
    'NetworktemplateRemoteSyslogConsoleArgs',
    'NetworktemplateRemoteSyslogConsoleArgsDict',
    'NetworktemplateRemoteSyslogConsoleContentArgs',
    'NetworktemplateRemoteSyslogConsoleContentArgsDict',
    'NetworktemplateRemoteSyslogFileArgs',
    'NetworktemplateRemoteSyslogFileArgsDict',
    'NetworktemplateRemoteSyslogFileArchiveArgs',
    'NetworktemplateRemoteSyslogFileArchiveArgsDict',
    'NetworktemplateRemoteSyslogFileContentArgs',
    'NetworktemplateRemoteSyslogFileContentArgsDict',
    'NetworktemplateRemoteSyslogServerArgs',
    'NetworktemplateRemoteSyslogServerArgsDict',
    'NetworktemplateRemoteSyslogServerContentArgs',
    'NetworktemplateRemoteSyslogServerContentArgsDict',
    'NetworktemplateRemoteSyslogUserArgs',
    'NetworktemplateRemoteSyslogUserArgsDict',
    'NetworktemplateRemoteSyslogUserContentArgs',
    'NetworktemplateRemoteSyslogUserContentArgsDict',
    'NetworktemplateSnmpConfigArgs',
    'NetworktemplateSnmpConfigArgsDict',
    'NetworktemplateSnmpConfigClientListArgs',
    'NetworktemplateSnmpConfigClientListArgsDict',
    'NetworktemplateSnmpConfigTrapGroupArgs',
    'NetworktemplateSnmpConfigTrapGroupArgsDict',
    'NetworktemplateSnmpConfigV2cConfigArgs',
    'NetworktemplateSnmpConfigV2cConfigArgsDict',
    'NetworktemplateSnmpConfigV3ConfigArgs',
    'NetworktemplateSnmpConfigV3ConfigArgsDict',
    'NetworktemplateSnmpConfigV3ConfigNotifyArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyArgsDict',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterArgsDict',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs',
    'NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgsDict',
    'NetworktemplateSnmpConfigV3ConfigTargetAddressArgs',
    'NetworktemplateSnmpConfigV3ConfigTargetAddressArgsDict',
    'NetworktemplateSnmpConfigV3ConfigTargetParameterArgs',
    'NetworktemplateSnmpConfigV3ConfigTargetParameterArgsDict',
    'NetworktemplateSnmpConfigV3ConfigUsmArgs',
    'NetworktemplateSnmpConfigV3ConfigUsmArgsDict',
    'NetworktemplateSnmpConfigV3ConfigUsmUserArgs',
    'NetworktemplateSnmpConfigV3ConfigUsmUserArgsDict',
    'NetworktemplateSnmpConfigV3ConfigVacmArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmArgsDict',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessArgsDict',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgsDict',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgsDict',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs',
    'NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgsDict',
    'NetworktemplateSnmpConfigViewArgs',
    'NetworktemplateSnmpConfigViewArgsDict',
    'NetworktemplateSwitchMatchingArgs',
    'NetworktemplateSwitchMatchingArgsDict',
    'NetworktemplateSwitchMatchingRuleArgs',
    'NetworktemplateSwitchMatchingRuleArgsDict',
    'NetworktemplateSwitchMatchingRuleIpConfigArgs',
    'NetworktemplateSwitchMatchingRuleIpConfigArgsDict',
    'NetworktemplateSwitchMatchingRuleOobIpConfigArgs',
    'NetworktemplateSwitchMatchingRuleOobIpConfigArgsDict',
    'NetworktemplateSwitchMatchingRulePortConfigArgs',
    'NetworktemplateSwitchMatchingRulePortConfigArgsDict',
    'NetworktemplateSwitchMatchingRulePortMirroringArgs',
    'NetworktemplateSwitchMatchingRulePortMirroringArgsDict',
    'NetworktemplateSwitchMgmtArgs',
    'NetworktemplateSwitchMgmtArgsDict',
    'NetworktemplateSwitchMgmtLocalAccountsArgs',
    'NetworktemplateSwitchMgmtLocalAccountsArgsDict',
    'NetworktemplateSwitchMgmtProtectReArgs',
    'NetworktemplateSwitchMgmtProtectReArgsDict',
    'NetworktemplateSwitchMgmtProtectReCustomArgs',
    'NetworktemplateSwitchMgmtProtectReCustomArgsDict',
    'NetworktemplateSwitchMgmtTacacsArgs',
    'NetworktemplateSwitchMgmtTacacsArgsDict',
    'NetworktemplateSwitchMgmtTacacsAcctServerArgs',
    'NetworktemplateSwitchMgmtTacacsAcctServerArgsDict',
    'NetworktemplateSwitchMgmtTacacsTacplusServerArgs',
    'NetworktemplateSwitchMgmtTacacsTacplusServerArgsDict',
    'NetworktemplateUplinkPortConfigArgs',
    'NetworktemplateUplinkPortConfigArgsDict',
    'NetworktemplateVrfConfigArgs',
    'NetworktemplateVrfConfigArgsDict',
    'NetworktemplateVrfInstancesArgs',
    'NetworktemplateVrfInstancesArgsDict',
    'NetworktemplateVrfInstancesExtraRoutesArgs',
    'NetworktemplateVrfInstancesExtraRoutesArgsDict',
    'SettingAnalyticArgs',
    'SettingAnalyticArgsDict',
    'SettingAutoUpgradeArgs',
    'SettingAutoUpgradeArgsDict',
    'SettingBleConfigArgs',
    'SettingBleConfigArgsDict',
    'SettingConfigPushPolicyArgs',
    'SettingConfigPushPolicyArgsDict',
    'SettingConfigPushPolicyPushWindowArgs',
    'SettingConfigPushPolicyPushWindowArgsDict',
    'SettingConfigPushPolicyPushWindowHoursArgs',
    'SettingConfigPushPolicyPushWindowHoursArgsDict',
    'SettingCriticalUrlMonitoringArgs',
    'SettingCriticalUrlMonitoringArgsDict',
    'SettingCriticalUrlMonitoringMonitorArgs',
    'SettingCriticalUrlMonitoringMonitorArgsDict',
    'SettingEngagementArgs',
    'SettingEngagementArgsDict',
    'SettingEngagementDwellTagNamesArgs',
    'SettingEngagementDwellTagNamesArgsDict',
    'SettingEngagementDwellTagsArgs',
    'SettingEngagementDwellTagsArgsDict',
    'SettingEngagementHoursArgs',
    'SettingEngagementHoursArgsDict',
    'SettingGatewayMgmtArgs',
    'SettingGatewayMgmtArgsDict',
    'SettingGatewayMgmtAppProbingArgs',
    'SettingGatewayMgmtAppProbingArgsDict',
    'SettingGatewayMgmtAppProbingCustomAppArgs',
    'SettingGatewayMgmtAppProbingCustomAppArgsDict',
    'SettingGatewayMgmtAutoSignatureUpdateArgs',
    'SettingGatewayMgmtAutoSignatureUpdateArgsDict',
    'SettingGatewayMgmtProtectReArgs',
    'SettingGatewayMgmtProtectReArgsDict',
    'SettingGatewayMgmtProtectReCustomArgs',
    'SettingGatewayMgmtProtectReCustomArgsDict',
    'SettingLedArgs',
    'SettingLedArgsDict',
    'SettingOccupancyArgs',
    'SettingOccupancyArgsDict',
    'SettingProxyArgs',
    'SettingProxyArgsDict',
    'SettingRogueArgs',
    'SettingRogueArgsDict',
    'SettingRtsaArgs',
    'SettingRtsaArgsDict',
    'SettingSimpleAlertArgs',
    'SettingSimpleAlertArgsDict',
    'SettingSimpleAlertArpFailureArgs',
    'SettingSimpleAlertArpFailureArgsDict',
    'SettingSimpleAlertDhcpFailureArgs',
    'SettingSimpleAlertDhcpFailureArgsDict',
    'SettingSimpleAlertDnsFailureArgs',
    'SettingSimpleAlertDnsFailureArgsDict',
    'SettingSkyatpArgs',
    'SettingSkyatpArgsDict',
    'SettingSrxAppArgs',
    'SettingSrxAppArgsDict',
    'SettingSsrArgs',
    'SettingSsrArgsDict',
    'SettingSyntheticTestArgs',
    'SettingSyntheticTestArgsDict',
    'SettingSyntheticTestVlanArgs',
    'SettingSyntheticTestVlanArgsDict',
    'SettingSyntheticTestWanSpeedtestArgs',
    'SettingSyntheticTestWanSpeedtestArgsDict',
    'SettingUplinkPortConfigArgs',
    'SettingUplinkPortConfigArgsDict',
    'SettingVnaArgs',
    'SettingVnaArgsDict',
    'SettingVsInstanceArgs',
    'SettingVsInstanceArgsDict',
    'SettingWanVnaArgs',
    'SettingWanVnaArgsDict',
    'SettingWidsArgs',
    'SettingWidsArgsDict',
    'SettingWidsRepeatedAuthFailuresArgs',
    'SettingWidsRepeatedAuthFailuresArgsDict',
    'SettingWifiArgs',
    'SettingWifiArgsDict',
    'SettingWiredVnaArgs',
    'SettingWiredVnaArgsDict',
    'SettingZoneOccupancyAlertArgs',
    'SettingZoneOccupancyAlertArgsDict',
    'WlanAcctServerArgs',
    'WlanAcctServerArgsDict',
    'WlanAirwatchArgs',
    'WlanAirwatchArgsDict',
    'WlanAppLimitArgs',
    'WlanAppLimitArgsDict',
    'WlanAppQosArgs',
    'WlanAppQosArgsDict',
    'WlanAppQosAppsArgs',
    'WlanAppQosAppsArgsDict',
    'WlanAppQosOtherArgs',
    'WlanAppQosOtherArgsDict',
    'WlanAuthArgs',
    'WlanAuthArgsDict',
    'WlanAuthServerArgs',
    'WlanAuthServerArgsDict',
    'WlanBonjourArgs',
    'WlanBonjourArgsDict',
    'WlanBonjourServicesArgs',
    'WlanBonjourServicesArgsDict',
    'WlanCiscoCwaArgs',
    'WlanCiscoCwaArgsDict',
    'WlanCoaServerArgs',
    'WlanCoaServerArgsDict',
    'WlanDnsServerRewriteArgs',
    'WlanDnsServerRewriteArgsDict',
    'WlanDynamicPskArgs',
    'WlanDynamicPskArgsDict',
    'WlanDynamicVlanArgs',
    'WlanDynamicVlanArgsDict',
    'WlanHotspot20Args',
    'WlanHotspot20ArgsDict',
    'WlanInjectDhcpOption82Args',
    'WlanInjectDhcpOption82ArgsDict',
    'WlanMistNacArgs',
    'WlanMistNacArgsDict',
    'WlanPortalArgs',
    'WlanPortalArgsDict',
    'WlanPortalTemplatePortalTemplateArgs',
    'WlanPortalTemplatePortalTemplateArgsDict',
    'WlanPortalTemplatePortalTemplateLocalesArgs',
    'WlanPortalTemplatePortalTemplateLocalesArgsDict',
    'WlanQosArgs',
    'WlanQosArgsDict',
    'WlanRadsecArgs',
    'WlanRadsecArgsDict',
    'WlanRadsecServerArgs',
    'WlanRadsecServerArgsDict',
    'WlanScheduleArgs',
    'WlanScheduleArgsDict',
    'WlanScheduleHoursArgs',
    'WlanScheduleHoursArgsDict',
    'WxtagSpecArgs',
    'WxtagSpecArgsDict',
    'BaseLatlngArgs',
    'BaseLatlngArgsDict',
]

MYPY = False

if not MYPY:
    class NetworktemplateAclPolicyArgsDict(TypedDict):
        actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgsDict']]]]
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        name: NotRequired[pulumi.Input[str]]
        src_tags: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
elif False:
    NetworktemplateAclPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateAclPolicyArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]] actions: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_tags: - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
               - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_tags is not None:
            pulumi.set(__self__, "src_tags", src_tags)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclPolicyActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="srcTags")
    def src_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        - for GBP-based policy, all src_tags and dst_tags have to be gbp-based
        - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
        """
        return pulumi.get(self, "src_tags")

    @src_tags.setter
    def src_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_tags", value)


if not MYPY:
    class NetworktemplateAclPolicyActionArgsDict(TypedDict):
        dst_tag: pulumi.Input[str]
        action: NotRequired[pulumi.Input[str]]
        """
        enum: `allow`, `deny`
        """
elif False:
    NetworktemplateAclPolicyActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateAclPolicyActionArgs:
    def __init__(__self__, *,
                 dst_tag: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: enum: `allow`, `deny`
        """
        pulumi.set(__self__, "dst_tag", dst_tag)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter(name="dstTag")
    def dst_tag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_tag")

    @dst_tag.setter
    def dst_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_tag", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `allow`, `deny`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)


if not MYPY:
    class NetworktemplateAclTagsArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        enum: 
          * `any`: matching anything not identified
          * `dynamic_gbp`: from the gbp_tag received from RADIUS
          * `gbp_resource`: can only be used in `dst_tags`
          * `mac`
          * `network`
          * `radius_group`
          * `resource`: can only be used in `dst_tags`
          * `static_gbp`: applying gbp tag against matching conditions
          * `subnet`'
        """
        gbp_tag: NotRequired[pulumi.Input[int]]
        """
        required if
        - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
        - `type`==`gbp_resource`
        - `type`==`static_gbp` (applying gbp tag against matching conditions)
        """
        macs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        required if 
        - `type`==`mac`
        - `type`==`static_gbp` if from matching mac
        """
        network: NotRequired[pulumi.Input[str]]
        """
        if:
          * `type`==`mac` (optional. default is `any`)
          * `type`==`subnet` (optional. default is `any`)
          * `type`==`network`
          * `type`==`resource` (optional. default is `any`)
          * `type`==`static_gbp` if from matching network (vlan)'
        """
        radius_group: NotRequired[pulumi.Input[str]]
        """
        required if:
          * `type`==`radius_group`
          * `type`==`static_gbp`
        if from matching radius_group
        """
        specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgsDict']]]]
        """
        if `type`==`resource` or `type`==`gbp_resource`
        empty means unrestricted, i.e. any
        """
        subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        if 
        - `type`==`subnet` 
        - `type`==`resource` (optional. default is `any`)
        - `type`==`static_gbp` if from matching subnet
        """
elif False:
    NetworktemplateAclTagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateAclTagsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 gbp_tag: Optional[pulumi.Input[int]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 radius_group: Optional[pulumi.Input[str]] = None,
                 specs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] type: enum: 
                 * `any`: matching anything not identified
                 * `dynamic_gbp`: from the gbp_tag received from RADIUS
                 * `gbp_resource`: can only be used in `dst_tags`
                 * `mac`
                 * `network`
                 * `radius_group`
                 * `resource`: can only be used in `dst_tags`
                 * `static_gbp`: applying gbp tag against matching conditions
                 * `subnet`'
        :param pulumi.Input[int] gbp_tag: required if
               - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
               - `type`==`gbp_resource`
               - `type`==`static_gbp` (applying gbp tag against matching conditions)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] macs: required if 
               - `type`==`mac`
               - `type`==`static_gbp` if from matching mac
        :param pulumi.Input[str] network: if:
                 * `type`==`mac` (optional. default is `any`)
                 * `type`==`subnet` (optional. default is `any`)
                 * `type`==`network`
                 * `type`==`resource` (optional. default is `any`)
                 * `type`==`static_gbp` if from matching network (vlan)'
        :param pulumi.Input[str] radius_group: required if:
                 * `type`==`radius_group`
                 * `type`==`static_gbp`
               if from matching radius_group
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]] specs: if `type`==`resource` or `type`==`gbp_resource`
               empty means unrestricted, i.e. any
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: if 
               - `type`==`subnet` 
               - `type`==`resource` (optional. default is `any`)
               - `type`==`static_gbp` if from matching subnet
        """
        pulumi.set(__self__, "type", type)
        if gbp_tag is not None:
            pulumi.set(__self__, "gbp_tag", gbp_tag)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if radius_group is not None:
            pulumi.set(__self__, "radius_group", radius_group)
        if specs is not None:
            pulumi.set(__self__, "specs", specs)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        enum: 
          * `any`: matching anything not identified
          * `dynamic_gbp`: from the gbp_tag received from RADIUS
          * `gbp_resource`: can only be used in `dst_tags`
          * `mac`
          * `network`
          * `radius_group`
          * `resource`: can only be used in `dst_tags`
          * `static_gbp`: applying gbp tag against matching conditions
          * `subnet`'
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="gbpTag")
    def gbp_tag(self) -> Optional[pulumi.Input[int]]:
        """
        required if
        - `type`==`dynamic_gbp` (gbp_tag received from RADIUS)
        - `type`==`gbp_resource`
        - `type`==`static_gbp` (applying gbp tag against matching conditions)
        """
        return pulumi.get(self, "gbp_tag")

    @gbp_tag.setter
    def gbp_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gbp_tag", value)

    @property
    @pulumi.getter
    def macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        required if 
        - `type`==`mac`
        - `type`==`static_gbp` if from matching mac
        """
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "macs", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        if:
          * `type`==`mac` (optional. default is `any`)
          * `type`==`subnet` (optional. default is `any`)
          * `type`==`network`
          * `type`==`resource` (optional. default is `any`)
          * `type`==`static_gbp` if from matching network (vlan)'
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="radiusGroup")
    def radius_group(self) -> Optional[pulumi.Input[str]]:
        """
        required if:
          * `type`==`radius_group`
          * `type`==`static_gbp`
        if from matching radius_group
        """
        return pulumi.get(self, "radius_group")

    @radius_group.setter
    def radius_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "radius_group", value)

    @property
    @pulumi.getter
    def specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]]:
        """
        if `type`==`resource` or `type`==`gbp_resource`
        empty means unrestricted, i.e. any
        """
        return pulumi.get(self, "specs")

    @specs.setter
    def specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateAclTagsSpecArgs']]]]):
        pulumi.set(self, "specs", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if 
        - `type`==`subnet` 
        - `type`==`resource` (optional. default is `any`)
        - `type`==`static_gbp` if from matching subnet
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)


if not MYPY:
    class NetworktemplateAclTagsSpecArgsDict(TypedDict):
        port_range: NotRequired[pulumi.Input[str]]
        """
        matched dst port, "0" means any
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
elif False:
    NetworktemplateAclTagsSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateAclTagsSpecArgs:
    def __init__(__self__, *,
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port_range: matched dst port, "0" means any
        :param pulumi.Input[str] protocol: `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched dst port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        `tcp` / `udp` / `icmp` / `gre` / `any` / `:protocol_number`. `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class NetworktemplateDhcpSnoopingArgsDict(TypedDict):
        all_networks: NotRequired[pulumi.Input[bool]]
        enable_arp_spoof_check: NotRequired[pulumi.Input[bool]]
        """
        Enable for dynamic ARP inspection check
        """
        enable_ip_source_guard: NotRequired[pulumi.Input[bool]]
        """
        Enable for check for forging source IP address
        """
        enabled: NotRequired[pulumi.Input[bool]]
        networks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
elif False:
    NetworktemplateDhcpSnoopingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateDhcpSnoopingArgs:
    def __init__(__self__, *,
                 all_networks: Optional[pulumi.Input[bool]] = None,
                 enable_arp_spoof_check: Optional[pulumi.Input[bool]] = None,
                 enable_ip_source_guard: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enable_arp_spoof_check: Enable for dynamic ARP inspection check
        :param pulumi.Input[bool] enable_ip_source_guard: Enable for check for forging source IP address
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if enable_arp_spoof_check is not None:
            pulumi.set(__self__, "enable_arp_spoof_check", enable_arp_spoof_check)
        if enable_ip_source_guard is not None:
            pulumi.set(__self__, "enable_ip_source_guard", enable_ip_source_guard)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_networks")

    @all_networks.setter
    def all_networks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_networks", value)

    @property
    @pulumi.getter(name="enableArpSpoofCheck")
    def enable_arp_spoof_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable for dynamic ARP inspection check
        """
        return pulumi.get(self, "enable_arp_spoof_check")

    @enable_arp_spoof_check.setter
    def enable_arp_spoof_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_arp_spoof_check", value)

    @property
    @pulumi.getter(name="enableIpSourceGuard")
    def enable_ip_source_guard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable for check for forging source IP address
        """
        return pulumi.get(self, "enable_ip_source_guard")

    @enable_ip_source_guard.setter
    def enable_ip_source_guard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ip_source_guard", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if `all_networks`==`false`, list of network with DHCP snooping enabled
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


if not MYPY:
    class NetworktemplateExtraRoutes6ArgsDict(TypedDict):
        via: pulumi.Input[str]
        """
        next-hop IP Address
        """
        discard: NotRequired[pulumi.Input[bool]]
        """
        this takes precedence
        """
        metric: NotRequired[pulumi.Input[int]]
        next_qualified: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgsDict']]]]
        no_resolve: NotRequired[pulumi.Input[bool]]
        preference: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateExtraRoutes6ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateExtraRoutes6Args:
    def __init__(__self__, *,
                 via: pulumi.Input[str],
                 discard: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 next_qualified: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]] = None,
                 no_resolve: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] via: next-hop IP Address
        :param pulumi.Input[bool] discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter
    def discard(self) -> Optional[pulumi.Input[bool]]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @discard.setter
    def discard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discard", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]]:
        return pulumi.get(self, "next_qualified")

    @next_qualified.setter
    def next_qualified(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutes6NextQualifiedArgs']]]]):
        pulumi.set(self, "next_qualified", value)

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_resolve")

    @no_resolve.setter
    def no_resolve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_resolve", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class NetworktemplateExtraRoutes6NextQualifiedArgsDict(TypedDict):
        metric: NotRequired[pulumi.Input[int]]
        preference: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateExtraRoutes6NextQualifiedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateExtraRoutes6NextQualifiedArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class NetworktemplateExtraRoutesArgsDict(TypedDict):
        via: pulumi.Input[str]
        """
        next-hop IP Address
        """
        discard: NotRequired[pulumi.Input[bool]]
        """
        this takes precedence
        """
        metric: NotRequired[pulumi.Input[int]]
        next_qualified: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgsDict']]]]
        no_resolve: NotRequired[pulumi.Input[bool]]
        preference: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateExtraRoutesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str],
                 discard: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 next_qualified: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]] = None,
                 no_resolve: Optional[pulumi.Input[bool]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] via: next-hop IP Address
        :param pulumi.Input[bool] discard: this takes precedence
        """
        pulumi.set(__self__, "via", via)
        if discard is not None:
            pulumi.set(__self__, "discard", discard)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if next_qualified is not None:
            pulumi.set(__self__, "next_qualified", next_qualified)
        if no_resolve is not None:
            pulumi.set(__self__, "no_resolve", no_resolve)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        next-hop IP Address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)

    @property
    @pulumi.getter
    def discard(self) -> Optional[pulumi.Input[bool]]:
        """
        this takes precedence
        """
        return pulumi.get(self, "discard")

    @discard.setter
    def discard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "discard", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="nextQualified")
    def next_qualified(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]]:
        return pulumi.get(self, "next_qualified")

    @next_qualified.setter
    def next_qualified(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateExtraRoutesNextQualifiedArgs']]]]):
        pulumi.set(self, "next_qualified", value)

    @property
    @pulumi.getter(name="noResolve")
    def no_resolve(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_resolve")

    @no_resolve.setter
    def no_resolve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_resolve", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class NetworktemplateExtraRoutesNextQualifiedArgsDict(TypedDict):
        metric: NotRequired[pulumi.Input[int]]
        preference: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateExtraRoutesNextQualifiedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateExtraRoutesNextQualifiedArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 preference: Optional[pulumi.Input[int]] = None):
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)


if not MYPY:
    class NetworktemplateMistNacArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        network: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateMistNacArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateMistNacArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


if not MYPY:
    class NetworktemplateNetworksArgsDict(TypedDict):
        vlan_id: pulumi.Input[str]
        isolation: NotRequired[pulumi.Input[bool]]
        """
        whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
        NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        """
        isolation_vlan_id: NotRequired[pulumi.Input[str]]
        subnet: NotRequired[pulumi.Input[str]]
        """
        optional for pure switching, required when L3 / routing features are used
        """
elif False:
    NetworktemplateNetworksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateNetworksArgs:
    def __init__(__self__, *,
                 vlan_id: pulumi.Input[str],
                 isolation: Optional[pulumi.Input[bool]] = None,
                 isolation_vlan_id: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] isolation: whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
               NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        :param pulumi.Input[str] subnet: optional for pure switching, required when L3 / routing features are used
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if isolation is not None:
            pulumi.set(__self__, "isolation", isolation)
        if isolation_vlan_id is not None:
            pulumi.set(__self__, "isolation_vlan_id", isolation_vlan_id)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter
    def isolation(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to stop clients to talk to each other, default is false (when enabled, a unique isolation_vlan_id is required)
        NOTE: this features requires uplink device to also a be Juniper device and `inter_switch_link` to be set
        """
        return pulumi.get(self, "isolation")

    @isolation.setter
    def isolation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "isolation", value)

    @property
    @pulumi.getter(name="isolationVlanId")
    def isolation_vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "isolation_vlan_id")

    @isolation_vlan_id.setter
    def isolation_vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isolation_vlan_id", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        optional for pure switching, required when L3 / routing features are used
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


if not MYPY:
    class NetworktemplateOspfAreasArgsDict(TypedDict):
        ospf_networks: pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasOspfNetworksArgsDict']]]
        include_loopback: NotRequired[pulumi.Input[bool]]
        type: NotRequired[pulumi.Input[str]]
        """
        OSPF type. enum: `default`, `nssa`, `stub`
        """
elif False:
    NetworktemplateOspfAreasArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateOspfAreasArgs:
    def __init__(__self__, *,
                 ospf_networks: pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasOspfNetworksArgs']]],
                 include_loopback: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: OSPF type. enum: `default`, `nssa`, `stub`
        """
        pulumi.set(__self__, "ospf_networks", ospf_networks)
        if include_loopback is not None:
            pulumi.set(__self__, "include_loopback", include_loopback)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ospfNetworks")
    def ospf_networks(self) -> pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasOspfNetworksArgs']]]:
        return pulumi.get(self, "ospf_networks")

    @ospf_networks.setter
    def ospf_networks(self, value: pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateOspfAreasOspfNetworksArgs']]]):
        pulumi.set(self, "ospf_networks", value)

    @property
    @pulumi.getter(name="includeLoopback")
    def include_loopback(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_loopback")

    @include_loopback.setter
    def include_loopback(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_loopback", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF type. enum: `default`, `nssa`, `stub`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworktemplateOspfAreasOspfNetworksArgsDict(TypedDict):
        auth_keys: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Required if `auth_type`==`md5`. Property key is the key number
        """
        auth_password: NotRequired[pulumi.Input[str]]
        """
        Required if `auth_type`==`password`, the password, max length is 8
        """
        auth_type: NotRequired[pulumi.Input[str]]
        """
        auth type. enum: `md5`, `none`, `password`
        """
        bfd_minimum_interval: NotRequired[pulumi.Input[int]]
        dead_interval: NotRequired[pulumi.Input[int]]
        export_policy: NotRequired[pulumi.Input[str]]
        hello_interval: NotRequired[pulumi.Input[int]]
        import_policy: NotRequired[pulumi.Input[str]]
        interface_type: NotRequired[pulumi.Input[str]]
        """
        interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
        """
        metric: NotRequired[pulumi.Input[int]]
        no_readvertise_to_overlay: NotRequired[pulumi.Input[bool]]
        """
        by default, we'll re-advertise all learned OSPF routes toward overlay
        """
        passive: NotRequired[pulumi.Input[bool]]
        """
        whether to send OSPF-Hello
        """
elif False:
    NetworktemplateOspfAreasOspfNetworksArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateOspfAreasOspfNetworksArgs:
    def __init__(__self__, *,
                 auth_keys: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 auth_password: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 bfd_minimum_interval: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 export_policy: Optional[pulumi.Input[str]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 import_policy: Optional[pulumi.Input[str]] = None,
                 interface_type: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 no_readvertise_to_overlay: Optional[pulumi.Input[bool]] = None,
                 passive: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] auth_keys: Required if `auth_type`==`md5`. Property key is the key number
        :param pulumi.Input[str] auth_password: Required if `auth_type`==`password`, the password, max length is 8
        :param pulumi.Input[str] auth_type: auth type. enum: `md5`, `none`, `password`
        :param pulumi.Input[str] interface_type: interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
        :param pulumi.Input[bool] no_readvertise_to_overlay: by default, we'll re-advertise all learned OSPF routes toward overlay
        :param pulumi.Input[bool] passive: whether to send OSPF-Hello
        """
        if auth_keys is not None:
            pulumi.set(__self__, "auth_keys", auth_keys)
        if auth_password is not None:
            pulumi.set(__self__, "auth_password", auth_password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if bfd_minimum_interval is not None:
            pulumi.set(__self__, "bfd_minimum_interval", bfd_minimum_interval)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if export_policy is not None:
            pulumi.set(__self__, "export_policy", export_policy)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if import_policy is not None:
            pulumi.set(__self__, "import_policy", import_policy)
        if interface_type is not None:
            pulumi.set(__self__, "interface_type", interface_type)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if no_readvertise_to_overlay is not None:
            pulumi.set(__self__, "no_readvertise_to_overlay", no_readvertise_to_overlay)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)

    @property
    @pulumi.getter(name="authKeys")
    def auth_keys(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Required if `auth_type`==`md5`. Property key is the key number
        """
        return pulumi.get(self, "auth_keys")

    @auth_keys.setter
    def auth_keys(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "auth_keys", value)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `auth_type`==`password`, the password, max length is 8
        """
        return pulumi.get(self, "auth_password")

    @auth_password.setter
    def auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        auth type. enum: `md5`, `none`, `password`
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="bfdMinimumInterval")
    def bfd_minimum_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bfd_minimum_interval")

    @bfd_minimum_interval.setter
    def bfd_minimum_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_minimum_interval", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="exportPolicy")
    def export_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_policy")

    @export_policy.setter
    def export_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_policy", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="importPolicy")
    def import_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "import_policy")

    @import_policy.setter
    def import_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_policy", value)

    @property
    @pulumi.getter(name="interfaceType")
    def interface_type(self) -> Optional[pulumi.Input[str]]:
        """
        interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
        """
        return pulumi.get(self, "interface_type")

    @interface_type.setter
    def interface_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_type", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="noReadvertiseToOverlay")
    def no_readvertise_to_overlay(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, we'll re-advertise all learned OSPF routes toward overlay
        """
        return pulumi.get(self, "no_readvertise_to_overlay")

    @no_readvertise_to_overlay.setter
    def no_readvertise_to_overlay(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_readvertise_to_overlay", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to send OSPF-Hello
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive", value)


if not MYPY:
    class NetworktemplatePortMirroringArgsDict(TypedDict):
        input_networks_ingresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        input_port_ids_egresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        input_port_ids_ingresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        output_network: NotRequired[pulumi.Input[str]]
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        output_port_id: NotRequired[pulumi.Input[str]]
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
elif False:
    NetworktemplatePortMirroringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplatePortMirroringArgs:
    def __init__(__self__, *,
                 input_networks_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_egresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 output_network: Optional[pulumi.Input[str]] = None,
                 output_port_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[str] output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param pulumi.Input[str] output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @input_networks_ingresses.setter
    def input_networks_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_networks_ingresses", value)

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @input_port_ids_egresses.setter
    def input_port_ids_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_egresses", value)

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @input_port_ids_ingresses.setter
    def input_port_ids_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_ingresses", value)

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @output_network.setter
    def output_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_network", value)

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")

    @output_port_id.setter
    def output_port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_port_id", value)


if not MYPY:
    class NetworktemplatePortUsagesArgsDict(TypedDict):
        all_networks: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`==`trunk` whether to trunk all network/vlans
        """
        allow_dhcpd: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.

        When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        """
        allow_multiple_supplicants: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic`
        """
        bypass_auth_when_server_down: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        """
        bypass_auth_when_server_down_for_unkonwn_client: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic`
        """
        disable_autoneg: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        """
        disabled: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` whether the port is disabled
        """
        duplex: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        """
        dynamic_vlan_networks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        """
        enable_mac_auth: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        """
        enable_qos: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic`
        """
        guest_network: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        """
        inter_switch_link: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
        NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        """
        mac_auth_only: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        """
        mac_auth_preferred: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        """
        mac_auth_protocol: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        """
        mac_limit: NotRequired[pulumi.Input[int]]
        """
        Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        """
        mode: NotRequired[pulumi.Input[str]]
        """
        `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        """
        mtu: NotRequired[pulumi.Input[int]]
        """
        Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        """
        networks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Only if `mode`==`trunk`, the list of network/vlans
        """
        persist_mac: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        """
        poe_disabled: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        """
        port_auth: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        """
        port_network: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        """
        reauth_interval: NotRequired[pulumi.Input[int]]
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        """
        reset_default_when: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        """
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgsDict']]]]
        """
        Only if `mode`==`dynamic`
        """
        server_fail_network: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        """
        server_reject_network: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        """
        speed: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        """
        storm_control: NotRequired[pulumi.Input['NetworktemplatePortUsagesStormControlArgsDict']]
        """
        Switch storm control
        Only if `mode`!=`dynamic`
        """
        stp_edge: NotRequired[pulumi.Input[bool]]
        """
        Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        """
        stp_no_root_port: NotRequired[pulumi.Input[bool]]
        stp_p2p: NotRequired[pulumi.Input[bool]]
        use_vstp: NotRequired[pulumi.Input[bool]]
        """
        if this is connected to a vstp network
        """
        voip_network: NotRequired[pulumi.Input[str]]
        """
        Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
elif False:
    NetworktemplatePortUsagesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplatePortUsagesArgs:
    def __init__(__self__, *,
                 all_networks: Optional[pulumi.Input[bool]] = None,
                 allow_dhcpd: Optional[pulumi.Input[bool]] = None,
                 allow_multiple_supplicants: Optional[pulumi.Input[bool]] = None,
                 bypass_auth_when_server_down: Optional[pulumi.Input[bool]] = None,
                 bypass_auth_when_server_down_for_unkonwn_client: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 dynamic_vlan_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_mac_auth: Optional[pulumi.Input[bool]] = None,
                 enable_qos: Optional[pulumi.Input[bool]] = None,
                 guest_network: Optional[pulumi.Input[str]] = None,
                 inter_switch_link: Optional[pulumi.Input[bool]] = None,
                 mac_auth_only: Optional[pulumi.Input[bool]] = None,
                 mac_auth_preferred: Optional[pulumi.Input[bool]] = None,
                 mac_auth_protocol: Optional[pulumi.Input[str]] = None,
                 mac_limit: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 persist_mac: Optional[pulumi.Input[bool]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 port_auth: Optional[pulumi.Input[str]] = None,
                 port_network: Optional[pulumi.Input[str]] = None,
                 reauth_interval: Optional[pulumi.Input[int]] = None,
                 reset_default_when: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]] = None,
                 server_fail_network: Optional[pulumi.Input[str]] = None,
                 server_reject_network: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 storm_control: Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']] = None,
                 stp_edge: Optional[pulumi.Input[bool]] = None,
                 stp_no_root_port: Optional[pulumi.Input[bool]] = None,
                 stp_p2p: Optional[pulumi.Input[bool]] = None,
                 use_vstp: Optional[pulumi.Input[bool]] = None,
                 voip_network: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] all_networks: Only if `mode`==`trunk` whether to trunk all network/vlans
        :param pulumi.Input[bool] allow_dhcpd: Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.
               
               When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        :param pulumi.Input[bool] allow_multiple_supplicants: Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] bypass_auth_when_server_down: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        :param pulumi.Input[bool] bypass_auth_when_server_down_for_unkonwn_client: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        :param pulumi.Input[str] description: Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] disable_autoneg: Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        :param pulumi.Input[bool] disabled: Only if `mode`!=`dynamic` whether the port is disabled
        :param pulumi.Input[str] duplex: Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dynamic_vlan_networks: Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        :param pulumi.Input[bool] enable_mac_auth: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        :param pulumi.Input[bool] enable_qos: Only if `mode`!=`dynamic`
        :param pulumi.Input[str] guest_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        :param pulumi.Input[bool] inter_switch_link: Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
               NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        :param pulumi.Input[bool] mac_auth_only: Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        :param pulumi.Input[bool] mac_auth_preferred: Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        :param pulumi.Input[str] mac_auth_protocol: Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        :param pulumi.Input[int] mac_limit: Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        :param pulumi.Input[str] mode: `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        :param pulumi.Input[int] mtu: Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: Only if `mode`==`trunk`, the list of network/vlans
        :param pulumi.Input[bool] persist_mac: Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        :param pulumi.Input[bool] poe_disabled: Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        :param pulumi.Input[str] port_auth: Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        :param pulumi.Input[str] port_network: Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        :param pulumi.Input[int] reauth_interval: Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        :param pulumi.Input[str] reset_default_when: Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        :param pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]] rules: Only if `mode`==`dynamic`
        :param pulumi.Input[str] server_fail_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        :param pulumi.Input[str] server_reject_network: Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        :param pulumi.Input[str] speed: Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        :param pulumi.Input['NetworktemplatePortUsagesStormControlArgs'] storm_control: Switch storm control
               Only if `mode`!=`dynamic`
        :param pulumi.Input[bool] stp_edge: Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        :param pulumi.Input[bool] use_vstp: if this is connected to a vstp network
        :param pulumi.Input[str] voip_network: Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        if all_networks is not None:
            pulumi.set(__self__, "all_networks", all_networks)
        if allow_dhcpd is not None:
            pulumi.set(__self__, "allow_dhcpd", allow_dhcpd)
        if allow_multiple_supplicants is not None:
            pulumi.set(__self__, "allow_multiple_supplicants", allow_multiple_supplicants)
        if bypass_auth_when_server_down is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down", bypass_auth_when_server_down)
        if bypass_auth_when_server_down_for_unkonwn_client is not None:
            pulumi.set(__self__, "bypass_auth_when_server_down_for_unkonwn_client", bypass_auth_when_server_down_for_unkonwn_client)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_vlan_networks is not None:
            pulumi.set(__self__, "dynamic_vlan_networks", dynamic_vlan_networks)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if enable_qos is not None:
            pulumi.set(__self__, "enable_qos", enable_qos)
        if guest_network is not None:
            pulumi.set(__self__, "guest_network", guest_network)
        if inter_switch_link is not None:
            pulumi.set(__self__, "inter_switch_link", inter_switch_link)
        if mac_auth_only is not None:
            pulumi.set(__self__, "mac_auth_only", mac_auth_only)
        if mac_auth_preferred is not None:
            pulumi.set(__self__, "mac_auth_preferred", mac_auth_preferred)
        if mac_auth_protocol is not None:
            pulumi.set(__self__, "mac_auth_protocol", mac_auth_protocol)
        if mac_limit is not None:
            pulumi.set(__self__, "mac_limit", mac_limit)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if persist_mac is not None:
            pulumi.set(__self__, "persist_mac", persist_mac)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if port_auth is not None:
            pulumi.set(__self__, "port_auth", port_auth)
        if port_network is not None:
            pulumi.set(__self__, "port_network", port_network)
        if reauth_interval is not None:
            pulumi.set(__self__, "reauth_interval", reauth_interval)
        if reset_default_when is not None:
            pulumi.set(__self__, "reset_default_when", reset_default_when)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if server_fail_network is not None:
            pulumi.set(__self__, "server_fail_network", server_fail_network)
        if server_reject_network is not None:
            pulumi.set(__self__, "server_reject_network", server_reject_network)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if storm_control is not None:
            pulumi.set(__self__, "storm_control", storm_control)
        if stp_edge is not None:
            pulumi.set(__self__, "stp_edge", stp_edge)
        if stp_no_root_port is not None:
            pulumi.set(__self__, "stp_no_root_port", stp_no_root_port)
        if stp_p2p is not None:
            pulumi.set(__self__, "stp_p2p", stp_p2p)
        if use_vstp is not None:
            pulumi.set(__self__, "use_vstp", use_vstp)
        if voip_network is not None:
            pulumi.set(__self__, "voip_network", voip_network)

    @property
    @pulumi.getter(name="allNetworks")
    def all_networks(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`==`trunk` whether to trunk all network/vlans
        """
        return pulumi.get(self, "all_networks")

    @all_networks.setter
    def all_networks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_networks", value)

    @property
    @pulumi.getter(name="allowDhcpd")
    def allow_dhcpd(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` if DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allow_dhcpd is a tri_state.

        When it is not defined, it means using the system’s default setting which depends on whether the port is a access or trunk port.
        """
        return pulumi.get(self, "allow_dhcpd")

    @allow_dhcpd.setter
    def allow_dhcpd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_dhcpd", value)

    @property
    @pulumi.getter(name="allowMultipleSupplicants")
    def allow_multiple_supplicants(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "allow_multiple_supplicants")

    @allow_multiple_supplicants.setter
    def allow_multiple_supplicants(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multiple_supplicants", value)

    @property
    @pulumi.getter(name="bypassAuthWhenServerDown")
    def bypass_auth_when_server_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down")

    @bypass_auth_when_server_down.setter
    def bypass_auth_when_server_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_auth_when_server_down", value)

    @property
    @pulumi.getter(name="bypassAuthWhenServerDownForUnkonwnClient")
    def bypass_auth_when_server_down_for_unkonwn_client(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
        """
        return pulumi.get(self, "bypass_auth_when_server_down_for_unkonwn_client")

    @bypass_auth_when_server_down_for_unkonwn_client.setter
    def bypass_auth_when_server_down_for_unkonwn_client(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_auth_when_server_down_for_unkonwn_client", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` whether the port is disabled
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="dynamicVlanNetworks")
    def dynamic_vlan_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
        """
        return pulumi.get(self, "dynamic_vlan_networks")

    @dynamic_vlan_networks.setter
    def dynamic_vlan_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dynamic_vlan_networks", value)

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` whether to enable MAC Auth
        """
        return pulumi.get(self, "enable_mac_auth")

    @enable_mac_auth.setter
    def enable_mac_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mac_auth", value)

    @property
    @pulumi.getter(name="enableQos")
    def enable_qos(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "enable_qos")

    @enable_qos.setter
    def enable_qos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_qos", value)

    @property
    @pulumi.getter(name="guestNetwork")
    def guest_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
        """
        return pulumi.get(self, "guest_network")

    @guest_network.setter
    def guest_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "guest_network", value)

    @property
    @pulumi.getter(name="interSwitchLink")
    def inter_switch_link(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` inter_switch_link is used together with "isolation" under networks
        NOTE: inter_switch_link works only between Juniper device. This has to be applied to both ports connected together
        """
        return pulumi.get(self, "inter_switch_link")

    @inter_switch_link.setter
    def inter_switch_link(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inter_switch_link", value)

    @property
    @pulumi.getter(name="macAuthOnly")
    def mac_auth_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth`==`true`
        """
        return pulumi.get(self, "mac_auth_only")

    @mac_auth_only.setter
    def mac_auth_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mac_auth_only", value)

    @property
    @pulumi.getter(name="macAuthPreferred")
    def mac_auth_preferred(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` + `enable_mac_auth`==`true` + `mac_auth_only`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer mac_auth over dot1x.
        """
        return pulumi.get(self, "mac_auth_preferred")

    @mac_auth_preferred.setter
    def mac_auth_preferred(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mac_auth_preferred", value)

    @property
    @pulumi.getter(name="macAuthProtocol")
    def mac_auth_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `enable_mac_auth` ==`true`. This type is ignored if mist_nac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
        """
        return pulumi.get(self, "mac_auth_protocol")

    @mac_auth_protocol.setter
    def mac_auth_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_auth_protocol", value)

    @property
    @pulumi.getter(name="macLimit")
    def mac_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
        """
        return pulumi.get(self, "mac_limit")

    @mac_limit.setter
    def mac_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_limit", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        `mode`==`dynamic` must only be used with the port usage with the name `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only if `mode`==`trunk`, the list of network/vlans
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="persistMac")
    def persist_mac(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`==`access` and `port_auth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
        """
        return pulumi.get(self, "persist_mac")

    @persist_mac.setter
    def persist_mac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_mac", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
        """
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter(name="portAuth")
    def port_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
        """
        return pulumi.get(self, "port_auth")

    @port_auth.setter
    def port_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_auth", value)

    @property
    @pulumi.getter(name="portNetwork")
    def port_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` native network/vlan for untagged traffic
        """
        return pulumi.get(self, "port_network")

    @port_network.setter
    def port_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_network", value)

    @property
    @pulumi.getter(name="reauthInterval")
    def reauth_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`=`dot1x` reauthentication interval range
        """
        return pulumi.get(self, "reauth_interval")

    @reauth_interval.setter
    def reauth_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_interval", value)

    @property
    @pulumi.getter(name="resetDefaultWhen")
    def reset_default_when(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `link_down`, `none` (let the DPC port keep at the current port usage)
        """
        return pulumi.get(self, "reset_default_when")

    @reset_default_when.setter
    def reset_default_when(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reset_default_when", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]]:
        """
        Only if `mode`==`dynamic`
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplatePortUsagesRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="serverFailNetwork")
    def server_fail_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` sets server fail fallback vlan
        """
        return pulumi.get(self, "server_fail_network")

    @server_fail_network.setter
    def server_fail_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_fail_network", value)

    @property
    @pulumi.getter(name="serverRejectNetwork")
    def server_reject_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` and `port_auth`==`dot1x` when radius server reject / fails
        """
        return pulumi.get(self, "server_reject_network")

    @server_reject_network.setter
    def server_reject_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_reject_network", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="stormControl")
    def storm_control(self) -> Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']]:
        """
        Switch storm control
        Only if `mode`!=`dynamic`
        """
        return pulumi.get(self, "storm_control")

    @storm_control.setter
    def storm_control(self, value: Optional[pulumi.Input['NetworktemplatePortUsagesStormControlArgs']]):
        pulumi.set(self, "storm_control", value)

    @property
    @pulumi.getter(name="stpEdge")
    def stp_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
        """
        return pulumi.get(self, "stp_edge")

    @stp_edge.setter
    def stp_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_edge", value)

    @property
    @pulumi.getter(name="stpNoRootPort")
    def stp_no_root_port(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stp_no_root_port")

    @stp_no_root_port.setter
    def stp_no_root_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_no_root_port", value)

    @property
    @pulumi.getter(name="stpP2p")
    def stp_p2p(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stp_p2p")

    @stp_p2p.setter
    def stp_p2p(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stp_p2p", value)

    @property
    @pulumi.getter(name="useVstp")
    def use_vstp(self) -> Optional[pulumi.Input[bool]]:
        """
        if this is connected to a vstp network
        """
        return pulumi.get(self, "use_vstp")

    @use_vstp.setter
    def use_vstp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_vstp", value)

    @property
    @pulumi.getter(name="voipNetwork")
    def voip_network(self) -> Optional[pulumi.Input[str]]:
        """
        Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
        """
        return pulumi.get(self, "voip_network")

    @voip_network.setter
    def voip_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip_network", value)


if not MYPY:
    class NetworktemplatePortUsagesRuleArgsDict(TypedDict):
        src: pulumi.Input[str]
        """
        enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        """
        equals: NotRequired[pulumi.Input[str]]
        equals_anies: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        use `equals_any` to match any item in a list
        """
        expression: NotRequired[pulumi.Input[str]]
        """
        "[0:3]":"abcdef" > "abc"
        "split(.)[1]": "a.b.c" > "b"
        "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        """
        usage: NotRequired[pulumi.Input[str]]
        """
        `port_usage` name
        """
elif False:
    NetworktemplatePortUsagesRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplatePortUsagesRuleArgs:
    def __init__(__self__, *,
                 src: pulumi.Input[str],
                 equals: Optional[pulumi.Input[str]] = None,
                 equals_anies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] src: enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] equals_anies: use `equals_any` to match any item in a list
        :param pulumi.Input[str] expression: "[0:3]":"abcdef" > "abc"
               "split(.)[1]": "a.b.c" > "b"
               "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        :param pulumi.Input[str] usage: `port_usage` name
        """
        pulumi.set(__self__, "src", src)
        if equals is not None:
            pulumi.set(__self__, "equals", equals)
        if equals_anies is not None:
            pulumi.set(__self__, "equals_anies", equals_anies)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def src(self) -> pulumi.Input[str]:
        """
        enum: `link_peermac`, `lldp_chassis_id`, `lldp_hardware_revision`, `lldp_manufacturer_name`, `lldp_oui`, `lldp_serial_number`, `lldp_system_name`, `radius_dynamicfilter`, `radius_usermac`, `radius_username`
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: pulumi.Input[str]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def equals(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "equals")

    @equals.setter
    def equals(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "equals", value)

    @property
    @pulumi.getter(name="equalsAnies")
    def equals_anies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        use `equals_any` to match any item in a list
        """
        return pulumi.get(self, "equals_anies")

    @equals_anies.setter
    def equals_anies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "equals_anies", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        "[0:3]":"abcdef" > "abc"
        "split(.)[1]": "a.b.c" > "b"
        "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        """
        `port_usage` name
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


if not MYPY:
    class NetworktemplatePortUsagesStormControlArgsDict(TypedDict):
        no_broadcast: NotRequired[pulumi.Input[bool]]
        """
        whether to disable storm control on broadcast traffic
        """
        no_multicast: NotRequired[pulumi.Input[bool]]
        """
        whether to disable storm control on multicast traffic
        """
        no_registered_multicast: NotRequired[pulumi.Input[bool]]
        """
        whether to disable storm control on registered multicast traffic
        """
        no_unknown_unicast: NotRequired[pulumi.Input[bool]]
        """
        whether to disable storm control on unknown unicast traffic
        """
        percentage: NotRequired[pulumi.Input[int]]
        """
        bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
elif False:
    NetworktemplatePortUsagesStormControlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplatePortUsagesStormControlArgs:
    def __init__(__self__, *,
                 no_broadcast: Optional[pulumi.Input[bool]] = None,
                 no_multicast: Optional[pulumi.Input[bool]] = None,
                 no_registered_multicast: Optional[pulumi.Input[bool]] = None,
                 no_unknown_unicast: Optional[pulumi.Input[bool]] = None,
                 percentage: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] no_broadcast: whether to disable storm control on broadcast traffic
        :param pulumi.Input[bool] no_multicast: whether to disable storm control on multicast traffic
        :param pulumi.Input[bool] no_registered_multicast: whether to disable storm control on registered multicast traffic
        :param pulumi.Input[bool] no_unknown_unicast: whether to disable storm control on unknown unicast traffic
        :param pulumi.Input[int] percentage: bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        if no_broadcast is not None:
            pulumi.set(__self__, "no_broadcast", no_broadcast)
        if no_multicast is not None:
            pulumi.set(__self__, "no_multicast", no_multicast)
        if no_registered_multicast is not None:
            pulumi.set(__self__, "no_registered_multicast", no_registered_multicast)
        if no_unknown_unicast is not None:
            pulumi.set(__self__, "no_unknown_unicast", no_unknown_unicast)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter(name="noBroadcast")
    def no_broadcast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on broadcast traffic
        """
        return pulumi.get(self, "no_broadcast")

    @no_broadcast.setter
    def no_broadcast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_broadcast", value)

    @property
    @pulumi.getter(name="noMulticast")
    def no_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on multicast traffic
        """
        return pulumi.get(self, "no_multicast")

    @no_multicast.setter
    def no_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_multicast", value)

    @property
    @pulumi.getter(name="noRegisteredMulticast")
    def no_registered_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on registered multicast traffic
        """
        return pulumi.get(self, "no_registered_multicast")

    @no_registered_multicast.setter
    def no_registered_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_registered_multicast", value)

    @property
    @pulumi.getter(name="noUnknownUnicast")
    def no_unknown_unicast(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable storm control on unknown unicast traffic
        """
        return pulumi.get(self, "no_unknown_unicast")

    @no_unknown_unicast.setter
    def no_unknown_unicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_unknown_unicast", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        """
        bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)


if not MYPY:
    class NetworktemplateRadiusConfigArgsDict(TypedDict):
        acct_interim_interval: NotRequired[pulumi.Input[int]]
        """
        how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        """
        acct_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgsDict']]]]
        auth_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgsDict']]]]
        auth_servers_retries: NotRequired[pulumi.Input[int]]
        """
        radius auth session retries
        """
        auth_servers_timeout: NotRequired[pulumi.Input[int]]
        """
        radius auth session timeout
        """
        network: NotRequired[pulumi.Input[str]]
        """
        use `network`or `source_ip`
        which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        """
        source_ip: NotRequired[pulumi.Input[str]]
        """
        use `network`or `source_ip`
        """
elif False:
    NetworktemplateRadiusConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRadiusConfigArgs:
    def __init__(__self__, *,
                 acct_interim_interval: Optional[pulumi.Input[int]] = None,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]] = None,
                 auth_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]] = None,
                 auth_servers_retries: Optional[pulumi.Input[int]] = None,
                 auth_servers_timeout: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] acct_interim_interval: how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        :param pulumi.Input[int] auth_servers_retries: radius auth session retries
        :param pulumi.Input[int] auth_servers_timeout: radius auth session timeout
        :param pulumi.Input[str] network: use `network`or `source_ip`
               which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        :param pulumi.Input[str] source_ip: use `network`or `source_ip`
        """
        if acct_interim_interval is not None:
            pulumi.set(__self__, "acct_interim_interval", acct_interim_interval)
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if auth_servers is not None:
            pulumi.set(__self__, "auth_servers", auth_servers)
        if auth_servers_retries is not None:
            pulumi.set(__self__, "auth_servers_retries", auth_servers_retries)
        if auth_servers_timeout is not None:
            pulumi.set(__self__, "auth_servers_timeout", auth_servers_timeout)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="acctInterimInterval")
    def acct_interim_interval(self) -> Optional[pulumi.Input[int]]:
        """
        how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
        """
        return pulumi.get(self, "acct_interim_interval")

    @acct_interim_interval.setter
    def acct_interim_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acct_interim_interval", value)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAcctServerArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="authServers")
    def auth_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]]:
        return pulumi.get(self, "auth_servers")

    @auth_servers.setter
    def auth_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRadiusConfigAuthServerArgs']]]]):
        pulumi.set(self, "auth_servers", value)

    @property
    @pulumi.getter(name="authServersRetries")
    def auth_servers_retries(self) -> Optional[pulumi.Input[int]]:
        """
        radius auth session retries
        """
        return pulumi.get(self, "auth_servers_retries")

    @auth_servers_retries.setter
    def auth_servers_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_servers_retries", value)

    @property
    @pulumi.getter(name="authServersTimeout")
    def auth_servers_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        radius auth session timeout
        """
        return pulumi.get(self, "auth_servers_timeout")

    @auth_servers_timeout.setter
    def auth_servers_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_servers_timeout", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        use `network`or `source_ip`
        which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        use `network`or `source_ip`
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


if not MYPY:
    class NetworktemplateRadiusConfigAcctServerArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        ip / hostname of RADIUS server
        """
        secret: pulumi.Input[str]
        """
        secret of RADIUS server
        """
        keywrap_enabled: NotRequired[pulumi.Input[bool]]
        keywrap_format: NotRequired[pulumi.Input[str]]
        """
        enum: `ascii`, `hex`
        """
        keywrap_kek: NotRequired[pulumi.Input[str]]
        keywrap_mack: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        """
        Acct port of RADIUS server
        """
elif False:
    NetworktemplateRadiusConfigAcctServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRadiusConfigAcctServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class NetworktemplateRadiusConfigAuthServerArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        ip / hostname of RADIUS server
        """
        secret: pulumi.Input[str]
        """
        secret of RADIUS server
        """
        keywrap_enabled: NotRequired[pulumi.Input[bool]]
        keywrap_format: NotRequired[pulumi.Input[str]]
        """
        enum: `ascii`, `hex`
        """
        keywrap_kek: NotRequired[pulumi.Input[str]]
        keywrap_mack: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        """
        Auth port of RADIUS server
        """
        require_message_authenticator: NotRequired[pulumi.Input[bool]]
        """
        whether to require Message-Authenticator in requests
        """
elif False:
    NetworktemplateRadiusConfigAuthServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRadiusConfigAuthServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 require_message_authenticator: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Auth port of RADIUS server
        :param pulumi.Input[bool] require_message_authenticator: whether to require Message-Authenticator in requests
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if require_message_authenticator is not None:
            pulumi.set(__self__, "require_message_authenticator", require_message_authenticator)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="requireMessageAuthenticator")
    def require_message_authenticator(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to require Message-Authenticator in requests
        """
        return pulumi.get(self, "require_message_authenticator")

    @require_message_authenticator.setter
    def require_message_authenticator(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_message_authenticator", value)


if not MYPY:
    class NetworktemplateRemoteSyslogArgsDict(TypedDict):
        archive: NotRequired[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgsDict']]
        console: NotRequired[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgsDict']]
        enabled: NotRequired[pulumi.Input[bool]]
        files: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgsDict']]]]
        network: NotRequired[pulumi.Input[str]]
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        send_to_all_servers: NotRequired[pulumi.Input[bool]]
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgsDict']]]]
        time_format: NotRequired[pulumi.Input[str]]
        """
        enum: `millisecond`, `year`, `year millisecond`
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgsDict']]]]
elif False:
    NetworktemplateRemoteSyslogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogArgs:
    def __init__(__self__, *,
                 archive: Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']] = None,
                 console: Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 send_to_all_servers: Optional[pulumi.Input[bool]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]] = None):
        """
        :param pulumi.Input[str] network: if source_address is configured, will use the vlan firstly otherwise use source_ip
        :param pulumi.Input[str] time_format: enum: `millisecond`, `year`, `year millisecond`
        """
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if console is not None:
            pulumi.set(__self__, "console", console)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if send_to_all_servers is not None:
            pulumi.set(__self__, "send_to_all_servers", send_to_all_servers)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogArchiveArgs']]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def console(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']]:
        return pulumi.get(self, "console")

    @console.setter
    def console(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogConsoleArgs']]):
        pulumi.set(self, "console", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileArgs']]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="sendToAllServers")
    def send_to_all_servers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "send_to_all_servers")

    @send_to_all_servers.setter
    def send_to_all_servers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_to_all_servers", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `millisecond`, `year`, `year millisecond`
        """
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserArgs']]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class NetworktemplateRemoteSyslogArchiveArgsDict(TypedDict):
        files: NotRequired[pulumi.Input[int]]
        size: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateRemoteSyslogArchiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogArchiveArgs:
    def __init__(__self__, *,
                 files: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NetworktemplateRemoteSyslogConsoleArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgsDict']]]]
elif False:
    NetworktemplateRemoteSyslogConsoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogConsoleArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogConsoleContentArgs']]]]):
        pulumi.set(self, "contents", value)


if not MYPY:
    class NetworktemplateRemoteSyslogConsoleContentArgsDict(TypedDict):
        facility: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
elif False:
    NetworktemplateRemoteSyslogConsoleContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogConsoleContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class NetworktemplateRemoteSyslogFileArgsDict(TypedDict):
        archive: NotRequired[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgsDict']]
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgsDict']]]]
        explicit_priority: NotRequired[pulumi.Input[bool]]
        file: NotRequired[pulumi.Input[str]]
        match: NotRequired[pulumi.Input[str]]
        structured_data: NotRequired[pulumi.Input[bool]]
elif False:
    NetworktemplateRemoteSyslogFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogFileArgs:
    def __init__(__self__, *,
                 archive: Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']] = None,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]] = None,
                 explicit_priority: Optional[pulumi.Input[bool]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 structured_data: Optional[pulumi.Input[bool]] = None):
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']]:
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input['NetworktemplateRemoteSyslogFileArchiveArgs']]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogFileContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "explicit_priority")

    @explicit_priority.setter
    def explicit_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_priority", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "structured_data")

    @structured_data.setter
    def structured_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "structured_data", value)


if not MYPY:
    class NetworktemplateRemoteSyslogFileArchiveArgsDict(TypedDict):
        files: NotRequired[pulumi.Input[int]]
        size: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateRemoteSyslogFileArchiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogFileArchiveArgs:
    def __init__(__self__, *,
                 files: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        if files is not None:
            pulumi.set(__self__, "files", files)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


if not MYPY:
    class NetworktemplateRemoteSyslogFileContentArgsDict(TypedDict):
        facility: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
elif False:
    NetworktemplateRemoteSyslogFileContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogFileContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class NetworktemplateRemoteSyslogServerArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgsDict']]]]
        explicit_priority: NotRequired[pulumi.Input[bool]]
        facility: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        host: NotRequired[pulumi.Input[str]]
        match: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        protocol: NotRequired[pulumi.Input[str]]
        """
        enum: `tcp`, `udp`
        """
        routing_instance: NotRequired[pulumi.Input[str]]
        severity: NotRequired[pulumi.Input[str]]
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        source_address: NotRequired[pulumi.Input[str]]
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        structured_data: NotRequired[pulumi.Input[bool]]
        tag: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateRemoteSyslogServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogServerArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]] = None,
                 explicit_priority: Optional[pulumi.Input[bool]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routing_instance: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 source_address: Optional[pulumi.Input[str]] = None,
                 structured_data: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] protocol: enum: `tcp`, `udp`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        :param pulumi.Input[str] source_address: if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if explicit_priority is not None:
            pulumi.set(__self__, "explicit_priority", explicit_priority)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routing_instance is not None:
            pulumi.set(__self__, "routing_instance", routing_instance)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_address is not None:
            pulumi.set(__self__, "source_address", source_address)
        if structured_data is not None:
            pulumi.set(__self__, "structured_data", structured_data)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogServerContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="explicitPriority")
    def explicit_priority(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "explicit_priority")

    @explicit_priority.setter
    def explicit_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "explicit_priority", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `tcp`, `udp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="routingInstance")
    def routing_instance(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "routing_instance")

    @routing_instance.setter
    def routing_instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_instance", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sourceAddress")
    def source_address(self) -> Optional[pulumi.Input[str]]:
        """
        if source_address is configured, will use the vlan firstly otherwise use source_ip
        """
        return pulumi.get(self, "source_address")

    @source_address.setter
    def source_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address", value)

    @property
    @pulumi.getter(name="structuredData")
    def structured_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "structured_data")

    @structured_data.setter
    def structured_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "structured_data", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


if not MYPY:
    class NetworktemplateRemoteSyslogServerContentArgsDict(TypedDict):
        facility: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
elif False:
    NetworktemplateRemoteSyslogServerContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogServerContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class NetworktemplateRemoteSyslogUserArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgsDict']]]]
        match: NotRequired[pulumi.Input[str]]
        user: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateRemoteSyslogUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogUserArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateRemoteSyslogUserContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class NetworktemplateRemoteSyslogUserContentArgsDict(TypedDict):
        facility: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        severity: NotRequired[pulumi.Input[str]]
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
elif False:
    NetworktemplateRemoteSyslogUserContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateRemoteSyslogUserContentArgs:
    def __init__(__self__, *,
                 facility: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] facility: enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        :param pulumi.Input[str] severity: enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class NetworktemplateSnmpConfigArgsDict(TypedDict):
        client_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgsDict']]]]
        contact: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        engine_id: NotRequired[pulumi.Input[str]]
        """
        enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        location: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        network: NotRequired[pulumi.Input[str]]
        trap_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgsDict']]]]
        v2c_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgsDict']]]]
        v3_config: NotRequired[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgsDict']]
        views: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgsDict']]]]
elif False:
    NetworktemplateSnmpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigArgs:
    def __init__(__self__, *,
                 client_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 trap_groups: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]] = None,
                 v2c_configs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]] = None,
                 v3_config: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]] = None):
        """
        :param pulumi.Input[str] engine_id: enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        if client_lists is not None:
            pulumi.set(__self__, "client_lists", client_lists)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if trap_groups is not None:
            pulumi.set(__self__, "trap_groups", trap_groups)
        if v2c_configs is not None:
            pulumi.set(__self__, "v2c_configs", v2c_configs)
        if v3_config is not None:
            pulumi.set(__self__, "v3_config", v3_config)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="clientLists")
    def client_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]]:
        return pulumi.get(self, "client_lists")

    @client_lists.setter
    def client_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigClientListArgs']]]]):
        pulumi.set(self, "client_lists", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="trapGroups")
    def trap_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]]:
        return pulumi.get(self, "trap_groups")

    @trap_groups.setter
    def trap_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigTrapGroupArgs']]]]):
        pulumi.set(self, "trap_groups", value)

    @property
    @pulumi.getter(name="v2cConfigs")
    def v2c_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]]:
        return pulumi.get(self, "v2c_configs")

    @v2c_configs.setter
    def v2c_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV2cConfigArgs']]]]):
        pulumi.set(self, "v2c_configs", value)

    @property
    @pulumi.getter(name="v3Config")
    def v3_config(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']]:
        return pulumi.get(self, "v3_config")

    @v3_config.setter
    def v3_config(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigArgs']]):
        pulumi.set(self, "v3_config", value)

    @property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]]:
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigViewArgs']]]]):
        pulumi.set(self, "views", value)


if not MYPY:
    class NetworktemplateSnmpConfigClientListArgsDict(TypedDict):
        client_list_name: NotRequired[pulumi.Input[str]]
        clients: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    NetworktemplateSnmpConfigClientListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigClientListArgs:
    def __init__(__self__, *,
                 client_list_name: Optional[pulumi.Input[str]] = None,
                 clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if clients is not None:
            pulumi.set(__self__, "clients", clients)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_list_name")

    @client_list_name.setter
    def client_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_list_name", value)

    @property
    @pulumi.getter
    def clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "clients")

    @clients.setter
    def clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clients", value)


if not MYPY:
    class NetworktemplateSnmpConfigTrapGroupArgsDict(TypedDict):
        categories: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        group_name: NotRequired[pulumi.Input[str]]
        """
        Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        """
        targets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        version: NotRequired[pulumi.Input[str]]
        """
        enum: `all`, `v1`, `v2`
        """
elif False:
    NetworktemplateSnmpConfigTrapGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigTrapGroupArgs:
    def __init__(__self__, *,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_name: Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        :param pulumi.Input[str] version: enum: `all`, `v1`, `v2`
        """
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `all`, `v1`, `v2`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class NetworktemplateSnmpConfigV2cConfigArgsDict(TypedDict):
        authorization: NotRequired[pulumi.Input[str]]
        client_list_name: NotRequired[pulumi.Input[str]]
        """
        client_list_name here should refer to client_list above
        """
        community_name: NotRequired[pulumi.Input[str]]
        view: NotRequired[pulumi.Input[str]]
        """
        view name here should be defined in views above
        """
elif False:
    NetworktemplateSnmpConfigV2cConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV2cConfigArgs:
    def __init__(__self__, *,
                 authorization: Optional[pulumi.Input[str]] = None,
                 client_list_name: Optional[pulumi.Input[str]] = None,
                 community_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_list_name: client_list_name here should refer to client_list above
        :param pulumi.Input[str] view: view name here should be defined in views above
        """
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if client_list_name is not None:
            pulumi.set(__self__, "client_list_name", client_list_name)
        if community_name is not None:
            pulumi.set(__self__, "community_name", community_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="clientListName")
    def client_list_name(self) -> Optional[pulumi.Input[str]]:
        """
        client_list_name here should refer to client_list above
        """
        return pulumi.get(self, "client_list_name")

    @client_list_name.setter
    def client_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_list_name", value)

    @property
    @pulumi.getter(name="communityName")
    def community_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_name")

    @community_name.setter
    def community_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        view name here should be defined in views above
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigArgsDict(TypedDict):
        notifies: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgsDict']]]]
        notify_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgsDict']]]]
        target_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgsDict']]]]
        target_parameters: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgsDict']]]]
        usm: NotRequired[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgsDict']]
        vacm: NotRequired[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgsDict']]
elif False:
    NetworktemplateSnmpConfigV3ConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigArgs:
    def __init__(__self__, *,
                 notifies: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]] = None,
                 notify_filters: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]] = None,
                 target_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]] = None,
                 target_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]] = None,
                 usm: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']] = None,
                 vacm: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']] = None):
        if notifies is not None:
            pulumi.set(__self__, "notifies", notifies)
        if notify_filters is not None:
            pulumi.set(__self__, "notify_filters", notify_filters)
        if target_addresses is not None:
            pulumi.set(__self__, "target_addresses", target_addresses)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)
        if usm is not None:
            pulumi.set(__self__, "usm", usm)
        if vacm is not None:
            pulumi.set(__self__, "vacm", vacm)

    @property
    @pulumi.getter
    def notifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]]:
        return pulumi.get(self, "notifies")

    @notifies.setter
    def notifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyArgs']]]]):
        pulumi.set(self, "notifies", value)

    @property
    @pulumi.getter(name="notifyFilters")
    def notify_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]]:
        return pulumi.get(self, "notify_filters")

    @notify_filters.setter
    def notify_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs']]]]):
        pulumi.set(self, "notify_filters", value)

    @property
    @pulumi.getter(name="targetAddresses")
    def target_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]]:
        return pulumi.get(self, "target_addresses")

    @target_addresses.setter
    def target_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetAddressArgs']]]]):
        pulumi.set(self, "target_addresses", value)

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]]:
        return pulumi.get(self, "target_parameters")

    @target_parameters.setter
    def target_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigTargetParameterArgs']]]]):
        pulumi.set(self, "target_parameters", value)

    @property
    @pulumi.getter
    def usm(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']]:
        return pulumi.get(self, "usm")

    @usm.setter
    def usm(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmArgs']]):
        pulumi.set(self, "usm", value)

    @property
    @pulumi.getter
    def vacm(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']]:
        return pulumi.get(self, "vacm")

    @vacm.setter
    def vacm(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmArgs']]):
        pulumi.set(self, "vacm", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigNotifyArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        tag: NotRequired[pulumi.Input[str]]
        type: NotRequired[pulumi.Input[str]]
        """
        enum: `inform`, `trap`
        """
elif False:
    NetworktemplateSnmpConfigV3ConfigNotifyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: enum: `inform`, `trap`
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `inform`, `trap`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigNotifyFilterArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgsDict']]]]
        profile_name: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateSnmpConfigV3ConfigNotifyFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]] = None,
                 profile_name: Optional[pulumi.Input[str]] = None):
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_name", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgsDict(TypedDict):
        include: NotRequired[pulumi.Input[bool]]
        oid: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs:
    def __init__(__self__, *,
                 include: Optional[pulumi.Input[bool]] = None,
                 oid: Optional[pulumi.Input[str]] = None):
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigTargetAddressArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[str]]
        address_mask: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        tag_list: NotRequired[pulumi.Input[str]]
        """
        <refer to notify tag, can be multiple with blank
        """
        target_address_name: NotRequired[pulumi.Input[str]]
        target_parameters: NotRequired[pulumi.Input[str]]
        """
        refer to notify target parameters name
        """
elif False:
    NetworktemplateSnmpConfigV3ConfigTargetAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigTargetAddressArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 address_mask: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 tag_list: Optional[pulumi.Input[str]] = None,
                 target_address_name: Optional[pulumi.Input[str]] = None,
                 target_parameters: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_list: <refer to notify tag, can be multiple with blank
        :param pulumi.Input[str] target_parameters: refer to notify target parameters name
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address_mask is not None:
            pulumi.set(__self__, "address_mask", address_mask)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tag_list is not None:
            pulumi.set(__self__, "tag_list", tag_list)
        if target_address_name is not None:
            pulumi.set(__self__, "target_address_name", target_address_name)
        if target_parameters is not None:
            pulumi.set(__self__, "target_parameters", target_parameters)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressMask")
    def address_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_mask")

    @address_mask.setter
    def address_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_mask", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="tagList")
    def tag_list(self) -> Optional[pulumi.Input[str]]:
        """
        <refer to notify tag, can be multiple with blank
        """
        return pulumi.get(self, "tag_list")

    @tag_list.setter
    def tag_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_list", value)

    @property
    @pulumi.getter(name="targetAddressName")
    def target_address_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_address_name")

    @target_address_name.setter
    def target_address_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_address_name", value)

    @property
    @pulumi.getter(name="targetParameters")
    def target_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        refer to notify target parameters name
        """
        return pulumi.get(self, "target_parameters")

    @target_parameters.setter
    def target_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_parameters", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigTargetParameterArgsDict(TypedDict):
        message_processing_model: NotRequired[pulumi.Input[str]]
        """
        enum: `v1`, `v2c`, `v3`
        """
        name: NotRequired[pulumi.Input[str]]
        notify_filter: NotRequired[pulumi.Input[str]]
        """
        refer to profile-name in notify_filter
        """
        security_level: NotRequired[pulumi.Input[str]]
        """
        enum: `authentication`, `none`, `privacy`
        """
        security_model: NotRequired[pulumi.Input[str]]
        """
        enum: `usm`, `v1`, `v2c`
        """
        security_name: NotRequired[pulumi.Input[str]]
        """
        refer to security_name in usm
        """
elif False:
    NetworktemplateSnmpConfigV3ConfigTargetParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigTargetParameterArgs:
    def __init__(__self__, *,
                 message_processing_model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_filter: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 security_model: Optional[pulumi.Input[str]] = None,
                 security_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] message_processing_model: enum: `v1`, `v2c`, `v3`
        :param pulumi.Input[str] notify_filter: refer to profile-name in notify_filter
        :param pulumi.Input[str] security_level: enum: `authentication`, `none`, `privacy`
        :param pulumi.Input[str] security_model: enum: `usm`, `v1`, `v2c`
        :param pulumi.Input[str] security_name: refer to security_name in usm
        """
        if message_processing_model is not None:
            pulumi.set(__self__, "message_processing_model", message_processing_model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_filter is not None:
            pulumi.set(__self__, "notify_filter", notify_filter)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter(name="messageProcessingModel")
    def message_processing_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `v1`, `v2c`, `v3`
        """
        return pulumi.get(self, "message_processing_model")

    @message_processing_model.setter
    def message_processing_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_processing_model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyFilter")
    def notify_filter(self) -> Optional[pulumi.Input[str]]:
        """
        refer to profile-name in notify_filter
        """
        return pulumi.get(self, "notify_filter")

    @notify_filter.setter
    def notify_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_filter", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[pulumi.Input[str]]:
        """
        refer to security_name in usm
        """
        return pulumi.get(self, "security_name")

    @security_name.setter
    def security_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_name", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigUsmArgsDict(TypedDict):
        engine_type: NotRequired[pulumi.Input[str]]
        """
        enum: `local_engine`, `remote_engine`
        """
        engineid: NotRequired[pulumi.Input[str]]
        """
        required only if `engine_type`==`remote_engine`
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgsDict']]]]
elif False:
    NetworktemplateSnmpConfigV3ConfigUsmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigUsmArgs:
    def __init__(__self__, *,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engineid: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]] = None):
        """
        :param pulumi.Input[str] engine_type: enum: `local_engine`, `remote_engine`
        :param pulumi.Input[str] engineid: required only if `engine_type`==`remote_engine`
        """
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engineid is not None:
            pulumi.set(__self__, "engineid", engineid)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `local_engine`, `remote_engine`
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter
    def engineid(self) -> Optional[pulumi.Input[str]]:
        """
        required only if `engine_type`==`remote_engine`
        """
        return pulumi.get(self, "engineid")

    @engineid.setter
    def engineid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engineid", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigUsmUserArgs']]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigUsmUserArgsDict(TypedDict):
        authentication_password: NotRequired[pulumi.Input[str]]
        """
        Not required if `authentication_type`==`authentication_none`
        include alphabetic, numeric, and special characters, but it cannot include control characters.
        """
        authentication_type: NotRequired[pulumi.Input[str]]
        """
        sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        """
        encryption_password: NotRequired[pulumi.Input[str]]
        """
        Not required if `encryption_type`==`privacy-none`
        include alphabetic, numeric, and special characters, but it cannot include control characters
        """
        encryption_type: NotRequired[pulumi.Input[str]]
        """
        enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        name: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateSnmpConfigV3ConfigUsmUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigUsmUserArgs:
    def __init__(__self__, *,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 encryption_password: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication_password: Not required if `authentication_type`==`authentication_none`
               include alphabetic, numeric, and special characters, but it cannot include control characters.
        :param pulumi.Input[str] authentication_type: sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        :param pulumi.Input[str] encryption_password: Not required if `encryption_type`==`privacy-none`
               include alphabetic, numeric, and special characters, but it cannot include control characters
        :param pulumi.Input[str] encryption_type: enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if encryption_password is not None:
            pulumi.set(__self__, "encryption_password", encryption_password)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[str]]:
        """
        Not required if `authentication_type`==`authentication_none`
        include alphabetic, numeric, and special characters, but it cannot include control characters.
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_password", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        """
        sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authentication_md5`, `authentication_none`, `authentication_sha`, `authentication_sha224`, `authentication_sha256`, `authentication_sha384`, `authentication_sha512`
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="encryptionPassword")
    def encryption_password(self) -> Optional[pulumi.Input[str]]:
        """
        Not required if `encryption_type`==`privacy-none`
        include alphabetic, numeric, and special characters, but it cannot include control characters
        """
        return pulumi.get(self, "encryption_password")

    @encryption_password.setter
    def encryption_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_password", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigVacmArgsDict(TypedDict):
        accesses: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgsDict']]]]
        security_to_group: NotRequired[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgsDict']]
elif False:
    NetworktemplateSnmpConfigV3ConfigVacmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmArgs:
    def __init__(__self__, *,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]] = None,
                 security_to_group: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if security_to_group is not None:
            pulumi.set(__self__, "security_to_group", security_to_group)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessArgs']]]]):
        pulumi.set(self, "accesses", value)

    @property
    @pulumi.getter(name="securityToGroup")
    def security_to_group(self) -> Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']]:
        return pulumi.get(self, "security_to_group")

    @security_to_group.setter
    def security_to_group(self, value: Optional[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs']]):
        pulumi.set(self, "security_to_group", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigVacmAccessArgsDict(TypedDict):
        group_name: NotRequired[pulumi.Input[str]]
        prefix_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgsDict']]]]
elif False:
    NetworktemplateSnmpConfigV3ConfigVacmAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmAccessArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]] = None):
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if prefix_lists is not None:
            pulumi.set(__self__, "prefix_lists", prefix_lists)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="prefixLists")
    def prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]]:
        return pulumi.get(self, "prefix_lists")

    @prefix_lists.setter
    def prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs']]]]):
        pulumi.set(self, "prefix_lists", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgsDict(TypedDict):
        context_prefix: NotRequired[pulumi.Input[str]]
        """
        only required if `type`==`context_prefix`
        """
        notify_view: NotRequired[pulumi.Input[str]]
        """
        refer to view name
        """
        read_view: NotRequired[pulumi.Input[str]]
        """
        refer to view name
        """
        security_level: NotRequired[pulumi.Input[str]]
        """
        enum: `authentication`, `none`, `privacy`
        """
        security_model: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `usm`, `v1`, `v2c`
        """
        type: NotRequired[pulumi.Input[str]]
        """
        enum: `context_prefix`, `default_context_prefix`
        """
        write_view: NotRequired[pulumi.Input[str]]
        """
        refer to view name
        """
elif False:
    NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs:
    def __init__(__self__, *,
                 context_prefix: Optional[pulumi.Input[str]] = None,
                 notify_view: Optional[pulumi.Input[str]] = None,
                 read_view: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 security_model: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 write_view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] context_prefix: only required if `type`==`context_prefix`
        :param pulumi.Input[str] notify_view: refer to view name
        :param pulumi.Input[str] read_view: refer to view name
        :param pulumi.Input[str] security_level: enum: `authentication`, `none`, `privacy`
        :param pulumi.Input[str] security_model: enum: `any`, `usm`, `v1`, `v2c`
        :param pulumi.Input[str] type: enum: `context_prefix`, `default_context_prefix`
        :param pulumi.Input[str] write_view: refer to view name
        """
        if context_prefix is not None:
            pulumi.set(__self__, "context_prefix", context_prefix)
        if notify_view is not None:
            pulumi.set(__self__, "notify_view", notify_view)
        if read_view is not None:
            pulumi.set(__self__, "read_view", read_view)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if write_view is not None:
            pulumi.set(__self__, "write_view", write_view)

    @property
    @pulumi.getter(name="contextPrefix")
    def context_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        only required if `type`==`context_prefix`
        """
        return pulumi.get(self, "context_prefix")

    @context_prefix.setter
    def context_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_prefix", value)

    @property
    @pulumi.getter(name="notifyView")
    def notify_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "notify_view")

    @notify_view.setter
    def notify_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_view", value)

    @property
    @pulumi.getter(name="readView")
    def read_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "read_view")

    @read_view.setter
    def read_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_view", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `authentication`, `none`, `privacy`
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `context_prefix`, `default_context_prefix`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="writeView")
    def write_view(self) -> Optional[pulumi.Input[str]]:
        """
        refer to view name
        """
        return pulumi.get(self, "write_view")

    @write_view.setter
    def write_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_view", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgsDict(TypedDict):
        contents: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgsDict']]]]
        security_model: NotRequired[pulumi.Input[str]]
        """
        enum: `usm`, `v1`, `v2c`
        """
elif False:
    NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs:
    def __init__(__self__, *,
                 contents: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]] = None,
                 security_model: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] security_model: enum: `usm`, `v1`, `v2c`
        """
        if contents is not None:
            pulumi.set(__self__, "contents", contents)
        if security_model is not None:
            pulumi.set(__self__, "security_model", security_model)

    @property
    @pulumi.getter
    def contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]]:
        return pulumi.get(self, "contents")

    @contents.setter
    def contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs']]]]):
        pulumi.set(self, "contents", value)

    @property
    @pulumi.getter(name="securityModel")
    def security_model(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `usm`, `v1`, `v2c`
        """
        return pulumi.get(self, "security_model")

    @security_model.setter
    def security_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_model", value)


if not MYPY:
    class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgsDict(TypedDict):
        group: NotRequired[pulumi.Input[str]]
        """
        refer to group_name under access
        """
        security_name: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 security_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group: refer to group_name under access
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if security_name is not None:
            pulumi.set(__self__, "security_name", security_name)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        refer to group_name under access
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="securityName")
    def security_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_name")

    @security_name.setter
    def security_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_name", value)


if not MYPY:
    class NetworktemplateSnmpConfigViewArgsDict(TypedDict):
        include: NotRequired[pulumi.Input[bool]]
        """
        if the root oid configured is included
        """
        oid: NotRequired[pulumi.Input[str]]
        view_name: NotRequired[pulumi.Input[str]]
elif False:
    NetworktemplateSnmpConfigViewArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSnmpConfigViewArgs:
    def __init__(__self__, *,
                 include: Optional[pulumi.Input[bool]] = None,
                 oid: Optional[pulumi.Input[str]] = None,
                 view_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include: if the root oid configured is included
        """
        if include is not None:
            pulumi.set(__self__, "include", include)
        if oid is not None:
            pulumi.set(__self__, "oid", oid)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[bool]]:
        """
        if the root oid configured is included
        """
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include", value)

    @property
    @pulumi.getter
    def oid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oid")

    @oid.setter
    def oid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oid", value)

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_name")

    @view_name.setter
    def view_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_name", value)


if not MYPY:
    class NetworktemplateSwitchMatchingArgsDict(TypedDict):
        enable: NotRequired[pulumi.Input[bool]]
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgsDict']]]]
elif False:
    NetworktemplateSwitchMatchingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMatchingRuleArgs']]]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class NetworktemplateSwitchMatchingRuleArgsDict(TypedDict):
        additional_config_cmds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        additional CLI commands to append to the generated Junos config

        **Note**: no check is done
        """
        ip_config: NotRequired[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgsDict']]
        """
        In-Band Management interface configuration
        """
        match_role: NotRequired[pulumi.Input[str]]
        """
        role to match
        """
        match_type: NotRequired[pulumi.Input[str]]
        """
        'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        """
        match_value: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        oob_ip_config: NotRequired[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgsDict']]
        """
        Out-of-Band Management interface configuration
        """
        port_config: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgsDict']]]]
        """
        Propery key is the interface name or interface range
        """
        port_mirroring: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgsDict']]]]
        """
        Property key is the port mirroring instance name
        port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
        """
elif False:
    NetworktemplateSwitchMatchingRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingRuleArgs:
    def __init__(__self__, *,
                 additional_config_cmds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip_config: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']] = None,
                 match_role: Optional[pulumi.Input[str]] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 match_value: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oob_ip_config: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']] = None,
                 port_config: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]] = None,
                 port_mirroring: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_config_cmds: additional CLI commands to append to the generated Junos config
               
               **Note**: no check is done
        :param pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs'] ip_config: In-Band Management interface configuration
        :param pulumi.Input[str] match_role: role to match
        :param pulumi.Input[str] match_type: 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        :param pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs'] oob_ip_config: Out-of-Band Management interface configuration
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]] port_config: Propery key is the interface name or interface range
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]] port_mirroring: Property key is the port mirroring instance name
               port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
        """
        if additional_config_cmds is not None:
            pulumi.set(__self__, "additional_config_cmds", additional_config_cmds)
        if ip_config is not None:
            pulumi.set(__self__, "ip_config", ip_config)
        if match_role is not None:
            pulumi.set(__self__, "match_role", match_role)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_value is not None:
            pulumi.set(__self__, "match_value", match_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oob_ip_config is not None:
            pulumi.set(__self__, "oob_ip_config", oob_ip_config)
        if port_config is not None:
            pulumi.set(__self__, "port_config", port_config)
        if port_mirroring is not None:
            pulumi.set(__self__, "port_mirroring", port_mirroring)

    @property
    @pulumi.getter(name="additionalConfigCmds")
    def additional_config_cmds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        additional CLI commands to append to the generated Junos config

        **Note**: no check is done
        """
        return pulumi.get(self, "additional_config_cmds")

    @additional_config_cmds.setter
    def additional_config_cmds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_config_cmds", value)

    @property
    @pulumi.getter(name="ipConfig")
    def ip_config(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']]:
        """
        In-Band Management interface configuration
        """
        return pulumi.get(self, "ip_config")

    @ip_config.setter
    def ip_config(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleIpConfigArgs']]):
        pulumi.set(self, "ip_config", value)

    @property
    @pulumi.getter(name="matchRole")
    def match_role(self) -> Optional[pulumi.Input[str]]:
        """
        role to match
        """
        return pulumi.get(self, "match_role")

    @match_role.setter
    def match_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_role", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        """
        'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `match_model`,  `match_model[0-6]`
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_value")

    @match_value.setter
    def match_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="oobIpConfig")
    def oob_ip_config(self) -> Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']]:
        """
        Out-of-Band Management interface configuration
        """
        return pulumi.get(self, "oob_ip_config")

    @oob_ip_config.setter
    def oob_ip_config(self, value: Optional[pulumi.Input['NetworktemplateSwitchMatchingRuleOobIpConfigArgs']]):
        pulumi.set(self, "oob_ip_config", value)

    @property
    @pulumi.getter(name="portConfig")
    def port_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]]:
        """
        Propery key is the interface name or interface range
        """
        return pulumi.get(self, "port_config")

    @port_config.setter
    def port_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortConfigArgs']]]]):
        pulumi.set(self, "port_config", value)

    @property
    @pulumi.getter(name="portMirroring")
    def port_mirroring(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]]:
        """
        Property key is the port mirroring instance name
        port_mirroring can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
        """
        return pulumi.get(self, "port_mirroring")

    @port_mirroring.setter
    def port_mirroring(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMatchingRulePortMirroringArgs']]]]):
        pulumi.set(self, "port_mirroring", value)


if not MYPY:
    class NetworktemplateSwitchMatchingRuleIpConfigArgsDict(TypedDict):
        network: NotRequired[pulumi.Input[str]]
        """
        VLAN Name for the management interface
        """
        type: NotRequired[pulumi.Input[str]]
        """
        enum: `dhcp`, `static`
        """
elif False:
    NetworktemplateSwitchMatchingRuleIpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingRuleIpConfigArgs:
    def __init__(__self__, *,
                 network: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] network: VLAN Name for the management interface
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        """
        if network is not None:
            pulumi.set(__self__, "network", network)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN Name for the management interface
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class NetworktemplateSwitchMatchingRuleOobIpConfigArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[str]]
        """
        enum: `dhcp`, `static`
        """
        use_mgmt_vrf: NotRequired[pulumi.Input[bool]]
        """
        f supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        use_mgmt_vrf_for_host_out: NotRequired[pulumi.Input[bool]]
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
elif False:
    NetworktemplateSwitchMatchingRuleOobIpConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingRuleOobIpConfigArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 use_mgmt_vrf: Optional[pulumi.Input[bool]] = None,
                 use_mgmt_vrf_for_host_out: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: enum: `dhcp`, `static`
        :param pulumi.Input[bool] use_mgmt_vrf: f supported on the platform. If enabled, DNS will be using this routing-instance, too
        :param pulumi.Input[bool] use_mgmt_vrf_for_host_out: for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_mgmt_vrf is not None:
            pulumi.set(__self__, "use_mgmt_vrf", use_mgmt_vrf)
        if use_mgmt_vrf_for_host_out is not None:
            pulumi.set(__self__, "use_mgmt_vrf_for_host_out", use_mgmt_vrf_for_host_out)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `dhcp`, `static`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useMgmtVrf")
    def use_mgmt_vrf(self) -> Optional[pulumi.Input[bool]]:
        """
        f supported on the platform. If enabled, DNS will be using this routing-instance, too
        """
        return pulumi.get(self, "use_mgmt_vrf")

    @use_mgmt_vrf.setter
    def use_mgmt_vrf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf", value)

    @property
    @pulumi.getter(name="useMgmtVrfForHostOut")
    def use_mgmt_vrf_for_host_out(self) -> Optional[pulumi.Input[bool]]:
        """
        for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
        """
        return pulumi.get(self, "use_mgmt_vrf_for_host_out")

    @use_mgmt_vrf_for_host_out.setter
    def use_mgmt_vrf_for_host_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mgmt_vrf_for_host_out", value)


if not MYPY:
    class NetworktemplateSwitchMatchingRulePortConfigArgsDict(TypedDict):
        usage: pulumi.Input[str]
        """
        port usage name. 

        If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        """
        ae_disable_lacp: NotRequired[pulumi.Input[bool]]
        """
        To disable LACP support for the AE interface
        """
        ae_idx: NotRequired[pulumi.Input[int]]
        """
        Users could force to use the designated AE name
        """
        ae_lacp_slow: NotRequired[pulumi.Input[bool]]
        """
        to use fast timeout
        """
        aggregated: NotRequired[pulumi.Input[bool]]
        critical: NotRequired[pulumi.Input[bool]]
        """
        if want to generate port up/down alarm
        """
        description: NotRequired[pulumi.Input[str]]
        disable_autoneg: NotRequired[pulumi.Input[bool]]
        """
        if `speed` and `duplex` are specified, whether to disable autonegotiation
        """
        duplex: NotRequired[pulumi.Input[str]]
        """
        enum: `auto`, `full`, `half`
        """
        dynamic_usage: NotRequired[pulumi.Input[str]]
        """
        Enable dynamic usage for this port. Set to `dynamic` to enable.
        """
        esilag: NotRequired[pulumi.Input[bool]]
        mtu: NotRequired[pulumi.Input[int]]
        """
        media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        """
        no_local_overwrite: NotRequired[pulumi.Input[bool]]
        """
        prevent helpdesk to override the port config
        """
        poe_disabled: NotRequired[pulumi.Input[bool]]
        speed: NotRequired[pulumi.Input[str]]
        """
        enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
elif False:
    NetworktemplateSwitchMatchingRulePortConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingRulePortConfigArgs:
    def __init__(__self__, *,
                 usage: pulumi.Input[str],
                 ae_disable_lacp: Optional[pulumi.Input[bool]] = None,
                 ae_idx: Optional[pulumi.Input[int]] = None,
                 ae_lacp_slow: Optional[pulumi.Input[bool]] = None,
                 aggregated: Optional[pulumi.Input[bool]] = None,
                 critical: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_autoneg: Optional[pulumi.Input[bool]] = None,
                 duplex: Optional[pulumi.Input[str]] = None,
                 dynamic_usage: Optional[pulumi.Input[str]] = None,
                 esilag: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 no_local_overwrite: Optional[pulumi.Input[bool]] = None,
                 poe_disabled: Optional[pulumi.Input[bool]] = None,
                 speed: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] usage: port usage name. 
               
               If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        :param pulumi.Input[bool] ae_disable_lacp: To disable LACP support for the AE interface
        :param pulumi.Input[int] ae_idx: Users could force to use the designated AE name
        :param pulumi.Input[bool] ae_lacp_slow: to use fast timeout
        :param pulumi.Input[bool] critical: if want to generate port up/down alarm
        :param pulumi.Input[bool] disable_autoneg: if `speed` and `duplex` are specified, whether to disable autonegotiation
        :param pulumi.Input[str] duplex: enum: `auto`, `full`, `half`
        :param pulumi.Input[str] dynamic_usage: Enable dynamic usage for this port. Set to `dynamic` to enable.
        :param pulumi.Input[int] mtu: media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        :param pulumi.Input[bool] no_local_overwrite: prevent helpdesk to override the port config
        :param pulumi.Input[str] speed: enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        pulumi.set(__self__, "usage", usage)
        if ae_disable_lacp is not None:
            pulumi.set(__self__, "ae_disable_lacp", ae_disable_lacp)
        if ae_idx is not None:
            pulumi.set(__self__, "ae_idx", ae_idx)
        if ae_lacp_slow is not None:
            pulumi.set(__self__, "ae_lacp_slow", ae_lacp_slow)
        if aggregated is not None:
            pulumi.set(__self__, "aggregated", aggregated)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_autoneg is not None:
            pulumi.set(__self__, "disable_autoneg", disable_autoneg)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if dynamic_usage is not None:
            pulumi.set(__self__, "dynamic_usage", dynamic_usage)
        if esilag is not None:
            pulumi.set(__self__, "esilag", esilag)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if no_local_overwrite is not None:
            pulumi.set(__self__, "no_local_overwrite", no_local_overwrite)
        if poe_disabled is not None:
            pulumi.set(__self__, "poe_disabled", poe_disabled)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[str]:
        """
        port usage name. 

        If EVPN is used, use `evpn_uplink`or `evpn_downlink`
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter(name="aeDisableLacp")
    def ae_disable_lacp(self) -> Optional[pulumi.Input[bool]]:
        """
        To disable LACP support for the AE interface
        """
        return pulumi.get(self, "ae_disable_lacp")

    @ae_disable_lacp.setter
    def ae_disable_lacp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_disable_lacp", value)

    @property
    @pulumi.getter(name="aeIdx")
    def ae_idx(self) -> Optional[pulumi.Input[int]]:
        """
        Users could force to use the designated AE name
        """
        return pulumi.get(self, "ae_idx")

    @ae_idx.setter
    def ae_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ae_idx", value)

    @property
    @pulumi.getter(name="aeLacpSlow")
    def ae_lacp_slow(self) -> Optional[pulumi.Input[bool]]:
        """
        to use fast timeout
        """
        return pulumi.get(self, "ae_lacp_slow")

    @ae_lacp_slow.setter
    def ae_lacp_slow(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ae_lacp_slow", value)

    @property
    @pulumi.getter
    def aggregated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "aggregated")

    @aggregated.setter
    def aggregated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aggregated", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        """
        if want to generate port up/down alarm
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableAutoneg")
    def disable_autoneg(self) -> Optional[pulumi.Input[bool]]:
        """
        if `speed` and `duplex` are specified, whether to disable autonegotiation
        """
        return pulumi.get(self, "disable_autoneg")

    @disable_autoneg.setter
    def disable_autoneg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_autoneg", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `auto`, `full`, `half`
        """
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter(name="dynamicUsage")
    def dynamic_usage(self) -> Optional[pulumi.Input[str]]:
        """
        Enable dynamic usage for this port. Set to `dynamic` to enable.
        """
        return pulumi.get(self, "dynamic_usage")

    @dynamic_usage.setter
    def dynamic_usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_usage", value)

    @property
    @pulumi.getter
    def esilag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "esilag")

    @esilag.setter
    def esilag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "esilag", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="noLocalOverwrite")
    def no_local_overwrite(self) -> Optional[pulumi.Input[bool]]:
        """
        prevent helpdesk to override the port config
        """
        return pulumi.get(self, "no_local_overwrite")

    @no_local_overwrite.setter
    def no_local_overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_local_overwrite", value)

    @property
    @pulumi.getter(name="poeDisabled")
    def poe_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "poe_disabled")

    @poe_disabled.setter
    def poe_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "poe_disabled", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `auto`
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)


if not MYPY:
    class NetworktemplateSwitchMatchingRulePortMirroringArgsDict(TypedDict):
        input_networks_ingresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        input_port_ids_egresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        input_port_ids_ingresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        output_network: NotRequired[pulumi.Input[str]]
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        output_port_id: NotRequired[pulumi.Input[str]]
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
elif False:
    NetworktemplateSwitchMatchingRulePortMirroringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMatchingRulePortMirroringArgs:
    def __init__(__self__, *,
                 input_networks_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_egresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_port_ids_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 output_network: Optional[pulumi.Input[str]] = None,
                 output_port_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_networks_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_egresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_port_ids_ingresses: at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        :param pulumi.Input[str] output_network: exaclty one of the `output_port_id` or `output_network` should be provided
        :param pulumi.Input[str] output_port_id: exaclty one of the `output_port_id` or `output_network` should be provided
        """
        if input_networks_ingresses is not None:
            pulumi.set(__self__, "input_networks_ingresses", input_networks_ingresses)
        if input_port_ids_egresses is not None:
            pulumi.set(__self__, "input_port_ids_egresses", input_port_ids_egresses)
        if input_port_ids_ingresses is not None:
            pulumi.set(__self__, "input_port_ids_ingresses", input_port_ids_ingresses)
        if output_network is not None:
            pulumi.set(__self__, "output_network", output_network)
        if output_port_id is not None:
            pulumi.set(__self__, "output_port_id", output_port_id)

    @property
    @pulumi.getter(name="inputNetworksIngresses")
    def input_networks_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_networks_ingresses")

    @input_networks_ingresses.setter
    def input_networks_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_networks_ingresses", value)

    @property
    @pulumi.getter(name="inputPortIdsEgresses")
    def input_port_ids_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_egresses")

    @input_port_ids_egresses.setter
    def input_port_ids_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_egresses", value)

    @property
    @pulumi.getter(name="inputPortIdsIngresses")
    def input_port_ids_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        at least one of the `input_port_ids_ingress`, `input_port_ids_egress` or `input_networks_ingress ` should be specified
        """
        return pulumi.get(self, "input_port_ids_ingresses")

    @input_port_ids_ingresses.setter
    def input_port_ids_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_port_ids_ingresses", value)

    @property
    @pulumi.getter(name="outputNetwork")
    def output_network(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_network")

    @output_network.setter
    def output_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_network", value)

    @property
    @pulumi.getter(name="outputPortId")
    def output_port_id(self) -> Optional[pulumi.Input[str]]:
        """
        exaclty one of the `output_port_id` or `output_network` should be provided
        """
        return pulumi.get(self, "output_port_id")

    @output_port_id.setter
    def output_port_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_port_id", value)


if not MYPY:
    class NetworktemplateSwitchMgmtArgsDict(TypedDict):
        ap_affinity_threshold: NotRequired[pulumi.Input[int]]
        """
        ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        cli_banner: NotRequired[pulumi.Input[str]]
        """
        Set Banners for switches. Allows markup formatting
        """
        cli_idle_timeout: NotRequired[pulumi.Input[int]]
        """
        Sets timeout for switches
        """
        config_revert_timer: NotRequired[pulumi.Input[int]]
        """
        the rollback timer for commit confirmed
        """
        dhcp_option_fqdn: NotRequired[pulumi.Input[bool]]
        """
        Enable to provide the FQDN with DHCP option 81
        """
        disable_oob_down_alarm: NotRequired[pulumi.Input[bool]]
        local_accounts: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgsDict']]]]
        """
        Property key is the user name. For Local user authentication
        """
        mxedge_proxy_host: NotRequired[pulumi.Input[str]]
        mxedge_proxy_port: NotRequired[pulumi.Input[int]]
        protect_re: NotRequired[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgsDict']]
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        root_password: NotRequired[pulumi.Input[str]]
        tacacs: NotRequired[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgsDict']]
        use_mxedge_proxy: NotRequired[pulumi.Input[bool]]
        """
        to use mxedge as proxy
        """
elif False:
    NetworktemplateSwitchMgmtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtArgs:
    def __init__(__self__, *,
                 ap_affinity_threshold: Optional[pulumi.Input[int]] = None,
                 cli_banner: Optional[pulumi.Input[str]] = None,
                 cli_idle_timeout: Optional[pulumi.Input[int]] = None,
                 config_revert_timer: Optional[pulumi.Input[int]] = None,
                 dhcp_option_fqdn: Optional[pulumi.Input[bool]] = None,
                 disable_oob_down_alarm: Optional[pulumi.Input[bool]] = None,
                 local_accounts: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]] = None,
                 mxedge_proxy_host: Optional[pulumi.Input[str]] = None,
                 mxedge_proxy_port: Optional[pulumi.Input[int]] = None,
                 protect_re: Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 tacacs: Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']] = None,
                 use_mxedge_proxy: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] ap_affinity_threshold: ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        :param pulumi.Input[str] cli_banner: Set Banners for switches. Allows markup formatting
        :param pulumi.Input[int] cli_idle_timeout: Sets timeout for switches
        :param pulumi.Input[int] config_revert_timer: the rollback timer for commit confirmed
        :param pulumi.Input[bool] dhcp_option_fqdn: Enable to provide the FQDN with DHCP option 81
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]] local_accounts: Property key is the user name. For Local user authentication
        :param pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs'] protect_re: restrict inbound-traffic to host
               when enabled, all traffic that is not essential to our operation will be dropped 
               e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[bool] use_mxedge_proxy: to use mxedge as proxy
        """
        if ap_affinity_threshold is not None:
            pulumi.set(__self__, "ap_affinity_threshold", ap_affinity_threshold)
        if cli_banner is not None:
            pulumi.set(__self__, "cli_banner", cli_banner)
        if cli_idle_timeout is not None:
            pulumi.set(__self__, "cli_idle_timeout", cli_idle_timeout)
        if config_revert_timer is not None:
            pulumi.set(__self__, "config_revert_timer", config_revert_timer)
        if dhcp_option_fqdn is not None:
            pulumi.set(__self__, "dhcp_option_fqdn", dhcp_option_fqdn)
        if disable_oob_down_alarm is not None:
            pulumi.set(__self__, "disable_oob_down_alarm", disable_oob_down_alarm)
        if local_accounts is not None:
            pulumi.set(__self__, "local_accounts", local_accounts)
        if mxedge_proxy_host is not None:
            pulumi.set(__self__, "mxedge_proxy_host", mxedge_proxy_host)
        if mxedge_proxy_port is not None:
            pulumi.set(__self__, "mxedge_proxy_port", mxedge_proxy_port)
        if protect_re is not None:
            pulumi.set(__self__, "protect_re", protect_re)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if tacacs is not None:
            pulumi.set(__self__, "tacacs", tacacs)
        if use_mxedge_proxy is not None:
            pulumi.set(__self__, "use_mxedge_proxy", use_mxedge_proxy)

    @property
    @pulumi.getter(name="apAffinityThreshold")
    def ap_affinity_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        ap_affinity_threshold ap_affinity_threshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
        """
        return pulumi.get(self, "ap_affinity_threshold")

    @ap_affinity_threshold.setter
    def ap_affinity_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_affinity_threshold", value)

    @property
    @pulumi.getter(name="cliBanner")
    def cli_banner(self) -> Optional[pulumi.Input[str]]:
        """
        Set Banners for switches. Allows markup formatting
        """
        return pulumi.get(self, "cli_banner")

    @cli_banner.setter
    def cli_banner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_banner", value)

    @property
    @pulumi.getter(name="cliIdleTimeout")
    def cli_idle_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Sets timeout for switches
        """
        return pulumi.get(self, "cli_idle_timeout")

    @cli_idle_timeout.setter
    def cli_idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_idle_timeout", value)

    @property
    @pulumi.getter(name="configRevertTimer")
    def config_revert_timer(self) -> Optional[pulumi.Input[int]]:
        """
        the rollback timer for commit confirmed
        """
        return pulumi.get(self, "config_revert_timer")

    @config_revert_timer.setter
    def config_revert_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_revert_timer", value)

    @property
    @pulumi.getter(name="dhcpOptionFqdn")
    def dhcp_option_fqdn(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable to provide the FQDN with DHCP option 81
        """
        return pulumi.get(self, "dhcp_option_fqdn")

    @dhcp_option_fqdn.setter
    def dhcp_option_fqdn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp_option_fqdn", value)

    @property
    @pulumi.getter(name="disableOobDownAlarm")
    def disable_oob_down_alarm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_oob_down_alarm")

    @disable_oob_down_alarm.setter
    def disable_oob_down_alarm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_oob_down_alarm", value)

    @property
    @pulumi.getter(name="localAccounts")
    def local_accounts(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]]:
        """
        Property key is the user name. For Local user authentication
        """
        return pulumi.get(self, "local_accounts")

    @local_accounts.setter
    def local_accounts(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateSwitchMgmtLocalAccountsArgs']]]]):
        pulumi.set(self, "local_accounts", value)

    @property
    @pulumi.getter(name="mxedgeProxyHost")
    def mxedge_proxy_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mxedge_proxy_host")

    @mxedge_proxy_host.setter
    def mxedge_proxy_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mxedge_proxy_host", value)

    @property
    @pulumi.getter(name="mxedgeProxyPort")
    def mxedge_proxy_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mxedge_proxy_port")

    @mxedge_proxy_port.setter
    def mxedge_proxy_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mxedge_proxy_port", value)

    @property
    @pulumi.getter(name="protectRe")
    def protect_re(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']]:
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "protect_re")

    @protect_re.setter
    def protect_re(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtProtectReArgs']]):
        pulumi.set(self, "protect_re", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter
    def tacacs(self) -> Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']]:
        return pulumi.get(self, "tacacs")

    @tacacs.setter
    def tacacs(self, value: Optional[pulumi.Input['NetworktemplateSwitchMgmtTacacsArgs']]):
        pulumi.set(self, "tacacs", value)

    @property
    @pulumi.getter(name="useMxedgeProxy")
    def use_mxedge_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        to use mxedge as proxy
        """
        return pulumi.get(self, "use_mxedge_proxy")

    @use_mxedge_proxy.setter
    def use_mxedge_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mxedge_proxy", value)


if not MYPY:
    class NetworktemplateSwitchMgmtLocalAccountsArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[str]]
        role: NotRequired[pulumi.Input[str]]
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
elif False:
    NetworktemplateSwitchMgmtLocalAccountsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtLocalAccountsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role: enum: `admin`, `helpdesk`, `none`, `read`
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


if not MYPY:
    class NetworktemplateSwitchMgmtProtectReArgsDict(TypedDict):
        allowed_services: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        optionally, services we'll allow. enum: `icmp`, `ssh`
        """
        customs: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgsDict']]]]
        enabled: NotRequired[pulumi.Input[bool]]
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        trusted_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        host/subnets we'll allow traffic to/from
        """
elif False:
    NetworktemplateSwitchMgmtProtectReArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtProtectReArgs:
    def __init__(__self__, *,
                 allowed_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 customs: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 trusted_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_services: optionally, services we'll allow. enum: `icmp`, `ssh`
        :param pulumi.Input[bool] enabled: when enabled, all traffic that is not essential to our operation will be dropped
               e.g. ntp / dns / traffic to mist will be allowed by default
                    if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trusted_hosts: host/subnets we'll allow traffic to/from
        """
        if allowed_services is not None:
            pulumi.set(__self__, "allowed_services", allowed_services)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if trusted_hosts is not None:
            pulumi.set(__self__, "trusted_hosts", trusted_hosts)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optionally, services we'll allow. enum: `icmp`, `ssh`
        """
        return pulumi.get(self, "allowed_services")

    @allowed_services.setter
    def allowed_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_services", value)

    @property
    @pulumi.getter
    def customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]]:
        return pulumi.get(self, "customs")

    @customs.setter
    def customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtProtectReCustomArgs']]]]):
        pulumi.set(self, "customs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trustedHosts")
    def trusted_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        host/subnets we'll allow traffic to/from
        """
        return pulumi.get(self, "trusted_hosts")

    @trusted_hosts.setter
    def trusted_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_hosts", value)


if not MYPY:
    class NetworktemplateSwitchMgmtProtectReCustomArgsDict(TypedDict):
        subnets: pulumi.Input[Sequence[pulumi.Input[str]]]
        port_range: NotRequired[pulumi.Input[str]]
        """
        matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
elif False:
    NetworktemplateSwitchMgmtProtectReCustomArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtProtectReCustomArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port_range: matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        :param pulumi.Input[str] protocol: enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class NetworktemplateSwitchMgmtTacacsArgsDict(TypedDict):
        acct_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgsDict']]]]
        default_role: NotRequired[pulumi.Input[str]]
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        enabled: NotRequired[pulumi.Input[bool]]
        network: NotRequired[pulumi.Input[str]]
        """
        which network the TACACS server resides
        """
        tacplus_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgsDict']]]]
elif False:
    NetworktemplateSwitchMgmtTacacsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsArgs:
    def __init__(__self__, *,
                 acct_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]] = None,
                 default_role: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 tacplus_servers: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]] = None):
        """
        :param pulumi.Input[str] default_role: enum: `admin`, `helpdesk`, `none`, `read`
        :param pulumi.Input[str] network: which network the TACACS server resides
        """
        if acct_servers is not None:
            pulumi.set(__self__, "acct_servers", acct_servers)
        if default_role is not None:
            pulumi.set(__self__, "default_role", default_role)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if tacplus_servers is not None:
            pulumi.set(__self__, "tacplus_servers", tacplus_servers)

    @property
    @pulumi.getter(name="acctServers")
    def acct_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]]:
        return pulumi.get(self, "acct_servers")

    @acct_servers.setter
    def acct_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsAcctServerArgs']]]]):
        pulumi.set(self, "acct_servers", value)

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `admin`, `helpdesk`, `none`, `read`
        """
        return pulumi.get(self, "default_role")

    @default_role.setter
    def default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_role", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        which network the TACACS server resides
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="tacplusServers")
    def tacplus_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]]:
        return pulumi.get(self, "tacplus_servers")

    @tacplus_servers.setter
    def tacplus_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworktemplateSwitchMgmtTacacsTacplusServerArgs']]]]):
        pulumi.set(self, "tacplus_servers", value)


if not MYPY:
    class NetworktemplateSwitchMgmtTacacsAcctServerArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[str]]
        secret: NotRequired[pulumi.Input[str]]
        timeout: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateSwitchMgmtTacacsAcctServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsAcctServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class NetworktemplateSwitchMgmtTacacsTacplusServerArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[str]]
        secret: NotRequired[pulumi.Input[str]]
        timeout: NotRequired[pulumi.Input[int]]
elif False:
    NetworktemplateSwitchMgmtTacacsTacplusServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateSwitchMgmtTacacsTacplusServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class NetworktemplateUplinkPortConfigArgsDict(TypedDict):
        dot1x: NotRequired[pulumi.Input[bool]]
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        keep_wlans_up_if_down: NotRequired[pulumi.Input[bool]]
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
elif False:
    NetworktemplateUplinkPortConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateUplinkPortConfigArgs:
    def __init__(__self__, *,
                 dot1x: Optional[pulumi.Input[bool]] = None,
                 keep_wlans_up_if_down: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] dot1x: Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        :param pulumi.Input[bool] keep_wlans_up_if_down: by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        if dot1x is not None:
            pulumi.set(__self__, "dot1x", dot1x)
        if keep_wlans_up_if_down is not None:
            pulumi.set(__self__, "keep_wlans_up_if_down", keep_wlans_up_if_down)

    @property
    @pulumi.getter
    def dot1x(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        return pulumi.get(self, "dot1x")

    @dot1x.setter
    def dot1x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dot1x", value)

    @property
    @pulumi.getter(name="keepWlansUpIfDown")
    def keep_wlans_up_if_down(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        return pulumi.get(self, "keep_wlans_up_if_down")

    @keep_wlans_up_if_down.setter
    def keep_wlans_up_if_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_wlans_up_if_down", value)


if not MYPY:
    class NetworktemplateVrfConfigArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to enable VRF (when supported on the device)
        """
elif False:
    NetworktemplateVrfConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateVrfConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable VRF (when supported on the device)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable VRF (when supported on the device)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class NetworktemplateVrfInstancesArgsDict(TypedDict):
        extra_routes: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgsDict']]]]
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        networks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    NetworktemplateVrfInstancesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateVrfInstancesArgs:
    def __init__(__self__, *,
                 extra_routes: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]] extra_routes: Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        if extra_routes is not None:
            pulumi.set(__self__, "extra_routes", extra_routes)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter(name="extraRoutes")
    def extra_routes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]]:
        """
        Property key is the destination CIDR (e.g. "10.0.0.0/8")
        """
        return pulumi.get(self, "extra_routes")

    @extra_routes.setter
    def extra_routes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['NetworktemplateVrfInstancesExtraRoutesArgs']]]]):
        pulumi.set(self, "extra_routes", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


if not MYPY:
    class NetworktemplateVrfInstancesExtraRoutesArgsDict(TypedDict):
        via: pulumi.Input[str]
        """
        Next-hop address
        """
elif False:
    NetworktemplateVrfInstancesExtraRoutesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworktemplateVrfInstancesExtraRoutesArgs:
    def __init__(__self__, *,
                 via: pulumi.Input[str]):
        """
        :param pulumi.Input[str] via: Next-hop address
        """
        pulumi.set(__self__, "via", via)

    @property
    @pulumi.getter
    def via(self) -> pulumi.Input[str]:
        """
        Next-hop address
        """
        return pulumi.get(self, "via")

    @via.setter
    def via(self, value: pulumi.Input[str]):
        pulumi.set(self, "via", value)


if not MYPY:
    class SettingAnalyticArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        enable Advanced Analytic feature (using SUB-ANA license)
        """
elif False:
    SettingAnalyticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingAnalyticArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: enable Advanced Analytic feature (using SUB-ANA license)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enable Advanced Analytic feature (using SUB-ANA license)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingAutoUpgradeArgsDict(TypedDict):
        custom_versions: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        custom versions for different models. Property key is the model name (e.g. "AP41")
        """
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
        """
        time_of_day: NotRequired[pulumi.Input[str]]
        """
        any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
        """
        version: NotRequired[pulumi.Input[str]]
        """
        desired version. enum: `beta`, `custom`, `stable`
        """
elif False:
    SettingAutoUpgradeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingAutoUpgradeArgs:
    def __init__(__self__, *,
                 custom_versions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 time_of_day: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_versions: custom versions for different models. Property key is the model name (e.g. "AP41")
        :param pulumi.Input[str] day_of_week: enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        :param pulumi.Input[bool] enabled: whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
        :param pulumi.Input[str] time_of_day: any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
        :param pulumi.Input[str] version: desired version. enum: `beta`, `custom`, `stable`
        """
        if custom_versions is not None:
            pulumi.set(__self__, "custom_versions", custom_versions)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if time_of_day is not None:
            pulumi.set(__self__, "time_of_day", time_of_day)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="customVersions")
    def custom_versions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        custom versions for different models. Property key is the model name (e.g. "AP41")
        """
        return pulumi.get(self, "custom_versions")

    @custom_versions.setter
    def custom_versions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_versions", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> Optional[pulumi.Input[str]]:
        """
        any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
        """
        return pulumi.get(self, "time_of_day")

    @time_of_day.setter
    def time_of_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_day", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        desired version. enum: `beta`, `custom`, `stable`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class SettingBleConfigArgsDict(TypedDict):
        beacon_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether Mist beacons is enabled
        """
        beacon_rate: NotRequired[pulumi.Input[int]]
        """
        required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        """
        beacon_rate_mode: NotRequired[pulumi.Input[str]]
        """
        enum: `custom`, `default`
        """
        beam_disableds: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        """
        custom_ble_packet_enabled: NotRequired[pulumi.Input[bool]]
        """
        can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        """
        custom_ble_packet_frame: NotRequired[pulumi.Input[str]]
        """
        The custom frame to be sent out in this beacon. The frame must be a hexstring
        """
        custom_ble_packet_freq_msec: NotRequired[pulumi.Input[int]]
        """
        Frequency (msec) of data emitted by custom ble beacon
        """
        eddystone_uid_adv_power: NotRequired[pulumi.Input[int]]
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        eddystone_uid_beams: NotRequired[pulumi.Input[str]]
        eddystone_uid_enabled: NotRequired[pulumi.Input[bool]]
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        """
        eddystone_uid_freq_msec: NotRequired[pulumi.Input[int]]
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        eddystone_uid_instance: NotRequired[pulumi.Input[str]]
        """
        Eddystone-UID instance for the device
        """
        eddystone_uid_namespace: NotRequired[pulumi.Input[str]]
        """
        Eddystone-UID namespace
        """
        eddystone_url_adv_power: NotRequired[pulumi.Input[int]]
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        eddystone_url_beams: NotRequired[pulumi.Input[str]]
        eddystone_url_enabled: NotRequired[pulumi.Input[bool]]
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        """
        eddystone_url_freq_msec: NotRequired[pulumi.Input[int]]
        """
        Frequency (msec) of data emit by Eddystone-UID beacon
        """
        eddystone_url_url: NotRequired[pulumi.Input[str]]
        """
        URL pointed by Eddystone-URL beacon
        """
        ibeacon_adv_power: NotRequired[pulumi.Input[int]]
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        ibeacon_beams: NotRequired[pulumi.Input[str]]
        ibeacon_enabled: NotRequired[pulumi.Input[bool]]
        """
        can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        """
        ibeacon_freq_msec: NotRequired[pulumi.Input[int]]
        """
        Frequency (msec) of data emmit for iBeacon
        """
        ibeacon_major: NotRequired[pulumi.Input[int]]
        """
        Major number for iBeacon
        """
        ibeacon_minor: NotRequired[pulumi.Input[int]]
        """
        Minor number for iBeacon
        """
        ibeacon_uuid: NotRequired[pulumi.Input[str]]
        """
        optional, if not specified, the same UUID as the beacon will be used
        """
        power: NotRequired[pulumi.Input[int]]
        """
        required if `power_mode`==`custom`
        """
        power_mode: NotRequired[pulumi.Input[str]]
        """
        enum: `custom`, `default`
        """
elif False:
    SettingBleConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingBleConfigArgs:
    def __init__(__self__, *,
                 beacon_enabled: Optional[pulumi.Input[bool]] = None,
                 beacon_rate: Optional[pulumi.Input[int]] = None,
                 beacon_rate_mode: Optional[pulumi.Input[str]] = None,
                 beam_disableds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 custom_ble_packet_enabled: Optional[pulumi.Input[bool]] = None,
                 custom_ble_packet_frame: Optional[pulumi.Input[str]] = None,
                 custom_ble_packet_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_adv_power: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_beams: Optional[pulumi.Input[str]] = None,
                 eddystone_uid_enabled: Optional[pulumi.Input[bool]] = None,
                 eddystone_uid_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_uid_instance: Optional[pulumi.Input[str]] = None,
                 eddystone_uid_namespace: Optional[pulumi.Input[str]] = None,
                 eddystone_url_adv_power: Optional[pulumi.Input[int]] = None,
                 eddystone_url_beams: Optional[pulumi.Input[str]] = None,
                 eddystone_url_enabled: Optional[pulumi.Input[bool]] = None,
                 eddystone_url_freq_msec: Optional[pulumi.Input[int]] = None,
                 eddystone_url_url: Optional[pulumi.Input[str]] = None,
                 ibeacon_adv_power: Optional[pulumi.Input[int]] = None,
                 ibeacon_beams: Optional[pulumi.Input[str]] = None,
                 ibeacon_enabled: Optional[pulumi.Input[bool]] = None,
                 ibeacon_freq_msec: Optional[pulumi.Input[int]] = None,
                 ibeacon_major: Optional[pulumi.Input[int]] = None,
                 ibeacon_minor: Optional[pulumi.Input[int]] = None,
                 ibeacon_uuid: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] beacon_enabled: whether Mist beacons is enabled
        :param pulumi.Input[int] beacon_rate: required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        :param pulumi.Input[str] beacon_rate_mode: enum: `custom`, `default`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] beam_disableds: list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        :param pulumi.Input[bool] custom_ble_packet_enabled: can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        :param pulumi.Input[str] custom_ble_packet_frame: The custom frame to be sent out in this beacon. The frame must be a hexstring
        :param pulumi.Input[int] custom_ble_packet_freq_msec: Frequency (msec) of data emitted by custom ble beacon
        :param pulumi.Input[int] eddystone_uid_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] eddystone_uid_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        :param pulumi.Input[int] eddystone_uid_freq_msec: Frequency (msec) of data emmit by Eddystone-UID beacon
        :param pulumi.Input[str] eddystone_uid_instance: Eddystone-UID instance for the device
        :param pulumi.Input[str] eddystone_uid_namespace: Eddystone-UID namespace
        :param pulumi.Input[int] eddystone_url_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] eddystone_url_enabled: only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        :param pulumi.Input[int] eddystone_url_freq_msec: Frequency (msec) of data emit by Eddystone-UID beacon
        :param pulumi.Input[str] eddystone_url_url: URL pointed by Eddystone-URL beacon
        :param pulumi.Input[int] ibeacon_adv_power: advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        :param pulumi.Input[bool] ibeacon_enabled: can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        :param pulumi.Input[int] ibeacon_freq_msec: Frequency (msec) of data emmit for iBeacon
        :param pulumi.Input[int] ibeacon_major: Major number for iBeacon
        :param pulumi.Input[int] ibeacon_minor: Minor number for iBeacon
        :param pulumi.Input[str] ibeacon_uuid: optional, if not specified, the same UUID as the beacon will be used
        :param pulumi.Input[int] power: required if `power_mode`==`custom`
        :param pulumi.Input[str] power_mode: enum: `custom`, `default`
        """
        if beacon_enabled is not None:
            pulumi.set(__self__, "beacon_enabled", beacon_enabled)
        if beacon_rate is not None:
            pulumi.set(__self__, "beacon_rate", beacon_rate)
        if beacon_rate_mode is not None:
            pulumi.set(__self__, "beacon_rate_mode", beacon_rate_mode)
        if beam_disableds is not None:
            pulumi.set(__self__, "beam_disableds", beam_disableds)
        if custom_ble_packet_enabled is not None:
            pulumi.set(__self__, "custom_ble_packet_enabled", custom_ble_packet_enabled)
        if custom_ble_packet_frame is not None:
            pulumi.set(__self__, "custom_ble_packet_frame", custom_ble_packet_frame)
        if custom_ble_packet_freq_msec is not None:
            pulumi.set(__self__, "custom_ble_packet_freq_msec", custom_ble_packet_freq_msec)
        if eddystone_uid_adv_power is not None:
            pulumi.set(__self__, "eddystone_uid_adv_power", eddystone_uid_adv_power)
        if eddystone_uid_beams is not None:
            pulumi.set(__self__, "eddystone_uid_beams", eddystone_uid_beams)
        if eddystone_uid_enabled is not None:
            pulumi.set(__self__, "eddystone_uid_enabled", eddystone_uid_enabled)
        if eddystone_uid_freq_msec is not None:
            pulumi.set(__self__, "eddystone_uid_freq_msec", eddystone_uid_freq_msec)
        if eddystone_uid_instance is not None:
            pulumi.set(__self__, "eddystone_uid_instance", eddystone_uid_instance)
        if eddystone_uid_namespace is not None:
            pulumi.set(__self__, "eddystone_uid_namespace", eddystone_uid_namespace)
        if eddystone_url_adv_power is not None:
            pulumi.set(__self__, "eddystone_url_adv_power", eddystone_url_adv_power)
        if eddystone_url_beams is not None:
            pulumi.set(__self__, "eddystone_url_beams", eddystone_url_beams)
        if eddystone_url_enabled is not None:
            pulumi.set(__self__, "eddystone_url_enabled", eddystone_url_enabled)
        if eddystone_url_freq_msec is not None:
            pulumi.set(__self__, "eddystone_url_freq_msec", eddystone_url_freq_msec)
        if eddystone_url_url is not None:
            pulumi.set(__self__, "eddystone_url_url", eddystone_url_url)
        if ibeacon_adv_power is not None:
            pulumi.set(__self__, "ibeacon_adv_power", ibeacon_adv_power)
        if ibeacon_beams is not None:
            pulumi.set(__self__, "ibeacon_beams", ibeacon_beams)
        if ibeacon_enabled is not None:
            pulumi.set(__self__, "ibeacon_enabled", ibeacon_enabled)
        if ibeacon_freq_msec is not None:
            pulumi.set(__self__, "ibeacon_freq_msec", ibeacon_freq_msec)
        if ibeacon_major is not None:
            pulumi.set(__self__, "ibeacon_major", ibeacon_major)
        if ibeacon_minor is not None:
            pulumi.set(__self__, "ibeacon_minor", ibeacon_minor)
        if ibeacon_uuid is not None:
            pulumi.set(__self__, "ibeacon_uuid", ibeacon_uuid)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)

    @property
    @pulumi.getter(name="beaconEnabled")
    def beacon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether Mist beacons is enabled
        """
        return pulumi.get(self, "beacon_enabled")

    @beacon_enabled.setter
    def beacon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "beacon_enabled", value)

    @property
    @pulumi.getter(name="beaconRate")
    def beacon_rate(self) -> Optional[pulumi.Input[int]]:
        """
        required if `beacon_rate_mode`==`custom`, 1-10, in number-beacons-per-second
        """
        return pulumi.get(self, "beacon_rate")

    @beacon_rate.setter
    def beacon_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_rate", value)

    @property
    @pulumi.getter(name="beaconRateMode")
    def beacon_rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "beacon_rate_mode")

    @beacon_rate_mode.setter
    def beacon_rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_rate_mode", value)

    @property
    @pulumi.getter(name="beamDisableds")
    def beam_disableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
        """
        return pulumi.get(self, "beam_disableds")

    @beam_disableds.setter
    def beam_disableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "beam_disableds", value)

    @property
    @pulumi.getter(name="customBlePacketEnabled")
    def custom_ble_packet_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send custom packet
        """
        return pulumi.get(self, "custom_ble_packet_enabled")

    @custom_ble_packet_enabled.setter
    def custom_ble_packet_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_ble_packet_enabled", value)

    @property
    @pulumi.getter(name="customBlePacketFrame")
    def custom_ble_packet_frame(self) -> Optional[pulumi.Input[str]]:
        """
        The custom frame to be sent out in this beacon. The frame must be a hexstring
        """
        return pulumi.get(self, "custom_ble_packet_frame")

    @custom_ble_packet_frame.setter
    def custom_ble_packet_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_ble_packet_frame", value)

    @property
    @pulumi.getter(name="customBlePacketFreqMsec")
    def custom_ble_packet_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emitted by custom ble beacon
        """
        return pulumi.get(self, "custom_ble_packet_freq_msec")

    @custom_ble_packet_freq_msec.setter
    def custom_ble_packet_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_ble_packet_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUidAdvPower")
    def eddystone_uid_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_uid_adv_power")

    @eddystone_uid_adv_power.setter
    def eddystone_uid_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_uid_adv_power", value)

    @property
    @pulumi.getter(name="eddystoneUidBeams")
    def eddystone_uid_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eddystone_uid_beams")

    @eddystone_uid_beams.setter
    def eddystone_uid_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_beams", value)

    @property
    @pulumi.getter(name="eddystoneUidEnabled")
    def eddystone_uid_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-UID beacon is enabled
        """
        return pulumi.get(self, "eddystone_uid_enabled")

    @eddystone_uid_enabled.setter
    def eddystone_uid_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eddystone_uid_enabled", value)

    @property
    @pulumi.getter(name="eddystoneUidFreqMsec")
    def eddystone_uid_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emmit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_uid_freq_msec")

    @eddystone_uid_freq_msec.setter
    def eddystone_uid_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_uid_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUidInstance")
    def eddystone_uid_instance(self) -> Optional[pulumi.Input[str]]:
        """
        Eddystone-UID instance for the device
        """
        return pulumi.get(self, "eddystone_uid_instance")

    @eddystone_uid_instance.setter
    def eddystone_uid_instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_instance", value)

    @property
    @pulumi.getter(name="eddystoneUidNamespace")
    def eddystone_uid_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Eddystone-UID namespace
        """
        return pulumi.get(self, "eddystone_uid_namespace")

    @eddystone_uid_namespace.setter
    def eddystone_uid_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_uid_namespace", value)

    @property
    @pulumi.getter(name="eddystoneUrlAdvPower")
    def eddystone_url_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "eddystone_url_adv_power")

    @eddystone_url_adv_power.setter
    def eddystone_url_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_url_adv_power", value)

    @property
    @pulumi.getter(name="eddystoneUrlBeams")
    def eddystone_url_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "eddystone_url_beams")

    @eddystone_url_beams.setter
    def eddystone_url_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_url_beams", value)

    @property
    @pulumi.getter(name="eddystoneUrlEnabled")
    def eddystone_url_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        only if `beacon_enabled`==`false`, Whether Eddystone-URL beacon is enabled
        """
        return pulumi.get(self, "eddystone_url_enabled")

    @eddystone_url_enabled.setter
    def eddystone_url_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eddystone_url_enabled", value)

    @property
    @pulumi.getter(name="eddystoneUrlFreqMsec")
    def eddystone_url_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emit by Eddystone-UID beacon
        """
        return pulumi.get(self, "eddystone_url_freq_msec")

    @eddystone_url_freq_msec.setter
    def eddystone_url_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eddystone_url_freq_msec", value)

    @property
    @pulumi.getter(name="eddystoneUrlUrl")
    def eddystone_url_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL pointed by Eddystone-URL beacon
        """
        return pulumi.get(self, "eddystone_url_url")

    @eddystone_url_url.setter
    def eddystone_url_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eddystone_url_url", value)

    @property
    @pulumi.getter(name="ibeaconAdvPower")
    def ibeacon_adv_power(self) -> Optional[pulumi.Input[int]]:
        """
        advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
        """
        return pulumi.get(self, "ibeacon_adv_power")

    @ibeacon_adv_power.setter
    def ibeacon_adv_power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_adv_power", value)

    @property
    @pulumi.getter(name="ibeaconBeams")
    def ibeacon_beams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ibeacon_beams")

    @ibeacon_beams.setter
    def ibeacon_beams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibeacon_beams", value)

    @property
    @pulumi.getter(name="ibeaconEnabled")
    def ibeacon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        can be enabled if `beacon_enabled`==`true`, whether to send iBeacon
        """
        return pulumi.get(self, "ibeacon_enabled")

    @ibeacon_enabled.setter
    def ibeacon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ibeacon_enabled", value)

    @property
    @pulumi.getter(name="ibeaconFreqMsec")
    def ibeacon_freq_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Frequency (msec) of data emmit for iBeacon
        """
        return pulumi.get(self, "ibeacon_freq_msec")

    @ibeacon_freq_msec.setter
    def ibeacon_freq_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_freq_msec", value)

    @property
    @pulumi.getter(name="ibeaconMajor")
    def ibeacon_major(self) -> Optional[pulumi.Input[int]]:
        """
        Major number for iBeacon
        """
        return pulumi.get(self, "ibeacon_major")

    @ibeacon_major.setter
    def ibeacon_major(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_major", value)

    @property
    @pulumi.getter(name="ibeaconMinor")
    def ibeacon_minor(self) -> Optional[pulumi.Input[int]]:
        """
        Minor number for iBeacon
        """
        return pulumi.get(self, "ibeacon_minor")

    @ibeacon_minor.setter
    def ibeacon_minor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ibeacon_minor", value)

    @property
    @pulumi.getter(name="ibeaconUuid")
    def ibeacon_uuid(self) -> Optional[pulumi.Input[str]]:
        """
        optional, if not specified, the same UUID as the beacon will be used
        """
        return pulumi.get(self, "ibeacon_uuid")

    @ibeacon_uuid.setter
    def ibeacon_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ibeacon_uuid", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[int]]:
        """
        required if `power_mode`==`custom`
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `custom`, `default`
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)


if not MYPY:
    class SettingConfigPushPolicyArgsDict(TypedDict):
        no_push: NotRequired[pulumi.Input[bool]]
        """
        stop any new config from being pushed to the device
        """
        push_window: NotRequired[pulumi.Input['SettingConfigPushPolicyPushWindowArgsDict']]
        """
        if enabled, new config will only be pushed to device within the specified time window
        """
elif False:
    SettingConfigPushPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingConfigPushPolicyArgs:
    def __init__(__self__, *,
                 no_push: Optional[pulumi.Input[bool]] = None,
                 push_window: Optional[pulumi.Input['SettingConfigPushPolicyPushWindowArgs']] = None):
        """
        :param pulumi.Input[bool] no_push: stop any new config from being pushed to the device
        :param pulumi.Input['SettingConfigPushPolicyPushWindowArgs'] push_window: if enabled, new config will only be pushed to device within the specified time window
        """
        if no_push is not None:
            pulumi.set(__self__, "no_push", no_push)
        if push_window is not None:
            pulumi.set(__self__, "push_window", push_window)

    @property
    @pulumi.getter(name="noPush")
    def no_push(self) -> Optional[pulumi.Input[bool]]:
        """
        stop any new config from being pushed to the device
        """
        return pulumi.get(self, "no_push")

    @no_push.setter
    def no_push(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_push", value)

    @property
    @pulumi.getter(name="pushWindow")
    def push_window(self) -> Optional[pulumi.Input['SettingConfigPushPolicyPushWindowArgs']]:
        """
        if enabled, new config will only be pushed to device within the specified time window
        """
        return pulumi.get(self, "push_window")

    @push_window.setter
    def push_window(self, value: Optional[pulumi.Input['SettingConfigPushPolicyPushWindowArgs']]):
        pulumi.set(self, "push_window", value)


if not MYPY:
    class SettingConfigPushPolicyPushWindowArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input['SettingConfigPushPolicyPushWindowHoursArgsDict']]
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
elif False:
    SettingConfigPushPolicyPushWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingConfigPushPolicyPushWindowArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input['SettingConfigPushPolicyPushWindowHoursArgs']] = None):
        """
        :param pulumi.Input['SettingConfigPushPolicyPushWindowHoursArgs'] hours: hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 
               
               **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input['SettingConfigPushPolicyPushWindowHoursArgs']]:
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input['SettingConfigPushPolicyPushWindowHoursArgs']]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class SettingConfigPushPolicyPushWindowHoursArgsDict(TypedDict):
        fri: NotRequired[pulumi.Input[str]]
        mon: NotRequired[pulumi.Input[str]]
        sat: NotRequired[pulumi.Input[str]]
        sun: NotRequired[pulumi.Input[str]]
        thu: NotRequired[pulumi.Input[str]]
        tue: NotRequired[pulumi.Input[str]]
        wed: NotRequired[pulumi.Input[str]]
elif False:
    SettingConfigPushPolicyPushWindowHoursArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingConfigPushPolicyPushWindowHoursArgs:
    def __init__(__self__, *,
                 fri: Optional[pulumi.Input[str]] = None,
                 mon: Optional[pulumi.Input[str]] = None,
                 sat: Optional[pulumi.Input[str]] = None,
                 sun: Optional[pulumi.Input[str]] = None,
                 thu: Optional[pulumi.Input[str]] = None,
                 tue: Optional[pulumi.Input[str]] = None,
                 wed: Optional[pulumi.Input[str]] = None):
        if fri is not None:
            pulumi.set(__self__, "fri", fri)
        if mon is not None:
            pulumi.set(__self__, "mon", mon)
        if sat is not None:
            pulumi.set(__self__, "sat", sat)
        if sun is not None:
            pulumi.set(__self__, "sun", sun)
        if thu is not None:
            pulumi.set(__self__, "thu", thu)
        if tue is not None:
            pulumi.set(__self__, "tue", tue)
        if wed is not None:
            pulumi.set(__self__, "wed", wed)

    @property
    @pulumi.getter
    def fri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fri")

    @fri.setter
    def fri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fri", value)

    @property
    @pulumi.getter
    def mon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mon")

    @mon.setter
    def mon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mon", value)

    @property
    @pulumi.getter
    def sat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sat")

    @sat.setter
    def sat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sat", value)

    @property
    @pulumi.getter
    def sun(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sun")

    @sun.setter
    def sun(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sun", value)

    @property
    @pulumi.getter
    def thu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thu")

    @thu.setter
    def thu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thu", value)

    @property
    @pulumi.getter
    def tue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tue")

    @tue.setter
    def tue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tue", value)

    @property
    @pulumi.getter
    def wed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wed")

    @wed.setter
    def wed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wed", value)


if not MYPY:
    class SettingCriticalUrlMonitoringArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        monitors: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingCriticalUrlMonitoringMonitorArgsDict']]]]
elif False:
    SettingCriticalUrlMonitoringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingCriticalUrlMonitoringArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 monitors: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCriticalUrlMonitoringMonitorArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if monitors is not None:
            pulumi.set(__self__, "monitors", monitors)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingCriticalUrlMonitoringMonitorArgs']]]]:
        return pulumi.get(self, "monitors")

    @monitors.setter
    def monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingCriticalUrlMonitoringMonitorArgs']]]]):
        pulumi.set(self, "monitors", value)


if not MYPY:
    class SettingCriticalUrlMonitoringMonitorArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[str]]
        vlan_id: NotRequired[pulumi.Input[str]]
elif False:
    SettingCriticalUrlMonitoringMonitorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingCriticalUrlMonitoringMonitorArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[str]] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_id", value)


if not MYPY:
    class SettingEngagementArgsDict(TypedDict):
        dwell_tag_names: NotRequired[pulumi.Input['SettingEngagementDwellTagNamesArgsDict']]
        dwell_tags: NotRequired[pulumi.Input['SettingEngagementDwellTagsArgsDict']]
        """
        add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
        """
        hours: NotRequired[pulumi.Input['SettingEngagementHoursArgsDict']]
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        max_dwell: NotRequired[pulumi.Input[int]]
        """
        max time, default is 43200(12h), max is 68400 (18h)
        """
        min_dwell: NotRequired[pulumi.Input[int]]
        """
        min time
        """
elif False:
    SettingEngagementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEngagementArgs:
    def __init__(__self__, *,
                 dwell_tag_names: Optional[pulumi.Input['SettingEngagementDwellTagNamesArgs']] = None,
                 dwell_tags: Optional[pulumi.Input['SettingEngagementDwellTagsArgs']] = None,
                 hours: Optional[pulumi.Input['SettingEngagementHoursArgs']] = None,
                 max_dwell: Optional[pulumi.Input[int]] = None,
                 min_dwell: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['SettingEngagementDwellTagsArgs'] dwell_tags: add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
        :param pulumi.Input['SettingEngagementHoursArgs'] hours: hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 
               
               **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        :param pulumi.Input[int] max_dwell: max time, default is 43200(12h), max is 68400 (18h)
        :param pulumi.Input[int] min_dwell: min time
        """
        if dwell_tag_names is not None:
            pulumi.set(__self__, "dwell_tag_names", dwell_tag_names)
        if dwell_tags is not None:
            pulumi.set(__self__, "dwell_tags", dwell_tags)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if max_dwell is not None:
            pulumi.set(__self__, "max_dwell", max_dwell)
        if min_dwell is not None:
            pulumi.set(__self__, "min_dwell", min_dwell)

    @property
    @pulumi.getter(name="dwellTagNames")
    def dwell_tag_names(self) -> Optional[pulumi.Input['SettingEngagementDwellTagNamesArgs']]:
        return pulumi.get(self, "dwell_tag_names")

    @dwell_tag_names.setter
    def dwell_tag_names(self, value: Optional[pulumi.Input['SettingEngagementDwellTagNamesArgs']]):
        pulumi.set(self, "dwell_tag_names", value)

    @property
    @pulumi.getter(name="dwellTags")
    def dwell_tags(self) -> Optional[pulumi.Input['SettingEngagementDwellTagsArgs']]:
        """
        add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
        """
        return pulumi.get(self, "dwell_tags")

    @dwell_tags.setter
    def dwell_tags(self, value: Optional[pulumi.Input['SettingEngagementDwellTagsArgs']]):
        pulumi.set(self, "dwell_tags", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input['SettingEngagementHoursArgs']]:
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input['SettingEngagementHoursArgs']]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter(name="maxDwell")
    def max_dwell(self) -> Optional[pulumi.Input[int]]:
        """
        max time, default is 43200(12h), max is 68400 (18h)
        """
        return pulumi.get(self, "max_dwell")

    @max_dwell.setter
    def max_dwell(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dwell", value)

    @property
    @pulumi.getter(name="minDwell")
    def min_dwell(self) -> Optional[pulumi.Input[int]]:
        """
        min time
        """
        return pulumi.get(self, "min_dwell")

    @min_dwell.setter
    def min_dwell(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_dwell", value)


if not MYPY:
    class SettingEngagementDwellTagNamesArgsDict(TypedDict):
        bounce: NotRequired[pulumi.Input[str]]
        engaged: NotRequired[pulumi.Input[str]]
        passerby: NotRequired[pulumi.Input[str]]
        stationed: NotRequired[pulumi.Input[str]]
elif False:
    SettingEngagementDwellTagNamesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEngagementDwellTagNamesArgs:
    def __init__(__self__, *,
                 bounce: Optional[pulumi.Input[str]] = None,
                 engaged: Optional[pulumi.Input[str]] = None,
                 passerby: Optional[pulumi.Input[str]] = None,
                 stationed: Optional[pulumi.Input[str]] = None):
        if bounce is not None:
            pulumi.set(__self__, "bounce", bounce)
        if engaged is not None:
            pulumi.set(__self__, "engaged", engaged)
        if passerby is not None:
            pulumi.set(__self__, "passerby", passerby)
        if stationed is not None:
            pulumi.set(__self__, "stationed", stationed)

    @property
    @pulumi.getter
    def bounce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce")

    @bounce.setter
    def bounce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce", value)

    @property
    @pulumi.getter
    def engaged(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engaged")

    @engaged.setter
    def engaged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engaged", value)

    @property
    @pulumi.getter
    def passerby(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passerby")

    @passerby.setter
    def passerby(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passerby", value)

    @property
    @pulumi.getter
    def stationed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stationed")

    @stationed.setter
    def stationed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stationed", value)


if not MYPY:
    class SettingEngagementDwellTagsArgsDict(TypedDict):
        bounce: NotRequired[pulumi.Input[str]]
        engaged: NotRequired[pulumi.Input[str]]
        passerby: NotRequired[pulumi.Input[str]]
        stationed: NotRequired[pulumi.Input[str]]
elif False:
    SettingEngagementDwellTagsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEngagementDwellTagsArgs:
    def __init__(__self__, *,
                 bounce: Optional[pulumi.Input[str]] = None,
                 engaged: Optional[pulumi.Input[str]] = None,
                 passerby: Optional[pulumi.Input[str]] = None,
                 stationed: Optional[pulumi.Input[str]] = None):
        if bounce is not None:
            pulumi.set(__self__, "bounce", bounce)
        if engaged is not None:
            pulumi.set(__self__, "engaged", engaged)
        if passerby is not None:
            pulumi.set(__self__, "passerby", passerby)
        if stationed is not None:
            pulumi.set(__self__, "stationed", stationed)

    @property
    @pulumi.getter
    def bounce(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bounce")

    @bounce.setter
    def bounce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce", value)

    @property
    @pulumi.getter
    def engaged(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engaged")

    @engaged.setter
    def engaged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engaged", value)

    @property
    @pulumi.getter
    def passerby(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passerby")

    @passerby.setter
    def passerby(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passerby", value)

    @property
    @pulumi.getter
    def stationed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stationed")

    @stationed.setter
    def stationed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stationed", value)


if not MYPY:
    class SettingEngagementHoursArgsDict(TypedDict):
        fri: NotRequired[pulumi.Input[str]]
        mon: NotRequired[pulumi.Input[str]]
        sat: NotRequired[pulumi.Input[str]]
        sun: NotRequired[pulumi.Input[str]]
        thu: NotRequired[pulumi.Input[str]]
        tue: NotRequired[pulumi.Input[str]]
        wed: NotRequired[pulumi.Input[str]]
elif False:
    SettingEngagementHoursArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingEngagementHoursArgs:
    def __init__(__self__, *,
                 fri: Optional[pulumi.Input[str]] = None,
                 mon: Optional[pulumi.Input[str]] = None,
                 sat: Optional[pulumi.Input[str]] = None,
                 sun: Optional[pulumi.Input[str]] = None,
                 thu: Optional[pulumi.Input[str]] = None,
                 tue: Optional[pulumi.Input[str]] = None,
                 wed: Optional[pulumi.Input[str]] = None):
        if fri is not None:
            pulumi.set(__self__, "fri", fri)
        if mon is not None:
            pulumi.set(__self__, "mon", mon)
        if sat is not None:
            pulumi.set(__self__, "sat", sat)
        if sun is not None:
            pulumi.set(__self__, "sun", sun)
        if thu is not None:
            pulumi.set(__self__, "thu", thu)
        if tue is not None:
            pulumi.set(__self__, "tue", tue)
        if wed is not None:
            pulumi.set(__self__, "wed", wed)

    @property
    @pulumi.getter
    def fri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fri")

    @fri.setter
    def fri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fri", value)

    @property
    @pulumi.getter
    def mon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mon")

    @mon.setter
    def mon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mon", value)

    @property
    @pulumi.getter
    def sat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sat")

    @sat.setter
    def sat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sat", value)

    @property
    @pulumi.getter
    def sun(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sun")

    @sun.setter
    def sun(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sun", value)

    @property
    @pulumi.getter
    def thu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thu")

    @thu.setter
    def thu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thu", value)

    @property
    @pulumi.getter
    def tue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tue")

    @tue.setter
    def tue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tue", value)

    @property
    @pulumi.getter
    def wed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wed")

    @wed.setter
    def wed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wed", value)


if not MYPY:
    class SettingGatewayMgmtArgsDict(TypedDict):
        admin_sshkeys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        for SSR only, as direct root access is not allowed
        """
        app_probing: NotRequired[pulumi.Input['SettingGatewayMgmtAppProbingArgsDict']]
        app_usage: NotRequired[pulumi.Input[bool]]
        """
        consumes uplink bandwidth, requires WA license
        """
        auto_signature_update: NotRequired[pulumi.Input['SettingGatewayMgmtAutoSignatureUpdateArgsDict']]
        config_revert_timer: NotRequired[pulumi.Input[int]]
        """
        he rollback timer for commit confirmed
        """
        disable_console: NotRequired[pulumi.Input[bool]]
        """
        for both SSR and SRX disable console port
        """
        disable_oob: NotRequired[pulumi.Input[bool]]
        """
        for both SSR and SRX disable management interface
        """
        probe_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        protect_re: NotRequired[pulumi.Input['SettingGatewayMgmtProtectReArgsDict']]
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        root_password: NotRequired[pulumi.Input[str]]
        """
        for SRX only
        """
        security_log_source_address: NotRequired[pulumi.Input[str]]
        security_log_source_interface: NotRequired[pulumi.Input[str]]
elif False:
    SettingGatewayMgmtArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtArgs:
    def __init__(__self__, *,
                 admin_sshkeys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_probing: Optional[pulumi.Input['SettingGatewayMgmtAppProbingArgs']] = None,
                 app_usage: Optional[pulumi.Input[bool]] = None,
                 auto_signature_update: Optional[pulumi.Input['SettingGatewayMgmtAutoSignatureUpdateArgs']] = None,
                 config_revert_timer: Optional[pulumi.Input[int]] = None,
                 disable_console: Optional[pulumi.Input[bool]] = None,
                 disable_oob: Optional[pulumi.Input[bool]] = None,
                 probe_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protect_re: Optional[pulumi.Input['SettingGatewayMgmtProtectReArgs']] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 security_log_source_address: Optional[pulumi.Input[str]] = None,
                 security_log_source_interface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] admin_sshkeys: for SSR only, as direct root access is not allowed
        :param pulumi.Input[bool] app_usage: consumes uplink bandwidth, requires WA license
        :param pulumi.Input[int] config_revert_timer: he rollback timer for commit confirmed
        :param pulumi.Input[bool] disable_console: for both SSR and SRX disable console port
        :param pulumi.Input[bool] disable_oob: for both SSR and SRX disable management interface
        :param pulumi.Input['SettingGatewayMgmtProtectReArgs'] protect_re: restrict inbound-traffic to host
               when enabled, all traffic that is not essential to our operation will be dropped 
               e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[str] root_password: for SRX only
        """
        if admin_sshkeys is not None:
            pulumi.set(__self__, "admin_sshkeys", admin_sshkeys)
        if app_probing is not None:
            pulumi.set(__self__, "app_probing", app_probing)
        if app_usage is not None:
            pulumi.set(__self__, "app_usage", app_usage)
        if auto_signature_update is not None:
            pulumi.set(__self__, "auto_signature_update", auto_signature_update)
        if config_revert_timer is not None:
            pulumi.set(__self__, "config_revert_timer", config_revert_timer)
        if disable_console is not None:
            pulumi.set(__self__, "disable_console", disable_console)
        if disable_oob is not None:
            pulumi.set(__self__, "disable_oob", disable_oob)
        if probe_hosts is not None:
            pulumi.set(__self__, "probe_hosts", probe_hosts)
        if protect_re is not None:
            pulumi.set(__self__, "protect_re", protect_re)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if security_log_source_address is not None:
            pulumi.set(__self__, "security_log_source_address", security_log_source_address)
        if security_log_source_interface is not None:
            pulumi.set(__self__, "security_log_source_interface", security_log_source_interface)

    @property
    @pulumi.getter(name="adminSshkeys")
    def admin_sshkeys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        for SSR only, as direct root access is not allowed
        """
        return pulumi.get(self, "admin_sshkeys")

    @admin_sshkeys.setter
    def admin_sshkeys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "admin_sshkeys", value)

    @property
    @pulumi.getter(name="appProbing")
    def app_probing(self) -> Optional[pulumi.Input['SettingGatewayMgmtAppProbingArgs']]:
        return pulumi.get(self, "app_probing")

    @app_probing.setter
    def app_probing(self, value: Optional[pulumi.Input['SettingGatewayMgmtAppProbingArgs']]):
        pulumi.set(self, "app_probing", value)

    @property
    @pulumi.getter(name="appUsage")
    def app_usage(self) -> Optional[pulumi.Input[bool]]:
        """
        consumes uplink bandwidth, requires WA license
        """
        return pulumi.get(self, "app_usage")

    @app_usage.setter
    def app_usage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "app_usage", value)

    @property
    @pulumi.getter(name="autoSignatureUpdate")
    def auto_signature_update(self) -> Optional[pulumi.Input['SettingGatewayMgmtAutoSignatureUpdateArgs']]:
        return pulumi.get(self, "auto_signature_update")

    @auto_signature_update.setter
    def auto_signature_update(self, value: Optional[pulumi.Input['SettingGatewayMgmtAutoSignatureUpdateArgs']]):
        pulumi.set(self, "auto_signature_update", value)

    @property
    @pulumi.getter(name="configRevertTimer")
    def config_revert_timer(self) -> Optional[pulumi.Input[int]]:
        """
        he rollback timer for commit confirmed
        """
        return pulumi.get(self, "config_revert_timer")

    @config_revert_timer.setter
    def config_revert_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_revert_timer", value)

    @property
    @pulumi.getter(name="disableConsole")
    def disable_console(self) -> Optional[pulumi.Input[bool]]:
        """
        for both SSR and SRX disable console port
        """
        return pulumi.get(self, "disable_console")

    @disable_console.setter
    def disable_console(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_console", value)

    @property
    @pulumi.getter(name="disableOob")
    def disable_oob(self) -> Optional[pulumi.Input[bool]]:
        """
        for both SSR and SRX disable management interface
        """
        return pulumi.get(self, "disable_oob")

    @disable_oob.setter
    def disable_oob(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_oob", value)

    @property
    @pulumi.getter(name="probeHosts")
    def probe_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "probe_hosts")

    @probe_hosts.setter
    def probe_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "probe_hosts", value)

    @property
    @pulumi.getter(name="protectRe")
    def protect_re(self) -> Optional[pulumi.Input['SettingGatewayMgmtProtectReArgs']]:
        """
        restrict inbound-traffic to host
        when enabled, all traffic that is not essential to our operation will be dropped 
        e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "protect_re")

    @protect_re.setter
    def protect_re(self, value: Optional[pulumi.Input['SettingGatewayMgmtProtectReArgs']]):
        pulumi.set(self, "protect_re", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        for SRX only
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="securityLogSourceAddress")
    def security_log_source_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_log_source_address")

    @security_log_source_address.setter
    def security_log_source_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_log_source_address", value)

    @property
    @pulumi.getter(name="securityLogSourceInterface")
    def security_log_source_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_log_source_interface")

    @security_log_source_interface.setter
    def security_log_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_log_source_interface", value)


if not MYPY:
    class SettingGatewayMgmtAppProbingArgsDict(TypedDict):
        apps: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        app-keys from /api/v1/const/applications
        """
        custom_apps: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtAppProbingCustomAppArgsDict']]]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    SettingGatewayMgmtAppProbingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtAppProbingArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_apps: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtAppProbingCustomAppArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] apps: app-keys from /api/v1/const/applications
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if custom_apps is not None:
            pulumi.set(__self__, "custom_apps", custom_apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        app-keys from /api/v1/const/applications
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter(name="customApps")
    def custom_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtAppProbingCustomAppArgs']]]]:
        return pulumi.get(self, "custom_apps")

    @custom_apps.setter
    def custom_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtAppProbingCustomAppArgs']]]]):
        pulumi.set(self, "custom_apps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingGatewayMgmtAppProbingCustomAppArgsDict(TypedDict):
        hostnames: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Only 1 entry is allowed:
            * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
            * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
        """
        name: pulumi.Input[str]
        protocol: pulumi.Input[str]
        """
        enum: `http`, `icmp`
        """
        address: NotRequired[pulumi.Input[str]]
        app_type: NotRequired[pulumi.Input[str]]
        key: NotRequired[pulumi.Input[str]]
        network: NotRequired[pulumi.Input[str]]
        packet_size: NotRequired[pulumi.Input[int]]
        """
        if `protocol`==`icmp`
        """
        url: NotRequired[pulumi.Input[str]]
        vrf: NotRequired[pulumi.Input[str]]
elif False:
    SettingGatewayMgmtAppProbingCustomAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtAppProbingCustomAppArgs:
    def __init__(__self__, *,
                 hostnames: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 address: Optional[pulumi.Input[str]] = None,
                 app_type: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hostnames: Only 1 entry is allowed:
                   * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
                   * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
        :param pulumi.Input[str] protocol: enum: `http`, `icmp`
        :param pulumi.Input[int] packet_size: if `protocol`==`icmp`
        """
        pulumi.set(__self__, "hostnames", hostnames)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocol", protocol)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def hostnames(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Only 1 entry is allowed:
            * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
            * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
        """
        return pulumi.get(self, "hostnames")

    @hostnames.setter
    def hostnames(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hostnames", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        enum: `http`, `icmp`
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_type", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        if `protocol`==`icmp`
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


if not MYPY:
    class SettingGatewayMgmtAutoSignatureUpdateArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        """
        enable: NotRequired[pulumi.Input[bool]]
        time_of_day: NotRequired[pulumi.Input[str]]
        """
        optional, Mist will decide the timing
        """
elif False:
    SettingGatewayMgmtAutoSignatureUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtAutoSignatureUpdateArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 time_of_day: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] day_of_week: enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        :param pulumi.Input[str] time_of_day: optional, Mist will decide the timing
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if time_of_day is not None:
            pulumi.set(__self__, "time_of_day", time_of_day)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="timeOfDay")
    def time_of_day(self) -> Optional[pulumi.Input[str]]:
        """
        optional, Mist will decide the timing
        """
        return pulumi.get(self, "time_of_day")

    @time_of_day.setter
    def time_of_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_day", value)


if not MYPY:
    class SettingGatewayMgmtProtectReArgsDict(TypedDict):
        allowed_services: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        optionally, services we'll allow. enum: `icmp`, `ssh`
        """
        customs: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtProtectReCustomArgsDict']]]]
        enabled: NotRequired[pulumi.Input[bool]]
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        trusted_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        host/subnets we'll allow traffic to/from
        """
elif False:
    SettingGatewayMgmtProtectReArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtProtectReArgs:
    def __init__(__self__, *,
                 allowed_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 customs: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtProtectReCustomArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 trusted_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_services: optionally, services we'll allow. enum: `icmp`, `ssh`
        :param pulumi.Input[bool] enabled: when enabled, all traffic that is not essential to our operation will be dropped
               e.g. ntp / dns / traffic to mist will be allowed by default
                    if dhcpd is enabled, we'll make sure it works
        :param pulumi.Input[Sequence[pulumi.Input[str]]] trusted_hosts: host/subnets we'll allow traffic to/from
        """
        if allowed_services is not None:
            pulumi.set(__self__, "allowed_services", allowed_services)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if trusted_hosts is not None:
            pulumi.set(__self__, "trusted_hosts", trusted_hosts)

    @property
    @pulumi.getter(name="allowedServices")
    def allowed_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optionally, services we'll allow. enum: `icmp`, `ssh`
        """
        return pulumi.get(self, "allowed_services")

    @allowed_services.setter
    def allowed_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_services", value)

    @property
    @pulumi.getter
    def customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtProtectReCustomArgs']]]]:
        return pulumi.get(self, "customs")

    @customs.setter
    def customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingGatewayMgmtProtectReCustomArgs']]]]):
        pulumi.set(self, "customs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        when enabled, all traffic that is not essential to our operation will be dropped
        e.g. ntp / dns / traffic to mist will be allowed by default
             if dhcpd is enabled, we'll make sure it works
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trustedHosts")
    def trusted_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        host/subnets we'll allow traffic to/from
        """
        return pulumi.get(self, "trusted_hosts")

    @trusted_hosts.setter
    def trusted_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "trusted_hosts", value)


if not MYPY:
    class SettingGatewayMgmtProtectReCustomArgsDict(TypedDict):
        subnets: pulumi.Input[Sequence[pulumi.Input[str]]]
        port_range: NotRequired[pulumi.Input[str]]
        """
        matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
elif False:
    SettingGatewayMgmtProtectReCustomArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingGatewayMgmtProtectReCustomArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port_range: matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        :param pulumi.Input[str] protocol: enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched dst port, "0" means any. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `port_range`==`any`, configure `trusted_hosts` instead
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class SettingLedArgsDict(TypedDict):
        brightness: NotRequired[pulumi.Input[int]]
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    SettingLedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingLedArgs:
    def __init__(__self__, *,
                 brightness: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingOccupancyArgsDict(TypedDict):
        assets_enabled: NotRequired[pulumi.Input[bool]]
        """
        indicate whether named BLE assets should be included in the zone occupancy calculation
        """
        clients_enabled: NotRequired[pulumi.Input[bool]]
        """
        indicate whether connected WiFi clients should be included in the zone occupancy calculation
        """
        min_duration: NotRequired[pulumi.Input[int]]
        """
        minimum duration
        """
        sdkclients_enabled: NotRequired[pulumi.Input[bool]]
        """
        indicate whether SDK clients should be included in the zone occupancy calculation
        """
        unconnected_clients_enabled: NotRequired[pulumi.Input[bool]]
        """
        indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
        """
elif False:
    SettingOccupancyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingOccupancyArgs:
    def __init__(__self__, *,
                 assets_enabled: Optional[pulumi.Input[bool]] = None,
                 clients_enabled: Optional[pulumi.Input[bool]] = None,
                 min_duration: Optional[pulumi.Input[int]] = None,
                 sdkclients_enabled: Optional[pulumi.Input[bool]] = None,
                 unconnected_clients_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] assets_enabled: indicate whether named BLE assets should be included in the zone occupancy calculation
        :param pulumi.Input[bool] clients_enabled: indicate whether connected WiFi clients should be included in the zone occupancy calculation
        :param pulumi.Input[int] min_duration: minimum duration
        :param pulumi.Input[bool] sdkclients_enabled: indicate whether SDK clients should be included in the zone occupancy calculation
        :param pulumi.Input[bool] unconnected_clients_enabled: indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
        """
        if assets_enabled is not None:
            pulumi.set(__self__, "assets_enabled", assets_enabled)
        if clients_enabled is not None:
            pulumi.set(__self__, "clients_enabled", clients_enabled)
        if min_duration is not None:
            pulumi.set(__self__, "min_duration", min_duration)
        if sdkclients_enabled is not None:
            pulumi.set(__self__, "sdkclients_enabled", sdkclients_enabled)
        if unconnected_clients_enabled is not None:
            pulumi.set(__self__, "unconnected_clients_enabled", unconnected_clients_enabled)

    @property
    @pulumi.getter(name="assetsEnabled")
    def assets_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicate whether named BLE assets should be included in the zone occupancy calculation
        """
        return pulumi.get(self, "assets_enabled")

    @assets_enabled.setter
    def assets_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "assets_enabled", value)

    @property
    @pulumi.getter(name="clientsEnabled")
    def clients_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicate whether connected WiFi clients should be included in the zone occupancy calculation
        """
        return pulumi.get(self, "clients_enabled")

    @clients_enabled.setter
    def clients_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clients_enabled", value)

    @property
    @pulumi.getter(name="minDuration")
    def min_duration(self) -> Optional[pulumi.Input[int]]:
        """
        minimum duration
        """
        return pulumi.get(self, "min_duration")

    @min_duration.setter
    def min_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_duration", value)

    @property
    @pulumi.getter(name="sdkclientsEnabled")
    def sdkclients_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicate whether SDK clients should be included in the zone occupancy calculation
        """
        return pulumi.get(self, "sdkclients_enabled")

    @sdkclients_enabled.setter
    def sdkclients_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sdkclients_enabled", value)

    @property
    @pulumi.getter(name="unconnectedClientsEnabled")
    def unconnected_clients_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
        """
        return pulumi.get(self, "unconnected_clients_enabled")

    @unconnected_clients_enabled.setter
    def unconnected_clients_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unconnected_clients_enabled", value)


if not MYPY:
    class SettingProxyArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[str]]
elif False:
    SettingProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingProxyArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


if not MYPY:
    class SettingRogueArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether or not rogue detection is enabled
        """
        honeypot_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether or not honeypot detection is enabled
        """
        min_duration: NotRequired[pulumi.Input[int]]
        """
        minimum duration for a bssid to be considered rogue
        """
        min_rssi: NotRequired[pulumi.Input[int]]
        """
        minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
        """
        whitelisted_bssids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
        """
        whitelisted_ssids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of SSIDs to whitelist
        """
elif False:
    SettingRogueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingRogueArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 honeypot_enabled: Optional[pulumi.Input[bool]] = None,
                 min_duration: Optional[pulumi.Input[int]] = None,
                 min_rssi: Optional[pulumi.Input[int]] = None,
                 whitelisted_bssids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 whitelisted_ssids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: whether or not rogue detection is enabled
        :param pulumi.Input[bool] honeypot_enabled: whether or not honeypot detection is enabled
        :param pulumi.Input[int] min_duration: minimum duration for a bssid to be considered rogue
        :param pulumi.Input[int] min_rssi: minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_bssids: list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelisted_ssids: list of SSIDs to whitelist
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if honeypot_enabled is not None:
            pulumi.set(__self__, "honeypot_enabled", honeypot_enabled)
        if min_duration is not None:
            pulumi.set(__self__, "min_duration", min_duration)
        if min_rssi is not None:
            pulumi.set(__self__, "min_rssi", min_rssi)
        if whitelisted_bssids is not None:
            pulumi.set(__self__, "whitelisted_bssids", whitelisted_bssids)
        if whitelisted_ssids is not None:
            pulumi.set(__self__, "whitelisted_ssids", whitelisted_ssids)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether or not rogue detection is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="honeypotEnabled")
    def honeypot_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether or not honeypot detection is enabled
        """
        return pulumi.get(self, "honeypot_enabled")

    @honeypot_enabled.setter
    def honeypot_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "honeypot_enabled", value)

    @property
    @pulumi.getter(name="minDuration")
    def min_duration(self) -> Optional[pulumi.Input[int]]:
        """
        minimum duration for a bssid to be considered rogue
        """
        return pulumi.get(self, "min_duration")

    @min_duration.setter
    def min_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_duration", value)

    @property
    @pulumi.getter(name="minRssi")
    def min_rssi(self) -> Optional[pulumi.Input[int]]:
        """
        minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
        """
        return pulumi.get(self, "min_rssi")

    @min_rssi.setter
    def min_rssi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_rssi", value)

    @property
    @pulumi.getter(name="whitelistedBssids")
    def whitelisted_bssids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
        """
        return pulumi.get(self, "whitelisted_bssids")

    @whitelisted_bssids.setter
    def whitelisted_bssids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_bssids", value)

    @property
    @pulumi.getter(name="whitelistedSsids")
    def whitelisted_ssids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of SSIDs to whitelist
        """
        return pulumi.get(self, "whitelisted_ssids")

    @whitelisted_ssids.setter
    def whitelisted_ssids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelisted_ssids", value)


if not MYPY:
    class SettingRtsaArgsDict(TypedDict):
        app_waking: NotRequired[pulumi.Input[bool]]
        disable_dead_reckoning: NotRequired[pulumi.Input[bool]]
        disable_pressure_sensor: NotRequired[pulumi.Input[bool]]
        enabled: NotRequired[pulumi.Input[bool]]
        track_asset: NotRequired[pulumi.Input[bool]]
        """
        asset tracking related
        """
elif False:
    SettingRtsaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingRtsaArgs:
    def __init__(__self__, *,
                 app_waking: Optional[pulumi.Input[bool]] = None,
                 disable_dead_reckoning: Optional[pulumi.Input[bool]] = None,
                 disable_pressure_sensor: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 track_asset: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] track_asset: asset tracking related
        """
        if app_waking is not None:
            pulumi.set(__self__, "app_waking", app_waking)
        if disable_dead_reckoning is not None:
            pulumi.set(__self__, "disable_dead_reckoning", disable_dead_reckoning)
        if disable_pressure_sensor is not None:
            pulumi.set(__self__, "disable_pressure_sensor", disable_pressure_sensor)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if track_asset is not None:
            pulumi.set(__self__, "track_asset", track_asset)

    @property
    @pulumi.getter(name="appWaking")
    def app_waking(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "app_waking")

    @app_waking.setter
    def app_waking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "app_waking", value)

    @property
    @pulumi.getter(name="disableDeadReckoning")
    def disable_dead_reckoning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_dead_reckoning")

    @disable_dead_reckoning.setter
    def disable_dead_reckoning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_dead_reckoning", value)

    @property
    @pulumi.getter(name="disablePressureSensor")
    def disable_pressure_sensor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_pressure_sensor")

    @disable_pressure_sensor.setter
    def disable_pressure_sensor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_pressure_sensor", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trackAsset")
    def track_asset(self) -> Optional[pulumi.Input[bool]]:
        """
        asset tracking related
        """
        return pulumi.get(self, "track_asset")

    @track_asset.setter
    def track_asset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "track_asset", value)


if not MYPY:
    class SettingSimpleAlertArgsDict(TypedDict):
        arp_failure: NotRequired[pulumi.Input['SettingSimpleAlertArpFailureArgsDict']]
        dhcp_failure: NotRequired[pulumi.Input['SettingSimpleAlertDhcpFailureArgsDict']]
        dns_failure: NotRequired[pulumi.Input['SettingSimpleAlertDnsFailureArgsDict']]
elif False:
    SettingSimpleAlertArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSimpleAlertArgs:
    def __init__(__self__, *,
                 arp_failure: Optional[pulumi.Input['SettingSimpleAlertArpFailureArgs']] = None,
                 dhcp_failure: Optional[pulumi.Input['SettingSimpleAlertDhcpFailureArgs']] = None,
                 dns_failure: Optional[pulumi.Input['SettingSimpleAlertDnsFailureArgs']] = None):
        if arp_failure is not None:
            pulumi.set(__self__, "arp_failure", arp_failure)
        if dhcp_failure is not None:
            pulumi.set(__self__, "dhcp_failure", dhcp_failure)
        if dns_failure is not None:
            pulumi.set(__self__, "dns_failure", dns_failure)

    @property
    @pulumi.getter(name="arpFailure")
    def arp_failure(self) -> Optional[pulumi.Input['SettingSimpleAlertArpFailureArgs']]:
        return pulumi.get(self, "arp_failure")

    @arp_failure.setter
    def arp_failure(self, value: Optional[pulumi.Input['SettingSimpleAlertArpFailureArgs']]):
        pulumi.set(self, "arp_failure", value)

    @property
    @pulumi.getter(name="dhcpFailure")
    def dhcp_failure(self) -> Optional[pulumi.Input['SettingSimpleAlertDhcpFailureArgs']]:
        return pulumi.get(self, "dhcp_failure")

    @dhcp_failure.setter
    def dhcp_failure(self, value: Optional[pulumi.Input['SettingSimpleAlertDhcpFailureArgs']]):
        pulumi.set(self, "dhcp_failure", value)

    @property
    @pulumi.getter(name="dnsFailure")
    def dns_failure(self) -> Optional[pulumi.Input['SettingSimpleAlertDnsFailureArgs']]:
        return pulumi.get(self, "dns_failure")

    @dns_failure.setter
    def dns_failure(self, value: Optional[pulumi.Input['SettingSimpleAlertDnsFailureArgs']]):
        pulumi.set(self, "dns_failure", value)


if not MYPY:
    class SettingSimpleAlertArpFailureArgsDict(TypedDict):
        client_count: NotRequired[pulumi.Input[int]]
        duration: NotRequired[pulumi.Input[int]]
        """
        failing within minutes
        """
        incident_count: NotRequired[pulumi.Input[int]]
elif False:
    SettingSimpleAlertArpFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSimpleAlertArpFailureArgs:
    def __init__(__self__, *,
                 client_count: Optional[pulumi.Input[int]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 incident_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration: failing within minutes
        """
        if client_count is not None:
            pulumi.set(__self__, "client_count", client_count)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if incident_count is not None:
            pulumi.set(__self__, "incident_count", incident_count)

    @property
    @pulumi.getter(name="clientCount")
    def client_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "client_count")

    @client_count.setter
    def client_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_count", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        failing within minutes
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="incidentCount")
    def incident_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "incident_count")

    @incident_count.setter
    def incident_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incident_count", value)


if not MYPY:
    class SettingSimpleAlertDhcpFailureArgsDict(TypedDict):
        client_count: NotRequired[pulumi.Input[int]]
        duration: NotRequired[pulumi.Input[int]]
        """
        failing within minutes
        """
        incident_count: NotRequired[pulumi.Input[int]]
elif False:
    SettingSimpleAlertDhcpFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSimpleAlertDhcpFailureArgs:
    def __init__(__self__, *,
                 client_count: Optional[pulumi.Input[int]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 incident_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration: failing within minutes
        """
        if client_count is not None:
            pulumi.set(__self__, "client_count", client_count)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if incident_count is not None:
            pulumi.set(__self__, "incident_count", incident_count)

    @property
    @pulumi.getter(name="clientCount")
    def client_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "client_count")

    @client_count.setter
    def client_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_count", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        failing within minutes
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="incidentCount")
    def incident_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "incident_count")

    @incident_count.setter
    def incident_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incident_count", value)


if not MYPY:
    class SettingSimpleAlertDnsFailureArgsDict(TypedDict):
        client_count: NotRequired[pulumi.Input[int]]
        duration: NotRequired[pulumi.Input[int]]
        """
        failing within minutes
        """
        incident_count: NotRequired[pulumi.Input[int]]
elif False:
    SettingSimpleAlertDnsFailureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSimpleAlertDnsFailureArgs:
    def __init__(__self__, *,
                 client_count: Optional[pulumi.Input[int]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 incident_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration: failing within minutes
        """
        if client_count is not None:
            pulumi.set(__self__, "client_count", client_count)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if incident_count is not None:
            pulumi.set(__self__, "incident_count", incident_count)

    @property
    @pulumi.getter(name="clientCount")
    def client_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "client_count")

    @client_count.setter
    def client_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_count", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        failing within minutes
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="incidentCount")
    def incident_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "incident_count")

    @incident_count.setter
    def incident_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "incident_count", value)


if not MYPY:
    class SettingSkyatpArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        send_ip_mac_mapping: NotRequired[pulumi.Input[bool]]
        """
        whether to send IP-MAC mapping to SkyATP
        """
elif False:
    SettingSkyatpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSkyatpArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 send_ip_mac_mapping: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] send_ip_mac_mapping: whether to send IP-MAC mapping to SkyATP
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if send_ip_mac_mapping is not None:
            pulumi.set(__self__, "send_ip_mac_mapping", send_ip_mac_mapping)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="sendIpMacMapping")
    def send_ip_mac_mapping(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to send IP-MAC mapping to SkyATP
        """
        return pulumi.get(self, "send_ip_mac_mapping")

    @send_ip_mac_mapping.setter
    def send_ip_mac_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_ip_mac_mapping", value)


if not MYPY:
    class SettingSrxAppArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    SettingSrxAppArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSrxAppArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingSsrArgsDict(TypedDict):
        conductor_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        disable_stats: NotRequired[pulumi.Input[bool]]
elif False:
    SettingSsrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSsrArgs:
    def __init__(__self__, *,
                 conductor_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_stats: Optional[pulumi.Input[bool]] = None):
        if conductor_hosts is not None:
            pulumi.set(__self__, "conductor_hosts", conductor_hosts)
        if disable_stats is not None:
            pulumi.set(__self__, "disable_stats", disable_stats)

    @property
    @pulumi.getter(name="conductorHosts")
    def conductor_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "conductor_hosts")

    @conductor_hosts.setter
    def conductor_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "conductor_hosts", value)

    @property
    @pulumi.getter(name="disableStats")
    def disable_stats(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_stats")

    @disable_stats.setter
    def disable_stats(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_stats", value)


if not MYPY:
    class SettingSyntheticTestArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[bool]]
        vlans: NotRequired[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgsDict']]]]
        wan_speedtest: NotRequired[pulumi.Input['SettingSyntheticTestWanSpeedtestArgsDict']]
elif False:
    SettingSyntheticTestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSyntheticTestArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]] = None,
                 wan_speedtest: Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']] = None):
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)
        if wan_speedtest is not None:
            pulumi.set(__self__, "wan_speedtest", wan_speedtest)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]]:
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SettingSyntheticTestVlanArgs']]]]):
        pulumi.set(self, "vlans", value)

    @property
    @pulumi.getter(name="wanSpeedtest")
    def wan_speedtest(self) -> Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']]:
        return pulumi.get(self, "wan_speedtest")

    @wan_speedtest.setter
    def wan_speedtest(self, value: Optional[pulumi.Input['SettingSyntheticTestWanSpeedtestArgs']]):
        pulumi.set(self, "wan_speedtest", value)


if not MYPY:
    class SettingSyntheticTestVlanArgsDict(TypedDict):
        custom_test_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        disabled: NotRequired[pulumi.Input[bool]]
        """
        for some vlans where we don't want this to run
        """
        vlan_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    SettingSyntheticTestVlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSyntheticTestVlanArgs:
    def __init__(__self__, *,
                 custom_test_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] disabled: for some vlans where we don't want this to run
        """
        if custom_test_urls is not None:
            pulumi.set(__self__, "custom_test_urls", custom_test_urls)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="customTestUrls")
    def custom_test_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_test_urls")

    @custom_test_urls.setter
    def custom_test_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_test_urls", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        for some vlans where we don't want this to run
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vlan_ids", value)


if not MYPY:
    class SettingSyntheticTestWanSpeedtestArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        time_od_fay: NotRequired[pulumi.Input[str]]
        """
        any / HH:MM (24-hour format)
        """
elif False:
    SettingSyntheticTestWanSpeedtestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingSyntheticTestWanSpeedtestArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 time_od_fay: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] time_od_fay: any / HH:MM (24-hour format)
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if time_od_fay is not None:
            pulumi.set(__self__, "time_od_fay", time_od_fay)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="timeOdFay")
    def time_od_fay(self) -> Optional[pulumi.Input[str]]:
        """
        any / HH:MM (24-hour format)
        """
        return pulumi.get(self, "time_od_fay")

    @time_od_fay.setter
    def time_od_fay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_od_fay", value)


if not MYPY:
    class SettingUplinkPortConfigArgsDict(TypedDict):
        dot1x: NotRequired[pulumi.Input[bool]]
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        keep_wlans_up_if_down: NotRequired[pulumi.Input[bool]]
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
elif False:
    SettingUplinkPortConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingUplinkPortConfigArgs:
    def __init__(__self__, *,
                 dot1x: Optional[pulumi.Input[bool]] = None,
                 keep_wlans_up_if_down: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] dot1x: Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        :param pulumi.Input[bool] keep_wlans_up_if_down: by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        if dot1x is not None:
            pulumi.set(__self__, "dot1x", dot1x)
        if keep_wlans_up_if_down is not None:
            pulumi.set(__self__, "keep_wlans_up_if_down", keep_wlans_up_if_down)

    @property
    @pulumi.getter
    def dot1x(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
        """
        return pulumi.get(self, "dot1x")

    @dot1x.setter
    def dot1x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dot1x", value)

    @property
    @pulumi.getter(name="keepWlansUpIfDown")
    def keep_wlans_up_if_down(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
        """
        return pulumi.get(self, "keep_wlans_up_if_down")

    @keep_wlans_up_if_down.setter
    def keep_wlans_up_if_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_wlans_up_if_down", value)


if not MYPY:
    class SettingVnaArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
        """
elif False:
    SettingVnaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingVnaArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingVsInstanceArgsDict(TypedDict):
        networks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    SettingVsInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingVsInstanceArgs:
    def __init__(__self__, *,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if networks is not None:
            pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)


if not MYPY:
    class SettingWanVnaArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    SettingWanVnaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingWanVnaArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingWidsArgsDict(TypedDict):
        repeated_auth_failures: NotRequired[pulumi.Input['SettingWidsRepeatedAuthFailuresArgsDict']]
elif False:
    SettingWidsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingWidsArgs:
    def __init__(__self__, *,
                 repeated_auth_failures: Optional[pulumi.Input['SettingWidsRepeatedAuthFailuresArgs']] = None):
        if repeated_auth_failures is not None:
            pulumi.set(__self__, "repeated_auth_failures", repeated_auth_failures)

    @property
    @pulumi.getter(name="repeatedAuthFailures")
    def repeated_auth_failures(self) -> Optional[pulumi.Input['SettingWidsRepeatedAuthFailuresArgs']]:
        return pulumi.get(self, "repeated_auth_failures")

    @repeated_auth_failures.setter
    def repeated_auth_failures(self, value: Optional[pulumi.Input['SettingWidsRepeatedAuthFailuresArgs']]):
        pulumi.set(self, "repeated_auth_failures", value)


if not MYPY:
    class SettingWidsRepeatedAuthFailuresArgsDict(TypedDict):
        duration: NotRequired[pulumi.Input[int]]
        """
        window where a trigger will be detected and action to be taken (in seconds)
        """
        threshold: NotRequired[pulumi.Input[int]]
        """
        count of events to trigger
        """
elif False:
    SettingWidsRepeatedAuthFailuresArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingWidsRepeatedAuthFailuresArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration: window where a trigger will be detected and action to be taken (in seconds)
        :param pulumi.Input[int] threshold: count of events to trigger
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        window where a trigger will be detected and action to be taken (in seconds)
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        count of events to trigger
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class SettingWifiArgsDict(TypedDict):
        cisco_enabled: NotRequired[pulumi.Input[bool]]
        disable11k: NotRequired[pulumi.Input[bool]]
        """
        whether to disable 11k
        """
        disable_radios_when_power_constrained: NotRequired[pulumi.Input[bool]]
        enable_arp_spoof_check: NotRequired[pulumi.Input[bool]]
        """
        when proxy_arp is enabled, check for arp spoofing.
        """
        enable_shared_radio_scanning: NotRequired[pulumi.Input[bool]]
        enabled: NotRequired[pulumi.Input[bool]]
        """
        enable WIFI feature (using SUB-MAN license)
        """
        locate_connected: NotRequired[pulumi.Input[bool]]
        """
        whether to locate connected clients
        """
        locate_unconnected: NotRequired[pulumi.Input[bool]]
        """
        whether to locate unconnected clients
        """
        mesh_allow_dfs: NotRequired[pulumi.Input[bool]]
        """
        whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
        """
        mesh_enable_crm: NotRequired[pulumi.Input[bool]]
        """
        used to enable/disable CRM
        """
        mesh_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to enable Mesh feature for the site
        """
        mesh_psk: NotRequired[pulumi.Input[str]]
        """
        optional passphrase of mesh networking, default is generated randomly
        """
        mesh_ssid: NotRequired[pulumi.Input[str]]
        """
        optional ssid of mesh networking, default is based on site_id
        """
        proxy_arp: NotRequired[pulumi.Input[str]]
        """
        enum: `default`, `disabled`, `enabled`
        """
elif False:
    SettingWifiArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingWifiArgs:
    def __init__(__self__, *,
                 cisco_enabled: Optional[pulumi.Input[bool]] = None,
                 disable11k: Optional[pulumi.Input[bool]] = None,
                 disable_radios_when_power_constrained: Optional[pulumi.Input[bool]] = None,
                 enable_arp_spoof_check: Optional[pulumi.Input[bool]] = None,
                 enable_shared_radio_scanning: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 locate_connected: Optional[pulumi.Input[bool]] = None,
                 locate_unconnected: Optional[pulumi.Input[bool]] = None,
                 mesh_allow_dfs: Optional[pulumi.Input[bool]] = None,
                 mesh_enable_crm: Optional[pulumi.Input[bool]] = None,
                 mesh_enabled: Optional[pulumi.Input[bool]] = None,
                 mesh_psk: Optional[pulumi.Input[str]] = None,
                 mesh_ssid: Optional[pulumi.Input[str]] = None,
                 proxy_arp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable11k: whether to disable 11k
        :param pulumi.Input[bool] enable_arp_spoof_check: when proxy_arp is enabled, check for arp spoofing.
        :param pulumi.Input[bool] enabled: enable WIFI feature (using SUB-MAN license)
        :param pulumi.Input[bool] locate_connected: whether to locate connected clients
        :param pulumi.Input[bool] locate_unconnected: whether to locate unconnected clients
        :param pulumi.Input[bool] mesh_allow_dfs: whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
        :param pulumi.Input[bool] mesh_enable_crm: used to enable/disable CRM
        :param pulumi.Input[bool] mesh_enabled: whether to enable Mesh feature for the site
        :param pulumi.Input[str] mesh_psk: optional passphrase of mesh networking, default is generated randomly
        :param pulumi.Input[str] mesh_ssid: optional ssid of mesh networking, default is based on site_id
        :param pulumi.Input[str] proxy_arp: enum: `default`, `disabled`, `enabled`
        """
        if cisco_enabled is not None:
            pulumi.set(__self__, "cisco_enabled", cisco_enabled)
        if disable11k is not None:
            pulumi.set(__self__, "disable11k", disable11k)
        if disable_radios_when_power_constrained is not None:
            pulumi.set(__self__, "disable_radios_when_power_constrained", disable_radios_when_power_constrained)
        if enable_arp_spoof_check is not None:
            pulumi.set(__self__, "enable_arp_spoof_check", enable_arp_spoof_check)
        if enable_shared_radio_scanning is not None:
            pulumi.set(__self__, "enable_shared_radio_scanning", enable_shared_radio_scanning)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if locate_connected is not None:
            pulumi.set(__self__, "locate_connected", locate_connected)
        if locate_unconnected is not None:
            pulumi.set(__self__, "locate_unconnected", locate_unconnected)
        if mesh_allow_dfs is not None:
            pulumi.set(__self__, "mesh_allow_dfs", mesh_allow_dfs)
        if mesh_enable_crm is not None:
            pulumi.set(__self__, "mesh_enable_crm", mesh_enable_crm)
        if mesh_enabled is not None:
            pulumi.set(__self__, "mesh_enabled", mesh_enabled)
        if mesh_psk is not None:
            pulumi.set(__self__, "mesh_psk", mesh_psk)
        if mesh_ssid is not None:
            pulumi.set(__self__, "mesh_ssid", mesh_ssid)
        if proxy_arp is not None:
            pulumi.set(__self__, "proxy_arp", proxy_arp)

    @property
    @pulumi.getter(name="ciscoEnabled")
    def cisco_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cisco_enabled")

    @cisco_enabled.setter
    def cisco_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cisco_enabled", value)

    @property
    @pulumi.getter
    def disable11k(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable 11k
        """
        return pulumi.get(self, "disable11k")

    @disable11k.setter
    def disable11k(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable11k", value)

    @property
    @pulumi.getter(name="disableRadiosWhenPowerConstrained")
    def disable_radios_when_power_constrained(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_radios_when_power_constrained")

    @disable_radios_when_power_constrained.setter
    def disable_radios_when_power_constrained(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_radios_when_power_constrained", value)

    @property
    @pulumi.getter(name="enableArpSpoofCheck")
    def enable_arp_spoof_check(self) -> Optional[pulumi.Input[bool]]:
        """
        when proxy_arp is enabled, check for arp spoofing.
        """
        return pulumi.get(self, "enable_arp_spoof_check")

    @enable_arp_spoof_check.setter
    def enable_arp_spoof_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_arp_spoof_check", value)

    @property
    @pulumi.getter(name="enableSharedRadioScanning")
    def enable_shared_radio_scanning(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_shared_radio_scanning")

    @enable_shared_radio_scanning.setter
    def enable_shared_radio_scanning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_shared_radio_scanning", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enable WIFI feature (using SUB-MAN license)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="locateConnected")
    def locate_connected(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to locate connected clients
        """
        return pulumi.get(self, "locate_connected")

    @locate_connected.setter
    def locate_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locate_connected", value)

    @property
    @pulumi.getter(name="locateUnconnected")
    def locate_unconnected(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to locate unconnected clients
        """
        return pulumi.get(self, "locate_unconnected")

    @locate_unconnected.setter
    def locate_unconnected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locate_unconnected", value)

    @property
    @pulumi.getter(name="meshAllowDfs")
    def mesh_allow_dfs(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
        """
        return pulumi.get(self, "mesh_allow_dfs")

    @mesh_allow_dfs.setter
    def mesh_allow_dfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mesh_allow_dfs", value)

    @property
    @pulumi.getter(name="meshEnableCrm")
    def mesh_enable_crm(self) -> Optional[pulumi.Input[bool]]:
        """
        used to enable/disable CRM
        """
        return pulumi.get(self, "mesh_enable_crm")

    @mesh_enable_crm.setter
    def mesh_enable_crm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mesh_enable_crm", value)

    @property
    @pulumi.getter(name="meshEnabled")
    def mesh_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable Mesh feature for the site
        """
        return pulumi.get(self, "mesh_enabled")

    @mesh_enabled.setter
    def mesh_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mesh_enabled", value)

    @property
    @pulumi.getter(name="meshPsk")
    def mesh_psk(self) -> Optional[pulumi.Input[str]]:
        """
        optional passphrase of mesh networking, default is generated randomly
        """
        return pulumi.get(self, "mesh_psk")

    @mesh_psk.setter
    def mesh_psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_psk", value)

    @property
    @pulumi.getter(name="meshSsid")
    def mesh_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        optional ssid of mesh networking, default is based on site_id
        """
        return pulumi.get(self, "mesh_ssid")

    @mesh_ssid.setter
    def mesh_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_ssid", value)

    @property
    @pulumi.getter(name="proxyArp")
    def proxy_arp(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `default`, `disabled`, `enabled`
        """
        return pulumi.get(self, "proxy_arp")

    @proxy_arp.setter
    def proxy_arp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_arp", value)


if not MYPY:
    class SettingWiredVnaArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    SettingWiredVnaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingWiredVnaArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class SettingZoneOccupancyAlertArgsDict(TypedDict):
        email_notifiers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of email addresses to send email notifications when the alert threshold is reached
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        indicate whether zone occupancy alert is enabled for the site
        """
        threshold: NotRequired[pulumi.Input[int]]
        """
        sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
        """
elif False:
    SettingZoneOccupancyAlertArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingZoneOccupancyAlertArgs:
    def __init__(__self__, *,
                 email_notifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_notifiers: list of email addresses to send email notifications when the alert threshold is reached
        :param pulumi.Input[bool] enabled: indicate whether zone occupancy alert is enabled for the site
        :param pulumi.Input[int] threshold: sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
        """
        if email_notifiers is not None:
            pulumi.set(__self__, "email_notifiers", email_notifiers)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="emailNotifiers")
    def email_notifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of email addresses to send email notifications when the alert threshold is reached
        """
        return pulumi.get(self, "email_notifiers")

    @email_notifiers.setter
    def email_notifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_notifiers", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        indicate whether zone occupancy alert is enabled for the site
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


if not MYPY:
    class WlanAcctServerArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        ip / hostname of RADIUS server
        """
        secret: pulumi.Input[str]
        """
        secret of RADIUS server
        """
        keywrap_enabled: NotRequired[pulumi.Input[bool]]
        keywrap_format: NotRequired[pulumi.Input[str]]
        """
        enum: `ascii`, `hex`
        """
        keywrap_kek: NotRequired[pulumi.Input[str]]
        keywrap_mack: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        """
        Acct port of RADIUS server
        """
elif False:
    WlanAcctServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAcctServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Acct port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Acct port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WlanAirwatchArgsDict(TypedDict):
        api_key: pulumi.Input[str]
        """
        API Key
        """
        console_url: pulumi.Input[str]
        """
        console URL
        """
        password: pulumi.Input[str]
        """
        password
        """
        username: pulumi.Input[str]
        """
        username
        """
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    WlanAirwatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAirwatchArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 console_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] api_key: API Key
        :param pulumi.Input[str] console_url: console URL
        :param pulumi.Input[str] password: password
        :param pulumi.Input[str] username: username
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "console_url", console_url)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API Key
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="consoleUrl")
    def console_url(self) -> pulumi.Input[str]:
        """
        console URL
        """
        return pulumi.get(self, "console_url")

    @console_url.setter
    def console_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "console_url", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        username
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WlanAppLimitArgsDict(TypedDict):
        apps: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[int]]]]
        """
        Map from app key to bandwidth in kbps. 
        Property key is the app key, defined in Get Application List
        """
        enabled: NotRequired[pulumi.Input[bool]]
        wxtag_ids: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[int]]]]
        """
        Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
        Property key is the wxtag id
        """
elif False:
    WlanAppLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAppLimitArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 wxtag_ids: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] apps: Map from app key to bandwidth in kbps. 
               Property key is the app key, defined in Get Application List
        :param pulumi.Input[Mapping[str, pulumi.Input[int]]] wxtag_ids: Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
               Property key is the wxtag id
        """
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if wxtag_ids is not None:
            pulumi.set(__self__, "wxtag_ids", wxtag_ids)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        Map from app key to bandwidth in kbps. 
        Property key is the app key, defined in Get Application List
        """
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="wxtagIds")
    def wxtag_ids(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        """
        Map from wxtag_id of Hostname Wxlan Tags to bandwidth in kbps
        Property key is the wxtag id
        """
        return pulumi.get(self, "wxtag_ids")

    @wxtag_ids.setter
    def wxtag_ids(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "wxtag_ids", value)


if not MYPY:
    class WlanAppQosArgsDict(TypedDict):
        apps: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgsDict']]]]
        enabled: NotRequired[pulumi.Input[bool]]
        others: NotRequired[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgsDict']]]]
elif False:
    WlanAppQosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAppQosArgs:
    def __init__(__self__, *,
                 apps: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 others: Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]] = None):
        if apps is not None:
            pulumi.set(__self__, "apps", apps)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if others is not None:
            pulumi.set(__self__, "others", others)

    @property
    @pulumi.getter
    def apps(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]]:
        return pulumi.get(self, "apps")

    @apps.setter
    def apps(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanAppQosAppsArgs']]]]):
        pulumi.set(self, "apps", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def others(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]]:
        return pulumi.get(self, "others")

    @others.setter
    def others(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WlanAppQosOtherArgs']]]]):
        pulumi.set(self, "others", value)


if not MYPY:
    class WlanAppQosAppsArgsDict(TypedDict):
        dscp: NotRequired[pulumi.Input[int]]
        dst_subnet: NotRequired[pulumi.Input[str]]
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        src_subnet: NotRequired[pulumi.Input[str]]
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
elif False:
    WlanAppQosAppsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAppQosAppsArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        :param pulumi.Input[str] src_subnet: subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
        """
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


if not MYPY:
    class WlanAppQosOtherArgsDict(TypedDict):
        dscp: NotRequired[pulumi.Input[int]]
        dst_subnet: NotRequired[pulumi.Input[str]]
        port_ranges: NotRequired[pulumi.Input[str]]
        protocol: NotRequired[pulumi.Input[str]]
        src_subnet: NotRequired[pulumi.Input[str]]
elif False:
    WlanAppQosOtherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAppQosOtherArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 dst_subnet: Optional[pulumi.Input[str]] = None,
                 port_ranges: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 src_subnet: Optional[pulumi.Input[str]] = None):
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if dst_subnet is not None:
            pulumi.set(__self__, "dst_subnet", dst_subnet)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if src_subnet is not None:
            pulumi.set(__self__, "src_subnet", src_subnet)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter(name="dstSubnet")
    def dst_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst_subnet")

    @dst_subnet.setter
    def dst_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_subnet", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="srcSubnet")
    def src_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "src_subnet")

    @src_subnet.setter
    def src_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_subnet", value)


if not MYPY:
    class WlanAuthArgsDict(TypedDict):
        anticlog_threshold: NotRequired[pulumi.Input[int]]
        """
        SAE anti-clogging token threshold
        """
        eap_reauth: NotRequired[pulumi.Input[bool]]
        """
        whether to trigger EAP reauth when the session ends
        """
        enable_mac_auth: NotRequired[pulumi.Input[bool]]
        """
        whether to enable MAC Auth, uses the same auth_servers
        """
        key_idx: NotRequired[pulumi.Input[int]]
        """
        when `type`==`wep`
        """
        keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        """
        multi_psk_only: NotRequired[pulumi.Input[bool]]
        """
        when `type`==`psk`, whether to only use multi_psk
        """
        owe: NotRequired[pulumi.Input[str]]
        """
        if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        """
        pairwises: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        """
        private_wlan: NotRequired[pulumi.Input[bool]]
        """
        when `multi_psk_only`==`true`, whether private wlan is enabled
        """
        psk: NotRequired[pulumi.Input[str]]
        """
        when `type`==`psk`, 8-64 characters, or 64 hex characters
        """
        type: NotRequired[pulumi.Input[str]]
        """
        enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        """
        wep_as_secondary_auth: NotRequired[pulumi.Input[bool]]
        """
        enable WEP as secondary auth
        """
elif False:
    WlanAuthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAuthArgs:
    def __init__(__self__, *,
                 anticlog_threshold: Optional[pulumi.Input[int]] = None,
                 eap_reauth: Optional[pulumi.Input[bool]] = None,
                 enable_mac_auth: Optional[pulumi.Input[bool]] = None,
                 key_idx: Optional[pulumi.Input[int]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 multi_psk_only: Optional[pulumi.Input[bool]] = None,
                 owe: Optional[pulumi.Input[str]] = None,
                 pairwises: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_wlan: Optional[pulumi.Input[bool]] = None,
                 psk: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wep_as_secondary_auth: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] anticlog_threshold: SAE anti-clogging token threshold
        :param pulumi.Input[bool] eap_reauth: whether to trigger EAP reauth when the session ends
        :param pulumi.Input[bool] enable_mac_auth: whether to enable MAC Auth, uses the same auth_servers
        :param pulumi.Input[int] key_idx: when `type`==`wep`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] keys: when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        :param pulumi.Input[bool] multi_psk_only: when `type`==`psk`, whether to only use multi_psk
        :param pulumi.Input[str] owe: if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pairwises: when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        :param pulumi.Input[bool] private_wlan: when `multi_psk_only`==`true`, whether private wlan is enabled
        :param pulumi.Input[str] psk: when `type`==`psk`, 8-64 characters, or 64 hex characters
        :param pulumi.Input[str] type: enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        :param pulumi.Input[bool] wep_as_secondary_auth: enable WEP as secondary auth
        """
        if anticlog_threshold is not None:
            pulumi.set(__self__, "anticlog_threshold", anticlog_threshold)
        if eap_reauth is not None:
            pulumi.set(__self__, "eap_reauth", eap_reauth)
        if enable_mac_auth is not None:
            pulumi.set(__self__, "enable_mac_auth", enable_mac_auth)
        if key_idx is not None:
            pulumi.set(__self__, "key_idx", key_idx)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if multi_psk_only is not None:
            pulumi.set(__self__, "multi_psk_only", multi_psk_only)
        if owe is not None:
            pulumi.set(__self__, "owe", owe)
        if pairwises is not None:
            pulumi.set(__self__, "pairwises", pairwises)
        if private_wlan is not None:
            pulumi.set(__self__, "private_wlan", private_wlan)
        if psk is not None:
            pulumi.set(__self__, "psk", psk)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wep_as_secondary_auth is not None:
            pulumi.set(__self__, "wep_as_secondary_auth", wep_as_secondary_auth)

    @property
    @pulumi.getter(name="anticlogThreshold")
    def anticlog_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        SAE anti-clogging token threshold
        """
        return pulumi.get(self, "anticlog_threshold")

    @anticlog_threshold.setter
    def anticlog_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anticlog_threshold", value)

    @property
    @pulumi.getter(name="eapReauth")
    def eap_reauth(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to trigger EAP reauth when the session ends
        """
        return pulumi.get(self, "eap_reauth")

    @eap_reauth.setter
    def eap_reauth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eap_reauth", value)

    @property
    @pulumi.getter(name="enableMacAuth")
    def enable_mac_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable MAC Auth, uses the same auth_servers
        """
        return pulumi.get(self, "enable_mac_auth")

    @enable_mac_auth.setter
    def enable_mac_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_mac_auth", value)

    @property
    @pulumi.getter(name="keyIdx")
    def key_idx(self) -> Optional[pulumi.Input[int]]:
        """
        when `type`==`wep`
        """
        return pulumi.get(self, "key_idx")

    @key_idx.setter
    def key_idx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_idx", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="multiPskOnly")
    def multi_psk_only(self) -> Optional[pulumi.Input[bool]]:
        """
        when `type`==`psk`, whether to only use multi_psk
        """
        return pulumi.get(self, "multi_psk_only")

    @multi_psk_only.setter
    def multi_psk_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_psk_only", value)

    @property
    @pulumi.getter
    def owe(self) -> Optional[pulumi.Input[str]]:
        """
        if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
        """
        return pulumi.get(self, "owe")

    @owe.setter
    def owe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owe", value)

    @property
    @pulumi.getter
    def pairwises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
        """
        return pulumi.get(self, "pairwises")

    @pairwises.setter
    def pairwises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pairwises", value)

    @property
    @pulumi.getter(name="privateWlan")
    def private_wlan(self) -> Optional[pulumi.Input[bool]]:
        """
        when `multi_psk_only`==`true`, whether private wlan is enabled
        """
        return pulumi.get(self, "private_wlan")

    @private_wlan.setter
    def private_wlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_wlan", value)

    @property
    @pulumi.getter
    def psk(self) -> Optional[pulumi.Input[str]]:
        """
        when `type`==`psk`, 8-64 characters, or 64 hex characters
        """
        return pulumi.get(self, "psk")

    @psk.setter
    def psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psk", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wepAsSecondaryAuth")
    def wep_as_secondary_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        enable WEP as secondary auth
        """
        return pulumi.get(self, "wep_as_secondary_auth")

    @wep_as_secondary_auth.setter
    def wep_as_secondary_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wep_as_secondary_auth", value)


if not MYPY:
    class WlanAuthServerArgsDict(TypedDict):
        host: pulumi.Input[str]
        """
        ip / hostname of RADIUS server
        """
        secret: pulumi.Input[str]
        """
        secret of RADIUS server
        """
        keywrap_enabled: NotRequired[pulumi.Input[bool]]
        keywrap_format: NotRequired[pulumi.Input[str]]
        """
        enum: `ascii`, `hex`
        """
        keywrap_kek: NotRequired[pulumi.Input[str]]
        keywrap_mack: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
        """
        Auth port of RADIUS server
        """
elif False:
    WlanAuthServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanAuthServerArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 keywrap_enabled: Optional[pulumi.Input[bool]] = None,
                 keywrap_format: Optional[pulumi.Input[str]] = None,
                 keywrap_kek: Optional[pulumi.Input[str]] = None,
                 keywrap_mack: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] host: ip / hostname of RADIUS server
        :param pulumi.Input[str] secret: secret of RADIUS server
        :param pulumi.Input[str] keywrap_format: enum: `ascii`, `hex`
        :param pulumi.Input[int] port: Auth port of RADIUS server
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "secret", secret)
        if keywrap_enabled is not None:
            pulumi.set(__self__, "keywrap_enabled", keywrap_enabled)
        if keywrap_format is not None:
            pulumi.set(__self__, "keywrap_format", keywrap_format)
        if keywrap_kek is not None:
            pulumi.set(__self__, "keywrap_kek", keywrap_kek)
        if keywrap_mack is not None:
            pulumi.set(__self__, "keywrap_mack", keywrap_mack)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        ip / hostname of RADIUS server
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        secret of RADIUS server
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="keywrapEnabled")
    def keywrap_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keywrap_enabled")

    @keywrap_enabled.setter
    def keywrap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keywrap_enabled", value)

    @property
    @pulumi.getter(name="keywrapFormat")
    def keywrap_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `ascii`, `hex`
        """
        return pulumi.get(self, "keywrap_format")

    @keywrap_format.setter
    def keywrap_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_format", value)

    @property
    @pulumi.getter(name="keywrapKek")
    def keywrap_kek(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_kek")

    @keywrap_kek.setter
    def keywrap_kek(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_kek", value)

    @property
    @pulumi.getter(name="keywrapMack")
    def keywrap_mack(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keywrap_mack")

    @keywrap_mack.setter
    def keywrap_mack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keywrap_mack", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Auth port of RADIUS server
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WlanBonjourArgsDict(TypedDict):
        additional_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        """
        services: pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgsDict']]]
        """
        what services are allowed. 
        Property key is the service name
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
elif False:
    WlanBonjourArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanBonjourArgs:
    def __init__(__self__, *,
                 additional_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 services: pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_vlan_ids: additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        :param pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]] services: what services are allowed. 
               Property key is the service name
        :param pulumi.Input[bool] enabled: whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        pulumi.set(__self__, "additional_vlan_ids", additional_vlan_ids)
        pulumi.set(__self__, "services", services)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="additionalVlanIds")
    def additional_vlan_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
        """
        return pulumi.get(self, "additional_vlan_ids")

    @additional_vlan_ids.setter
    def additional_vlan_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "additional_vlan_ids", value)

    @property
    @pulumi.getter
    def services(self) -> pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]]:
        """
        what services are allowed. 
        Property key is the service name
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: pulumi.Input[Mapping[str, pulumi.Input['WlanBonjourServicesArgs']]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable bonjour for this WLAN. Once enabled, limit_bcast is assumed true, allow_mdns is assumed false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WlanBonjourServicesArgsDict(TypedDict):
        disable_local: NotRequired[pulumi.Input[bool]]
        """
        whether to prevent wireless clients to discover bonjour devices on the same WLAN
        """
        radius_groups: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        optional, if the service is further restricted for certain RADIUS groups
        """
        scope: NotRequired[pulumi.Input[str]]
        """
        how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
elif False:
    WlanBonjourServicesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanBonjourServicesArgs:
    def __init__(__self__, *,
                 disable_local: Optional[pulumi.Input[bool]] = None,
                 radius_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scope: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_local: whether to prevent wireless clients to discover bonjour devices on the same WLAN
        :param pulumi.Input[Sequence[pulumi.Input[str]]] radius_groups: optional, if the service is further restricted for certain RADIUS groups
        :param pulumi.Input[str] scope: how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        if disable_local is not None:
            pulumi.set(__self__, "disable_local", disable_local)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="disableLocal")
    def disable_local(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to prevent wireless clients to discover bonjour devices on the same WLAN
        """
        return pulumi.get(self, "disable_local")

    @disable_local.setter
    def disable_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_local", value)

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        optional, if the service is further restricted for certain RADIUS groups
        """
        return pulumi.get(self, "radius_groups")

    @radius_groups.setter
    def radius_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "radius_groups", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        how bonjour services should be discovered for the same WLAN. enum: `same_ap`, `same_map`, `same_site`
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class WlanCiscoCwaArgsDict(TypedDict):
        allowed_hostnames: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of hostnames without http(s):// (matched by substring)
        """
        allowed_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of CIDRs
        """
        blocked_subnets: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of blocked CIDRs
        """
        enabled: NotRequired[pulumi.Input[bool]]
elif False:
    WlanCiscoCwaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanCiscoCwaArgs:
    def __init__(__self__, *,
                 allowed_hostnames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blocked_subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_hostnames: list of hostnames without http(s):// (matched by substring)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_subnets: list of CIDRs
        :param pulumi.Input[Sequence[pulumi.Input[str]]] blocked_subnets: list of blocked CIDRs
        """
        if allowed_hostnames is not None:
            pulumi.set(__self__, "allowed_hostnames", allowed_hostnames)
        if allowed_subnets is not None:
            pulumi.set(__self__, "allowed_subnets", allowed_subnets)
        if blocked_subnets is not None:
            pulumi.set(__self__, "blocked_subnets", blocked_subnets)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowedHostnames")
    def allowed_hostnames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of hostnames without http(s):// (matched by substring)
        """
        return pulumi.get(self, "allowed_hostnames")

    @allowed_hostnames.setter
    def allowed_hostnames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_hostnames", value)

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of CIDRs
        """
        return pulumi.get(self, "allowed_subnets")

    @allowed_subnets.setter
    def allowed_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_subnets", value)

    @property
    @pulumi.getter(name="blockedSubnets")
    def blocked_subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of blocked CIDRs
        """
        return pulumi.get(self, "blocked_subnets")

    @blocked_subnets.setter
    def blocked_subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocked_subnets", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WlanCoaServerArgsDict(TypedDict):
        ip: pulumi.Input[str]
        secret: pulumi.Input[str]
        disable_event_timestamp_check: NotRequired[pulumi.Input[bool]]
        """
        whether to disable Event-Timestamp Check
        """
        enabled: NotRequired[pulumi.Input[bool]]
        port: NotRequired[pulumi.Input[int]]
elif False:
    WlanCoaServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanCoaServerArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 disable_event_timestamp_check: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] disable_event_timestamp_check: whether to disable Event-Timestamp Check
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "secret", secret)
        if disable_event_timestamp_check is not None:
            pulumi.set(__self__, "disable_event_timestamp_check", disable_event_timestamp_check)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="disableEventTimestampCheck")
    def disable_event_timestamp_check(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to disable Event-Timestamp Check
        """
        return pulumi.get(self, "disable_event_timestamp_check")

    @disable_event_timestamp_check.setter
    def disable_event_timestamp_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_event_timestamp_check", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WlanDnsServerRewriteArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        radius_groups: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        map between radius_group and the desired DNS server (IPv4 only)
        Property key is the RADIUS group, property value is the desired DNS Server
        """
elif False:
    WlanDnsServerRewriteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanDnsServerRewriteArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 radius_groups: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] radius_groups: map between radius_group and the desired DNS server (IPv4 only)
               Property key is the RADIUS group, property value is the desired DNS Server
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if radius_groups is not None:
            pulumi.set(__self__, "radius_groups", radius_groups)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="radiusGroups")
    def radius_groups(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        map between radius_group and the desired DNS server (IPv4 only)
        Property key is the RADIUS group, property value is the desired DNS Server
        """
        return pulumi.get(self, "radius_groups")

    @radius_groups.setter
    def radius_groups(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "radius_groups", value)


if not MYPY:
    class WlanDynamicPskArgsDict(TypedDict):
        default_psk: NotRequired[pulumi.Input[str]]
        """
        default PSK to use if cloud WLC is not available, 8-63 characters
        """
        default_vlan_id: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        force_lookup: NotRequired[pulumi.Input[bool]]
        """
        when 11r is enabled, we'll try to use the cached PMK, this can be disabled
        `false` means auto
        """
        source: NotRequired[pulumi.Input[str]]
        """
        enum: `cloud_psks`, `radius`
        """
        vlan_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    WlanDynamicPskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanDynamicPskArgs:
    def __init__(__self__, *,
                 default_psk: Optional[pulumi.Input[str]] = None,
                 default_vlan_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force_lookup: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] default_psk: default PSK to use if cloud WLC is not available, 8-63 characters
        :param pulumi.Input[bool] force_lookup: when 11r is enabled, we'll try to use the cached PMK, this can be disabled
               `false` means auto
        :param pulumi.Input[str] source: enum: `cloud_psks`, `radius`
        """
        if default_psk is not None:
            pulumi.set(__self__, "default_psk", default_psk)
        if default_vlan_id is not None:
            pulumi.set(__self__, "default_vlan_id", default_vlan_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if force_lookup is not None:
            pulumi.set(__self__, "force_lookup", force_lookup)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if vlan_ids is not None:
            pulumi.set(__self__, "vlan_ids", vlan_ids)

    @property
    @pulumi.getter(name="defaultPsk")
    def default_psk(self) -> Optional[pulumi.Input[str]]:
        """
        default PSK to use if cloud WLC is not available, 8-63 characters
        """
        return pulumi.get(self, "default_psk")

    @default_psk.setter
    def default_psk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_psk", value)

    @property
    @pulumi.getter(name="defaultVlanId")
    def default_vlan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_vlan_id")

    @default_vlan_id.setter
    def default_vlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_vlan_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="forceLookup")
    def force_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        when 11r is enabled, we'll try to use the cached PMK, this can be disabled
        `false` means auto
        """
        return pulumi.get(self, "force_lookup")

    @force_lookup.setter
    def force_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_lookup", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `cloud_psks`, `radius`
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="vlanIds")
    def vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "vlan_ids")

    @vlan_ids.setter
    def vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vlan_ids", value)


if not MYPY:
    class WlanDynamicVlanArgsDict(TypedDict):
        default_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to enable dynamic vlan
        """
        local_vlan_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        vlan_ids to be locally bridged
        """
        type: NotRequired[pulumi.Input[str]]
        """
        standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        """
        vlans: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
          * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
          * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
elif False:
    WlanDynamicVlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanDynamicVlanArgs:
    def __init__(__self__, *,
                 default_vlan_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 local_vlan_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_vlan_ids: Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        :param pulumi.Input[bool] enabled: whether to enable dynamic vlan
        :param pulumi.Input[Sequence[pulumi.Input[str]]] local_vlan_ids: vlan_ids to be locally bridged
        :param pulumi.Input[str] type: standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vlans: map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
                 * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
                 * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        pulumi.set(__self__, "default_vlan_ids", default_vlan_ids)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if local_vlan_ids is not None:
            pulumi.set(__self__, "local_vlan_ids", local_vlan_ids)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="defaultVlanIds")
    def default_vlan_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
        """
        return pulumi.get(self, "default_vlan_ids")

    @default_vlan_ids.setter
    def default_vlan_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "default_vlan_ids", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable dynamic vlan
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="localVlanIds")
    def local_vlan_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vlan_ids to be locally bridged
        """
        return pulumi.get(self, "local_vlan_ids")

    @local_vlan_ids.setter
    def local_vlan_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "local_vlan_ids", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        map between vlan_id (as string) to airespace interface names (comma-separated) or null for stndard mapping
          * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \\"\\"
          * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vlans", value)


if not MYPY:
    class WlanHotspot20ArgsDict(TypedDict):
        domain_names: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to enable hotspot 2.0 config
        """
        nai_realms: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        operators: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of operators to support
        """
        rcois: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        venue_name: NotRequired[pulumi.Input[str]]
        """
        venue name, default is site name
        """
elif False:
    WlanHotspot20ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanHotspot20Args:
    def __init__(__self__, *,
                 domain_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 nai_realms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rcois: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 venue_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to enable hotspot 2.0 config
        :param pulumi.Input[Sequence[pulumi.Input[str]]] operators: list of operators to support
        :param pulumi.Input[str] venue_name: venue name, default is site name
        """
        if domain_names is not None:
            pulumi.set(__self__, "domain_names", domain_names)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if nai_realms is not None:
            pulumi.set(__self__, "nai_realms", nai_realms)
        if operators is not None:
            pulumi.set(__self__, "operators", operators)
        if rcois is not None:
            pulumi.set(__self__, "rcois", rcois)
        if venue_name is not None:
            pulumi.set(__self__, "venue_name", venue_name)

    @property
    @pulumi.getter(name="domainNames")
    def domain_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "domain_names")

    @domain_names.setter
    def domain_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_names", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable hotspot 2.0 config
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="naiRealms")
    def nai_realms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nai_realms")

    @nai_realms.setter
    def nai_realms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nai_realms", value)

    @property
    @pulumi.getter
    def operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of operators to support
        """
        return pulumi.get(self, "operators")

    @operators.setter
    def operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "operators", value)

    @property
    @pulumi.getter
    def rcois(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rcois")

    @rcois.setter
    def rcois(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rcois", value)

    @property
    @pulumi.getter(name="venueName")
    def venue_name(self) -> Optional[pulumi.Input[str]]:
        """
        venue name, default is site name
        """
        return pulumi.get(self, "venue_name")

    @venue_name.setter
    def venue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "venue_name", value)


if not MYPY:
    class WlanInjectDhcpOption82ArgsDict(TypedDict):
        circuit_id: NotRequired[pulumi.Input[str]]
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to inject option 82 when forwarding DHCP packets
        """
elif False:
    WlanInjectDhcpOption82ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanInjectDhcpOption82Args:
    def __init__(__self__, *,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: whether to inject option 82 when forwarding DHCP packets
        """
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to inject option 82 when forwarding DHCP packets
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WlanMistNacArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        when enabled:
          * `auth_servers` is ignored
          * `acct_servers` is ignored
          * `auth_servers_*` are ignored
          * `coa_servers` is ignored
          * `radsec` is ignored
          * `coa_enabled` is assumed'
        """
elif False:
    WlanMistNacArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanMistNacArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: when enabled:
                 * `auth_servers` is ignored
                 * `acct_servers` is ignored
                 * `auth_servers_*` are ignored
                 * `coa_servers` is ignored
                 * `radsec` is ignored
                 * `coa_enabled` is assumed'
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        when enabled:
          * `auth_servers` is ignored
          * `acct_servers` is ignored
          * `auth_servers_*` are ignored
          * `coa_servers` is ignored
          * `radsec` is ignored
          * `coa_enabled` is assumed'
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class WlanPortalArgsDict(TypedDict):
        amazon_client_id: NotRequired[pulumi.Input[str]]
        """
        amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        amazon_client_secret: NotRequired[pulumi.Input[str]]
        """
        amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        amazon_email_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        amazon_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether amazon is enabled as a login method
        """
        amazon_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        """
        auth: NotRequired[pulumi.Input[str]]
        """
        authentication scheme. enum: `external`, `none`, `sso`
        """
        azure_client_id: NotRequired[pulumi.Input[str]]
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client id
        """
        azure_client_secret: NotRequired[pulumi.Input[str]]
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client secret
        """
        azure_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether Azure Active Directory is enabled as a login method
        """
        azure_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        """
        azure_tenant_id: NotRequired[pulumi.Input[str]]
        """
        Required if `azure_enabled`==`true`.
        Azure active directory tenant id.
        """
        broadnet_password: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`broadnet`
        """
        broadnet_sid: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`broadnet`
        """
        broadnet_user_id: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`broadnet`
        """
        bypass_when_cloud_down: NotRequired[pulumi.Input[bool]]
        """
        whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        """
        clickatell_api_key: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`clickatell`
        """
        cross_site: NotRequired[pulumi.Input[bool]]
        """
        whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        """
        email_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether email (access code verification) is enabled as a login method
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        whether guest portal is enabled
        """
        expire: NotRequired[pulumi.Input[float]]
        """
        how long to remain authorized, in minutes
        """
        external_portal_url: NotRequired[pulumi.Input[str]]
        """
        external portal URL (e.g. https://host/url) where we can append our query parameters to
        """
        facebook_client_id: NotRequired[pulumi.Input[str]]
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        facebook_client_secret: NotRequired[pulumi.Input[str]]
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        facebook_email_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        facebook_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether facebook is enabled as a login method
        """
        facebook_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        """
        forward: NotRequired[pulumi.Input[bool]]
        """
        whether to forward the user to another URL after authorized
        """
        forward_url: NotRequired[pulumi.Input[str]]
        """
        the URL to forward the user to
        """
        google_client_id: NotRequired[pulumi.Input[str]]
        """
        Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        google_client_secret: NotRequired[pulumi.Input[str]]
        """
        Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        google_email_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        google_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether google is enabled as login method
        """
        google_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        """
        gupshup_password: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`gupshup`
        """
        gupshup_userid: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`gupshup`
        """
        microsoft_client_id: NotRequired[pulumi.Input[str]]
        """
        microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        microsoft_client_secret: NotRequired[pulumi.Input[str]]
        """
        microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        microsoft_email_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        microsoft_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether microsoft 365 is enabled as a login method
        """
        microsoft_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        """
        passphrase_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether password is enabled
        """
        passphrase_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        """
        password: NotRequired[pulumi.Input[str]]
        """
        passphrase
        """
        predefined_sponsors_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        """
        predefined_sponsors_hide_email: NotRequired[pulumi.Input[bool]]
        """
        whether to hide sponsor’s email from list of sponsors
        """
        privacy: NotRequired[pulumi.Input[bool]]
        puzzel_password: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`puzzel`
        """
        puzzel_service_id: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`puzzel`
        """
        puzzel_username: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`puzzel`
        """
        sms_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether sms is enabled as a login method
        """
        sms_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        """
        sms_message_format: NotRequired[pulumi.Input[str]]
        sms_provider: NotRequired[pulumi.Input[str]]
        """
        enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        """
        sponsor_auto_approve: NotRequired[pulumi.Input[bool]]
        """
        whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        """
        sponsor_email_domains: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        """
        sponsor_enabled: NotRequired[pulumi.Input[bool]]
        """
        whether sponsor is enabled
        """
        sponsor_expire: NotRequired[pulumi.Input[float]]
        """
        interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        """
        sponsor_link_validity_duration: NotRequired[pulumi.Input[str]]
        """
        how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        """
        sponsor_notify_all: NotRequired[pulumi.Input[bool]]
        """
        whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        """
        sponsor_status_notify: NotRequired[pulumi.Input[bool]]
        """
        if enabled, guest will get email about sponsor's action (approve/deny)
        """
        sponsors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        object of allowed sponsors email with name. Required if `sponsor_enabled`
                    is `true` and `sponsor_email_domains` is empty.

                    Property key is the sponsor email, Property value is the sponsor name
        """
        sso_default_role: NotRequired[pulumi.Input[str]]
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        """
        sso_forced_role: NotRequired[pulumi.Input[str]]
        sso_idp_cert: NotRequired[pulumi.Input[str]]
        """
        IDP Cert (used to verify the signed response)
        """
        sso_idp_sign_algo: NotRequired[pulumi.Input[str]]
        """
        signing algorithm for SAML Assertion
        """
        sso_idp_sso_url: NotRequired[pulumi.Input[str]]
        """
        IDP Single-Sign-On URL
        """
        sso_issuer: NotRequired[pulumi.Input[str]]
        """
        IDP issuer URL
        """
        sso_nameid_format: NotRequired[pulumi.Input[str]]
        """
        enum: `email`, `unspecified`
        """
        telstra_client_id: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`telstra`, Client ID provided by Telstra
        """
        telstra_client_secret: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`telstra`, Client secret provided by Telstra
        """
        twilio_auth_token: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`twilio`, Auth token account with twilio account
        """
        twilio_phone_number: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        """
        twilio_sid: NotRequired[pulumi.Input[str]]
        """
        when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
elif False:
    WlanPortalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanPortalArgs:
    def __init__(__self__, *,
                 amazon_client_id: Optional[pulumi.Input[str]] = None,
                 amazon_client_secret: Optional[pulumi.Input[str]] = None,
                 amazon_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 amazon_enabled: Optional[pulumi.Input[bool]] = None,
                 amazon_expire: Optional[pulumi.Input[float]] = None,
                 auth: Optional[pulumi.Input[str]] = None,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_enabled: Optional[pulumi.Input[bool]] = None,
                 azure_expire: Optional[pulumi.Input[float]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 broadnet_password: Optional[pulumi.Input[str]] = None,
                 broadnet_sid: Optional[pulumi.Input[str]] = None,
                 broadnet_user_id: Optional[pulumi.Input[str]] = None,
                 bypass_when_cloud_down: Optional[pulumi.Input[bool]] = None,
                 clickatell_api_key: Optional[pulumi.Input[str]] = None,
                 cross_site: Optional[pulumi.Input[bool]] = None,
                 email_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expire: Optional[pulumi.Input[float]] = None,
                 external_portal_url: Optional[pulumi.Input[str]] = None,
                 facebook_client_id: Optional[pulumi.Input[str]] = None,
                 facebook_client_secret: Optional[pulumi.Input[str]] = None,
                 facebook_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 facebook_enabled: Optional[pulumi.Input[bool]] = None,
                 facebook_expire: Optional[pulumi.Input[float]] = None,
                 forward: Optional[pulumi.Input[bool]] = None,
                 forward_url: Optional[pulumi.Input[str]] = None,
                 google_client_id: Optional[pulumi.Input[str]] = None,
                 google_client_secret: Optional[pulumi.Input[str]] = None,
                 google_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 google_enabled: Optional[pulumi.Input[bool]] = None,
                 google_expire: Optional[pulumi.Input[float]] = None,
                 gupshup_password: Optional[pulumi.Input[str]] = None,
                 gupshup_userid: Optional[pulumi.Input[str]] = None,
                 microsoft_client_id: Optional[pulumi.Input[str]] = None,
                 microsoft_client_secret: Optional[pulumi.Input[str]] = None,
                 microsoft_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 microsoft_enabled: Optional[pulumi.Input[bool]] = None,
                 microsoft_expire: Optional[pulumi.Input[float]] = None,
                 passphrase_enabled: Optional[pulumi.Input[bool]] = None,
                 passphrase_expire: Optional[pulumi.Input[float]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 predefined_sponsors_enabled: Optional[pulumi.Input[bool]] = None,
                 predefined_sponsors_hide_email: Optional[pulumi.Input[bool]] = None,
                 privacy: Optional[pulumi.Input[bool]] = None,
                 puzzel_password: Optional[pulumi.Input[str]] = None,
                 puzzel_service_id: Optional[pulumi.Input[str]] = None,
                 puzzel_username: Optional[pulumi.Input[str]] = None,
                 sms_enabled: Optional[pulumi.Input[bool]] = None,
                 sms_expire: Optional[pulumi.Input[float]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_provider: Optional[pulumi.Input[str]] = None,
                 sponsor_auto_approve: Optional[pulumi.Input[bool]] = None,
                 sponsor_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sponsor_enabled: Optional[pulumi.Input[bool]] = None,
                 sponsor_expire: Optional[pulumi.Input[float]] = None,
                 sponsor_link_validity_duration: Optional[pulumi.Input[str]] = None,
                 sponsor_notify_all: Optional[pulumi.Input[bool]] = None,
                 sponsor_status_notify: Optional[pulumi.Input[bool]] = None,
                 sponsors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sso_default_role: Optional[pulumi.Input[str]] = None,
                 sso_forced_role: Optional[pulumi.Input[str]] = None,
                 sso_idp_cert: Optional[pulumi.Input[str]] = None,
                 sso_idp_sign_algo: Optional[pulumi.Input[str]] = None,
                 sso_idp_sso_url: Optional[pulumi.Input[str]] = None,
                 sso_issuer: Optional[pulumi.Input[str]] = None,
                 sso_nameid_format: Optional[pulumi.Input[str]] = None,
                 telstra_client_id: Optional[pulumi.Input[str]] = None,
                 telstra_client_secret: Optional[pulumi.Input[str]] = None,
                 twilio_auth_token: Optional[pulumi.Input[str]] = None,
                 twilio_phone_number: Optional[pulumi.Input[str]] = None,
                 twilio_sid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amazon_client_id: amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] amazon_client_secret: amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] amazon_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] amazon_enabled: whether amazon is enabled as a login method
        :param pulumi.Input[float] amazon_expire: interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] auth: authentication scheme. enum: `external`, `none`, `sso`
        :param pulumi.Input[str] azure_client_id: Required if `azure_enabled`==`true`.
               Azure active directory app client id
        :param pulumi.Input[str] azure_client_secret: Required if `azure_enabled`==`true`.
               Azure active directory app client secret
        :param pulumi.Input[bool] azure_enabled: whether Azure Active Directory is enabled as a login method
        :param pulumi.Input[float] azure_expire: interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] azure_tenant_id: Required if `azure_enabled`==`true`.
               Azure active directory tenant id.
        :param pulumi.Input[str] broadnet_password: when `sms_provider`==`broadnet`
        :param pulumi.Input[str] broadnet_sid: when `sms_provider`==`broadnet`
        :param pulumi.Input[str] broadnet_user_id: when `sms_provider`==`broadnet`
        :param pulumi.Input[bool] bypass_when_cloud_down: whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        :param pulumi.Input[str] clickatell_api_key: when `sms_provider`==`clickatell`
        :param pulumi.Input[bool] cross_site: whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        :param pulumi.Input[bool] email_enabled: whether email (access code verification) is enabled as a login method
        :param pulumi.Input[bool] enabled: whether guest portal is enabled
        :param pulumi.Input[float] expire: how long to remain authorized, in minutes
        :param pulumi.Input[str] external_portal_url: external portal URL (e.g. https://host/url) where we can append our query parameters to
        :param pulumi.Input[str] facebook_client_id: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] facebook_client_secret: Required if `facebook_enabled`==`true`.
               Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] facebook_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] facebook_enabled: whether facebook is enabled as a login method
        :param pulumi.Input[float] facebook_expire: interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[bool] forward: whether to forward the user to another URL after authorized
        :param pulumi.Input[str] forward_url: the URL to forward the user to
        :param pulumi.Input[str] google_client_id: Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] google_client_secret: Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] google_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] google_enabled: whether google is enabled as login method
        :param pulumi.Input[float] google_expire: interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] gupshup_password: when `sms_provider`==`gupshup`
        :param pulumi.Input[str] gupshup_userid: when `sms_provider`==`gupshup`
        :param pulumi.Input[str] microsoft_client_id: microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        :param pulumi.Input[str] microsoft_client_secret: microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] microsoft_email_domains: Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        :param pulumi.Input[bool] microsoft_enabled: whether microsoft 365 is enabled as a login method
        :param pulumi.Input[float] microsoft_expire: interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[bool] passphrase_enabled: whether password is enabled
        :param pulumi.Input[float] passphrase_expire: interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        :param pulumi.Input[str] password: passphrase
        :param pulumi.Input[bool] predefined_sponsors_enabled: whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        :param pulumi.Input[bool] predefined_sponsors_hide_email: whether to hide sponsor’s email from list of sponsors
        :param pulumi.Input[str] puzzel_password: when `sms_provider`==`puzzel`
        :param pulumi.Input[str] puzzel_service_id: when `sms_provider`==`puzzel`
        :param pulumi.Input[str] puzzel_username: when `sms_provider`==`puzzel`
        :param pulumi.Input[bool] sms_enabled: whether sms is enabled as a login method
        :param pulumi.Input[float] sms_expire: interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] sms_provider: enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        :param pulumi.Input[bool] sponsor_auto_approve: whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sponsor_email_domains: list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        :param pulumi.Input[bool] sponsor_enabled: whether sponsor is enabled
        :param pulumi.Input[float] sponsor_expire: interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        :param pulumi.Input[str] sponsor_link_validity_duration: how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        :param pulumi.Input[bool] sponsor_notify_all: whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        :param pulumi.Input[bool] sponsor_status_notify: if enabled, guest will get email about sponsor's action (approve/deny)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] sponsors: object of allowed sponsors email with name. Required if `sponsor_enabled`
                           is `true` and `sponsor_email_domains` is empty.
               
                           Property key is the sponsor email, Property value is the sponsor name
        :param pulumi.Input[str] sso_default_role: default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        :param pulumi.Input[str] sso_idp_cert: IDP Cert (used to verify the signed response)
        :param pulumi.Input[str] sso_idp_sign_algo: signing algorithm for SAML Assertion
        :param pulumi.Input[str] sso_idp_sso_url: IDP Single-Sign-On URL
        :param pulumi.Input[str] sso_issuer: IDP issuer URL
        :param pulumi.Input[str] sso_nameid_format: enum: `email`, `unspecified`
        :param pulumi.Input[str] telstra_client_id: when `sms_provider`==`telstra`, Client ID provided by Telstra
        :param pulumi.Input[str] telstra_client_secret: when `sms_provider`==`telstra`, Client secret provided by Telstra
        :param pulumi.Input[str] twilio_auth_token: when `sms_provider`==`twilio`, Auth token account with twilio account
        :param pulumi.Input[str] twilio_phone_number: when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        :param pulumi.Input[str] twilio_sid: when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        if amazon_client_id is not None:
            pulumi.set(__self__, "amazon_client_id", amazon_client_id)
        if amazon_client_secret is not None:
            pulumi.set(__self__, "amazon_client_secret", amazon_client_secret)
        if amazon_email_domains is not None:
            pulumi.set(__self__, "amazon_email_domains", amazon_email_domains)
        if amazon_enabled is not None:
            pulumi.set(__self__, "amazon_enabled", amazon_enabled)
        if amazon_expire is not None:
            pulumi.set(__self__, "amazon_expire", amazon_expire)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_enabled is not None:
            pulumi.set(__self__, "azure_enabled", azure_enabled)
        if azure_expire is not None:
            pulumi.set(__self__, "azure_expire", azure_expire)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if broadnet_password is not None:
            pulumi.set(__self__, "broadnet_password", broadnet_password)
        if broadnet_sid is not None:
            pulumi.set(__self__, "broadnet_sid", broadnet_sid)
        if broadnet_user_id is not None:
            pulumi.set(__self__, "broadnet_user_id", broadnet_user_id)
        if bypass_when_cloud_down is not None:
            pulumi.set(__self__, "bypass_when_cloud_down", bypass_when_cloud_down)
        if clickatell_api_key is not None:
            pulumi.set(__self__, "clickatell_api_key", clickatell_api_key)
        if cross_site is not None:
            pulumi.set(__self__, "cross_site", cross_site)
        if email_enabled is not None:
            pulumi.set(__self__, "email_enabled", email_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expire is not None:
            pulumi.set(__self__, "expire", expire)
        if external_portal_url is not None:
            pulumi.set(__self__, "external_portal_url", external_portal_url)
        if facebook_client_id is not None:
            pulumi.set(__self__, "facebook_client_id", facebook_client_id)
        if facebook_client_secret is not None:
            pulumi.set(__self__, "facebook_client_secret", facebook_client_secret)
        if facebook_email_domains is not None:
            pulumi.set(__self__, "facebook_email_domains", facebook_email_domains)
        if facebook_enabled is not None:
            pulumi.set(__self__, "facebook_enabled", facebook_enabled)
        if facebook_expire is not None:
            pulumi.set(__self__, "facebook_expire", facebook_expire)
        if forward is not None:
            pulumi.set(__self__, "forward", forward)
        if forward_url is not None:
            pulumi.set(__self__, "forward_url", forward_url)
        if google_client_id is not None:
            pulumi.set(__self__, "google_client_id", google_client_id)
        if google_client_secret is not None:
            pulumi.set(__self__, "google_client_secret", google_client_secret)
        if google_email_domains is not None:
            pulumi.set(__self__, "google_email_domains", google_email_domains)
        if google_enabled is not None:
            pulumi.set(__self__, "google_enabled", google_enabled)
        if google_expire is not None:
            pulumi.set(__self__, "google_expire", google_expire)
        if gupshup_password is not None:
            pulumi.set(__self__, "gupshup_password", gupshup_password)
        if gupshup_userid is not None:
            pulumi.set(__self__, "gupshup_userid", gupshup_userid)
        if microsoft_client_id is not None:
            pulumi.set(__self__, "microsoft_client_id", microsoft_client_id)
        if microsoft_client_secret is not None:
            pulumi.set(__self__, "microsoft_client_secret", microsoft_client_secret)
        if microsoft_email_domains is not None:
            pulumi.set(__self__, "microsoft_email_domains", microsoft_email_domains)
        if microsoft_enabled is not None:
            pulumi.set(__self__, "microsoft_enabled", microsoft_enabled)
        if microsoft_expire is not None:
            pulumi.set(__self__, "microsoft_expire", microsoft_expire)
        if passphrase_enabled is not None:
            pulumi.set(__self__, "passphrase_enabled", passphrase_enabled)
        if passphrase_expire is not None:
            pulumi.set(__self__, "passphrase_expire", passphrase_expire)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if predefined_sponsors_enabled is not None:
            pulumi.set(__self__, "predefined_sponsors_enabled", predefined_sponsors_enabled)
        if predefined_sponsors_hide_email is not None:
            pulumi.set(__self__, "predefined_sponsors_hide_email", predefined_sponsors_hide_email)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if puzzel_password is not None:
            pulumi.set(__self__, "puzzel_password", puzzel_password)
        if puzzel_service_id is not None:
            pulumi.set(__self__, "puzzel_service_id", puzzel_service_id)
        if puzzel_username is not None:
            pulumi.set(__self__, "puzzel_username", puzzel_username)
        if sms_enabled is not None:
            pulumi.set(__self__, "sms_enabled", sms_enabled)
        if sms_expire is not None:
            pulumi.set(__self__, "sms_expire", sms_expire)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_provider is not None:
            pulumi.set(__self__, "sms_provider", sms_provider)
        if sponsor_auto_approve is not None:
            pulumi.set(__self__, "sponsor_auto_approve", sponsor_auto_approve)
        if sponsor_email_domains is not None:
            pulumi.set(__self__, "sponsor_email_domains", sponsor_email_domains)
        if sponsor_enabled is not None:
            pulumi.set(__self__, "sponsor_enabled", sponsor_enabled)
        if sponsor_expire is not None:
            pulumi.set(__self__, "sponsor_expire", sponsor_expire)
        if sponsor_link_validity_duration is not None:
            pulumi.set(__self__, "sponsor_link_validity_duration", sponsor_link_validity_duration)
        if sponsor_notify_all is not None:
            pulumi.set(__self__, "sponsor_notify_all", sponsor_notify_all)
        if sponsor_status_notify is not None:
            pulumi.set(__self__, "sponsor_status_notify", sponsor_status_notify)
        if sponsors is not None:
            pulumi.set(__self__, "sponsors", sponsors)
        if sso_default_role is not None:
            pulumi.set(__self__, "sso_default_role", sso_default_role)
        if sso_forced_role is not None:
            pulumi.set(__self__, "sso_forced_role", sso_forced_role)
        if sso_idp_cert is not None:
            pulumi.set(__self__, "sso_idp_cert", sso_idp_cert)
        if sso_idp_sign_algo is not None:
            pulumi.set(__self__, "sso_idp_sign_algo", sso_idp_sign_algo)
        if sso_idp_sso_url is not None:
            pulumi.set(__self__, "sso_idp_sso_url", sso_idp_sso_url)
        if sso_issuer is not None:
            pulumi.set(__self__, "sso_issuer", sso_issuer)
        if sso_nameid_format is not None:
            pulumi.set(__self__, "sso_nameid_format", sso_nameid_format)
        if telstra_client_id is not None:
            pulumi.set(__self__, "telstra_client_id", telstra_client_id)
        if telstra_client_secret is not None:
            pulumi.set(__self__, "telstra_client_secret", telstra_client_secret)
        if twilio_auth_token is not None:
            pulumi.set(__self__, "twilio_auth_token", twilio_auth_token)
        if twilio_phone_number is not None:
            pulumi.set(__self__, "twilio_phone_number", twilio_phone_number)
        if twilio_sid is not None:
            pulumi.set(__self__, "twilio_sid", twilio_sid)

    @property
    @pulumi.getter(name="amazonClientId")
    def amazon_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "amazon_client_id")

    @amazon_client_id.setter
    def amazon_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_client_id", value)

    @property
    @pulumi.getter(name="amazonClientSecret")
    def amazon_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        amazon OAuth2 client secret. If amazon_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "amazon_client_secret")

    @amazon_client_secret.setter
    def amazon_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amazon_client_secret", value)

    @property
    @pulumi.getter(name="amazonEmailDomains")
    def amazon_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "amazon_email_domains")

    @amazon_email_domains.setter
    def amazon_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "amazon_email_domains", value)

    @property
    @pulumi.getter(name="amazonEnabled")
    def amazon_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether amazon is enabled as a login method
        """
        return pulumi.get(self, "amazon_enabled")

    @amazon_enabled.setter
    def amazon_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "amazon_enabled", value)

    @property
    @pulumi.getter(name="amazonExpire")
    def amazon_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "amazon_expire")

    @amazon_expire.setter
    def amazon_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "amazon_expire", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        authentication scheme. enum: `external`, `none`, `sso`
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client id
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory app client secret
        """
        return pulumi.get(self, "azure_client_secret")

    @azure_client_secret.setter
    def azure_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_secret", value)

    @property
    @pulumi.getter(name="azureEnabled")
    def azure_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether Azure Active Directory is enabled as a login method
        """
        return pulumi.get(self, "azure_enabled")

    @azure_enabled.setter
    def azure_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_enabled", value)

    @property
    @pulumi.getter(name="azureExpire")
    def azure_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "azure_expire")

    @azure_expire.setter
    def azure_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "azure_expire", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `azure_enabled`==`true`.
        Azure active directory tenant id.
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @property
    @pulumi.getter(name="broadnetPassword")
    def broadnet_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_password")

    @broadnet_password.setter
    def broadnet_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_password", value)

    @property
    @pulumi.getter(name="broadnetSid")
    def broadnet_sid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_sid")

    @broadnet_sid.setter
    def broadnet_sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_sid", value)

    @property
    @pulumi.getter(name="broadnetUserId")
    def broadnet_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`broadnet`
        """
        return pulumi.get(self, "broadnet_user_id")

    @broadnet_user_id.setter
    def broadnet_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadnet_user_id", value)

    @property
    @pulumi.getter(name="bypassWhenCloudDown")
    def bypass_when_cloud_down(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to bypass the guest portal when cloud not reachable (and apply the default policies)
        """
        return pulumi.get(self, "bypass_when_cloud_down")

    @bypass_when_cloud_down.setter
    def bypass_when_cloud_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_when_cloud_down", value)

    @property
    @pulumi.getter(name="clickatellApiKey")
    def clickatell_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`clickatell`
        """
        return pulumi.get(self, "clickatell_api_key")

    @clickatell_api_key.setter
    def clickatell_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clickatell_api_key", value)

    @property
    @pulumi.getter(name="crossSite")
    def cross_site(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable random_mac for seamless roaming)
        """
        return pulumi.get(self, "cross_site")

    @cross_site.setter
    def cross_site(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cross_site", value)

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether email (access code verification) is enabled as a login method
        """
        return pulumi.get(self, "email_enabled")

    @email_enabled.setter
    def email_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether guest portal is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def expire(self) -> Optional[pulumi.Input[float]]:
        """
        how long to remain authorized, in minutes
        """
        return pulumi.get(self, "expire")

    @expire.setter
    def expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "expire", value)

    @property
    @pulumi.getter(name="externalPortalUrl")
    def external_portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        external portal URL (e.g. https://host/url) where we can append our query parameters to
        """
        return pulumi.get(self, "external_portal_url")

    @external_portal_url.setter
    def external_portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_portal_url", value)

    @property
    @pulumi.getter(name="facebookClientId")
    def facebook_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "facebook_client_id")

    @facebook_client_id.setter
    def facebook_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facebook_client_id", value)

    @property
    @pulumi.getter(name="facebookClientSecret")
    def facebook_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `facebook_enabled`==`true`.
        Facebook OAuth2 app secret. If facebook_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "facebook_client_secret")

    @facebook_client_secret.setter
    def facebook_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facebook_client_secret", value)

    @property
    @pulumi.getter(name="facebookEmailDomains")
    def facebook_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "facebook_email_domains")

    @facebook_email_domains.setter
    def facebook_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "facebook_email_domains", value)

    @property
    @pulumi.getter(name="facebookEnabled")
    def facebook_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether facebook is enabled as a login method
        """
        return pulumi.get(self, "facebook_enabled")

    @facebook_enabled.setter
    def facebook_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "facebook_enabled", value)

    @property
    @pulumi.getter(name="facebookExpire")
    def facebook_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "facebook_expire")

    @facebook_expire.setter
    def facebook_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "facebook_expire", value)

    @property
    @pulumi.getter
    def forward(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to forward the user to another URL after authorized
        """
        return pulumi.get(self, "forward")

    @forward.setter
    def forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward", value)

    @property
    @pulumi.getter(name="forwardUrl")
    def forward_url(self) -> Optional[pulumi.Input[str]]:
        """
        the URL to forward the user to
        """
        return pulumi.get(self, "forward_url")

    @forward_url.setter
    def forward_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_url", value)

    @property
    @pulumi.getter(name="googleClientId")
    def google_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Google OAuth2 app id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "google_client_id")

    @google_client_id.setter
    def google_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_client_id", value)

    @property
    @pulumi.getter(name="googleClientSecret")
    def google_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Google OAuth2 app secret. If google_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "google_client_secret")

    @google_client_secret.setter
    def google_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "google_client_secret", value)

    @property
    @pulumi.getter(name="googleEmailDomains")
    def google_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "google_email_domains")

    @google_email_domains.setter
    def google_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "google_email_domains", value)

    @property
    @pulumi.getter(name="googleEnabled")
    def google_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether google is enabled as login method
        """
        return pulumi.get(self, "google_enabled")

    @google_enabled.setter
    def google_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "google_enabled", value)

    @property
    @pulumi.getter(name="googleExpire")
    def google_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "google_expire")

    @google_expire.setter
    def google_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "google_expire", value)

    @property
    @pulumi.getter(name="gupshupPassword")
    def gupshup_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_password")

    @gupshup_password.setter
    def gupshup_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gupshup_password", value)

    @property
    @pulumi.getter(name="gupshupUserid")
    def gupshup_userid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`gupshup`
        """
        return pulumi.get(self, "gupshup_userid")

    @gupshup_userid.setter
    def gupshup_userid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gupshup_userid", value)

    @property
    @pulumi.getter(name="microsoftClientId")
    def microsoft_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
        """
        return pulumi.get(self, "microsoft_client_id")

    @microsoft_client_id.setter
    def microsoft_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_client_id", value)

    @property
    @pulumi.getter(name="microsoftClientSecret")
    def microsoft_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        microsoft 365 OAuth2 client secret. If microsoft_client_id was provided, provide a correspoinding value. Else leave blank.
        """
        return pulumi.get(self, "microsoft_client_secret")

    @microsoft_client_secret.setter
    def microsoft_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microsoft_client_secret", value)

    @property
    @pulumi.getter(name="microsoftEmailDomains")
    def microsoft_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
        """
        return pulumi.get(self, "microsoft_email_domains")

    @microsoft_email_domains.setter
    def microsoft_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "microsoft_email_domains", value)

    @property
    @pulumi.getter(name="microsoftEnabled")
    def microsoft_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether microsoft 365 is enabled as a login method
        """
        return pulumi.get(self, "microsoft_enabled")

    @microsoft_enabled.setter
    def microsoft_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "microsoft_enabled", value)

    @property
    @pulumi.getter(name="microsoftExpire")
    def microsoft_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "microsoft_expire")

    @microsoft_expire.setter
    def microsoft_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "microsoft_expire", value)

    @property
    @pulumi.getter(name="passphraseEnabled")
    def passphrase_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether password is enabled
        """
        return pulumi.get(self, "passphrase_enabled")

    @passphrase_enabled.setter
    def passphrase_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passphrase_enabled", value)

    @property
    @pulumi.getter(name="passphraseExpire")
    def passphrase_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
        """
        return pulumi.get(self, "passphrase_expire")

    @passphrase_expire.setter
    def passphrase_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "passphrase_expire", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        passphrase
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="predefinedSponsorsEnabled")
    def predefined_sponsors_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsor_notify_all` and `predefined_sponsors_enabled` are false, behaviour is acc to `sponsor_email_domains`
        """
        return pulumi.get(self, "predefined_sponsors_enabled")

    @predefined_sponsors_enabled.setter
    def predefined_sponsors_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined_sponsors_enabled", value)

    @property
    @pulumi.getter(name="predefinedSponsorsHideEmail")
    def predefined_sponsors_hide_email(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to hide sponsor’s email from list of sponsors
        """
        return pulumi.get(self, "predefined_sponsors_hide_email")

    @predefined_sponsors_hide_email.setter
    def predefined_sponsors_hide_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined_sponsors_hide_email", value)

    @property
    @pulumi.getter
    def privacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="puzzelPassword")
    def puzzel_password(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_password")

    @puzzel_password.setter
    def puzzel_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_password", value)

    @property
    @pulumi.getter(name="puzzelServiceId")
    def puzzel_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_service_id")

    @puzzel_service_id.setter
    def puzzel_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_service_id", value)

    @property
    @pulumi.getter(name="puzzelUsername")
    def puzzel_username(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`puzzel`
        """
        return pulumi.get(self, "puzzel_username")

    @puzzel_username.setter
    def puzzel_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "puzzel_username", value)

    @property
    @pulumi.getter(name="smsEnabled")
    def sms_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether sms is enabled as a login method
        """
        return pulumi.get(self, "sms_enabled")

    @sms_enabled.setter
    def sms_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_enabled", value)

    @property
    @pulumi.getter(name="smsExpire")
    def sms_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sms_expire")

    @sms_expire.setter
    def sms_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sms_expire", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsProvider")
    def sms_provider(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
        """
        return pulumi.get(self, "sms_provider")

    @sms_provider.setter
    def sms_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_provider", value)

    @property
    @pulumi.getter(name="sponsorAutoApprove")
    def sponsor_auto_approve(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to automatically approve guest and allow sponsor to revoke guest access, needs predefined_sponsors_enabled enabled and sponsor_notify_all disabled
        """
        return pulumi.get(self, "sponsor_auto_approve")

    @sponsor_auto_approve.setter
    def sponsor_auto_approve(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_auto_approve", value)

    @property
    @pulumi.getter(name="sponsorEmailDomains")
    def sponsor_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of domain allowed for sponsor email. Required if `sponsor_enabled` is `true` and `sponsors` is empty.
        """
        return pulumi.get(self, "sponsor_email_domains")

    @sponsor_email_domains.setter
    def sponsor_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sponsor_email_domains", value)

    @property
    @pulumi.getter(name="sponsorEnabled")
    def sponsor_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        whether sponsor is enabled
        """
        return pulumi.get(self, "sponsor_enabled")

    @sponsor_enabled.setter
    def sponsor_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_enabled", value)

    @property
    @pulumi.getter(name="sponsorExpire")
    def sponsor_expire(self) -> Optional[pulumi.Input[float]]:
        """
        interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
        """
        return pulumi.get(self, "sponsor_expire")

    @sponsor_expire.setter
    def sponsor_expire(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sponsor_expire", value)

    @property
    @pulumi.getter(name="sponsorLinkValidityDuration")
    def sponsor_link_validity_duration(self) -> Optional[pulumi.Input[str]]:
        """
        how long to remain valid sponsored guest request approve/deny link received in email, in minutes.
        """
        return pulumi.get(self, "sponsor_link_validity_duration")

    @sponsor_link_validity_duration.setter
    def sponsor_link_validity_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_link_validity_duration", value)

    @property
    @pulumi.getter(name="sponsorNotifyAll")
    def sponsor_notify_all(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsor_notify_all` and `predefined_sponsors_enabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
        """
        return pulumi.get(self, "sponsor_notify_all")

    @sponsor_notify_all.setter
    def sponsor_notify_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_notify_all", value)

    @property
    @pulumi.getter(name="sponsorStatusNotify")
    def sponsor_status_notify(self) -> Optional[pulumi.Input[bool]]:
        """
        if enabled, guest will get email about sponsor's action (approve/deny)
        """
        return pulumi.get(self, "sponsor_status_notify")

    @sponsor_status_notify.setter
    def sponsor_status_notify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sponsor_status_notify", value)

    @property
    @pulumi.getter
    def sponsors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        object of allowed sponsors email with name. Required if `sponsor_enabled`
                    is `true` and `sponsor_email_domains` is empty.

                    Property key is the sponsor email, Property value is the sponsor name
        """
        return pulumi.get(self, "sponsors")

    @sponsors.setter
    def sponsors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "sponsors", value)

    @property
    @pulumi.getter(name="ssoDefaultRole")
    def sso_default_role(self) -> Optional[pulumi.Input[str]]:
        """
        default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
        """
        return pulumi.get(self, "sso_default_role")

    @sso_default_role.setter
    def sso_default_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_default_role", value)

    @property
    @pulumi.getter(name="ssoForcedRole")
    def sso_forced_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_forced_role")

    @sso_forced_role.setter
    def sso_forced_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_forced_role", value)

    @property
    @pulumi.getter(name="ssoIdpCert")
    def sso_idp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Cert (used to verify the signed response)
        """
        return pulumi.get(self, "sso_idp_cert")

    @sso_idp_cert.setter
    def sso_idp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_cert", value)

    @property
    @pulumi.getter(name="ssoIdpSignAlgo")
    def sso_idp_sign_algo(self) -> Optional[pulumi.Input[str]]:
        """
        signing algorithm for SAML Assertion
        """
        return pulumi.get(self, "sso_idp_sign_algo")

    @sso_idp_sign_algo.setter
    def sso_idp_sign_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_sign_algo", value)

    @property
    @pulumi.getter(name="ssoIdpSsoUrl")
    def sso_idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP Single-Sign-On URL
        """
        return pulumi.get(self, "sso_idp_sso_url")

    @sso_idp_sso_url.setter
    def sso_idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_idp_sso_url", value)

    @property
    @pulumi.getter(name="ssoIssuer")
    def sso_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        IDP issuer URL
        """
        return pulumi.get(self, "sso_issuer")

    @sso_issuer.setter
    def sso_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_issuer", value)

    @property
    @pulumi.getter(name="ssoNameidFormat")
    def sso_nameid_format(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `email`, `unspecified`
        """
        return pulumi.get(self, "sso_nameid_format")

    @sso_nameid_format.setter
    def sso_nameid_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_nameid_format", value)

    @property
    @pulumi.getter(name="telstraClientId")
    def telstra_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`telstra`, Client ID provided by Telstra
        """
        return pulumi.get(self, "telstra_client_id")

    @telstra_client_id.setter
    def telstra_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telstra_client_id", value)

    @property
    @pulumi.getter(name="telstraClientSecret")
    def telstra_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`telstra`, Client secret provided by Telstra
        """
        return pulumi.get(self, "telstra_client_secret")

    @telstra_client_secret.setter
    def telstra_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telstra_client_secret", value)

    @property
    @pulumi.getter(name="twilioAuthToken")
    def twilio_auth_token(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Auth token account with twilio account
        """
        return pulumi.get(self, "twilio_auth_token")

    @twilio_auth_token.setter
    def twilio_auth_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_auth_token", value)

    @property
    @pulumi.getter(name="twilioPhoneNumber")
    def twilio_phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
        """
        return pulumi.get(self, "twilio_phone_number")

    @twilio_phone_number.setter
    def twilio_phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_phone_number", value)

    @property
    @pulumi.getter(name="twilioSid")
    def twilio_sid(self) -> Optional[pulumi.Input[str]]:
        """
        when `sms_provider`==`twilio`, Account SID provided by Twilio
        """
        return pulumi.get(self, "twilio_sid")

    @twilio_sid.setter
    def twilio_sid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "twilio_sid", value)


if not MYPY:
    class WlanPortalTemplatePortalTemplateArgsDict(TypedDict):
        access_code_alternate_email: NotRequired[pulumi.Input[str]]
        alignment: NotRequired[pulumi.Input[str]]
        """
        defines alignment on portal. enum: `center`, `left`, `right`
        """
        auth_button_amazon: NotRequired[pulumi.Input[str]]
        """
        label for Amazon auth button
        """
        auth_button_azure: NotRequired[pulumi.Input[str]]
        """
        label for Azure auth button
        """
        auth_button_email: NotRequired[pulumi.Input[str]]
        """
        label for Email auth button
        """
        auth_button_facebook: NotRequired[pulumi.Input[str]]
        """
        label for Facebook auth button
        """
        auth_button_google: NotRequired[pulumi.Input[str]]
        """
        label for Google auth button
        """
        auth_button_microsoft: NotRequired[pulumi.Input[str]]
        """
        label for Microsoft auth button
        """
        auth_button_passphrase: NotRequired[pulumi.Input[str]]
        """
        label for passphrase auth button
        """
        auth_button_sms: NotRequired[pulumi.Input[str]]
        """
        label for SMS auth button
        """
        auth_button_sponsor: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor auth button
        """
        auth_label: NotRequired[pulumi.Input[str]]
        back_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go back to /logon
        """
        color: NotRequired[pulumi.Input[str]]
        """
        Portal main color
        """
        color_dark: NotRequired[pulumi.Input[str]]
        color_light: NotRequired[pulumi.Input[str]]
        company: NotRequired[pulumi.Input[bool]]
        """
        whether company field is required
        """
        company_error: NotRequired[pulumi.Input[str]]
        """
        error message when company not provided
        """
        company_label: NotRequired[pulumi.Input[str]]
        """
        label of company field
        """
        email: NotRequired[pulumi.Input[bool]]
        """
        whether email field is required
        """
        email_access_domain_error: NotRequired[pulumi.Input[str]]
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        email_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for cancel confirmation code submission using email auth
        """
        email_code_cancel: NotRequired[pulumi.Input[str]]
        email_code_error: NotRequired[pulumi.Input[str]]
        email_code_field_label: NotRequired[pulumi.Input[str]]
        email_code_message: NotRequired[pulumi.Input[str]]
        email_code_submit: NotRequired[pulumi.Input[str]]
        email_code_title: NotRequired[pulumi.Input[str]]
        email_error: NotRequired[pulumi.Input[str]]
        """
        error message when email not provided
        """
        email_field_label: NotRequired[pulumi.Input[str]]
        email_label: NotRequired[pulumi.Input[str]]
        """
        label of email field
        """
        email_message: NotRequired[pulumi.Input[str]]
        email_submit: NotRequired[pulumi.Input[str]]
        """
        Label for confirmation code submit button using email auth
        """
        email_title: NotRequired[pulumi.Input[str]]
        """
        Title for the Email registration
        """
        field1: NotRequired[pulumi.Input[bool]]
        """
        whether to ask field1
        """
        field1error: NotRequired[pulumi.Input[str]]
        """
        error message when field1 not provided
        """
        field1label: NotRequired[pulumi.Input[str]]
        """
        label of field1
        """
        field1required: NotRequired[pulumi.Input[bool]]
        """
        whether field1 is required field
        """
        field2: NotRequired[pulumi.Input[bool]]
        """
        whether to ask field2
        """
        field2error: NotRequired[pulumi.Input[str]]
        """
        error message when field2 not provided
        """
        field2label: NotRequired[pulumi.Input[str]]
        """
        label of field2
        """
        field2required: NotRequired[pulumi.Input[bool]]
        """
        whether field2 is required field
        """
        field3: NotRequired[pulumi.Input[bool]]
        """
        whether to ask field3
        """
        field3error: NotRequired[pulumi.Input[str]]
        """
        error message when field3 not provided
        """
        field3label: NotRequired[pulumi.Input[str]]
        """
        label of field3
        """
        field3required: NotRequired[pulumi.Input[bool]]
        """
        whether field3 is required field
        """
        field4: NotRequired[pulumi.Input[bool]]
        """
        whether to ask field4
        """
        field4error: NotRequired[pulumi.Input[str]]
        """
        error message when field4 not provided
        """
        field4label: NotRequired[pulumi.Input[str]]
        """
        label of field4
        """
        field4required: NotRequired[pulumi.Input[bool]]
        """
        whether field4 is required field
        """
        locales: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgsDict']]]]
        """
        Can be used to localize the portal based on the User Agent. Allowed property key values are:
          `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
          `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
          `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
          `zh-Hans`, `zh-Hant`
        """
        logo: NotRequired[pulumi.Input[str]]
        """
        path to the background image file. File must be a `png` image`
        """
        message: NotRequired[pulumi.Input[str]]
        multi_auth: NotRequired[pulumi.Input[bool]]
        name: NotRequired[pulumi.Input[bool]]
        """
        whether name field is required
        """
        name_error: NotRequired[pulumi.Input[str]]
        """
        error message when name not provided
        """
        name_label: NotRequired[pulumi.Input[str]]
        """
        label of name field
        """
        opt_out_default: NotRequired[pulumi.Input[bool]]
        """
        Default value for the `Do not store` checkbox
        """
        optout: NotRequired[pulumi.Input[bool]]
        """
        whether to display Do Not Store My Personal Information
        """
        optout_label: NotRequired[pulumi.Input[str]]
        """
        label for Do Not Store My Personal Information
        """
        page_title: NotRequired[pulumi.Input[str]]
        passphrase_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for the Passphrase cancel button
        """
        passphrase_error: NotRequired[pulumi.Input[str]]
        """
        error message when invalid passphrase is provided
        """
        passphrase_label: NotRequired[pulumi.Input[str]]
        """
        Passphrase
        """
        passphrase_message: NotRequired[pulumi.Input[str]]
        passphrase_submit: NotRequired[pulumi.Input[str]]
        """
        Label for the Passphrase submit button
        """
        passphrase_title: NotRequired[pulumi.Input[str]]
        """
        Title for passphrase details page
        """
        powered_by: NotRequired[pulumi.Input[bool]]
        """
        whether to show \\"Powered by Mist\\"
        """
        privacy: NotRequired[pulumi.Input[bool]]
        """
        wheter to require the Privacy Term acceptance
        """
        privacy_policy_accept_label: NotRequired[pulumi.Input[str]]
        """
        prefix of the label of the link to go to Privacy Policy
        """
        privacy_policy_error: NotRequired[pulumi.Input[str]]
        """
        error message when Privacy Policy not accepted
        """
        privacy_policy_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go to Privacy Policy
        """
        privacy_policy_text: NotRequired[pulumi.Input[str]]
        """
        text of the Privacy Policy
        """
        required_field_label: NotRequired[pulumi.Input[str]]
        """
        label to denote required field
        """
        responsive_layout: NotRequired[pulumi.Input[bool]]
        sign_in_label: NotRequired[pulumi.Input[str]]
        """
        label of the button to /signin
        """
        sms_carrier_default: NotRequired[pulumi.Input[str]]
        sms_carrier_error: NotRequired[pulumi.Input[str]]
        sms_carrier_field_label: NotRequired[pulumi.Input[str]]
        """
        label for mobile carrier drop-down list
        """
        sms_code_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for cancel confirmation code submission
        """
        sms_code_error: NotRequired[pulumi.Input[str]]
        """
        error message when confirmation code is invalid
        """
        sms_code_field_label: NotRequired[pulumi.Input[str]]
        sms_code_message: NotRequired[pulumi.Input[str]]
        sms_code_submit: NotRequired[pulumi.Input[str]]
        """
        Label for confirmation code submit button
        """
        sms_code_title: NotRequired[pulumi.Input[str]]
        sms_country_field_label: NotRequired[pulumi.Input[str]]
        sms_country_format: NotRequired[pulumi.Input[str]]
        sms_have_access_code: NotRequired[pulumi.Input[str]]
        """
        Label for checkbox to specify that the user has access code
        """
        sms_is_twilio: NotRequired[pulumi.Input[bool]]
        sms_message_format: NotRequired[pulumi.Input[str]]
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        sms_number_cancel: NotRequired[pulumi.Input[str]]
        """
        label for canceling mobile details for SMS auth
        """
        sms_number_error: NotRequired[pulumi.Input[str]]
        sms_number_field_label: NotRequired[pulumi.Input[str]]
        """
        label for field to provide mobile number
        """
        sms_number_format: NotRequired[pulumi.Input[str]]
        sms_number_message: NotRequired[pulumi.Input[str]]
        sms_number_submit: NotRequired[pulumi.Input[str]]
        """
        label for submit button for code generation
        """
        sms_number_title: NotRequired[pulumi.Input[str]]
        """
        Title for phone number details
        """
        sms_username_format: NotRequired[pulumi.Input[str]]
        sms_validity_duration: NotRequired[pulumi.Input[int]]
        """
        how long confirmation code should be considered valid (in minutes)
        """
        sponsor_back_link: NotRequired[pulumi.Input[str]]
        sponsor_cancel: NotRequired[pulumi.Input[str]]
        sponsor_email: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor Email
        """
        sponsor_email_error: NotRequired[pulumi.Input[str]]
        sponsor_email_template: NotRequired[pulumi.Input[str]]
        """
        html template to replace/override default sponsor email template 
        Sponsor Email Template supports following template variables:
          * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
          * `deny_url`: Renders URL to reject the request
          * `guest_email`: Renders Email ID of the guest
          * `guest_name`: Renders Name of the guest
          * `field1`: Renders value of the Custom Field 1
          * `field2`: Renders value of the Custom Field 2
          * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
          * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
        """
        sponsor_info_approved: NotRequired[pulumi.Input[str]]
        sponsor_info_denied: NotRequired[pulumi.Input[str]]
        sponsor_info_pending: NotRequired[pulumi.Input[str]]
        sponsor_name: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor Name
        """
        sponsor_name_error: NotRequired[pulumi.Input[str]]
        sponsor_note_pending: NotRequired[pulumi.Input[str]]
        sponsor_request_access: NotRequired[pulumi.Input[str]]
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        sponsor_status_approved: NotRequired[pulumi.Input[str]]
        """
        text to display if sponsor approves request
        """
        sponsor_status_denied: NotRequired[pulumi.Input[str]]
        """
        text to display when sponsor denies request
        """
        sponsor_status_pending: NotRequired[pulumi.Input[str]]
        """
        text to display if request is still pending
        """
        sponsor_submit: NotRequired[pulumi.Input[str]]
        """
        submit button label to notify sponsor about guest request
        """
        sponsors_error: NotRequired[pulumi.Input[str]]
        sponsors_field_label: NotRequired[pulumi.Input[str]]
        tos: NotRequired[pulumi.Input[bool]]
        tos_accept_label: NotRequired[pulumi.Input[str]]
        """
        prefix of the label of the link to go to tos
        """
        tos_error: NotRequired[pulumi.Input[str]]
        """
        error message when tos not accepted
        """
        tos_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go to tos
        """
        tos_text: NotRequired[pulumi.Input[str]]
        """
        text of the Terms of Service
        """
elif False:
    WlanPortalTemplatePortalTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanPortalTemplatePortalTemplateArgs:
    def __init__(__self__, *,
                 access_code_alternate_email: Optional[pulumi.Input[str]] = None,
                 alignment: Optional[pulumi.Input[str]] = None,
                 auth_button_amazon: Optional[pulumi.Input[str]] = None,
                 auth_button_azure: Optional[pulumi.Input[str]] = None,
                 auth_button_email: Optional[pulumi.Input[str]] = None,
                 auth_button_facebook: Optional[pulumi.Input[str]] = None,
                 auth_button_google: Optional[pulumi.Input[str]] = None,
                 auth_button_microsoft: Optional[pulumi.Input[str]] = None,
                 auth_button_passphrase: Optional[pulumi.Input[str]] = None,
                 auth_button_sms: Optional[pulumi.Input[str]] = None,
                 auth_button_sponsor: Optional[pulumi.Input[str]] = None,
                 auth_label: Optional[pulumi.Input[str]] = None,
                 back_link: Optional[pulumi.Input[str]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 color_dark: Optional[pulumi.Input[str]] = None,
                 color_light: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[bool]] = None,
                 company_error: Optional[pulumi.Input[str]] = None,
                 company_label: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 email_access_domain_error: Optional[pulumi.Input[str]] = None,
                 email_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_error: Optional[pulumi.Input[str]] = None,
                 email_code_field_label: Optional[pulumi.Input[str]] = None,
                 email_code_message: Optional[pulumi.Input[str]] = None,
                 email_code_submit: Optional[pulumi.Input[str]] = None,
                 email_code_title: Optional[pulumi.Input[str]] = None,
                 email_error: Optional[pulumi.Input[str]] = None,
                 email_field_label: Optional[pulumi.Input[str]] = None,
                 email_label: Optional[pulumi.Input[str]] = None,
                 email_message: Optional[pulumi.Input[str]] = None,
                 email_submit: Optional[pulumi.Input[str]] = None,
                 email_title: Optional[pulumi.Input[str]] = None,
                 field1: Optional[pulumi.Input[bool]] = None,
                 field1error: Optional[pulumi.Input[str]] = None,
                 field1label: Optional[pulumi.Input[str]] = None,
                 field1required: Optional[pulumi.Input[bool]] = None,
                 field2: Optional[pulumi.Input[bool]] = None,
                 field2error: Optional[pulumi.Input[str]] = None,
                 field2label: Optional[pulumi.Input[str]] = None,
                 field2required: Optional[pulumi.Input[bool]] = None,
                 field3: Optional[pulumi.Input[bool]] = None,
                 field3error: Optional[pulumi.Input[str]] = None,
                 field3label: Optional[pulumi.Input[str]] = None,
                 field3required: Optional[pulumi.Input[bool]] = None,
                 field4: Optional[pulumi.Input[bool]] = None,
                 field4error: Optional[pulumi.Input[str]] = None,
                 field4label: Optional[pulumi.Input[str]] = None,
                 field4required: Optional[pulumi.Input[bool]] = None,
                 locales: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 multi_auth: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[bool]] = None,
                 name_error: Optional[pulumi.Input[str]] = None,
                 name_label: Optional[pulumi.Input[str]] = None,
                 opt_out_default: Optional[pulumi.Input[bool]] = None,
                 optout: Optional[pulumi.Input[bool]] = None,
                 optout_label: Optional[pulumi.Input[str]] = None,
                 page_title: Optional[pulumi.Input[str]] = None,
                 passphrase_cancel: Optional[pulumi.Input[str]] = None,
                 passphrase_error: Optional[pulumi.Input[str]] = None,
                 passphrase_label: Optional[pulumi.Input[str]] = None,
                 passphrase_message: Optional[pulumi.Input[str]] = None,
                 passphrase_submit: Optional[pulumi.Input[str]] = None,
                 passphrase_title: Optional[pulumi.Input[str]] = None,
                 powered_by: Optional[pulumi.Input[bool]] = None,
                 privacy: Optional[pulumi.Input[bool]] = None,
                 privacy_policy_accept_label: Optional[pulumi.Input[str]] = None,
                 privacy_policy_error: Optional[pulumi.Input[str]] = None,
                 privacy_policy_link: Optional[pulumi.Input[str]] = None,
                 privacy_policy_text: Optional[pulumi.Input[str]] = None,
                 required_field_label: Optional[pulumi.Input[str]] = None,
                 responsive_layout: Optional[pulumi.Input[bool]] = None,
                 sign_in_label: Optional[pulumi.Input[str]] = None,
                 sms_carrier_default: Optional[pulumi.Input[str]] = None,
                 sms_carrier_error: Optional[pulumi.Input[str]] = None,
                 sms_carrier_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_cancel: Optional[pulumi.Input[str]] = None,
                 sms_code_error: Optional[pulumi.Input[str]] = None,
                 sms_code_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_message: Optional[pulumi.Input[str]] = None,
                 sms_code_submit: Optional[pulumi.Input[str]] = None,
                 sms_code_title: Optional[pulumi.Input[str]] = None,
                 sms_country_field_label: Optional[pulumi.Input[str]] = None,
                 sms_country_format: Optional[pulumi.Input[str]] = None,
                 sms_have_access_code: Optional[pulumi.Input[str]] = None,
                 sms_is_twilio: Optional[pulumi.Input[bool]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_number_cancel: Optional[pulumi.Input[str]] = None,
                 sms_number_error: Optional[pulumi.Input[str]] = None,
                 sms_number_field_label: Optional[pulumi.Input[str]] = None,
                 sms_number_format: Optional[pulumi.Input[str]] = None,
                 sms_number_message: Optional[pulumi.Input[str]] = None,
                 sms_number_submit: Optional[pulumi.Input[str]] = None,
                 sms_number_title: Optional[pulumi.Input[str]] = None,
                 sms_username_format: Optional[pulumi.Input[str]] = None,
                 sms_validity_duration: Optional[pulumi.Input[int]] = None,
                 sponsor_back_link: Optional[pulumi.Input[str]] = None,
                 sponsor_cancel: Optional[pulumi.Input[str]] = None,
                 sponsor_email: Optional[pulumi.Input[str]] = None,
                 sponsor_email_error: Optional[pulumi.Input[str]] = None,
                 sponsor_email_template: Optional[pulumi.Input[str]] = None,
                 sponsor_info_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_info_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_info_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_name: Optional[pulumi.Input[str]] = None,
                 sponsor_name_error: Optional[pulumi.Input[str]] = None,
                 sponsor_note_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_request_access: Optional[pulumi.Input[str]] = None,
                 sponsor_status_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_status_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_status_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_submit: Optional[pulumi.Input[str]] = None,
                 sponsors_error: Optional[pulumi.Input[str]] = None,
                 sponsors_field_label: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[bool]] = None,
                 tos_accept_label: Optional[pulumi.Input[str]] = None,
                 tos_error: Optional[pulumi.Input[str]] = None,
                 tos_link: Optional[pulumi.Input[str]] = None,
                 tos_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alignment: defines alignment on portal. enum: `center`, `left`, `right`
        :param pulumi.Input[str] auth_button_amazon: label for Amazon auth button
        :param pulumi.Input[str] auth_button_azure: label for Azure auth button
        :param pulumi.Input[str] auth_button_email: label for Email auth button
        :param pulumi.Input[str] auth_button_facebook: label for Facebook auth button
        :param pulumi.Input[str] auth_button_google: label for Google auth button
        :param pulumi.Input[str] auth_button_microsoft: label for Microsoft auth button
        :param pulumi.Input[str] auth_button_passphrase: label for passphrase auth button
        :param pulumi.Input[str] auth_button_sms: label for SMS auth button
        :param pulumi.Input[str] auth_button_sponsor: label for Sponsor auth button
        :param pulumi.Input[str] back_link: label of the link to go back to /logon
        :param pulumi.Input[str] color: Portal main color
        :param pulumi.Input[bool] company: whether company field is required
        :param pulumi.Input[str] company_error: error message when company not provided
        :param pulumi.Input[str] company_label: label of company field
        :param pulumi.Input[bool] email: whether email field is required
        :param pulumi.Input[str] email_access_domain_error: error message when a user has valid social login but doesn't match specified email domains.
        :param pulumi.Input[str] email_cancel: Label for cancel confirmation code submission using email auth
        :param pulumi.Input[str] email_error: error message when email not provided
        :param pulumi.Input[str] email_label: label of email field
        :param pulumi.Input[str] email_submit: Label for confirmation code submit button using email auth
        :param pulumi.Input[str] email_title: Title for the Email registration
        :param pulumi.Input[bool] field1: whether to ask field1
        :param pulumi.Input[str] field1error: error message when field1 not provided
        :param pulumi.Input[str] field1label: label of field1
        :param pulumi.Input[bool] field1required: whether field1 is required field
        :param pulumi.Input[bool] field2: whether to ask field2
        :param pulumi.Input[str] field2error: error message when field2 not provided
        :param pulumi.Input[str] field2label: label of field2
        :param pulumi.Input[bool] field2required: whether field2 is required field
        :param pulumi.Input[bool] field3: whether to ask field3
        :param pulumi.Input[str] field3error: error message when field3 not provided
        :param pulumi.Input[str] field3label: label of field3
        :param pulumi.Input[bool] field3required: whether field3 is required field
        :param pulumi.Input[bool] field4: whether to ask field4
        :param pulumi.Input[str] field4error: error message when field4 not provided
        :param pulumi.Input[str] field4label: label of field4
        :param pulumi.Input[bool] field4required: whether field4 is required field
        :param pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]] locales: Can be used to localize the portal based on the User Agent. Allowed property key values are:
                 `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
                 `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
                 `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
                 `zh-Hans`, `zh-Hant`
        :param pulumi.Input[str] logo: path to the background image file. File must be a `png` image`
        :param pulumi.Input[bool] name: whether name field is required
        :param pulumi.Input[str] name_error: error message when name not provided
        :param pulumi.Input[str] name_label: label of name field
        :param pulumi.Input[bool] opt_out_default: Default value for the `Do not store` checkbox
        :param pulumi.Input[bool] optout: whether to display Do Not Store My Personal Information
        :param pulumi.Input[str] optout_label: label for Do Not Store My Personal Information
        :param pulumi.Input[str] passphrase_cancel: Label for the Passphrase cancel button
        :param pulumi.Input[str] passphrase_error: error message when invalid passphrase is provided
        :param pulumi.Input[str] passphrase_label: Passphrase
        :param pulumi.Input[str] passphrase_submit: Label for the Passphrase submit button
        :param pulumi.Input[str] passphrase_title: Title for passphrase details page
        :param pulumi.Input[bool] powered_by: whether to show \\"Powered by Mist\\"
        :param pulumi.Input[bool] privacy: wheter to require the Privacy Term acceptance
        :param pulumi.Input[str] privacy_policy_accept_label: prefix of the label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_error: error message when Privacy Policy not accepted
        :param pulumi.Input[str] privacy_policy_link: label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_text: text of the Privacy Policy
        :param pulumi.Input[str] required_field_label: label to denote required field
        :param pulumi.Input[str] sign_in_label: label of the button to /signin
        :param pulumi.Input[str] sms_carrier_field_label: label for mobile carrier drop-down list
        :param pulumi.Input[str] sms_code_cancel: Label for cancel confirmation code submission
        :param pulumi.Input[str] sms_code_error: error message when confirmation code is invalid
        :param pulumi.Input[str] sms_code_submit: Label for confirmation code submit button
        :param pulumi.Input[str] sms_have_access_code: Label for checkbox to specify that the user has access code
        :param pulumi.Input[str] sms_message_format: format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        :param pulumi.Input[str] sms_number_cancel: label for canceling mobile details for SMS auth
        :param pulumi.Input[str] sms_number_field_label: label for field to provide mobile number
        :param pulumi.Input[str] sms_number_submit: label for submit button for code generation
        :param pulumi.Input[str] sms_number_title: Title for phone number details
        :param pulumi.Input[int] sms_validity_duration: how long confirmation code should be considered valid (in minutes)
        :param pulumi.Input[str] sponsor_email: label for Sponsor Email
        :param pulumi.Input[str] sponsor_email_template: html template to replace/override default sponsor email template 
               Sponsor Email Template supports following template variables:
                 * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
                 * `deny_url`: Renders URL to reject the request
                 * `guest_email`: Renders Email ID of the guest
                 * `guest_name`: Renders Name of the guest
                 * `field1`: Renders value of the Custom Field 1
                 * `field2`: Renders value of the Custom Field 2
                 * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
                 * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
        :param pulumi.Input[str] sponsor_name: label for Sponsor Name
        :param pulumi.Input[str] sponsor_request_access: submit button label request Wifi Access and notify sponsor about guest request
        :param pulumi.Input[str] sponsor_status_approved: text to display if sponsor approves request
        :param pulumi.Input[str] sponsor_status_denied: text to display when sponsor denies request
        :param pulumi.Input[str] sponsor_status_pending: text to display if request is still pending
        :param pulumi.Input[str] sponsor_submit: submit button label to notify sponsor about guest request
        :param pulumi.Input[str] tos_accept_label: prefix of the label of the link to go to tos
        :param pulumi.Input[str] tos_error: error message when tos not accepted
        :param pulumi.Input[str] tos_link: label of the link to go to tos
        :param pulumi.Input[str] tos_text: text of the Terms of Service
        """
        if access_code_alternate_email is not None:
            pulumi.set(__self__, "access_code_alternate_email", access_code_alternate_email)
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if auth_button_amazon is not None:
            pulumi.set(__self__, "auth_button_amazon", auth_button_amazon)
        if auth_button_azure is not None:
            pulumi.set(__self__, "auth_button_azure", auth_button_azure)
        if auth_button_email is not None:
            pulumi.set(__self__, "auth_button_email", auth_button_email)
        if auth_button_facebook is not None:
            pulumi.set(__self__, "auth_button_facebook", auth_button_facebook)
        if auth_button_google is not None:
            pulumi.set(__self__, "auth_button_google", auth_button_google)
        if auth_button_microsoft is not None:
            pulumi.set(__self__, "auth_button_microsoft", auth_button_microsoft)
        if auth_button_passphrase is not None:
            pulumi.set(__self__, "auth_button_passphrase", auth_button_passphrase)
        if auth_button_sms is not None:
            pulumi.set(__self__, "auth_button_sms", auth_button_sms)
        if auth_button_sponsor is not None:
            pulumi.set(__self__, "auth_button_sponsor", auth_button_sponsor)
        if auth_label is not None:
            pulumi.set(__self__, "auth_label", auth_label)
        if back_link is not None:
            pulumi.set(__self__, "back_link", back_link)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if color_dark is not None:
            pulumi.set(__self__, "color_dark", color_dark)
        if color_light is not None:
            pulumi.set(__self__, "color_light", color_light)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if company_error is not None:
            pulumi.set(__self__, "company_error", company_error)
        if company_label is not None:
            pulumi.set(__self__, "company_label", company_label)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if email_access_domain_error is not None:
            pulumi.set(__self__, "email_access_domain_error", email_access_domain_error)
        if email_cancel is not None:
            pulumi.set(__self__, "email_cancel", email_cancel)
        if email_code_cancel is not None:
            pulumi.set(__self__, "email_code_cancel", email_code_cancel)
        if email_code_error is not None:
            pulumi.set(__self__, "email_code_error", email_code_error)
        if email_code_field_label is not None:
            pulumi.set(__self__, "email_code_field_label", email_code_field_label)
        if email_code_message is not None:
            pulumi.set(__self__, "email_code_message", email_code_message)
        if email_code_submit is not None:
            pulumi.set(__self__, "email_code_submit", email_code_submit)
        if email_code_title is not None:
            pulumi.set(__self__, "email_code_title", email_code_title)
        if email_error is not None:
            pulumi.set(__self__, "email_error", email_error)
        if email_field_label is not None:
            pulumi.set(__self__, "email_field_label", email_field_label)
        if email_label is not None:
            pulumi.set(__self__, "email_label", email_label)
        if email_message is not None:
            pulumi.set(__self__, "email_message", email_message)
        if email_submit is not None:
            pulumi.set(__self__, "email_submit", email_submit)
        if email_title is not None:
            pulumi.set(__self__, "email_title", email_title)
        if field1 is not None:
            pulumi.set(__self__, "field1", field1)
        if field1error is not None:
            pulumi.set(__self__, "field1error", field1error)
        if field1label is not None:
            pulumi.set(__self__, "field1label", field1label)
        if field1required is not None:
            pulumi.set(__self__, "field1required", field1required)
        if field2 is not None:
            pulumi.set(__self__, "field2", field2)
        if field2error is not None:
            pulumi.set(__self__, "field2error", field2error)
        if field2label is not None:
            pulumi.set(__self__, "field2label", field2label)
        if field2required is not None:
            pulumi.set(__self__, "field2required", field2required)
        if field3 is not None:
            pulumi.set(__self__, "field3", field3)
        if field3error is not None:
            pulumi.set(__self__, "field3error", field3error)
        if field3label is not None:
            pulumi.set(__self__, "field3label", field3label)
        if field3required is not None:
            pulumi.set(__self__, "field3required", field3required)
        if field4 is not None:
            pulumi.set(__self__, "field4", field4)
        if field4error is not None:
            pulumi.set(__self__, "field4error", field4error)
        if field4label is not None:
            pulumi.set(__self__, "field4label", field4label)
        if field4required is not None:
            pulumi.set(__self__, "field4required", field4required)
        if locales is not None:
            pulumi.set(__self__, "locales", locales)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if multi_auth is not None:
            pulumi.set(__self__, "multi_auth", multi_auth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_error is not None:
            pulumi.set(__self__, "name_error", name_error)
        if name_label is not None:
            pulumi.set(__self__, "name_label", name_label)
        if opt_out_default is not None:
            pulumi.set(__self__, "opt_out_default", opt_out_default)
        if optout is not None:
            pulumi.set(__self__, "optout", optout)
        if optout_label is not None:
            pulumi.set(__self__, "optout_label", optout_label)
        if page_title is not None:
            pulumi.set(__self__, "page_title", page_title)
        if passphrase_cancel is not None:
            pulumi.set(__self__, "passphrase_cancel", passphrase_cancel)
        if passphrase_error is not None:
            pulumi.set(__self__, "passphrase_error", passphrase_error)
        if passphrase_label is not None:
            pulumi.set(__self__, "passphrase_label", passphrase_label)
        if passphrase_message is not None:
            pulumi.set(__self__, "passphrase_message", passphrase_message)
        if passphrase_submit is not None:
            pulumi.set(__self__, "passphrase_submit", passphrase_submit)
        if passphrase_title is not None:
            pulumi.set(__self__, "passphrase_title", passphrase_title)
        if powered_by is not None:
            pulumi.set(__self__, "powered_by", powered_by)
        if privacy is not None:
            pulumi.set(__self__, "privacy", privacy)
        if privacy_policy_accept_label is not None:
            pulumi.set(__self__, "privacy_policy_accept_label", privacy_policy_accept_label)
        if privacy_policy_error is not None:
            pulumi.set(__self__, "privacy_policy_error", privacy_policy_error)
        if privacy_policy_link is not None:
            pulumi.set(__self__, "privacy_policy_link", privacy_policy_link)
        if privacy_policy_text is not None:
            pulumi.set(__self__, "privacy_policy_text", privacy_policy_text)
        if required_field_label is not None:
            pulumi.set(__self__, "required_field_label", required_field_label)
        if responsive_layout is not None:
            pulumi.set(__self__, "responsive_layout", responsive_layout)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if sms_carrier_default is not None:
            pulumi.set(__self__, "sms_carrier_default", sms_carrier_default)
        if sms_carrier_error is not None:
            pulumi.set(__self__, "sms_carrier_error", sms_carrier_error)
        if sms_carrier_field_label is not None:
            pulumi.set(__self__, "sms_carrier_field_label", sms_carrier_field_label)
        if sms_code_cancel is not None:
            pulumi.set(__self__, "sms_code_cancel", sms_code_cancel)
        if sms_code_error is not None:
            pulumi.set(__self__, "sms_code_error", sms_code_error)
        if sms_code_field_label is not None:
            pulumi.set(__self__, "sms_code_field_label", sms_code_field_label)
        if sms_code_message is not None:
            pulumi.set(__self__, "sms_code_message", sms_code_message)
        if sms_code_submit is not None:
            pulumi.set(__self__, "sms_code_submit", sms_code_submit)
        if sms_code_title is not None:
            pulumi.set(__self__, "sms_code_title", sms_code_title)
        if sms_country_field_label is not None:
            pulumi.set(__self__, "sms_country_field_label", sms_country_field_label)
        if sms_country_format is not None:
            pulumi.set(__self__, "sms_country_format", sms_country_format)
        if sms_have_access_code is not None:
            pulumi.set(__self__, "sms_have_access_code", sms_have_access_code)
        if sms_is_twilio is not None:
            pulumi.set(__self__, "sms_is_twilio", sms_is_twilio)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_number_cancel is not None:
            pulumi.set(__self__, "sms_number_cancel", sms_number_cancel)
        if sms_number_error is not None:
            pulumi.set(__self__, "sms_number_error", sms_number_error)
        if sms_number_field_label is not None:
            pulumi.set(__self__, "sms_number_field_label", sms_number_field_label)
        if sms_number_format is not None:
            pulumi.set(__self__, "sms_number_format", sms_number_format)
        if sms_number_message is not None:
            pulumi.set(__self__, "sms_number_message", sms_number_message)
        if sms_number_submit is not None:
            pulumi.set(__self__, "sms_number_submit", sms_number_submit)
        if sms_number_title is not None:
            pulumi.set(__self__, "sms_number_title", sms_number_title)
        if sms_username_format is not None:
            pulumi.set(__self__, "sms_username_format", sms_username_format)
        if sms_validity_duration is not None:
            pulumi.set(__self__, "sms_validity_duration", sms_validity_duration)
        if sponsor_back_link is not None:
            pulumi.set(__self__, "sponsor_back_link", sponsor_back_link)
        if sponsor_cancel is not None:
            pulumi.set(__self__, "sponsor_cancel", sponsor_cancel)
        if sponsor_email is not None:
            pulumi.set(__self__, "sponsor_email", sponsor_email)
        if sponsor_email_error is not None:
            pulumi.set(__self__, "sponsor_email_error", sponsor_email_error)
        if sponsor_email_template is not None:
            pulumi.set(__self__, "sponsor_email_template", sponsor_email_template)
        if sponsor_info_approved is not None:
            pulumi.set(__self__, "sponsor_info_approved", sponsor_info_approved)
        if sponsor_info_denied is not None:
            pulumi.set(__self__, "sponsor_info_denied", sponsor_info_denied)
        if sponsor_info_pending is not None:
            pulumi.set(__self__, "sponsor_info_pending", sponsor_info_pending)
        if sponsor_name is not None:
            pulumi.set(__self__, "sponsor_name", sponsor_name)
        if sponsor_name_error is not None:
            pulumi.set(__self__, "sponsor_name_error", sponsor_name_error)
        if sponsor_note_pending is not None:
            pulumi.set(__self__, "sponsor_note_pending", sponsor_note_pending)
        if sponsor_request_access is not None:
            pulumi.set(__self__, "sponsor_request_access", sponsor_request_access)
        if sponsor_status_approved is not None:
            pulumi.set(__self__, "sponsor_status_approved", sponsor_status_approved)
        if sponsor_status_denied is not None:
            pulumi.set(__self__, "sponsor_status_denied", sponsor_status_denied)
        if sponsor_status_pending is not None:
            pulumi.set(__self__, "sponsor_status_pending", sponsor_status_pending)
        if sponsor_submit is not None:
            pulumi.set(__self__, "sponsor_submit", sponsor_submit)
        if sponsors_error is not None:
            pulumi.set(__self__, "sponsors_error", sponsors_error)
        if sponsors_field_label is not None:
            pulumi.set(__self__, "sponsors_field_label", sponsors_field_label)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_accept_label is not None:
            pulumi.set(__self__, "tos_accept_label", tos_accept_label)
        if tos_error is not None:
            pulumi.set(__self__, "tos_error", tos_error)
        if tos_link is not None:
            pulumi.set(__self__, "tos_link", tos_link)
        if tos_text is not None:
            pulumi.set(__self__, "tos_text", tos_text)

    @property
    @pulumi.getter(name="accessCodeAlternateEmail")
    def access_code_alternate_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_code_alternate_email")

    @access_code_alternate_email.setter
    def access_code_alternate_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_code_alternate_email", value)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input[str]]:
        """
        defines alignment on portal. enum: `center`, `left`, `right`
        """
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter(name="authButtonAmazon")
    def auth_button_amazon(self) -> Optional[pulumi.Input[str]]:
        """
        label for Amazon auth button
        """
        return pulumi.get(self, "auth_button_amazon")

    @auth_button_amazon.setter
    def auth_button_amazon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_amazon", value)

    @property
    @pulumi.getter(name="authButtonAzure")
    def auth_button_azure(self) -> Optional[pulumi.Input[str]]:
        """
        label for Azure auth button
        """
        return pulumi.get(self, "auth_button_azure")

    @auth_button_azure.setter
    def auth_button_azure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_azure", value)

    @property
    @pulumi.getter(name="authButtonEmail")
    def auth_button_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Email auth button
        """
        return pulumi.get(self, "auth_button_email")

    @auth_button_email.setter
    def auth_button_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_email", value)

    @property
    @pulumi.getter(name="authButtonFacebook")
    def auth_button_facebook(self) -> Optional[pulumi.Input[str]]:
        """
        label for Facebook auth button
        """
        return pulumi.get(self, "auth_button_facebook")

    @auth_button_facebook.setter
    def auth_button_facebook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_facebook", value)

    @property
    @pulumi.getter(name="authButtonGoogle")
    def auth_button_google(self) -> Optional[pulumi.Input[str]]:
        """
        label for Google auth button
        """
        return pulumi.get(self, "auth_button_google")

    @auth_button_google.setter
    def auth_button_google(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_google", value)

    @property
    @pulumi.getter(name="authButtonMicrosoft")
    def auth_button_microsoft(self) -> Optional[pulumi.Input[str]]:
        """
        label for Microsoft auth button
        """
        return pulumi.get(self, "auth_button_microsoft")

    @auth_button_microsoft.setter
    def auth_button_microsoft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_microsoft", value)

    @property
    @pulumi.getter(name="authButtonPassphrase")
    def auth_button_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        label for passphrase auth button
        """
        return pulumi.get(self, "auth_button_passphrase")

    @auth_button_passphrase.setter
    def auth_button_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_passphrase", value)

    @property
    @pulumi.getter(name="authButtonSms")
    def auth_button_sms(self) -> Optional[pulumi.Input[str]]:
        """
        label for SMS auth button
        """
        return pulumi.get(self, "auth_button_sms")

    @auth_button_sms.setter
    def auth_button_sms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sms", value)

    @property
    @pulumi.getter(name="authButtonSponsor")
    def auth_button_sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor auth button
        """
        return pulumi.get(self, "auth_button_sponsor")

    @auth_button_sponsor.setter
    def auth_button_sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sponsor", value)

    @property
    @pulumi.getter(name="authLabel")
    def auth_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_label")

    @auth_label.setter
    def auth_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_label", value)

    @property
    @pulumi.getter(name="backLink")
    def back_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go back to /logon
        """
        return pulumi.get(self, "back_link")

    @back_link.setter
    def back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "back_link", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        Portal main color
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="colorDark")
    def color_dark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_dark")

    @color_dark.setter
    def color_dark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_dark", value)

    @property
    @pulumi.getter(name="colorLight")
    def color_light(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_light")

    @color_light.setter
    def color_light(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_light", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[bool]]:
        """
        whether company field is required
        """
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter(name="companyError")
    def company_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when company not provided
        """
        return pulumi.get(self, "company_error")

    @company_error.setter
    def company_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_error", value)

    @property
    @pulumi.getter(name="companyLabel")
    def company_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of company field
        """
        return pulumi.get(self, "company_label")

    @company_label.setter
    def company_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_label", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        """
        whether email field is required
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="emailAccessDomainError")
    def email_access_domain_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        return pulumi.get(self, "email_access_domain_error")

    @email_access_domain_error.setter
    def email_access_domain_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_access_domain_error", value)

    @property
    @pulumi.getter(name="emailCancel")
    def email_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission using email auth
        """
        return pulumi.get(self, "email_cancel")

    @email_cancel.setter
    def email_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_cancel", value)

    @property
    @pulumi.getter(name="emailCodeCancel")
    def email_code_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_cancel")

    @email_code_cancel.setter
    def email_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_cancel", value)

    @property
    @pulumi.getter(name="emailCodeError")
    def email_code_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_error")

    @email_code_error.setter
    def email_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_error", value)

    @property
    @pulumi.getter(name="emailCodeFieldLabel")
    def email_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_field_label")

    @email_code_field_label.setter
    def email_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_field_label", value)

    @property
    @pulumi.getter(name="emailCodeMessage")
    def email_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_message")

    @email_code_message.setter
    def email_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_message", value)

    @property
    @pulumi.getter(name="emailCodeSubmit")
    def email_code_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_submit")

    @email_code_submit.setter
    def email_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_submit", value)

    @property
    @pulumi.getter(name="emailCodeTitle")
    def email_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_title")

    @email_code_title.setter
    def email_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_title", value)

    @property
    @pulumi.getter(name="emailError")
    def email_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when email not provided
        """
        return pulumi.get(self, "email_error")

    @email_error.setter
    def email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_error", value)

    @property
    @pulumi.getter(name="emailFieldLabel")
    def email_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_field_label")

    @email_field_label.setter
    def email_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_field_label", value)

    @property
    @pulumi.getter(name="emailLabel")
    def email_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of email field
        """
        return pulumi.get(self, "email_label")

    @email_label.setter
    def email_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_label", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="emailSubmit")
    def email_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button using email auth
        """
        return pulumi.get(self, "email_submit")

    @email_submit.setter
    def email_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_submit", value)

    @property
    @pulumi.getter(name="emailTitle")
    def email_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the Email registration
        """
        return pulumi.get(self, "email_title")

    @email_title.setter
    def email_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_title", value)

    @property
    @pulumi.getter
    def field1(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field1
        """
        return pulumi.get(self, "field1")

    @field1.setter
    def field1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field1", value)

    @property
    @pulumi.getter
    def field1error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field1 not provided
        """
        return pulumi.get(self, "field1error")

    @field1error.setter
    def field1error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1error", value)

    @property
    @pulumi.getter
    def field1label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field1
        """
        return pulumi.get(self, "field1label")

    @field1label.setter
    def field1label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1label", value)

    @property
    @pulumi.getter
    def field1required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field1 is required field
        """
        return pulumi.get(self, "field1required")

    @field1required.setter
    def field1required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field1required", value)

    @property
    @pulumi.getter
    def field2(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field2
        """
        return pulumi.get(self, "field2")

    @field2.setter
    def field2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field2", value)

    @property
    @pulumi.getter
    def field2error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field2 not provided
        """
        return pulumi.get(self, "field2error")

    @field2error.setter
    def field2error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2error", value)

    @property
    @pulumi.getter
    def field2label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field2
        """
        return pulumi.get(self, "field2label")

    @field2label.setter
    def field2label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2label", value)

    @property
    @pulumi.getter
    def field2required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field2 is required field
        """
        return pulumi.get(self, "field2required")

    @field2required.setter
    def field2required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field2required", value)

    @property
    @pulumi.getter
    def field3(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field3
        """
        return pulumi.get(self, "field3")

    @field3.setter
    def field3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field3", value)

    @property
    @pulumi.getter
    def field3error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field3 not provided
        """
        return pulumi.get(self, "field3error")

    @field3error.setter
    def field3error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3error", value)

    @property
    @pulumi.getter
    def field3label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field3
        """
        return pulumi.get(self, "field3label")

    @field3label.setter
    def field3label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3label", value)

    @property
    @pulumi.getter
    def field3required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field3 is required field
        """
        return pulumi.get(self, "field3required")

    @field3required.setter
    def field3required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field3required", value)

    @property
    @pulumi.getter
    def field4(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to ask field4
        """
        return pulumi.get(self, "field4")

    @field4.setter
    def field4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field4", value)

    @property
    @pulumi.getter
    def field4error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field4 not provided
        """
        return pulumi.get(self, "field4error")

    @field4error.setter
    def field4error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4error", value)

    @property
    @pulumi.getter
    def field4label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field4
        """
        return pulumi.get(self, "field4label")

    @field4label.setter
    def field4label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4label", value)

    @property
    @pulumi.getter
    def field4required(self) -> Optional[pulumi.Input[bool]]:
        """
        whether field4 is required field
        """
        return pulumi.get(self, "field4required")

    @field4required.setter
    def field4required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "field4required", value)

    @property
    @pulumi.getter
    def locales(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]]:
        """
        Can be used to localize the portal based on the User Agent. Allowed property key values are:
          `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`, 
          `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`, 
          `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`, 
          `zh-Hans`, `zh-Hant`
        """
        return pulumi.get(self, "locales")

    @locales.setter
    def locales(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['WlanPortalTemplatePortalTemplateLocalesArgs']]]]):
        pulumi.set(self, "locales", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        path to the background image file. File must be a `png` image`
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="multiAuth")
    def multi_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_auth")

    @multi_auth.setter
    def multi_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_auth", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[bool]]:
        """
        whether name field is required
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameError")
    def name_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when name not provided
        """
        return pulumi.get(self, "name_error")

    @name_error.setter
    def name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_error", value)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of name field
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_label", value)

    @property
    @pulumi.getter(name="optOutDefault")
    def opt_out_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default value for the `Do not store` checkbox
        """
        return pulumi.get(self, "opt_out_default")

    @opt_out_default.setter
    def opt_out_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "opt_out_default", value)

    @property
    @pulumi.getter
    def optout(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to display Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout")

    @optout.setter
    def optout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optout", value)

    @property
    @pulumi.getter(name="optoutLabel")
    def optout_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout_label")

    @optout_label.setter
    def optout_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optout_label", value)

    @property
    @pulumi.getter(name="pageTitle")
    def page_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_title")

    @page_title.setter
    def page_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_title", value)

    @property
    @pulumi.getter(name="passphraseCancel")
    def passphrase_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase cancel button
        """
        return pulumi.get(self, "passphrase_cancel")

    @passphrase_cancel.setter
    def passphrase_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_cancel", value)

    @property
    @pulumi.getter(name="passphraseError")
    def passphrase_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when invalid passphrase is provided
        """
        return pulumi.get(self, "passphrase_error")

    @passphrase_error.setter
    def passphrase_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_error", value)

    @property
    @pulumi.getter(name="passphraseLabel")
    def passphrase_label(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase
        """
        return pulumi.get(self, "passphrase_label")

    @passphrase_label.setter
    def passphrase_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_label", value)

    @property
    @pulumi.getter(name="passphraseMessage")
    def passphrase_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_message")

    @passphrase_message.setter
    def passphrase_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_message", value)

    @property
    @pulumi.getter(name="passphraseSubmit")
    def passphrase_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase submit button
        """
        return pulumi.get(self, "passphrase_submit")

    @passphrase_submit.setter
    def passphrase_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_submit", value)

    @property
    @pulumi.getter(name="passphraseTitle")
    def passphrase_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for passphrase details page
        """
        return pulumi.get(self, "passphrase_title")

    @passphrase_title.setter
    def passphrase_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_title", value)

    @property
    @pulumi.getter(name="poweredBy")
    def powered_by(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show \\"Powered by Mist\\"
        """
        return pulumi.get(self, "powered_by")

    @powered_by.setter
    def powered_by(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "powered_by", value)

    @property
    @pulumi.getter
    def privacy(self) -> Optional[pulumi.Input[bool]]:
        """
        wheter to require the Privacy Term acceptance
        """
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="privacyPolicyAcceptLabel")
    def privacy_policy_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_accept_label")

    @privacy_policy_accept_label.setter
    def privacy_policy_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_accept_label", value)

    @property
    @pulumi.getter(name="privacyPolicyError")
    def privacy_policy_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when Privacy Policy not accepted
        """
        return pulumi.get(self, "privacy_policy_error")

    @privacy_policy_error.setter
    def privacy_policy_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_error", value)

    @property
    @pulumi.getter(name="privacyPolicyLink")
    def privacy_policy_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_link")

    @privacy_policy_link.setter
    def privacy_policy_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_link", value)

    @property
    @pulumi.getter(name="privacyPolicyText")
    def privacy_policy_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_text")

    @privacy_policy_text.setter
    def privacy_policy_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_text", value)

    @property
    @pulumi.getter(name="requiredFieldLabel")
    def required_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label to denote required field
        """
        return pulumi.get(self, "required_field_label")

    @required_field_label.setter
    def required_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_field_label", value)

    @property
    @pulumi.getter(name="responsiveLayout")
    def responsive_layout(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "responsive_layout")

    @responsive_layout.setter
    def responsive_layout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "responsive_layout", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of the button to /signin
        """
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="smsCarrierDefault")
    def sms_carrier_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_default")

    @sms_carrier_default.setter
    def sms_carrier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_default", value)

    @property
    @pulumi.getter(name="smsCarrierError")
    def sms_carrier_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_error")

    @sms_carrier_error.setter
    def sms_carrier_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_error", value)

    @property
    @pulumi.getter(name="smsCarrierFieldLabel")
    def sms_carrier_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for mobile carrier drop-down list
        """
        return pulumi.get(self, "sms_carrier_field_label")

    @sms_carrier_field_label.setter
    def sms_carrier_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_field_label", value)

    @property
    @pulumi.getter(name="smsCodeCancel")
    def sms_code_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission
        """
        return pulumi.get(self, "sms_code_cancel")

    @sms_code_cancel.setter
    def sms_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_cancel", value)

    @property
    @pulumi.getter(name="smsCodeError")
    def sms_code_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when confirmation code is invalid
        """
        return pulumi.get(self, "sms_code_error")

    @sms_code_error.setter
    def sms_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_error", value)

    @property
    @pulumi.getter(name="smsCodeFieldLabel")
    def sms_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_field_label")

    @sms_code_field_label.setter
    def sms_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_field_label", value)

    @property
    @pulumi.getter(name="smsCodeMessage")
    def sms_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_message")

    @sms_code_message.setter
    def sms_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_message", value)

    @property
    @pulumi.getter(name="smsCodeSubmit")
    def sms_code_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button
        """
        return pulumi.get(self, "sms_code_submit")

    @sms_code_submit.setter
    def sms_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_submit", value)

    @property
    @pulumi.getter(name="smsCodeTitle")
    def sms_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_title")

    @sms_code_title.setter
    def sms_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_title", value)

    @property
    @pulumi.getter(name="smsCountryFieldLabel")
    def sms_country_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_field_label")

    @sms_country_field_label.setter
    def sms_country_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_field_label", value)

    @property
    @pulumi.getter(name="smsCountryFormat")
    def sms_country_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_format")

    @sms_country_format.setter
    def sms_country_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_format", value)

    @property
    @pulumi.getter(name="smsHaveAccessCode")
    def sms_have_access_code(self) -> Optional[pulumi.Input[str]]:
        """
        Label for checkbox to specify that the user has access code
        """
        return pulumi.get(self, "sms_have_access_code")

    @sms_have_access_code.setter
    def sms_have_access_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_have_access_code", value)

    @property
    @pulumi.getter(name="smsIsTwilio")
    def sms_is_twilio(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms_is_twilio")

    @sms_is_twilio.setter
    def sms_is_twilio(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms_is_twilio", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsNumberCancel")
    def sms_number_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        label for canceling mobile details for SMS auth
        """
        return pulumi.get(self, "sms_number_cancel")

    @sms_number_cancel.setter
    def sms_number_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_cancel", value)

    @property
    @pulumi.getter(name="smsNumberError")
    def sms_number_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_error")

    @sms_number_error.setter
    def sms_number_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_error", value)

    @property
    @pulumi.getter(name="smsNumberFieldLabel")
    def sms_number_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for field to provide mobile number
        """
        return pulumi.get(self, "sms_number_field_label")

    @sms_number_field_label.setter
    def sms_number_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_field_label", value)

    @property
    @pulumi.getter(name="smsNumberFormat")
    def sms_number_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_format")

    @sms_number_format.setter
    def sms_number_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_format", value)

    @property
    @pulumi.getter(name="smsNumberMessage")
    def sms_number_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_message")

    @sms_number_message.setter
    def sms_number_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_message", value)

    @property
    @pulumi.getter(name="smsNumberSubmit")
    def sms_number_submit(self) -> Optional[pulumi.Input[str]]:
        """
        label for submit button for code generation
        """
        return pulumi.get(self, "sms_number_submit")

    @sms_number_submit.setter
    def sms_number_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_submit", value)

    @property
    @pulumi.getter(name="smsNumberTitle")
    def sms_number_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for phone number details
        """
        return pulumi.get(self, "sms_number_title")

    @sms_number_title.setter
    def sms_number_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_title", value)

    @property
    @pulumi.getter(name="smsUsernameFormat")
    def sms_username_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_username_format")

    @sms_username_format.setter
    def sms_username_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_username_format", value)

    @property
    @pulumi.getter(name="smsValidityDuration")
    def sms_validity_duration(self) -> Optional[pulumi.Input[int]]:
        """
        how long confirmation code should be considered valid (in minutes)
        """
        return pulumi.get(self, "sms_validity_duration")

    @sms_validity_duration.setter
    def sms_validity_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sms_validity_duration", value)

    @property
    @pulumi.getter(name="sponsorBackLink")
    def sponsor_back_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_back_link")

    @sponsor_back_link.setter
    def sponsor_back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_back_link", value)

    @property
    @pulumi.getter(name="sponsorCancel")
    def sponsor_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_cancel")

    @sponsor_cancel.setter
    def sponsor_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_cancel", value)

    @property
    @pulumi.getter(name="sponsorEmail")
    def sponsor_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Email
        """
        return pulumi.get(self, "sponsor_email")

    @sponsor_email.setter
    def sponsor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email", value)

    @property
    @pulumi.getter(name="sponsorEmailError")
    def sponsor_email_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_email_error")

    @sponsor_email_error.setter
    def sponsor_email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_error", value)

    @property
    @pulumi.getter(name="sponsorEmailTemplate")
    def sponsor_email_template(self) -> Optional[pulumi.Input[str]]:
        """
        html template to replace/override default sponsor email template 
        Sponsor Email Template supports following template variables:
          * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
          * `deny_url`: Renders URL to reject the request
          * `guest_email`: Renders Email ID of the guest
          * `guest_name`: Renders Name of the guest
          * `field1`: Renders value of the Custom Field 1
          * `field2`: Renders value of the Custom Field 2
          * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)
          * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
        """
        return pulumi.get(self, "sponsor_email_template")

    @sponsor_email_template.setter
    def sponsor_email_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_template", value)

    @property
    @pulumi.getter(name="sponsorInfoApproved")
    def sponsor_info_approved(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_approved")

    @sponsor_info_approved.setter
    def sponsor_info_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_approved", value)

    @property
    @pulumi.getter(name="sponsorInfoDenied")
    def sponsor_info_denied(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_denied")

    @sponsor_info_denied.setter
    def sponsor_info_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_denied", value)

    @property
    @pulumi.getter(name="sponsorInfoPending")
    def sponsor_info_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_pending")

    @sponsor_info_pending.setter
    def sponsor_info_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_pending", value)

    @property
    @pulumi.getter(name="sponsorName")
    def sponsor_name(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Name
        """
        return pulumi.get(self, "sponsor_name")

    @sponsor_name.setter
    def sponsor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name", value)

    @property
    @pulumi.getter(name="sponsorNameError")
    def sponsor_name_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_name_error")

    @sponsor_name_error.setter
    def sponsor_name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name_error", value)

    @property
    @pulumi.getter(name="sponsorNotePending")
    def sponsor_note_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_note_pending")

    @sponsor_note_pending.setter
    def sponsor_note_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_note_pending", value)

    @property
    @pulumi.getter(name="sponsorRequestAccess")
    def sponsor_request_access(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_request_access")

    @sponsor_request_access.setter
    def sponsor_request_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_request_access", value)

    @property
    @pulumi.getter(name="sponsorStatusApproved")
    def sponsor_status_approved(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if sponsor approves request
        """
        return pulumi.get(self, "sponsor_status_approved")

    @sponsor_status_approved.setter
    def sponsor_status_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_approved", value)

    @property
    @pulumi.getter(name="sponsorStatusDenied")
    def sponsor_status_denied(self) -> Optional[pulumi.Input[str]]:
        """
        text to display when sponsor denies request
        """
        return pulumi.get(self, "sponsor_status_denied")

    @sponsor_status_denied.setter
    def sponsor_status_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_denied", value)

    @property
    @pulumi.getter(name="sponsorStatusPending")
    def sponsor_status_pending(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if request is still pending
        """
        return pulumi.get(self, "sponsor_status_pending")

    @sponsor_status_pending.setter
    def sponsor_status_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_pending", value)

    @property
    @pulumi.getter(name="sponsorSubmit")
    def sponsor_submit(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label to notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_submit")

    @sponsor_submit.setter
    def sponsor_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_submit", value)

    @property
    @pulumi.getter(name="sponsorsError")
    def sponsors_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_error")

    @sponsors_error.setter
    def sponsors_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_error", value)

    @property
    @pulumi.getter(name="sponsorsFieldLabel")
    def sponsors_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_field_label")

    @sponsors_field_label.setter
    def sponsors_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_field_label", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosAcceptLabel")
    def tos_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to tos
        """
        return pulumi.get(self, "tos_accept_label")

    @tos_accept_label.setter
    def tos_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_accept_label", value)

    @property
    @pulumi.getter(name="tosError")
    def tos_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when tos not accepted
        """
        return pulumi.get(self, "tos_error")

    @tos_error.setter
    def tos_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_error", value)

    @property
    @pulumi.getter(name="tosLink")
    def tos_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to tos
        """
        return pulumi.get(self, "tos_link")

    @tos_link.setter
    def tos_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_link", value)

    @property
    @pulumi.getter(name="tosText")
    def tos_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Terms of Service
        """
        return pulumi.get(self, "tos_text")

    @tos_text.setter
    def tos_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_text", value)


if not MYPY:
    class WlanPortalTemplatePortalTemplateLocalesArgsDict(TypedDict):
        auth_button_amazon: NotRequired[pulumi.Input[str]]
        """
        label for Amazon auth button
        """
        auth_button_azure: NotRequired[pulumi.Input[str]]
        """
        label for Azure auth button
        """
        auth_button_email: NotRequired[pulumi.Input[str]]
        """
        label for Email auth button
        """
        auth_button_facebook: NotRequired[pulumi.Input[str]]
        """
        label for Facebook auth button
        """
        auth_button_google: NotRequired[pulumi.Input[str]]
        """
        label for Google auth button
        """
        auth_button_microsoft: NotRequired[pulumi.Input[str]]
        """
        label for Microsoft auth button
        """
        auth_button_passphrase: NotRequired[pulumi.Input[str]]
        """
        label for passphrase auth button
        """
        auth_button_sms: NotRequired[pulumi.Input[str]]
        """
        label for SMS auth button
        """
        auth_button_sponsor: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor auth button
        """
        auth_label: NotRequired[pulumi.Input[str]]
        back_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go back to /logon
        """
        company_error: NotRequired[pulumi.Input[str]]
        """
        error message when company not provided
        """
        company_label: NotRequired[pulumi.Input[str]]
        """
        label of company field
        """
        email_access_domain_error: NotRequired[pulumi.Input[str]]
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        email_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for cancel confirmation code submission using email auth
        """
        email_code_cancel: NotRequired[pulumi.Input[str]]
        email_code_error: NotRequired[pulumi.Input[str]]
        email_code_field_label: NotRequired[pulumi.Input[str]]
        email_code_message: NotRequired[pulumi.Input[str]]
        email_code_submit: NotRequired[pulumi.Input[str]]
        email_code_title: NotRequired[pulumi.Input[str]]
        email_error: NotRequired[pulumi.Input[str]]
        """
        error message when email not provided
        """
        email_field_label: NotRequired[pulumi.Input[str]]
        email_label: NotRequired[pulumi.Input[str]]
        """
        label of email field
        """
        email_message: NotRequired[pulumi.Input[str]]
        email_submit: NotRequired[pulumi.Input[str]]
        """
        Label for confirmation code submit button using email auth
        """
        email_title: NotRequired[pulumi.Input[str]]
        """
        Title for the Email registration
        """
        field1error: NotRequired[pulumi.Input[str]]
        """
        error message when field1 not provided
        """
        field1label: NotRequired[pulumi.Input[str]]
        """
        label of field1
        """
        field2error: NotRequired[pulumi.Input[str]]
        """
        error message when field2 not provided
        """
        field2label: NotRequired[pulumi.Input[str]]
        """
        label of field2
        """
        field3error: NotRequired[pulumi.Input[str]]
        """
        error message when field3 not provided
        """
        field3label: NotRequired[pulumi.Input[str]]
        """
        label of field3
        """
        field4error: NotRequired[pulumi.Input[str]]
        """
        error message when field4 not provided
        """
        field4label: NotRequired[pulumi.Input[str]]
        """
        label of field4
        """
        message: NotRequired[pulumi.Input[str]]
        name_error: NotRequired[pulumi.Input[str]]
        """
        error message when name not provided
        """
        name_label: NotRequired[pulumi.Input[str]]
        """
        label of name field
        """
        optout_label: NotRequired[pulumi.Input[str]]
        """
        label for Do Not Store My Personal Information
        """
        page_title: NotRequired[pulumi.Input[str]]
        passphrase_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for the Passphrase cancel button
        """
        passphrase_error: NotRequired[pulumi.Input[str]]
        """
        error message when invalid passphrase is provided
        """
        passphrase_label: NotRequired[pulumi.Input[str]]
        """
        Passphrase
        """
        passphrase_message: NotRequired[pulumi.Input[str]]
        passphrase_submit: NotRequired[pulumi.Input[str]]
        """
        Label for the Passphrase submit button
        """
        passphrase_title: NotRequired[pulumi.Input[str]]
        """
        Title for passphrase details page
        """
        privacy_policy_accept_label: NotRequired[pulumi.Input[str]]
        """
        prefix of the label of the link to go to Privacy Policy
        """
        privacy_policy_error: NotRequired[pulumi.Input[str]]
        """
        error message when Privacy Policy not accepted
        """
        privacy_policy_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go to Privacy Policy
        """
        privacy_policy_text: NotRequired[pulumi.Input[str]]
        """
        text of the Privacy Policy
        """
        required_field_label: NotRequired[pulumi.Input[str]]
        """
        label to denote required field
        """
        sign_in_label: NotRequired[pulumi.Input[str]]
        """
        label of the button to /signin
        """
        sms_carrier_default: NotRequired[pulumi.Input[str]]
        sms_carrier_error: NotRequired[pulumi.Input[str]]
        sms_carrier_field_label: NotRequired[pulumi.Input[str]]
        """
        label for mobile carrier drop-down list
        """
        sms_code_cancel: NotRequired[pulumi.Input[str]]
        """
        Label for cancel confirmation code submission
        """
        sms_code_error: NotRequired[pulumi.Input[str]]
        """
        error message when confirmation code is invalid
        """
        sms_code_field_label: NotRequired[pulumi.Input[str]]
        sms_code_message: NotRequired[pulumi.Input[str]]
        sms_code_submit: NotRequired[pulumi.Input[str]]
        """
        Label for confirmation code submit button
        """
        sms_code_title: NotRequired[pulumi.Input[str]]
        sms_country_field_label: NotRequired[pulumi.Input[str]]
        sms_country_format: NotRequired[pulumi.Input[str]]
        sms_have_access_code: NotRequired[pulumi.Input[str]]
        """
        Label for checkbox to specify that the user has access code
        """
        sms_message_format: NotRequired[pulumi.Input[str]]
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        sms_number_cancel: NotRequired[pulumi.Input[str]]
        """
        label for canceling mobile details for SMS auth
        """
        sms_number_error: NotRequired[pulumi.Input[str]]
        sms_number_field_label: NotRequired[pulumi.Input[str]]
        """
        label for field to provide mobile number
        """
        sms_number_format: NotRequired[pulumi.Input[str]]
        sms_number_message: NotRequired[pulumi.Input[str]]
        sms_number_submit: NotRequired[pulumi.Input[str]]
        """
        label for submit button for code generation
        """
        sms_number_title: NotRequired[pulumi.Input[str]]
        """
        Title for phone number details
        """
        sms_username_format: NotRequired[pulumi.Input[str]]
        sponsor_back_link: NotRequired[pulumi.Input[str]]
        sponsor_cancel: NotRequired[pulumi.Input[str]]
        sponsor_email: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor Email
        """
        sponsor_email_error: NotRequired[pulumi.Input[str]]
        sponsor_info_approved: NotRequired[pulumi.Input[str]]
        sponsor_info_denied: NotRequired[pulumi.Input[str]]
        sponsor_info_pending: NotRequired[pulumi.Input[str]]
        sponsor_name: NotRequired[pulumi.Input[str]]
        """
        label for Sponsor Name
        """
        sponsor_name_error: NotRequired[pulumi.Input[str]]
        sponsor_note_pending: NotRequired[pulumi.Input[str]]
        sponsor_request_access: NotRequired[pulumi.Input[str]]
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        sponsor_status_approved: NotRequired[pulumi.Input[str]]
        """
        text to display if sponsor approves request
        """
        sponsor_status_denied: NotRequired[pulumi.Input[str]]
        """
        text to display when sponsor denies request
        """
        sponsor_status_pending: NotRequired[pulumi.Input[str]]
        """
        text to display if request is still pending
        """
        sponsor_submit: NotRequired[pulumi.Input[str]]
        """
        submit button label to notify sponsor about guest request
        """
        sponsors_error: NotRequired[pulumi.Input[str]]
        sponsors_field_label: NotRequired[pulumi.Input[str]]
        tos_accept_label: NotRequired[pulumi.Input[str]]
        """
        prefix of the label of the link to go to tos
        """
        tos_error: NotRequired[pulumi.Input[str]]
        """
        error message when tos not accepted
        """
        tos_link: NotRequired[pulumi.Input[str]]
        """
        label of the link to go to tos
        """
        tos_text: NotRequired[pulumi.Input[str]]
        """
        text of the Terms of Service
        """
elif False:
    WlanPortalTemplatePortalTemplateLocalesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanPortalTemplatePortalTemplateLocalesArgs:
    def __init__(__self__, *,
                 auth_button_amazon: Optional[pulumi.Input[str]] = None,
                 auth_button_azure: Optional[pulumi.Input[str]] = None,
                 auth_button_email: Optional[pulumi.Input[str]] = None,
                 auth_button_facebook: Optional[pulumi.Input[str]] = None,
                 auth_button_google: Optional[pulumi.Input[str]] = None,
                 auth_button_microsoft: Optional[pulumi.Input[str]] = None,
                 auth_button_passphrase: Optional[pulumi.Input[str]] = None,
                 auth_button_sms: Optional[pulumi.Input[str]] = None,
                 auth_button_sponsor: Optional[pulumi.Input[str]] = None,
                 auth_label: Optional[pulumi.Input[str]] = None,
                 back_link: Optional[pulumi.Input[str]] = None,
                 company_error: Optional[pulumi.Input[str]] = None,
                 company_label: Optional[pulumi.Input[str]] = None,
                 email_access_domain_error: Optional[pulumi.Input[str]] = None,
                 email_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_cancel: Optional[pulumi.Input[str]] = None,
                 email_code_error: Optional[pulumi.Input[str]] = None,
                 email_code_field_label: Optional[pulumi.Input[str]] = None,
                 email_code_message: Optional[pulumi.Input[str]] = None,
                 email_code_submit: Optional[pulumi.Input[str]] = None,
                 email_code_title: Optional[pulumi.Input[str]] = None,
                 email_error: Optional[pulumi.Input[str]] = None,
                 email_field_label: Optional[pulumi.Input[str]] = None,
                 email_label: Optional[pulumi.Input[str]] = None,
                 email_message: Optional[pulumi.Input[str]] = None,
                 email_submit: Optional[pulumi.Input[str]] = None,
                 email_title: Optional[pulumi.Input[str]] = None,
                 field1error: Optional[pulumi.Input[str]] = None,
                 field1label: Optional[pulumi.Input[str]] = None,
                 field2error: Optional[pulumi.Input[str]] = None,
                 field2label: Optional[pulumi.Input[str]] = None,
                 field3error: Optional[pulumi.Input[str]] = None,
                 field3label: Optional[pulumi.Input[str]] = None,
                 field4error: Optional[pulumi.Input[str]] = None,
                 field4label: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name_error: Optional[pulumi.Input[str]] = None,
                 name_label: Optional[pulumi.Input[str]] = None,
                 optout_label: Optional[pulumi.Input[str]] = None,
                 page_title: Optional[pulumi.Input[str]] = None,
                 passphrase_cancel: Optional[pulumi.Input[str]] = None,
                 passphrase_error: Optional[pulumi.Input[str]] = None,
                 passphrase_label: Optional[pulumi.Input[str]] = None,
                 passphrase_message: Optional[pulumi.Input[str]] = None,
                 passphrase_submit: Optional[pulumi.Input[str]] = None,
                 passphrase_title: Optional[pulumi.Input[str]] = None,
                 privacy_policy_accept_label: Optional[pulumi.Input[str]] = None,
                 privacy_policy_error: Optional[pulumi.Input[str]] = None,
                 privacy_policy_link: Optional[pulumi.Input[str]] = None,
                 privacy_policy_text: Optional[pulumi.Input[str]] = None,
                 required_field_label: Optional[pulumi.Input[str]] = None,
                 sign_in_label: Optional[pulumi.Input[str]] = None,
                 sms_carrier_default: Optional[pulumi.Input[str]] = None,
                 sms_carrier_error: Optional[pulumi.Input[str]] = None,
                 sms_carrier_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_cancel: Optional[pulumi.Input[str]] = None,
                 sms_code_error: Optional[pulumi.Input[str]] = None,
                 sms_code_field_label: Optional[pulumi.Input[str]] = None,
                 sms_code_message: Optional[pulumi.Input[str]] = None,
                 sms_code_submit: Optional[pulumi.Input[str]] = None,
                 sms_code_title: Optional[pulumi.Input[str]] = None,
                 sms_country_field_label: Optional[pulumi.Input[str]] = None,
                 sms_country_format: Optional[pulumi.Input[str]] = None,
                 sms_have_access_code: Optional[pulumi.Input[str]] = None,
                 sms_message_format: Optional[pulumi.Input[str]] = None,
                 sms_number_cancel: Optional[pulumi.Input[str]] = None,
                 sms_number_error: Optional[pulumi.Input[str]] = None,
                 sms_number_field_label: Optional[pulumi.Input[str]] = None,
                 sms_number_format: Optional[pulumi.Input[str]] = None,
                 sms_number_message: Optional[pulumi.Input[str]] = None,
                 sms_number_submit: Optional[pulumi.Input[str]] = None,
                 sms_number_title: Optional[pulumi.Input[str]] = None,
                 sms_username_format: Optional[pulumi.Input[str]] = None,
                 sponsor_back_link: Optional[pulumi.Input[str]] = None,
                 sponsor_cancel: Optional[pulumi.Input[str]] = None,
                 sponsor_email: Optional[pulumi.Input[str]] = None,
                 sponsor_email_error: Optional[pulumi.Input[str]] = None,
                 sponsor_info_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_info_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_info_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_name: Optional[pulumi.Input[str]] = None,
                 sponsor_name_error: Optional[pulumi.Input[str]] = None,
                 sponsor_note_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_request_access: Optional[pulumi.Input[str]] = None,
                 sponsor_status_approved: Optional[pulumi.Input[str]] = None,
                 sponsor_status_denied: Optional[pulumi.Input[str]] = None,
                 sponsor_status_pending: Optional[pulumi.Input[str]] = None,
                 sponsor_submit: Optional[pulumi.Input[str]] = None,
                 sponsors_error: Optional[pulumi.Input[str]] = None,
                 sponsors_field_label: Optional[pulumi.Input[str]] = None,
                 tos_accept_label: Optional[pulumi.Input[str]] = None,
                 tos_error: Optional[pulumi.Input[str]] = None,
                 tos_link: Optional[pulumi.Input[str]] = None,
                 tos_text: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_button_amazon: label for Amazon auth button
        :param pulumi.Input[str] auth_button_azure: label for Azure auth button
        :param pulumi.Input[str] auth_button_email: label for Email auth button
        :param pulumi.Input[str] auth_button_facebook: label for Facebook auth button
        :param pulumi.Input[str] auth_button_google: label for Google auth button
        :param pulumi.Input[str] auth_button_microsoft: label for Microsoft auth button
        :param pulumi.Input[str] auth_button_passphrase: label for passphrase auth button
        :param pulumi.Input[str] auth_button_sms: label for SMS auth button
        :param pulumi.Input[str] auth_button_sponsor: label for Sponsor auth button
        :param pulumi.Input[str] back_link: label of the link to go back to /logon
        :param pulumi.Input[str] company_error: error message when company not provided
        :param pulumi.Input[str] company_label: label of company field
        :param pulumi.Input[str] email_access_domain_error: error message when a user has valid social login but doesn't match specified email domains.
        :param pulumi.Input[str] email_cancel: Label for cancel confirmation code submission using email auth
        :param pulumi.Input[str] email_error: error message when email not provided
        :param pulumi.Input[str] email_label: label of email field
        :param pulumi.Input[str] email_submit: Label for confirmation code submit button using email auth
        :param pulumi.Input[str] email_title: Title for the Email registration
        :param pulumi.Input[str] field1error: error message when field1 not provided
        :param pulumi.Input[str] field1label: label of field1
        :param pulumi.Input[str] field2error: error message when field2 not provided
        :param pulumi.Input[str] field2label: label of field2
        :param pulumi.Input[str] field3error: error message when field3 not provided
        :param pulumi.Input[str] field3label: label of field3
        :param pulumi.Input[str] field4error: error message when field4 not provided
        :param pulumi.Input[str] field4label: label of field4
        :param pulumi.Input[str] name_error: error message when name not provided
        :param pulumi.Input[str] name_label: label of name field
        :param pulumi.Input[str] optout_label: label for Do Not Store My Personal Information
        :param pulumi.Input[str] passphrase_cancel: Label for the Passphrase cancel button
        :param pulumi.Input[str] passphrase_error: error message when invalid passphrase is provided
        :param pulumi.Input[str] passphrase_label: Passphrase
        :param pulumi.Input[str] passphrase_submit: Label for the Passphrase submit button
        :param pulumi.Input[str] passphrase_title: Title for passphrase details page
        :param pulumi.Input[str] privacy_policy_accept_label: prefix of the label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_error: error message when Privacy Policy not accepted
        :param pulumi.Input[str] privacy_policy_link: label of the link to go to Privacy Policy
        :param pulumi.Input[str] privacy_policy_text: text of the Privacy Policy
        :param pulumi.Input[str] required_field_label: label to denote required field
        :param pulumi.Input[str] sign_in_label: label of the button to /signin
        :param pulumi.Input[str] sms_carrier_field_label: label for mobile carrier drop-down list
        :param pulumi.Input[str] sms_code_cancel: Label for cancel confirmation code submission
        :param pulumi.Input[str] sms_code_error: error message when confirmation code is invalid
        :param pulumi.Input[str] sms_code_submit: Label for confirmation code submit button
        :param pulumi.Input[str] sms_have_access_code: Label for checkbox to specify that the user has access code
        :param pulumi.Input[str] sms_message_format: format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        :param pulumi.Input[str] sms_number_cancel: label for canceling mobile details for SMS auth
        :param pulumi.Input[str] sms_number_field_label: label for field to provide mobile number
        :param pulumi.Input[str] sms_number_submit: label for submit button for code generation
        :param pulumi.Input[str] sms_number_title: Title for phone number details
        :param pulumi.Input[str] sponsor_email: label for Sponsor Email
        :param pulumi.Input[str] sponsor_name: label for Sponsor Name
        :param pulumi.Input[str] sponsor_request_access: submit button label request Wifi Access and notify sponsor about guest request
        :param pulumi.Input[str] sponsor_status_approved: text to display if sponsor approves request
        :param pulumi.Input[str] sponsor_status_denied: text to display when sponsor denies request
        :param pulumi.Input[str] sponsor_status_pending: text to display if request is still pending
        :param pulumi.Input[str] sponsor_submit: submit button label to notify sponsor about guest request
        :param pulumi.Input[str] tos_accept_label: prefix of the label of the link to go to tos
        :param pulumi.Input[str] tos_error: error message when tos not accepted
        :param pulumi.Input[str] tos_link: label of the link to go to tos
        :param pulumi.Input[str] tos_text: text of the Terms of Service
        """
        if auth_button_amazon is not None:
            pulumi.set(__self__, "auth_button_amazon", auth_button_amazon)
        if auth_button_azure is not None:
            pulumi.set(__self__, "auth_button_azure", auth_button_azure)
        if auth_button_email is not None:
            pulumi.set(__self__, "auth_button_email", auth_button_email)
        if auth_button_facebook is not None:
            pulumi.set(__self__, "auth_button_facebook", auth_button_facebook)
        if auth_button_google is not None:
            pulumi.set(__self__, "auth_button_google", auth_button_google)
        if auth_button_microsoft is not None:
            pulumi.set(__self__, "auth_button_microsoft", auth_button_microsoft)
        if auth_button_passphrase is not None:
            pulumi.set(__self__, "auth_button_passphrase", auth_button_passphrase)
        if auth_button_sms is not None:
            pulumi.set(__self__, "auth_button_sms", auth_button_sms)
        if auth_button_sponsor is not None:
            pulumi.set(__self__, "auth_button_sponsor", auth_button_sponsor)
        if auth_label is not None:
            pulumi.set(__self__, "auth_label", auth_label)
        if back_link is not None:
            pulumi.set(__self__, "back_link", back_link)
        if company_error is not None:
            pulumi.set(__self__, "company_error", company_error)
        if company_label is not None:
            pulumi.set(__self__, "company_label", company_label)
        if email_access_domain_error is not None:
            pulumi.set(__self__, "email_access_domain_error", email_access_domain_error)
        if email_cancel is not None:
            pulumi.set(__self__, "email_cancel", email_cancel)
        if email_code_cancel is not None:
            pulumi.set(__self__, "email_code_cancel", email_code_cancel)
        if email_code_error is not None:
            pulumi.set(__self__, "email_code_error", email_code_error)
        if email_code_field_label is not None:
            pulumi.set(__self__, "email_code_field_label", email_code_field_label)
        if email_code_message is not None:
            pulumi.set(__self__, "email_code_message", email_code_message)
        if email_code_submit is not None:
            pulumi.set(__self__, "email_code_submit", email_code_submit)
        if email_code_title is not None:
            pulumi.set(__self__, "email_code_title", email_code_title)
        if email_error is not None:
            pulumi.set(__self__, "email_error", email_error)
        if email_field_label is not None:
            pulumi.set(__self__, "email_field_label", email_field_label)
        if email_label is not None:
            pulumi.set(__self__, "email_label", email_label)
        if email_message is not None:
            pulumi.set(__self__, "email_message", email_message)
        if email_submit is not None:
            pulumi.set(__self__, "email_submit", email_submit)
        if email_title is not None:
            pulumi.set(__self__, "email_title", email_title)
        if field1error is not None:
            pulumi.set(__self__, "field1error", field1error)
        if field1label is not None:
            pulumi.set(__self__, "field1label", field1label)
        if field2error is not None:
            pulumi.set(__self__, "field2error", field2error)
        if field2label is not None:
            pulumi.set(__self__, "field2label", field2label)
        if field3error is not None:
            pulumi.set(__self__, "field3error", field3error)
        if field3label is not None:
            pulumi.set(__self__, "field3label", field3label)
        if field4error is not None:
            pulumi.set(__self__, "field4error", field4error)
        if field4label is not None:
            pulumi.set(__self__, "field4label", field4label)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name_error is not None:
            pulumi.set(__self__, "name_error", name_error)
        if name_label is not None:
            pulumi.set(__self__, "name_label", name_label)
        if optout_label is not None:
            pulumi.set(__self__, "optout_label", optout_label)
        if page_title is not None:
            pulumi.set(__self__, "page_title", page_title)
        if passphrase_cancel is not None:
            pulumi.set(__self__, "passphrase_cancel", passphrase_cancel)
        if passphrase_error is not None:
            pulumi.set(__self__, "passphrase_error", passphrase_error)
        if passphrase_label is not None:
            pulumi.set(__self__, "passphrase_label", passphrase_label)
        if passphrase_message is not None:
            pulumi.set(__self__, "passphrase_message", passphrase_message)
        if passphrase_submit is not None:
            pulumi.set(__self__, "passphrase_submit", passphrase_submit)
        if passphrase_title is not None:
            pulumi.set(__self__, "passphrase_title", passphrase_title)
        if privacy_policy_accept_label is not None:
            pulumi.set(__self__, "privacy_policy_accept_label", privacy_policy_accept_label)
        if privacy_policy_error is not None:
            pulumi.set(__self__, "privacy_policy_error", privacy_policy_error)
        if privacy_policy_link is not None:
            pulumi.set(__self__, "privacy_policy_link", privacy_policy_link)
        if privacy_policy_text is not None:
            pulumi.set(__self__, "privacy_policy_text", privacy_policy_text)
        if required_field_label is not None:
            pulumi.set(__self__, "required_field_label", required_field_label)
        if sign_in_label is not None:
            pulumi.set(__self__, "sign_in_label", sign_in_label)
        if sms_carrier_default is not None:
            pulumi.set(__self__, "sms_carrier_default", sms_carrier_default)
        if sms_carrier_error is not None:
            pulumi.set(__self__, "sms_carrier_error", sms_carrier_error)
        if sms_carrier_field_label is not None:
            pulumi.set(__self__, "sms_carrier_field_label", sms_carrier_field_label)
        if sms_code_cancel is not None:
            pulumi.set(__self__, "sms_code_cancel", sms_code_cancel)
        if sms_code_error is not None:
            pulumi.set(__self__, "sms_code_error", sms_code_error)
        if sms_code_field_label is not None:
            pulumi.set(__self__, "sms_code_field_label", sms_code_field_label)
        if sms_code_message is not None:
            pulumi.set(__self__, "sms_code_message", sms_code_message)
        if sms_code_submit is not None:
            pulumi.set(__self__, "sms_code_submit", sms_code_submit)
        if sms_code_title is not None:
            pulumi.set(__self__, "sms_code_title", sms_code_title)
        if sms_country_field_label is not None:
            pulumi.set(__self__, "sms_country_field_label", sms_country_field_label)
        if sms_country_format is not None:
            pulumi.set(__self__, "sms_country_format", sms_country_format)
        if sms_have_access_code is not None:
            pulumi.set(__self__, "sms_have_access_code", sms_have_access_code)
        if sms_message_format is not None:
            pulumi.set(__self__, "sms_message_format", sms_message_format)
        if sms_number_cancel is not None:
            pulumi.set(__self__, "sms_number_cancel", sms_number_cancel)
        if sms_number_error is not None:
            pulumi.set(__self__, "sms_number_error", sms_number_error)
        if sms_number_field_label is not None:
            pulumi.set(__self__, "sms_number_field_label", sms_number_field_label)
        if sms_number_format is not None:
            pulumi.set(__self__, "sms_number_format", sms_number_format)
        if sms_number_message is not None:
            pulumi.set(__self__, "sms_number_message", sms_number_message)
        if sms_number_submit is not None:
            pulumi.set(__self__, "sms_number_submit", sms_number_submit)
        if sms_number_title is not None:
            pulumi.set(__self__, "sms_number_title", sms_number_title)
        if sms_username_format is not None:
            pulumi.set(__self__, "sms_username_format", sms_username_format)
        if sponsor_back_link is not None:
            pulumi.set(__self__, "sponsor_back_link", sponsor_back_link)
        if sponsor_cancel is not None:
            pulumi.set(__self__, "sponsor_cancel", sponsor_cancel)
        if sponsor_email is not None:
            pulumi.set(__self__, "sponsor_email", sponsor_email)
        if sponsor_email_error is not None:
            pulumi.set(__self__, "sponsor_email_error", sponsor_email_error)
        if sponsor_info_approved is not None:
            pulumi.set(__self__, "sponsor_info_approved", sponsor_info_approved)
        if sponsor_info_denied is not None:
            pulumi.set(__self__, "sponsor_info_denied", sponsor_info_denied)
        if sponsor_info_pending is not None:
            pulumi.set(__self__, "sponsor_info_pending", sponsor_info_pending)
        if sponsor_name is not None:
            pulumi.set(__self__, "sponsor_name", sponsor_name)
        if sponsor_name_error is not None:
            pulumi.set(__self__, "sponsor_name_error", sponsor_name_error)
        if sponsor_note_pending is not None:
            pulumi.set(__self__, "sponsor_note_pending", sponsor_note_pending)
        if sponsor_request_access is not None:
            pulumi.set(__self__, "sponsor_request_access", sponsor_request_access)
        if sponsor_status_approved is not None:
            pulumi.set(__self__, "sponsor_status_approved", sponsor_status_approved)
        if sponsor_status_denied is not None:
            pulumi.set(__self__, "sponsor_status_denied", sponsor_status_denied)
        if sponsor_status_pending is not None:
            pulumi.set(__self__, "sponsor_status_pending", sponsor_status_pending)
        if sponsor_submit is not None:
            pulumi.set(__self__, "sponsor_submit", sponsor_submit)
        if sponsors_error is not None:
            pulumi.set(__self__, "sponsors_error", sponsors_error)
        if sponsors_field_label is not None:
            pulumi.set(__self__, "sponsors_field_label", sponsors_field_label)
        if tos_accept_label is not None:
            pulumi.set(__self__, "tos_accept_label", tos_accept_label)
        if tos_error is not None:
            pulumi.set(__self__, "tos_error", tos_error)
        if tos_link is not None:
            pulumi.set(__self__, "tos_link", tos_link)
        if tos_text is not None:
            pulumi.set(__self__, "tos_text", tos_text)

    @property
    @pulumi.getter(name="authButtonAmazon")
    def auth_button_amazon(self) -> Optional[pulumi.Input[str]]:
        """
        label for Amazon auth button
        """
        return pulumi.get(self, "auth_button_amazon")

    @auth_button_amazon.setter
    def auth_button_amazon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_amazon", value)

    @property
    @pulumi.getter(name="authButtonAzure")
    def auth_button_azure(self) -> Optional[pulumi.Input[str]]:
        """
        label for Azure auth button
        """
        return pulumi.get(self, "auth_button_azure")

    @auth_button_azure.setter
    def auth_button_azure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_azure", value)

    @property
    @pulumi.getter(name="authButtonEmail")
    def auth_button_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Email auth button
        """
        return pulumi.get(self, "auth_button_email")

    @auth_button_email.setter
    def auth_button_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_email", value)

    @property
    @pulumi.getter(name="authButtonFacebook")
    def auth_button_facebook(self) -> Optional[pulumi.Input[str]]:
        """
        label for Facebook auth button
        """
        return pulumi.get(self, "auth_button_facebook")

    @auth_button_facebook.setter
    def auth_button_facebook(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_facebook", value)

    @property
    @pulumi.getter(name="authButtonGoogle")
    def auth_button_google(self) -> Optional[pulumi.Input[str]]:
        """
        label for Google auth button
        """
        return pulumi.get(self, "auth_button_google")

    @auth_button_google.setter
    def auth_button_google(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_google", value)

    @property
    @pulumi.getter(name="authButtonMicrosoft")
    def auth_button_microsoft(self) -> Optional[pulumi.Input[str]]:
        """
        label for Microsoft auth button
        """
        return pulumi.get(self, "auth_button_microsoft")

    @auth_button_microsoft.setter
    def auth_button_microsoft(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_microsoft", value)

    @property
    @pulumi.getter(name="authButtonPassphrase")
    def auth_button_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        label for passphrase auth button
        """
        return pulumi.get(self, "auth_button_passphrase")

    @auth_button_passphrase.setter
    def auth_button_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_passphrase", value)

    @property
    @pulumi.getter(name="authButtonSms")
    def auth_button_sms(self) -> Optional[pulumi.Input[str]]:
        """
        label for SMS auth button
        """
        return pulumi.get(self, "auth_button_sms")

    @auth_button_sms.setter
    def auth_button_sms(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sms", value)

    @property
    @pulumi.getter(name="authButtonSponsor")
    def auth_button_sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor auth button
        """
        return pulumi.get(self, "auth_button_sponsor")

    @auth_button_sponsor.setter
    def auth_button_sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_button_sponsor", value)

    @property
    @pulumi.getter(name="authLabel")
    def auth_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_label")

    @auth_label.setter
    def auth_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_label", value)

    @property
    @pulumi.getter(name="backLink")
    def back_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go back to /logon
        """
        return pulumi.get(self, "back_link")

    @back_link.setter
    def back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "back_link", value)

    @property
    @pulumi.getter(name="companyError")
    def company_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when company not provided
        """
        return pulumi.get(self, "company_error")

    @company_error.setter
    def company_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_error", value)

    @property
    @pulumi.getter(name="companyLabel")
    def company_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of company field
        """
        return pulumi.get(self, "company_label")

    @company_label.setter
    def company_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_label", value)

    @property
    @pulumi.getter(name="emailAccessDomainError")
    def email_access_domain_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when a user has valid social login but doesn't match specified email domains.
        """
        return pulumi.get(self, "email_access_domain_error")

    @email_access_domain_error.setter
    def email_access_domain_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_access_domain_error", value)

    @property
    @pulumi.getter(name="emailCancel")
    def email_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission using email auth
        """
        return pulumi.get(self, "email_cancel")

    @email_cancel.setter
    def email_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_cancel", value)

    @property
    @pulumi.getter(name="emailCodeCancel")
    def email_code_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_cancel")

    @email_code_cancel.setter
    def email_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_cancel", value)

    @property
    @pulumi.getter(name="emailCodeError")
    def email_code_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_error")

    @email_code_error.setter
    def email_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_error", value)

    @property
    @pulumi.getter(name="emailCodeFieldLabel")
    def email_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_field_label")

    @email_code_field_label.setter
    def email_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_field_label", value)

    @property
    @pulumi.getter(name="emailCodeMessage")
    def email_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_message")

    @email_code_message.setter
    def email_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_message", value)

    @property
    @pulumi.getter(name="emailCodeSubmit")
    def email_code_submit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_submit")

    @email_code_submit.setter
    def email_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_submit", value)

    @property
    @pulumi.getter(name="emailCodeTitle")
    def email_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_code_title")

    @email_code_title.setter
    def email_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_code_title", value)

    @property
    @pulumi.getter(name="emailError")
    def email_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when email not provided
        """
        return pulumi.get(self, "email_error")

    @email_error.setter
    def email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_error", value)

    @property
    @pulumi.getter(name="emailFieldLabel")
    def email_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_field_label")

    @email_field_label.setter
    def email_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_field_label", value)

    @property
    @pulumi.getter(name="emailLabel")
    def email_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of email field
        """
        return pulumi.get(self, "email_label")

    @email_label.setter
    def email_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_label", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="emailSubmit")
    def email_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button using email auth
        """
        return pulumi.get(self, "email_submit")

    @email_submit.setter
    def email_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_submit", value)

    @property
    @pulumi.getter(name="emailTitle")
    def email_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the Email registration
        """
        return pulumi.get(self, "email_title")

    @email_title.setter
    def email_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_title", value)

    @property
    @pulumi.getter
    def field1error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field1 not provided
        """
        return pulumi.get(self, "field1error")

    @field1error.setter
    def field1error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1error", value)

    @property
    @pulumi.getter
    def field1label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field1
        """
        return pulumi.get(self, "field1label")

    @field1label.setter
    def field1label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field1label", value)

    @property
    @pulumi.getter
    def field2error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field2 not provided
        """
        return pulumi.get(self, "field2error")

    @field2error.setter
    def field2error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2error", value)

    @property
    @pulumi.getter
    def field2label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field2
        """
        return pulumi.get(self, "field2label")

    @field2label.setter
    def field2label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field2label", value)

    @property
    @pulumi.getter
    def field3error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field3 not provided
        """
        return pulumi.get(self, "field3error")

    @field3error.setter
    def field3error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3error", value)

    @property
    @pulumi.getter
    def field3label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field3
        """
        return pulumi.get(self, "field3label")

    @field3label.setter
    def field3label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field3label", value)

    @property
    @pulumi.getter
    def field4error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when field4 not provided
        """
        return pulumi.get(self, "field4error")

    @field4error.setter
    def field4error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4error", value)

    @property
    @pulumi.getter
    def field4label(self) -> Optional[pulumi.Input[str]]:
        """
        label of field4
        """
        return pulumi.get(self, "field4label")

    @field4label.setter
    def field4label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field4label", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="nameError")
    def name_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when name not provided
        """
        return pulumi.get(self, "name_error")

    @name_error.setter
    def name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_error", value)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of name field
        """
        return pulumi.get(self, "name_label")

    @name_label.setter
    def name_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_label", value)

    @property
    @pulumi.getter(name="optoutLabel")
    def optout_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for Do Not Store My Personal Information
        """
        return pulumi.get(self, "optout_label")

    @optout_label.setter
    def optout_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optout_label", value)

    @property
    @pulumi.getter(name="pageTitle")
    def page_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "page_title")

    @page_title.setter
    def page_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_title", value)

    @property
    @pulumi.getter(name="passphraseCancel")
    def passphrase_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase cancel button
        """
        return pulumi.get(self, "passphrase_cancel")

    @passphrase_cancel.setter
    def passphrase_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_cancel", value)

    @property
    @pulumi.getter(name="passphraseError")
    def passphrase_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when invalid passphrase is provided
        """
        return pulumi.get(self, "passphrase_error")

    @passphrase_error.setter
    def passphrase_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_error", value)

    @property
    @pulumi.getter(name="passphraseLabel")
    def passphrase_label(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase
        """
        return pulumi.get(self, "passphrase_label")

    @passphrase_label.setter
    def passphrase_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_label", value)

    @property
    @pulumi.getter(name="passphraseMessage")
    def passphrase_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "passphrase_message")

    @passphrase_message.setter
    def passphrase_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_message", value)

    @property
    @pulumi.getter(name="passphraseSubmit")
    def passphrase_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for the Passphrase submit button
        """
        return pulumi.get(self, "passphrase_submit")

    @passphrase_submit.setter
    def passphrase_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_submit", value)

    @property
    @pulumi.getter(name="passphraseTitle")
    def passphrase_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for passphrase details page
        """
        return pulumi.get(self, "passphrase_title")

    @passphrase_title.setter
    def passphrase_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase_title", value)

    @property
    @pulumi.getter(name="privacyPolicyAcceptLabel")
    def privacy_policy_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_accept_label")

    @privacy_policy_accept_label.setter
    def privacy_policy_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_accept_label", value)

    @property
    @pulumi.getter(name="privacyPolicyError")
    def privacy_policy_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when Privacy Policy not accepted
        """
        return pulumi.get(self, "privacy_policy_error")

    @privacy_policy_error.setter
    def privacy_policy_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_error", value)

    @property
    @pulumi.getter(name="privacyPolicyLink")
    def privacy_policy_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_link")

    @privacy_policy_link.setter
    def privacy_policy_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_link", value)

    @property
    @pulumi.getter(name="privacyPolicyText")
    def privacy_policy_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Privacy Policy
        """
        return pulumi.get(self, "privacy_policy_text")

    @privacy_policy_text.setter
    def privacy_policy_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_policy_text", value)

    @property
    @pulumi.getter(name="requiredFieldLabel")
    def required_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label to denote required field
        """
        return pulumi.get(self, "required_field_label")

    @required_field_label.setter
    def required_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_field_label", value)

    @property
    @pulumi.getter(name="signInLabel")
    def sign_in_label(self) -> Optional[pulumi.Input[str]]:
        """
        label of the button to /signin
        """
        return pulumi.get(self, "sign_in_label")

    @sign_in_label.setter
    def sign_in_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_label", value)

    @property
    @pulumi.getter(name="smsCarrierDefault")
    def sms_carrier_default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_default")

    @sms_carrier_default.setter
    def sms_carrier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_default", value)

    @property
    @pulumi.getter(name="smsCarrierError")
    def sms_carrier_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_carrier_error")

    @sms_carrier_error.setter
    def sms_carrier_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_error", value)

    @property
    @pulumi.getter(name="smsCarrierFieldLabel")
    def sms_carrier_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for mobile carrier drop-down list
        """
        return pulumi.get(self, "sms_carrier_field_label")

    @sms_carrier_field_label.setter
    def sms_carrier_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_carrier_field_label", value)

    @property
    @pulumi.getter(name="smsCodeCancel")
    def sms_code_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Label for cancel confirmation code submission
        """
        return pulumi.get(self, "sms_code_cancel")

    @sms_code_cancel.setter
    def sms_code_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_cancel", value)

    @property
    @pulumi.getter(name="smsCodeError")
    def sms_code_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when confirmation code is invalid
        """
        return pulumi.get(self, "sms_code_error")

    @sms_code_error.setter
    def sms_code_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_error", value)

    @property
    @pulumi.getter(name="smsCodeFieldLabel")
    def sms_code_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_field_label")

    @sms_code_field_label.setter
    def sms_code_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_field_label", value)

    @property
    @pulumi.getter(name="smsCodeMessage")
    def sms_code_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_message")

    @sms_code_message.setter
    def sms_code_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_message", value)

    @property
    @pulumi.getter(name="smsCodeSubmit")
    def sms_code_submit(self) -> Optional[pulumi.Input[str]]:
        """
        Label for confirmation code submit button
        """
        return pulumi.get(self, "sms_code_submit")

    @sms_code_submit.setter
    def sms_code_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_submit", value)

    @property
    @pulumi.getter(name="smsCodeTitle")
    def sms_code_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_code_title")

    @sms_code_title.setter
    def sms_code_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_code_title", value)

    @property
    @pulumi.getter(name="smsCountryFieldLabel")
    def sms_country_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_field_label")

    @sms_country_field_label.setter
    def sms_country_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_field_label", value)

    @property
    @pulumi.getter(name="smsCountryFormat")
    def sms_country_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_country_format")

    @sms_country_format.setter
    def sms_country_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_country_format", value)

    @property
    @pulumi.getter(name="smsHaveAccessCode")
    def sms_have_access_code(self) -> Optional[pulumi.Input[str]]:
        """
        Label for checkbox to specify that the user has access code
        """
        return pulumi.get(self, "sms_have_access_code")

    @sms_have_access_code.setter
    def sms_have_access_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_have_access_code", value)

    @property
    @pulumi.getter(name="smsMessageFormat")
    def sms_message_format(self) -> Optional[pulumi.Input[str]]:
        """
        format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
        """
        return pulumi.get(self, "sms_message_format")

    @sms_message_format.setter
    def sms_message_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_message_format", value)

    @property
    @pulumi.getter(name="smsNumberCancel")
    def sms_number_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        label for canceling mobile details for SMS auth
        """
        return pulumi.get(self, "sms_number_cancel")

    @sms_number_cancel.setter
    def sms_number_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_cancel", value)

    @property
    @pulumi.getter(name="smsNumberError")
    def sms_number_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_error")

    @sms_number_error.setter
    def sms_number_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_error", value)

    @property
    @pulumi.getter(name="smsNumberFieldLabel")
    def sms_number_field_label(self) -> Optional[pulumi.Input[str]]:
        """
        label for field to provide mobile number
        """
        return pulumi.get(self, "sms_number_field_label")

    @sms_number_field_label.setter
    def sms_number_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_field_label", value)

    @property
    @pulumi.getter(name="smsNumberFormat")
    def sms_number_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_format")

    @sms_number_format.setter
    def sms_number_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_format", value)

    @property
    @pulumi.getter(name="smsNumberMessage")
    def sms_number_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_number_message")

    @sms_number_message.setter
    def sms_number_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_message", value)

    @property
    @pulumi.getter(name="smsNumberSubmit")
    def sms_number_submit(self) -> Optional[pulumi.Input[str]]:
        """
        label for submit button for code generation
        """
        return pulumi.get(self, "sms_number_submit")

    @sms_number_submit.setter
    def sms_number_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_submit", value)

    @property
    @pulumi.getter(name="smsNumberTitle")
    def sms_number_title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for phone number details
        """
        return pulumi.get(self, "sms_number_title")

    @sms_number_title.setter
    def sms_number_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_number_title", value)

    @property
    @pulumi.getter(name="smsUsernameFormat")
    def sms_username_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sms_username_format")

    @sms_username_format.setter
    def sms_username_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sms_username_format", value)

    @property
    @pulumi.getter(name="sponsorBackLink")
    def sponsor_back_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_back_link")

    @sponsor_back_link.setter
    def sponsor_back_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_back_link", value)

    @property
    @pulumi.getter(name="sponsorCancel")
    def sponsor_cancel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_cancel")

    @sponsor_cancel.setter
    def sponsor_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_cancel", value)

    @property
    @pulumi.getter(name="sponsorEmail")
    def sponsor_email(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Email
        """
        return pulumi.get(self, "sponsor_email")

    @sponsor_email.setter
    def sponsor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email", value)

    @property
    @pulumi.getter(name="sponsorEmailError")
    def sponsor_email_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_email_error")

    @sponsor_email_error.setter
    def sponsor_email_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_email_error", value)

    @property
    @pulumi.getter(name="sponsorInfoApproved")
    def sponsor_info_approved(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_approved")

    @sponsor_info_approved.setter
    def sponsor_info_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_approved", value)

    @property
    @pulumi.getter(name="sponsorInfoDenied")
    def sponsor_info_denied(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_denied")

    @sponsor_info_denied.setter
    def sponsor_info_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_denied", value)

    @property
    @pulumi.getter(name="sponsorInfoPending")
    def sponsor_info_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_info_pending")

    @sponsor_info_pending.setter
    def sponsor_info_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_info_pending", value)

    @property
    @pulumi.getter(name="sponsorName")
    def sponsor_name(self) -> Optional[pulumi.Input[str]]:
        """
        label for Sponsor Name
        """
        return pulumi.get(self, "sponsor_name")

    @sponsor_name.setter
    def sponsor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name", value)

    @property
    @pulumi.getter(name="sponsorNameError")
    def sponsor_name_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_name_error")

    @sponsor_name_error.setter
    def sponsor_name_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_name_error", value)

    @property
    @pulumi.getter(name="sponsorNotePending")
    def sponsor_note_pending(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsor_note_pending")

    @sponsor_note_pending.setter
    def sponsor_note_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_note_pending", value)

    @property
    @pulumi.getter(name="sponsorRequestAccess")
    def sponsor_request_access(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label request Wifi Access and notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_request_access")

    @sponsor_request_access.setter
    def sponsor_request_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_request_access", value)

    @property
    @pulumi.getter(name="sponsorStatusApproved")
    def sponsor_status_approved(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if sponsor approves request
        """
        return pulumi.get(self, "sponsor_status_approved")

    @sponsor_status_approved.setter
    def sponsor_status_approved(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_approved", value)

    @property
    @pulumi.getter(name="sponsorStatusDenied")
    def sponsor_status_denied(self) -> Optional[pulumi.Input[str]]:
        """
        text to display when sponsor denies request
        """
        return pulumi.get(self, "sponsor_status_denied")

    @sponsor_status_denied.setter
    def sponsor_status_denied(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_denied", value)

    @property
    @pulumi.getter(name="sponsorStatusPending")
    def sponsor_status_pending(self) -> Optional[pulumi.Input[str]]:
        """
        text to display if request is still pending
        """
        return pulumi.get(self, "sponsor_status_pending")

    @sponsor_status_pending.setter
    def sponsor_status_pending(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_status_pending", value)

    @property
    @pulumi.getter(name="sponsorSubmit")
    def sponsor_submit(self) -> Optional[pulumi.Input[str]]:
        """
        submit button label to notify sponsor about guest request
        """
        return pulumi.get(self, "sponsor_submit")

    @sponsor_submit.setter
    def sponsor_submit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor_submit", value)

    @property
    @pulumi.getter(name="sponsorsError")
    def sponsors_error(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_error")

    @sponsors_error.setter
    def sponsors_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_error", value)

    @property
    @pulumi.getter(name="sponsorsFieldLabel")
    def sponsors_field_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sponsors_field_label")

    @sponsors_field_label.setter
    def sponsors_field_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsors_field_label", value)

    @property
    @pulumi.getter(name="tosAcceptLabel")
    def tos_accept_label(self) -> Optional[pulumi.Input[str]]:
        """
        prefix of the label of the link to go to tos
        """
        return pulumi.get(self, "tos_accept_label")

    @tos_accept_label.setter
    def tos_accept_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_accept_label", value)

    @property
    @pulumi.getter(name="tosError")
    def tos_error(self) -> Optional[pulumi.Input[str]]:
        """
        error message when tos not accepted
        """
        return pulumi.get(self, "tos_error")

    @tos_error.setter
    def tos_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_error", value)

    @property
    @pulumi.getter(name="tosLink")
    def tos_link(self) -> Optional[pulumi.Input[str]]:
        """
        label of the link to go to tos
        """
        return pulumi.get(self, "tos_link")

    @tos_link.setter
    def tos_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_link", value)

    @property
    @pulumi.getter(name="tosText")
    def tos_text(self) -> Optional[pulumi.Input[str]]:
        """
        text of the Terms of Service
        """
        return pulumi.get(self, "tos_text")

    @tos_text.setter
    def tos_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_text", value)


if not MYPY:
    class WlanQosArgsDict(TypedDict):
        class_: NotRequired[pulumi.Input[str]]
        """
        enum: `background`, `best_effort`, `video`, `voice`
        """
        overwrite: NotRequired[pulumi.Input[bool]]
        """
        whether to overwrite QoS
        """
elif False:
    WlanQosArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanQosArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[str]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] class_: enum: `background`, `best_effort`, `video`, `voice`
        :param pulumi.Input[bool] overwrite: whether to overwrite QoS
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `background`, `best_effort`, `video`, `voice`
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to overwrite QoS
        """
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)


if not MYPY:
    class WlanRadsecArgsDict(TypedDict):
        coa_enabled: NotRequired[pulumi.Input[bool]]
        enabled: NotRequired[pulumi.Input[bool]]
        idle_timeout: NotRequired[pulumi.Input[int]]
        mxcluster_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
        Org mxedge(s) identified by mxcluster_ids
        """
        proxy_hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
        when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        """
        server_name: NotRequired[pulumi.Input[str]]
        """
        name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        """
        servers: NotRequired[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgsDict']]]]
        """
        List of Radsec Servers. Only if not Mist Edge.
        """
        use_mxedge: NotRequired[pulumi.Input[bool]]
        """
        use mxedge(s) as radsecproxy
        """
        use_site_mxedge: NotRequired[pulumi.Input[bool]]
        """
        To use Site mxedges when this WLAN does not use mxtunnel
        """
elif False:
    WlanRadsecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanRadsecArgs:
    def __init__(__self__, *,
                 coa_enabled: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 mxcluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proxy_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]] = None,
                 use_mxedge: Optional[pulumi.Input[bool]] = None,
                 use_site_mxedge: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mxcluster_ids: To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
               Org mxedge(s) identified by mxcluster_ids
        :param pulumi.Input[Sequence[pulumi.Input[str]]] proxy_hosts: default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
               when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        :param pulumi.Input[str] server_name: name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        :param pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]] servers: List of Radsec Servers. Only if not Mist Edge.
        :param pulumi.Input[bool] use_mxedge: use mxedge(s) as radsecproxy
        :param pulumi.Input[bool] use_site_mxedge: To use Site mxedges when this WLAN does not use mxtunnel
        """
        if coa_enabled is not None:
            pulumi.set(__self__, "coa_enabled", coa_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if mxcluster_ids is not None:
            pulumi.set(__self__, "mxcluster_ids", mxcluster_ids)
        if proxy_hosts is not None:
            pulumi.set(__self__, "proxy_hosts", proxy_hosts)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if use_mxedge is not None:
            pulumi.set(__self__, "use_mxedge", use_mxedge)
        if use_site_mxedge is not None:
            pulumi.set(__self__, "use_site_mxedge", use_site_mxedge)

    @property
    @pulumi.getter(name="coaEnabled")
    def coa_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "coa_enabled")

    @coa_enabled.setter
    def coa_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "coa_enabled", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="mxclusterIds")
    def mxcluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids.
        Org mxedge(s) identified by mxcluster_ids
        """
        return pulumi.get(self, "mxcluster_ids")

    @mxcluster_ids.setter
    def mxcluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mxcluster_ids", value)

    @property
    @pulumi.getter(name="proxyHosts")
    def proxy_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        default is site.mxedge.radsec.proxy_hosts which must be a superset of all wlans[*].radsec.proxy_hosts
        when radsec.proxy_hosts are not used, tunnel peers (org or site mxedges) are used irrespective of use_site_mxedge
        """
        return pulumi.get(self, "proxy_hosts")

    @proxy_hosts.setter
    def proxy_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "proxy_hosts", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]]:
        """
        List of Radsec Servers. Only if not Mist Edge.
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WlanRadsecServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="useMxedge")
    def use_mxedge(self) -> Optional[pulumi.Input[bool]]:
        """
        use mxedge(s) as radsecproxy
        """
        return pulumi.get(self, "use_mxedge")

    @use_mxedge.setter
    def use_mxedge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mxedge", value)

    @property
    @pulumi.getter(name="useSiteMxedge")
    def use_site_mxedge(self) -> Optional[pulumi.Input[bool]]:
        """
        To use Site mxedges when this WLAN does not use mxtunnel
        """
        return pulumi.get(self, "use_site_mxedge")

    @use_site_mxedge.setter
    def use_site_mxedge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_site_mxedge", value)


if not MYPY:
    class WlanRadsecServerArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[str]]
        port: NotRequired[pulumi.Input[int]]
elif False:
    WlanRadsecServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanRadsecServerArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class WlanScheduleArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        hours: NotRequired[pulumi.Input['WlanScheduleHoursArgsDict']]
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
elif False:
    WlanScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanScheduleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 hours: Optional[pulumi.Input['WlanScheduleHoursArgs']] = None):
        """
        :param pulumi.Input['WlanScheduleHoursArgs'] hours: hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 
               
               **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if hours is not None:
            pulumi.set(__self__, "hours", hours)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input['WlanScheduleHoursArgs']]:
        """
        hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun). 

        **Note**: If the dow is not defined then it\\u2019\\ s treated as 00:00-23:59.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input['WlanScheduleHoursArgs']]):
        pulumi.set(self, "hours", value)


if not MYPY:
    class WlanScheduleHoursArgsDict(TypedDict):
        fri: NotRequired[pulumi.Input[str]]
        mon: NotRequired[pulumi.Input[str]]
        sat: NotRequired[pulumi.Input[str]]
        sun: NotRequired[pulumi.Input[str]]
        thu: NotRequired[pulumi.Input[str]]
        tue: NotRequired[pulumi.Input[str]]
        wed: NotRequired[pulumi.Input[str]]
elif False:
    WlanScheduleHoursArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WlanScheduleHoursArgs:
    def __init__(__self__, *,
                 fri: Optional[pulumi.Input[str]] = None,
                 mon: Optional[pulumi.Input[str]] = None,
                 sat: Optional[pulumi.Input[str]] = None,
                 sun: Optional[pulumi.Input[str]] = None,
                 thu: Optional[pulumi.Input[str]] = None,
                 tue: Optional[pulumi.Input[str]] = None,
                 wed: Optional[pulumi.Input[str]] = None):
        if fri is not None:
            pulumi.set(__self__, "fri", fri)
        if mon is not None:
            pulumi.set(__self__, "mon", mon)
        if sat is not None:
            pulumi.set(__self__, "sat", sat)
        if sun is not None:
            pulumi.set(__self__, "sun", sun)
        if thu is not None:
            pulumi.set(__self__, "thu", thu)
        if tue is not None:
            pulumi.set(__self__, "tue", tue)
        if wed is not None:
            pulumi.set(__self__, "wed", wed)

    @property
    @pulumi.getter
    def fri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fri")

    @fri.setter
    def fri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fri", value)

    @property
    @pulumi.getter
    def mon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mon")

    @mon.setter
    def mon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mon", value)

    @property
    @pulumi.getter
    def sat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sat")

    @sat.setter
    def sat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sat", value)

    @property
    @pulumi.getter
    def sun(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sun")

    @sun.setter
    def sun(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sun", value)

    @property
    @pulumi.getter
    def thu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "thu")

    @thu.setter
    def thu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thu", value)

    @property
    @pulumi.getter
    def tue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tue")

    @tue.setter
    def tue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tue", value)

    @property
    @pulumi.getter
    def wed(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wed")

    @wed.setter
    def wed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wed", value)


if not MYPY:
    class WxtagSpecArgsDict(TypedDict):
        subnets: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        matched destination subnets and/or IP Addresses
        """
        port_range: NotRequired[pulumi.Input[str]]
        """
        matched destination port, "0" means any
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
elif False:
    WxtagSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WxtagSpecArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 port_range: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: matched destination subnets and/or IP Addresses
        :param pulumi.Input[str] port_range: matched destination port, "0" means any
        :param pulumi.Input[str] protocol: tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        pulumi.set(__self__, "subnets", subnets)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        matched destination subnets and/or IP Addresses
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[pulumi.Input[str]]:
        """
        matched destination port, "0" means any
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        tcp / udp / icmp / gre / any / ":protocol_number", `protocol_number` is between 1-254
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


if not MYPY:
    class BaseLatlngArgsDict(TypedDict):
        lat: pulumi.Input[float]
        lng: pulumi.Input[float]
elif False:
    BaseLatlngArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BaseLatlngArgs:
    def __init__(__self__, *,
                 lat: pulumi.Input[float],
                 lng: pulumi.Input[float]):
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lng", lng)

    @property
    @pulumi.getter
    def lat(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: pulumi.Input[float]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lng(self) -> pulumi.Input[float]:
        return pulumi.get(self, "lng")

    @lng.setter
    def lng(self, value: pulumi.Input[float]):
        pulumi.set(self, "lng", value)


