# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WlanPortalTemplateArgs', 'WlanPortalTemplate']

@pulumi.input_type
class WlanPortalTemplateArgs:
    def __init__(__self__, *,
                 portal_template: pulumi.Input['WlanPortalTemplatePortalTemplateArgs'],
                 site_id: pulumi.Input[str],
                 wlan_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a WlanPortalTemplate resource.
        :param pulumi.Input['WlanPortalTemplatePortalTemplateArgs'] portal_template: portal template wlan settings
        :param pulumi.Input[str] wlan_id: Site WLAN ID
        """
        pulumi.set(__self__, "portal_template", portal_template)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "wlan_id", wlan_id)

    @property
    @pulumi.getter(name="portalTemplate")
    def portal_template(self) -> pulumi.Input['WlanPortalTemplatePortalTemplateArgs']:
        """
        portal template wlan settings
        """
        return pulumi.get(self, "portal_template")

    @portal_template.setter
    def portal_template(self, value: pulumi.Input['WlanPortalTemplatePortalTemplateArgs']):
        pulumi.set(self, "portal_template", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="wlanId")
    def wlan_id(self) -> pulumi.Input[str]:
        """
        Site WLAN ID
        """
        return pulumi.get(self, "wlan_id")

    @wlan_id.setter
    def wlan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "wlan_id", value)


@pulumi.input_type
class _WlanPortalTemplateState:
    def __init__(__self__, *,
                 portal_template: Optional[pulumi.Input['WlanPortalTemplatePortalTemplateArgs']] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 wlan_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WlanPortalTemplate resources.
        :param pulumi.Input['WlanPortalTemplatePortalTemplateArgs'] portal_template: portal template wlan settings
        :param pulumi.Input[str] wlan_id: Site WLAN ID
        """
        if portal_template is not None:
            pulumi.set(__self__, "portal_template", portal_template)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if wlan_id is not None:
            pulumi.set(__self__, "wlan_id", wlan_id)

    @property
    @pulumi.getter(name="portalTemplate")
    def portal_template(self) -> Optional[pulumi.Input['WlanPortalTemplatePortalTemplateArgs']]:
        """
        portal template wlan settings
        """
        return pulumi.get(self, "portal_template")

    @portal_template.setter
    def portal_template(self, value: Optional[pulumi.Input['WlanPortalTemplatePortalTemplateArgs']]):
        pulumi.set(self, "portal_template", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="wlanId")
    def wlan_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site WLAN ID
        """
        return pulumi.get(self, "wlan_id")

    @wlan_id.setter
    def wlan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wlan_id", value)


class WlanPortalTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 portal_template: Optional[pulumi.Input[Union['WlanPortalTemplatePortalTemplateArgs', 'WlanPortalTemplatePortalTemplateArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 wlan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource is used customize the WLAN Guest Portal.The WLAN Portal Template can be used to define:
        * Guest Authentication methods and parameters (access duration, ...)
        * Default values of the text fields and labels on the portal
        * Values of the text fields and labels based on the User Agent (`locales` property)

        **Notes:**
        * There is no feedback from the API, so there is no possibility to validate the changes. The resource states is directly generated based on the resource plan.* There is no option to delete or revert the changes. Deleting the resource will just remove it from the states. Once removed, it is possible to create a new one. It will replace the previous template

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WlanPortalTemplatePortalTemplateArgs', 'WlanPortalTemplatePortalTemplateArgsDict']] portal_template: portal template wlan settings
        :param pulumi.Input[str] wlan_id: Site WLAN ID
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WlanPortalTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource is used customize the WLAN Guest Portal.The WLAN Portal Template can be used to define:
        * Guest Authentication methods and parameters (access duration, ...)
        * Default values of the text fields and labels on the portal
        * Values of the text fields and labels based on the User Agent (`locales` property)

        **Notes:**
        * There is no feedback from the API, so there is no possibility to validate the changes. The resource states is directly generated based on the resource plan.* There is no option to delete or revert the changes. Deleting the resource will just remove it from the states. Once removed, it is possible to create a new one. It will replace the previous template

        :param str resource_name: The name of the resource.
        :param WlanPortalTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WlanPortalTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 portal_template: Optional[pulumi.Input[Union['WlanPortalTemplatePortalTemplateArgs', 'WlanPortalTemplatePortalTemplateArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 wlan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WlanPortalTemplateArgs.__new__(WlanPortalTemplateArgs)

            if portal_template is None and not opts.urn:
                raise TypeError("Missing required property 'portal_template'")
            __props__.__dict__["portal_template"] = portal_template
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            if wlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'wlan_id'")
            __props__.__dict__["wlan_id"] = wlan_id
        super(WlanPortalTemplate, __self__).__init__(
            'junipermist:site/wlanPortalTemplate:WlanPortalTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            portal_template: Optional[pulumi.Input[Union['WlanPortalTemplatePortalTemplateArgs', 'WlanPortalTemplatePortalTemplateArgsDict']]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            wlan_id: Optional[pulumi.Input[str]] = None) -> 'WlanPortalTemplate':
        """
        Get an existing WlanPortalTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WlanPortalTemplatePortalTemplateArgs', 'WlanPortalTemplatePortalTemplateArgsDict']] portal_template: portal template wlan settings
        :param pulumi.Input[str] wlan_id: Site WLAN ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WlanPortalTemplateState.__new__(_WlanPortalTemplateState)

        __props__.__dict__["portal_template"] = portal_template
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["wlan_id"] = wlan_id
        return WlanPortalTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="portalTemplate")
    def portal_template(self) -> pulumi.Output['outputs.WlanPortalTemplatePortalTemplate']:
        """
        portal template wlan settings
        """
        return pulumi.get(self, "portal_template")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="wlanId")
    def wlan_id(self) -> pulumi.Output[str]:
        """
        Site WLAN ID
        """
        return pulumi.get(self, "wlan_id")

