# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SettingArgs', 'Setting']

@pulumi.input_type
class SettingArgs:
    def __init__(__self__, *,
                 site_id: pulumi.Input[str],
                 analytic: Optional[pulumi.Input['SettingAnalyticArgs']] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 auto_upgrade: Optional[pulumi.Input['SettingAutoUpgradeArgs']] = None,
                 ble_config: Optional[pulumi.Input['SettingBleConfigArgs']] = None,
                 config_auto_revert: Optional[pulumi.Input[bool]] = None,
                 config_push_policy: Optional[pulumi.Input['SettingConfigPushPolicyArgs']] = None,
                 critical_url_monitoring: Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disabled_system_defined_port_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 engagement: Optional[pulumi.Input['SettingEngagementArgs']] = None,
                 gateway_mgmt: Optional[pulumi.Input['SettingGatewayMgmtArgs']] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 led: Optional[pulumi.Input['SettingLedArgs']] = None,
                 occupancy: Optional[pulumi.Input['SettingOccupancyArgs']] = None,
                 persist_config_on_device: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['SettingProxyArgs']] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 report_gatt: Optional[pulumi.Input[bool]] = None,
                 rogue: Optional[pulumi.Input['SettingRogueArgs']] = None,
                 rtsa: Optional[pulumi.Input['SettingRtsaArgs']] = None,
                 simple_alert: Optional[pulumi.Input['SettingSimpleAlertArgs']] = None,
                 skyatp: Optional[pulumi.Input['SettingSkyatpArgs']] = None,
                 srx_app: Optional[pulumi.Input['SettingSrxAppArgs']] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssr: Optional[pulumi.Input['SettingSsrArgs']] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input['SettingSyntheticTestArgs']] = None,
                 track_anonymous_devices: Optional[pulumi.Input[bool]] = None,
                 uplink_port_config: Optional[pulumi.Input['SettingUplinkPortConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vna: Optional[pulumi.Input['SettingVnaArgs']] = None,
                 vs_instance: Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]] = None,
                 wan_vna: Optional[pulumi.Input['SettingWanVnaArgs']] = None,
                 wids: Optional[pulumi.Input['SettingWidsArgs']] = None,
                 wifi: Optional[pulumi.Input['SettingWifiArgs']] = None,
                 wired_vna: Optional[pulumi.Input['SettingWiredVnaArgs']] = None,
                 zone_occupancy_alert: Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']] = None):
        """
        The set of arguments for constructing a Setting resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingAutoUpgradeArgs'] auto_upgrade: Auto Upgrade Settings
        :param pulumi.Input['SettingBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[bool] config_auto_revert: whether to enable ap auto config revert
        :param pulumi.Input['SettingConfigPushPolicyArgs'] config_push_policy: mist also uses some heuristic rules to prevent destructive configs from being pushed
        :param pulumi.Input['SettingCriticalUrlMonitoringArgs'] critical_url_monitoring: you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        :param pulumi.Input[int] device_updown_threshold: by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
               is desired, use the following
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_system_defined_port_usages: if some system-default port usages are not desired - namely, ap / iot / uplink
        :param pulumi.Input['SettingEngagementArgs'] engagement: **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
               multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
               (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
               bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        :param pulumi.Input['SettingGatewayMgmtArgs'] gateway_mgmt: Gateway Site settings
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingLedArgs'] led: LED AP settings
        :param pulumi.Input['SettingOccupancyArgs'] occupancy: Occupancy Analytics settings
        :param pulumi.Input[bool] persist_config_on_device: whether to store the config on AP
        :param pulumi.Input['SettingProxyArgs'] proxy: Proxy Configuration to talk to Mist
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[bool] report_gatt: whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
               serial number, battery %, temperature, humidity)
        :param pulumi.Input['SettingRogueArgs'] rogue: Rogue site settings
        :param pulumi.Input['SettingRtsaArgs'] rtsa: managed mobility
        :param pulumi.Input['SettingSimpleAlertArgs'] simple_alert: Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
               window, there are more than Y distinct client encountring over X failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
               Org:Setting)
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[bool] track_anonymous_devices: whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]] vs_instance: optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        :param pulumi.Input['SettingWidsArgs'] wids: WIDS site settings
        :param pulumi.Input['SettingWifiArgs'] wifi: Wi-Fi site settings
        :param pulumi.Input['SettingZoneOccupancyAlertArgs'] zone_occupancy_alert: Zone Occupancy alert site settings
        """
        pulumi.set(__self__, "site_id", site_id)
        if analytic is not None:
            pulumi.set(__self__, "analytic", analytic)
        if ap_updown_threshold is not None:
            pulumi.set(__self__, "ap_updown_threshold", ap_updown_threshold)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if config_auto_revert is not None:
            pulumi.set(__self__, "config_auto_revert", config_auto_revert)
        if config_push_policy is not None:
            pulumi.set(__self__, "config_push_policy", config_push_policy)
        if critical_url_monitoring is not None:
            pulumi.set(__self__, "critical_url_monitoring", critical_url_monitoring)
        if device_updown_threshold is not None:
            pulumi.set(__self__, "device_updown_threshold", device_updown_threshold)
        if disabled_system_defined_port_usages is not None:
            pulumi.set(__self__, "disabled_system_defined_port_usages", disabled_system_defined_port_usages)
        if engagement is not None:
            pulumi.set(__self__, "engagement", engagement)
        if gateway_mgmt is not None:
            pulumi.set(__self__, "gateway_mgmt", gateway_mgmt)
        if gateway_updown_threshold is not None:
            pulumi.set(__self__, "gateway_updown_threshold", gateway_updown_threshold)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if occupancy is not None:
            pulumi.set(__self__, "occupancy", occupancy)
        if persist_config_on_device is not None:
            pulumi.set(__self__, "persist_config_on_device", persist_config_on_device)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if remove_existing_configs is not None:
            pulumi.set(__self__, "remove_existing_configs", remove_existing_configs)
        if report_gatt is not None:
            pulumi.set(__self__, "report_gatt", report_gatt)
        if rogue is not None:
            pulumi.set(__self__, "rogue", rogue)
        if rtsa is not None:
            pulumi.set(__self__, "rtsa", rtsa)
        if simple_alert is not None:
            pulumi.set(__self__, "simple_alert", simple_alert)
        if skyatp is not None:
            pulumi.set(__self__, "skyatp", skyatp)
        if srx_app is not None:
            pulumi.set(__self__, "srx_app", srx_app)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if ssr is not None:
            pulumi.set(__self__, "ssr", ssr)
        if switch_updown_threshold is not None:
            pulumi.set(__self__, "switch_updown_threshold", switch_updown_threshold)
        if synthetic_test is not None:
            pulumi.set(__self__, "synthetic_test", synthetic_test)
        if track_anonymous_devices is not None:
            pulumi.set(__self__, "track_anonymous_devices", track_anonymous_devices)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if vna is not None:
            pulumi.set(__self__, "vna", vna)
        if vs_instance is not None:
            pulumi.set(__self__, "vs_instance", vs_instance)
        if wan_vna is not None:
            pulumi.set(__self__, "wan_vna", wan_vna)
        if wids is not None:
            pulumi.set(__self__, "wids", wids)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)
        if wired_vna is not None:
            pulumi.set(__self__, "wired_vna", wired_vna)
        if zone_occupancy_alert is not None:
            pulumi.set(__self__, "zone_occupancy_alert", zone_occupancy_alert)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def analytic(self) -> Optional[pulumi.Input['SettingAnalyticArgs']]:
        return pulumi.get(self, "analytic")

    @analytic.setter
    def analytic(self, value: Optional[pulumi.Input['SettingAnalyticArgs']]):
        pulumi.set(self, "analytic", value)

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @ap_updown_threshold.setter
    def ap_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_updown_threshold", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input['SettingAutoUpgradeArgs']]:
        """
        Auto Upgrade Settings
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input['SettingAutoUpgradeArgs']]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['SettingBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['SettingBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @property
    @pulumi.getter(name="configAutoRevert")
    def config_auto_revert(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable ap auto config revert
        """
        return pulumi.get(self, "config_auto_revert")

    @config_auto_revert.setter
    def config_auto_revert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_auto_revert", value)

    @property
    @pulumi.getter(name="configPushPolicy")
    def config_push_policy(self) -> Optional[pulumi.Input['SettingConfigPushPolicyArgs']]:
        """
        mist also uses some heuristic rules to prevent destructive configs from being pushed
        """
        return pulumi.get(self, "config_push_policy")

    @config_push_policy.setter
    def config_push_policy(self, value: Optional[pulumi.Input['SettingConfigPushPolicyArgs']]):
        pulumi.set(self, "config_push_policy", value)

    @property
    @pulumi.getter(name="criticalUrlMonitoring")
    def critical_url_monitoring(self) -> Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']]:
        """
        you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        """
        return pulumi.get(self, "critical_url_monitoring")

    @critical_url_monitoring.setter
    def critical_url_monitoring(self, value: Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']]):
        pulumi.set(self, "critical_url_monitoring", value)

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
        is desired, use the following
        """
        return pulumi.get(self, "device_updown_threshold")

    @device_updown_threshold.setter
    def device_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_updown_threshold", value)

    @property
    @pulumi.getter(name="disabledSystemDefinedPortUsages")
    def disabled_system_defined_port_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if some system-default port usages are not desired - namely, ap / iot / uplink
        """
        return pulumi.get(self, "disabled_system_defined_port_usages")

    @disabled_system_defined_port_usages.setter
    def disabled_system_defined_port_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_system_defined_port_usages", value)

    @property
    @pulumi.getter
    def engagement(self) -> Optional[pulumi.Input['SettingEngagementArgs']]:
        """
        **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
        multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
        (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
        bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        """
        return pulumi.get(self, "engagement")

    @engagement.setter
    def engagement(self, value: Optional[pulumi.Input['SettingEngagementArgs']]):
        pulumi.set(self, "engagement", value)

    @property
    @pulumi.getter(name="gatewayMgmt")
    def gateway_mgmt(self) -> Optional[pulumi.Input['SettingGatewayMgmtArgs']]:
        """
        Gateway Site settings
        """
        return pulumi.get(self, "gateway_mgmt")

    @gateway_mgmt.setter
    def gateway_mgmt(self, value: Optional[pulumi.Input['SettingGatewayMgmtArgs']]):
        pulumi.set(self, "gateway_mgmt", value)

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @gateway_updown_threshold.setter
    def gateway_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gateway_updown_threshold", value)

    @property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['SettingLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['SettingLedArgs']]):
        pulumi.set(self, "led", value)

    @property
    @pulumi.getter
    def occupancy(self) -> Optional[pulumi.Input['SettingOccupancyArgs']]:
        """
        Occupancy Analytics settings
        """
        return pulumi.get(self, "occupancy")

    @occupancy.setter
    def occupancy(self, value: Optional[pulumi.Input['SettingOccupancyArgs']]):
        pulumi.set(self, "occupancy", value)

    @property
    @pulumi.getter(name="persistConfigOnDevice")
    def persist_config_on_device(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to store the config on AP
        """
        return pulumi.get(self, "persist_config_on_device")

    @persist_config_on_device.setter
    def persist_config_on_device(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_config_on_device", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['SettingProxyArgs']]:
        """
        Proxy Configuration to talk to Mist
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['SettingProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @remove_existing_configs.setter
    def remove_existing_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_existing_configs", value)

    @property
    @pulumi.getter(name="reportGatt")
    def report_gatt(self) -> Optional[pulumi.Input[bool]]:
        """
        whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
        serial number, battery %, temperature, humidity)
        """
        return pulumi.get(self, "report_gatt")

    @report_gatt.setter
    def report_gatt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_gatt", value)

    @property
    @pulumi.getter
    def rogue(self) -> Optional[pulumi.Input['SettingRogueArgs']]:
        """
        Rogue site settings
        """
        return pulumi.get(self, "rogue")

    @rogue.setter
    def rogue(self, value: Optional[pulumi.Input['SettingRogueArgs']]):
        pulumi.set(self, "rogue", value)

    @property
    @pulumi.getter
    def rtsa(self) -> Optional[pulumi.Input['SettingRtsaArgs']]:
        """
        managed mobility
        """
        return pulumi.get(self, "rtsa")

    @rtsa.setter
    def rtsa(self, value: Optional[pulumi.Input['SettingRtsaArgs']]):
        pulumi.set(self, "rtsa", value)

    @property
    @pulumi.getter(name="simpleAlert")
    def simple_alert(self) -> Optional[pulumi.Input['SettingSimpleAlertArgs']]:
        """
        Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
        window, there are more than Y distinct client encountring over X failures
        """
        return pulumi.get(self, "simple_alert")

    @simple_alert.setter
    def simple_alert(self, value: Optional[pulumi.Input['SettingSimpleAlertArgs']]):
        pulumi.set(self, "simple_alert", value)

    @property
    @pulumi.getter
    def skyatp(self) -> Optional[pulumi.Input['SettingSkyatpArgs']]:
        return pulumi.get(self, "skyatp")

    @skyatp.setter
    def skyatp(self, value: Optional[pulumi.Input['SettingSkyatpArgs']]):
        pulumi.set(self, "skyatp", value)

    @property
    @pulumi.getter(name="srxApp")
    def srx_app(self) -> Optional[pulumi.Input['SettingSrxAppArgs']]:
        return pulumi.get(self, "srx_app")

    @srx_app.setter
    def srx_app(self, value: Optional[pulumi.Input['SettingSrxAppArgs']]):
        pulumi.set(self, "srx_app", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
        Org:Setting)
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def ssr(self) -> Optional[pulumi.Input['SettingSsrArgs']]:
        return pulumi.get(self, "ssr")

    @ssr.setter
    def ssr(self, value: Optional[pulumi.Input['SettingSsrArgs']]):
        pulumi.set(self, "ssr", value)

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @switch_updown_threshold.setter
    def switch_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_updown_threshold", value)

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> Optional[pulumi.Input['SettingSyntheticTestArgs']]:
        return pulumi.get(self, "synthetic_test")

    @synthetic_test.setter
    def synthetic_test(self, value: Optional[pulumi.Input['SettingSyntheticTestArgs']]):
        pulumi.set(self, "synthetic_test", value)

    @property
    @pulumi.getter(name="trackAnonymousDevices")
    def track_anonymous_devices(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        """
        return pulumi.get(self, "track_anonymous_devices")

    @track_anonymous_devices.setter
    def track_anonymous_devices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "track_anonymous_devices", value)

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['SettingUplinkPortConfigArgs']]:
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['SettingUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter
    def vna(self) -> Optional[pulumi.Input['SettingVnaArgs']]:
        return pulumi.get(self, "vna")

    @vna.setter
    def vna(self, value: Optional[pulumi.Input['SettingVnaArgs']]):
        pulumi.set(self, "vna", value)

    @property
    @pulumi.getter(name="vsInstance")
    def vs_instance(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]]:
        """
        optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        """
        return pulumi.get(self, "vs_instance")

    @vs_instance.setter
    def vs_instance(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]]):
        pulumi.set(self, "vs_instance", value)

    @property
    @pulumi.getter(name="wanVna")
    def wan_vna(self) -> Optional[pulumi.Input['SettingWanVnaArgs']]:
        return pulumi.get(self, "wan_vna")

    @wan_vna.setter
    def wan_vna(self, value: Optional[pulumi.Input['SettingWanVnaArgs']]):
        pulumi.set(self, "wan_vna", value)

    @property
    @pulumi.getter
    def wids(self) -> Optional[pulumi.Input['SettingWidsArgs']]:
        """
        WIDS site settings
        """
        return pulumi.get(self, "wids")

    @wids.setter
    def wids(self, value: Optional[pulumi.Input['SettingWidsArgs']]):
        pulumi.set(self, "wids", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['SettingWifiArgs']]:
        """
        Wi-Fi site settings
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['SettingWifiArgs']]):
        pulumi.set(self, "wifi", value)

    @property
    @pulumi.getter(name="wiredVna")
    def wired_vna(self) -> Optional[pulumi.Input['SettingWiredVnaArgs']]:
        return pulumi.get(self, "wired_vna")

    @wired_vna.setter
    def wired_vna(self, value: Optional[pulumi.Input['SettingWiredVnaArgs']]):
        pulumi.set(self, "wired_vna", value)

    @property
    @pulumi.getter(name="zoneOccupancyAlert")
    def zone_occupancy_alert(self) -> Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']]:
        """
        Zone Occupancy alert site settings
        """
        return pulumi.get(self, "zone_occupancy_alert")

    @zone_occupancy_alert.setter
    def zone_occupancy_alert(self, value: Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']]):
        pulumi.set(self, "zone_occupancy_alert", value)


@pulumi.input_type
class _SettingState:
    def __init__(__self__, *,
                 analytic: Optional[pulumi.Input['SettingAnalyticArgs']] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 auto_upgrade: Optional[pulumi.Input['SettingAutoUpgradeArgs']] = None,
                 blacklist_url: Optional[pulumi.Input[str]] = None,
                 ble_config: Optional[pulumi.Input['SettingBleConfigArgs']] = None,
                 config_auto_revert: Optional[pulumi.Input[bool]] = None,
                 config_push_policy: Optional[pulumi.Input['SettingConfigPushPolicyArgs']] = None,
                 critical_url_monitoring: Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disabled_system_defined_port_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 engagement: Optional[pulumi.Input['SettingEngagementArgs']] = None,
                 gateway_mgmt: Optional[pulumi.Input['SettingGatewayMgmtArgs']] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 led: Optional[pulumi.Input['SettingLedArgs']] = None,
                 occupancy: Optional[pulumi.Input['SettingOccupancyArgs']] = None,
                 persist_config_on_device: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input['SettingProxyArgs']] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 report_gatt: Optional[pulumi.Input[bool]] = None,
                 rogue: Optional[pulumi.Input['SettingRogueArgs']] = None,
                 rtsa: Optional[pulumi.Input['SettingRtsaArgs']] = None,
                 simple_alert: Optional[pulumi.Input['SettingSimpleAlertArgs']] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 skyatp: Optional[pulumi.Input['SettingSkyatpArgs']] = None,
                 srx_app: Optional[pulumi.Input['SettingSrxAppArgs']] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssr: Optional[pulumi.Input['SettingSsrArgs']] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input['SettingSyntheticTestArgs']] = None,
                 track_anonymous_devices: Optional[pulumi.Input[bool]] = None,
                 uplink_port_config: Optional[pulumi.Input['SettingUplinkPortConfigArgs']] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vna: Optional[pulumi.Input['SettingVnaArgs']] = None,
                 vs_instance: Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]] = None,
                 wan_vna: Optional[pulumi.Input['SettingWanVnaArgs']] = None,
                 watched_station_url: Optional[pulumi.Input[str]] = None,
                 whitelist_url: Optional[pulumi.Input[str]] = None,
                 wids: Optional[pulumi.Input['SettingWidsArgs']] = None,
                 wifi: Optional[pulumi.Input['SettingWifiArgs']] = None,
                 wired_vna: Optional[pulumi.Input['SettingWiredVnaArgs']] = None,
                 zone_occupancy_alert: Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']] = None):
        """
        Input properties used for looking up and filtering Setting resources.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingAutoUpgradeArgs'] auto_upgrade: Auto Upgrade Settings
        :param pulumi.Input['SettingBleConfigArgs'] ble_config: BLE AP settings
        :param pulumi.Input[bool] config_auto_revert: whether to enable ap auto config revert
        :param pulumi.Input['SettingConfigPushPolicyArgs'] config_push_policy: mist also uses some heuristic rules to prevent destructive configs from being pushed
        :param pulumi.Input['SettingCriticalUrlMonitoringArgs'] critical_url_monitoring: you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        :param pulumi.Input[int] device_updown_threshold: by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
               is desired, use the following
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_system_defined_port_usages: if some system-default port usages are not desired - namely, ap / iot / uplink
        :param pulumi.Input['SettingEngagementArgs'] engagement: **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
               multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
               (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
               bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        :param pulumi.Input['SettingGatewayMgmtArgs'] gateway_mgmt: Gateway Site settings
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input['SettingLedArgs'] led: LED AP settings
        :param pulumi.Input['SettingOccupancyArgs'] occupancy: Occupancy Analytics settings
        :param pulumi.Input[bool] persist_config_on_device: whether to store the config on AP
        :param pulumi.Input['SettingProxyArgs'] proxy: Proxy Configuration to talk to Mist
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[bool] report_gatt: whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
               serial number, battery %, temperature, humidity)
        :param pulumi.Input['SettingRogueArgs'] rogue: Rogue site settings
        :param pulumi.Input['SettingRtsaArgs'] rtsa: managed mobility
        :param pulumi.Input['SettingSimpleAlertArgs'] simple_alert: Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
               window, there are more than Y distinct client encountring over X failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
               Org:Setting)
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[bool] track_anonymous_devices: whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]] vs_instance: optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        :param pulumi.Input['SettingWidsArgs'] wids: WIDS site settings
        :param pulumi.Input['SettingWifiArgs'] wifi: Wi-Fi site settings
        :param pulumi.Input['SettingZoneOccupancyAlertArgs'] zone_occupancy_alert: Zone Occupancy alert site settings
        """
        if analytic is not None:
            pulumi.set(__self__, "analytic", analytic)
        if ap_updown_threshold is not None:
            pulumi.set(__self__, "ap_updown_threshold", ap_updown_threshold)
        if auto_upgrade is not None:
            pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if blacklist_url is not None:
            pulumi.set(__self__, "blacklist_url", blacklist_url)
        if ble_config is not None:
            pulumi.set(__self__, "ble_config", ble_config)
        if config_auto_revert is not None:
            pulumi.set(__self__, "config_auto_revert", config_auto_revert)
        if config_push_policy is not None:
            pulumi.set(__self__, "config_push_policy", config_push_policy)
        if critical_url_monitoring is not None:
            pulumi.set(__self__, "critical_url_monitoring", critical_url_monitoring)
        if device_updown_threshold is not None:
            pulumi.set(__self__, "device_updown_threshold", device_updown_threshold)
        if disabled_system_defined_port_usages is not None:
            pulumi.set(__self__, "disabled_system_defined_port_usages", disabled_system_defined_port_usages)
        if engagement is not None:
            pulumi.set(__self__, "engagement", engagement)
        if gateway_mgmt is not None:
            pulumi.set(__self__, "gateway_mgmt", gateway_mgmt)
        if gateway_updown_threshold is not None:
            pulumi.set(__self__, "gateway_updown_threshold", gateway_updown_threshold)
        if led is not None:
            pulumi.set(__self__, "led", led)
        if occupancy is not None:
            pulumi.set(__self__, "occupancy", occupancy)
        if persist_config_on_device is not None:
            pulumi.set(__self__, "persist_config_on_device", persist_config_on_device)
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if remove_existing_configs is not None:
            pulumi.set(__self__, "remove_existing_configs", remove_existing_configs)
        if report_gatt is not None:
            pulumi.set(__self__, "report_gatt", report_gatt)
        if rogue is not None:
            pulumi.set(__self__, "rogue", rogue)
        if rtsa is not None:
            pulumi.set(__self__, "rtsa", rtsa)
        if simple_alert is not None:
            pulumi.set(__self__, "simple_alert", simple_alert)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if skyatp is not None:
            pulumi.set(__self__, "skyatp", skyatp)
        if srx_app is not None:
            pulumi.set(__self__, "srx_app", srx_app)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if ssr is not None:
            pulumi.set(__self__, "ssr", ssr)
        if switch_updown_threshold is not None:
            pulumi.set(__self__, "switch_updown_threshold", switch_updown_threshold)
        if synthetic_test is not None:
            pulumi.set(__self__, "synthetic_test", synthetic_test)
        if track_anonymous_devices is not None:
            pulumi.set(__self__, "track_anonymous_devices", track_anonymous_devices)
        if uplink_port_config is not None:
            pulumi.set(__self__, "uplink_port_config", uplink_port_config)
        if vars is not None:
            pulumi.set(__self__, "vars", vars)
        if vna is not None:
            pulumi.set(__self__, "vna", vna)
        if vs_instance is not None:
            pulumi.set(__self__, "vs_instance", vs_instance)
        if wan_vna is not None:
            pulumi.set(__self__, "wan_vna", wan_vna)
        if watched_station_url is not None:
            pulumi.set(__self__, "watched_station_url", watched_station_url)
        if whitelist_url is not None:
            pulumi.set(__self__, "whitelist_url", whitelist_url)
        if wids is not None:
            pulumi.set(__self__, "wids", wids)
        if wifi is not None:
            pulumi.set(__self__, "wifi", wifi)
        if wired_vna is not None:
            pulumi.set(__self__, "wired_vna", wired_vna)
        if zone_occupancy_alert is not None:
            pulumi.set(__self__, "zone_occupancy_alert", zone_occupancy_alert)

    @property
    @pulumi.getter
    def analytic(self) -> Optional[pulumi.Input['SettingAnalyticArgs']]:
        return pulumi.get(self, "analytic")

    @analytic.setter
    def analytic(self, value: Optional[pulumi.Input['SettingAnalyticArgs']]):
        pulumi.set(self, "analytic", value)

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @ap_updown_threshold.setter
    def ap_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_updown_threshold", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input['SettingAutoUpgradeArgs']]:
        """
        Auto Upgrade Settings
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input['SettingAutoUpgradeArgs']]):
        pulumi.set(self, "auto_upgrade", value)

    @property
    @pulumi.getter(name="blacklistUrl")
    def blacklist_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blacklist_url")

    @blacklist_url.setter
    def blacklist_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blacklist_url", value)

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> Optional[pulumi.Input['SettingBleConfigArgs']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @ble_config.setter
    def ble_config(self, value: Optional[pulumi.Input['SettingBleConfigArgs']]):
        pulumi.set(self, "ble_config", value)

    @property
    @pulumi.getter(name="configAutoRevert")
    def config_auto_revert(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable ap auto config revert
        """
        return pulumi.get(self, "config_auto_revert")

    @config_auto_revert.setter
    def config_auto_revert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_auto_revert", value)

    @property
    @pulumi.getter(name="configPushPolicy")
    def config_push_policy(self) -> Optional[pulumi.Input['SettingConfigPushPolicyArgs']]:
        """
        mist also uses some heuristic rules to prevent destructive configs from being pushed
        """
        return pulumi.get(self, "config_push_policy")

    @config_push_policy.setter
    def config_push_policy(self, value: Optional[pulumi.Input['SettingConfigPushPolicyArgs']]):
        pulumi.set(self, "config_push_policy", value)

    @property
    @pulumi.getter(name="criticalUrlMonitoring")
    def critical_url_monitoring(self) -> Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']]:
        """
        you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        """
        return pulumi.get(self, "critical_url_monitoring")

    @critical_url_monitoring.setter
    def critical_url_monitoring(self, value: Optional[pulumi.Input['SettingCriticalUrlMonitoringArgs']]):
        pulumi.set(self, "critical_url_monitoring", value)

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
        is desired, use the following
        """
        return pulumi.get(self, "device_updown_threshold")

    @device_updown_threshold.setter
    def device_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_updown_threshold", value)

    @property
    @pulumi.getter(name="disabledSystemDefinedPortUsages")
    def disabled_system_defined_port_usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        if some system-default port usages are not desired - namely, ap / iot / uplink
        """
        return pulumi.get(self, "disabled_system_defined_port_usages")

    @disabled_system_defined_port_usages.setter
    def disabled_system_defined_port_usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_system_defined_port_usages", value)

    @property
    @pulumi.getter
    def engagement(self) -> Optional[pulumi.Input['SettingEngagementArgs']]:
        """
        **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
        multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
        (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
        bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        """
        return pulumi.get(self, "engagement")

    @engagement.setter
    def engagement(self, value: Optional[pulumi.Input['SettingEngagementArgs']]):
        pulumi.set(self, "engagement", value)

    @property
    @pulumi.getter(name="gatewayMgmt")
    def gateway_mgmt(self) -> Optional[pulumi.Input['SettingGatewayMgmtArgs']]:
        """
        Gateway Site settings
        """
        return pulumi.get(self, "gateway_mgmt")

    @gateway_mgmt.setter
    def gateway_mgmt(self, value: Optional[pulumi.Input['SettingGatewayMgmtArgs']]):
        pulumi.set(self, "gateway_mgmt", value)

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @gateway_updown_threshold.setter
    def gateway_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gateway_updown_threshold", value)

    @property
    @pulumi.getter
    def led(self) -> Optional[pulumi.Input['SettingLedArgs']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @led.setter
    def led(self, value: Optional[pulumi.Input['SettingLedArgs']]):
        pulumi.set(self, "led", value)

    @property
    @pulumi.getter
    def occupancy(self) -> Optional[pulumi.Input['SettingOccupancyArgs']]:
        """
        Occupancy Analytics settings
        """
        return pulumi.get(self, "occupancy")

    @occupancy.setter
    def occupancy(self, value: Optional[pulumi.Input['SettingOccupancyArgs']]):
        pulumi.set(self, "occupancy", value)

    @property
    @pulumi.getter(name="persistConfigOnDevice")
    def persist_config_on_device(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to store the config on AP
        """
        return pulumi.get(self, "persist_config_on_device")

    @persist_config_on_device.setter
    def persist_config_on_device(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_config_on_device", value)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input['SettingProxyArgs']]:
        """
        Proxy Configuration to talk to Mist
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input['SettingProxyArgs']]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @remove_existing_configs.setter
    def remove_existing_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_existing_configs", value)

    @property
    @pulumi.getter(name="reportGatt")
    def report_gatt(self) -> Optional[pulumi.Input[bool]]:
        """
        whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
        serial number, battery %, temperature, humidity)
        """
        return pulumi.get(self, "report_gatt")

    @report_gatt.setter
    def report_gatt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_gatt", value)

    @property
    @pulumi.getter
    def rogue(self) -> Optional[pulumi.Input['SettingRogueArgs']]:
        """
        Rogue site settings
        """
        return pulumi.get(self, "rogue")

    @rogue.setter
    def rogue(self, value: Optional[pulumi.Input['SettingRogueArgs']]):
        pulumi.set(self, "rogue", value)

    @property
    @pulumi.getter
    def rtsa(self) -> Optional[pulumi.Input['SettingRtsaArgs']]:
        """
        managed mobility
        """
        return pulumi.get(self, "rtsa")

    @rtsa.setter
    def rtsa(self, value: Optional[pulumi.Input['SettingRtsaArgs']]):
        pulumi.set(self, "rtsa", value)

    @property
    @pulumi.getter(name="simpleAlert")
    def simple_alert(self) -> Optional[pulumi.Input['SettingSimpleAlertArgs']]:
        """
        Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
        window, there are more than Y distinct client encountring over X failures
        """
        return pulumi.get(self, "simple_alert")

    @simple_alert.setter
    def simple_alert(self, value: Optional[pulumi.Input['SettingSimpleAlertArgs']]):
        pulumi.set(self, "simple_alert", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def skyatp(self) -> Optional[pulumi.Input['SettingSkyatpArgs']]:
        return pulumi.get(self, "skyatp")

    @skyatp.setter
    def skyatp(self, value: Optional[pulumi.Input['SettingSkyatpArgs']]):
        pulumi.set(self, "skyatp", value)

    @property
    @pulumi.getter(name="srxApp")
    def srx_app(self) -> Optional[pulumi.Input['SettingSrxAppArgs']]:
        return pulumi.get(self, "srx_app")

    @srx_app.setter
    def srx_app(self, value: Optional[pulumi.Input['SettingSrxAppArgs']]):
        pulumi.set(self, "srx_app", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
        Org:Setting)
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def ssr(self) -> Optional[pulumi.Input['SettingSsrArgs']]:
        return pulumi.get(self, "ssr")

    @ssr.setter
    def ssr(self, value: Optional[pulumi.Input['SettingSsrArgs']]):
        pulumi.set(self, "ssr", value)

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @switch_updown_threshold.setter
    def switch_updown_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_updown_threshold", value)

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> Optional[pulumi.Input['SettingSyntheticTestArgs']]:
        return pulumi.get(self, "synthetic_test")

    @synthetic_test.setter
    def synthetic_test(self, value: Optional[pulumi.Input['SettingSyntheticTestArgs']]):
        pulumi.set(self, "synthetic_test", value)

    @property
    @pulumi.getter(name="trackAnonymousDevices")
    def track_anonymous_devices(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        """
        return pulumi.get(self, "track_anonymous_devices")

    @track_anonymous_devices.setter
    def track_anonymous_devices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "track_anonymous_devices", value)

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> Optional[pulumi.Input['SettingUplinkPortConfigArgs']]:
        return pulumi.get(self, "uplink_port_config")

    @uplink_port_config.setter
    def uplink_port_config(self, value: Optional[pulumi.Input['SettingUplinkPortConfigArgs']]):
        pulumi.set(self, "uplink_port_config", value)

    @property
    @pulumi.getter
    def vars(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @vars.setter
    def vars(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "vars", value)

    @property
    @pulumi.getter
    def vna(self) -> Optional[pulumi.Input['SettingVnaArgs']]:
        return pulumi.get(self, "vna")

    @vna.setter
    def vna(self, value: Optional[pulumi.Input['SettingVnaArgs']]):
        pulumi.set(self, "vna", value)

    @property
    @pulumi.getter(name="vsInstance")
    def vs_instance(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]]:
        """
        optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        """
        return pulumi.get(self, "vs_instance")

    @vs_instance.setter
    def vs_instance(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SettingVsInstanceArgs']]]]):
        pulumi.set(self, "vs_instance", value)

    @property
    @pulumi.getter(name="wanVna")
    def wan_vna(self) -> Optional[pulumi.Input['SettingWanVnaArgs']]:
        return pulumi.get(self, "wan_vna")

    @wan_vna.setter
    def wan_vna(self, value: Optional[pulumi.Input['SettingWanVnaArgs']]):
        pulumi.set(self, "wan_vna", value)

    @property
    @pulumi.getter(name="watchedStationUrl")
    def watched_station_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "watched_station_url")

    @watched_station_url.setter
    def watched_station_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "watched_station_url", value)

    @property
    @pulumi.getter(name="whitelistUrl")
    def whitelist_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "whitelist_url")

    @whitelist_url.setter
    def whitelist_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist_url", value)

    @property
    @pulumi.getter
    def wids(self) -> Optional[pulumi.Input['SettingWidsArgs']]:
        """
        WIDS site settings
        """
        return pulumi.get(self, "wids")

    @wids.setter
    def wids(self, value: Optional[pulumi.Input['SettingWidsArgs']]):
        pulumi.set(self, "wids", value)

    @property
    @pulumi.getter
    def wifi(self) -> Optional[pulumi.Input['SettingWifiArgs']]:
        """
        Wi-Fi site settings
        """
        return pulumi.get(self, "wifi")

    @wifi.setter
    def wifi(self, value: Optional[pulumi.Input['SettingWifiArgs']]):
        pulumi.set(self, "wifi", value)

    @property
    @pulumi.getter(name="wiredVna")
    def wired_vna(self) -> Optional[pulumi.Input['SettingWiredVnaArgs']]:
        return pulumi.get(self, "wired_vna")

    @wired_vna.setter
    def wired_vna(self, value: Optional[pulumi.Input['SettingWiredVnaArgs']]):
        pulumi.set(self, "wired_vna", value)

    @property
    @pulumi.getter(name="zoneOccupancyAlert")
    def zone_occupancy_alert(self) -> Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']]:
        """
        Zone Occupancy alert site settings
        """
        return pulumi.get(self, "zone_occupancy_alert")

    @zone_occupancy_alert.setter
    def zone_occupancy_alert(self, value: Optional[pulumi.Input['SettingZoneOccupancyAlertArgs']]):
        pulumi.set(self, "zone_occupancy_alert", value)


class Setting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytic: Optional[pulumi.Input[Union['SettingAnalyticArgs', 'SettingAnalyticArgsDict']]] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 auto_upgrade: Optional[pulumi.Input[Union['SettingAutoUpgradeArgs', 'SettingAutoUpgradeArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['SettingBleConfigArgs', 'SettingBleConfigArgsDict']]] = None,
                 config_auto_revert: Optional[pulumi.Input[bool]] = None,
                 config_push_policy: Optional[pulumi.Input[Union['SettingConfigPushPolicyArgs', 'SettingConfigPushPolicyArgsDict']]] = None,
                 critical_url_monitoring: Optional[pulumi.Input[Union['SettingCriticalUrlMonitoringArgs', 'SettingCriticalUrlMonitoringArgsDict']]] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disabled_system_defined_port_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 engagement: Optional[pulumi.Input[Union['SettingEngagementArgs', 'SettingEngagementArgsDict']]] = None,
                 gateway_mgmt: Optional[pulumi.Input[Union['SettingGatewayMgmtArgs', 'SettingGatewayMgmtArgsDict']]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 led: Optional[pulumi.Input[Union['SettingLedArgs', 'SettingLedArgsDict']]] = None,
                 occupancy: Optional[pulumi.Input[Union['SettingOccupancyArgs', 'SettingOccupancyArgsDict']]] = None,
                 persist_config_on_device: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[Union['SettingProxyArgs', 'SettingProxyArgsDict']]] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 report_gatt: Optional[pulumi.Input[bool]] = None,
                 rogue: Optional[pulumi.Input[Union['SettingRogueArgs', 'SettingRogueArgsDict']]] = None,
                 rtsa: Optional[pulumi.Input[Union['SettingRtsaArgs', 'SettingRtsaArgsDict']]] = None,
                 simple_alert: Optional[pulumi.Input[Union['SettingSimpleAlertArgs', 'SettingSimpleAlertArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 skyatp: Optional[pulumi.Input[Union['SettingSkyatpArgs', 'SettingSkyatpArgsDict']]] = None,
                 srx_app: Optional[pulumi.Input[Union['SettingSrxAppArgs', 'SettingSrxAppArgsDict']]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssr: Optional[pulumi.Input[Union['SettingSsrArgs', 'SettingSsrArgsDict']]] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
                 track_anonymous_devices: Optional[pulumi.Input[bool]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['SettingUplinkPortConfigArgs', 'SettingUplinkPortConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vna: Optional[pulumi.Input[Union['SettingVnaArgs', 'SettingVnaArgsDict']]] = None,
                 vs_instance: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SettingVsInstanceArgs', 'SettingVsInstanceArgsDict']]]]] = None,
                 wan_vna: Optional[pulumi.Input[Union['SettingWanVnaArgs', 'SettingWanVnaArgsDict']]] = None,
                 wids: Optional[pulumi.Input[Union['SettingWidsArgs', 'SettingWidsArgsDict']]] = None,
                 wifi: Optional[pulumi.Input[Union['SettingWifiArgs', 'SettingWifiArgsDict']]] = None,
                 wired_vna: Optional[pulumi.Input[Union['SettingWiredVnaArgs', 'SettingWiredVnaArgsDict']]] = None,
                 zone_occupancy_alert: Optional[pulumi.Input[Union['SettingZoneOccupancyAlertArgs', 'SettingZoneOccupancyAlertArgsDict']]] = None,
                 __props__=None):
        """
        This resource manages the Site Settings.The Site Settings can used to customize the Site configuration and assign Site Variables (Sites Variables can be reused in configuration templates)

        ## Import

        Using `pulumi import`, import `mist_site_setting` with:

        Site Setting can be imported by specifying the site_id

        ```sh
        $ pulumi import junipermist:site/setting:Setting site_setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingAutoUpgradeArgs', 'SettingAutoUpgradeArgsDict']] auto_upgrade: Auto Upgrade Settings
        :param pulumi.Input[Union['SettingBleConfigArgs', 'SettingBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[bool] config_auto_revert: whether to enable ap auto config revert
        :param pulumi.Input[Union['SettingConfigPushPolicyArgs', 'SettingConfigPushPolicyArgsDict']] config_push_policy: mist also uses some heuristic rules to prevent destructive configs from being pushed
        :param pulumi.Input[Union['SettingCriticalUrlMonitoringArgs', 'SettingCriticalUrlMonitoringArgsDict']] critical_url_monitoring: you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        :param pulumi.Input[int] device_updown_threshold: by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
               is desired, use the following
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_system_defined_port_usages: if some system-default port usages are not desired - namely, ap / iot / uplink
        :param pulumi.Input[Union['SettingEngagementArgs', 'SettingEngagementArgsDict']] engagement: **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
               multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
               (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
               bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        :param pulumi.Input[Union['SettingGatewayMgmtArgs', 'SettingGatewayMgmtArgsDict']] gateway_mgmt: Gateway Site settings
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingLedArgs', 'SettingLedArgsDict']] led: LED AP settings
        :param pulumi.Input[Union['SettingOccupancyArgs', 'SettingOccupancyArgsDict']] occupancy: Occupancy Analytics settings
        :param pulumi.Input[bool] persist_config_on_device: whether to store the config on AP
        :param pulumi.Input[Union['SettingProxyArgs', 'SettingProxyArgsDict']] proxy: Proxy Configuration to talk to Mist
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[bool] report_gatt: whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
               serial number, battery %, temperature, humidity)
        :param pulumi.Input[Union['SettingRogueArgs', 'SettingRogueArgsDict']] rogue: Rogue site settings
        :param pulumi.Input[Union['SettingRtsaArgs', 'SettingRtsaArgsDict']] rtsa: managed mobility
        :param pulumi.Input[Union['SettingSimpleAlertArgs', 'SettingSimpleAlertArgsDict']] simple_alert: Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
               window, there are more than Y distinct client encountring over X failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
               Org:Setting)
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[bool] track_anonymous_devices: whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SettingVsInstanceArgs', 'SettingVsInstanceArgsDict']]]] vs_instance: optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        :param pulumi.Input[Union['SettingWidsArgs', 'SettingWidsArgsDict']] wids: WIDS site settings
        :param pulumi.Input[Union['SettingWifiArgs', 'SettingWifiArgsDict']] wifi: Wi-Fi site settings
        :param pulumi.Input[Union['SettingZoneOccupancyAlertArgs', 'SettingZoneOccupancyAlertArgsDict']] zone_occupancy_alert: Zone Occupancy alert site settings
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the Site Settings.The Site Settings can used to customize the Site configuration and assign Site Variables (Sites Variables can be reused in configuration templates)

        ## Import

        Using `pulumi import`, import `mist_site_setting` with:

        Site Setting can be imported by specifying the site_id

        ```sh
        $ pulumi import junipermist:site/setting:Setting site_setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
        ```

        :param str resource_name: The name of the resource.
        :param SettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analytic: Optional[pulumi.Input[Union['SettingAnalyticArgs', 'SettingAnalyticArgsDict']]] = None,
                 ap_updown_threshold: Optional[pulumi.Input[int]] = None,
                 auto_upgrade: Optional[pulumi.Input[Union['SettingAutoUpgradeArgs', 'SettingAutoUpgradeArgsDict']]] = None,
                 ble_config: Optional[pulumi.Input[Union['SettingBleConfigArgs', 'SettingBleConfigArgsDict']]] = None,
                 config_auto_revert: Optional[pulumi.Input[bool]] = None,
                 config_push_policy: Optional[pulumi.Input[Union['SettingConfigPushPolicyArgs', 'SettingConfigPushPolicyArgsDict']]] = None,
                 critical_url_monitoring: Optional[pulumi.Input[Union['SettingCriticalUrlMonitoringArgs', 'SettingCriticalUrlMonitoringArgsDict']]] = None,
                 device_updown_threshold: Optional[pulumi.Input[int]] = None,
                 disabled_system_defined_port_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 engagement: Optional[pulumi.Input[Union['SettingEngagementArgs', 'SettingEngagementArgsDict']]] = None,
                 gateway_mgmt: Optional[pulumi.Input[Union['SettingGatewayMgmtArgs', 'SettingGatewayMgmtArgsDict']]] = None,
                 gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
                 led: Optional[pulumi.Input[Union['SettingLedArgs', 'SettingLedArgsDict']]] = None,
                 occupancy: Optional[pulumi.Input[Union['SettingOccupancyArgs', 'SettingOccupancyArgsDict']]] = None,
                 persist_config_on_device: Optional[pulumi.Input[bool]] = None,
                 proxy: Optional[pulumi.Input[Union['SettingProxyArgs', 'SettingProxyArgsDict']]] = None,
                 remove_existing_configs: Optional[pulumi.Input[bool]] = None,
                 report_gatt: Optional[pulumi.Input[bool]] = None,
                 rogue: Optional[pulumi.Input[Union['SettingRogueArgs', 'SettingRogueArgsDict']]] = None,
                 rtsa: Optional[pulumi.Input[Union['SettingRtsaArgs', 'SettingRtsaArgsDict']]] = None,
                 simple_alert: Optional[pulumi.Input[Union['SettingSimpleAlertArgs', 'SettingSimpleAlertArgsDict']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 skyatp: Optional[pulumi.Input[Union['SettingSkyatpArgs', 'SettingSkyatpArgsDict']]] = None,
                 srx_app: Optional[pulumi.Input[Union['SettingSrxAppArgs', 'SettingSrxAppArgsDict']]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssr: Optional[pulumi.Input[Union['SettingSsrArgs', 'SettingSsrArgsDict']]] = None,
                 switch_updown_threshold: Optional[pulumi.Input[int]] = None,
                 synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
                 track_anonymous_devices: Optional[pulumi.Input[bool]] = None,
                 uplink_port_config: Optional[pulumi.Input[Union['SettingUplinkPortConfigArgs', 'SettingUplinkPortConfigArgsDict']]] = None,
                 vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 vna: Optional[pulumi.Input[Union['SettingVnaArgs', 'SettingVnaArgsDict']]] = None,
                 vs_instance: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SettingVsInstanceArgs', 'SettingVsInstanceArgsDict']]]]] = None,
                 wan_vna: Optional[pulumi.Input[Union['SettingWanVnaArgs', 'SettingWanVnaArgsDict']]] = None,
                 wids: Optional[pulumi.Input[Union['SettingWidsArgs', 'SettingWidsArgsDict']]] = None,
                 wifi: Optional[pulumi.Input[Union['SettingWifiArgs', 'SettingWifiArgsDict']]] = None,
                 wired_vna: Optional[pulumi.Input[Union['SettingWiredVnaArgs', 'SettingWiredVnaArgsDict']]] = None,
                 zone_occupancy_alert: Optional[pulumi.Input[Union['SettingZoneOccupancyAlertArgs', 'SettingZoneOccupancyAlertArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SettingArgs.__new__(SettingArgs)

            __props__.__dict__["analytic"] = analytic
            __props__.__dict__["ap_updown_threshold"] = ap_updown_threshold
            __props__.__dict__["auto_upgrade"] = auto_upgrade
            __props__.__dict__["ble_config"] = ble_config
            __props__.__dict__["config_auto_revert"] = config_auto_revert
            __props__.__dict__["config_push_policy"] = config_push_policy
            __props__.__dict__["critical_url_monitoring"] = critical_url_monitoring
            __props__.__dict__["device_updown_threshold"] = device_updown_threshold
            __props__.__dict__["disabled_system_defined_port_usages"] = disabled_system_defined_port_usages
            __props__.__dict__["engagement"] = engagement
            __props__.__dict__["gateway_mgmt"] = gateway_mgmt
            __props__.__dict__["gateway_updown_threshold"] = gateway_updown_threshold
            __props__.__dict__["led"] = led
            __props__.__dict__["occupancy"] = occupancy
            __props__.__dict__["persist_config_on_device"] = persist_config_on_device
            __props__.__dict__["proxy"] = proxy
            __props__.__dict__["remove_existing_configs"] = remove_existing_configs
            __props__.__dict__["report_gatt"] = report_gatt
            __props__.__dict__["rogue"] = rogue
            __props__.__dict__["rtsa"] = rtsa
            __props__.__dict__["simple_alert"] = simple_alert
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["skyatp"] = skyatp
            __props__.__dict__["srx_app"] = srx_app
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["ssr"] = ssr
            __props__.__dict__["switch_updown_threshold"] = switch_updown_threshold
            __props__.__dict__["synthetic_test"] = synthetic_test
            __props__.__dict__["track_anonymous_devices"] = track_anonymous_devices
            __props__.__dict__["uplink_port_config"] = uplink_port_config
            __props__.__dict__["vars"] = vars
            __props__.__dict__["vna"] = vna
            __props__.__dict__["vs_instance"] = vs_instance
            __props__.__dict__["wan_vna"] = wan_vna
            __props__.__dict__["wids"] = wids
            __props__.__dict__["wifi"] = wifi
            __props__.__dict__["wired_vna"] = wired_vna
            __props__.__dict__["zone_occupancy_alert"] = zone_occupancy_alert
            __props__.__dict__["blacklist_url"] = None
            __props__.__dict__["watched_station_url"] = None
            __props__.__dict__["whitelist_url"] = None
        super(Setting, __self__).__init__(
            'junipermist:site/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            analytic: Optional[pulumi.Input[Union['SettingAnalyticArgs', 'SettingAnalyticArgsDict']]] = None,
            ap_updown_threshold: Optional[pulumi.Input[int]] = None,
            auto_upgrade: Optional[pulumi.Input[Union['SettingAutoUpgradeArgs', 'SettingAutoUpgradeArgsDict']]] = None,
            blacklist_url: Optional[pulumi.Input[str]] = None,
            ble_config: Optional[pulumi.Input[Union['SettingBleConfigArgs', 'SettingBleConfigArgsDict']]] = None,
            config_auto_revert: Optional[pulumi.Input[bool]] = None,
            config_push_policy: Optional[pulumi.Input[Union['SettingConfigPushPolicyArgs', 'SettingConfigPushPolicyArgsDict']]] = None,
            critical_url_monitoring: Optional[pulumi.Input[Union['SettingCriticalUrlMonitoringArgs', 'SettingCriticalUrlMonitoringArgsDict']]] = None,
            device_updown_threshold: Optional[pulumi.Input[int]] = None,
            disabled_system_defined_port_usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            engagement: Optional[pulumi.Input[Union['SettingEngagementArgs', 'SettingEngagementArgsDict']]] = None,
            gateway_mgmt: Optional[pulumi.Input[Union['SettingGatewayMgmtArgs', 'SettingGatewayMgmtArgsDict']]] = None,
            gateway_updown_threshold: Optional[pulumi.Input[int]] = None,
            led: Optional[pulumi.Input[Union['SettingLedArgs', 'SettingLedArgsDict']]] = None,
            occupancy: Optional[pulumi.Input[Union['SettingOccupancyArgs', 'SettingOccupancyArgsDict']]] = None,
            persist_config_on_device: Optional[pulumi.Input[bool]] = None,
            proxy: Optional[pulumi.Input[Union['SettingProxyArgs', 'SettingProxyArgsDict']]] = None,
            remove_existing_configs: Optional[pulumi.Input[bool]] = None,
            report_gatt: Optional[pulumi.Input[bool]] = None,
            rogue: Optional[pulumi.Input[Union['SettingRogueArgs', 'SettingRogueArgsDict']]] = None,
            rtsa: Optional[pulumi.Input[Union['SettingRtsaArgs', 'SettingRtsaArgsDict']]] = None,
            simple_alert: Optional[pulumi.Input[Union['SettingSimpleAlertArgs', 'SettingSimpleAlertArgsDict']]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            skyatp: Optional[pulumi.Input[Union['SettingSkyatpArgs', 'SettingSkyatpArgsDict']]] = None,
            srx_app: Optional[pulumi.Input[Union['SettingSrxAppArgs', 'SettingSrxAppArgsDict']]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssr: Optional[pulumi.Input[Union['SettingSsrArgs', 'SettingSsrArgsDict']]] = None,
            switch_updown_threshold: Optional[pulumi.Input[int]] = None,
            synthetic_test: Optional[pulumi.Input[Union['SettingSyntheticTestArgs', 'SettingSyntheticTestArgsDict']]] = None,
            track_anonymous_devices: Optional[pulumi.Input[bool]] = None,
            uplink_port_config: Optional[pulumi.Input[Union['SettingUplinkPortConfigArgs', 'SettingUplinkPortConfigArgsDict']]] = None,
            vars: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            vna: Optional[pulumi.Input[Union['SettingVnaArgs', 'SettingVnaArgsDict']]] = None,
            vs_instance: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['SettingVsInstanceArgs', 'SettingVsInstanceArgsDict']]]]] = None,
            wan_vna: Optional[pulumi.Input[Union['SettingWanVnaArgs', 'SettingWanVnaArgsDict']]] = None,
            watched_station_url: Optional[pulumi.Input[str]] = None,
            whitelist_url: Optional[pulumi.Input[str]] = None,
            wids: Optional[pulumi.Input[Union['SettingWidsArgs', 'SettingWidsArgsDict']]] = None,
            wifi: Optional[pulumi.Input[Union['SettingWifiArgs', 'SettingWifiArgsDict']]] = None,
            wired_vna: Optional[pulumi.Input[Union['SettingWiredVnaArgs', 'SettingWiredVnaArgsDict']]] = None,
            zone_occupancy_alert: Optional[pulumi.Input[Union['SettingZoneOccupancyAlertArgs', 'SettingZoneOccupancyAlertArgsDict']]] = None) -> 'Setting':
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ap_updown_threshold: enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingAutoUpgradeArgs', 'SettingAutoUpgradeArgsDict']] auto_upgrade: Auto Upgrade Settings
        :param pulumi.Input[Union['SettingBleConfigArgs', 'SettingBleConfigArgsDict']] ble_config: BLE AP settings
        :param pulumi.Input[bool] config_auto_revert: whether to enable ap auto config revert
        :param pulumi.Input[Union['SettingConfigPushPolicyArgs', 'SettingConfigPushPolicyArgsDict']] config_push_policy: mist also uses some heuristic rules to prevent destructive configs from being pushed
        :param pulumi.Input[Union['SettingCriticalUrlMonitoringArgs', 'SettingCriticalUrlMonitoringArgsDict']] critical_url_monitoring: you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        :param pulumi.Input[int] device_updown_threshold: by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
               is desired, use the following
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disabled_system_defined_port_usages: if some system-default port usages are not desired - namely, ap / iot / uplink
        :param pulumi.Input[Union['SettingEngagementArgs', 'SettingEngagementArgsDict']] engagement: **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
               multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
               (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
               bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        :param pulumi.Input[Union['SettingGatewayMgmtArgs', 'SettingGatewayMgmtArgsDict']] gateway_mgmt: Gateway Site settings
        :param pulumi.Input[int] gateway_updown_threshold: enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[Union['SettingLedArgs', 'SettingLedArgsDict']] led: LED AP settings
        :param pulumi.Input[Union['SettingOccupancyArgs', 'SettingOccupancyArgsDict']] occupancy: Occupancy Analytics settings
        :param pulumi.Input[bool] persist_config_on_device: whether to store the config on AP
        :param pulumi.Input[Union['SettingProxyArgs', 'SettingProxyArgsDict']] proxy: Proxy Configuration to talk to Mist
        :param pulumi.Input[bool] remove_existing_configs: by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        :param pulumi.Input[bool] report_gatt: whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
               serial number, battery %, temperature, humidity)
        :param pulumi.Input[Union['SettingRogueArgs', 'SettingRogueArgsDict']] rogue: Rogue site settings
        :param pulumi.Input[Union['SettingRtsaArgs', 'SettingRtsaArgsDict']] rtsa: managed mobility
        :param pulumi.Input[Union['SettingSimpleAlertArgs', 'SettingSimpleAlertArgsDict']] simple_alert: Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
               window, there are more than Y distinct client encountring over X failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
               Org:Setting)
        :param pulumi.Input[int] switch_updown_threshold: enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
               `device_updown_threshold` is ignored.
        :param pulumi.Input[bool] track_anonymous_devices: whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] vars: a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        :param pulumi.Input[Mapping[str, pulumi.Input[Union['SettingVsInstanceArgs', 'SettingVsInstanceArgsDict']]]] vs_instance: optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        :param pulumi.Input[Union['SettingWidsArgs', 'SettingWidsArgsDict']] wids: WIDS site settings
        :param pulumi.Input[Union['SettingWifiArgs', 'SettingWifiArgsDict']] wifi: Wi-Fi site settings
        :param pulumi.Input[Union['SettingZoneOccupancyAlertArgs', 'SettingZoneOccupancyAlertArgsDict']] zone_occupancy_alert: Zone Occupancy alert site settings
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SettingState.__new__(_SettingState)

        __props__.__dict__["analytic"] = analytic
        __props__.__dict__["ap_updown_threshold"] = ap_updown_threshold
        __props__.__dict__["auto_upgrade"] = auto_upgrade
        __props__.__dict__["blacklist_url"] = blacklist_url
        __props__.__dict__["ble_config"] = ble_config
        __props__.__dict__["config_auto_revert"] = config_auto_revert
        __props__.__dict__["config_push_policy"] = config_push_policy
        __props__.__dict__["critical_url_monitoring"] = critical_url_monitoring
        __props__.__dict__["device_updown_threshold"] = device_updown_threshold
        __props__.__dict__["disabled_system_defined_port_usages"] = disabled_system_defined_port_usages
        __props__.__dict__["engagement"] = engagement
        __props__.__dict__["gateway_mgmt"] = gateway_mgmt
        __props__.__dict__["gateway_updown_threshold"] = gateway_updown_threshold
        __props__.__dict__["led"] = led
        __props__.__dict__["occupancy"] = occupancy
        __props__.__dict__["persist_config_on_device"] = persist_config_on_device
        __props__.__dict__["proxy"] = proxy
        __props__.__dict__["remove_existing_configs"] = remove_existing_configs
        __props__.__dict__["report_gatt"] = report_gatt
        __props__.__dict__["rogue"] = rogue
        __props__.__dict__["rtsa"] = rtsa
        __props__.__dict__["simple_alert"] = simple_alert
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["skyatp"] = skyatp
        __props__.__dict__["srx_app"] = srx_app
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["ssr"] = ssr
        __props__.__dict__["switch_updown_threshold"] = switch_updown_threshold
        __props__.__dict__["synthetic_test"] = synthetic_test
        __props__.__dict__["track_anonymous_devices"] = track_anonymous_devices
        __props__.__dict__["uplink_port_config"] = uplink_port_config
        __props__.__dict__["vars"] = vars
        __props__.__dict__["vna"] = vna
        __props__.__dict__["vs_instance"] = vs_instance
        __props__.__dict__["wan_vna"] = wan_vna
        __props__.__dict__["watched_station_url"] = watched_station_url
        __props__.__dict__["whitelist_url"] = whitelist_url
        __props__.__dict__["wids"] = wids
        __props__.__dict__["wifi"] = wifi
        __props__.__dict__["wired_vna"] = wired_vna
        __props__.__dict__["zone_occupancy_alert"] = zone_occupancy_alert
        return Setting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def analytic(self) -> pulumi.Output[Optional['outputs.SettingAnalytic']]:
        return pulumi.get(self, "analytic")

    @property
    @pulumi.getter(name="apUpdownThreshold")
    def ap_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "ap_updown_threshold")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> pulumi.Output[Optional['outputs.SettingAutoUpgrade']]:
        """
        Auto Upgrade Settings
        """
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="blacklistUrl")
    def blacklist_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "blacklist_url")

    @property
    @pulumi.getter(name="bleConfig")
    def ble_config(self) -> pulumi.Output[Optional['outputs.SettingBleConfig']]:
        """
        BLE AP settings
        """
        return pulumi.get(self, "ble_config")

    @property
    @pulumi.getter(name="configAutoRevert")
    def config_auto_revert(self) -> pulumi.Output[bool]:
        """
        whether to enable ap auto config revert
        """
        return pulumi.get(self, "config_auto_revert")

    @property
    @pulumi.getter(name="configPushPolicy")
    def config_push_policy(self) -> pulumi.Output[Optional['outputs.SettingConfigPushPolicy']]:
        """
        mist also uses some heuristic rules to prevent destructive configs from being pushed
        """
        return pulumi.get(self, "config_push_policy")

    @property
    @pulumi.getter(name="criticalUrlMonitoring")
    def critical_url_monitoring(self) -> pulumi.Output[Optional['outputs.SettingCriticalUrlMonitoring']]:
        """
        you can define some URLs that's critical to site operaitons the latency will be captured and considered for site health
        """
        return pulumi.get(self, "critical_url_monitoring")

    @property
    @pulumi.getter(name="deviceUpdownThreshold")
    def device_updown_threshold(self) -> pulumi.Output[int]:
        """
        by default, device_updown_thresold, if set, will apply to all devices types if different values for specific device type
        is desired, use the following
        """
        return pulumi.get(self, "device_updown_threshold")

    @property
    @pulumi.getter(name="disabledSystemDefinedPortUsages")
    def disabled_system_defined_port_usages(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        if some system-default port usages are not desired - namely, ap / iot / uplink
        """
        return pulumi.get(self, "disabled_system_defined_port_usages")

    @property
    @pulumi.getter
    def engagement(self) -> pulumi.Output[Optional['outputs.SettingEngagement']]:
        """
        **Note**: if hours does not exist, it’s treated as everyday of the week, 00:00-23:59. Currently we don’t allow
        multiple ranges for the same day **Note**: default values for `dwell_tags`: passerby (1,300) bounce (301, 14400) engaged
        (14401, 28800) stationed (28801, 42000) **Note**: default values for `dwell_tag_names`: passerby = “Passerby”,
        bounce = “Visitor”, engaged = “Associates”, stationed = “Assets”
        """
        return pulumi.get(self, "engagement")

    @property
    @pulumi.getter(name="gatewayMgmt")
    def gateway_mgmt(self) -> pulumi.Output[Optional['outputs.SettingGatewayMgmt']]:
        """
        Gateway Site settings
        """
        return pulumi.get(self, "gateway_mgmt")

    @property
    @pulumi.getter(name="gatewayUpdownThreshold")
    def gateway_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "gateway_updown_threshold")

    @property
    @pulumi.getter
    def led(self) -> pulumi.Output[Optional['outputs.SettingLed']]:
        """
        LED AP settings
        """
        return pulumi.get(self, "led")

    @property
    @pulumi.getter
    def occupancy(self) -> pulumi.Output[Optional['outputs.SettingOccupancy']]:
        """
        Occupancy Analytics settings
        """
        return pulumi.get(self, "occupancy")

    @property
    @pulumi.getter(name="persistConfigOnDevice")
    def persist_config_on_device(self) -> pulumi.Output[bool]:
        """
        whether to store the config on AP
        """
        return pulumi.get(self, "persist_config_on_device")

    @property
    @pulumi.getter
    def proxy(self) -> pulumi.Output[Optional['outputs.SettingProxy']]:
        """
        Proxy Configuration to talk to Mist
        """
        return pulumi.get(self, "proxy")

    @property
    @pulumi.getter(name="removeExistingConfigs")
    def remove_existing_configs(self) -> pulumi.Output[bool]:
        """
        by default, when we configure a device, we only clean up config we generates. Remove existing configs if enabled
        """
        return pulumi.get(self, "remove_existing_configs")

    @property
    @pulumi.getter(name="reportGatt")
    def report_gatt(self) -> pulumi.Output[bool]:
        """
        whether AP should periodically connect to BLE devices and report GATT device info (device name, manufacturer name,
        serial number, battery %, temperature, humidity)
        """
        return pulumi.get(self, "report_gatt")

    @property
    @pulumi.getter
    def rogue(self) -> pulumi.Output[Optional['outputs.SettingRogue']]:
        """
        Rogue site settings
        """
        return pulumi.get(self, "rogue")

    @property
    @pulumi.getter
    def rtsa(self) -> pulumi.Output[Optional['outputs.SettingRtsa']]:
        """
        managed mobility
        """
        return pulumi.get(self, "rtsa")

    @property
    @pulumi.getter(name="simpleAlert")
    def simple_alert(self) -> pulumi.Output[Optional['outputs.SettingSimpleAlert']]:
        """
        Set of heuristic rules will be enabled when marvis subscription is not available. It triggers when, in a Z minute
        window, there are more than Y distinct client encountring over X failures
        """
        return pulumi.get(self, "simple_alert")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def skyatp(self) -> pulumi.Output[Optional['outputs.SettingSkyatp']]:
        return pulumi.get(self, "skyatp")

    @property
    @pulumi.getter(name="srxApp")
    def srx_app(self) -> pulumi.Output[Optional['outputs.SettingSrxApp']]:
        return pulumi.get(self, "srx_app")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Sequence[str]]:
        """
        when limit_ssh_access = true in Org Setting, list of SSH public keys provided by Mist Support to install onto APs (see
        Org:Setting)
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def ssr(self) -> pulumi.Output[Optional['outputs.SettingSsr']]:
        return pulumi.get(self, "ssr")

    @property
    @pulumi.getter(name="switchUpdownThreshold")
    def switch_updown_threshold(self) -> pulumi.Output[int]:
        """
        enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
        `device_updown_threshold` is ignored.
        """
        return pulumi.get(self, "switch_updown_threshold")

    @property
    @pulumi.getter(name="syntheticTest")
    def synthetic_test(self) -> pulumi.Output[Optional['outputs.SettingSyntheticTest']]:
        return pulumi.get(self, "synthetic_test")

    @property
    @pulumi.getter(name="trackAnonymousDevices")
    def track_anonymous_devices(self) -> pulumi.Output[bool]:
        """
        whether to track anonymous BLE assets (requires ‘track_asset’ enabled)
        """
        return pulumi.get(self, "track_anonymous_devices")

    @property
    @pulumi.getter(name="uplinkPortConfig")
    def uplink_port_config(self) -> pulumi.Output[Optional['outputs.SettingUplinkPortConfig']]:
        return pulumi.get(self, "uplink_port_config")

    @property
    @pulumi.getter
    def vars(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
        """
        return pulumi.get(self, "vars")

    @property
    @pulumi.getter
    def vna(self) -> pulumi.Output[Optional['outputs.SettingVna']]:
        return pulumi.get(self, "vna")

    @property
    @pulumi.getter(name="vsInstance")
    def vs_instance(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.SettingVsInstance']]]:
        """
        optional, for EX9200 only to seggregate virtual-switches. Property key is the instance name
        """
        return pulumi.get(self, "vs_instance")

    @property
    @pulumi.getter(name="wanVna")
    def wan_vna(self) -> pulumi.Output[Optional['outputs.SettingWanVna']]:
        return pulumi.get(self, "wan_vna")

    @property
    @pulumi.getter(name="watchedStationUrl")
    def watched_station_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "watched_station_url")

    @property
    @pulumi.getter(name="whitelistUrl")
    def whitelist_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "whitelist_url")

    @property
    @pulumi.getter
    def wids(self) -> pulumi.Output[Optional['outputs.SettingWids']]:
        """
        WIDS site settings
        """
        return pulumi.get(self, "wids")

    @property
    @pulumi.getter
    def wifi(self) -> pulumi.Output[Optional['outputs.SettingWifi']]:
        """
        Wi-Fi site settings
        """
        return pulumi.get(self, "wifi")

    @property
    @pulumi.getter(name="wiredVna")
    def wired_vna(self) -> pulumi.Output[Optional['outputs.SettingWiredVna']]:
        return pulumi.get(self, "wired_vna")

    @property
    @pulumi.getter(name="zoneOccupancyAlert")
    def zone_occupancy_alert(self) -> pulumi.Output[Optional['outputs.SettingZoneOccupancyAlert']]:
        """
        Zone Occupancy alert site settings
        """
        return pulumi.get(self, "zone_occupancy_alert")

