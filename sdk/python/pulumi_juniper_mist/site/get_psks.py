# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPsksResult',
    'AwaitableGetPsksResult',
    'get_psks',
    'get_psks_output',
]

@pulumi.output_type
class GetPsksResult:
    """
    A collection of values returned by getPsks.
    """
    def __init__(__self__, id=None, name=None, role=None, site_id=None, site_psks=None, ssid=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if site_id and not isinstance(site_id, str):
            raise TypeError("Expected argument 'site_id' to be a str")
        pulumi.set(__self__, "site_id", site_id)
        if site_psks and not isinstance(site_psks, list):
            raise TypeError("Expected argument 'site_psks' to be a list")
        pulumi.set(__self__, "site_psks", site_psks)
        if ssid and not isinstance(ssid, str):
            raise TypeError("Expected argument 'ssid' to be a str")
        pulumi.set(__self__, "ssid", ssid)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> str:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="sitePsks")
    def site_psks(self) -> Sequence['outputs.GetPsksSitePskResult']:
        return pulumi.get(self, "site_psks")

    @property
    @pulumi.getter
    def ssid(self) -> Optional[str]:
        return pulumi.get(self, "ssid")


class AwaitableGetPsksResult(GetPsksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPsksResult(
            id=self.id,
            name=self.name,
            role=self.role,
            site_id=self.site_id,
            site_psks=self.site_psks,
            ssid=self.ssid)


def get_psks(name: Optional[str] = None,
             role: Optional[str] = None,
             site_id: Optional[str] = None,
             ssid: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPsksResult:
    """
    This data source provides the list of Site Psks.

    A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\\
    It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\\
    Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\\
    Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    psks_vip = junipermist.site.get_psks(site_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        name="psk_one",
        role="vip",
        ssid="psk_ssid")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['role'] = role
    __args__['siteId'] = site_id
    __args__['ssid'] = ssid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('junipermist:site/getPsks:getPsks', __args__, opts=opts, typ=GetPsksResult).value

    return AwaitableGetPsksResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        role=pulumi.get(__ret__, 'role'),
        site_id=pulumi.get(__ret__, 'site_id'),
        site_psks=pulumi.get(__ret__, 'site_psks'),
        ssid=pulumi.get(__ret__, 'ssid'))
def get_psks_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                    role: Optional[pulumi.Input[Optional[str]]] = None,
                    site_id: Optional[pulumi.Input[str]] = None,
                    ssid: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPsksResult]:
    """
    This data source provides the list of Site Psks.

    A multi PSK (Pre-Shared Key) is a feature that allows the use of multiple PSKs for securing network connections.\\
    It provides a simple and comprehensive way to onboard client devices without relying on client mac addresses.\\
    Each psk has its own key name, which can be used for user-level accountability, key rotation, and visibility in the management platform. It supports the creation, rotation, and auto-expiration of psks, and allows vlan assignment and role assignment for dynamic per-user policies.\\
    Multi PSKs create virtual broadcast domains and can be used for end-user onboarding via authenticated sso login.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_junipermist as junipermist

    psks_vip = junipermist.site.get_psks(site_id="15fca2ac-b1a6-47cc-9953-cc6906281550",
        name="psk_one",
        role="vip",
        ssid="psk_ssid")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['role'] = role
    __args__['siteId'] = site_id
    __args__['ssid'] = ssid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('junipermist:site/getPsks:getPsks', __args__, opts=opts, typ=GetPsksResult)
    return __ret__.apply(lambda __response__: GetPsksResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        role=pulumi.get(__response__, 'role'),
        site_id=pulumi.get(__response__, 'site_id'),
        site_psks=pulumi.get(__response__, 'site_psks'),
        ssid=pulumi.get(__response__, 'ssid')))
