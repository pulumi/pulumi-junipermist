# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'UpgradeDeviceFwupdateArgs',
    'UpgradeDeviceFwupdateArgsDict',
]

MYPY = False

if not MYPY:
    class UpgradeDeviceFwupdateArgsDict(TypedDict):
        progress: NotRequired[pulumi.Input[int]]
        status: NotRequired[pulumi.Input[str]]
        """
        enum: `inprogress`, `failed`, `upgraded`
        """
        status_id: NotRequired[pulumi.Input[int]]
        timestamp: NotRequired[pulumi.Input[float]]
        will_retry: NotRequired[pulumi.Input[bool]]
elif False:
    UpgradeDeviceFwupdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpgradeDeviceFwupdateArgs:
    def __init__(__self__, *,
                 progress: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_id: Optional[pulumi.Input[int]] = None,
                 timestamp: Optional[pulumi.Input[float]] = None,
                 will_retry: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] status: enum: `inprogress`, `failed`, `upgraded`
        """
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_id is not None:
            pulumi.set(__self__, "status_id", status_id)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)
        if will_retry is not None:
            pulumi.set(__self__, "will_retry", will_retry)

    @property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "progress", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        enum: `inprogress`, `failed`, `upgraded`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_id")

    @status_id.setter
    def status_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_id", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter(name="willRetry")
    def will_retry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "will_retry")

    @will_retry.setter
    def will_retry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "will_retry", value)


