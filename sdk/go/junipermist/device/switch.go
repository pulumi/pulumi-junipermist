// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package device

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the Switch configuration.
//
// It can be used to define specific configuration at the device level or to override Org/Site Network template settings.
//
// > **WARNING** For **adopted** devices, make sure to set `managed`=`true` to allow Mist to manage the switch
//
// ## Import
//
// Using `pulumi import`, import `mist_device_switch` with:
//
// Switch Configuration can be imported by specifying the site_id and the device_id
//
// ```sh
// $ pulumi import junipermist:device/switch:Switch switch_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
type Switch struct {
	pulumi.CustomResourceState

	AclPolicies SwitchAclPolicyArrayOutput `pulumi:"aclPolicies"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags SwitchAclTagsMapOutput `pulumi:"aclTags"`
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds pulumi.StringArrayOutput    `pulumi:"additionalConfigCmds"`
	DeviceId             pulumi.StringOutput         `pulumi:"deviceId"`
	DhcpSnooping         SwitchDhcpSnoopingPtrOutput `pulumi:"dhcpSnooping"`
	DhcpdConfig          SwitchDhcpdConfigPtrOutput  `pulumi:"dhcpdConfig"`
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig pulumi.BoolOutput `pulumi:"disableAutoConfig"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsSuffixes pulumi.StringArrayOutput   `pulumi:"dnsSuffixes"`
	ExtraRoutes SwitchExtraRoutesMapOutput `pulumi:"extraRoutes"`
	// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
	ExtraRoutes6 SwitchExtraRoutes6MapOutput `pulumi:"extraRoutes6"`
	Image1Url    pulumi.StringOutput         `pulumi:"image1Url"`
	Image2Url    pulumi.StringOutput         `pulumi:"image2Url"`
	Image3Url    pulumi.StringOutput         `pulumi:"image3Url"`
	// Junos IP Config
	IpConfig SwitchIpConfigPtrOutput `pulumi:"ipConfig"`
	// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
	// "ge-0/0/0-10")
	LocalPortConfig SwitchLocalPortConfigMapOutput `pulumi:"localPortConfig"`
	// device MAC address
	Mac pulumi.StringOutput `pulumi:"mac"`
	// for an adopted switch, we don’t overwrite their existing configs automatically
	Managed pulumi.BoolOutput `pulumi:"managed"`
	// map where the device belongs to
	MapId pulumi.StringPtrOutput `pulumi:"mapId"`
	// enable mistNac to use radsec
	MistNac SwitchMistNacPtrOutput `pulumi:"mistNac"`
	// device Model
	Model pulumi.StringOutput `pulumi:"model"`
	Name  pulumi.StringOutput `pulumi:"name"`
	// Property key is network name
	Networks SwitchNetworksMapOutput `pulumi:"networks"`
	Notes    pulumi.StringPtrOutput  `pulumi:"notes"`
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers pulumi.StringArrayOutput `pulumi:"ntpServers"`
	// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
	// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
	OobIpConfig SwitchOobIpConfigPtrOutput `pulumi:"oobIpConfig"`
	OrgId       pulumi.StringOutput        `pulumi:"orgId"`
	// Junos OSPF areas
	OspfAreas SwitchOspfAreasMapOutput `pulumi:"ospfAreas"`
	// Property key is the network name. Defines the additional IP Addresses configured on the device.
	OtherIpConfigs SwitchOtherIpConfigsMapOutput `pulumi:"otherIpConfigs"`
	// Property key is the port name or range (e.g. "ge-0/0/0-10")
	PortConfig SwitchPortConfigMapOutput `pulumi:"portConfig"`
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
	// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
	// maximum 4 port mirrorings is allowed
	PortMirroring SwitchPortMirroringMapOutput `pulumi:"portMirroring"`
	// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
	PortUsages SwitchPortUsagesMapOutput `pulumi:"portUsages"`
	// Junos Radius config
	RadiusConfig SwitchRadiusConfigPtrOutput `pulumi:"radiusConfig"`
	RemoteSyslog SwitchRemoteSyslogPtrOutput `pulumi:"remoteSyslog"`
	Role         pulumi.StringPtrOutput      `pulumi:"role"`
	// used for OSPF / BGP / EVPN
	RouterId pulumi.StringOutput `pulumi:"routerId"`
	// device Serial
	Serial     pulumi.StringOutput       `pulumi:"serial"`
	SiteId     pulumi.StringOutput       `pulumi:"siteId"`
	SnmpConfig SwitchSnmpConfigPtrOutput `pulumi:"snmpConfig"`
	StpConfig  SwitchStpConfigPtrOutput  `pulumi:"stpConfig"`
	// Switch settings
	SwitchMgmt SwitchSwitchMgmtPtrOutput `pulumi:"switchMgmt"`
	// Device Type. enum: `switch`
	Type pulumi.StringOutput `pulumi:"type"`
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp pulumi.BoolOutput `pulumi:"useRouterIdAsSourceIp"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars pulumi.StringMapOutput `pulumi:"vars"`
	// required for preprovisioned Virtual Chassis
	VirtualChassis SwitchVirtualChassisPtrOutput `pulumi:"virtualChassis"`
	VrfConfig      SwitchVrfConfigPtrOutput      `pulumi:"vrfConfig"`
	// Property key is the network name
	VrfInstances SwitchVrfInstancesMapOutput `pulumi:"vrfInstances"`
	// Junos VRRP config
	VrrpConfig SwitchVrrpConfigPtrOutput `pulumi:"vrrpConfig"`
	// x in pixel
	X pulumi.Float64PtrOutput `pulumi:"x"`
	// y in pixel
	Y pulumi.Float64PtrOutput `pulumi:"y"`
}

// NewSwitch registers a new resource with the given unique name, arguments, and options.
func NewSwitch(ctx *pulumi.Context,
	name string, args *SwitchArgs, opts ...pulumi.ResourceOption) (*Switch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Switch
	err := ctx.RegisterResource("junipermist:device/switch:Switch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitch gets an existing Switch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchState, opts ...pulumi.ResourceOption) (*Switch, error) {
	var resource Switch
	err := ctx.ReadResource("junipermist:device/switch:Switch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Switch resources.
type switchState struct {
	AclPolicies []SwitchAclPolicy `pulumi:"aclPolicies"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags map[string]SwitchAclTags `pulumi:"aclTags"`
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds []string            `pulumi:"additionalConfigCmds"`
	DeviceId             *string             `pulumi:"deviceId"`
	DhcpSnooping         *SwitchDhcpSnooping `pulumi:"dhcpSnooping"`
	DhcpdConfig          *SwitchDhcpdConfig  `pulumi:"dhcpdConfig"`
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig *bool `pulumi:"disableAutoConfig"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsServers []string `pulumi:"dnsServers"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsSuffixes []string                     `pulumi:"dnsSuffixes"`
	ExtraRoutes map[string]SwitchExtraRoutes `pulumi:"extraRoutes"`
	// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
	ExtraRoutes6 map[string]SwitchExtraRoutes6 `pulumi:"extraRoutes6"`
	Image1Url    *string                       `pulumi:"image1Url"`
	Image2Url    *string                       `pulumi:"image2Url"`
	Image3Url    *string                       `pulumi:"image3Url"`
	// Junos IP Config
	IpConfig *SwitchIpConfig `pulumi:"ipConfig"`
	// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
	// "ge-0/0/0-10")
	LocalPortConfig map[string]SwitchLocalPortConfig `pulumi:"localPortConfig"`
	// device MAC address
	Mac *string `pulumi:"mac"`
	// for an adopted switch, we don’t overwrite their existing configs automatically
	Managed *bool `pulumi:"managed"`
	// map where the device belongs to
	MapId *string `pulumi:"mapId"`
	// enable mistNac to use radsec
	MistNac *SwitchMistNac `pulumi:"mistNac"`
	// device Model
	Model *string `pulumi:"model"`
	Name  *string `pulumi:"name"`
	// Property key is network name
	Networks map[string]SwitchNetworks `pulumi:"networks"`
	Notes    *string                   `pulumi:"notes"`
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers []string `pulumi:"ntpServers"`
	// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
	// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
	OobIpConfig *SwitchOobIpConfig `pulumi:"oobIpConfig"`
	OrgId       *string            `pulumi:"orgId"`
	// Junos OSPF areas
	OspfAreas map[string]SwitchOspfAreas `pulumi:"ospfAreas"`
	// Property key is the network name. Defines the additional IP Addresses configured on the device.
	OtherIpConfigs map[string]SwitchOtherIpConfigs `pulumi:"otherIpConfigs"`
	// Property key is the port name or range (e.g. "ge-0/0/0-10")
	PortConfig map[string]SwitchPortConfig `pulumi:"portConfig"`
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
	// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
	// maximum 4 port mirrorings is allowed
	PortMirroring map[string]SwitchPortMirroring `pulumi:"portMirroring"`
	// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
	PortUsages map[string]SwitchPortUsages `pulumi:"portUsages"`
	// Junos Radius config
	RadiusConfig *SwitchRadiusConfig `pulumi:"radiusConfig"`
	RemoteSyslog *SwitchRemoteSyslog `pulumi:"remoteSyslog"`
	Role         *string             `pulumi:"role"`
	// used for OSPF / BGP / EVPN
	RouterId *string `pulumi:"routerId"`
	// device Serial
	Serial     *string           `pulumi:"serial"`
	SiteId     *string           `pulumi:"siteId"`
	SnmpConfig *SwitchSnmpConfig `pulumi:"snmpConfig"`
	StpConfig  *SwitchStpConfig  `pulumi:"stpConfig"`
	// Switch settings
	SwitchMgmt *SwitchSwitchMgmt `pulumi:"switchMgmt"`
	// Device Type. enum: `switch`
	Type *string `pulumi:"type"`
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp *bool `pulumi:"useRouterIdAsSourceIp"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars map[string]string `pulumi:"vars"`
	// required for preprovisioned Virtual Chassis
	VirtualChassis *SwitchVirtualChassis `pulumi:"virtualChassis"`
	VrfConfig      *SwitchVrfConfig      `pulumi:"vrfConfig"`
	// Property key is the network name
	VrfInstances map[string]SwitchVrfInstances `pulumi:"vrfInstances"`
	// Junos VRRP config
	VrrpConfig *SwitchVrrpConfig `pulumi:"vrrpConfig"`
	// x in pixel
	X *float64 `pulumi:"x"`
	// y in pixel
	Y *float64 `pulumi:"y"`
}

type SwitchState struct {
	AclPolicies SwitchAclPolicyArrayInput
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags SwitchAclTagsMapInput
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds pulumi.StringArrayInput
	DeviceId             pulumi.StringPtrInput
	DhcpSnooping         SwitchDhcpSnoopingPtrInput
	DhcpdConfig          SwitchDhcpdConfigPtrInput
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig pulumi.BoolPtrInput
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsServers pulumi.StringArrayInput
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsSuffixes pulumi.StringArrayInput
	ExtraRoutes SwitchExtraRoutesMapInput
	// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
	ExtraRoutes6 SwitchExtraRoutes6MapInput
	Image1Url    pulumi.StringPtrInput
	Image2Url    pulumi.StringPtrInput
	Image3Url    pulumi.StringPtrInput
	// Junos IP Config
	IpConfig SwitchIpConfigPtrInput
	// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
	// "ge-0/0/0-10")
	LocalPortConfig SwitchLocalPortConfigMapInput
	// device MAC address
	Mac pulumi.StringPtrInput
	// for an adopted switch, we don’t overwrite their existing configs automatically
	Managed pulumi.BoolPtrInput
	// map where the device belongs to
	MapId pulumi.StringPtrInput
	// enable mistNac to use radsec
	MistNac SwitchMistNacPtrInput
	// device Model
	Model pulumi.StringPtrInput
	Name  pulumi.StringPtrInput
	// Property key is network name
	Networks SwitchNetworksMapInput
	Notes    pulumi.StringPtrInput
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers pulumi.StringArrayInput
	// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
	// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
	OobIpConfig SwitchOobIpConfigPtrInput
	OrgId       pulumi.StringPtrInput
	// Junos OSPF areas
	OspfAreas SwitchOspfAreasMapInput
	// Property key is the network name. Defines the additional IP Addresses configured on the device.
	OtherIpConfigs SwitchOtherIpConfigsMapInput
	// Property key is the port name or range (e.g. "ge-0/0/0-10")
	PortConfig SwitchPortConfigMapInput
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
	// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
	// maximum 4 port mirrorings is allowed
	PortMirroring SwitchPortMirroringMapInput
	// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
	PortUsages SwitchPortUsagesMapInput
	// Junos Radius config
	RadiusConfig SwitchRadiusConfigPtrInput
	RemoteSyslog SwitchRemoteSyslogPtrInput
	Role         pulumi.StringPtrInput
	// used for OSPF / BGP / EVPN
	RouterId pulumi.StringPtrInput
	// device Serial
	Serial     pulumi.StringPtrInput
	SiteId     pulumi.StringPtrInput
	SnmpConfig SwitchSnmpConfigPtrInput
	StpConfig  SwitchStpConfigPtrInput
	// Switch settings
	SwitchMgmt SwitchSwitchMgmtPtrInput
	// Device Type. enum: `switch`
	Type pulumi.StringPtrInput
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp pulumi.BoolPtrInput
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars pulumi.StringMapInput
	// required for preprovisioned Virtual Chassis
	VirtualChassis SwitchVirtualChassisPtrInput
	VrfConfig      SwitchVrfConfigPtrInput
	// Property key is the network name
	VrfInstances SwitchVrfInstancesMapInput
	// Junos VRRP config
	VrrpConfig SwitchVrrpConfigPtrInput
	// x in pixel
	X pulumi.Float64PtrInput
	// y in pixel
	Y pulumi.Float64PtrInput
}

func (SwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchState)(nil)).Elem()
}

type switchArgs struct {
	AclPolicies []SwitchAclPolicy `pulumi:"aclPolicies"`
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags map[string]SwitchAclTags `pulumi:"aclTags"`
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds []string            `pulumi:"additionalConfigCmds"`
	DeviceId             string              `pulumi:"deviceId"`
	DhcpSnooping         *SwitchDhcpSnooping `pulumi:"dhcpSnooping"`
	DhcpdConfig          *SwitchDhcpdConfig  `pulumi:"dhcpdConfig"`
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig *bool `pulumi:"disableAutoConfig"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsServers []string `pulumi:"dnsServers"`
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsSuffixes []string                     `pulumi:"dnsSuffixes"`
	ExtraRoutes map[string]SwitchExtraRoutes `pulumi:"extraRoutes"`
	// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
	ExtraRoutes6 map[string]SwitchExtraRoutes6 `pulumi:"extraRoutes6"`
	// Junos IP Config
	IpConfig *SwitchIpConfig `pulumi:"ipConfig"`
	// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
	// "ge-0/0/0-10")
	LocalPortConfig map[string]SwitchLocalPortConfig `pulumi:"localPortConfig"`
	// for an adopted switch, we don’t overwrite their existing configs automatically
	Managed *bool `pulumi:"managed"`
	// map where the device belongs to
	MapId *string `pulumi:"mapId"`
	// enable mistNac to use radsec
	MistNac *SwitchMistNac `pulumi:"mistNac"`
	Name    *string        `pulumi:"name"`
	// Property key is network name
	Networks map[string]SwitchNetworks `pulumi:"networks"`
	Notes    *string                   `pulumi:"notes"`
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers []string `pulumi:"ntpServers"`
	// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
	// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
	OobIpConfig *SwitchOobIpConfig `pulumi:"oobIpConfig"`
	// Junos OSPF areas
	OspfAreas map[string]SwitchOspfAreas `pulumi:"ospfAreas"`
	// Property key is the network name. Defines the additional IP Addresses configured on the device.
	OtherIpConfigs map[string]SwitchOtherIpConfigs `pulumi:"otherIpConfigs"`
	// Property key is the port name or range (e.g. "ge-0/0/0-10")
	PortConfig map[string]SwitchPortConfig `pulumi:"portConfig"`
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
	// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
	// maximum 4 port mirrorings is allowed
	PortMirroring map[string]SwitchPortMirroring `pulumi:"portMirroring"`
	// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
	PortUsages map[string]SwitchPortUsages `pulumi:"portUsages"`
	// Junos Radius config
	RadiusConfig *SwitchRadiusConfig `pulumi:"radiusConfig"`
	RemoteSyslog *SwitchRemoteSyslog `pulumi:"remoteSyslog"`
	Role         *string             `pulumi:"role"`
	// used for OSPF / BGP / EVPN
	RouterId   *string           `pulumi:"routerId"`
	SiteId     string            `pulumi:"siteId"`
	SnmpConfig *SwitchSnmpConfig `pulumi:"snmpConfig"`
	StpConfig  *SwitchStpConfig  `pulumi:"stpConfig"`
	// Switch settings
	SwitchMgmt *SwitchSwitchMgmt `pulumi:"switchMgmt"`
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp *bool `pulumi:"useRouterIdAsSourceIp"`
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars map[string]string `pulumi:"vars"`
	// required for preprovisioned Virtual Chassis
	VirtualChassis *SwitchVirtualChassis `pulumi:"virtualChassis"`
	VrfConfig      *SwitchVrfConfig      `pulumi:"vrfConfig"`
	// Property key is the network name
	VrfInstances map[string]SwitchVrfInstances `pulumi:"vrfInstances"`
	// Junos VRRP config
	VrrpConfig *SwitchVrrpConfig `pulumi:"vrrpConfig"`
	// x in pixel
	X *float64 `pulumi:"x"`
	// y in pixel
	Y *float64 `pulumi:"y"`
}

// The set of arguments for constructing a Switch resource.
type SwitchArgs struct {
	AclPolicies SwitchAclPolicyArrayInput
	// ACL Tags to identify traffic source or destination. Key name is the tag name
	AclTags SwitchAclTagsMapInput
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds pulumi.StringArrayInput
	DeviceId             pulumi.StringInput
	DhcpSnooping         SwitchDhcpSnoopingPtrInput
	DhcpdConfig          SwitchDhcpdConfigPtrInput
	// for a claimed switch, we control the configs by default. This option (disables the behavior)
	DisableAutoConfig pulumi.BoolPtrInput
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsServers pulumi.StringArrayInput
	// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
	DnsSuffixes pulumi.StringArrayInput
	ExtraRoutes SwitchExtraRoutesMapInput
	// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
	ExtraRoutes6 SwitchExtraRoutes6MapInput
	// Junos IP Config
	IpConfig SwitchIpConfigPtrInput
	// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
	// "ge-0/0/0-10")
	LocalPortConfig SwitchLocalPortConfigMapInput
	// for an adopted switch, we don’t overwrite their existing configs automatically
	Managed pulumi.BoolPtrInput
	// map where the device belongs to
	MapId pulumi.StringPtrInput
	// enable mistNac to use radsec
	MistNac SwitchMistNacPtrInput
	Name    pulumi.StringPtrInput
	// Property key is network name
	Networks SwitchNetworksMapInput
	Notes    pulumi.StringPtrInput
	// list of NTP servers specific to this device. By default, those in Site Settings will be used
	NtpServers pulumi.StringArrayInput
	// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
	// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
	OobIpConfig SwitchOobIpConfigPtrInput
	// Junos OSPF areas
	OspfAreas SwitchOspfAreasMapInput
	// Property key is the network name. Defines the additional IP Addresses configured on the device.
	OtherIpConfigs SwitchOtherIpConfigsMapInput
	// Property key is the port name or range (e.g. "ge-0/0/0-10")
	PortConfig SwitchPortConfigMapInput
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
	// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
	// maximum 4 port mirrorings is allowed
	PortMirroring SwitchPortMirroringMapInput
	// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
	PortUsages SwitchPortUsagesMapInput
	// Junos Radius config
	RadiusConfig SwitchRadiusConfigPtrInput
	RemoteSyslog SwitchRemoteSyslogPtrInput
	Role         pulumi.StringPtrInput
	// used for OSPF / BGP / EVPN
	RouterId   pulumi.StringPtrInput
	SiteId     pulumi.StringInput
	SnmpConfig SwitchSnmpConfigPtrInput
	StpConfig  SwitchStpConfigPtrInput
	// Switch settings
	SwitchMgmt SwitchSwitchMgmtPtrInput
	// whether to use it for snmp / syslog / tacplus / radius
	UseRouterIdAsSourceIp pulumi.BoolPtrInput
	// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
	Vars pulumi.StringMapInput
	// required for preprovisioned Virtual Chassis
	VirtualChassis SwitchVirtualChassisPtrInput
	VrfConfig      SwitchVrfConfigPtrInput
	// Property key is the network name
	VrfInstances SwitchVrfInstancesMapInput
	// Junos VRRP config
	VrrpConfig SwitchVrrpConfigPtrInput
	// x in pixel
	X pulumi.Float64PtrInput
	// y in pixel
	Y pulumi.Float64PtrInput
}

func (SwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchArgs)(nil)).Elem()
}

type SwitchInput interface {
	pulumi.Input

	ToSwitchOutput() SwitchOutput
	ToSwitchOutputWithContext(ctx context.Context) SwitchOutput
}

func (*Switch) ElementType() reflect.Type {
	return reflect.TypeOf((**Switch)(nil)).Elem()
}

func (i *Switch) ToSwitchOutput() SwitchOutput {
	return i.ToSwitchOutputWithContext(context.Background())
}

func (i *Switch) ToSwitchOutputWithContext(ctx context.Context) SwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchOutput)
}

// SwitchArrayInput is an input type that accepts SwitchArray and SwitchArrayOutput values.
// You can construct a concrete instance of `SwitchArrayInput` via:
//
//	SwitchArray{ SwitchArgs{...} }
type SwitchArrayInput interface {
	pulumi.Input

	ToSwitchArrayOutput() SwitchArrayOutput
	ToSwitchArrayOutputWithContext(context.Context) SwitchArrayOutput
}

type SwitchArray []SwitchInput

func (SwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Switch)(nil)).Elem()
}

func (i SwitchArray) ToSwitchArrayOutput() SwitchArrayOutput {
	return i.ToSwitchArrayOutputWithContext(context.Background())
}

func (i SwitchArray) ToSwitchArrayOutputWithContext(ctx context.Context) SwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchArrayOutput)
}

// SwitchMapInput is an input type that accepts SwitchMap and SwitchMapOutput values.
// You can construct a concrete instance of `SwitchMapInput` via:
//
//	SwitchMap{ "key": SwitchArgs{...} }
type SwitchMapInput interface {
	pulumi.Input

	ToSwitchMapOutput() SwitchMapOutput
	ToSwitchMapOutputWithContext(context.Context) SwitchMapOutput
}

type SwitchMap map[string]SwitchInput

func (SwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Switch)(nil)).Elem()
}

func (i SwitchMap) ToSwitchMapOutput() SwitchMapOutput {
	return i.ToSwitchMapOutputWithContext(context.Background())
}

func (i SwitchMap) ToSwitchMapOutputWithContext(ctx context.Context) SwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchMapOutput)
}

type SwitchOutput struct{ *pulumi.OutputState }

func (SwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Switch)(nil)).Elem()
}

func (o SwitchOutput) ToSwitchOutput() SwitchOutput {
	return o
}

func (o SwitchOutput) ToSwitchOutputWithContext(ctx context.Context) SwitchOutput {
	return o
}

func (o SwitchOutput) AclPolicies() SwitchAclPolicyArrayOutput {
	return o.ApplyT(func(v *Switch) SwitchAclPolicyArrayOutput { return v.AclPolicies }).(SwitchAclPolicyArrayOutput)
}

// ACL Tags to identify traffic source or destination. Key name is the tag name
func (o SwitchOutput) AclTags() SwitchAclTagsMapOutput {
	return o.ApplyT(func(v *Switch) SwitchAclTagsMapOutput { return v.AclTags }).(SwitchAclTagsMapOutput)
}

// additional CLI commands to append to the generated Junos config. **Note**: no check is done
func (o SwitchOutput) AdditionalConfigCmds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringArrayOutput { return v.AdditionalConfigCmds }).(pulumi.StringArrayOutput)
}

func (o SwitchOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.DeviceId }).(pulumi.StringOutput)
}

func (o SwitchOutput) DhcpSnooping() SwitchDhcpSnoopingPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchDhcpSnoopingPtrOutput { return v.DhcpSnooping }).(SwitchDhcpSnoopingPtrOutput)
}

func (o SwitchOutput) DhcpdConfig() SwitchDhcpdConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchDhcpdConfigPtrOutput { return v.DhcpdConfig }).(SwitchDhcpdConfigPtrOutput)
}

// for a claimed switch, we control the configs by default. This option (disables the behavior)
func (o SwitchOutput) DisableAutoConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *Switch) pulumi.BoolOutput { return v.DisableAutoConfig }).(pulumi.BoolOutput)
}

// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
func (o SwitchOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Global dns settings. To keep compatibility, dns settings in `ipConfig` and `oobIpConfig` will overwrite this setting
func (o SwitchOutput) DnsSuffixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringArrayOutput { return v.DnsSuffixes }).(pulumi.StringArrayOutput)
}

func (o SwitchOutput) ExtraRoutes() SwitchExtraRoutesMapOutput {
	return o.ApplyT(func(v *Switch) SwitchExtraRoutesMapOutput { return v.ExtraRoutes }).(SwitchExtraRoutesMapOutput)
}

// Property key is the destination CIDR (e.g. "2a02:1234:420a:10c9::/64")
func (o SwitchOutput) ExtraRoutes6() SwitchExtraRoutes6MapOutput {
	return o.ApplyT(func(v *Switch) SwitchExtraRoutes6MapOutput { return v.ExtraRoutes6 }).(SwitchExtraRoutes6MapOutput)
}

func (o SwitchOutput) Image1Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Image1Url }).(pulumi.StringOutput)
}

func (o SwitchOutput) Image2Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Image2Url }).(pulumi.StringOutput)
}

func (o SwitchOutput) Image3Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Image3Url }).(pulumi.StringOutput)
}

// Junos IP Config
func (o SwitchOutput) IpConfig() SwitchIpConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchIpConfigPtrOutput { return v.IpConfig }).(SwitchIpConfigPtrOutput)
}

// Local port override, overriding the port configuration from `portConfig`. Property key is the port name or range (e.g.
// "ge-0/0/0-10")
func (o SwitchOutput) LocalPortConfig() SwitchLocalPortConfigMapOutput {
	return o.ApplyT(func(v *Switch) SwitchLocalPortConfigMapOutput { return v.LocalPortConfig }).(SwitchLocalPortConfigMapOutput)
}

// device MAC address
func (o SwitchOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// for an adopted switch, we don’t overwrite their existing configs automatically
func (o SwitchOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Switch) pulumi.BoolOutput { return v.Managed }).(pulumi.BoolOutput)
}

// map where the device belongs to
func (o SwitchOutput) MapId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringPtrOutput { return v.MapId }).(pulumi.StringPtrOutput)
}

// enable mistNac to use radsec
func (o SwitchOutput) MistNac() SwitchMistNacPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchMistNacPtrOutput { return v.MistNac }).(SwitchMistNacPtrOutput)
}

// device Model
func (o SwitchOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

func (o SwitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Property key is network name
func (o SwitchOutput) Networks() SwitchNetworksMapOutput {
	return o.ApplyT(func(v *Switch) SwitchNetworksMapOutput { return v.Networks }).(SwitchNetworksMapOutput)
}

func (o SwitchOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringPtrOutput { return v.Notes }).(pulumi.StringPtrOutput)
}

// list of NTP servers specific to this device. By default, those in Site Settings will be used
func (o SwitchOutput) NtpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringArrayOutput { return v.NtpServers }).(pulumi.StringArrayOutput)
}

// Switch OOB IP Config: - If HA configuration: key parameter will be nodeX (eg: node1) - If there are 2 routing engines,
// re1 mgmt IP has to be set separately (if desired): key parameter = `re1`
func (o SwitchOutput) OobIpConfig() SwitchOobIpConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchOobIpConfigPtrOutput { return v.OobIpConfig }).(SwitchOobIpConfigPtrOutput)
}

func (o SwitchOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// Junos OSPF areas
func (o SwitchOutput) OspfAreas() SwitchOspfAreasMapOutput {
	return o.ApplyT(func(v *Switch) SwitchOspfAreasMapOutput { return v.OspfAreas }).(SwitchOspfAreasMapOutput)
}

// Property key is the network name. Defines the additional IP Addresses configured on the device.
func (o SwitchOutput) OtherIpConfigs() SwitchOtherIpConfigsMapOutput {
	return o.ApplyT(func(v *Switch) SwitchOtherIpConfigsMapOutput { return v.OtherIpConfigs }).(SwitchOtherIpConfigsMapOutput)
}

// Property key is the port name or range (e.g. "ge-0/0/0-10")
func (o SwitchOutput) PortConfig() SwitchPortConfigMapOutput {
	return o.ApplyT(func(v *Switch) SwitchPortConfigMapOutput { return v.PortConfig }).(SwitchPortConfigMapOutput)
}

// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes
// interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A
// maximum 4 port mirrorings is allowed
func (o SwitchOutput) PortMirroring() SwitchPortMirroringMapOutput {
	return o.ApplyT(func(v *Switch) SwitchPortMirroringMapOutput { return v.PortMirroring }).(SwitchPortMirroringMapOutput)
}

// Property key is the port usage name. Defines the profiles of port configuration configured on the switch
func (o SwitchOutput) PortUsages() SwitchPortUsagesMapOutput {
	return o.ApplyT(func(v *Switch) SwitchPortUsagesMapOutput { return v.PortUsages }).(SwitchPortUsagesMapOutput)
}

// Junos Radius config
func (o SwitchOutput) RadiusConfig() SwitchRadiusConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchRadiusConfigPtrOutput { return v.RadiusConfig }).(SwitchRadiusConfigPtrOutput)
}

func (o SwitchOutput) RemoteSyslog() SwitchRemoteSyslogPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchRemoteSyslogPtrOutput { return v.RemoteSyslog }).(SwitchRemoteSyslogPtrOutput)
}

func (o SwitchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// used for OSPF / BGP / EVPN
func (o SwitchOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

// device Serial
func (o SwitchOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Serial }).(pulumi.StringOutput)
}

func (o SwitchOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

func (o SwitchOutput) SnmpConfig() SwitchSnmpConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchSnmpConfigPtrOutput { return v.SnmpConfig }).(SwitchSnmpConfigPtrOutput)
}

func (o SwitchOutput) StpConfig() SwitchStpConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchStpConfigPtrOutput { return v.StpConfig }).(SwitchStpConfigPtrOutput)
}

// Switch settings
func (o SwitchOutput) SwitchMgmt() SwitchSwitchMgmtPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchSwitchMgmtPtrOutput { return v.SwitchMgmt }).(SwitchSwitchMgmtPtrOutput)
}

// Device Type. enum: `switch`
func (o SwitchOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// whether to use it for snmp / syslog / tacplus / radius
func (o SwitchOutput) UseRouterIdAsSourceIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *Switch) pulumi.BoolOutput { return v.UseRouterIdAsSourceIp }).(pulumi.BoolOutput)
}

// a dictionary of name->value, the vars can then be used in Wlans. This can overwrite those from Site Vars
func (o SwitchOutput) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Switch) pulumi.StringMapOutput { return v.Vars }).(pulumi.StringMapOutput)
}

// required for preprovisioned Virtual Chassis
func (o SwitchOutput) VirtualChassis() SwitchVirtualChassisPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchVirtualChassisPtrOutput { return v.VirtualChassis }).(SwitchVirtualChassisPtrOutput)
}

func (o SwitchOutput) VrfConfig() SwitchVrfConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchVrfConfigPtrOutput { return v.VrfConfig }).(SwitchVrfConfigPtrOutput)
}

// Property key is the network name
func (o SwitchOutput) VrfInstances() SwitchVrfInstancesMapOutput {
	return o.ApplyT(func(v *Switch) SwitchVrfInstancesMapOutput { return v.VrfInstances }).(SwitchVrfInstancesMapOutput)
}

// Junos VRRP config
func (o SwitchOutput) VrrpConfig() SwitchVrrpConfigPtrOutput {
	return o.ApplyT(func(v *Switch) SwitchVrrpConfigPtrOutput { return v.VrrpConfig }).(SwitchVrrpConfigPtrOutput)
}

// x in pixel
func (o SwitchOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Switch) pulumi.Float64PtrOutput { return v.X }).(pulumi.Float64PtrOutput)
}

// y in pixel
func (o SwitchOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Switch) pulumi.Float64PtrOutput { return v.Y }).(pulumi.Float64PtrOutput)
}

type SwitchArrayOutput struct{ *pulumi.OutputState }

func (SwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Switch)(nil)).Elem()
}

func (o SwitchArrayOutput) ToSwitchArrayOutput() SwitchArrayOutput {
	return o
}

func (o SwitchArrayOutput) ToSwitchArrayOutputWithContext(ctx context.Context) SwitchArrayOutput {
	return o
}

func (o SwitchArrayOutput) Index(i pulumi.IntInput) SwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Switch {
		return vs[0].([]*Switch)[vs[1].(int)]
	}).(SwitchOutput)
}

type SwitchMapOutput struct{ *pulumi.OutputState }

func (SwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Switch)(nil)).Elem()
}

func (o SwitchMapOutput) ToSwitchMapOutput() SwitchMapOutput {
	return o
}

func (o SwitchMapOutput) ToSwitchMapOutputWithContext(ctx context.Context) SwitchMapOutput {
	return o
}

func (o SwitchMapOutput) MapIndex(k pulumi.StringInput) SwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Switch {
		return vs[0].(map[string]*Switch)[vs[1].(string)]
	}).(SwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchInput)(nil)).Elem(), &Switch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchArrayInput)(nil)).Elem(), SwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchMapInput)(nil)).Elem(), SwitchMap{})
	pulumi.RegisterOutputType(SwitchOutput{})
	pulumi.RegisterOutputType(SwitchArrayOutput{})
	pulumi.RegisterOutputType(SwitchMapOutput{})
}
