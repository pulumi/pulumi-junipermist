// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package site

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EvpnTopologyEvpnOptions struct {
	// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
	AutoLoopbackSubnet *string `pulumi:"autoLoopbackSubnet"`
	// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
	AutoLoopbackSubnet6 *string `pulumi:"autoLoopbackSubnet6"`
	// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
	AutoRouterIdSubnet *string `pulumi:"autoRouterIdSubnet"`
	// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
	AutoRouterIdSubnet6 *string `pulumi:"autoRouterIdSubnet6"`
	// optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
	// when `routedAt` != `core`, whether to do virtual-gateway at core as well
	CoreAsBorder *bool                           `pulumi:"coreAsBorder"`
	Overlay      *EvpnTopologyEvpnOptionsOverlay `pulumi:"overlay"`
	// by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
	// if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
	PerVlanVgaV4Mac *bool `pulumi:"perVlanVgaV4Mac"`
	// optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
	RoutedAt *string                          `pulumi:"routedAt"`
	Underlay *EvpnTopologyEvpnOptionsUnderlay `pulumi:"underlay"`
	// optional, for EX9200 only to seggregate virtual-switches
	VsInstances map[string]EvpnTopologyEvpnOptionsVsInstances `pulumi:"vsInstances"`
}

// EvpnTopologyEvpnOptionsInput is an input type that accepts EvpnTopologyEvpnOptionsArgs and EvpnTopologyEvpnOptionsOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsInput` via:
//
//	EvpnTopologyEvpnOptionsArgs{...}
type EvpnTopologyEvpnOptionsInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsOutput() EvpnTopologyEvpnOptionsOutput
	ToEvpnTopologyEvpnOptionsOutputWithContext(context.Context) EvpnTopologyEvpnOptionsOutput
}

type EvpnTopologyEvpnOptionsArgs struct {
	// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
	AutoLoopbackSubnet pulumi.StringPtrInput `pulumi:"autoLoopbackSubnet"`
	// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
	AutoLoopbackSubnet6 pulumi.StringPtrInput `pulumi:"autoLoopbackSubnet6"`
	// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
	AutoRouterIdSubnet pulumi.StringPtrInput `pulumi:"autoRouterIdSubnet"`
	// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
	AutoRouterIdSubnet6 pulumi.StringPtrInput `pulumi:"autoRouterIdSubnet6"`
	// optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
	// when `routedAt` != `core`, whether to do virtual-gateway at core as well
	CoreAsBorder pulumi.BoolPtrInput                    `pulumi:"coreAsBorder"`
	Overlay      EvpnTopologyEvpnOptionsOverlayPtrInput `pulumi:"overlay"`
	// by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
	// if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
	PerVlanVgaV4Mac pulumi.BoolPtrInput `pulumi:"perVlanVgaV4Mac"`
	// optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
	RoutedAt pulumi.StringPtrInput                   `pulumi:"routedAt"`
	Underlay EvpnTopologyEvpnOptionsUnderlayPtrInput `pulumi:"underlay"`
	// optional, for EX9200 only to seggregate virtual-switches
	VsInstances EvpnTopologyEvpnOptionsVsInstancesMapInput `pulumi:"vsInstances"`
}

func (EvpnTopologyEvpnOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptions)(nil)).Elem()
}

func (i EvpnTopologyEvpnOptionsArgs) ToEvpnTopologyEvpnOptionsOutput() EvpnTopologyEvpnOptionsOutput {
	return i.ToEvpnTopologyEvpnOptionsOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsArgs) ToEvpnTopologyEvpnOptionsOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsOutput)
}

func (i EvpnTopologyEvpnOptionsArgs) ToEvpnTopologyEvpnOptionsPtrOutput() EvpnTopologyEvpnOptionsPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsPtrOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsArgs) ToEvpnTopologyEvpnOptionsPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsOutput).ToEvpnTopologyEvpnOptionsPtrOutputWithContext(ctx)
}

// EvpnTopologyEvpnOptionsPtrInput is an input type that accepts EvpnTopologyEvpnOptionsArgs, EvpnTopologyEvpnOptionsPtr and EvpnTopologyEvpnOptionsPtrOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsPtrInput` via:
//
//	        EvpnTopologyEvpnOptionsArgs{...}
//
//	or:
//
//	        nil
type EvpnTopologyEvpnOptionsPtrInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsPtrOutput() EvpnTopologyEvpnOptionsPtrOutput
	ToEvpnTopologyEvpnOptionsPtrOutputWithContext(context.Context) EvpnTopologyEvpnOptionsPtrOutput
}

type evpnTopologyEvpnOptionsPtrType EvpnTopologyEvpnOptionsArgs

func EvpnTopologyEvpnOptionsPtr(v *EvpnTopologyEvpnOptionsArgs) EvpnTopologyEvpnOptionsPtrInput {
	return (*evpnTopologyEvpnOptionsPtrType)(v)
}

func (*evpnTopologyEvpnOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptions)(nil)).Elem()
}

func (i *evpnTopologyEvpnOptionsPtrType) ToEvpnTopologyEvpnOptionsPtrOutput() EvpnTopologyEvpnOptionsPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsPtrOutputWithContext(context.Background())
}

func (i *evpnTopologyEvpnOptionsPtrType) ToEvpnTopologyEvpnOptionsPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsPtrOutput)
}

type EvpnTopologyEvpnOptionsOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptions)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsOutput) ToEvpnTopologyEvpnOptionsOutput() EvpnTopologyEvpnOptionsOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOutput) ToEvpnTopologyEvpnOptionsOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOutput) ToEvpnTopologyEvpnOptionsPtrOutput() EvpnTopologyEvpnOptionsPtrOutput {
	return o.ToEvpnTopologyEvpnOptionsPtrOutputWithContext(context.Background())
}

func (o EvpnTopologyEvpnOptionsOutput) ToEvpnTopologyEvpnOptionsPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EvpnTopologyEvpnOptions) *EvpnTopologyEvpnOptions {
		return &v
	}).(EvpnTopologyEvpnOptionsPtrOutput)
}

// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
func (o EvpnTopologyEvpnOptionsOutput) AutoLoopbackSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *string { return v.AutoLoopbackSubnet }).(pulumi.StringPtrOutput)
}

// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
func (o EvpnTopologyEvpnOptionsOutput) AutoLoopbackSubnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *string { return v.AutoLoopbackSubnet6 }).(pulumi.StringPtrOutput)
}

// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
func (o EvpnTopologyEvpnOptionsOutput) AutoRouterIdSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *string { return v.AutoRouterIdSubnet }).(pulumi.StringPtrOutput)
}

// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
func (o EvpnTopologyEvpnOptionsOutput) AutoRouterIdSubnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *string { return v.AutoRouterIdSubnet6 }).(pulumi.StringPtrOutput)
}

// optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
// when `routedAt` != `core`, whether to do virtual-gateway at core as well
func (o EvpnTopologyEvpnOptionsOutput) CoreAsBorder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *bool { return v.CoreAsBorder }).(pulumi.BoolPtrOutput)
}

func (o EvpnTopologyEvpnOptionsOutput) Overlay() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *EvpnTopologyEvpnOptionsOverlay { return v.Overlay }).(EvpnTopologyEvpnOptionsOverlayPtrOutput)
}

// by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
// if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
func (o EvpnTopologyEvpnOptionsOutput) PerVlanVgaV4Mac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *bool { return v.PerVlanVgaV4Mac }).(pulumi.BoolPtrOutput)
}

// optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
func (o EvpnTopologyEvpnOptionsOutput) RoutedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *string { return v.RoutedAt }).(pulumi.StringPtrOutput)
}

func (o EvpnTopologyEvpnOptionsOutput) Underlay() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) *EvpnTopologyEvpnOptionsUnderlay { return v.Underlay }).(EvpnTopologyEvpnOptionsUnderlayPtrOutput)
}

// optional, for EX9200 only to seggregate virtual-switches
func (o EvpnTopologyEvpnOptionsOutput) VsInstances() EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptions) map[string]EvpnTopologyEvpnOptionsVsInstances { return v.VsInstances }).(EvpnTopologyEvpnOptionsVsInstancesMapOutput)
}

type EvpnTopologyEvpnOptionsPtrOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptions)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsPtrOutput) ToEvpnTopologyEvpnOptionsPtrOutput() EvpnTopologyEvpnOptionsPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsPtrOutput) ToEvpnTopologyEvpnOptionsPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsPtrOutput) Elem() EvpnTopologyEvpnOptionsOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) EvpnTopologyEvpnOptions {
		if v != nil {
			return *v
		}
		var ret EvpnTopologyEvpnOptions
		return ret
	}).(EvpnTopologyEvpnOptionsOutput)
}

// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
func (o EvpnTopologyEvpnOptionsPtrOutput) AutoLoopbackSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoLoopbackSubnet
	}).(pulumi.StringPtrOutput)
}

// optional, for dhcp_relay, unique loopback IPs are required for ERB or IPClos where we can set option-82 server_id-overrides
func (o EvpnTopologyEvpnOptionsPtrOutput) AutoLoopbackSubnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoLoopbackSubnet6
	}).(pulumi.StringPtrOutput)
}

// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
func (o EvpnTopologyEvpnOptionsPtrOutput) AutoRouterIdSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoRouterIdSubnet
	}).(pulumi.StringPtrOutput)
}

// optional, this generates routerId automatically, if specified, `routerIdPrefix` is ignored
func (o EvpnTopologyEvpnOptionsPtrOutput) AutoRouterIdSubnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.AutoRouterIdSubnet6
	}).(pulumi.StringPtrOutput)
}

// optional, for ERB or CLOS, you can either use esilag to upstream routers or to also be the virtual-gateway
// when `routedAt` != `core`, whether to do virtual-gateway at core as well
func (o EvpnTopologyEvpnOptionsPtrOutput) CoreAsBorder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CoreAsBorder
	}).(pulumi.BoolPtrOutput)
}

func (o EvpnTopologyEvpnOptionsPtrOutput) Overlay() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *EvpnTopologyEvpnOptionsOverlay {
		if v == nil {
			return nil
		}
		return v.Overlay
	}).(EvpnTopologyEvpnOptionsOverlayPtrOutput)
}

// by default, JUNOS uses 00-00-5e-00-01-01 as the virtual-gateway-address's v4Mac
// if enabled, 00-00-5e-00-XX-YY will be used (where XX=vlan_id/256, YY=vlan_id%256)
func (o EvpnTopologyEvpnOptionsPtrOutput) PerVlanVgaV4Mac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PerVlanVgaV4Mac
	}).(pulumi.BoolPtrOutput)
}

// optional, where virtual-gateway should reside. enum: `core`, `distribution`, `edge`
func (o EvpnTopologyEvpnOptionsPtrOutput) RoutedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *string {
		if v == nil {
			return nil
		}
		return v.RoutedAt
	}).(pulumi.StringPtrOutput)
}

func (o EvpnTopologyEvpnOptionsPtrOutput) Underlay() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) *EvpnTopologyEvpnOptionsUnderlay {
		if v == nil {
			return nil
		}
		return v.Underlay
	}).(EvpnTopologyEvpnOptionsUnderlayPtrOutput)
}

// optional, for EX9200 only to seggregate virtual-switches
func (o EvpnTopologyEvpnOptionsPtrOutput) VsInstances() EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptions) map[string]EvpnTopologyEvpnOptionsVsInstances {
		if v == nil {
			return nil
		}
		return v.VsInstances
	}).(EvpnTopologyEvpnOptionsVsInstancesMapOutput)
}

type EvpnTopologyEvpnOptionsOverlay struct {
	// Overlay BGP Local AS Number
	As *int `pulumi:"as"`
}

// EvpnTopologyEvpnOptionsOverlayInput is an input type that accepts EvpnTopologyEvpnOptionsOverlayArgs and EvpnTopologyEvpnOptionsOverlayOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsOverlayInput` via:
//
//	EvpnTopologyEvpnOptionsOverlayArgs{...}
type EvpnTopologyEvpnOptionsOverlayInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsOverlayOutput() EvpnTopologyEvpnOptionsOverlayOutput
	ToEvpnTopologyEvpnOptionsOverlayOutputWithContext(context.Context) EvpnTopologyEvpnOptionsOverlayOutput
}

type EvpnTopologyEvpnOptionsOverlayArgs struct {
	// Overlay BGP Local AS Number
	As pulumi.IntPtrInput `pulumi:"as"`
}

func (EvpnTopologyEvpnOptionsOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsOverlay)(nil)).Elem()
}

func (i EvpnTopologyEvpnOptionsOverlayArgs) ToEvpnTopologyEvpnOptionsOverlayOutput() EvpnTopologyEvpnOptionsOverlayOutput {
	return i.ToEvpnTopologyEvpnOptionsOverlayOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsOverlayArgs) ToEvpnTopologyEvpnOptionsOverlayOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsOverlayOutput)
}

func (i EvpnTopologyEvpnOptionsOverlayArgs) ToEvpnTopologyEvpnOptionsOverlayPtrOutput() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsOverlayArgs) ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsOverlayOutput).ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(ctx)
}

// EvpnTopologyEvpnOptionsOverlayPtrInput is an input type that accepts EvpnTopologyEvpnOptionsOverlayArgs, EvpnTopologyEvpnOptionsOverlayPtr and EvpnTopologyEvpnOptionsOverlayPtrOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsOverlayPtrInput` via:
//
//	        EvpnTopologyEvpnOptionsOverlayArgs{...}
//
//	or:
//
//	        nil
type EvpnTopologyEvpnOptionsOverlayPtrInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsOverlayPtrOutput() EvpnTopologyEvpnOptionsOverlayPtrOutput
	ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(context.Context) EvpnTopologyEvpnOptionsOverlayPtrOutput
}

type evpnTopologyEvpnOptionsOverlayPtrType EvpnTopologyEvpnOptionsOverlayArgs

func EvpnTopologyEvpnOptionsOverlayPtr(v *EvpnTopologyEvpnOptionsOverlayArgs) EvpnTopologyEvpnOptionsOverlayPtrInput {
	return (*evpnTopologyEvpnOptionsOverlayPtrType)(v)
}

func (*evpnTopologyEvpnOptionsOverlayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptionsOverlay)(nil)).Elem()
}

func (i *evpnTopologyEvpnOptionsOverlayPtrType) ToEvpnTopologyEvpnOptionsOverlayPtrOutput() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(context.Background())
}

func (i *evpnTopologyEvpnOptionsOverlayPtrType) ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsOverlayPtrOutput)
}

type EvpnTopologyEvpnOptionsOverlayOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsOverlay)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsOverlayOutput) ToEvpnTopologyEvpnOptionsOverlayOutput() EvpnTopologyEvpnOptionsOverlayOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOverlayOutput) ToEvpnTopologyEvpnOptionsOverlayOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOverlayOutput) ToEvpnTopologyEvpnOptionsOverlayPtrOutput() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o.ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(context.Background())
}

func (o EvpnTopologyEvpnOptionsOverlayOutput) ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EvpnTopologyEvpnOptionsOverlay) *EvpnTopologyEvpnOptionsOverlay {
		return &v
	}).(EvpnTopologyEvpnOptionsOverlayPtrOutput)
}

// Overlay BGP Local AS Number
func (o EvpnTopologyEvpnOptionsOverlayOutput) As() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsOverlay) *int { return v.As }).(pulumi.IntPtrOutput)
}

type EvpnTopologyEvpnOptionsOverlayPtrOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsOverlayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptionsOverlay)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsOverlayPtrOutput) ToEvpnTopologyEvpnOptionsOverlayPtrOutput() EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOverlayPtrOutput) ToEvpnTopologyEvpnOptionsOverlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsOverlayPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsOverlayPtrOutput) Elem() EvpnTopologyEvpnOptionsOverlayOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsOverlay) EvpnTopologyEvpnOptionsOverlay {
		if v != nil {
			return *v
		}
		var ret EvpnTopologyEvpnOptionsOverlay
		return ret
	}).(EvpnTopologyEvpnOptionsOverlayOutput)
}

// Overlay BGP Local AS Number
func (o EvpnTopologyEvpnOptionsOverlayPtrOutput) As() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsOverlay) *int {
		if v == nil {
			return nil
		}
		return v.As
	}).(pulumi.IntPtrOutput)
}

type EvpnTopologyEvpnOptionsUnderlay struct {
	// Underlay BGP Base AS Number
	AsBase         *int    `pulumi:"asBase"`
	RoutedIdPrefix *string `pulumi:"routedIdPrefix"`
	// underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
	Subnet *string `pulumi:"subnet"`
	// if v6 is desired for underlay
	UseIpv6 *bool `pulumi:"useIpv6"`
}

// EvpnTopologyEvpnOptionsUnderlayInput is an input type that accepts EvpnTopologyEvpnOptionsUnderlayArgs and EvpnTopologyEvpnOptionsUnderlayOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsUnderlayInput` via:
//
//	EvpnTopologyEvpnOptionsUnderlayArgs{...}
type EvpnTopologyEvpnOptionsUnderlayInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsUnderlayOutput() EvpnTopologyEvpnOptionsUnderlayOutput
	ToEvpnTopologyEvpnOptionsUnderlayOutputWithContext(context.Context) EvpnTopologyEvpnOptionsUnderlayOutput
}

type EvpnTopologyEvpnOptionsUnderlayArgs struct {
	// Underlay BGP Base AS Number
	AsBase         pulumi.IntPtrInput    `pulumi:"asBase"`
	RoutedIdPrefix pulumi.StringPtrInput `pulumi:"routedIdPrefix"`
	// underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// if v6 is desired for underlay
	UseIpv6 pulumi.BoolPtrInput `pulumi:"useIpv6"`
}

func (EvpnTopologyEvpnOptionsUnderlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsUnderlay)(nil)).Elem()
}

func (i EvpnTopologyEvpnOptionsUnderlayArgs) ToEvpnTopologyEvpnOptionsUnderlayOutput() EvpnTopologyEvpnOptionsUnderlayOutput {
	return i.ToEvpnTopologyEvpnOptionsUnderlayOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsUnderlayArgs) ToEvpnTopologyEvpnOptionsUnderlayOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsUnderlayOutput)
}

func (i EvpnTopologyEvpnOptionsUnderlayArgs) ToEvpnTopologyEvpnOptionsUnderlayPtrOutput() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsUnderlayArgs) ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsUnderlayOutput).ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(ctx)
}

// EvpnTopologyEvpnOptionsUnderlayPtrInput is an input type that accepts EvpnTopologyEvpnOptionsUnderlayArgs, EvpnTopologyEvpnOptionsUnderlayPtr and EvpnTopologyEvpnOptionsUnderlayPtrOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsUnderlayPtrInput` via:
//
//	        EvpnTopologyEvpnOptionsUnderlayArgs{...}
//
//	or:
//
//	        nil
type EvpnTopologyEvpnOptionsUnderlayPtrInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsUnderlayPtrOutput() EvpnTopologyEvpnOptionsUnderlayPtrOutput
	ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(context.Context) EvpnTopologyEvpnOptionsUnderlayPtrOutput
}

type evpnTopologyEvpnOptionsUnderlayPtrType EvpnTopologyEvpnOptionsUnderlayArgs

func EvpnTopologyEvpnOptionsUnderlayPtr(v *EvpnTopologyEvpnOptionsUnderlayArgs) EvpnTopologyEvpnOptionsUnderlayPtrInput {
	return (*evpnTopologyEvpnOptionsUnderlayPtrType)(v)
}

func (*evpnTopologyEvpnOptionsUnderlayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptionsUnderlay)(nil)).Elem()
}

func (i *evpnTopologyEvpnOptionsUnderlayPtrType) ToEvpnTopologyEvpnOptionsUnderlayPtrOutput() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return i.ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(context.Background())
}

func (i *evpnTopologyEvpnOptionsUnderlayPtrType) ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsUnderlayPtrOutput)
}

type EvpnTopologyEvpnOptionsUnderlayOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsUnderlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsUnderlay)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsUnderlayOutput) ToEvpnTopologyEvpnOptionsUnderlayOutput() EvpnTopologyEvpnOptionsUnderlayOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsUnderlayOutput) ToEvpnTopologyEvpnOptionsUnderlayOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsUnderlayOutput) ToEvpnTopologyEvpnOptionsUnderlayPtrOutput() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o.ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(context.Background())
}

func (o EvpnTopologyEvpnOptionsUnderlayOutput) ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EvpnTopologyEvpnOptionsUnderlay) *EvpnTopologyEvpnOptionsUnderlay {
		return &v
	}).(EvpnTopologyEvpnOptionsUnderlayPtrOutput)
}

// Underlay BGP Base AS Number
func (o EvpnTopologyEvpnOptionsUnderlayOutput) AsBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsUnderlay) *int { return v.AsBase }).(pulumi.IntPtrOutput)
}

func (o EvpnTopologyEvpnOptionsUnderlayOutput) RoutedIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsUnderlay) *string { return v.RoutedIdPrefix }).(pulumi.StringPtrOutput)
}

// underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
func (o EvpnTopologyEvpnOptionsUnderlayOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsUnderlay) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// if v6 is desired for underlay
func (o EvpnTopologyEvpnOptionsUnderlayOutput) UseIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsUnderlay) *bool { return v.UseIpv6 }).(pulumi.BoolPtrOutput)
}

type EvpnTopologyEvpnOptionsUnderlayPtrOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsUnderlayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnTopologyEvpnOptionsUnderlay)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) ToEvpnTopologyEvpnOptionsUnderlayPtrOutput() EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) ToEvpnTopologyEvpnOptionsUnderlayPtrOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsUnderlayPtrOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) Elem() EvpnTopologyEvpnOptionsUnderlayOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsUnderlay) EvpnTopologyEvpnOptionsUnderlay {
		if v != nil {
			return *v
		}
		var ret EvpnTopologyEvpnOptionsUnderlay
		return ret
	}).(EvpnTopologyEvpnOptionsUnderlayOutput)
}

// Underlay BGP Base AS Number
func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) AsBase() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsUnderlay) *int {
		if v == nil {
			return nil
		}
		return v.AsBase
	}).(pulumi.IntPtrOutput)
}

func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) RoutedIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsUnderlay) *string {
		if v == nil {
			return nil
		}
		return v.RoutedIdPrefix
	}).(pulumi.StringPtrOutput)
}

// underlay subnet, by default, `10.255.240.0/20`, or `fd31:5700::/64` for ipv6
func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsUnderlay) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// if v6 is desired for underlay
func (o EvpnTopologyEvpnOptionsUnderlayPtrOutput) UseIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EvpnTopologyEvpnOptionsUnderlay) *bool {
		if v == nil {
			return nil
		}
		return v.UseIpv6
	}).(pulumi.BoolPtrOutput)
}

type EvpnTopologyEvpnOptionsVsInstances struct {
	Networks []string `pulumi:"networks"`
}

// EvpnTopologyEvpnOptionsVsInstancesInput is an input type that accepts EvpnTopologyEvpnOptionsVsInstancesArgs and EvpnTopologyEvpnOptionsVsInstancesOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsVsInstancesInput` via:
//
//	EvpnTopologyEvpnOptionsVsInstancesArgs{...}
type EvpnTopologyEvpnOptionsVsInstancesInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsVsInstancesOutput() EvpnTopologyEvpnOptionsVsInstancesOutput
	ToEvpnTopologyEvpnOptionsVsInstancesOutputWithContext(context.Context) EvpnTopologyEvpnOptionsVsInstancesOutput
}

type EvpnTopologyEvpnOptionsVsInstancesArgs struct {
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (EvpnTopologyEvpnOptionsVsInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsVsInstances)(nil)).Elem()
}

func (i EvpnTopologyEvpnOptionsVsInstancesArgs) ToEvpnTopologyEvpnOptionsVsInstancesOutput() EvpnTopologyEvpnOptionsVsInstancesOutput {
	return i.ToEvpnTopologyEvpnOptionsVsInstancesOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsVsInstancesArgs) ToEvpnTopologyEvpnOptionsVsInstancesOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsVsInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsVsInstancesOutput)
}

// EvpnTopologyEvpnOptionsVsInstancesMapInput is an input type that accepts EvpnTopologyEvpnOptionsVsInstancesMap and EvpnTopologyEvpnOptionsVsInstancesMapOutput values.
// You can construct a concrete instance of `EvpnTopologyEvpnOptionsVsInstancesMapInput` via:
//
//	EvpnTopologyEvpnOptionsVsInstancesMap{ "key": EvpnTopologyEvpnOptionsVsInstancesArgs{...} }
type EvpnTopologyEvpnOptionsVsInstancesMapInput interface {
	pulumi.Input

	ToEvpnTopologyEvpnOptionsVsInstancesMapOutput() EvpnTopologyEvpnOptionsVsInstancesMapOutput
	ToEvpnTopologyEvpnOptionsVsInstancesMapOutputWithContext(context.Context) EvpnTopologyEvpnOptionsVsInstancesMapOutput
}

type EvpnTopologyEvpnOptionsVsInstancesMap map[string]EvpnTopologyEvpnOptionsVsInstancesInput

func (EvpnTopologyEvpnOptionsVsInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EvpnTopologyEvpnOptionsVsInstances)(nil)).Elem()
}

func (i EvpnTopologyEvpnOptionsVsInstancesMap) ToEvpnTopologyEvpnOptionsVsInstancesMapOutput() EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return i.ToEvpnTopologyEvpnOptionsVsInstancesMapOutputWithContext(context.Background())
}

func (i EvpnTopologyEvpnOptionsVsInstancesMap) ToEvpnTopologyEvpnOptionsVsInstancesMapOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologyEvpnOptionsVsInstancesMapOutput)
}

type EvpnTopologyEvpnOptionsVsInstancesOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsVsInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologyEvpnOptionsVsInstances)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsVsInstancesOutput) ToEvpnTopologyEvpnOptionsVsInstancesOutput() EvpnTopologyEvpnOptionsVsInstancesOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsVsInstancesOutput) ToEvpnTopologyEvpnOptionsVsInstancesOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsVsInstancesOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsVsInstancesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EvpnTopologyEvpnOptionsVsInstances) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type EvpnTopologyEvpnOptionsVsInstancesMapOutput struct{ *pulumi.OutputState }

func (EvpnTopologyEvpnOptionsVsInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EvpnTopologyEvpnOptionsVsInstances)(nil)).Elem()
}

func (o EvpnTopologyEvpnOptionsVsInstancesMapOutput) ToEvpnTopologyEvpnOptionsVsInstancesMapOutput() EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsVsInstancesMapOutput) ToEvpnTopologyEvpnOptionsVsInstancesMapOutputWithContext(ctx context.Context) EvpnTopologyEvpnOptionsVsInstancesMapOutput {
	return o
}

func (o EvpnTopologyEvpnOptionsVsInstancesMapOutput) MapIndex(k pulumi.StringInput) EvpnTopologyEvpnOptionsVsInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EvpnTopologyEvpnOptionsVsInstances {
		return vs[0].(map[string]EvpnTopologyEvpnOptionsVsInstances)[vs[1].(string)]
	}).(EvpnTopologyEvpnOptionsVsInstancesOutput)
}

type EvpnTopologySwitches struct {
	DeviceprofileId *string `pulumi:"deviceprofileId"`
	EvpnId          *int    `pulumi:"evpnId"`
	Mac             *string `pulumi:"mac"`
	Model           *string `pulumi:"model"`
	// optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
	//   * for CLOS, to group dist / access switches into pods
	//   * for ERB/CRB, to group dist / esilag-access into pods
	Pod *int `pulumi:"pod"`
	// by default, core switches are assumed to be connecting all pods.
	// if you want to limit the pods, you can specify pods.
	Pods []int `pulumi:"pods"`
	// use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
	Role     string  `pulumi:"role"`
	RouterId *string `pulumi:"routerId"`
	SiteId   *string `pulumi:"siteId"`
}

// EvpnTopologySwitchesInput is an input type that accepts EvpnTopologySwitchesArgs and EvpnTopologySwitchesOutput values.
// You can construct a concrete instance of `EvpnTopologySwitchesInput` via:
//
//	EvpnTopologySwitchesArgs{...}
type EvpnTopologySwitchesInput interface {
	pulumi.Input

	ToEvpnTopologySwitchesOutput() EvpnTopologySwitchesOutput
	ToEvpnTopologySwitchesOutputWithContext(context.Context) EvpnTopologySwitchesOutput
}

type EvpnTopologySwitchesArgs struct {
	DeviceprofileId pulumi.StringPtrInput `pulumi:"deviceprofileId"`
	EvpnId          pulumi.IntPtrInput    `pulumi:"evpnId"`
	Mac             pulumi.StringPtrInput `pulumi:"mac"`
	Model           pulumi.StringPtrInput `pulumi:"model"`
	// optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
	//   * for CLOS, to group dist / access switches into pods
	//   * for ERB/CRB, to group dist / esilag-access into pods
	Pod pulumi.IntPtrInput `pulumi:"pod"`
	// by default, core switches are assumed to be connecting all pods.
	// if you want to limit the pods, you can specify pods.
	Pods pulumi.IntArrayInput `pulumi:"pods"`
	// use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
	Role     pulumi.StringInput    `pulumi:"role"`
	RouterId pulumi.StringPtrInput `pulumi:"routerId"`
	SiteId   pulumi.StringPtrInput `pulumi:"siteId"`
}

func (EvpnTopologySwitchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologySwitches)(nil)).Elem()
}

func (i EvpnTopologySwitchesArgs) ToEvpnTopologySwitchesOutput() EvpnTopologySwitchesOutput {
	return i.ToEvpnTopologySwitchesOutputWithContext(context.Background())
}

func (i EvpnTopologySwitchesArgs) ToEvpnTopologySwitchesOutputWithContext(ctx context.Context) EvpnTopologySwitchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologySwitchesOutput)
}

// EvpnTopologySwitchesMapInput is an input type that accepts EvpnTopologySwitchesMap and EvpnTopologySwitchesMapOutput values.
// You can construct a concrete instance of `EvpnTopologySwitchesMapInput` via:
//
//	EvpnTopologySwitchesMap{ "key": EvpnTopologySwitchesArgs{...} }
type EvpnTopologySwitchesMapInput interface {
	pulumi.Input

	ToEvpnTopologySwitchesMapOutput() EvpnTopologySwitchesMapOutput
	ToEvpnTopologySwitchesMapOutputWithContext(context.Context) EvpnTopologySwitchesMapOutput
}

type EvpnTopologySwitchesMap map[string]EvpnTopologySwitchesInput

func (EvpnTopologySwitchesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EvpnTopologySwitches)(nil)).Elem()
}

func (i EvpnTopologySwitchesMap) ToEvpnTopologySwitchesMapOutput() EvpnTopologySwitchesMapOutput {
	return i.ToEvpnTopologySwitchesMapOutputWithContext(context.Background())
}

func (i EvpnTopologySwitchesMap) ToEvpnTopologySwitchesMapOutputWithContext(ctx context.Context) EvpnTopologySwitchesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnTopologySwitchesMapOutput)
}

type EvpnTopologySwitchesOutput struct{ *pulumi.OutputState }

func (EvpnTopologySwitchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvpnTopologySwitches)(nil)).Elem()
}

func (o EvpnTopologySwitchesOutput) ToEvpnTopologySwitchesOutput() EvpnTopologySwitchesOutput {
	return o
}

func (o EvpnTopologySwitchesOutput) ToEvpnTopologySwitchesOutputWithContext(ctx context.Context) EvpnTopologySwitchesOutput {
	return o
}

func (o EvpnTopologySwitchesOutput) DeviceprofileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *string { return v.DeviceprofileId }).(pulumi.StringPtrOutput)
}

func (o EvpnTopologySwitchesOutput) EvpnId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *int { return v.EvpnId }).(pulumi.IntPtrOutput)
}

func (o EvpnTopologySwitchesOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

func (o EvpnTopologySwitchesOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// optionally, for distribution / access / esilag-access, they can be placed into different pods. e.g.
//   - for CLOS, to group dist / access switches into pods
//   - for ERB/CRB, to group dist / esilag-access into pods
func (o EvpnTopologySwitchesOutput) Pod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *int { return v.Pod }).(pulumi.IntPtrOutput)
}

// by default, core switches are assumed to be connecting all pods.
// if you want to limit the pods, you can specify pods.
func (o EvpnTopologySwitchesOutput) Pods() pulumi.IntArrayOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) []int { return v.Pods }).(pulumi.IntArrayOutput)
}

// use `role`==`none` to remove a switch from the topology. enum: `access`, `collapsed-core`, `core`, `distribution`, `esilag-access`, `none`
func (o EvpnTopologySwitchesOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) string { return v.Role }).(pulumi.StringOutput)
}

func (o EvpnTopologySwitchesOutput) RouterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *string { return v.RouterId }).(pulumi.StringPtrOutput)
}

func (o EvpnTopologySwitchesOutput) SiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EvpnTopologySwitches) *string { return v.SiteId }).(pulumi.StringPtrOutput)
}

type EvpnTopologySwitchesMapOutput struct{ *pulumi.OutputState }

func (EvpnTopologySwitchesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EvpnTopologySwitches)(nil)).Elem()
}

func (o EvpnTopologySwitchesMapOutput) ToEvpnTopologySwitchesMapOutput() EvpnTopologySwitchesMapOutput {
	return o
}

func (o EvpnTopologySwitchesMapOutput) ToEvpnTopologySwitchesMapOutputWithContext(ctx context.Context) EvpnTopologySwitchesMapOutput {
	return o
}

func (o EvpnTopologySwitchesMapOutput) MapIndex(k pulumi.StringInput) EvpnTopologySwitchesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EvpnTopologySwitches {
		return vs[0].(map[string]EvpnTopologySwitches)[vs[1].(string)]
	}).(EvpnTopologySwitchesOutput)
}

type NetworktemplateAclPolicy struct {
	// ACL Policy Actions:
	//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	Actions []NetworktemplateAclPolicyAction `pulumi:"actions"`
	Name    *string                          `pulumi:"name"`
	// ACL Policy Source Tags:
	//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	SrcTags []string `pulumi:"srcTags"`
}

// NetworktemplateAclPolicyInput is an input type that accepts NetworktemplateAclPolicyArgs and NetworktemplateAclPolicyOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyInput` via:
//
//	NetworktemplateAclPolicyArgs{...}
type NetworktemplateAclPolicyInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput
	ToNetworktemplateAclPolicyOutputWithContext(context.Context) NetworktemplateAclPolicyOutput
}

type NetworktemplateAclPolicyArgs struct {
	// ACL Policy Actions:
	//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	Actions NetworktemplateAclPolicyActionArrayInput `pulumi:"actions"`
	Name    pulumi.StringPtrInput                    `pulumi:"name"`
	// ACL Policy Source Tags:
	//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
	//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
	SrcTags pulumi.StringArrayInput `pulumi:"srcTags"`
}

func (NetworktemplateAclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicy)(nil)).Elem()
}

func (i NetworktemplateAclPolicyArgs) ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput {
	return i.ToNetworktemplateAclPolicyOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyArgs) ToNetworktemplateAclPolicyOutputWithContext(ctx context.Context) NetworktemplateAclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyOutput)
}

// NetworktemplateAclPolicyArrayInput is an input type that accepts NetworktemplateAclPolicyArray and NetworktemplateAclPolicyArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyArrayInput` via:
//
//	NetworktemplateAclPolicyArray{ NetworktemplateAclPolicyArgs{...} }
type NetworktemplateAclPolicyArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput
	ToNetworktemplateAclPolicyArrayOutputWithContext(context.Context) NetworktemplateAclPolicyArrayOutput
}

type NetworktemplateAclPolicyArray []NetworktemplateAclPolicyInput

func (NetworktemplateAclPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicy)(nil)).Elem()
}

func (i NetworktemplateAclPolicyArray) ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput {
	return i.ToNetworktemplateAclPolicyArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyArray) ToNetworktemplateAclPolicyArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyArrayOutput)
}

type NetworktemplateAclPolicyOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicy)(nil)).Elem()
}

func (o NetworktemplateAclPolicyOutput) ToNetworktemplateAclPolicyOutput() NetworktemplateAclPolicyOutput {
	return o
}

func (o NetworktemplateAclPolicyOutput) ToNetworktemplateAclPolicyOutputWithContext(ctx context.Context) NetworktemplateAclPolicyOutput {
	return o
}

// ACL Policy Actions:
//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
func (o NetworktemplateAclPolicyOutput) Actions() NetworktemplateAclPolicyActionArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) []NetworktemplateAclPolicyAction { return v.Actions }).(NetworktemplateAclPolicyActionArrayOutput)
}

func (o NetworktemplateAclPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ACL Policy Source Tags:
//   - for GBP-based policy, all srcTags and dstTags have to be gbp-based
//   - for ACL-based policy, `network` is required in either the source or destination so that we know where to attach the policy to
func (o NetworktemplateAclPolicyOutput) SrcTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicy) []string { return v.SrcTags }).(pulumi.StringArrayOutput)
}

type NetworktemplateAclPolicyArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicy)(nil)).Elem()
}

func (o NetworktemplateAclPolicyArrayOutput) ToNetworktemplateAclPolicyArrayOutput() NetworktemplateAclPolicyArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyArrayOutput) ToNetworktemplateAclPolicyArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclPolicy {
		return vs[0].([]NetworktemplateAclPolicy)[vs[1].(int)]
	}).(NetworktemplateAclPolicyOutput)
}

type NetworktemplateAclPolicyAction struct {
	// enum: `allow`, `deny`
	Action *string `pulumi:"action"`
	DstTag string  `pulumi:"dstTag"`
}

// NetworktemplateAclPolicyActionInput is an input type that accepts NetworktemplateAclPolicyActionArgs and NetworktemplateAclPolicyActionOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyActionInput` via:
//
//	NetworktemplateAclPolicyActionArgs{...}
type NetworktemplateAclPolicyActionInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput
	ToNetworktemplateAclPolicyActionOutputWithContext(context.Context) NetworktemplateAclPolicyActionOutput
}

type NetworktemplateAclPolicyActionArgs struct {
	// enum: `allow`, `deny`
	Action pulumi.StringPtrInput `pulumi:"action"`
	DstTag pulumi.StringInput    `pulumi:"dstTag"`
}

func (NetworktemplateAclPolicyActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (i NetworktemplateAclPolicyActionArgs) ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput {
	return i.ToNetworktemplateAclPolicyActionOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyActionArgs) ToNetworktemplateAclPolicyActionOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyActionOutput)
}

// NetworktemplateAclPolicyActionArrayInput is an input type that accepts NetworktemplateAclPolicyActionArray and NetworktemplateAclPolicyActionArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclPolicyActionArrayInput` via:
//
//	NetworktemplateAclPolicyActionArray{ NetworktemplateAclPolicyActionArgs{...} }
type NetworktemplateAclPolicyActionArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput
	ToNetworktemplateAclPolicyActionArrayOutputWithContext(context.Context) NetworktemplateAclPolicyActionArrayOutput
}

type NetworktemplateAclPolicyActionArray []NetworktemplateAclPolicyActionInput

func (NetworktemplateAclPolicyActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (i NetworktemplateAclPolicyActionArray) ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput {
	return i.ToNetworktemplateAclPolicyActionArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclPolicyActionArray) ToNetworktemplateAclPolicyActionArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclPolicyActionArrayOutput)
}

type NetworktemplateAclPolicyActionOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (o NetworktemplateAclPolicyActionOutput) ToNetworktemplateAclPolicyActionOutput() NetworktemplateAclPolicyActionOutput {
	return o
}

func (o NetworktemplateAclPolicyActionOutput) ToNetworktemplateAclPolicyActionOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionOutput {
	return o
}

// enum: `allow`, `deny`
func (o NetworktemplateAclPolicyActionOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicyAction) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateAclPolicyActionOutput) DstTag() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateAclPolicyAction) string { return v.DstTag }).(pulumi.StringOutput)
}

type NetworktemplateAclPolicyActionArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclPolicyActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclPolicyAction)(nil)).Elem()
}

func (o NetworktemplateAclPolicyActionArrayOutput) ToNetworktemplateAclPolicyActionArrayOutput() NetworktemplateAclPolicyActionArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyActionArrayOutput) ToNetworktemplateAclPolicyActionArrayOutputWithContext(ctx context.Context) NetworktemplateAclPolicyActionArrayOutput {
	return o
}

func (o NetworktemplateAclPolicyActionArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclPolicyActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclPolicyAction {
		return vs[0].([]NetworktemplateAclPolicyAction)[vs[1].(int)]
	}).(NetworktemplateAclPolicyActionOutput)
}

type NetworktemplateAclTags struct {
	// required if
	//   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
	//   - `type`==`gbpResource`
	//   - `type`==`staticGbp` (applying gbp tag against matching conditions)
	GbpTag *int `pulumi:"gbpTag"`
	// required if
	// - `type`==`mac`
	// - `type`==`staticGbp` if from matching mac
	Macs []string `pulumi:"macs"`
	// if:
	//   * `type`==`mac` (optional. default is `any`)
	//   * `type`==`subnet` (optional. default is `any`)
	//   * `type`==`network`
	//   * `type`==`resource` (optional. default is `any`)
	//   * `type`==`staticGbp` if from matching network (vlan)'
	Network *string `pulumi:"network"`
	// required if:
	//   * `type`==`radiusGroup`
	//   * `type`==`staticGbp`
	//     if from matching radius_group
	RadiusGroup *string `pulumi:"radiusGroup"`
	// if `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
	Specs []NetworktemplateAclTagsSpec `pulumi:"specs"`
	// if
	// - `type`==`subnet`
	// - `type`==`resource` (optional. default is `any`)
	// - `type`==`staticGbp` if from matching subnet
	Subnets []string `pulumi:"subnets"`
	// enum:
	//   * `any`: matching anything not identified
	//   * `dynamicGbp`: from the gbpTag received from RADIUS
	//   * `gbpResource`: can only be used in `dstTags`
	//   * `mac`
	//   * `network`
	//   * `radiusGroup`
	//   * `resource`: can only be used in `dstTags`
	//   * `staticGbp`: applying gbp tag against matching conditions
	//   * `subnet`'
	Type string `pulumi:"type"`
}

// NetworktemplateAclTagsInput is an input type that accepts NetworktemplateAclTagsArgs and NetworktemplateAclTagsOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsInput` via:
//
//	NetworktemplateAclTagsArgs{...}
type NetworktemplateAclTagsInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput
	ToNetworktemplateAclTagsOutputWithContext(context.Context) NetworktemplateAclTagsOutput
}

type NetworktemplateAclTagsArgs struct {
	// required if
	//   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
	//   - `type`==`gbpResource`
	//   - `type`==`staticGbp` (applying gbp tag against matching conditions)
	GbpTag pulumi.IntPtrInput `pulumi:"gbpTag"`
	// required if
	// - `type`==`mac`
	// - `type`==`staticGbp` if from matching mac
	Macs pulumi.StringArrayInput `pulumi:"macs"`
	// if:
	//   * `type`==`mac` (optional. default is `any`)
	//   * `type`==`subnet` (optional. default is `any`)
	//   * `type`==`network`
	//   * `type`==`resource` (optional. default is `any`)
	//   * `type`==`staticGbp` if from matching network (vlan)'
	Network pulumi.StringPtrInput `pulumi:"network"`
	// required if:
	//   * `type`==`radiusGroup`
	//   * `type`==`staticGbp`
	//     if from matching radius_group
	RadiusGroup pulumi.StringPtrInput `pulumi:"radiusGroup"`
	// if `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
	Specs NetworktemplateAclTagsSpecArrayInput `pulumi:"specs"`
	// if
	// - `type`==`subnet`
	// - `type`==`resource` (optional. default is `any`)
	// - `type`==`staticGbp` if from matching subnet
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// enum:
	//   * `any`: matching anything not identified
	//   * `dynamicGbp`: from the gbpTag received from RADIUS
	//   * `gbpResource`: can only be used in `dstTags`
	//   * `mac`
	//   * `network`
	//   * `radiusGroup`
	//   * `resource`: can only be used in `dstTags`
	//   * `staticGbp`: applying gbp tag against matching conditions
	//   * `subnet`'
	Type pulumi.StringInput `pulumi:"type"`
}

func (NetworktemplateAclTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTags)(nil)).Elem()
}

func (i NetworktemplateAclTagsArgs) ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput {
	return i.ToNetworktemplateAclTagsOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsArgs) ToNetworktemplateAclTagsOutputWithContext(ctx context.Context) NetworktemplateAclTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsOutput)
}

// NetworktemplateAclTagsMapInput is an input type that accepts NetworktemplateAclTagsMap and NetworktemplateAclTagsMapOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsMapInput` via:
//
//	NetworktemplateAclTagsMap{ "key": NetworktemplateAclTagsArgs{...} }
type NetworktemplateAclTagsMapInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput
	ToNetworktemplateAclTagsMapOutputWithContext(context.Context) NetworktemplateAclTagsMapOutput
}

type NetworktemplateAclTagsMap map[string]NetworktemplateAclTagsInput

func (NetworktemplateAclTagsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateAclTags)(nil)).Elem()
}

func (i NetworktemplateAclTagsMap) ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput {
	return i.ToNetworktemplateAclTagsMapOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsMap) ToNetworktemplateAclTagsMapOutputWithContext(ctx context.Context) NetworktemplateAclTagsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsMapOutput)
}

type NetworktemplateAclTagsOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTags)(nil)).Elem()
}

func (o NetworktemplateAclTagsOutput) ToNetworktemplateAclTagsOutput() NetworktemplateAclTagsOutput {
	return o
}

func (o NetworktemplateAclTagsOutput) ToNetworktemplateAclTagsOutputWithContext(ctx context.Context) NetworktemplateAclTagsOutput {
	return o
}

// required if
//   - `type`==`dynamicGbp` (gbp_tag received from RADIUS)
//   - `type`==`gbpResource`
//   - `type`==`staticGbp` (applying gbp tag against matching conditions)
func (o NetworktemplateAclTagsOutput) GbpTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *int { return v.GbpTag }).(pulumi.IntPtrOutput)
}

// required if
// - `type`==`mac`
// - `type`==`staticGbp` if from matching mac
func (o NetworktemplateAclTagsOutput) Macs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []string { return v.Macs }).(pulumi.StringArrayOutput)
}

// if:
//   - `type`==`mac` (optional. default is `any`)
//   - `type`==`subnet` (optional. default is `any`)
//   - `type`==`network`
//   - `type`==`resource` (optional. default is `any`)
//   - `type`==`staticGbp` if from matching network (vlan)'
func (o NetworktemplateAclTagsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// required if:
//   - `type`==`radiusGroup`
//   - `type`==`staticGbp`
//     if from matching radius_group
func (o NetworktemplateAclTagsOutput) RadiusGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) *string { return v.RadiusGroup }).(pulumi.StringPtrOutput)
}

// if `type`==`resource` or `type`==`gbpResource`. Empty means unrestricted, i.e. any
func (o NetworktemplateAclTagsOutput) Specs() NetworktemplateAclTagsSpecArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []NetworktemplateAclTagsSpec { return v.Specs }).(NetworktemplateAclTagsSpecArrayOutput)
}

// if
// - `type`==`subnet`
// - `type`==`resource` (optional. default is `any`)
// - `type`==`staticGbp` if from matching subnet
func (o NetworktemplateAclTagsOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// enum:
//   - `any`: matching anything not identified
//   - `dynamicGbp`: from the gbpTag received from RADIUS
//   - `gbpResource`: can only be used in `dstTags`
//   - `mac`
//   - `network`
//   - `radiusGroup`
//   - `resource`: can only be used in `dstTags`
//   - `staticGbp`: applying gbp tag against matching conditions
//   - `subnet`'
func (o NetworktemplateAclTagsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateAclTags) string { return v.Type }).(pulumi.StringOutput)
}

type NetworktemplateAclTagsMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateAclTags)(nil)).Elem()
}

func (o NetworktemplateAclTagsMapOutput) ToNetworktemplateAclTagsMapOutput() NetworktemplateAclTagsMapOutput {
	return o
}

func (o NetworktemplateAclTagsMapOutput) ToNetworktemplateAclTagsMapOutputWithContext(ctx context.Context) NetworktemplateAclTagsMapOutput {
	return o
}

func (o NetworktemplateAclTagsMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateAclTagsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateAclTags {
		return vs[0].(map[string]NetworktemplateAclTags)[vs[1].(string)]
	}).(NetworktemplateAclTagsOutput)
}

type NetworktemplateAclTagsSpec struct {
	// matched dst port, "0" means any
	PortRange *string `pulumi:"portRange"`
	// `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
	Protocol *string `pulumi:"protocol"`
}

// NetworktemplateAclTagsSpecInput is an input type that accepts NetworktemplateAclTagsSpecArgs and NetworktemplateAclTagsSpecOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsSpecInput` via:
//
//	NetworktemplateAclTagsSpecArgs{...}
type NetworktemplateAclTagsSpecInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput
	ToNetworktemplateAclTagsSpecOutputWithContext(context.Context) NetworktemplateAclTagsSpecOutput
}

type NetworktemplateAclTagsSpecArgs struct {
	// matched dst port, "0" means any
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworktemplateAclTagsSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (i NetworktemplateAclTagsSpecArgs) ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput {
	return i.ToNetworktemplateAclTagsSpecOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsSpecArgs) ToNetworktemplateAclTagsSpecOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsSpecOutput)
}

// NetworktemplateAclTagsSpecArrayInput is an input type that accepts NetworktemplateAclTagsSpecArray and NetworktemplateAclTagsSpecArrayOutput values.
// You can construct a concrete instance of `NetworktemplateAclTagsSpecArrayInput` via:
//
//	NetworktemplateAclTagsSpecArray{ NetworktemplateAclTagsSpecArgs{...} }
type NetworktemplateAclTagsSpecArrayInput interface {
	pulumi.Input

	ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput
	ToNetworktemplateAclTagsSpecArrayOutputWithContext(context.Context) NetworktemplateAclTagsSpecArrayOutput
}

type NetworktemplateAclTagsSpecArray []NetworktemplateAclTagsSpecInput

func (NetworktemplateAclTagsSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (i NetworktemplateAclTagsSpecArray) ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput {
	return i.ToNetworktemplateAclTagsSpecArrayOutputWithContext(context.Background())
}

func (i NetworktemplateAclTagsSpecArray) ToNetworktemplateAclTagsSpecArrayOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateAclTagsSpecArrayOutput)
}

type NetworktemplateAclTagsSpecOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (o NetworktemplateAclTagsSpecOutput) ToNetworktemplateAclTagsSpecOutput() NetworktemplateAclTagsSpecOutput {
	return o
}

func (o NetworktemplateAclTagsSpecOutput) ToNetworktemplateAclTagsSpecOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecOutput {
	return o
}

// matched dst port, "0" means any
func (o NetworktemplateAclTagsSpecOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTagsSpec) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// `tcp` / `udp` / `icmp` / `icmp6` / `gre` / `any` / `:protocol_number`, `protocolNumber` is between 1-254, default is `any` `protocolNumber` is between 1-254
func (o NetworktemplateAclTagsSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateAclTagsSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworktemplateAclTagsSpecArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateAclTagsSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateAclTagsSpec)(nil)).Elem()
}

func (o NetworktemplateAclTagsSpecArrayOutput) ToNetworktemplateAclTagsSpecArrayOutput() NetworktemplateAclTagsSpecArrayOutput {
	return o
}

func (o NetworktemplateAclTagsSpecArrayOutput) ToNetworktemplateAclTagsSpecArrayOutputWithContext(ctx context.Context) NetworktemplateAclTagsSpecArrayOutput {
	return o
}

func (o NetworktemplateAclTagsSpecArrayOutput) Index(i pulumi.IntInput) NetworktemplateAclTagsSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateAclTagsSpec {
		return vs[0].([]NetworktemplateAclTagsSpec)[vs[1].(int)]
	}).(NetworktemplateAclTagsSpecOutput)
}

type NetworktemplateDhcpSnooping struct {
	AllNetworks *bool `pulumi:"allNetworks"`
	// Enable for dynamic ARP inspection check
	EnableArpSpoofCheck *bool `pulumi:"enableArpSpoofCheck"`
	// Enable for check for forging source IP address
	EnableIpSourceGuard *bool `pulumi:"enableIpSourceGuard"`
	Enabled             *bool `pulumi:"enabled"`
	// if `allNetworks`==`false`, list of network with DHCP snooping enabled
	Networks []string `pulumi:"networks"`
}

// NetworktemplateDhcpSnoopingInput is an input type that accepts NetworktemplateDhcpSnoopingArgs and NetworktemplateDhcpSnoopingOutput values.
// You can construct a concrete instance of `NetworktemplateDhcpSnoopingInput` via:
//
//	NetworktemplateDhcpSnoopingArgs{...}
type NetworktemplateDhcpSnoopingInput interface {
	pulumi.Input

	ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput
	ToNetworktemplateDhcpSnoopingOutputWithContext(context.Context) NetworktemplateDhcpSnoopingOutput
}

type NetworktemplateDhcpSnoopingArgs struct {
	AllNetworks pulumi.BoolPtrInput `pulumi:"allNetworks"`
	// Enable for dynamic ARP inspection check
	EnableArpSpoofCheck pulumi.BoolPtrInput `pulumi:"enableArpSpoofCheck"`
	// Enable for check for forging source IP address
	EnableIpSourceGuard pulumi.BoolPtrInput `pulumi:"enableIpSourceGuard"`
	Enabled             pulumi.BoolPtrInput `pulumi:"enabled"`
	// if `allNetworks`==`false`, list of network with DHCP snooping enabled
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (NetworktemplateDhcpSnoopingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput {
	return i.ToNetworktemplateDhcpSnoopingOutputWithContext(context.Background())
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingOutput)
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return i.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (i NetworktemplateDhcpSnoopingArgs) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingOutput).ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx)
}

// NetworktemplateDhcpSnoopingPtrInput is an input type that accepts NetworktemplateDhcpSnoopingArgs, NetworktemplateDhcpSnoopingPtr and NetworktemplateDhcpSnoopingPtrOutput values.
// You can construct a concrete instance of `NetworktemplateDhcpSnoopingPtrInput` via:
//
//	        NetworktemplateDhcpSnoopingArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateDhcpSnoopingPtrInput interface {
	pulumi.Input

	ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput
	ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Context) NetworktemplateDhcpSnoopingPtrOutput
}

type networktemplateDhcpSnoopingPtrType NetworktemplateDhcpSnoopingArgs

func NetworktemplateDhcpSnoopingPtr(v *NetworktemplateDhcpSnoopingArgs) NetworktemplateDhcpSnoopingPtrInput {
	return (*networktemplateDhcpSnoopingPtrType)(v)
}

func (*networktemplateDhcpSnoopingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (i *networktemplateDhcpSnoopingPtrType) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return i.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (i *networktemplateDhcpSnoopingPtrType) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateDhcpSnoopingPtrOutput)
}

type NetworktemplateDhcpSnoopingOutput struct{ *pulumi.OutputState }

func (NetworktemplateDhcpSnoopingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingOutput() NetworktemplateDhcpSnoopingOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return o.ToNetworktemplateDhcpSnoopingPtrOutputWithContext(context.Background())
}

func (o NetworktemplateDhcpSnoopingOutput) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateDhcpSnooping) *NetworktemplateDhcpSnooping {
		return &v
	}).(NetworktemplateDhcpSnoopingPtrOutput)
}

func (o NetworktemplateDhcpSnoopingOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.AllNetworks }).(pulumi.BoolPtrOutput)
}

// Enable for dynamic ARP inspection check
func (o NetworktemplateDhcpSnoopingOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.EnableArpSpoofCheck }).(pulumi.BoolPtrOutput)
}

// Enable for check for forging source IP address
func (o NetworktemplateDhcpSnoopingOutput) EnableIpSourceGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.EnableIpSourceGuard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateDhcpSnoopingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// if `allNetworks`==`false`, list of network with DHCP snooping enabled
func (o NetworktemplateDhcpSnoopingOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateDhcpSnooping) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type NetworktemplateDhcpSnoopingPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateDhcpSnoopingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateDhcpSnooping)(nil)).Elem()
}

func (o NetworktemplateDhcpSnoopingPtrOutput) ToNetworktemplateDhcpSnoopingPtrOutput() NetworktemplateDhcpSnoopingPtrOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingPtrOutput) ToNetworktemplateDhcpSnoopingPtrOutputWithContext(ctx context.Context) NetworktemplateDhcpSnoopingPtrOutput {
	return o
}

func (o NetworktemplateDhcpSnoopingPtrOutput) Elem() NetworktemplateDhcpSnoopingOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) NetworktemplateDhcpSnooping {
		if v != nil {
			return *v
		}
		var ret NetworktemplateDhcpSnooping
		return ret
	}).(NetworktemplateDhcpSnoopingOutput)
}

func (o NetworktemplateDhcpSnoopingPtrOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.AllNetworks
	}).(pulumi.BoolPtrOutput)
}

// Enable for dynamic ARP inspection check
func (o NetworktemplateDhcpSnoopingPtrOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.EnableArpSpoofCheck
	}).(pulumi.BoolPtrOutput)
}

// Enable for check for forging source IP address
func (o NetworktemplateDhcpSnoopingPtrOutput) EnableIpSourceGuard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIpSourceGuard
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateDhcpSnoopingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// if `allNetworks`==`false`, list of network with DHCP snooping enabled
func (o NetworktemplateDhcpSnoopingPtrOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateDhcpSnooping) []string {
		if v == nil {
			return nil
		}
		return v.Networks
	}).(pulumi.StringArrayOutput)
}

type NetworktemplateExtraRoutes6 struct {
	// this takes precedence
	Discard       *bool                                               `pulumi:"discard"`
	Metric        *int                                                `pulumi:"metric"`
	NextQualified map[string]NetworktemplateExtraRoutes6NextQualified `pulumi:"nextQualified"`
	NoResolve     *bool                                               `pulumi:"noResolve"`
	Preference    *int                                                `pulumi:"preference"`
	// next-hop IP Address
	Via string `pulumi:"via"`
}

// NetworktemplateExtraRoutes6Input is an input type that accepts NetworktemplateExtraRoutes6Args and NetworktemplateExtraRoutes6Output values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6Input` via:
//
//	NetworktemplateExtraRoutes6Args{...}
type NetworktemplateExtraRoutes6Input interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output
	ToNetworktemplateExtraRoutes6OutputWithContext(context.Context) NetworktemplateExtraRoutes6Output
}

type NetworktemplateExtraRoutes6Args struct {
	// this takes precedence
	Discard       pulumi.BoolPtrInput                              `pulumi:"discard"`
	Metric        pulumi.IntPtrInput                               `pulumi:"metric"`
	NextQualified NetworktemplateExtraRoutes6NextQualifiedMapInput `pulumi:"nextQualified"`
	NoResolve     pulumi.BoolPtrInput                              `pulumi:"noResolve"`
	Preference    pulumi.IntPtrInput                               `pulumi:"preference"`
	// next-hop IP Address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateExtraRoutes6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6Args) ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output {
	return i.ToNetworktemplateExtraRoutes6OutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6Args) ToNetworktemplateExtraRoutes6OutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6Output)
}

// NetworktemplateExtraRoutes6MapInput is an input type that accepts NetworktemplateExtraRoutes6Map and NetworktemplateExtraRoutes6MapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6MapInput` via:
//
//	NetworktemplateExtraRoutes6Map{ "key": NetworktemplateExtraRoutes6Args{...} }
type NetworktemplateExtraRoutes6MapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput
	ToNetworktemplateExtraRoutes6MapOutputWithContext(context.Context) NetworktemplateExtraRoutes6MapOutput
}

type NetworktemplateExtraRoutes6Map map[string]NetworktemplateExtraRoutes6Input

func (NetworktemplateExtraRoutes6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6Map) ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput {
	return i.ToNetworktemplateExtraRoutes6MapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6Map) ToNetworktemplateExtraRoutes6MapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6MapOutput)
}

type NetworktemplateExtraRoutes6Output struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6Output) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6Output) ToNetworktemplateExtraRoutes6Output() NetworktemplateExtraRoutes6Output {
	return o
}

func (o NetworktemplateExtraRoutes6Output) ToNetworktemplateExtraRoutes6OutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6Output {
	return o
}

// this takes precedence
func (o NetworktemplateExtraRoutes6Output) Discard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *bool { return v.Discard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) NextQualified() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) map[string]NetworktemplateExtraRoutes6NextQualified {
		return v.NextQualified
	}).(NetworktemplateExtraRoutes6NextQualifiedMapOutput)
}

func (o NetworktemplateExtraRoutes6Output) NoResolve() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *bool { return v.NoResolve }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutes6Output) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// next-hop IP Address
func (o NetworktemplateExtraRoutes6Output) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateExtraRoutes6MapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6MapOutput) ToNetworktemplateExtraRoutes6MapOutput() NetworktemplateExtraRoutes6MapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6MapOutput) ToNetworktemplateExtraRoutes6MapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6MapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6MapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutes6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes6 {
		return vs[0].(map[string]NetworktemplateExtraRoutes6)[vs[1].(string)]
	}).(NetworktemplateExtraRoutes6Output)
}

type NetworktemplateExtraRoutes6NextQualified struct {
	Metric     *int `pulumi:"metric"`
	Preference *int `pulumi:"preference"`
}

// NetworktemplateExtraRoutes6NextQualifiedInput is an input type that accepts NetworktemplateExtraRoutes6NextQualifiedArgs and NetworktemplateExtraRoutes6NextQualifiedOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6NextQualifiedInput` via:
//
//	NetworktemplateExtraRoutes6NextQualifiedArgs{...}
type NetworktemplateExtraRoutes6NextQualifiedInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput
	ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput
}

type NetworktemplateExtraRoutes6NextQualifiedArgs struct {
	Metric     pulumi.IntPtrInput `pulumi:"metric"`
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (NetworktemplateExtraRoutes6NextQualifiedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6NextQualifiedArgs) ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput {
	return i.ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6NextQualifiedArgs) ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6NextQualifiedOutput)
}

// NetworktemplateExtraRoutes6NextQualifiedMapInput is an input type that accepts NetworktemplateExtraRoutes6NextQualifiedMap and NetworktemplateExtraRoutes6NextQualifiedMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutes6NextQualifiedMapInput` via:
//
//	NetworktemplateExtraRoutes6NextQualifiedMap{ "key": NetworktemplateExtraRoutes6NextQualifiedArgs{...} }
type NetworktemplateExtraRoutes6NextQualifiedMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput
	ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput
}

type NetworktemplateExtraRoutes6NextQualifiedMap map[string]NetworktemplateExtraRoutes6NextQualifiedInput

func (NetworktemplateExtraRoutes6NextQualifiedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutes6NextQualifiedMap) ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return i.ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutes6NextQualifiedMap) ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutes6NextQualifiedMapOutput)
}

type NetworktemplateExtraRoutes6NextQualifiedOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6NextQualifiedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) ToNetworktemplateExtraRoutes6NextQualifiedOutput() NetworktemplateExtraRoutes6NextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) ToNetworktemplateExtraRoutes6NextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6NextQualified) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutes6NextQualifiedOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes6NextQualified) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type NetworktemplateExtraRoutes6NextQualifiedMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutes6NextQualifiedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes6NextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) ToNetworktemplateExtraRoutes6NextQualifiedMapOutput() NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) ToNetworktemplateExtraRoutes6NextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutes6NextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutes6NextQualifiedMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutes6NextQualifiedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes6NextQualified {
		return vs[0].(map[string]NetworktemplateExtraRoutes6NextQualified)[vs[1].(string)]
	}).(NetworktemplateExtraRoutes6NextQualifiedOutput)
}

type NetworktemplateExtraRoutes struct {
	// this takes precedence
	Discard       *bool                                              `pulumi:"discard"`
	Metric        *int                                               `pulumi:"metric"`
	NextQualified map[string]NetworktemplateExtraRoutesNextQualified `pulumi:"nextQualified"`
	NoResolve     *bool                                              `pulumi:"noResolve"`
	Preference    *int                                               `pulumi:"preference"`
	// next-hop IP Address
	Via string `pulumi:"via"`
}

// NetworktemplateExtraRoutesInput is an input type that accepts NetworktemplateExtraRoutesArgs and NetworktemplateExtraRoutesOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesInput` via:
//
//	NetworktemplateExtraRoutesArgs{...}
type NetworktemplateExtraRoutesInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput
	ToNetworktemplateExtraRoutesOutputWithContext(context.Context) NetworktemplateExtraRoutesOutput
}

type NetworktemplateExtraRoutesArgs struct {
	// this takes precedence
	Discard       pulumi.BoolPtrInput                             `pulumi:"discard"`
	Metric        pulumi.IntPtrInput                              `pulumi:"metric"`
	NextQualified NetworktemplateExtraRoutesNextQualifiedMapInput `pulumi:"nextQualified"`
	NoResolve     pulumi.BoolPtrInput                             `pulumi:"noResolve"`
	Preference    pulumi.IntPtrInput                              `pulumi:"preference"`
	// next-hop IP Address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesArgs) ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput {
	return i.ToNetworktemplateExtraRoutesOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesArgs) ToNetworktemplateExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesOutput)
}

// NetworktemplateExtraRoutesMapInput is an input type that accepts NetworktemplateExtraRoutesMap and NetworktemplateExtraRoutesMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesMapInput` via:
//
//	NetworktemplateExtraRoutesMap{ "key": NetworktemplateExtraRoutesArgs{...} }
type NetworktemplateExtraRoutesMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput
	ToNetworktemplateExtraRoutesMapOutputWithContext(context.Context) NetworktemplateExtraRoutesMapOutput
}

type NetworktemplateExtraRoutesMap map[string]NetworktemplateExtraRoutesInput

func (NetworktemplateExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesMap) ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput {
	return i.ToNetworktemplateExtraRoutesMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesMap) ToNetworktemplateExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesMapOutput)
}

type NetworktemplateExtraRoutesOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesOutput) ToNetworktemplateExtraRoutesOutput() NetworktemplateExtraRoutesOutput {
	return o
}

func (o NetworktemplateExtraRoutesOutput) ToNetworktemplateExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesOutput {
	return o
}

// this takes precedence
func (o NetworktemplateExtraRoutesOutput) Discard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *bool { return v.Discard }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) NextQualified() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) map[string]NetworktemplateExtraRoutesNextQualified {
		return v.NextQualified
	}).(NetworktemplateExtraRoutesNextQualifiedMapOutput)
}

func (o NetworktemplateExtraRoutesOutput) NoResolve() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *bool { return v.NoResolve }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateExtraRoutesOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

// next-hop IP Address
func (o NetworktemplateExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesMapOutput) ToNetworktemplateExtraRoutesMapOutput() NetworktemplateExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesMapOutput) ToNetworktemplateExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutes {
		return vs[0].(map[string]NetworktemplateExtraRoutes)[vs[1].(string)]
	}).(NetworktemplateExtraRoutesOutput)
}

type NetworktemplateExtraRoutesNextQualified struct {
	Metric     *int `pulumi:"metric"`
	Preference *int `pulumi:"preference"`
}

// NetworktemplateExtraRoutesNextQualifiedInput is an input type that accepts NetworktemplateExtraRoutesNextQualifiedArgs and NetworktemplateExtraRoutesNextQualifiedOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesNextQualifiedInput` via:
//
//	NetworktemplateExtraRoutesNextQualifiedArgs{...}
type NetworktemplateExtraRoutesNextQualifiedInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput
	ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(context.Context) NetworktemplateExtraRoutesNextQualifiedOutput
}

type NetworktemplateExtraRoutesNextQualifiedArgs struct {
	Metric     pulumi.IntPtrInput `pulumi:"metric"`
	Preference pulumi.IntPtrInput `pulumi:"preference"`
}

func (NetworktemplateExtraRoutesNextQualifiedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesNextQualifiedArgs) ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput {
	return i.ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesNextQualifiedArgs) ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesNextQualifiedOutput)
}

// NetworktemplateExtraRoutesNextQualifiedMapInput is an input type that accepts NetworktemplateExtraRoutesNextQualifiedMap and NetworktemplateExtraRoutesNextQualifiedMapOutput values.
// You can construct a concrete instance of `NetworktemplateExtraRoutesNextQualifiedMapInput` via:
//
//	NetworktemplateExtraRoutesNextQualifiedMap{ "key": NetworktemplateExtraRoutesNextQualifiedArgs{...} }
type NetworktemplateExtraRoutesNextQualifiedMapInput interface {
	pulumi.Input

	ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput
	ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput
}

type NetworktemplateExtraRoutesNextQualifiedMap map[string]NetworktemplateExtraRoutesNextQualifiedInput

func (NetworktemplateExtraRoutesNextQualifiedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (i NetworktemplateExtraRoutesNextQualifiedMap) ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return i.ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(context.Background())
}

func (i NetworktemplateExtraRoutesNextQualifiedMap) ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateExtraRoutesNextQualifiedMapOutput)
}

type NetworktemplateExtraRoutesNextQualifiedOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesNextQualifiedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) ToNetworktemplateExtraRoutesNextQualifiedOutput() NetworktemplateExtraRoutesNextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) ToNetworktemplateExtraRoutesNextQualifiedOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutesNextQualified) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateExtraRoutesNextQualifiedOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateExtraRoutesNextQualified) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

type NetworktemplateExtraRoutesNextQualifiedMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateExtraRoutesNextQualifiedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateExtraRoutesNextQualified)(nil)).Elem()
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) ToNetworktemplateExtraRoutesNextQualifiedMapOutput() NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) ToNetworktemplateExtraRoutesNextQualifiedMapOutputWithContext(ctx context.Context) NetworktemplateExtraRoutesNextQualifiedMapOutput {
	return o
}

func (o NetworktemplateExtraRoutesNextQualifiedMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateExtraRoutesNextQualifiedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateExtraRoutesNextQualified {
		return vs[0].(map[string]NetworktemplateExtraRoutesNextQualified)[vs[1].(string)]
	}).(NetworktemplateExtraRoutesNextQualifiedOutput)
}

type NetworktemplateMistNac struct {
	Enabled *bool   `pulumi:"enabled"`
	Network *string `pulumi:"network"`
}

// NetworktemplateMistNacInput is an input type that accepts NetworktemplateMistNacArgs and NetworktemplateMistNacOutput values.
// You can construct a concrete instance of `NetworktemplateMistNacInput` via:
//
//	NetworktemplateMistNacArgs{...}
type NetworktemplateMistNacInput interface {
	pulumi.Input

	ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput
	ToNetworktemplateMistNacOutputWithContext(context.Context) NetworktemplateMistNacOutput
}

type NetworktemplateMistNacArgs struct {
	Enabled pulumi.BoolPtrInput   `pulumi:"enabled"`
	Network pulumi.StringPtrInput `pulumi:"network"`
}

func (NetworktemplateMistNacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateMistNac)(nil)).Elem()
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput {
	return i.ToNetworktemplateMistNacOutputWithContext(context.Background())
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacOutputWithContext(ctx context.Context) NetworktemplateMistNacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacOutput)
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return i.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (i NetworktemplateMistNacArgs) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacOutput).ToNetworktemplateMistNacPtrOutputWithContext(ctx)
}

// NetworktemplateMistNacPtrInput is an input type that accepts NetworktemplateMistNacArgs, NetworktemplateMistNacPtr and NetworktemplateMistNacPtrOutput values.
// You can construct a concrete instance of `NetworktemplateMistNacPtrInput` via:
//
//	        NetworktemplateMistNacArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateMistNacPtrInput interface {
	pulumi.Input

	ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput
	ToNetworktemplateMistNacPtrOutputWithContext(context.Context) NetworktemplateMistNacPtrOutput
}

type networktemplateMistNacPtrType NetworktemplateMistNacArgs

func NetworktemplateMistNacPtr(v *NetworktemplateMistNacArgs) NetworktemplateMistNacPtrInput {
	return (*networktemplateMistNacPtrType)(v)
}

func (*networktemplateMistNacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateMistNac)(nil)).Elem()
}

func (i *networktemplateMistNacPtrType) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return i.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (i *networktemplateMistNacPtrType) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateMistNacPtrOutput)
}

type NetworktemplateMistNacOutput struct{ *pulumi.OutputState }

func (NetworktemplateMistNacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateMistNac)(nil)).Elem()
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacOutput() NetworktemplateMistNacOutput {
	return o
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacOutputWithContext(ctx context.Context) NetworktemplateMistNacOutput {
	return o
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return o.ToNetworktemplateMistNacPtrOutputWithContext(context.Background())
}

func (o NetworktemplateMistNacOutput) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateMistNac) *NetworktemplateMistNac {
		return &v
	}).(NetworktemplateMistNacPtrOutput)
}

func (o NetworktemplateMistNacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateMistNac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateMistNacOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateMistNac) *string { return v.Network }).(pulumi.StringPtrOutput)
}

type NetworktemplateMistNacPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateMistNacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateMistNac)(nil)).Elem()
}

func (o NetworktemplateMistNacPtrOutput) ToNetworktemplateMistNacPtrOutput() NetworktemplateMistNacPtrOutput {
	return o
}

func (o NetworktemplateMistNacPtrOutput) ToNetworktemplateMistNacPtrOutputWithContext(ctx context.Context) NetworktemplateMistNacPtrOutput {
	return o
}

func (o NetworktemplateMistNacPtrOutput) Elem() NetworktemplateMistNacOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) NetworktemplateMistNac {
		if v != nil {
			return *v
		}
		var ret NetworktemplateMistNac
		return ret
	}).(NetworktemplateMistNacOutput)
}

func (o NetworktemplateMistNacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateMistNacPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateMistNac) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateNetworks struct {
	// only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
	Gateway *string `pulumi:"gateway"`
	// only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
	Gateway6 *string `pulumi:"gateway6"`
	// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
	Isolation       *bool   `pulumi:"isolation"`
	IsolationVlanId *string `pulumi:"isolationVlanId"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet *string `pulumi:"subnet"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet6 *string `pulumi:"subnet6"`
	VlanId  string  `pulumi:"vlanId"`
}

// NetworktemplateNetworksInput is an input type that accepts NetworktemplateNetworksArgs and NetworktemplateNetworksOutput values.
// You can construct a concrete instance of `NetworktemplateNetworksInput` via:
//
//	NetworktemplateNetworksArgs{...}
type NetworktemplateNetworksInput interface {
	pulumi.Input

	ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput
	ToNetworktemplateNetworksOutputWithContext(context.Context) NetworktemplateNetworksOutput
}

type NetworktemplateNetworksArgs struct {
	// only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
	Gateway6 pulumi.StringPtrInput `pulumi:"gateway6"`
	// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
	Isolation       pulumi.BoolPtrInput   `pulumi:"isolation"`
	IsolationVlanId pulumi.StringPtrInput `pulumi:"isolationVlanId"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
	// optional for pure switching, required when L3 / routing features are used
	Subnet6 pulumi.StringPtrInput `pulumi:"subnet6"`
	VlanId  pulumi.StringInput    `pulumi:"vlanId"`
}

func (NetworktemplateNetworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateNetworks)(nil)).Elem()
}

func (i NetworktemplateNetworksArgs) ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput {
	return i.ToNetworktemplateNetworksOutputWithContext(context.Background())
}

func (i NetworktemplateNetworksArgs) ToNetworktemplateNetworksOutputWithContext(ctx context.Context) NetworktemplateNetworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateNetworksOutput)
}

// NetworktemplateNetworksMapInput is an input type that accepts NetworktemplateNetworksMap and NetworktemplateNetworksMapOutput values.
// You can construct a concrete instance of `NetworktemplateNetworksMapInput` via:
//
//	NetworktemplateNetworksMap{ "key": NetworktemplateNetworksArgs{...} }
type NetworktemplateNetworksMapInput interface {
	pulumi.Input

	ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput
	ToNetworktemplateNetworksMapOutputWithContext(context.Context) NetworktemplateNetworksMapOutput
}

type NetworktemplateNetworksMap map[string]NetworktemplateNetworksInput

func (NetworktemplateNetworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateNetworks)(nil)).Elem()
}

func (i NetworktemplateNetworksMap) ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput {
	return i.ToNetworktemplateNetworksMapOutputWithContext(context.Background())
}

func (i NetworktemplateNetworksMap) ToNetworktemplateNetworksMapOutputWithContext(ctx context.Context) NetworktemplateNetworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateNetworksMapOutput)
}

type NetworktemplateNetworksOutput struct{ *pulumi.OutputState }

func (NetworktemplateNetworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateNetworks)(nil)).Elem()
}

func (o NetworktemplateNetworksOutput) ToNetworktemplateNetworksOutput() NetworktemplateNetworksOutput {
	return o
}

func (o NetworktemplateNetworksOutput) ToNetworktemplateNetworksOutputWithContext(ctx context.Context) NetworktemplateNetworksOutput {
	return o
}

// only required for EVPN-VXLAN networks, IPv4 Virtual Gateway
func (o NetworktemplateNetworksOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// only required for EVPN-VXLAN networks, IPv6 Virtual Gateway
func (o NetworktemplateNetworksOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

// whether to stop clients to talk to each other, default is false (when enabled, a unique isolationVlanId is required). NOTE: this features requires uplink device to also a be Juniper device and `interSwitchLink` to be set
func (o NetworktemplateNetworksOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *bool { return v.Isolation }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateNetworksOutput) IsolationVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.IsolationVlanId }).(pulumi.StringPtrOutput)
}

// optional for pure switching, required when L3 / routing features are used
func (o NetworktemplateNetworksOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

// optional for pure switching, required when L3 / routing features are used
func (o NetworktemplateNetworksOutput) Subnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) *string { return v.Subnet6 }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateNetworksOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateNetworks) string { return v.VlanId }).(pulumi.StringOutput)
}

type NetworktemplateNetworksMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateNetworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateNetworks)(nil)).Elem()
}

func (o NetworktemplateNetworksMapOutput) ToNetworktemplateNetworksMapOutput() NetworktemplateNetworksMapOutput {
	return o
}

func (o NetworktemplateNetworksMapOutput) ToNetworktemplateNetworksMapOutputWithContext(ctx context.Context) NetworktemplateNetworksMapOutput {
	return o
}

func (o NetworktemplateNetworksMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateNetworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateNetworks {
		return vs[0].(map[string]NetworktemplateNetworks)[vs[1].(string)]
	}).(NetworktemplateNetworksOutput)
}

type NetworktemplateOspfAreas struct {
	IncludeLoopback *bool                                           `pulumi:"includeLoopback"`
	OspfNetworks    map[string]NetworktemplateOspfAreasOspfNetworks `pulumi:"ospfNetworks"`
	// OSPF type. enum: `default`, `nssa`, `stub`
	Type *string `pulumi:"type"`
}

// NetworktemplateOspfAreasInput is an input type that accepts NetworktemplateOspfAreasArgs and NetworktemplateOspfAreasOutput values.
// You can construct a concrete instance of `NetworktemplateOspfAreasInput` via:
//
//	NetworktemplateOspfAreasArgs{...}
type NetworktemplateOspfAreasInput interface {
	pulumi.Input

	ToNetworktemplateOspfAreasOutput() NetworktemplateOspfAreasOutput
	ToNetworktemplateOspfAreasOutputWithContext(context.Context) NetworktemplateOspfAreasOutput
}

type NetworktemplateOspfAreasArgs struct {
	IncludeLoopback pulumi.BoolPtrInput                          `pulumi:"includeLoopback"`
	OspfNetworks    NetworktemplateOspfAreasOspfNetworksMapInput `pulumi:"ospfNetworks"`
	// OSPF type. enum: `default`, `nssa`, `stub`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworktemplateOspfAreasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateOspfAreas)(nil)).Elem()
}

func (i NetworktemplateOspfAreasArgs) ToNetworktemplateOspfAreasOutput() NetworktemplateOspfAreasOutput {
	return i.ToNetworktemplateOspfAreasOutputWithContext(context.Background())
}

func (i NetworktemplateOspfAreasArgs) ToNetworktemplateOspfAreasOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateOspfAreasOutput)
}

// NetworktemplateOspfAreasMapInput is an input type that accepts NetworktemplateOspfAreasMap and NetworktemplateOspfAreasMapOutput values.
// You can construct a concrete instance of `NetworktemplateOspfAreasMapInput` via:
//
//	NetworktemplateOspfAreasMap{ "key": NetworktemplateOspfAreasArgs{...} }
type NetworktemplateOspfAreasMapInput interface {
	pulumi.Input

	ToNetworktemplateOspfAreasMapOutput() NetworktemplateOspfAreasMapOutput
	ToNetworktemplateOspfAreasMapOutputWithContext(context.Context) NetworktemplateOspfAreasMapOutput
}

type NetworktemplateOspfAreasMap map[string]NetworktemplateOspfAreasInput

func (NetworktemplateOspfAreasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateOspfAreas)(nil)).Elem()
}

func (i NetworktemplateOspfAreasMap) ToNetworktemplateOspfAreasMapOutput() NetworktemplateOspfAreasMapOutput {
	return i.ToNetworktemplateOspfAreasMapOutputWithContext(context.Background())
}

func (i NetworktemplateOspfAreasMap) ToNetworktemplateOspfAreasMapOutputWithContext(ctx context.Context) NetworktemplateOspfAreasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateOspfAreasMapOutput)
}

type NetworktemplateOspfAreasOutput struct{ *pulumi.OutputState }

func (NetworktemplateOspfAreasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateOspfAreas)(nil)).Elem()
}

func (o NetworktemplateOspfAreasOutput) ToNetworktemplateOspfAreasOutput() NetworktemplateOspfAreasOutput {
	return o
}

func (o NetworktemplateOspfAreasOutput) ToNetworktemplateOspfAreasOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOutput {
	return o
}

func (o NetworktemplateOspfAreasOutput) IncludeLoopback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreas) *bool { return v.IncludeLoopback }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateOspfAreasOutput) OspfNetworks() NetworktemplateOspfAreasOspfNetworksMapOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreas) map[string]NetworktemplateOspfAreasOspfNetworks {
		return v.OspfNetworks
	}).(NetworktemplateOspfAreasOspfNetworksMapOutput)
}

// OSPF type. enum: `default`, `nssa`, `stub`
func (o NetworktemplateOspfAreasOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreas) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworktemplateOspfAreasMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateOspfAreasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateOspfAreas)(nil)).Elem()
}

func (o NetworktemplateOspfAreasMapOutput) ToNetworktemplateOspfAreasMapOutput() NetworktemplateOspfAreasMapOutput {
	return o
}

func (o NetworktemplateOspfAreasMapOutput) ToNetworktemplateOspfAreasMapOutputWithContext(ctx context.Context) NetworktemplateOspfAreasMapOutput {
	return o
}

func (o NetworktemplateOspfAreasMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateOspfAreasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateOspfAreas {
		return vs[0].(map[string]NetworktemplateOspfAreas)[vs[1].(string)]
	}).(NetworktemplateOspfAreasOutput)
}

type NetworktemplateOspfAreasOspfNetworks struct {
	// Required if `authType`==`md5`. Property key is the key number
	AuthKeys map[string]string `pulumi:"authKeys"`
	// Required if `authType`==`password`, the password, max length is 8
	AuthPassword *string `pulumi:"authPassword"`
	// auth type. enum: `md5`, `none`, `password`
	AuthType           *string `pulumi:"authType"`
	BfdMinimumInterval *int    `pulumi:"bfdMinimumInterval"`
	DeadInterval       *int    `pulumi:"deadInterval"`
	ExportPolicy       *string `pulumi:"exportPolicy"`
	HelloInterval      *int    `pulumi:"helloInterval"`
	ImportPolicy       *string `pulumi:"importPolicy"`
	// interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
	InterfaceType *string `pulumi:"interfaceType"`
	Metric        *int    `pulumi:"metric"`
	// by default, we'll re-advertise all learned OSPF routes toward overlay
	NoReadvertiseToOverlay *bool `pulumi:"noReadvertiseToOverlay"`
	// whether to send OSPF-Hello
	Passive *bool `pulumi:"passive"`
}

// NetworktemplateOspfAreasOspfNetworksInput is an input type that accepts NetworktemplateOspfAreasOspfNetworksArgs and NetworktemplateOspfAreasOspfNetworksOutput values.
// You can construct a concrete instance of `NetworktemplateOspfAreasOspfNetworksInput` via:
//
//	NetworktemplateOspfAreasOspfNetworksArgs{...}
type NetworktemplateOspfAreasOspfNetworksInput interface {
	pulumi.Input

	ToNetworktemplateOspfAreasOspfNetworksOutput() NetworktemplateOspfAreasOspfNetworksOutput
	ToNetworktemplateOspfAreasOspfNetworksOutputWithContext(context.Context) NetworktemplateOspfAreasOspfNetworksOutput
}

type NetworktemplateOspfAreasOspfNetworksArgs struct {
	// Required if `authType`==`md5`. Property key is the key number
	AuthKeys pulumi.StringMapInput `pulumi:"authKeys"`
	// Required if `authType`==`password`, the password, max length is 8
	AuthPassword pulumi.StringPtrInput `pulumi:"authPassword"`
	// auth type. enum: `md5`, `none`, `password`
	AuthType           pulumi.StringPtrInput `pulumi:"authType"`
	BfdMinimumInterval pulumi.IntPtrInput    `pulumi:"bfdMinimumInterval"`
	DeadInterval       pulumi.IntPtrInput    `pulumi:"deadInterval"`
	ExportPolicy       pulumi.StringPtrInput `pulumi:"exportPolicy"`
	HelloInterval      pulumi.IntPtrInput    `pulumi:"helloInterval"`
	ImportPolicy       pulumi.StringPtrInput `pulumi:"importPolicy"`
	// interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
	InterfaceType pulumi.StringPtrInput `pulumi:"interfaceType"`
	Metric        pulumi.IntPtrInput    `pulumi:"metric"`
	// by default, we'll re-advertise all learned OSPF routes toward overlay
	NoReadvertiseToOverlay pulumi.BoolPtrInput `pulumi:"noReadvertiseToOverlay"`
	// whether to send OSPF-Hello
	Passive pulumi.BoolPtrInput `pulumi:"passive"`
}

func (NetworktemplateOspfAreasOspfNetworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateOspfAreasOspfNetworks)(nil)).Elem()
}

func (i NetworktemplateOspfAreasOspfNetworksArgs) ToNetworktemplateOspfAreasOspfNetworksOutput() NetworktemplateOspfAreasOspfNetworksOutput {
	return i.ToNetworktemplateOspfAreasOspfNetworksOutputWithContext(context.Background())
}

func (i NetworktemplateOspfAreasOspfNetworksArgs) ToNetworktemplateOspfAreasOspfNetworksOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOspfNetworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateOspfAreasOspfNetworksOutput)
}

// NetworktemplateOspfAreasOspfNetworksMapInput is an input type that accepts NetworktemplateOspfAreasOspfNetworksMap and NetworktemplateOspfAreasOspfNetworksMapOutput values.
// You can construct a concrete instance of `NetworktemplateOspfAreasOspfNetworksMapInput` via:
//
//	NetworktemplateOspfAreasOspfNetworksMap{ "key": NetworktemplateOspfAreasOspfNetworksArgs{...} }
type NetworktemplateOspfAreasOspfNetworksMapInput interface {
	pulumi.Input

	ToNetworktemplateOspfAreasOspfNetworksMapOutput() NetworktemplateOspfAreasOspfNetworksMapOutput
	ToNetworktemplateOspfAreasOspfNetworksMapOutputWithContext(context.Context) NetworktemplateOspfAreasOspfNetworksMapOutput
}

type NetworktemplateOspfAreasOspfNetworksMap map[string]NetworktemplateOspfAreasOspfNetworksInput

func (NetworktemplateOspfAreasOspfNetworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateOspfAreasOspfNetworks)(nil)).Elem()
}

func (i NetworktemplateOspfAreasOspfNetworksMap) ToNetworktemplateOspfAreasOspfNetworksMapOutput() NetworktemplateOspfAreasOspfNetworksMapOutput {
	return i.ToNetworktemplateOspfAreasOspfNetworksMapOutputWithContext(context.Background())
}

func (i NetworktemplateOspfAreasOspfNetworksMap) ToNetworktemplateOspfAreasOspfNetworksMapOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOspfNetworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateOspfAreasOspfNetworksMapOutput)
}

type NetworktemplateOspfAreasOspfNetworksOutput struct{ *pulumi.OutputState }

func (NetworktemplateOspfAreasOspfNetworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateOspfAreasOspfNetworks)(nil)).Elem()
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) ToNetworktemplateOspfAreasOspfNetworksOutput() NetworktemplateOspfAreasOspfNetworksOutput {
	return o
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) ToNetworktemplateOspfAreasOspfNetworksOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOspfNetworksOutput {
	return o
}

// Required if `authType`==`md5`. Property key is the key number
func (o NetworktemplateOspfAreasOspfNetworksOutput) AuthKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) map[string]string { return v.AuthKeys }).(pulumi.StringMapOutput)
}

// Required if `authType`==`password`, the password, max length is 8
func (o NetworktemplateOspfAreasOspfNetworksOutput) AuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *string { return v.AuthPassword }).(pulumi.StringPtrOutput)
}

// auth type. enum: `md5`, `none`, `password`
func (o NetworktemplateOspfAreasOspfNetworksOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *string { return v.AuthType }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) BfdMinimumInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *int { return v.BfdMinimumInterval }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) DeadInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *int { return v.DeadInterval }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) ExportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *string { return v.ExportPolicy }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) HelloInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *int { return v.HelloInterval }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) ImportPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *string { return v.ImportPolicy }).(pulumi.StringPtrOutput)
}

// interface type (nbma = non-broadcast multi-access). enum: `broadcast`, `nbma`, `p2mp`, `p2p`
func (o NetworktemplateOspfAreasOspfNetworksOutput) InterfaceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *string { return v.InterfaceType }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateOspfAreasOspfNetworksOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

// by default, we'll re-advertise all learned OSPF routes toward overlay
func (o NetworktemplateOspfAreasOspfNetworksOutput) NoReadvertiseToOverlay() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *bool { return v.NoReadvertiseToOverlay }).(pulumi.BoolPtrOutput)
}

// whether to send OSPF-Hello
func (o NetworktemplateOspfAreasOspfNetworksOutput) Passive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateOspfAreasOspfNetworks) *bool { return v.Passive }).(pulumi.BoolPtrOutput)
}

type NetworktemplateOspfAreasOspfNetworksMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateOspfAreasOspfNetworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateOspfAreasOspfNetworks)(nil)).Elem()
}

func (o NetworktemplateOspfAreasOspfNetworksMapOutput) ToNetworktemplateOspfAreasOspfNetworksMapOutput() NetworktemplateOspfAreasOspfNetworksMapOutput {
	return o
}

func (o NetworktemplateOspfAreasOspfNetworksMapOutput) ToNetworktemplateOspfAreasOspfNetworksMapOutputWithContext(ctx context.Context) NetworktemplateOspfAreasOspfNetworksMapOutput {
	return o
}

func (o NetworktemplateOspfAreasOspfNetworksMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateOspfAreasOspfNetworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateOspfAreasOspfNetworks {
		return vs[0].(map[string]NetworktemplateOspfAreasOspfNetworks)[vs[1].(string)]
	}).(NetworktemplateOspfAreasOspfNetworksOutput)
}

type NetworktemplatePortMirroring struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses []string `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses []string `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses []string `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork *string `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId *string `pulumi:"outputPortId"`
}

// NetworktemplatePortMirroringInput is an input type that accepts NetworktemplatePortMirroringArgs and NetworktemplatePortMirroringOutput values.
// You can construct a concrete instance of `NetworktemplatePortMirroringInput` via:
//
//	NetworktemplatePortMirroringArgs{...}
type NetworktemplatePortMirroringInput interface {
	pulumi.Input

	ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput
	ToNetworktemplatePortMirroringOutputWithContext(context.Context) NetworktemplatePortMirroringOutput
}

type NetworktemplatePortMirroringArgs struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses pulumi.StringArrayInput `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses pulumi.StringArrayInput `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses pulumi.StringArrayInput `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork pulumi.StringPtrInput `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId pulumi.StringPtrInput `pulumi:"outputPortId"`
}

func (NetworktemplatePortMirroringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortMirroring)(nil)).Elem()
}

func (i NetworktemplatePortMirroringArgs) ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput {
	return i.ToNetworktemplatePortMirroringOutputWithContext(context.Background())
}

func (i NetworktemplatePortMirroringArgs) ToNetworktemplatePortMirroringOutputWithContext(ctx context.Context) NetworktemplatePortMirroringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortMirroringOutput)
}

// NetworktemplatePortMirroringMapInput is an input type that accepts NetworktemplatePortMirroringMap and NetworktemplatePortMirroringMapOutput values.
// You can construct a concrete instance of `NetworktemplatePortMirroringMapInput` via:
//
//	NetworktemplatePortMirroringMap{ "key": NetworktemplatePortMirroringArgs{...} }
type NetworktemplatePortMirroringMapInput interface {
	pulumi.Input

	ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput
	ToNetworktemplatePortMirroringMapOutputWithContext(context.Context) NetworktemplatePortMirroringMapOutput
}

type NetworktemplatePortMirroringMap map[string]NetworktemplatePortMirroringInput

func (NetworktemplatePortMirroringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortMirroring)(nil)).Elem()
}

func (i NetworktemplatePortMirroringMap) ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput {
	return i.ToNetworktemplatePortMirroringMapOutputWithContext(context.Background())
}

func (i NetworktemplatePortMirroringMap) ToNetworktemplatePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplatePortMirroringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortMirroringMapOutput)
}

type NetworktemplatePortMirroringOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortMirroringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortMirroring)(nil)).Elem()
}

func (o NetworktemplatePortMirroringOutput) ToNetworktemplatePortMirroringOutput() NetworktemplatePortMirroringOutput {
	return o
}

func (o NetworktemplatePortMirroringOutput) ToNetworktemplatePortMirroringOutputWithContext(ctx context.Context) NetworktemplatePortMirroringOutput {
	return o
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputNetworksIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputNetworksIngresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputPortIdsEgresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputPortIdsEgresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplatePortMirroringOutput) InputPortIdsIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) []string { return v.InputPortIdsIngresses }).(pulumi.StringArrayOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplatePortMirroringOutput) OutputNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) *string { return v.OutputNetwork }).(pulumi.StringPtrOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplatePortMirroringOutput) OutputPortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortMirroring) *string { return v.OutputPortId }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortMirroringMapOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortMirroringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortMirroring)(nil)).Elem()
}

func (o NetworktemplatePortMirroringMapOutput) ToNetworktemplatePortMirroringMapOutput() NetworktemplatePortMirroringMapOutput {
	return o
}

func (o NetworktemplatePortMirroringMapOutput) ToNetworktemplatePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplatePortMirroringMapOutput {
	return o
}

func (o NetworktemplatePortMirroringMapOutput) MapIndex(k pulumi.StringInput) NetworktemplatePortMirroringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplatePortMirroring {
		return vs[0].(map[string]NetworktemplatePortMirroring)[vs[1].(string)]
	}).(NetworktemplatePortMirroringOutput)
}

type NetworktemplatePortUsages struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks *bool `pulumi:"allNetworks"`
	// Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd *bool `pulumi:"allowDhcpd"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants *bool `pulumi:"allowMultipleSupplicants"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown *bool `pulumi:"bypassAuthWhenServerDown"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient *bool `pulumi:"bypassAuthWhenServerDownForUnkonwnClient"`
	// Only if `mode`!=`dynamic`
	Description *string `pulumi:"description"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg *bool `pulumi:"disableAutoneg"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled *bool `pulumi:"disabled"`
	// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks []string `pulumi:"dynamicVlanNetworks"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth *bool `pulumi:"enableMacAuth"`
	// Only if `mode`!=`dynamic`
	EnableQos *bool `pulumi:"enableQos"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork *string `pulumi:"guestNetwork"`
	// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink *bool `pulumi:"interSwitchLink"`
	// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
	MacAuthOnly *bool `pulumi:"macAuthOnly"`
	// Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
	MacAuthPreferred *bool `pulumi:"macAuthPreferred"`
	// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
	MacAuthProtocol *string `pulumi:"macAuthProtocol"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit *int `pulumi:"macLimit"`
	// `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
	Mode *string `pulumi:"mode"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu *int `pulumi:"mtu"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks []string `pulumi:"networks"`
	// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac *bool `pulumi:"persistMac"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled *bool `pulumi:"poeDisabled"`
	// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
	PortAuth *string `pulumi:"portAuth"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork *string `pulumi:"portNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
	ReauthInterval *int `pulumi:"reauthInterval"`
	// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
	ResetDefaultWhen *string `pulumi:"resetDefaultWhen"`
	// Only if `mode`==`dynamic`
	Rules []NetworktemplatePortUsagesRule `pulumi:"rules"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
	ServerFailNetwork *string `pulumi:"serverFailNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
	ServerRejectNetwork *string `pulumi:"serverRejectNetwork"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
	Speed *string `pulumi:"speed"`
	// Switch storm control. Only if `mode`!=`dynamic`
	StormControl *NetworktemplatePortUsagesStormControl `pulumi:"stormControl"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge       *bool `pulumi:"stpEdge"`
	StpNoRootPort *bool `pulumi:"stpNoRootPort"`
	StpP2p        *bool `pulumi:"stpP2p"`
	// optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
	UiEvpntopoId *string `pulumi:"uiEvpntopoId"`
	// if this is connected to a vstp network
	UseVstp *bool `pulumi:"useVstp"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork *string `pulumi:"voipNetwork"`
}

// NetworktemplatePortUsagesInput is an input type that accepts NetworktemplatePortUsagesArgs and NetworktemplatePortUsagesOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesInput` via:
//
//	NetworktemplatePortUsagesArgs{...}
type NetworktemplatePortUsagesInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput
	ToNetworktemplatePortUsagesOutputWithContext(context.Context) NetworktemplatePortUsagesOutput
}

type NetworktemplatePortUsagesArgs struct {
	// Only if `mode`==`trunk` whether to trunk all network/vlans
	AllNetworks pulumi.BoolPtrInput `pulumi:"allNetworks"`
	// Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.
	AllowDhcpd pulumi.BoolPtrInput `pulumi:"allowDhcpd"`
	// Only if `mode`!=`dynamic`
	AllowMultipleSupplicants pulumi.BoolPtrInput `pulumi:"allowMultipleSupplicants"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
	BypassAuthWhenServerDown pulumi.BoolPtrInput `pulumi:"bypassAuthWhenServerDown"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
	BypassAuthWhenServerDownForUnkonwnClient pulumi.BoolPtrInput `pulumi:"bypassAuthWhenServerDownForUnkonwnClient"`
	// Only if `mode`!=`dynamic`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
	DisableAutoneg pulumi.BoolPtrInput `pulumi:"disableAutoneg"`
	// Only if `mode`!=`dynamic` whether the port is disabled
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
	DynamicVlanNetworks pulumi.StringArrayInput `pulumi:"dynamicVlanNetworks"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
	EnableMacAuth pulumi.BoolPtrInput `pulumi:"enableMacAuth"`
	// Only if `mode`!=`dynamic`
	EnableQos pulumi.BoolPtrInput `pulumi:"enableQos"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
	GuestNetwork pulumi.StringPtrInput `pulumi:"guestNetwork"`
	// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
	InterSwitchLink pulumi.BoolPtrInput `pulumi:"interSwitchLink"`
	// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
	MacAuthOnly pulumi.BoolPtrInput `pulumi:"macAuthOnly"`
	// Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
	MacAuthPreferred pulumi.BoolPtrInput `pulumi:"macAuthPreferred"`
	// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
	MacAuthProtocol pulumi.StringPtrInput `pulumi:"macAuthProtocol"`
	// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
	MacLimit pulumi.IntPtrInput `pulumi:"macLimit"`
	// `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// Only if `mode`==`trunk`, the list of network/vlans
	Networks pulumi.StringArrayInput `pulumi:"networks"`
	// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
	PersistMac pulumi.BoolPtrInput `pulumi:"persistMac"`
	// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
	PoeDisabled pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
	PortAuth pulumi.StringPtrInput `pulumi:"portAuth"`
	// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
	PortNetwork pulumi.StringPtrInput `pulumi:"portNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
	ReauthInterval pulumi.IntPtrInput `pulumi:"reauthInterval"`
	// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
	ResetDefaultWhen pulumi.StringPtrInput `pulumi:"resetDefaultWhen"`
	// Only if `mode`==`dynamic`
	Rules NetworktemplatePortUsagesRuleArrayInput `pulumi:"rules"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
	ServerFailNetwork pulumi.StringPtrInput `pulumi:"serverFailNetwork"`
	// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
	ServerRejectNetwork pulumi.StringPtrInput `pulumi:"serverRejectNetwork"`
	// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
	Speed pulumi.StringPtrInput `pulumi:"speed"`
	// Switch storm control. Only if `mode`!=`dynamic`
	StormControl NetworktemplatePortUsagesStormControlPtrInput `pulumi:"stormControl"`
	// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
	StpEdge       pulumi.BoolPtrInput `pulumi:"stpEdge"`
	StpNoRootPort pulumi.BoolPtrInput `pulumi:"stpNoRootPort"`
	StpP2p        pulumi.BoolPtrInput `pulumi:"stpP2p"`
	// optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
	UiEvpntopoId pulumi.StringPtrInput `pulumi:"uiEvpntopoId"`
	// if this is connected to a vstp network
	UseVstp pulumi.BoolPtrInput `pulumi:"useVstp"`
	// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
	VoipNetwork pulumi.StringPtrInput `pulumi:"voipNetwork"`
}

func (NetworktemplatePortUsagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsages)(nil)).Elem()
}

func (i NetworktemplatePortUsagesArgs) ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput {
	return i.ToNetworktemplatePortUsagesOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesArgs) ToNetworktemplatePortUsagesOutputWithContext(ctx context.Context) NetworktemplatePortUsagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesOutput)
}

// NetworktemplatePortUsagesMapInput is an input type that accepts NetworktemplatePortUsagesMap and NetworktemplatePortUsagesMapOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesMapInput` via:
//
//	NetworktemplatePortUsagesMap{ "key": NetworktemplatePortUsagesArgs{...} }
type NetworktemplatePortUsagesMapInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput
	ToNetworktemplatePortUsagesMapOutputWithContext(context.Context) NetworktemplatePortUsagesMapOutput
}

type NetworktemplatePortUsagesMap map[string]NetworktemplatePortUsagesInput

func (NetworktemplatePortUsagesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortUsages)(nil)).Elem()
}

func (i NetworktemplatePortUsagesMap) ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput {
	return i.ToNetworktemplatePortUsagesMapOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesMap) ToNetworktemplatePortUsagesMapOutputWithContext(ctx context.Context) NetworktemplatePortUsagesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesMapOutput)
}

type NetworktemplatePortUsagesOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsages)(nil)).Elem()
}

func (o NetworktemplatePortUsagesOutput) ToNetworktemplatePortUsagesOutput() NetworktemplatePortUsagesOutput {
	return o
}

func (o NetworktemplatePortUsagesOutput) ToNetworktemplatePortUsagesOutputWithContext(ctx context.Context) NetworktemplatePortUsagesOutput {
	return o
}

// Only if `mode`==`trunk` whether to trunk all network/vlans
func (o NetworktemplatePortUsagesOutput) AllNetworks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllNetworks }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`. If DHCP snooping is enabled, whether DHCP server is allowed on the interfaces with. All the interfaces from port configs using this port usage are effected. Please notice that allowDhcpd is a tri_state. When it is not defined, it means using the system's default setting which depends on whether the port is a access or trunk port.
func (o NetworktemplatePortUsagesOutput) AllowDhcpd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllowDhcpd }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) AllowMultipleSupplicants() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.AllowMultipleSupplicants }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` bypass auth for known clients if set to true when RADIUS server is down
func (o NetworktemplatePortUsagesOutput) BypassAuthWhenServerDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.BypassAuthWhenServerDown }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` bypass auth for all (including unknown clients) if set to true when RADIUS server is down
func (o NetworktemplatePortUsagesOutput) BypassAuthWhenServerDownForUnkonwnClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.BypassAuthWhenServerDownForUnkonwnClient }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` if speed and duplex are specified, whether to disable autonegotiation
func (o NetworktemplatePortUsagesOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` whether the port is disabled
func (o NetworktemplatePortUsagesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` link connection mode. enum: `auto`, `full`, `half`
func (o NetworktemplatePortUsagesOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x`, if dynamic vlan is used, specify the possible networks/vlans RADIUS can return
func (o NetworktemplatePortUsagesOutput) DynamicVlanNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []string { return v.DynamicVlanNetworks }).(pulumi.StringArrayOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` whether to enable MAC Auth
func (o NetworktemplatePortUsagesOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.EnableMacAuth }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) EnableQos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.EnableQos }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` which network to put the device into if the device cannot do dot1x. default is null (i.e. not allowed)
func (o NetworktemplatePortUsagesOutput) GuestNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.GuestNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` interSwitchLink is used together with "isolation" under networks. NOTE: interSwitchLink works only between Juniper device. This has to be applied to both ports connected together
func (o NetworktemplatePortUsagesOutput) InterSwitchLink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.InterSwitchLink }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `enableMacAuth`==`true`
func (o NetworktemplatePortUsagesOutput) MacAuthOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.MacAuthOnly }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` + `enableMacAuth`==`true` + `macAuthOnly`==`false`, dot1x will be given priority then mac_auth. Enable this to prefer macAuth over dot1x.
func (o NetworktemplatePortUsagesOutput) MacAuthPreferred() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.MacAuthPreferred }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` and `enableMacAuth` ==`true`. This type is ignored if mistNac is enabled. enum: `eap-md5`, `eap-peap`, `pap`
func (o NetworktemplatePortUsagesOutput) MacAuthProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.MacAuthProtocol }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` max number of mac addresses, default is 0 for unlimited, otherwise range is 1 or higher, with upper bound constrained by platform
func (o NetworktemplatePortUsagesOutput) MacLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.MacLimit }).(pulumi.IntPtrOutput)
}

// `mode`==`dynamic` must only be used if the port usage name is `dynamic`. enum: `access`, `dynamic`, `inet`, `trunk`
func (o NetworktemplatePortUsagesOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation. The default value is 1514.
func (o NetworktemplatePortUsagesOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Only if `mode`==`trunk`, the list of network/vlans
func (o NetworktemplatePortUsagesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// Only if `mode`==`access` and `portAuth`!=`dot1x` whether the port should retain dynamically learned MAC addresses
func (o NetworktemplatePortUsagesOutput) PersistMac() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.PersistMac }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` whether PoE capabilities are disabled for a port
func (o NetworktemplatePortUsagesOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` if dot1x is desired, set to dot1x. enum: `dot1x`
func (o NetworktemplatePortUsagesOutput) PortAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.PortAuth }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` native network/vlan for untagged traffic
func (o NetworktemplatePortUsagesOutput) PortNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.PortNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`=`dot1x` reauthentication interval range
func (o NetworktemplatePortUsagesOutput) ReauthInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *int { return v.ReauthInterval }).(pulumi.IntPtrOutput)
}

// Only if `mode`==`dynamic` Control when the DPC port should be changed to the default port usage. enum: `linkDown`, `none` (let the DPC port keep at the current port usage)
func (o NetworktemplatePortUsagesOutput) ResetDefaultWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.ResetDefaultWhen }).(pulumi.StringPtrOutput)
}

// Only if `mode`==`dynamic`
func (o NetworktemplatePortUsagesOutput) Rules() NetworktemplatePortUsagesRuleArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) []NetworktemplatePortUsagesRule { return v.Rules }).(NetworktemplatePortUsagesRuleArrayOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` sets server fail fallback vlan
func (o NetworktemplatePortUsagesOutput) ServerFailNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.ServerFailNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` and `portAuth`==`dot1x` when radius server reject / fails
func (o NetworktemplatePortUsagesOutput) ServerRejectNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.ServerRejectNetwork }).(pulumi.StringPtrOutput)
}

// Only if `mode`!=`dynamic` speed, default is auto to automatically negotiate speed enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
func (o NetworktemplatePortUsagesOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// Switch storm control. Only if `mode`!=`dynamic`
func (o NetworktemplatePortUsagesOutput) StormControl() NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *NetworktemplatePortUsagesStormControl { return v.StormControl }).(NetworktemplatePortUsagesStormControlPtrOutput)
}

// Only if `mode`!=`dynamic` when enabled, the port is not expected to receive BPDU frames
func (o NetworktemplatePortUsagesOutput) StpEdge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.StpEdge }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplatePortUsagesOutput) StpNoRootPort() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.StpNoRootPort }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplatePortUsagesOutput) StpP2p() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.StpP2p }).(pulumi.BoolPtrOutput)
}

// optional for Campus Fabric Core-Distribution ESI-LAG profile. Helper used by the UI to select this port profile as the ESI-Lag between Distribution and Access switches
func (o NetworktemplatePortUsagesOutput) UiEvpntopoId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.UiEvpntopoId }).(pulumi.StringPtrOutput)
}

// if this is connected to a vstp network
func (o NetworktemplatePortUsagesOutput) UseVstp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *bool { return v.UseVstp }).(pulumi.BoolPtrOutput)
}

// Only if `mode`!=`dynamic` network/vlan for voip traffic, must also set port_network. to authenticate device, set port_auth
func (o NetworktemplatePortUsagesOutput) VoipNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsages) *string { return v.VoipNetwork }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortUsagesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplatePortUsages)(nil)).Elem()
}

func (o NetworktemplatePortUsagesMapOutput) ToNetworktemplatePortUsagesMapOutput() NetworktemplatePortUsagesMapOutput {
	return o
}

func (o NetworktemplatePortUsagesMapOutput) ToNetworktemplatePortUsagesMapOutputWithContext(ctx context.Context) NetworktemplatePortUsagesMapOutput {
	return o
}

func (o NetworktemplatePortUsagesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplatePortUsagesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplatePortUsages {
		return vs[0].(map[string]NetworktemplatePortUsages)[vs[1].(string)]
	}).(NetworktemplatePortUsagesOutput)
}

type NetworktemplatePortUsagesRule struct {
	Equals *string `pulumi:"equals"`
	// use `equalsAny` to match any item in a list
	EqualsAnies []string `pulumi:"equalsAnies"`
	// "[0:3]":"abcdef" > "abc"
	// "split(.)[1]": "a.b.c" > "b"
	// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
	Expression *string `pulumi:"expression"`
	// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
	Src string `pulumi:"src"`
	// `portUsage` name
	Usage *string `pulumi:"usage"`
}

// NetworktemplatePortUsagesRuleInput is an input type that accepts NetworktemplatePortUsagesRuleArgs and NetworktemplatePortUsagesRuleOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesRuleInput` via:
//
//	NetworktemplatePortUsagesRuleArgs{...}
type NetworktemplatePortUsagesRuleInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput
	ToNetworktemplatePortUsagesRuleOutputWithContext(context.Context) NetworktemplatePortUsagesRuleOutput
}

type NetworktemplatePortUsagesRuleArgs struct {
	Equals pulumi.StringPtrInput `pulumi:"equals"`
	// use `equalsAny` to match any item in a list
	EqualsAnies pulumi.StringArrayInput `pulumi:"equalsAnies"`
	// "[0:3]":"abcdef" > "abc"
	// "split(.)[1]": "a.b.c" > "b"
	// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
	Src pulumi.StringInput `pulumi:"src"`
	// `portUsage` name
	Usage pulumi.StringPtrInput `pulumi:"usage"`
}

func (NetworktemplatePortUsagesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (i NetworktemplatePortUsagesRuleArgs) ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput {
	return i.ToNetworktemplatePortUsagesRuleOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesRuleArgs) ToNetworktemplatePortUsagesRuleOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesRuleOutput)
}

// NetworktemplatePortUsagesRuleArrayInput is an input type that accepts NetworktemplatePortUsagesRuleArray and NetworktemplatePortUsagesRuleArrayOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesRuleArrayInput` via:
//
//	NetworktemplatePortUsagesRuleArray{ NetworktemplatePortUsagesRuleArgs{...} }
type NetworktemplatePortUsagesRuleArrayInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput
	ToNetworktemplatePortUsagesRuleArrayOutputWithContext(context.Context) NetworktemplatePortUsagesRuleArrayOutput
}

type NetworktemplatePortUsagesRuleArray []NetworktemplatePortUsagesRuleInput

func (NetworktemplatePortUsagesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (i NetworktemplatePortUsagesRuleArray) ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput {
	return i.ToNetworktemplatePortUsagesRuleArrayOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesRuleArray) ToNetworktemplatePortUsagesRuleArrayOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesRuleArrayOutput)
}

type NetworktemplatePortUsagesRuleOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (o NetworktemplatePortUsagesRuleOutput) ToNetworktemplatePortUsagesRuleOutput() NetworktemplatePortUsagesRuleOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleOutput) ToNetworktemplatePortUsagesRuleOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// use `equalsAny` to match any item in a list
func (o NetworktemplatePortUsagesRuleOutput) EqualsAnies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) []string { return v.EqualsAnies }).(pulumi.StringArrayOutput)
}

// "[0:3]":"abcdef" > "abc"
// "split(.)[1]": "a.b.c" > "b"
// "split(-)[1][0:3]: "a1234-b5678-c90" > "b56"
func (o NetworktemplatePortUsagesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// enum: `linkPeermac`, `lldpChassisId`, `lldpHardwareRevision`, `lldpManufacturerName`, `lldpOui`, `lldpSerialNumber`, `lldpSystemName`, `radiusDynamicfilter`, `radiusUsermac`, `radiusUsername`
func (o NetworktemplatePortUsagesRuleOutput) Src() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) string { return v.Src }).(pulumi.StringOutput)
}

// `portUsage` name
func (o NetworktemplatePortUsagesRuleOutput) Usage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesRule) *string { return v.Usage }).(pulumi.StringPtrOutput)
}

type NetworktemplatePortUsagesRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplatePortUsagesRule)(nil)).Elem()
}

func (o NetworktemplatePortUsagesRuleArrayOutput) ToNetworktemplatePortUsagesRuleArrayOutput() NetworktemplatePortUsagesRuleArrayOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleArrayOutput) ToNetworktemplatePortUsagesRuleArrayOutputWithContext(ctx context.Context) NetworktemplatePortUsagesRuleArrayOutput {
	return o
}

func (o NetworktemplatePortUsagesRuleArrayOutput) Index(i pulumi.IntInput) NetworktemplatePortUsagesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplatePortUsagesRule {
		return vs[0].([]NetworktemplatePortUsagesRule)[vs[1].(int)]
	}).(NetworktemplatePortUsagesRuleOutput)
}

type NetworktemplatePortUsagesStormControl struct {
	// whether to disable storm control on broadcast traffic
	NoBroadcast *bool `pulumi:"noBroadcast"`
	// whether to disable storm control on multicast traffic
	NoMulticast *bool `pulumi:"noMulticast"`
	// whether to disable storm control on registered multicast traffic
	NoRegisteredMulticast *bool `pulumi:"noRegisteredMulticast"`
	// whether to disable storm control on unknown unicast traffic
	NoUnknownUnicast *bool `pulumi:"noUnknownUnicast"`
	// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
	Percentage *int `pulumi:"percentage"`
}

// NetworktemplatePortUsagesStormControlInput is an input type that accepts NetworktemplatePortUsagesStormControlArgs and NetworktemplatePortUsagesStormControlOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesStormControlInput` via:
//
//	NetworktemplatePortUsagesStormControlArgs{...}
type NetworktemplatePortUsagesStormControlInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput
	ToNetworktemplatePortUsagesStormControlOutputWithContext(context.Context) NetworktemplatePortUsagesStormControlOutput
}

type NetworktemplatePortUsagesStormControlArgs struct {
	// whether to disable storm control on broadcast traffic
	NoBroadcast pulumi.BoolPtrInput `pulumi:"noBroadcast"`
	// whether to disable storm control on multicast traffic
	NoMulticast pulumi.BoolPtrInput `pulumi:"noMulticast"`
	// whether to disable storm control on registered multicast traffic
	NoRegisteredMulticast pulumi.BoolPtrInput `pulumi:"noRegisteredMulticast"`
	// whether to disable storm control on unknown unicast traffic
	NoUnknownUnicast pulumi.BoolPtrInput `pulumi:"noUnknownUnicast"`
	// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (NetworktemplatePortUsagesStormControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput {
	return i.ToNetworktemplatePortUsagesStormControlOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlOutput)
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return i.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (i NetworktemplatePortUsagesStormControlArgs) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlOutput).ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx)
}

// NetworktemplatePortUsagesStormControlPtrInput is an input type that accepts NetworktemplatePortUsagesStormControlArgs, NetworktemplatePortUsagesStormControlPtr and NetworktemplatePortUsagesStormControlPtrOutput values.
// You can construct a concrete instance of `NetworktemplatePortUsagesStormControlPtrInput` via:
//
//	        NetworktemplatePortUsagesStormControlArgs{...}
//
//	or:
//
//	        nil
type NetworktemplatePortUsagesStormControlPtrInput interface {
	pulumi.Input

	ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput
	ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Context) NetworktemplatePortUsagesStormControlPtrOutput
}

type networktemplatePortUsagesStormControlPtrType NetworktemplatePortUsagesStormControlArgs

func NetworktemplatePortUsagesStormControlPtr(v *NetworktemplatePortUsagesStormControlArgs) NetworktemplatePortUsagesStormControlPtrInput {
	return (*networktemplatePortUsagesStormControlPtrType)(v)
}

func (*networktemplatePortUsagesStormControlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (i *networktemplatePortUsagesStormControlPtrType) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return i.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (i *networktemplatePortUsagesStormControlPtrType) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplatePortUsagesStormControlPtrOutput)
}

type NetworktemplatePortUsagesStormControlOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesStormControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlOutput() NetworktemplatePortUsagesStormControlOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(context.Background())
}

func (o NetworktemplatePortUsagesStormControlOutput) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplatePortUsagesStormControl) *NetworktemplatePortUsagesStormControl {
		return &v
	}).(NetworktemplatePortUsagesStormControlPtrOutput)
}

// whether to disable storm control on broadcast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoBroadcast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on multicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoMulticast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on registered multicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoRegisteredMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoRegisteredMulticast }).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on unknown unicast traffic
func (o NetworktemplatePortUsagesStormControlOutput) NoUnknownUnicast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *bool { return v.NoUnknownUnicast }).(pulumi.BoolPtrOutput)
}

// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
func (o NetworktemplatePortUsagesStormControlOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplatePortUsagesStormControl) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type NetworktemplatePortUsagesStormControlPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplatePortUsagesStormControlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplatePortUsagesStormControl)(nil)).Elem()
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) ToNetworktemplatePortUsagesStormControlPtrOutput() NetworktemplatePortUsagesStormControlPtrOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) ToNetworktemplatePortUsagesStormControlPtrOutputWithContext(ctx context.Context) NetworktemplatePortUsagesStormControlPtrOutput {
	return o
}

func (o NetworktemplatePortUsagesStormControlPtrOutput) Elem() NetworktemplatePortUsagesStormControlOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) NetworktemplatePortUsagesStormControl {
		if v != nil {
			return *v
		}
		var ret NetworktemplatePortUsagesStormControl
		return ret
	}).(NetworktemplatePortUsagesStormControlOutput)
}

// whether to disable storm control on broadcast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoBroadcast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on multicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoMulticast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on registered multicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoRegisteredMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoRegisteredMulticast
	}).(pulumi.BoolPtrOutput)
}

// whether to disable storm control on unknown unicast traffic
func (o NetworktemplatePortUsagesStormControlPtrOutput) NoUnknownUnicast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *bool {
		if v == nil {
			return nil
		}
		return v.NoUnknownUnicast
	}).(pulumi.BoolPtrOutput)
}

// bandwidth-percentage, configures the storm control level as a percentage of the available bandwidth
func (o NetworktemplatePortUsagesStormControlPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplatePortUsagesStormControl) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

type NetworktemplateRadiusConfig struct {
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval *int                                    `pulumi:"acctInterimInterval"`
	AcctServers         []NetworktemplateRadiusConfigAcctServer `pulumi:"acctServers"`
	AuthServers         []NetworktemplateRadiusConfigAuthServer `pulumi:"authServers"`
	// radius auth session retries
	AuthServersRetries *int `pulumi:"authServersRetries"`
	// radius auth session timeout
	AuthServersTimeout *int `pulumi:"authServersTimeout"`
	// use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
	Network *string `pulumi:"network"`
	// use `network`or `sourceIp`
	SourceIp *string `pulumi:"sourceIp"`
}

// NetworktemplateRadiusConfigInput is an input type that accepts NetworktemplateRadiusConfigArgs and NetworktemplateRadiusConfigOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigInput` via:
//
//	NetworktemplateRadiusConfigArgs{...}
type NetworktemplateRadiusConfigInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput
	ToNetworktemplateRadiusConfigOutputWithContext(context.Context) NetworktemplateRadiusConfigOutput
}

type NetworktemplateRadiusConfigArgs struct {
	// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
	AcctInterimInterval pulumi.IntPtrInput                              `pulumi:"acctInterimInterval"`
	AcctServers         NetworktemplateRadiusConfigAcctServerArrayInput `pulumi:"acctServers"`
	AuthServers         NetworktemplateRadiusConfigAuthServerArrayInput `pulumi:"authServers"`
	// radius auth session retries
	AuthServersRetries pulumi.IntPtrInput `pulumi:"authServersRetries"`
	// radius auth session timeout
	AuthServersTimeout pulumi.IntPtrInput `pulumi:"authServersTimeout"`
	// use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
	Network pulumi.StringPtrInput `pulumi:"network"`
	// use `network`or `sourceIp`
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
}

func (NetworktemplateRadiusConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfig)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput {
	return i.ToNetworktemplateRadiusConfigOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigOutput)
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return i.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigArgs) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigOutput).ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx)
}

// NetworktemplateRadiusConfigPtrInput is an input type that accepts NetworktemplateRadiusConfigArgs, NetworktemplateRadiusConfigPtr and NetworktemplateRadiusConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigPtrInput` via:
//
//	        NetworktemplateRadiusConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRadiusConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput
	ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Context) NetworktemplateRadiusConfigPtrOutput
}

type networktemplateRadiusConfigPtrType NetworktemplateRadiusConfigArgs

func NetworktemplateRadiusConfigPtr(v *NetworktemplateRadiusConfigArgs) NetworktemplateRadiusConfigPtrInput {
	return (*networktemplateRadiusConfigPtrType)(v)
}

func (*networktemplateRadiusConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRadiusConfig)(nil)).Elem()
}

func (i *networktemplateRadiusConfigPtrType) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return i.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateRadiusConfigPtrType) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigPtrOutput)
}

type NetworktemplateRadiusConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfig)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigOutput() NetworktemplateRadiusConfigOutput {
	return o
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigOutput {
	return o
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return o.ToNetworktemplateRadiusConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateRadiusConfigOutput) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRadiusConfig) *NetworktemplateRadiusConfig {
		return &v
	}).(NetworktemplateRadiusConfigPtrOutput)
}

// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
func (o NetworktemplateRadiusConfigOutput) AcctInterimInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AcctInterimInterval }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigOutput) AcctServers() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAcctServer { return v.AcctServers }).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

func (o NetworktemplateRadiusConfigOutput) AuthServers() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAuthServer { return v.AuthServers }).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

// radius auth session retries
func (o NetworktemplateRadiusConfigOutput) AuthServersRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AuthServersRetries }).(pulumi.IntPtrOutput)
}

// radius auth session timeout
func (o NetworktemplateRadiusConfigOutput) AuthServersTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *int { return v.AuthServersTimeout }).(pulumi.IntPtrOutput)
}

// use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
func (o NetworktemplateRadiusConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// use `network`or `sourceIp`
func (o NetworktemplateRadiusConfigOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfig) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

type NetworktemplateRadiusConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRadiusConfig)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigPtrOutput) ToNetworktemplateRadiusConfigPtrOutput() NetworktemplateRadiusConfigPtrOutput {
	return o
}

func (o NetworktemplateRadiusConfigPtrOutput) ToNetworktemplateRadiusConfigPtrOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigPtrOutput {
	return o
}

func (o NetworktemplateRadiusConfigPtrOutput) Elem() NetworktemplateRadiusConfigOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) NetworktemplateRadiusConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRadiusConfig
		return ret
	}).(NetworktemplateRadiusConfigOutput)
}

// how frequently should interim accounting be reported, 60-65535. default is 0 (use one specified in Access-Accept request from RADIUS Server). Very frequent messages can affect the performance of the radius server, 600 and up is recommended when enabled
func (o NetworktemplateRadiusConfigPtrOutput) AcctInterimInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AcctInterimInterval
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) AcctServers() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAcctServer {
		if v == nil {
			return nil
		}
		return v.AcctServers
	}).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

func (o NetworktemplateRadiusConfigPtrOutput) AuthServers() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) []NetworktemplateRadiusConfigAuthServer {
		if v == nil {
			return nil
		}
		return v.AuthServers
	}).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

// radius auth session retries
func (o NetworktemplateRadiusConfigPtrOutput) AuthServersRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AuthServersRetries
	}).(pulumi.IntPtrOutput)
}

// radius auth session timeout
func (o NetworktemplateRadiusConfigPtrOutput) AuthServersTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *int {
		if v == nil {
			return nil
		}
		return v.AuthServersTimeout
	}).(pulumi.IntPtrOutput)
}

// use `network`or `sourceIp`. Which network the RADIUS server resides, if there's static IP for this network, we'd use it as source-ip
func (o NetworktemplateRadiusConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// use `network`or `sourceIp`
func (o NetworktemplateRadiusConfigPtrOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRadiusConfig) *string {
		if v == nil {
			return nil
		}
		return v.SourceIp
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRadiusConfigAcctServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// NetworktemplateRadiusConfigAcctServerInput is an input type that accepts NetworktemplateRadiusConfigAcctServerArgs and NetworktemplateRadiusConfigAcctServerOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAcctServerInput` via:
//
//	NetworktemplateRadiusConfigAcctServerArgs{...}
type NetworktemplateRadiusConfigAcctServerInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput
	ToNetworktemplateRadiusConfigAcctServerOutputWithContext(context.Context) NetworktemplateRadiusConfigAcctServerOutput
}

type NetworktemplateRadiusConfigAcctServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (NetworktemplateRadiusConfigAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAcctServerArgs) ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput {
	return i.ToNetworktemplateRadiusConfigAcctServerOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAcctServerArgs) ToNetworktemplateRadiusConfigAcctServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAcctServerOutput)
}

// NetworktemplateRadiusConfigAcctServerArrayInput is an input type that accepts NetworktemplateRadiusConfigAcctServerArray and NetworktemplateRadiusConfigAcctServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAcctServerArrayInput` via:
//
//	NetworktemplateRadiusConfigAcctServerArray{ NetworktemplateRadiusConfigAcctServerArgs{...} }
type NetworktemplateRadiusConfigAcctServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput
	ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput
}

type NetworktemplateRadiusConfigAcctServerArray []NetworktemplateRadiusConfigAcctServerInput

func (NetworktemplateRadiusConfigAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAcctServerArray) ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return i.ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAcctServerArray) ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAcctServerArrayOutput)
}

type NetworktemplateRadiusConfigAcctServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAcctServerOutput) ToNetworktemplateRadiusConfigAcctServerOutput() NetworktemplateRadiusConfigAcctServerOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerOutput) ToNetworktemplateRadiusConfigAcctServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAcctServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Acct port of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o NetworktemplateRadiusConfigAcctServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAcctServer) string { return v.Secret }).(pulumi.StringOutput)
}

type NetworktemplateRadiusConfigAcctServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAcctServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) ToNetworktemplateRadiusConfigAcctServerArrayOutput() NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) ToNetworktemplateRadiusConfigAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAcctServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAcctServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRadiusConfigAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRadiusConfigAcctServer {
		return vs[0].([]NetworktemplateRadiusConfigAcctServer)[vs[1].(int)]
	}).(NetworktemplateRadiusConfigAcctServerOutput)
}

type NetworktemplateRadiusConfigAuthServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port *int `pulumi:"port"`
	// whether to require Message-Authenticator in requests
	RequireMessageAuthenticator *bool `pulumi:"requireMessageAuthenticator"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// NetworktemplateRadiusConfigAuthServerInput is an input type that accepts NetworktemplateRadiusConfigAuthServerArgs and NetworktemplateRadiusConfigAuthServerOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAuthServerInput` via:
//
//	NetworktemplateRadiusConfigAuthServerArgs{...}
type NetworktemplateRadiusConfigAuthServerInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput
	ToNetworktemplateRadiusConfigAuthServerOutputWithContext(context.Context) NetworktemplateRadiusConfigAuthServerOutput
}

type NetworktemplateRadiusConfigAuthServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// whether to require Message-Authenticator in requests
	RequireMessageAuthenticator pulumi.BoolPtrInput `pulumi:"requireMessageAuthenticator"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (NetworktemplateRadiusConfigAuthServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAuthServerArgs) ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput {
	return i.ToNetworktemplateRadiusConfigAuthServerOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAuthServerArgs) ToNetworktemplateRadiusConfigAuthServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAuthServerOutput)
}

// NetworktemplateRadiusConfigAuthServerArrayInput is an input type that accepts NetworktemplateRadiusConfigAuthServerArray and NetworktemplateRadiusConfigAuthServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRadiusConfigAuthServerArrayInput` via:
//
//	NetworktemplateRadiusConfigAuthServerArray{ NetworktemplateRadiusConfigAuthServerArgs{...} }
type NetworktemplateRadiusConfigAuthServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput
	ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput
}

type NetworktemplateRadiusConfigAuthServerArray []NetworktemplateRadiusConfigAuthServerInput

func (NetworktemplateRadiusConfigAuthServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (i NetworktemplateRadiusConfigAuthServerArray) ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return i.ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRadiusConfigAuthServerArray) ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRadiusConfigAuthServerArrayOutput)
}

type NetworktemplateRadiusConfigAuthServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAuthServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAuthServerOutput) ToNetworktemplateRadiusConfigAuthServerOutput() NetworktemplateRadiusConfigAuthServerOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerOutput) ToNetworktemplateRadiusConfigAuthServerOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRadiusConfigAuthServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Auth port of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// whether to require Message-Authenticator in requests
func (o NetworktemplateRadiusConfigAuthServerOutput) RequireMessageAuthenticator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) *bool { return v.RequireMessageAuthenticator }).(pulumi.BoolPtrOutput)
}

// secret of RADIUS server
func (o NetworktemplateRadiusConfigAuthServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateRadiusConfigAuthServer) string { return v.Secret }).(pulumi.StringOutput)
}

type NetworktemplateRadiusConfigAuthServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRadiusConfigAuthServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRadiusConfigAuthServer)(nil)).Elem()
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) ToNetworktemplateRadiusConfigAuthServerArrayOutput() NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) ToNetworktemplateRadiusConfigAuthServerArrayOutputWithContext(ctx context.Context) NetworktemplateRadiusConfigAuthServerArrayOutput {
	return o
}

func (o NetworktemplateRadiusConfigAuthServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRadiusConfigAuthServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRadiusConfigAuthServer {
		return vs[0].([]NetworktemplateRadiusConfigAuthServer)[vs[1].(int)]
	}).(NetworktemplateRadiusConfigAuthServerOutput)
}

type NetworktemplateRemoteSyslog struct {
	Archive *NetworktemplateRemoteSyslogArchive `pulumi:"archive"`
	Console *NetworktemplateRemoteSyslogConsole `pulumi:"console"`
	Enabled *bool                               `pulumi:"enabled"`
	Files   []NetworktemplateRemoteSyslogFile   `pulumi:"files"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	Network          *string                             `pulumi:"network"`
	SendToAllServers *bool                               `pulumi:"sendToAllServers"`
	Servers          []NetworktemplateRemoteSyslogServer `pulumi:"servers"`
	// enum: `millisecond`, `year`, `year millisecond`
	TimeFormat *string                           `pulumi:"timeFormat"`
	Users      []NetworktemplateRemoteSyslogUser `pulumi:"users"`
}

// NetworktemplateRemoteSyslogInput is an input type that accepts NetworktemplateRemoteSyslogArgs and NetworktemplateRemoteSyslogOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogInput` via:
//
//	NetworktemplateRemoteSyslogArgs{...}
type NetworktemplateRemoteSyslogInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput
	ToNetworktemplateRemoteSyslogOutputWithContext(context.Context) NetworktemplateRemoteSyslogOutput
}

type NetworktemplateRemoteSyslogArgs struct {
	Archive NetworktemplateRemoteSyslogArchivePtrInput `pulumi:"archive"`
	Console NetworktemplateRemoteSyslogConsolePtrInput `pulumi:"console"`
	Enabled pulumi.BoolPtrInput                        `pulumi:"enabled"`
	Files   NetworktemplateRemoteSyslogFileArrayInput  `pulumi:"files"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	Network          pulumi.StringPtrInput                       `pulumi:"network"`
	SendToAllServers pulumi.BoolPtrInput                         `pulumi:"sendToAllServers"`
	Servers          NetworktemplateRemoteSyslogServerArrayInput `pulumi:"servers"`
	// enum: `millisecond`, `year`, `year millisecond`
	TimeFormat pulumi.StringPtrInput                     `pulumi:"timeFormat"`
	Users      NetworktemplateRemoteSyslogUserArrayInput `pulumi:"users"`
}

func (NetworktemplateRemoteSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput {
	return i.ToNetworktemplateRemoteSyslogOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogOutput)
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return i.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArgs) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogOutput).ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogPtrInput is an input type that accepts NetworktemplateRemoteSyslogArgs, NetworktemplateRemoteSyslogPtr and NetworktemplateRemoteSyslogPtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogPtrInput` via:
//
//	        NetworktemplateRemoteSyslogArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogPtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput
	ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogPtrOutput
}

type networktemplateRemoteSyslogPtrType NetworktemplateRemoteSyslogArgs

func NetworktemplateRemoteSyslogPtr(v *NetworktemplateRemoteSyslogArgs) NetworktemplateRemoteSyslogPtrInput {
	return (*networktemplateRemoteSyslogPtrType)(v)
}

func (*networktemplateRemoteSyslogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogPtrType) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return i.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogPtrType) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogPtrOutput)
}

type NetworktemplateRemoteSyslogOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogOutput() NetworktemplateRemoteSyslogOutput {
	return o
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogOutput {
	return o
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return o.ToNetworktemplateRemoteSyslogPtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogOutput) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslog {
		return &v
	}).(NetworktemplateRemoteSyslogPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Archive() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogArchive { return v.Archive }).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Console() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogConsole { return v.Console }).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Files() NetworktemplateRemoteSyslogFileArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogFile { return v.Files }).(NetworktemplateRemoteSyslogFileArrayOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) SendToAllServers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *bool { return v.SendToAllServers }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Servers() NetworktemplateRemoteSyslogServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogServer { return v.Servers }).(NetworktemplateRemoteSyslogServerArrayOutput)
}

// enum: `millisecond`, `year`, `year millisecond`
func (o NetworktemplateRemoteSyslogOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogOutput) Users() NetworktemplateRemoteSyslogUserArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogUser { return v.Users }).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslog)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogPtrOutput) ToNetworktemplateRemoteSyslogPtrOutput() NetworktemplateRemoteSyslogPtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogPtrOutput) ToNetworktemplateRemoteSyslogPtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogPtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogPtrOutput) Elem() NetworktemplateRemoteSyslogOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) NetworktemplateRemoteSyslog {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslog
		return ret
	}).(NetworktemplateRemoteSyslogOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Archive() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogArchive {
		if v == nil {
			return nil
		}
		return v.Archive
	}).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Console() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *NetworktemplateRemoteSyslogConsole {
		if v == nil {
			return nil
		}
		return v.Console
	}).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Files() NetworktemplateRemoteSyslogFileArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogFile {
		if v == nil {
			return nil
		}
		return v.Files
	}).(NetworktemplateRemoteSyslogFileArrayOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) SendToAllServers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *bool {
		if v == nil {
			return nil
		}
		return v.SendToAllServers
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Servers() NetworktemplateRemoteSyslogServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogServer {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(NetworktemplateRemoteSyslogServerArrayOutput)
}

// enum: `millisecond`, `year`, `year millisecond`
func (o NetworktemplateRemoteSyslogPtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogPtrOutput) Users() NetworktemplateRemoteSyslogUserArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslog) []NetworktemplateRemoteSyslogUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogArchive struct {
	Files *int    `pulumi:"files"`
	Size  *string `pulumi:"size"`
}

// NetworktemplateRemoteSyslogArchiveInput is an input type that accepts NetworktemplateRemoteSyslogArchiveArgs and NetworktemplateRemoteSyslogArchiveOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogArchiveInput` via:
//
//	NetworktemplateRemoteSyslogArchiveArgs{...}
type NetworktemplateRemoteSyslogArchiveInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput
	ToNetworktemplateRemoteSyslogArchiveOutputWithContext(context.Context) NetworktemplateRemoteSyslogArchiveOutput
}

type NetworktemplateRemoteSyslogArchiveArgs struct {
	Files pulumi.IntPtrInput    `pulumi:"files"`
	Size  pulumi.StringPtrInput `pulumi:"size"`
}

func (NetworktemplateRemoteSyslogArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput {
	return i.ToNetworktemplateRemoteSyslogArchiveOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchiveOutput)
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogArchiveArgs) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchiveOutput).ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogArchivePtrInput is an input type that accepts NetworktemplateRemoteSyslogArchiveArgs, NetworktemplateRemoteSyslogArchivePtr and NetworktemplateRemoteSyslogArchivePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogArchivePtrInput` via:
//
//	        NetworktemplateRemoteSyslogArchiveArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogArchivePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput
	ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogArchivePtrOutput
}

type networktemplateRemoteSyslogArchivePtrType NetworktemplateRemoteSyslogArchiveArgs

func NetworktemplateRemoteSyslogArchivePtr(v *NetworktemplateRemoteSyslogArchiveArgs) NetworktemplateRemoteSyslogArchivePtrInput {
	return (*networktemplateRemoteSyslogArchivePtrType)(v)
}

func (*networktemplateRemoteSyslogArchivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogArchivePtrType) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogArchivePtrType) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

type NetworktemplateRemoteSyslogArchiveOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchiveOutput() NetworktemplateRemoteSyslogArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogArchiveOutput) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogArchive) *NetworktemplateRemoteSyslogArchive {
		return &v
	}).(NetworktemplateRemoteSyslogArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogArchiveOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogArchive) *int { return v.Files }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogArchiveOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogArchive) *string { return v.Size }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogArchivePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogArchivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) ToNetworktemplateRemoteSyslogArchivePtrOutput() NetworktemplateRemoteSyslogArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) ToNetworktemplateRemoteSyslogArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Elem() NetworktemplateRemoteSyslogArchiveOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) NetworktemplateRemoteSyslogArchive {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogArchive
		return ret
	}).(NetworktemplateRemoteSyslogArchiveOutput)
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) *int {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogArchivePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogArchive) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogConsole struct {
	Contents []NetworktemplateRemoteSyslogConsoleContent `pulumi:"contents"`
}

// NetworktemplateRemoteSyslogConsoleInput is an input type that accepts NetworktemplateRemoteSyslogConsoleArgs and NetworktemplateRemoteSyslogConsoleOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleInput` via:
//
//	NetworktemplateRemoteSyslogConsoleArgs{...}
type NetworktemplateRemoteSyslogConsoleInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput
	ToNetworktemplateRemoteSyslogConsoleOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleOutput
}

type NetworktemplateRemoteSyslogConsoleArgs struct {
	Contents NetworktemplateRemoteSyslogConsoleContentArrayInput `pulumi:"contents"`
}

func (NetworktemplateRemoteSyslogConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsoleOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleOutput)
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return i.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleArgs) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleOutput).ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogConsolePtrInput is an input type that accepts NetworktemplateRemoteSyslogConsoleArgs, NetworktemplateRemoteSyslogConsolePtr and NetworktemplateRemoteSyslogConsolePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsolePtrInput` via:
//
//	        NetworktemplateRemoteSyslogConsoleArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogConsolePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput
	ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsolePtrOutput
}

type networktemplateRemoteSyslogConsolePtrType NetworktemplateRemoteSyslogConsoleArgs

func NetworktemplateRemoteSyslogConsolePtr(v *NetworktemplateRemoteSyslogConsoleArgs) NetworktemplateRemoteSyslogConsolePtrInput {
	return (*networktemplateRemoteSyslogConsolePtrType)(v)
}

func (*networktemplateRemoteSyslogConsolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogConsolePtrType) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return i.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogConsolePtrType) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

type NetworktemplateRemoteSyslogConsoleOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsoleOutput() NetworktemplateRemoteSyslogConsoleOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsoleOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogConsoleOutput) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogConsole) *NetworktemplateRemoteSyslogConsole {
		return &v
	}).(NetworktemplateRemoteSyslogConsolePtrOutput)
}

func (o NetworktemplateRemoteSyslogConsoleOutput) Contents() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsole) []NetworktemplateRemoteSyslogConsoleContent {
		return v.Contents
	}).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsolePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogConsole)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) ToNetworktemplateRemoteSyslogConsolePtrOutput() NetworktemplateRemoteSyslogConsolePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) ToNetworktemplateRemoteSyslogConsolePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsolePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) Elem() NetworktemplateRemoteSyslogConsoleOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogConsole) NetworktemplateRemoteSyslogConsole {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogConsole
		return ret
	}).(NetworktemplateRemoteSyslogConsoleOutput)
}

func (o NetworktemplateRemoteSyslogConsolePtrOutput) Contents() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogConsole) []NetworktemplateRemoteSyslogConsoleContent {
		if v == nil {
			return nil
		}
		return v.Contents
	}).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsoleContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogConsoleContentInput is an input type that accepts NetworktemplateRemoteSyslogConsoleContentArgs and NetworktemplateRemoteSyslogConsoleContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleContentInput` via:
//
//	NetworktemplateRemoteSyslogConsoleContentArgs{...}
type NetworktemplateRemoteSyslogConsoleContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput
	ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleContentOutput
}

type NetworktemplateRemoteSyslogConsoleContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogConsoleContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleContentArgs) ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleContentArgs) ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleContentOutput)
}

// NetworktemplateRemoteSyslogConsoleContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogConsoleContentArray and NetworktemplateRemoteSyslogConsoleContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogConsoleContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogConsoleContentArray{ NetworktemplateRemoteSyslogConsoleContentArgs{...} }
type NetworktemplateRemoteSyslogConsoleContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput
	ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput
}

type NetworktemplateRemoteSyslogConsoleContentArray []NetworktemplateRemoteSyslogConsoleContentInput

func (NetworktemplateRemoteSyslogConsoleContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogConsoleContentArray) ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogConsoleContentArray) ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogConsoleContentArrayOutput)
}

type NetworktemplateRemoteSyslogConsoleContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleContentOutput) ToNetworktemplateRemoteSyslogConsoleContentOutput() NetworktemplateRemoteSyslogConsoleContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentOutput) ToNetworktemplateRemoteSyslogConsoleContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogConsoleContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsoleContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogConsoleContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogConsoleContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogConsoleContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogConsoleContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogConsoleContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) ToNetworktemplateRemoteSyslogConsoleContentArrayOutput() NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) ToNetworktemplateRemoteSyslogConsoleContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogConsoleContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogConsoleContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogConsoleContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogConsoleContent {
		return vs[0].([]NetworktemplateRemoteSyslogConsoleContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogConsoleContentOutput)
}

type NetworktemplateRemoteSyslogFile struct {
	Archive          *NetworktemplateRemoteSyslogFileArchive  `pulumi:"archive"`
	Contents         []NetworktemplateRemoteSyslogFileContent `pulumi:"contents"`
	ExplicitPriority *bool                                    `pulumi:"explicitPriority"`
	File             *string                                  `pulumi:"file"`
	Match            *string                                  `pulumi:"match"`
	StructuredData   *bool                                    `pulumi:"structuredData"`
}

// NetworktemplateRemoteSyslogFileInput is an input type that accepts NetworktemplateRemoteSyslogFileArgs and NetworktemplateRemoteSyslogFileOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileInput` via:
//
//	NetworktemplateRemoteSyslogFileArgs{...}
type NetworktemplateRemoteSyslogFileInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput
	ToNetworktemplateRemoteSyslogFileOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileOutput
}

type NetworktemplateRemoteSyslogFileArgs struct {
	Archive          NetworktemplateRemoteSyslogFileArchivePtrInput   `pulumi:"archive"`
	Contents         NetworktemplateRemoteSyslogFileContentArrayInput `pulumi:"contents"`
	ExplicitPriority pulumi.BoolPtrInput                              `pulumi:"explicitPriority"`
	File             pulumi.StringPtrInput                            `pulumi:"file"`
	Match            pulumi.StringPtrInput                            `pulumi:"match"`
	StructuredData   pulumi.BoolPtrInput                              `pulumi:"structuredData"`
}

func (NetworktemplateRemoteSyslogFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArgs) ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput {
	return i.ToNetworktemplateRemoteSyslogFileOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArgs) ToNetworktemplateRemoteSyslogFileOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileOutput)
}

// NetworktemplateRemoteSyslogFileArrayInput is an input type that accepts NetworktemplateRemoteSyslogFileArray and NetworktemplateRemoteSyslogFileArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArrayInput` via:
//
//	NetworktemplateRemoteSyslogFileArray{ NetworktemplateRemoteSyslogFileArgs{...} }
type NetworktemplateRemoteSyslogFileArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput
	ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArrayOutput
}

type NetworktemplateRemoteSyslogFileArray []NetworktemplateRemoteSyslogFileInput

func (NetworktemplateRemoteSyslogFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArray) ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput {
	return i.ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArray) ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArrayOutput)
}

type NetworktemplateRemoteSyslogFileOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileOutput) ToNetworktemplateRemoteSyslogFileOutput() NetworktemplateRemoteSyslogFileOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileOutput) ToNetworktemplateRemoteSyslogFileOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileOutput) Archive() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *NetworktemplateRemoteSyslogFileArchive { return v.Archive }).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) Contents() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) []NetworktemplateRemoteSyslogFileContent { return v.Contents }).(NetworktemplateRemoteSyslogFileContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) ExplicitPriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *bool { return v.ExplicitPriority }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileOutput) StructuredData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFile) *bool { return v.StructuredData }).(pulumi.BoolPtrOutput)
}

type NetworktemplateRemoteSyslogFileArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFile)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) ToNetworktemplateRemoteSyslogFileArrayOutput() NetworktemplateRemoteSyslogFileArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) ToNetworktemplateRemoteSyslogFileArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogFile {
		return vs[0].([]NetworktemplateRemoteSyslogFile)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogFileOutput)
}

type NetworktemplateRemoteSyslogFileArchive struct {
	Files *int    `pulumi:"files"`
	Size  *string `pulumi:"size"`
}

// NetworktemplateRemoteSyslogFileArchiveInput is an input type that accepts NetworktemplateRemoteSyslogFileArchiveArgs and NetworktemplateRemoteSyslogFileArchiveOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArchiveInput` via:
//
//	NetworktemplateRemoteSyslogFileArchiveArgs{...}
type NetworktemplateRemoteSyslogFileArchiveInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput
	ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArchiveOutput
}

type NetworktemplateRemoteSyslogFileArchiveArgs struct {
	Files pulumi.IntPtrInput    `pulumi:"files"`
	Size  pulumi.StringPtrInput `pulumi:"size"`
}

func (NetworktemplateRemoteSyslogFileArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchiveOutput)
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileArchiveArgs) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchiveOutput).ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx)
}

// NetworktemplateRemoteSyslogFileArchivePtrInput is an input type that accepts NetworktemplateRemoteSyslogFileArchiveArgs, NetworktemplateRemoteSyslogFileArchivePtr and NetworktemplateRemoteSyslogFileArchivePtrOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileArchivePtrInput` via:
//
//	        NetworktemplateRemoteSyslogFileArchiveArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateRemoteSyslogFileArchivePtrInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput
	ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput
}

type networktemplateRemoteSyslogFileArchivePtrType NetworktemplateRemoteSyslogFileArchiveArgs

func NetworktemplateRemoteSyslogFileArchivePtr(v *NetworktemplateRemoteSyslogFileArchiveArgs) NetworktemplateRemoteSyslogFileArchivePtrInput {
	return (*networktemplateRemoteSyslogFileArchivePtrType)(v)
}

func (*networktemplateRemoteSyslogFileArchivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (i *networktemplateRemoteSyslogFileArchivePtrType) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return i.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (i *networktemplateRemoteSyslogFileArchivePtrType) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

type NetworktemplateRemoteSyslogFileArchiveOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchiveOutput() NetworktemplateRemoteSyslogFileArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchiveOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchiveOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(context.Background())
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateRemoteSyslogFileArchive) *NetworktemplateRemoteSyslogFileArchive {
		return &v
	}).(NetworktemplateRemoteSyslogFileArchivePtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileArchive) *int { return v.Files }).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchiveOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileArchive) *string { return v.Size }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileArchivePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileArchivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateRemoteSyslogFileArchive)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutput() NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) ToNetworktemplateRemoteSyslogFileArchivePtrOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileArchivePtrOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Elem() NetworktemplateRemoteSyslogFileArchiveOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) NetworktemplateRemoteSyslogFileArchive {
		if v != nil {
			return *v
		}
		var ret NetworktemplateRemoteSyslogFileArchive
		return ret
	}).(NetworktemplateRemoteSyslogFileArchiveOutput)
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Files() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) *int {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.IntPtrOutput)
}

func (o NetworktemplateRemoteSyslogFileArchivePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateRemoteSyslogFileArchive) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogFileContentInput is an input type that accepts NetworktemplateRemoteSyslogFileContentArgs and NetworktemplateRemoteSyslogFileContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileContentInput` via:
//
//	NetworktemplateRemoteSyslogFileContentArgs{...}
type NetworktemplateRemoteSyslogFileContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput
	ToNetworktemplateRemoteSyslogFileContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileContentOutput
}

type NetworktemplateRemoteSyslogFileContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogFileContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileContentArgs) ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput {
	return i.ToNetworktemplateRemoteSyslogFileContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileContentArgs) ToNetworktemplateRemoteSyslogFileContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileContentOutput)
}

// NetworktemplateRemoteSyslogFileContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogFileContentArray and NetworktemplateRemoteSyslogFileContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogFileContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogFileContentArray{ NetworktemplateRemoteSyslogFileContentArgs{...} }
type NetworktemplateRemoteSyslogFileContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput
	ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput
}

type NetworktemplateRemoteSyslogFileContentArray []NetworktemplateRemoteSyslogFileContentInput

func (NetworktemplateRemoteSyslogFileContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogFileContentArray) ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogFileContentArray) ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogFileContentArrayOutput)
}

type NetworktemplateRemoteSyslogFileContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileContentOutput) ToNetworktemplateRemoteSyslogFileContentOutput() NetworktemplateRemoteSyslogFileContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentOutput) ToNetworktemplateRemoteSyslogFileContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogFileContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogFileContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogFileContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogFileContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogFileContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogFileContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) ToNetworktemplateRemoteSyslogFileContentArrayOutput() NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) ToNetworktemplateRemoteSyslogFileContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogFileContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogFileContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogFileContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogFileContent {
		return vs[0].([]NetworktemplateRemoteSyslogFileContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogFileContentOutput)
}

type NetworktemplateRemoteSyslogServer struct {
	Contents         []NetworktemplateRemoteSyslogServerContent `pulumi:"contents"`
	ExplicitPriority *bool                                      `pulumi:"explicitPriority"`
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	Host     *string `pulumi:"host"`
	Match    *string `pulumi:"match"`
	Port     *int    `pulumi:"port"`
	// enum: `tcp`, `udp`
	Protocol        *string `pulumi:"protocol"`
	RoutingInstance *string `pulumi:"routingInstance"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	SourceAddress  *string `pulumi:"sourceAddress"`
	StructuredData *bool   `pulumi:"structuredData"`
	Tag            *string `pulumi:"tag"`
}

// NetworktemplateRemoteSyslogServerInput is an input type that accepts NetworktemplateRemoteSyslogServerArgs and NetworktemplateRemoteSyslogServerOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerInput` via:
//
//	NetworktemplateRemoteSyslogServerArgs{...}
type NetworktemplateRemoteSyslogServerInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput
	ToNetworktemplateRemoteSyslogServerOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerOutput
}

type NetworktemplateRemoteSyslogServerArgs struct {
	Contents         NetworktemplateRemoteSyslogServerContentArrayInput `pulumi:"contents"`
	ExplicitPriority pulumi.BoolPtrInput                                `pulumi:"explicitPriority"`
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	Host     pulumi.StringPtrInput `pulumi:"host"`
	Match    pulumi.StringPtrInput `pulumi:"match"`
	Port     pulumi.IntPtrInput    `pulumi:"port"`
	// enum: `tcp`, `udp`
	Protocol        pulumi.StringPtrInput `pulumi:"protocol"`
	RoutingInstance pulumi.StringPtrInput `pulumi:"routingInstance"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
	SourceAddress  pulumi.StringPtrInput `pulumi:"sourceAddress"`
	StructuredData pulumi.BoolPtrInput   `pulumi:"structuredData"`
	Tag            pulumi.StringPtrInput `pulumi:"tag"`
}

func (NetworktemplateRemoteSyslogServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerArgs) ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput {
	return i.ToNetworktemplateRemoteSyslogServerOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerArgs) ToNetworktemplateRemoteSyslogServerOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerOutput)
}

// NetworktemplateRemoteSyslogServerArrayInput is an input type that accepts NetworktemplateRemoteSyslogServerArray and NetworktemplateRemoteSyslogServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerArrayInput` via:
//
//	NetworktemplateRemoteSyslogServerArray{ NetworktemplateRemoteSyslogServerArgs{...} }
type NetworktemplateRemoteSyslogServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput
	ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerArrayOutput
}

type NetworktemplateRemoteSyslogServerArray []NetworktemplateRemoteSyslogServerInput

func (NetworktemplateRemoteSyslogServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerArray) ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput {
	return i.ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerArray) ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerArrayOutput)
}

type NetworktemplateRemoteSyslogServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerOutput) ToNetworktemplateRemoteSyslogServerOutput() NetworktemplateRemoteSyslogServerOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerOutput) ToNetworktemplateRemoteSyslogServerOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerOutput) Contents() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) []NetworktemplateRemoteSyslogServerContent {
		return v.Contents
	}).(NetworktemplateRemoteSyslogServerContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) ExplicitPriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *bool { return v.ExplicitPriority }).(pulumi.BoolPtrOutput)
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogServerOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// enum: `tcp`, `udp`
func (o NetworktemplateRemoteSyslogServerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) RoutingInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.RoutingInstance }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogServerOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// if sourceAddress is configured, will use the vlan firstly otherwise use source_ip
func (o NetworktemplateRemoteSyslogServerOutput) SourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.SourceAddress }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) StructuredData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *bool { return v.StructuredData }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateRemoteSyslogServerOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServer) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServer)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) ToNetworktemplateRemoteSyslogServerArrayOutput() NetworktemplateRemoteSyslogServerArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) ToNetworktemplateRemoteSyslogServerArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogServer {
		return vs[0].([]NetworktemplateRemoteSyslogServer)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogServerOutput)
}

type NetworktemplateRemoteSyslogServerContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogServerContentInput is an input type that accepts NetworktemplateRemoteSyslogServerContentArgs and NetworktemplateRemoteSyslogServerContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerContentInput` via:
//
//	NetworktemplateRemoteSyslogServerContentArgs{...}
type NetworktemplateRemoteSyslogServerContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput
	ToNetworktemplateRemoteSyslogServerContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerContentOutput
}

type NetworktemplateRemoteSyslogServerContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogServerContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerContentArgs) ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput {
	return i.ToNetworktemplateRemoteSyslogServerContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerContentArgs) ToNetworktemplateRemoteSyslogServerContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerContentOutput)
}

// NetworktemplateRemoteSyslogServerContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogServerContentArray and NetworktemplateRemoteSyslogServerContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogServerContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogServerContentArray{ NetworktemplateRemoteSyslogServerContentArgs{...} }
type NetworktemplateRemoteSyslogServerContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput
	ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput
}

type NetworktemplateRemoteSyslogServerContentArray []NetworktemplateRemoteSyslogServerContentInput

func (NetworktemplateRemoteSyslogServerContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogServerContentArray) ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogServerContentArray) ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogServerContentArrayOutput)
}

type NetworktemplateRemoteSyslogServerContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerContentOutput) ToNetworktemplateRemoteSyslogServerContentOutput() NetworktemplateRemoteSyslogServerContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentOutput) ToNetworktemplateRemoteSyslogServerContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogServerContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServerContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogServerContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogServerContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogServerContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogServerContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogServerContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) ToNetworktemplateRemoteSyslogServerContentArrayOutput() NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) ToNetworktemplateRemoteSyslogServerContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogServerContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogServerContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogServerContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogServerContent {
		return vs[0].([]NetworktemplateRemoteSyslogServerContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogServerContentOutput)
}

type NetworktemplateRemoteSyslogUser struct {
	Contents []NetworktemplateRemoteSyslogUserContent `pulumi:"contents"`
	Match    *string                                  `pulumi:"match"`
	User     *string                                  `pulumi:"user"`
}

// NetworktemplateRemoteSyslogUserInput is an input type that accepts NetworktemplateRemoteSyslogUserArgs and NetworktemplateRemoteSyslogUserOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserInput` via:
//
//	NetworktemplateRemoteSyslogUserArgs{...}
type NetworktemplateRemoteSyslogUserInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput
	ToNetworktemplateRemoteSyslogUserOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserOutput
}

type NetworktemplateRemoteSyslogUserArgs struct {
	Contents NetworktemplateRemoteSyslogUserContentArrayInput `pulumi:"contents"`
	Match    pulumi.StringPtrInput                            `pulumi:"match"`
	User     pulumi.StringPtrInput                            `pulumi:"user"`
}

func (NetworktemplateRemoteSyslogUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserArgs) ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput {
	return i.ToNetworktemplateRemoteSyslogUserOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserArgs) ToNetworktemplateRemoteSyslogUserOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserOutput)
}

// NetworktemplateRemoteSyslogUserArrayInput is an input type that accepts NetworktemplateRemoteSyslogUserArray and NetworktemplateRemoteSyslogUserArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserArrayInput` via:
//
//	NetworktemplateRemoteSyslogUserArray{ NetworktemplateRemoteSyslogUserArgs{...} }
type NetworktemplateRemoteSyslogUserArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput
	ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserArrayOutput
}

type NetworktemplateRemoteSyslogUserArray []NetworktemplateRemoteSyslogUserInput

func (NetworktemplateRemoteSyslogUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserArray) ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput {
	return i.ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserArray) ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserArrayOutput)
}

type NetworktemplateRemoteSyslogUserOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserOutput) ToNetworktemplateRemoteSyslogUserOutput() NetworktemplateRemoteSyslogUserOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserOutput) ToNetworktemplateRemoteSyslogUserOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserOutput) Contents() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) []NetworktemplateRemoteSyslogUserContent { return v.Contents }).(NetworktemplateRemoteSyslogUserContentArrayOutput)
}

func (o NetworktemplateRemoteSyslogUserOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) *string { return v.Match }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateRemoteSyslogUserOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUser) *string { return v.User }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogUserArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUser)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) ToNetworktemplateRemoteSyslogUserArrayOutput() NetworktemplateRemoteSyslogUserArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) ToNetworktemplateRemoteSyslogUserArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogUser {
		return vs[0].([]NetworktemplateRemoteSyslogUser)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogUserOutput)
}

type NetworktemplateRemoteSyslogUserContent struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility *string `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity *string `pulumi:"severity"`
}

// NetworktemplateRemoteSyslogUserContentInput is an input type that accepts NetworktemplateRemoteSyslogUserContentArgs and NetworktemplateRemoteSyslogUserContentOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserContentInput` via:
//
//	NetworktemplateRemoteSyslogUserContentArgs{...}
type NetworktemplateRemoteSyslogUserContentInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput
	ToNetworktemplateRemoteSyslogUserContentOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserContentOutput
}

type NetworktemplateRemoteSyslogUserContentArgs struct {
	// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
	Facility pulumi.StringPtrInput `pulumi:"facility"`
	// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
	Severity pulumi.StringPtrInput `pulumi:"severity"`
}

func (NetworktemplateRemoteSyslogUserContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserContentArgs) ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput {
	return i.ToNetworktemplateRemoteSyslogUserContentOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserContentArgs) ToNetworktemplateRemoteSyslogUserContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserContentOutput)
}

// NetworktemplateRemoteSyslogUserContentArrayInput is an input type that accepts NetworktemplateRemoteSyslogUserContentArray and NetworktemplateRemoteSyslogUserContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateRemoteSyslogUserContentArrayInput` via:
//
//	NetworktemplateRemoteSyslogUserContentArray{ NetworktemplateRemoteSyslogUserContentArgs{...} }
type NetworktemplateRemoteSyslogUserContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput
	ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput
}

type NetworktemplateRemoteSyslogUserContentArray []NetworktemplateRemoteSyslogUserContentInput

func (NetworktemplateRemoteSyslogUserContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (i NetworktemplateRemoteSyslogUserContentArray) ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return i.ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateRemoteSyslogUserContentArray) ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateRemoteSyslogUserContentArrayOutput)
}

type NetworktemplateRemoteSyslogUserContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserContentOutput) ToNetworktemplateRemoteSyslogUserContentOutput() NetworktemplateRemoteSyslogUserContentOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentOutput) ToNetworktemplateRemoteSyslogUserContentOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentOutput {
	return o
}

// enum: `any`, `authorization`, `change-log`, `config`, `conflict-log`, `daemon`, `dfc`, `external`, `firewall`, `ftp`, `interactive-commands`, `kernel`, `ntp`, `pfe`, `security`, `user`
func (o NetworktemplateRemoteSyslogUserContentOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUserContent) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// enum: `alert`, `any`, `critical`, `emergency`, `error`, `info`, `notice`, `warning`
func (o NetworktemplateRemoteSyslogUserContentOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateRemoteSyslogUserContent) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

type NetworktemplateRemoteSyslogUserContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateRemoteSyslogUserContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateRemoteSyslogUserContent)(nil)).Elem()
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) ToNetworktemplateRemoteSyslogUserContentArrayOutput() NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) ToNetworktemplateRemoteSyslogUserContentArrayOutputWithContext(ctx context.Context) NetworktemplateRemoteSyslogUserContentArrayOutput {
	return o
}

func (o NetworktemplateRemoteSyslogUserContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateRemoteSyslogUserContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateRemoteSyslogUserContent {
		return vs[0].([]NetworktemplateRemoteSyslogUserContent)[vs[1].(int)]
	}).(NetworktemplateRemoteSyslogUserContentOutput)
}

type NetworktemplateSnmpConfig struct {
	ClientLists []NetworktemplateSnmpConfigClientList `pulumi:"clientLists"`
	Contact     *string                               `pulumi:"contact"`
	Description *string                               `pulumi:"description"`
	Enabled     *bool                                 `pulumi:"enabled"`
	// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
	EngineId   *string                              `pulumi:"engineId"`
	Location   *string                              `pulumi:"location"`
	Name       *string                              `pulumi:"name"`
	Network    *string                              `pulumi:"network"`
	TrapGroups []NetworktemplateSnmpConfigTrapGroup `pulumi:"trapGroups"`
	V2cConfigs []NetworktemplateSnmpConfigV2cConfig `pulumi:"v2cConfigs"`
	V3Config   *NetworktemplateSnmpConfigV3Config   `pulumi:"v3Config"`
	Views      []NetworktemplateSnmpConfigView      `pulumi:"views"`
}

// NetworktemplateSnmpConfigInput is an input type that accepts NetworktemplateSnmpConfigArgs and NetworktemplateSnmpConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigInput` via:
//
//	NetworktemplateSnmpConfigArgs{...}
type NetworktemplateSnmpConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput
	ToNetworktemplateSnmpConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigOutput
}

type NetworktemplateSnmpConfigArgs struct {
	ClientLists NetworktemplateSnmpConfigClientListArrayInput `pulumi:"clientLists"`
	Contact     pulumi.StringPtrInput                         `pulumi:"contact"`
	Description pulumi.StringPtrInput                         `pulumi:"description"`
	Enabled     pulumi.BoolPtrInput                           `pulumi:"enabled"`
	// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
	EngineId   pulumi.StringPtrInput                        `pulumi:"engineId"`
	Location   pulumi.StringPtrInput                        `pulumi:"location"`
	Name       pulumi.StringPtrInput                        `pulumi:"name"`
	Network    pulumi.StringPtrInput                        `pulumi:"network"`
	TrapGroups NetworktemplateSnmpConfigTrapGroupArrayInput `pulumi:"trapGroups"`
	V2cConfigs NetworktemplateSnmpConfigV2cConfigArrayInput `pulumi:"v2cConfigs"`
	V3Config   NetworktemplateSnmpConfigV3ConfigPtrInput    `pulumi:"v3Config"`
	Views      NetworktemplateSnmpConfigViewArrayInput      `pulumi:"views"`
}

func (NetworktemplateSnmpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput {
	return i.ToNetworktemplateSnmpConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigOutput)
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigArgs) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigOutput).ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigPtrInput is an input type that accepts NetworktemplateSnmpConfigArgs, NetworktemplateSnmpConfigPtr and NetworktemplateSnmpConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigPtrInput` via:
//
//	        NetworktemplateSnmpConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput
	ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigPtrOutput
}

type networktemplateSnmpConfigPtrType NetworktemplateSnmpConfigArgs

func NetworktemplateSnmpConfigPtr(v *NetworktemplateSnmpConfigArgs) NetworktemplateSnmpConfigPtrInput {
	return (*networktemplateSnmpConfigPtrType)(v)
}

func (*networktemplateSnmpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfig)(nil)).Elem()
}

func (i *networktemplateSnmpConfigPtrType) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigPtrType) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigPtrOutput)
}

type NetworktemplateSnmpConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigOutput() NetworktemplateSnmpConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return o.ToNetworktemplateSnmpConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigOutput) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfig) *NetworktemplateSnmpConfig {
		return &v
	}).(NetworktemplateSnmpConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) ClientLists() NetworktemplateSnmpConfigClientListArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigClientList { return v.ClientLists }).(NetworktemplateSnmpConfigClientListArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Contact }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
func (o NetworktemplateSnmpConfigOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.EngineId }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) TrapGroups() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigTrapGroup { return v.TrapGroups }).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) V2cConfigs() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigV2cConfig { return v.V2cConfigs }).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

func (o NetworktemplateSnmpConfigOutput) V3Config() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) *NetworktemplateSnmpConfigV3Config { return v.V3Config }).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigOutput) Views() NetworktemplateSnmpConfigViewArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigView { return v.Views }).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigPtrOutput) ToNetworktemplateSnmpConfigPtrOutput() NetworktemplateSnmpConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigPtrOutput) ToNetworktemplateSnmpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigPtrOutput) Elem() NetworktemplateSnmpConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) NetworktemplateSnmpConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfig
		return ret
	}).(NetworktemplateSnmpConfigOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) ClientLists() NetworktemplateSnmpConfigClientListArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigClientList {
		if v == nil {
			return nil
		}
		return v.ClientLists
	}).(NetworktemplateSnmpConfigClientListArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Contact
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// enum: `engine-id-suffix`, `local`, `use-default-ip-address`, `use_mac-address`
func (o NetworktemplateSnmpConfigPtrOutput) EngineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.EngineId
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) TrapGroups() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigTrapGroup {
		if v == nil {
			return nil
		}
		return v.TrapGroups
	}).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) V2cConfigs() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigV2cConfig {
		if v == nil {
			return nil
		}
		return v.V2cConfigs
	}).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) V3Config() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) *NetworktemplateSnmpConfigV3Config {
		if v == nil {
			return nil
		}
		return v.V3Config
	}).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigPtrOutput) Views() NetworktemplateSnmpConfigViewArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfig) []NetworktemplateSnmpConfigView {
		if v == nil {
			return nil
		}
		return v.Views
	}).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigClientList struct {
	ClientListName *string  `pulumi:"clientListName"`
	Clients        []string `pulumi:"clients"`
}

// NetworktemplateSnmpConfigClientListInput is an input type that accepts NetworktemplateSnmpConfigClientListArgs and NetworktemplateSnmpConfigClientListOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigClientListInput` via:
//
//	NetworktemplateSnmpConfigClientListArgs{...}
type NetworktemplateSnmpConfigClientListInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput
	ToNetworktemplateSnmpConfigClientListOutputWithContext(context.Context) NetworktemplateSnmpConfigClientListOutput
}

type NetworktemplateSnmpConfigClientListArgs struct {
	ClientListName pulumi.StringPtrInput   `pulumi:"clientListName"`
	Clients        pulumi.StringArrayInput `pulumi:"clients"`
}

func (NetworktemplateSnmpConfigClientListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigClientListArgs) ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput {
	return i.ToNetworktemplateSnmpConfigClientListOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigClientListArgs) ToNetworktemplateSnmpConfigClientListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigClientListOutput)
}

// NetworktemplateSnmpConfigClientListArrayInput is an input type that accepts NetworktemplateSnmpConfigClientListArray and NetworktemplateSnmpConfigClientListArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigClientListArrayInput` via:
//
//	NetworktemplateSnmpConfigClientListArray{ NetworktemplateSnmpConfigClientListArgs{...} }
type NetworktemplateSnmpConfigClientListArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput
	ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigClientListArrayOutput
}

type NetworktemplateSnmpConfigClientListArray []NetworktemplateSnmpConfigClientListInput

func (NetworktemplateSnmpConfigClientListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigClientListArray) ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput {
	return i.ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigClientListArray) ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigClientListArrayOutput)
}

type NetworktemplateSnmpConfigClientListOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigClientListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigClientListOutput) ToNetworktemplateSnmpConfigClientListOutput() NetworktemplateSnmpConfigClientListOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListOutput) ToNetworktemplateSnmpConfigClientListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListOutput) ClientListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigClientList) *string { return v.ClientListName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigClientListOutput) Clients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigClientList) []string { return v.Clients }).(pulumi.StringArrayOutput)
}

type NetworktemplateSnmpConfigClientListArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigClientListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigClientList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) ToNetworktemplateSnmpConfigClientListArrayOutput() NetworktemplateSnmpConfigClientListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) ToNetworktemplateSnmpConfigClientListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigClientListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigClientListArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigClientListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigClientList {
		return vs[0].([]NetworktemplateSnmpConfigClientList)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigClientListOutput)
}

type NetworktemplateSnmpConfigTrapGroup struct {
	Categories []string `pulumi:"categories"`
	// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
	GroupName *string  `pulumi:"groupName"`
	Targets   []string `pulumi:"targets"`
	// enum: `all`, `v1`, `v2`
	Version *string `pulumi:"version"`
}

// NetworktemplateSnmpConfigTrapGroupInput is an input type that accepts NetworktemplateSnmpConfigTrapGroupArgs and NetworktemplateSnmpConfigTrapGroupOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigTrapGroupInput` via:
//
//	NetworktemplateSnmpConfigTrapGroupArgs{...}
type NetworktemplateSnmpConfigTrapGroupInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput
	ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(context.Context) NetworktemplateSnmpConfigTrapGroupOutput
}

type NetworktemplateSnmpConfigTrapGroupArgs struct {
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
	GroupName pulumi.StringPtrInput   `pulumi:"groupName"`
	Targets   pulumi.StringArrayInput `pulumi:"targets"`
	// enum: `all`, `v1`, `v2`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NetworktemplateSnmpConfigTrapGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigTrapGroupArgs) ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput {
	return i.ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigTrapGroupArgs) ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigTrapGroupOutput)
}

// NetworktemplateSnmpConfigTrapGroupArrayInput is an input type that accepts NetworktemplateSnmpConfigTrapGroupArray and NetworktemplateSnmpConfigTrapGroupArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigTrapGroupArrayInput` via:
//
//	NetworktemplateSnmpConfigTrapGroupArray{ NetworktemplateSnmpConfigTrapGroupArgs{...} }
type NetworktemplateSnmpConfigTrapGroupArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput
	ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput
}

type NetworktemplateSnmpConfigTrapGroupArray []NetworktemplateSnmpConfigTrapGroupInput

func (NetworktemplateSnmpConfigTrapGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigTrapGroupArray) ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return i.ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigTrapGroupArray) ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigTrapGroupArrayOutput)
}

type NetworktemplateSnmpConfigTrapGroupOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigTrapGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) ToNetworktemplateSnmpConfigTrapGroupOutput() NetworktemplateSnmpConfigTrapGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) ToNetworktemplateSnmpConfigTrapGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

// Categories list can refer to https://www.juniper.net/documentation/software/topics/task/configuration/snmp_trap-groups-configuring-junos-nm.html
func (o NetworktemplateSnmpConfigTrapGroupOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigTrapGroupOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

// enum: `all`, `v1`, `v2`
func (o NetworktemplateSnmpConfigTrapGroupOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigTrapGroup) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigTrapGroupArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigTrapGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigTrapGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) ToNetworktemplateSnmpConfigTrapGroupArrayOutput() NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) ToNetworktemplateSnmpConfigTrapGroupArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigTrapGroupArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigTrapGroupArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigTrapGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigTrapGroup {
		return vs[0].([]NetworktemplateSnmpConfigTrapGroup)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigTrapGroupOutput)
}

type NetworktemplateSnmpConfigV2cConfig struct {
	Authorization *string `pulumi:"authorization"`
	// client_list_name here should refer to clientList above
	ClientListName *string `pulumi:"clientListName"`
	CommunityName  *string `pulumi:"communityName"`
	// view name here should be defined in views above
	View *string `pulumi:"view"`
}

// NetworktemplateSnmpConfigV2cConfigInput is an input type that accepts NetworktemplateSnmpConfigV2cConfigArgs and NetworktemplateSnmpConfigV2cConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV2cConfigInput` via:
//
//	NetworktemplateSnmpConfigV2cConfigArgs{...}
type NetworktemplateSnmpConfigV2cConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput
	ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigV2cConfigOutput
}

type NetworktemplateSnmpConfigV2cConfigArgs struct {
	Authorization pulumi.StringPtrInput `pulumi:"authorization"`
	// client_list_name here should refer to clientList above
	ClientListName pulumi.StringPtrInput `pulumi:"clientListName"`
	CommunityName  pulumi.StringPtrInput `pulumi:"communityName"`
	// view name here should be defined in views above
	View pulumi.StringPtrInput `pulumi:"view"`
}

func (NetworktemplateSnmpConfigV2cConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV2cConfigArgs) ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput {
	return i.ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV2cConfigArgs) ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV2cConfigOutput)
}

// NetworktemplateSnmpConfigV2cConfigArrayInput is an input type that accepts NetworktemplateSnmpConfigV2cConfigArray and NetworktemplateSnmpConfigV2cConfigArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV2cConfigArrayInput` via:
//
//	NetworktemplateSnmpConfigV2cConfigArray{ NetworktemplateSnmpConfigV2cConfigArgs{...} }
type NetworktemplateSnmpConfigV2cConfigArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput
	ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput
}

type NetworktemplateSnmpConfigV2cConfigArray []NetworktemplateSnmpConfigV2cConfigInput

func (NetworktemplateSnmpConfigV2cConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV2cConfigArray) ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return i.ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV2cConfigArray) ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV2cConfigArrayOutput)
}

type NetworktemplateSnmpConfigV2cConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV2cConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) ToNetworktemplateSnmpConfigV2cConfigOutput() NetworktemplateSnmpConfigV2cConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) ToNetworktemplateSnmpConfigV2cConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) Authorization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.Authorization }).(pulumi.StringPtrOutput)
}

// client_list_name here should refer to clientList above
func (o NetworktemplateSnmpConfigV2cConfigOutput) ClientListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.ClientListName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV2cConfigOutput) CommunityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.CommunityName }).(pulumi.StringPtrOutput)
}

// view name here should be defined in views above
func (o NetworktemplateSnmpConfigV2cConfigOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV2cConfig) *string { return v.View }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV2cConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV2cConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV2cConfig)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) ToNetworktemplateSnmpConfigV2cConfigArrayOutput() NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) ToNetworktemplateSnmpConfigV2cConfigArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV2cConfigArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV2cConfigArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV2cConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV2cConfig {
		return vs[0].([]NetworktemplateSnmpConfigV2cConfig)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV2cConfigOutput)
}

type NetworktemplateSnmpConfigV3Config struct {
	Notifies         []NetworktemplateSnmpConfigV3ConfigNotify          `pulumi:"notifies"`
	NotifyFilters    []NetworktemplateSnmpConfigV3ConfigNotifyFilter    `pulumi:"notifyFilters"`
	TargetAddresses  []NetworktemplateSnmpConfigV3ConfigTargetAddress   `pulumi:"targetAddresses"`
	TargetParameters []NetworktemplateSnmpConfigV3ConfigTargetParameter `pulumi:"targetParameters"`
	Usm              *NetworktemplateSnmpConfigV3ConfigUsm              `pulumi:"usm"`
	Vacm             *NetworktemplateSnmpConfigV3ConfigVacm             `pulumi:"vacm"`
}

// NetworktemplateSnmpConfigV3ConfigInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigArgs and NetworktemplateSnmpConfigV3ConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigArgs{...}
type NetworktemplateSnmpConfigV3ConfigInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput
	ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigOutput
}

type NetworktemplateSnmpConfigV3ConfigArgs struct {
	Notifies         NetworktemplateSnmpConfigV3ConfigNotifyArrayInput          `pulumi:"notifies"`
	NotifyFilters    NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput    `pulumi:"notifyFilters"`
	TargetAddresses  NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput   `pulumi:"targetAddresses"`
	TargetParameters NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput `pulumi:"targetParameters"`
	Usm              NetworktemplateSnmpConfigV3ConfigUsmPtrInput               `pulumi:"usm"`
	Vacm             NetworktemplateSnmpConfigV3ConfigVacmPtrInput              `pulumi:"vacm"`
}

func (NetworktemplateSnmpConfigV3ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigArgs) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigOutput).ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigArgs, NetworktemplateSnmpConfigV3ConfigPtr and NetworktemplateSnmpConfigV3ConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput
}

type networktemplateSnmpConfigV3ConfigPtrType NetworktemplateSnmpConfigV3ConfigArgs

func NetworktemplateSnmpConfigV3ConfigPtr(v *NetworktemplateSnmpConfigV3ConfigArgs) NetworktemplateSnmpConfigV3ConfigPtrInput {
	return (*networktemplateSnmpConfigV3ConfigPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigPtrType) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigPtrType) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigOutput() NetworktemplateSnmpConfigV3ConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3Config {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Notifies() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotify { return v.Notifies }).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) NotifyFilters() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		return v.NotifyFilters
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) TargetAddresses() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetAddress {
		return v.TargetAddresses
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) TargetParameters() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetParameter {
		return v.TargetParameters
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Usm() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigUsm { return v.Usm }).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigOutput) Vacm() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigVacm { return v.Vacm }).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3Config)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutput() NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) ToNetworktemplateSnmpConfigV3ConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) NetworktemplateSnmpConfigV3Config {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3Config
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Notifies() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotify {
		if v == nil {
			return nil
		}
		return v.Notifies
	}).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) NotifyFilters() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		if v == nil {
			return nil
		}
		return v.NotifyFilters
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) TargetAddresses() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetAddress {
		if v == nil {
			return nil
		}
		return v.TargetAddresses
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) TargetParameters() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) []NetworktemplateSnmpConfigV3ConfigTargetParameter {
		if v == nil {
			return nil
		}
		return v.TargetParameters
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Usm() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigUsm {
		if v == nil {
			return nil
		}
		return v.Usm
	}).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigPtrOutput) Vacm() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3Config) *NetworktemplateSnmpConfigV3ConfigVacm {
		if v == nil {
			return nil
		}
		return v.Vacm
	}).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotify struct {
	Name *string `pulumi:"name"`
	Tag  *string `pulumi:"tag"`
	// enum: `inform`, `trap`
	Type *string `pulumi:"type"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyArgs and NetworktemplateSnmpConfigV3ConfigNotifyOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	Tag  pulumi.StringPtrInput `pulumi:"tag"`
	// enum: `inform`, `trap`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyArray and NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyArray{ NetworktemplateSnmpConfigV3ConfigNotifyArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyArray []NetworktemplateSnmpConfigV3ConfigNotifyInput

func (NetworktemplateSnmpConfigV3ConfigNotifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArray) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyArray) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyOutput() NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// enum: `inform`, `trap`
func (o NetworktemplateSnmpConfigV3ConfigNotifyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotify) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotify)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotify {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotify)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilter struct {
	Contents    []NetworktemplateSnmpConfigV3ConfigNotifyFilterContent `pulumi:"contents"`
	ProfileName *string                                                `pulumi:"profileName"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs and NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyFilterInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs struct {
	Contents    NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput `pulumi:"contents"`
	ProfileName pulumi.StringPtrInput                                          `pulumi:"profileName"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterArray and NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterArray{ NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArray []NetworktemplateSnmpConfigV3ConfigNotifyFilterInput

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) Contents() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilter) []NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput) ProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilter) *string { return v.ProfileName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotifyFilter {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotifyFilter)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContent struct {
	Include *bool   `pulumi:"include"`
	Oid     *string `pulumi:"oid"`
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs and NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{...}
type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs struct {
	Include pulumi.BoolPtrInput   `pulumi:"include"`
	Oid     pulumi.StringPtrInput `pulumi:"oid"`
}

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput)
}

// NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray and NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray{ NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{...} }
type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray []NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) Include() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilterContent) *bool { return v.Include }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput) Oid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigNotifyFilterContent) *string { return v.Oid }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput() NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigNotifyFilterContent {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigNotifyFilterContent)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddress struct {
	Address     *string `pulumi:"address"`
	AddressMask *string `pulumi:"addressMask"`
	Port        *int    `pulumi:"port"`
	// <refer to notify tag, can be multiple with blank
	TagList           *string `pulumi:"tagList"`
	TargetAddressName *string `pulumi:"targetAddressName"`
	// refer to notify target parameters name
	TargetParameters *string `pulumi:"targetParameters"`
}

// NetworktemplateSnmpConfigV3ConfigTargetAddressInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetAddressArgs and NetworktemplateSnmpConfigV3ConfigTargetAddressOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetAddressInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{...}
type NetworktemplateSnmpConfigV3ConfigTargetAddressInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArgs struct {
	Address     pulumi.StringPtrInput `pulumi:"address"`
	AddressMask pulumi.StringPtrInput `pulumi:"addressMask"`
	Port        pulumi.IntPtrInput    `pulumi:"port"`
	// <refer to notify tag, can be multiple with blank
	TagList           pulumi.StringPtrInput `pulumi:"tagList"`
	TargetAddressName pulumi.StringPtrInput `pulumi:"targetAddressName"`
	// refer to notify target parameters name
	TargetParameters pulumi.StringPtrInput `pulumi:"targetParameters"`
}

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArgs) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput)
}

// NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetAddressArray and NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetAddressArray{ NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{...} }
type NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArray []NetworktemplateSnmpConfigV3ConfigTargetAddressInput

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetAddressArray) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.AddressMask }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// <refer to notify tag, can be multiple with blank
func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TagList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TagList }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TargetAddressName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TargetAddressName }).(pulumi.StringPtrOutput)
}

// refer to notify target parameters name
func (o NetworktemplateSnmpConfigV3ConfigTargetAddressOutput) TargetParameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetAddress) *string { return v.TargetParameters }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetAddress)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigTargetAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigTargetAddress {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigTargetAddress)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameter struct {
	// enum: `v1`, `v2c`, `v3`
	MessageProcessingModel *string `pulumi:"messageProcessingModel"`
	Name                   *string `pulumi:"name"`
	// refer to profile-name in notify_filter
	NotifyFilter *string `pulumi:"notifyFilter"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel *string `pulumi:"securityLevel"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
	// refer to securityName in usm
	SecurityName *string `pulumi:"securityName"`
}

// NetworktemplateSnmpConfigV3ConfigTargetParameterInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetParameterArgs and NetworktemplateSnmpConfigV3ConfigTargetParameterOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetParameterInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{...}
type NetworktemplateSnmpConfigV3ConfigTargetParameterInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArgs struct {
	// enum: `v1`, `v2c`, `v3`
	MessageProcessingModel pulumi.StringPtrInput `pulumi:"messageProcessingModel"`
	Name                   pulumi.StringPtrInput `pulumi:"name"`
	// refer to profile-name in notify_filter
	NotifyFilter pulumi.StringPtrInput `pulumi:"notifyFilter"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
	// refer to securityName in usm
	SecurityName pulumi.StringPtrInput `pulumi:"securityName"`
}

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArgs) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput)
}

// NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigTargetParameterArray and NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigTargetParameterArray{ NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{...} }
type NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArray []NetworktemplateSnmpConfigV3ConfigTargetParameterInput

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigTargetParameterArray) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return o
}

// enum: `v1`, `v2c`, `v3`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) MessageProcessingModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.MessageProcessingModel }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// refer to profile-name in notify_filter
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) NotifyFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.NotifyFilter }).(pulumi.StringPtrOutput)
}

// enum: `authentication`, `none`, `privacy`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

// refer to securityName in usm
func (o NetworktemplateSnmpConfigV3ConfigTargetParameterOutput) SecurityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigTargetParameter) *string { return v.SecurityName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigTargetParameter)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput() NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) ToNetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigTargetParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigTargetParameter {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigTargetParameter)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsm struct {
	// enum: `localEngine`, `remoteEngine`
	EngineType *string `pulumi:"engineType"`
	// required only if `engineType`==`remoteEngine`
	Engineid *string                                    `pulumi:"engineid"`
	Users    []NetworktemplateSnmpConfigV3ConfigUsmUser `pulumi:"users"`
}

// NetworktemplateSnmpConfigV3ConfigUsmInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmArgs and NetworktemplateSnmpConfigV3ConfigUsmOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmArgs{...}
type NetworktemplateSnmpConfigV3ConfigUsmInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmArgs struct {
	// enum: `localEngine`, `remoteEngine`
	EngineType pulumi.StringPtrInput `pulumi:"engineType"`
	// required only if `engineType`==`remoteEngine`
	Engineid pulumi.StringPtrInput                              `pulumi:"engineid"`
	Users    NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput `pulumi:"users"`
}

func (NetworktemplateSnmpConfigV3ConfigUsmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmArgs) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmOutput).ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigUsmPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmArgs, NetworktemplateSnmpConfigV3ConfigUsmPtr and NetworktemplateSnmpConfigV3ConfigUsmPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigUsmArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigUsmPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput
}

type networktemplateSnmpConfigV3ConfigUsmPtrType NetworktemplateSnmpConfigV3ConfigUsmArgs

func NetworktemplateSnmpConfigV3ConfigUsmPtr(v *NetworktemplateSnmpConfigV3ConfigUsmArgs) NetworktemplateSnmpConfigV3ConfigUsmPtrInput {
	return (*networktemplateSnmpConfigV3ConfigUsmPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigUsmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigUsmPtrType) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigUsmPtrType) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmOutput() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigUsm) *NetworktemplateSnmpConfigV3ConfigUsm {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput)
}

// enum: `localEngine`, `remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) *string { return v.EngineType }).(pulumi.StringPtrOutput)
}

// required only if `engineType`==`remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) Engineid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) *string { return v.Engineid }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmOutput) Users() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsm) []NetworktemplateSnmpConfigV3ConfigUsmUser {
		return v.Users
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigUsm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutput() NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigUsmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigUsmOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) NetworktemplateSnmpConfigV3ConfigUsm {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigUsm
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigUsmOutput)
}

// enum: `localEngine`, `remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) *string {
		if v == nil {
			return nil
		}
		return v.EngineType
	}).(pulumi.StringPtrOutput)
}

// required only if `engineType`==`remoteEngine`
func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Engineid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) *string {
		if v == nil {
			return nil
		}
		return v.Engineid
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmPtrOutput) Users() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigUsm) []NetworktemplateSnmpConfigV3ConfigUsmUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUser struct {
	// Not required if `authenticationType`==`authenticationNone`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
	AuthenticationPassword *string `pulumi:"authenticationPassword"`
	// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
	AuthenticationType *string `pulumi:"authenticationType"`
	// Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
	EncryptionPassword *string `pulumi:"encryptionPassword"`
	// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
	EncryptionType *string `pulumi:"encryptionType"`
	Name           *string `pulumi:"name"`
}

// NetworktemplateSnmpConfigV3ConfigUsmUserInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmUserArgs and NetworktemplateSnmpConfigV3ConfigUsmUserOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmUserInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmUserArgs{...}
type NetworktemplateSnmpConfigV3ConfigUsmUserInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArgs struct {
	// Not required if `authenticationType`==`authenticationNone`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
	AuthenticationPassword pulumi.StringPtrInput `pulumi:"authenticationPassword"`
	// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
	AuthenticationType pulumi.StringPtrInput `pulumi:"authenticationType"`
	// Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
	EncryptionPassword pulumi.StringPtrInput `pulumi:"encryptionPassword"`
	// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
	EncryptionType pulumi.StringPtrInput `pulumi:"encryptionType"`
	Name           pulumi.StringPtrInput `pulumi:"name"`
}

func (NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArgs) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmUserOutput)
}

// NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigUsmUserArray and NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigUsmUserArray{ NetworktemplateSnmpConfigV3ConfigUsmUserArgs{...} }
type NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArray []NetworktemplateSnmpConfigV3ConfigUsmUserInput

func (NetworktemplateSnmpConfigV3ConfigUsmUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArray) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigUsmUserArray) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUserOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutput() NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return o
}

// Not required if `authenticationType`==`authenticationNone`. Include alphabetic, numeric, and special characters, but it cannot include control characters.
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) AuthenticationPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.AuthenticationPassword }).(pulumi.StringPtrOutput)
}

// sha224, sha256, sha384, sha512 are supported in 21.1 and newer release. enum: `authenticationMd5`, `authenticationNone`, `authenticationSha`, `authenticationSha224`, `authenticationSha256`, `authenticationSha384`, `authenticationSha512`
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) AuthenticationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.AuthenticationType }).(pulumi.StringPtrOutput)
}

// Not required if `encryptionType`==`privacy-none`. Include alphabetic, numeric, and special characters, but it cannot include control characters
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) EncryptionPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.EncryptionPassword }).(pulumi.StringPtrOutput)
}

// enum: `privacy-3des`, `privacy-aes128`, `privacy-des`, `privacy-none`
func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigUsmUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigUsmUser)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput() NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) ToNetworktemplateSnmpConfigV3ConfigUsmUserArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigUsmUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigUsmUser {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigUsmUser)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigUsmUserOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacm struct {
	Accesses        []NetworktemplateSnmpConfigV3ConfigVacmAccess         `pulumi:"accesses"`
	SecurityToGroup *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup `pulumi:"securityToGroup"`
}

// NetworktemplateSnmpConfigV3ConfigVacmInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmArgs and NetworktemplateSnmpConfigV3ConfigVacmOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmArgs struct {
	Accesses        NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput        `pulumi:"accesses"`
	SecurityToGroup NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput `pulumi:"securityToGroup"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmArgs) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmOutput).ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigVacmPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmArgs, NetworktemplateSnmpConfigV3ConfigVacmPtr and NetworktemplateSnmpConfigV3ConfigVacmPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigVacmArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigVacmPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput
}

type networktemplateSnmpConfigV3ConfigVacmPtrType NetworktemplateSnmpConfigV3ConfigVacmArgs

func NetworktemplateSnmpConfigV3ConfigVacmPtr(v *NetworktemplateSnmpConfigV3ConfigVacmArgs) NetworktemplateSnmpConfigV3ConfigVacmPtrInput {
	return (*networktemplateSnmpConfigV3ConfigVacmPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigVacmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigVacmPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigVacmPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmOutput() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacm {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) Accesses() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacm) []NetworktemplateSnmpConfigV3ConfigVacmAccess {
		return v.Accesses
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmOutput) SecurityToGroup() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		return v.SecurityToGroup
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacm)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigVacmOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) NetworktemplateSnmpConfigV3ConfigVacm {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigVacm
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigVacmOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) Accesses() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) []NetworktemplateSnmpConfigV3ConfigVacmAccess {
		if v == nil {
			return nil
		}
		return v.Accesses
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmPtrOutput) SecurityToGroup() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacm) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		if v == nil {
			return nil
		}
		return v.SecurityToGroup
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccess struct {
	GroupName   *string                                                 `pulumi:"groupName"`
	PrefixLists []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList `pulumi:"prefixLists"`
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessArgs and NetworktemplateSnmpConfigV3ConfigVacmAccessOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmAccessInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArgs struct {
	GroupName   pulumi.StringPtrInput                                           `pulumi:"groupName"`
	PrefixLists NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput `pulumi:"prefixLists"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessArray and NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessArray{ NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArray []NetworktemplateSnmpConfigV3ConfigVacmAccessInput

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccess) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessOutput) PrefixLists() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccess) []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
		return v.PrefixLists
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccess)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmAccess {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmAccess)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList struct {
	// only required if `type`==`contextPrefix`
	ContextPrefix *string `pulumi:"contextPrefix"`
	// refer to view name
	NotifyView *string `pulumi:"notifyView"`
	// refer to view name
	ReadView *string `pulumi:"readView"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel *string `pulumi:"securityLevel"`
	// enum: `any`, `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
	// enum: `contextPrefix`, `defaultContextPrefix`
	Type *string `pulumi:"type"`
	// refer to view name
	WriteView *string `pulumi:"writeView"`
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs and NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs struct {
	// only required if `type`==`contextPrefix`
	ContextPrefix pulumi.StringPtrInput `pulumi:"contextPrefix"`
	// refer to view name
	NotifyView pulumi.StringPtrInput `pulumi:"notifyView"`
	// refer to view name
	ReadView pulumi.StringPtrInput `pulumi:"readView"`
	// enum: `authentication`, `none`, `privacy`
	SecurityLevel pulumi.StringPtrInput `pulumi:"securityLevel"`
	// enum: `any`, `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
	// enum: `contextPrefix`, `defaultContextPrefix`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// refer to view name
	WriteView pulumi.StringPtrInput `pulumi:"writeView"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray and NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray{ NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray []NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return o
}

// only required if `type`==`contextPrefix`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ContextPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.ContextPrefix }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) NotifyView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.NotifyView }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) ReadView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.ReadView }).(pulumi.StringPtrOutput)
}

// enum: `authentication`, `none`, `privacy`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) SecurityLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.SecurityLevel }).(pulumi.StringPtrOutput)
}

// enum: `any`, `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

// enum: `contextPrefix`, `defaultContextPrefix`
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// refer to view name
func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput) WriteView() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList) *string { return v.WriteView }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixList)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup struct {
	Contents []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent `pulumi:"contents"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel *string `pulumi:"securityModel"`
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs struct {
	Contents NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput `pulumi:"contents"`
	// enum: `usm`, `v1`, `v2c`
	SecurityModel pulumi.StringPtrInput `pulumi:"securityModel"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput)
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput).ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx)
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs, NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtr and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput` via:
//
//	        NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput
}

type networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs

func NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtr(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput {
	return (*networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType)(v)
}

func (*networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (i *networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (i *networktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrType) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		return &v
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) Contents() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *string { return v.SecurityModel }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) Elem() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup
		return ret
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) Contents() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		if v == nil {
			return nil
		}
		return v.Contents
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

// enum: `usm`, `v1`, `v2c`
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput) SecurityModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroup) *string {
		if v == nil {
			return nil
		}
		return v.SecurityModel
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent struct {
	// refer to groupName under access
	Group        *string `pulumi:"group"`
	SecurityName *string `pulumi:"securityName"`
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{...}
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs struct {
	// refer to groupName under access
	Group        pulumi.StringPtrInput `pulumi:"group"`
	SecurityName pulumi.StringPtrInput `pulumi:"securityName"`
}

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput)
}

// NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput is an input type that accepts NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray and NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput` via:
//
//	NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray{ NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{...} }
type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput
	ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray []NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return i.ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return o
}

// refer to groupName under access
func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput) SecurityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent) *string { return v.SecurityName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput() NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) ToNetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent {
		return vs[0].([]NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContent)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput)
}

type NetworktemplateSnmpConfigView struct {
	// if the root oid configured is included
	Include  *bool   `pulumi:"include"`
	Oid      *string `pulumi:"oid"`
	ViewName *string `pulumi:"viewName"`
}

// NetworktemplateSnmpConfigViewInput is an input type that accepts NetworktemplateSnmpConfigViewArgs and NetworktemplateSnmpConfigViewOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigViewInput` via:
//
//	NetworktemplateSnmpConfigViewArgs{...}
type NetworktemplateSnmpConfigViewInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput
	ToNetworktemplateSnmpConfigViewOutputWithContext(context.Context) NetworktemplateSnmpConfigViewOutput
}

type NetworktemplateSnmpConfigViewArgs struct {
	// if the root oid configured is included
	Include  pulumi.BoolPtrInput   `pulumi:"include"`
	Oid      pulumi.StringPtrInput `pulumi:"oid"`
	ViewName pulumi.StringPtrInput `pulumi:"viewName"`
}

func (NetworktemplateSnmpConfigViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigViewArgs) ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput {
	return i.ToNetworktemplateSnmpConfigViewOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigViewArgs) ToNetworktemplateSnmpConfigViewOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigViewOutput)
}

// NetworktemplateSnmpConfigViewArrayInput is an input type that accepts NetworktemplateSnmpConfigViewArray and NetworktemplateSnmpConfigViewArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSnmpConfigViewArrayInput` via:
//
//	NetworktemplateSnmpConfigViewArray{ NetworktemplateSnmpConfigViewArgs{...} }
type NetworktemplateSnmpConfigViewArrayInput interface {
	pulumi.Input

	ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput
	ToNetworktemplateSnmpConfigViewArrayOutputWithContext(context.Context) NetworktemplateSnmpConfigViewArrayOutput
}

type NetworktemplateSnmpConfigViewArray []NetworktemplateSnmpConfigViewInput

func (NetworktemplateSnmpConfigViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (i NetworktemplateSnmpConfigViewArray) ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput {
	return i.ToNetworktemplateSnmpConfigViewArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSnmpConfigViewArray) ToNetworktemplateSnmpConfigViewArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSnmpConfigViewArrayOutput)
}

type NetworktemplateSnmpConfigViewOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigViewOutput) ToNetworktemplateSnmpConfigViewOutput() NetworktemplateSnmpConfigViewOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewOutput) ToNetworktemplateSnmpConfigViewOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewOutput {
	return o
}

// if the root oid configured is included
func (o NetworktemplateSnmpConfigViewOutput) Include() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *bool { return v.Include }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSnmpConfigViewOutput) Oid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *string { return v.Oid }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSnmpConfigViewOutput) ViewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSnmpConfigView) *string { return v.ViewName }).(pulumi.StringPtrOutput)
}

type NetworktemplateSnmpConfigViewArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSnmpConfigViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSnmpConfigView)(nil)).Elem()
}

func (o NetworktemplateSnmpConfigViewArrayOutput) ToNetworktemplateSnmpConfigViewArrayOutput() NetworktemplateSnmpConfigViewArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewArrayOutput) ToNetworktemplateSnmpConfigViewArrayOutputWithContext(ctx context.Context) NetworktemplateSnmpConfigViewArrayOutput {
	return o
}

func (o NetworktemplateSnmpConfigViewArrayOutput) Index(i pulumi.IntInput) NetworktemplateSnmpConfigViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSnmpConfigView {
		return vs[0].([]NetworktemplateSnmpConfigView)[vs[1].(int)]
	}).(NetworktemplateSnmpConfigViewOutput)
}

type NetworktemplateSwitchMatching struct {
	Enable *bool `pulumi:"enable"`
	// list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
	Rules []NetworktemplateSwitchMatchingRule `pulumi:"rules"`
}

// NetworktemplateSwitchMatchingInput is an input type that accepts NetworktemplateSwitchMatchingArgs and NetworktemplateSwitchMatchingOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingInput` via:
//
//	NetworktemplateSwitchMatchingArgs{...}
type NetworktemplateSwitchMatchingInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput
	ToNetworktemplateSwitchMatchingOutputWithContext(context.Context) NetworktemplateSwitchMatchingOutput
}

type NetworktemplateSwitchMatchingArgs struct {
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
	Rules NetworktemplateSwitchMatchingRuleArrayInput `pulumi:"rules"`
}

func (NetworktemplateSwitchMatchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatching)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput {
	return i.ToNetworktemplateSwitchMatchingOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingOutput)
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return i.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingArgs) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingOutput).ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMatchingPtrInput is an input type that accepts NetworktemplateSwitchMatchingArgs, NetworktemplateSwitchMatchingPtr and NetworktemplateSwitchMatchingPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingPtrInput` via:
//
//	        NetworktemplateSwitchMatchingArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMatchingPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput
	ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Context) NetworktemplateSwitchMatchingPtrOutput
}

type networktemplateSwitchMatchingPtrType NetworktemplateSwitchMatchingArgs

func NetworktemplateSwitchMatchingPtr(v *NetworktemplateSwitchMatchingArgs) NetworktemplateSwitchMatchingPtrInput {
	return (*networktemplateSwitchMatchingPtrType)(v)
}

func (*networktemplateSwitchMatchingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatching)(nil)).Elem()
}

func (i *networktemplateSwitchMatchingPtrType) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return i.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMatchingPtrType) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingPtrOutput)
}

type NetworktemplateSwitchMatchingOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatching)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingOutput() NetworktemplateSwitchMatchingOutput {
	return o
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingOutput {
	return o
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return o.ToNetworktemplateSwitchMatchingPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMatchingOutput) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMatching) *NetworktemplateSwitchMatching {
		return &v
	}).(NetworktemplateSwitchMatchingPtrOutput)
}

func (o NetworktemplateSwitchMatchingOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatching) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
func (o NetworktemplateSwitchMatchingOutput) Rules() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatching) []NetworktemplateSwitchMatchingRule { return v.Rules }).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatching)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingPtrOutput) ToNetworktemplateSwitchMatchingPtrOutput() NetworktemplateSwitchMatchingPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingPtrOutput) ToNetworktemplateSwitchMatchingPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingPtrOutput) Elem() NetworktemplateSwitchMatchingOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) NetworktemplateSwitchMatching {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMatching
		return ret
	}).(NetworktemplateSwitchMatchingOutput)
}

func (o NetworktemplateSwitchMatchingPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// list of rules to define custom switch configuration based on different criterias. Each list must have at least one of `matchModel`, `matchName` or `matchRole` must be defined
func (o NetworktemplateSwitchMatchingPtrOutput) Rules() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatching) []NetworktemplateSwitchMatchingRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingRule struct {
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds []string `pulumi:"additionalConfigCmds"`
	// In-Band Management interface configuration
	IpConfig *NetworktemplateSwitchMatchingRuleIpConfig `pulumi:"ipConfig"`
	// string the switch model must start with to use this rule. It is possible to combine with the `matchName` and `matchRole` attributes
	MatchModel *string `pulumi:"matchModel"`
	// string the switch name must start with to use this rule. Use the `matchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `matchModel` and `matchRole` attributes
	MatchName *string `pulumi:"matchName"`
	// first character of the switch name to compare to the `matchName` value
	MatchNameOffset *int `pulumi:"matchNameOffset"`
	// string the switch role must start with to use this rule. It is possible to combine with the `matchName` and `matchModel` attributes
	MatchRole *string `pulumi:"matchRole"`
	// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
	//
	// Deprecated: The `matchType` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
	// Please update your configurations.
	MatchType *string `pulumi:"matchType"`
	// Deprecated: The `matchValue` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
	// Please update your configurations.
	MatchValue *string `pulumi:"matchValue"`
	Name       *string `pulumi:"name"`
	// Out-of-Band Management interface configuration
	OobIpConfig *NetworktemplateSwitchMatchingRuleOobIpConfig `pulumi:"oobIpConfig"`
	// Propery key is the interface name or interface range
	PortConfig map[string]NetworktemplateSwitchMatchingRulePortConfig `pulumi:"portConfig"`
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
	PortMirroring map[string]NetworktemplateSwitchMatchingRulePortMirroring `pulumi:"portMirroring"`
}

// NetworktemplateSwitchMatchingRuleInput is an input type that accepts NetworktemplateSwitchMatchingRuleArgs and NetworktemplateSwitchMatchingRuleOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleInput` via:
//
//	NetworktemplateSwitchMatchingRuleArgs{...}
type NetworktemplateSwitchMatchingRuleInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput
	ToNetworktemplateSwitchMatchingRuleOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleOutput
}

type NetworktemplateSwitchMatchingRuleArgs struct {
	// additional CLI commands to append to the generated Junos config. **Note**: no check is done
	AdditionalConfigCmds pulumi.StringArrayInput `pulumi:"additionalConfigCmds"`
	// In-Band Management interface configuration
	IpConfig NetworktemplateSwitchMatchingRuleIpConfigPtrInput `pulumi:"ipConfig"`
	// string the switch model must start with to use this rule. It is possible to combine with the `matchName` and `matchRole` attributes
	MatchModel pulumi.StringPtrInput `pulumi:"matchModel"`
	// string the switch name must start with to use this rule. Use the `matchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `matchModel` and `matchRole` attributes
	MatchName pulumi.StringPtrInput `pulumi:"matchName"`
	// first character of the switch name to compare to the `matchName` value
	MatchNameOffset pulumi.IntPtrInput `pulumi:"matchNameOffset"`
	// string the switch role must start with to use this rule. It is possible to combine with the `matchName` and `matchModel` attributes
	MatchRole pulumi.StringPtrInput `pulumi:"matchRole"`
	// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
	//
	// Deprecated: The `matchType` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
	// Please update your configurations.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// Deprecated: The `matchValue` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
	// Please update your configurations.
	MatchValue pulumi.StringPtrInput `pulumi:"matchValue"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	// Out-of-Band Management interface configuration
	OobIpConfig NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput `pulumi:"oobIpConfig"`
	// Propery key is the interface name or interface range
	PortConfig NetworktemplateSwitchMatchingRulePortConfigMapInput `pulumi:"portConfig"`
	// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
	PortMirroring NetworktemplateSwitchMatchingRulePortMirroringMapInput `pulumi:"portMirroring"`
}

func (NetworktemplateSwitchMatchingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleArgs) ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput {
	return i.ToNetworktemplateSwitchMatchingRuleOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleArgs) ToNetworktemplateSwitchMatchingRuleOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleOutput)
}

// NetworktemplateSwitchMatchingRuleArrayInput is an input type that accepts NetworktemplateSwitchMatchingRuleArray and NetworktemplateSwitchMatchingRuleArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleArrayInput` via:
//
//	NetworktemplateSwitchMatchingRuleArray{ NetworktemplateSwitchMatchingRuleArgs{...} }
type NetworktemplateSwitchMatchingRuleArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput
	ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleArrayOutput
}

type NetworktemplateSwitchMatchingRuleArray []NetworktemplateSwitchMatchingRuleInput

func (NetworktemplateSwitchMatchingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleArray) ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput {
	return i.ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleArray) ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleArrayOutput)
}

type NetworktemplateSwitchMatchingRuleOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleOutput) ToNetworktemplateSwitchMatchingRuleOutput() NetworktemplateSwitchMatchingRuleOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOutput) ToNetworktemplateSwitchMatchingRuleOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOutput {
	return o
}

// additional CLI commands to append to the generated Junos config. **Note**: no check is done
func (o NetworktemplateSwitchMatchingRuleOutput) AdditionalConfigCmds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) []string { return v.AdditionalConfigCmds }).(pulumi.StringArrayOutput)
}

// In-Band Management interface configuration
func (o NetworktemplateSwitchMatchingRuleOutput) IpConfig() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *NetworktemplateSwitchMatchingRuleIpConfig {
		return v.IpConfig
	}).(NetworktemplateSwitchMatchingRuleIpConfigPtrOutput)
}

// string the switch model must start with to use this rule. It is possible to combine with the `matchName` and `matchRole` attributes
func (o NetworktemplateSwitchMatchingRuleOutput) MatchModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchModel }).(pulumi.StringPtrOutput)
}

// string the switch name must start with to use this rule. Use the `matchNameOffset` to indicate the first character of the switch name to compare to. It is possible to combine with the `matchModel` and `matchRole` attributes
func (o NetworktemplateSwitchMatchingRuleOutput) MatchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchName }).(pulumi.StringPtrOutput)
}

// first character of the switch name to compare to the `matchName` value
func (o NetworktemplateSwitchMatchingRuleOutput) MatchNameOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *int { return v.MatchNameOffset }).(pulumi.IntPtrOutput)
}

// string the switch role must start with to use this rule. It is possible to combine with the `matchName` and `matchModel` attributes
func (o NetworktemplateSwitchMatchingRuleOutput) MatchRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchRole }).(pulumi.StringPtrOutput)
}

// 'property key define the type of matching, value is the string to match. e.g: `match_name[0:3]`, `match_name[2:6]`, `matchModel`,  `match_model[0-6]`
//
// Deprecated: The `matchType` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
// Please update your configurations.
func (o NetworktemplateSwitchMatchingRuleOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// Deprecated: The `matchValue` attribute has been deprecated in version v0.2.8 of the Juniper-Mist Provider. It has been replaced with the `matchName`, `matchModel` and `matchRole`attribuites and may be removed in future versions.
// Please update your configurations.
func (o NetworktemplateSwitchMatchingRuleOutput) MatchValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.MatchValue }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMatchingRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Out-of-Band Management interface configuration
func (o NetworktemplateSwitchMatchingRuleOutput) OobIpConfig() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) *NetworktemplateSwitchMatchingRuleOobIpConfig {
		return v.OobIpConfig
	}).(NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput)
}

// Propery key is the interface name or interface range
func (o NetworktemplateSwitchMatchingRuleOutput) PortConfig() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) map[string]NetworktemplateSwitchMatchingRulePortConfig {
		return v.PortConfig
	}).(NetworktemplateSwitchMatchingRulePortConfigMapOutput)
}

// Property key is the port mirroring instance name. `portMirroring` can be added under device/site settings. It takes interface and ports as input for ingress, interface as input for egress and can take interface and port as output. A maximum 4 port mirrorings is allowed
func (o NetworktemplateSwitchMatchingRuleOutput) PortMirroring() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRule) map[string]NetworktemplateSwitchMatchingRulePortMirroring {
		return v.PortMirroring
	}).(NetworktemplateSwitchMatchingRulePortMirroringMapOutput)
}

type NetworktemplateSwitchMatchingRuleArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMatchingRule)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) ToNetworktemplateSwitchMatchingRuleArrayOutput() NetworktemplateSwitchMatchingRuleArrayOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) ToNetworktemplateSwitchMatchingRuleArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleArrayOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMatchingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRule {
		return vs[0].([]NetworktemplateSwitchMatchingRule)[vs[1].(int)]
	}).(NetworktemplateSwitchMatchingRuleOutput)
}

type NetworktemplateSwitchMatchingRuleIpConfig struct {
	// VLAN Name for the management interface
	Network *string `pulumi:"network"`
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
}

// NetworktemplateSwitchMatchingRuleIpConfigInput is an input type that accepts NetworktemplateSwitchMatchingRuleIpConfigArgs and NetworktemplateSwitchMatchingRuleIpConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleIpConfigInput` via:
//
//	NetworktemplateSwitchMatchingRuleIpConfigArgs{...}
type NetworktemplateSwitchMatchingRuleIpConfigInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleIpConfigOutput() NetworktemplateSwitchMatchingRuleIpConfigOutput
	ToNetworktemplateSwitchMatchingRuleIpConfigOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleIpConfigOutput
}

type NetworktemplateSwitchMatchingRuleIpConfigArgs struct {
	// VLAN Name for the management interface
	Network pulumi.StringPtrInput `pulumi:"network"`
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NetworktemplateSwitchMatchingRuleIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRuleIpConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleIpConfigArgs) ToNetworktemplateSwitchMatchingRuleIpConfigOutput() NetworktemplateSwitchMatchingRuleIpConfigOutput {
	return i.ToNetworktemplateSwitchMatchingRuleIpConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleIpConfigArgs) ToNetworktemplateSwitchMatchingRuleIpConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleIpConfigOutput)
}

func (i NetworktemplateSwitchMatchingRuleIpConfigArgs) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return i.ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleIpConfigArgs) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleIpConfigOutput).ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMatchingRuleIpConfigPtrInput is an input type that accepts NetworktemplateSwitchMatchingRuleIpConfigArgs, NetworktemplateSwitchMatchingRuleIpConfigPtr and NetworktemplateSwitchMatchingRuleIpConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleIpConfigPtrInput` via:
//
//	        NetworktemplateSwitchMatchingRuleIpConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMatchingRuleIpConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput
	ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleIpConfigPtrOutput
}

type networktemplateSwitchMatchingRuleIpConfigPtrType NetworktemplateSwitchMatchingRuleIpConfigArgs

func NetworktemplateSwitchMatchingRuleIpConfigPtr(v *NetworktemplateSwitchMatchingRuleIpConfigArgs) NetworktemplateSwitchMatchingRuleIpConfigPtrInput {
	return (*networktemplateSwitchMatchingRuleIpConfigPtrType)(v)
}

func (*networktemplateSwitchMatchingRuleIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatchingRuleIpConfig)(nil)).Elem()
}

func (i *networktemplateSwitchMatchingRuleIpConfigPtrType) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return i.ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMatchingRuleIpConfigPtrType) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleIpConfigPtrOutput)
}

type NetworktemplateSwitchMatchingRuleIpConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRuleIpConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) ToNetworktemplateSwitchMatchingRuleIpConfigOutput() NetworktemplateSwitchMatchingRuleIpConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) ToNetworktemplateSwitchMatchingRuleIpConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return o.ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMatchingRuleIpConfig) *NetworktemplateSwitchMatchingRuleIpConfig {
		return &v
	}).(NetworktemplateSwitchMatchingRuleIpConfigPtrOutput)
}

// VLAN Name for the management interface
func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRuleIpConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o NetworktemplateSwitchMatchingRuleIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRuleIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NetworktemplateSwitchMatchingRuleIpConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatchingRuleIpConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) ToNetworktemplateSwitchMatchingRuleIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleIpConfigPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) Elem() NetworktemplateSwitchMatchingRuleIpConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleIpConfig) NetworktemplateSwitchMatchingRuleIpConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMatchingRuleIpConfig
		return ret
	}).(NetworktemplateSwitchMatchingRuleIpConfigOutput)
}

// VLAN Name for the management interface
func (o NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// enum: `dhcp`, `static`
func (o NetworktemplateSwitchMatchingRuleIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type NetworktemplateSwitchMatchingRuleOobIpConfig struct {
	// enum: `dhcp`, `static`
	Type *string `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf *bool `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut *bool `pulumi:"useMgmtVrfForHostOut"`
}

// NetworktemplateSwitchMatchingRuleOobIpConfigInput is an input type that accepts NetworktemplateSwitchMatchingRuleOobIpConfigArgs and NetworktemplateSwitchMatchingRuleOobIpConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleOobIpConfigInput` via:
//
//	NetworktemplateSwitchMatchingRuleOobIpConfigArgs{...}
type NetworktemplateSwitchMatchingRuleOobIpConfigInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleOobIpConfigOutput() NetworktemplateSwitchMatchingRuleOobIpConfigOutput
	ToNetworktemplateSwitchMatchingRuleOobIpConfigOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigOutput
}

type NetworktemplateSwitchMatchingRuleOobIpConfigArgs struct {
	// enum: `dhcp`, `static`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// if supported on the platform. If enabled, DNS will be using this routing-instance, too
	UseMgmtVrf pulumi.BoolPtrInput `pulumi:"useMgmtVrf"`
	// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
	UseMgmtVrfForHostOut pulumi.BoolPtrInput `pulumi:"useMgmtVrfForHostOut"`
}

func (NetworktemplateSwitchMatchingRuleOobIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRuleOobIpConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRuleOobIpConfigArgs) ToNetworktemplateSwitchMatchingRuleOobIpConfigOutput() NetworktemplateSwitchMatchingRuleOobIpConfigOutput {
	return i.ToNetworktemplateSwitchMatchingRuleOobIpConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleOobIpConfigArgs) ToNetworktemplateSwitchMatchingRuleOobIpConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleOobIpConfigOutput)
}

func (i NetworktemplateSwitchMatchingRuleOobIpConfigArgs) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return i.ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRuleOobIpConfigArgs) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleOobIpConfigOutput).ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput is an input type that accepts NetworktemplateSwitchMatchingRuleOobIpConfigArgs, NetworktemplateSwitchMatchingRuleOobIpConfigPtr and NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput` via:
//
//	        NetworktemplateSwitchMatchingRuleOobIpConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput
	ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput
}

type networktemplateSwitchMatchingRuleOobIpConfigPtrType NetworktemplateSwitchMatchingRuleOobIpConfigArgs

func NetworktemplateSwitchMatchingRuleOobIpConfigPtr(v *NetworktemplateSwitchMatchingRuleOobIpConfigArgs) NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput {
	return (*networktemplateSwitchMatchingRuleOobIpConfigPtrType)(v)
}

func (*networktemplateSwitchMatchingRuleOobIpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatchingRuleOobIpConfig)(nil)).Elem()
}

func (i *networktemplateSwitchMatchingRuleOobIpConfigPtrType) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return i.ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMatchingRuleOobIpConfigPtrType) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput)
}

type NetworktemplateSwitchMatchingRuleOobIpConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleOobIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRuleOobIpConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigOutput() NetworktemplateSwitchMatchingRuleOobIpConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return o.ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMatchingRuleOobIpConfig) *NetworktemplateSwitchMatchingRuleOobIpConfig {
		return &v
	}).(NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput)
}

// enum: `dhcp`, `static`
func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRuleOobIpConfig) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRuleOobIpConfig) *bool { return v.UseMgmtVrf }).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o NetworktemplateSwitchMatchingRuleOobIpConfigOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRuleOobIpConfig) *bool { return v.UseMgmtVrfForHostOut }).(pulumi.BoolPtrOutput)
}

type NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMatchingRuleOobIpConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput() NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) ToNetworktemplateSwitchMatchingRuleOobIpConfigPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) Elem() NetworktemplateSwitchMatchingRuleOobIpConfigOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleOobIpConfig) NetworktemplateSwitchMatchingRuleOobIpConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMatchingRuleOobIpConfig
		return ret
	}).(NetworktemplateSwitchMatchingRuleOobIpConfigOutput)
}

// enum: `dhcp`, `static`
func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleOobIpConfig) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// if supported on the platform. If enabled, DNS will be using this routing-instance, too
func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) UseMgmtVrf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrf
	}).(pulumi.BoolPtrOutput)
}

// for host-out traffic (NTP/TACPLUS/RADIUS/SYSLOG/SNMP), if alternative source network/ip is desired
func (o NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput) UseMgmtVrfForHostOut() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMatchingRuleOobIpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.UseMgmtVrfForHostOut
	}).(pulumi.BoolPtrOutput)
}

type NetworktemplateSwitchMatchingRulePortConfig struct {
	// To disable LACP support for the AE interface
	AeDisableLacp *bool `pulumi:"aeDisableLacp"`
	// Users could force to use the designated AE name
	AeIdx *int `pulumi:"aeIdx"`
	// to use fast timeout
	AeLacpSlow *bool `pulumi:"aeLacpSlow"`
	Aggregated *bool `pulumi:"aggregated"`
	// if want to generate port up/down alarm
	Critical    *bool   `pulumi:"critical"`
	Description *string `pulumi:"description"`
	// if `speed` and `duplex` are specified, whether to disable autonegotiation
	DisableAutoneg *bool `pulumi:"disableAutoneg"`
	// enum: `auto`, `full`, `half`
	Duplex *string `pulumi:"duplex"`
	// Enable dynamic usage for this port. Set to `dynamic` to enable.
	DynamicUsage *string `pulumi:"dynamicUsage"`
	Esilag       *bool   `pulumi:"esilag"`
	// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
	Mtu *int `pulumi:"mtu"`
	// prevent helpdesk to override the port config
	NoLocalOverwrite *bool `pulumi:"noLocalOverwrite"`
	PoeDisabled      *bool `pulumi:"poeDisabled"`
	// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
	Speed *string `pulumi:"speed"`
	// port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
	Usage string `pulumi:"usage"`
}

// NetworktemplateSwitchMatchingRulePortConfigInput is an input type that accepts NetworktemplateSwitchMatchingRulePortConfigArgs and NetworktemplateSwitchMatchingRulePortConfigOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortConfigInput` via:
//
//	NetworktemplateSwitchMatchingRulePortConfigArgs{...}
type NetworktemplateSwitchMatchingRulePortConfigInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput
	ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput
}

type NetworktemplateSwitchMatchingRulePortConfigArgs struct {
	// To disable LACP support for the AE interface
	AeDisableLacp pulumi.BoolPtrInput `pulumi:"aeDisableLacp"`
	// Users could force to use the designated AE name
	AeIdx pulumi.IntPtrInput `pulumi:"aeIdx"`
	// to use fast timeout
	AeLacpSlow pulumi.BoolPtrInput `pulumi:"aeLacpSlow"`
	Aggregated pulumi.BoolPtrInput `pulumi:"aggregated"`
	// if want to generate port up/down alarm
	Critical    pulumi.BoolPtrInput   `pulumi:"critical"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	// if `speed` and `duplex` are specified, whether to disable autonegotiation
	DisableAutoneg pulumi.BoolPtrInput `pulumi:"disableAutoneg"`
	// enum: `auto`, `full`, `half`
	Duplex pulumi.StringPtrInput `pulumi:"duplex"`
	// Enable dynamic usage for this port. Set to `dynamic` to enable.
	DynamicUsage pulumi.StringPtrInput `pulumi:"dynamicUsage"`
	Esilag       pulumi.BoolPtrInput   `pulumi:"esilag"`
	// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
	Mtu pulumi.IntPtrInput `pulumi:"mtu"`
	// prevent helpdesk to override the port config
	NoLocalOverwrite pulumi.BoolPtrInput `pulumi:"noLocalOverwrite"`
	PoeDisabled      pulumi.BoolPtrInput `pulumi:"poeDisabled"`
	// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
	Speed pulumi.StringPtrInput `pulumi:"speed"`
	// port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
	Usage pulumi.StringInput `pulumi:"usage"`
}

func (NetworktemplateSwitchMatchingRulePortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortConfigArgs) ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortConfigArgs) ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortConfigOutput)
}

// NetworktemplateSwitchMatchingRulePortConfigMapInput is an input type that accepts NetworktemplateSwitchMatchingRulePortConfigMap and NetworktemplateSwitchMatchingRulePortConfigMapOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortConfigMapInput` via:
//
//	NetworktemplateSwitchMatchingRulePortConfigMap{ "key": NetworktemplateSwitchMatchingRulePortConfigArgs{...} }
type NetworktemplateSwitchMatchingRulePortConfigMapInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput
	ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput
}

type NetworktemplateSwitchMatchingRulePortConfigMap map[string]NetworktemplateSwitchMatchingRulePortConfigInput

func (NetworktemplateSwitchMatchingRulePortConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortConfigMap) ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortConfigMap) ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortConfigMapOutput)
}

type NetworktemplateSwitchMatchingRulePortConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) ToNetworktemplateSwitchMatchingRulePortConfigOutput() NetworktemplateSwitchMatchingRulePortConfigOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) ToNetworktemplateSwitchMatchingRulePortConfigOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return o
}

// To disable LACP support for the AE interface
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeDisableLacp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.AeDisableLacp }).(pulumi.BoolPtrOutput)
}

// Users could force to use the designated AE name
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *int { return v.AeIdx }).(pulumi.IntPtrOutput)
}

// to use fast timeout
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) AeLacpSlow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.AeLacpSlow }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Aggregated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Aggregated }).(pulumi.BoolPtrOutput)
}

// if want to generate port up/down alarm
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Critical() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Critical }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// if `speed` and `duplex` are specified, whether to disable autonegotiation
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) DisableAutoneg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.DisableAutoneg }).(pulumi.BoolPtrOutput)
}

// enum: `auto`, `full`, `half`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Duplex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Duplex }).(pulumi.StringPtrOutput)
}

// Enable dynamic usage for this port. Set to `dynamic` to enable.
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) DynamicUsage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.DynamicUsage }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Esilag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.Esilag }).(pulumi.BoolPtrOutput)
}

// media maximum transmission unit (MTU) is the largest data unit that can be forwarded without fragmentation
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *int { return v.Mtu }).(pulumi.IntPtrOutput)
}

// prevent helpdesk to override the port config
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) NoLocalOverwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.NoLocalOverwrite }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMatchingRulePortConfigOutput) PoeDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *bool { return v.PoeDisabled }).(pulumi.BoolPtrOutput)
}

// enum: `100m`, `10m`, `1g`, `2.5g`, `5g`, `10g`, `25g`, `40g`, `100g`,`auto`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Speed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) *string { return v.Speed }).(pulumi.StringPtrOutput)
}

// port usage name. If EVPN is used, use `evpnUplink`or `evpnDownlink`
func (o NetworktemplateSwitchMatchingRulePortConfigOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortConfig) string { return v.Usage }).(pulumi.StringOutput)
}

type NetworktemplateSwitchMatchingRulePortConfigMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortConfig)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) ToNetworktemplateSwitchMatchingRulePortConfigMapOutput() NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) ToNetworktemplateSwitchMatchingRulePortConfigMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortConfigMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortConfigMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateSwitchMatchingRulePortConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRulePortConfig {
		return vs[0].(map[string]NetworktemplateSwitchMatchingRulePortConfig)[vs[1].(string)]
	}).(NetworktemplateSwitchMatchingRulePortConfigOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroring struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses []string `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses []string `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses []string `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork *string `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId *string `pulumi:"outputPortId"`
}

// NetworktemplateSwitchMatchingRulePortMirroringInput is an input type that accepts NetworktemplateSwitchMatchingRulePortMirroringArgs and NetworktemplateSwitchMatchingRulePortMirroringOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortMirroringInput` via:
//
//	NetworktemplateSwitchMatchingRulePortMirroringArgs{...}
type NetworktemplateSwitchMatchingRulePortMirroringInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput
	ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput
}

type NetworktemplateSwitchMatchingRulePortMirroringArgs struct {
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputNetworksIngresses pulumi.StringArrayInput `pulumi:"inputNetworksIngresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsEgresses pulumi.StringArrayInput `pulumi:"inputPortIdsEgresses"`
	// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
	InputPortIdsIngresses pulumi.StringArrayInput `pulumi:"inputPortIdsIngresses"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputNetwork pulumi.StringPtrInput `pulumi:"outputNetwork"`
	// exaclty one of the `outputPortId` or `outputNetwork` should be provided
	OutputPortId pulumi.StringPtrInput `pulumi:"outputPortId"`
}

func (NetworktemplateSwitchMatchingRulePortMirroringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortMirroringArgs) ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortMirroringArgs) ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortMirroringOutput)
}

// NetworktemplateSwitchMatchingRulePortMirroringMapInput is an input type that accepts NetworktemplateSwitchMatchingRulePortMirroringMap and NetworktemplateSwitchMatchingRulePortMirroringMapOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMatchingRulePortMirroringMapInput` via:
//
//	NetworktemplateSwitchMatchingRulePortMirroringMap{ "key": NetworktemplateSwitchMatchingRulePortMirroringArgs{...} }
type NetworktemplateSwitchMatchingRulePortMirroringMapInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput
	ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput
}

type NetworktemplateSwitchMatchingRulePortMirroringMap map[string]NetworktemplateSwitchMatchingRulePortMirroringInput

func (NetworktemplateSwitchMatchingRulePortMirroringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (i NetworktemplateSwitchMatchingRulePortMirroringMap) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return i.ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMatchingRulePortMirroringMap) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMatchingRulePortMirroringMapOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroringOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortMirroringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) ToNetworktemplateSwitchMatchingRulePortMirroringOutput() NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) ToNetworktemplateSwitchMatchingRulePortMirroringOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return o
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputNetworksIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputNetworksIngresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputPortIdsEgresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputPortIdsEgresses }).(pulumi.StringArrayOutput)
}

// at least one of the `inputPortIdsIngress`, `inputPortIdsEgress` or ` inputNetworksIngress  ` should be specified
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) InputPortIdsIngresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) []string { return v.InputPortIdsIngresses }).(pulumi.StringArrayOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) OutputNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) *string { return v.OutputNetwork }).(pulumi.StringPtrOutput)
}

// exaclty one of the `outputPortId` or `outputNetwork` should be provided
func (o NetworktemplateSwitchMatchingRulePortMirroringOutput) OutputPortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMatchingRulePortMirroring) *string { return v.OutputPortId }).(pulumi.StringPtrOutput)
}

type NetworktemplateSwitchMatchingRulePortMirroringMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMatchingRulePortMirroring)(nil)).Elem()
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutput() NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) ToNetworktemplateSwitchMatchingRulePortMirroringMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMatchingRulePortMirroringMapOutput {
	return o
}

func (o NetworktemplateSwitchMatchingRulePortMirroringMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateSwitchMatchingRulePortMirroringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateSwitchMatchingRulePortMirroring {
		return vs[0].(map[string]NetworktemplateSwitchMatchingRulePortMirroring)[vs[1].(string)]
	}).(NetworktemplateSwitchMatchingRulePortMirroringOutput)
}

type NetworktemplateSwitchMgmt struct {
	// ap_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
	ApAffinityThreshold *int `pulumi:"apAffinityThreshold"`
	// Set Banners for switches. Allows markup formatting
	CliBanner *string `pulumi:"cliBanner"`
	// Sets timeout for switches
	CliIdleTimeout *int `pulumi:"cliIdleTimeout"`
	// the rollback timer for commit confirmed
	ConfigRevertTimer *int `pulumi:"configRevertTimer"`
	// Enable to provide the FQDN with DHCP option 81
	DhcpOptionFqdn      *bool `pulumi:"dhcpOptionFqdn"`
	DisableOobDownAlarm *bool `pulumi:"disableOobDownAlarm"`
	// Property key is the user name. For Local user authentication
	LocalAccounts   map[string]NetworktemplateSwitchMgmtLocalAccounts `pulumi:"localAccounts"`
	MxedgeProxyHost *string                                           `pulumi:"mxedgeProxyHost"`
	MxedgeProxyPort *int                                              `pulumi:"mxedgeProxyPort"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe    *NetworktemplateSwitchMgmtProtectRe `pulumi:"protectRe"`
	RootPassword *string                             `pulumi:"rootPassword"`
	Tacacs       *NetworktemplateSwitchMgmtTacacs    `pulumi:"tacacs"`
	// to use mxedge as proxy
	UseMxedgeProxy *bool `pulumi:"useMxedgeProxy"`
}

// NetworktemplateSwitchMgmtInput is an input type that accepts NetworktemplateSwitchMgmtArgs and NetworktemplateSwitchMgmtOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtInput` via:
//
//	NetworktemplateSwitchMgmtArgs{...}
type NetworktemplateSwitchMgmtInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput
	ToNetworktemplateSwitchMgmtOutputWithContext(context.Context) NetworktemplateSwitchMgmtOutput
}

type NetworktemplateSwitchMgmtArgs struct {
	// ap_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
	ApAffinityThreshold pulumi.IntPtrInput `pulumi:"apAffinityThreshold"`
	// Set Banners for switches. Allows markup formatting
	CliBanner pulumi.StringPtrInput `pulumi:"cliBanner"`
	// Sets timeout for switches
	CliIdleTimeout pulumi.IntPtrInput `pulumi:"cliIdleTimeout"`
	// the rollback timer for commit confirmed
	ConfigRevertTimer pulumi.IntPtrInput `pulumi:"configRevertTimer"`
	// Enable to provide the FQDN with DHCP option 81
	DhcpOptionFqdn      pulumi.BoolPtrInput `pulumi:"dhcpOptionFqdn"`
	DisableOobDownAlarm pulumi.BoolPtrInput `pulumi:"disableOobDownAlarm"`
	// Property key is the user name. For Local user authentication
	LocalAccounts   NetworktemplateSwitchMgmtLocalAccountsMapInput `pulumi:"localAccounts"`
	MxedgeProxyHost pulumi.StringPtrInput                          `pulumi:"mxedgeProxyHost"`
	MxedgeProxyPort pulumi.IntPtrInput                             `pulumi:"mxedgeProxyPort"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe    NetworktemplateSwitchMgmtProtectRePtrInput `pulumi:"protectRe"`
	RootPassword pulumi.StringPtrInput                      `pulumi:"rootPassword"`
	Tacacs       NetworktemplateSwitchMgmtTacacsPtrInput    `pulumi:"tacacs"`
	// to use mxedge as proxy
	UseMxedgeProxy pulumi.BoolPtrInput `pulumi:"useMxedgeProxy"`
}

func (NetworktemplateSwitchMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput {
	return i.ToNetworktemplateSwitchMgmtOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtOutput)
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return i.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtArgs) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtOutput).ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtPtrInput is an input type that accepts NetworktemplateSwitchMgmtArgs, NetworktemplateSwitchMgmtPtr and NetworktemplateSwitchMgmtPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtPtrInput` via:
//
//	        NetworktemplateSwitchMgmtArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput
	ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtPtrOutput
}

type networktemplateSwitchMgmtPtrType NetworktemplateSwitchMgmtArgs

func NetworktemplateSwitchMgmtPtr(v *NetworktemplateSwitchMgmtArgs) NetworktemplateSwitchMgmtPtrInput {
	return (*networktemplateSwitchMgmtPtrType)(v)
}

func (*networktemplateSwitchMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtPtrType) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return i.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtPtrType) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtPtrOutput)
}

type NetworktemplateSwitchMgmtOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtOutput() NetworktemplateSwitchMgmtOutput {
	return o
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtOutput {
	return o
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return o.ToNetworktemplateSwitchMgmtPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtOutput) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmt {
		return &v
	}).(NetworktemplateSwitchMgmtPtrOutput)
}

// ap_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
func (o NetworktemplateSwitchMgmtOutput) ApAffinityThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *int { return v.ApAffinityThreshold }).(pulumi.IntPtrOutput)
}

// Set Banners for switches. Allows markup formatting
func (o NetworktemplateSwitchMgmtOutput) CliBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *string { return v.CliBanner }).(pulumi.StringPtrOutput)
}

// Sets timeout for switches
func (o NetworktemplateSwitchMgmtOutput) CliIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *int { return v.CliIdleTimeout }).(pulumi.IntPtrOutput)
}

// the rollback timer for commit confirmed
func (o NetworktemplateSwitchMgmtOutput) ConfigRevertTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *int { return v.ConfigRevertTimer }).(pulumi.IntPtrOutput)
}

// Enable to provide the FQDN with DHCP option 81
func (o NetworktemplateSwitchMgmtOutput) DhcpOptionFqdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *bool { return v.DhcpOptionFqdn }).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) DisableOobDownAlarm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *bool { return v.DisableOobDownAlarm }).(pulumi.BoolPtrOutput)
}

// Property key is the user name. For Local user authentication
func (o NetworktemplateSwitchMgmtOutput) LocalAccounts() NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) map[string]NetworktemplateSwitchMgmtLocalAccounts {
		return v.LocalAccounts
	}).(NetworktemplateSwitchMgmtLocalAccountsMapOutput)
}

func (o NetworktemplateSwitchMgmtOutput) MxedgeProxyHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *string { return v.MxedgeProxyHost }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) MxedgeProxyPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *int { return v.MxedgeProxyPort }).(pulumi.IntPtrOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtOutput) ProtectRe() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtProtectRe { return v.ProtectRe }).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtOutput) Tacacs() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtTacacs { return v.Tacacs }).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

// to use mxedge as proxy
func (o NetworktemplateSwitchMgmtOutput) UseMxedgeProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmt) *bool { return v.UseMxedgeProxy }).(pulumi.BoolPtrOutput)
}

type NetworktemplateSwitchMgmtPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmt)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtPtrOutput) ToNetworktemplateSwitchMgmtPtrOutput() NetworktemplateSwitchMgmtPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtPtrOutput) ToNetworktemplateSwitchMgmtPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtPtrOutput) Elem() NetworktemplateSwitchMgmtOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) NetworktemplateSwitchMgmt {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmt
		return ret
	}).(NetworktemplateSwitchMgmtOutput)
}

// ap_affinity_threshold apAffinityThreshold can be added as a field under site/setting. By default this value is set to 12. If the field is set in both site/setting and org/setting, the value from site/setting will be used.
func (o NetworktemplateSwitchMgmtPtrOutput) ApAffinityThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.ApAffinityThreshold
	}).(pulumi.IntPtrOutput)
}

// Set Banners for switches. Allows markup formatting
func (o NetworktemplateSwitchMgmtPtrOutput) CliBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *string {
		if v == nil {
			return nil
		}
		return v.CliBanner
	}).(pulumi.StringPtrOutput)
}

// Sets timeout for switches
func (o NetworktemplateSwitchMgmtPtrOutput) CliIdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.CliIdleTimeout
	}).(pulumi.IntPtrOutput)
}

// the rollback timer for commit confirmed
func (o NetworktemplateSwitchMgmtPtrOutput) ConfigRevertTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.ConfigRevertTimer
	}).(pulumi.IntPtrOutput)
}

// Enable to provide the FQDN with DHCP option 81
func (o NetworktemplateSwitchMgmtPtrOutput) DhcpOptionFqdn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.DhcpOptionFqdn
	}).(pulumi.BoolPtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) DisableOobDownAlarm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOobDownAlarm
	}).(pulumi.BoolPtrOutput)
}

// Property key is the user name. For Local user authentication
func (o NetworktemplateSwitchMgmtPtrOutput) LocalAccounts() NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) map[string]NetworktemplateSwitchMgmtLocalAccounts {
		if v == nil {
			return nil
		}
		return v.LocalAccounts
	}).(NetworktemplateSwitchMgmtLocalAccountsMapOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) MxedgeProxyHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *string {
		if v == nil {
			return nil
		}
		return v.MxedgeProxyHost
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) MxedgeProxyPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *int {
		if v == nil {
			return nil
		}
		return v.MxedgeProxyPort
	}).(pulumi.IntPtrOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtPtrOutput) ProtectRe() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtProtectRe {
		if v == nil {
			return nil
		}
		return v.ProtectRe
	}).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtPtrOutput) Tacacs() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *NetworktemplateSwitchMgmtTacacs {
		if v == nil {
			return nil
		}
		return v.Tacacs
	}).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

// to use mxedge as proxy
func (o NetworktemplateSwitchMgmtPtrOutput) UseMxedgeProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.UseMxedgeProxy
	}).(pulumi.BoolPtrOutput)
}

type NetworktemplateSwitchMgmtLocalAccounts struct {
	Password *string `pulumi:"password"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	Role *string `pulumi:"role"`
}

// NetworktemplateSwitchMgmtLocalAccountsInput is an input type that accepts NetworktemplateSwitchMgmtLocalAccountsArgs and NetworktemplateSwitchMgmtLocalAccountsOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtLocalAccountsInput` via:
//
//	NetworktemplateSwitchMgmtLocalAccountsArgs{...}
type NetworktemplateSwitchMgmtLocalAccountsInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtLocalAccountsOutput() NetworktemplateSwitchMgmtLocalAccountsOutput
	ToNetworktemplateSwitchMgmtLocalAccountsOutputWithContext(context.Context) NetworktemplateSwitchMgmtLocalAccountsOutput
}

type NetworktemplateSwitchMgmtLocalAccountsArgs struct {
	Password pulumi.StringPtrInput `pulumi:"password"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (NetworktemplateSwitchMgmtLocalAccountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtLocalAccounts)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtLocalAccountsArgs) ToNetworktemplateSwitchMgmtLocalAccountsOutput() NetworktemplateSwitchMgmtLocalAccountsOutput {
	return i.ToNetworktemplateSwitchMgmtLocalAccountsOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtLocalAccountsArgs) ToNetworktemplateSwitchMgmtLocalAccountsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtLocalAccountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtLocalAccountsOutput)
}

// NetworktemplateSwitchMgmtLocalAccountsMapInput is an input type that accepts NetworktemplateSwitchMgmtLocalAccountsMap and NetworktemplateSwitchMgmtLocalAccountsMapOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtLocalAccountsMapInput` via:
//
//	NetworktemplateSwitchMgmtLocalAccountsMap{ "key": NetworktemplateSwitchMgmtLocalAccountsArgs{...} }
type NetworktemplateSwitchMgmtLocalAccountsMapInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtLocalAccountsMapOutput() NetworktemplateSwitchMgmtLocalAccountsMapOutput
	ToNetworktemplateSwitchMgmtLocalAccountsMapOutputWithContext(context.Context) NetworktemplateSwitchMgmtLocalAccountsMapOutput
}

type NetworktemplateSwitchMgmtLocalAccountsMap map[string]NetworktemplateSwitchMgmtLocalAccountsInput

func (NetworktemplateSwitchMgmtLocalAccountsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMgmtLocalAccounts)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtLocalAccountsMap) ToNetworktemplateSwitchMgmtLocalAccountsMapOutput() NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return i.ToNetworktemplateSwitchMgmtLocalAccountsMapOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtLocalAccountsMap) ToNetworktemplateSwitchMgmtLocalAccountsMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtLocalAccountsMapOutput)
}

type NetworktemplateSwitchMgmtLocalAccountsOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtLocalAccountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtLocalAccounts)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtLocalAccountsOutput) ToNetworktemplateSwitchMgmtLocalAccountsOutput() NetworktemplateSwitchMgmtLocalAccountsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtLocalAccountsOutput) ToNetworktemplateSwitchMgmtLocalAccountsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtLocalAccountsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtLocalAccountsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtLocalAccounts) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// enum: `admin`, `helpdesk`, `none`, `read`
func (o NetworktemplateSwitchMgmtLocalAccountsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtLocalAccounts) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type NetworktemplateSwitchMgmtLocalAccountsMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtLocalAccountsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateSwitchMgmtLocalAccounts)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtLocalAccountsMapOutput) ToNetworktemplateSwitchMgmtLocalAccountsMapOutput() NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return o
}

func (o NetworktemplateSwitchMgmtLocalAccountsMapOutput) ToNetworktemplateSwitchMgmtLocalAccountsMapOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtLocalAccountsMapOutput {
	return o
}

func (o NetworktemplateSwitchMgmtLocalAccountsMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateSwitchMgmtLocalAccountsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtLocalAccounts {
		return vs[0].(map[string]NetworktemplateSwitchMgmtLocalAccounts)[vs[1].(string)]
	}).(NetworktemplateSwitchMgmtLocalAccountsOutput)
}

type NetworktemplateSwitchMgmtProtectRe struct {
	// optionally, services we'll allow. enum: `icmp`, `ssh`
	AllowedServices []string                                   `pulumi:"allowedServices"`
	Customs         []NetworktemplateSwitchMgmtProtectReCustom `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled *bool `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts []string `pulumi:"trustedHosts"`
}

// NetworktemplateSwitchMgmtProtectReInput is an input type that accepts NetworktemplateSwitchMgmtProtectReArgs and NetworktemplateSwitchMgmtProtectReOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReInput` via:
//
//	NetworktemplateSwitchMgmtProtectReArgs{...}
type NetworktemplateSwitchMgmtProtectReInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput
	ToNetworktemplateSwitchMgmtProtectReOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReOutput
}

type NetworktemplateSwitchMgmtProtectReArgs struct {
	// optionally, services we'll allow. enum: `icmp`, `ssh`
	AllowedServices pulumi.StringArrayInput                            `pulumi:"allowedServices"`
	Customs         NetworktemplateSwitchMgmtProtectReCustomArrayInput `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts pulumi.StringArrayInput `pulumi:"trustedHosts"`
}

func (NetworktemplateSwitchMgmtProtectReArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectReOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReOutput)
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return i.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReArgs) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReOutput).ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtProtectRePtrInput is an input type that accepts NetworktemplateSwitchMgmtProtectReArgs, NetworktemplateSwitchMgmtProtectRePtr and NetworktemplateSwitchMgmtProtectRePtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectRePtrInput` via:
//
//	        NetworktemplateSwitchMgmtProtectReArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtProtectRePtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput
	ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput
}

type networktemplateSwitchMgmtProtectRePtrType NetworktemplateSwitchMgmtProtectReArgs

func NetworktemplateSwitchMgmtProtectRePtr(v *NetworktemplateSwitchMgmtProtectReArgs) NetworktemplateSwitchMgmtProtectRePtrInput {
	return (*networktemplateSwitchMgmtProtectRePtrType)(v)
}

func (*networktemplateSwitchMgmtProtectRePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtProtectRePtrType) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return i.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtProtectRePtrType) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

type NetworktemplateSwitchMgmtProtectReOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectReOutput() NetworktemplateSwitchMgmtProtectReOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectReOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtProtectReOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmtProtectRe) *NetworktemplateSwitchMgmtProtectRe {
		return &v
	}).(NetworktemplateSwitchMgmtProtectRePtrOutput)
}

// optionally, services we'll allow. enum: `icmp`, `ssh`
func (o NetworktemplateSwitchMgmtProtectReOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []string { return v.AllowedServices }).(pulumi.StringArrayOutput)
}

func (o NetworktemplateSwitchMgmtProtectReOutput) Customs() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []NetworktemplateSwitchMgmtProtectReCustom {
		return v.Customs
	}).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtProtectReOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o NetworktemplateSwitchMgmtProtectReOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectRe) []string { return v.TrustedHosts }).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectRePtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectRePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtProtectRe)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutput() NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) ToNetworktemplateSwitchMgmtProtectRePtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectRePtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Elem() NetworktemplateSwitchMgmtProtectReOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) NetworktemplateSwitchMgmtProtectRe {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmtProtectRe
		return ret
	}).(NetworktemplateSwitchMgmtProtectReOutput)
}

// optionally, services we'll allow. enum: `icmp`, `ssh`
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.AllowedServices
	}).(pulumi.StringArrayOutput)
}

func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Customs() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []NetworktemplateSwitchMgmtProtectReCustom {
		if v == nil {
			return nil
		}
		return v.Customs
	}).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o NetworktemplateSwitchMgmtProtectRePtrOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.TrustedHosts
	}).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustom struct {
	// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	PortRange *string `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	Protocol *string  `pulumi:"protocol"`
	Subnets  []string `pulumi:"subnets"`
}

// NetworktemplateSwitchMgmtProtectReCustomInput is an input type that accepts NetworktemplateSwitchMgmtProtectReCustomArgs and NetworktemplateSwitchMgmtProtectReCustomOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReCustomInput` via:
//
//	NetworktemplateSwitchMgmtProtectReCustomArgs{...}
type NetworktemplateSwitchMgmtProtectReCustomInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput
	ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput
}

type NetworktemplateSwitchMgmtProtectReCustomArgs struct {
	// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	Protocol pulumi.StringPtrInput   `pulumi:"protocol"`
	Subnets  pulumi.StringArrayInput `pulumi:"subnets"`
}

func (NetworktemplateSwitchMgmtProtectReCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReCustomArgs) ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReCustomArgs) ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReCustomOutput)
}

// NetworktemplateSwitchMgmtProtectReCustomArrayInput is an input type that accepts NetworktemplateSwitchMgmtProtectReCustomArray and NetworktemplateSwitchMgmtProtectReCustomArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtProtectReCustomArrayInput` via:
//
//	NetworktemplateSwitchMgmtProtectReCustomArray{ NetworktemplateSwitchMgmtProtectReCustomArgs{...} }
type NetworktemplateSwitchMgmtProtectReCustomArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput
	ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput
}

type NetworktemplateSwitchMgmtProtectReCustomArray []NetworktemplateSwitchMgmtProtectReCustomInput

func (NetworktemplateSwitchMgmtProtectReCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtProtectReCustomArray) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return i.ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtProtectReCustomArray) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtProtectReCustomArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustomOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) ToNetworktemplateSwitchMgmtProtectReCustomOutput() NetworktemplateSwitchMgmtProtectReCustomOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) ToNetworktemplateSwitchMgmtProtectReCustomOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return o
}

// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
func (o NetworktemplateSwitchMgmtProtectReCustomOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
func (o NetworktemplateSwitchMgmtProtectReCustomOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtProtectReCustomOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtProtectReCustom) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type NetworktemplateSwitchMgmtProtectReCustomArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtProtectReCustom)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutput() NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) ToNetworktemplateSwitchMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtProtectReCustomArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtProtectReCustomArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtProtectReCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtProtectReCustom {
		return vs[0].([]NetworktemplateSwitchMgmtProtectReCustom)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtProtectReCustomOutput)
}

type NetworktemplateSwitchMgmtTacacs struct {
	AcctServers []NetworktemplateSwitchMgmtTacacsAcctServer `pulumi:"acctServers"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	DefaultRole *string `pulumi:"defaultRole"`
	Enabled     *bool   `pulumi:"enabled"`
	// which network the TACACS server resides
	Network        *string                                        `pulumi:"network"`
	TacplusServers []NetworktemplateSwitchMgmtTacacsTacplusServer `pulumi:"tacplusServers"`
}

// NetworktemplateSwitchMgmtTacacsInput is an input type that accepts NetworktemplateSwitchMgmtTacacsArgs and NetworktemplateSwitchMgmtTacacsOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsInput` via:
//
//	NetworktemplateSwitchMgmtTacacsArgs{...}
type NetworktemplateSwitchMgmtTacacsInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput
	ToNetworktemplateSwitchMgmtTacacsOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsOutput
}

type NetworktemplateSwitchMgmtTacacsArgs struct {
	AcctServers NetworktemplateSwitchMgmtTacacsAcctServerArrayInput `pulumi:"acctServers"`
	// enum: `admin`, `helpdesk`, `none`, `read`
	DefaultRole pulumi.StringPtrInput `pulumi:"defaultRole"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	// which network the TACACS server resides
	Network        pulumi.StringPtrInput                                  `pulumi:"network"`
	TacplusServers NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput `pulumi:"tacplusServers"`
}

func (NetworktemplateSwitchMgmtTacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsOutput)
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsArgs) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsOutput).ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx)
}

// NetworktemplateSwitchMgmtTacacsPtrInput is an input type that accepts NetworktemplateSwitchMgmtTacacsArgs, NetworktemplateSwitchMgmtTacacsPtr and NetworktemplateSwitchMgmtTacacsPtrOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsPtrInput` via:
//
//	        NetworktemplateSwitchMgmtTacacsArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateSwitchMgmtTacacsPtrInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput
	ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput
}

type networktemplateSwitchMgmtTacacsPtrType NetworktemplateSwitchMgmtTacacsArgs

func NetworktemplateSwitchMgmtTacacsPtr(v *NetworktemplateSwitchMgmtTacacsArgs) NetworktemplateSwitchMgmtTacacsPtrInput {
	return (*networktemplateSwitchMgmtTacacsPtrType)(v)
}

func (*networktemplateSwitchMgmtTacacsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (i *networktemplateSwitchMgmtTacacsPtrType) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (i *networktemplateSwitchMgmtTacacsPtrType) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsOutput() NetworktemplateSwitchMgmtTacacsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(context.Background())
}

func (o NetworktemplateSwitchMgmtTacacsOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateSwitchMgmtTacacs) *NetworktemplateSwitchMgmtTacacs {
		return &v
	}).(NetworktemplateSwitchMgmtTacacsPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) AcctServers() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsAcctServer {
		return v.AcctServers
	}).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

// enum: `admin`, `helpdesk`, `none`, `read`
func (o NetworktemplateSwitchMgmtTacacsOutput) DefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *string { return v.DefaultRole }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// which network the TACACS server resides
func (o NetworktemplateSwitchMgmtTacacsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsOutput) TacplusServers() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsTacplusServer {
		return v.TacplusServers
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateSwitchMgmtTacacs)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutput() NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) ToNetworktemplateSwitchMgmtTacacsPtrOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsPtrOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Elem() NetworktemplateSwitchMgmtTacacsOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) NetworktemplateSwitchMgmtTacacs {
		if v != nil {
			return *v
		}
		var ret NetworktemplateSwitchMgmtTacacs
		return ret
	}).(NetworktemplateSwitchMgmtTacacsOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) AcctServers() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsAcctServer {
		if v == nil {
			return nil
		}
		return v.AcctServers
	}).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

// enum: `admin`, `helpdesk`, `none`, `read`
func (o NetworktemplateSwitchMgmtTacacsPtrOutput) DefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *string {
		if v == nil {
			return nil
		}
		return v.DefaultRole
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// which network the TACACS server resides
func (o NetworktemplateSwitchMgmtTacacsPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsPtrOutput) TacplusServers() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o.ApplyT(func(v *NetworktemplateSwitchMgmtTacacs) []NetworktemplateSwitchMgmtTacacsTacplusServer {
		if v == nil {
			return nil
		}
		return v.TacplusServers
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServer struct {
	Host    *string `pulumi:"host"`
	Port    *string `pulumi:"port"`
	Secret  *string `pulumi:"secret"`
	Timeout *int    `pulumi:"timeout"`
}

// NetworktemplateSwitchMgmtTacacsAcctServerInput is an input type that accepts NetworktemplateSwitchMgmtTacacsAcctServerArgs and NetworktemplateSwitchMgmtTacacsAcctServerOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsAcctServerInput` via:
//
//	NetworktemplateSwitchMgmtTacacsAcctServerArgs{...}
type NetworktemplateSwitchMgmtTacacsAcctServerInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput
	ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput
}

type NetworktemplateSwitchMgmtTacacsAcctServerArgs struct {
	Host    pulumi.StringPtrInput `pulumi:"host"`
	Port    pulumi.StringPtrInput `pulumi:"port"`
	Secret  pulumi.StringPtrInput `pulumi:"secret"`
	Timeout pulumi.IntPtrInput    `pulumi:"timeout"`
}

func (NetworktemplateSwitchMgmtTacacsAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArgs) ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArgs) ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsAcctServerOutput)
}

// NetworktemplateSwitchMgmtTacacsAcctServerArrayInput is an input type that accepts NetworktemplateSwitchMgmtTacacsAcctServerArray and NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsAcctServerArrayInput` via:
//
//	NetworktemplateSwitchMgmtTacacsAcctServerArray{ NetworktemplateSwitchMgmtTacacsAcctServerArgs{...} }
type NetworktemplateSwitchMgmtTacacsAcctServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput
	ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput
}

type NetworktemplateSwitchMgmtTacacsAcctServerArray []NetworktemplateSwitchMgmtTacacsAcctServerInput

func (NetworktemplateSwitchMgmtTacacsAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArray) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsAcctServerArray) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerOutput() NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsAcctServer) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsAcctServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutput() NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsAcctServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtTacacsAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtTacacsAcctServer {
		return vs[0].([]NetworktemplateSwitchMgmtTacacsAcctServer)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtTacacsAcctServerOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServer struct {
	Host    *string `pulumi:"host"`
	Port    *string `pulumi:"port"`
	Secret  *string `pulumi:"secret"`
	Timeout *int    `pulumi:"timeout"`
}

// NetworktemplateSwitchMgmtTacacsTacplusServerInput is an input type that accepts NetworktemplateSwitchMgmtTacacsTacplusServerArgs and NetworktemplateSwitchMgmtTacacsTacplusServerOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsTacplusServerInput` via:
//
//	NetworktemplateSwitchMgmtTacacsTacplusServerArgs{...}
type NetworktemplateSwitchMgmtTacacsTacplusServerInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput
	ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArgs struct {
	Host    pulumi.StringPtrInput `pulumi:"host"`
	Port    pulumi.StringPtrInput `pulumi:"port"`
	Secret  pulumi.StringPtrInput `pulumi:"secret"`
	Timeout pulumi.IntPtrInput    `pulumi:"timeout"`
}

func (NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArgs) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsTacplusServerOutput)
}

// NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput is an input type that accepts NetworktemplateSwitchMgmtTacacsTacplusServerArray and NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput values.
// You can construct a concrete instance of `NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput` via:
//
//	NetworktemplateSwitchMgmtTacacsTacplusServerArray{ NetworktemplateSwitchMgmtTacacsTacplusServerArgs{...} }
type NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput interface {
	pulumi.Input

	ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput
	ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArray []NetworktemplateSwitchMgmtTacacsTacplusServerInput

func (NetworktemplateSwitchMgmtTacacsTacplusServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArray) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return i.ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(context.Background())
}

func (i NetworktemplateSwitchMgmtTacacsTacplusServerArray) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServerOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutput() NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworktemplateSwitchMgmtTacacsTacplusServer) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput struct{ *pulumi.OutputState }

func (NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworktemplateSwitchMgmtTacacsTacplusServer)(nil)).Elem()
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput() NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) ToNetworktemplateSwitchMgmtTacacsTacplusServerArrayOutputWithContext(ctx context.Context) NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput {
	return o
}

func (o NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput) Index(i pulumi.IntInput) NetworktemplateSwitchMgmtTacacsTacplusServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworktemplateSwitchMgmtTacacsTacplusServer {
		return vs[0].([]NetworktemplateSwitchMgmtTacacsTacplusServer)[vs[1].(int)]
	}).(NetworktemplateSwitchMgmtTacacsTacplusServerOutput)
}

type NetworktemplateVrfConfig struct {
	// whether to enable VRF (when supported on the device)
	Enabled *bool `pulumi:"enabled"`
}

// NetworktemplateVrfConfigInput is an input type that accepts NetworktemplateVrfConfigArgs and NetworktemplateVrfConfigOutput values.
// You can construct a concrete instance of `NetworktemplateVrfConfigInput` via:
//
//	NetworktemplateVrfConfigArgs{...}
type NetworktemplateVrfConfigInput interface {
	pulumi.Input

	ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput
	ToNetworktemplateVrfConfigOutputWithContext(context.Context) NetworktemplateVrfConfigOutput
}

type NetworktemplateVrfConfigArgs struct {
	// whether to enable VRF (when supported on the device)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (NetworktemplateVrfConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfConfig)(nil)).Elem()
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput {
	return i.ToNetworktemplateVrfConfigOutputWithContext(context.Background())
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigOutputWithContext(ctx context.Context) NetworktemplateVrfConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigOutput)
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return i.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i NetworktemplateVrfConfigArgs) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigOutput).ToNetworktemplateVrfConfigPtrOutputWithContext(ctx)
}

// NetworktemplateVrfConfigPtrInput is an input type that accepts NetworktemplateVrfConfigArgs, NetworktemplateVrfConfigPtr and NetworktemplateVrfConfigPtrOutput values.
// You can construct a concrete instance of `NetworktemplateVrfConfigPtrInput` via:
//
//	        NetworktemplateVrfConfigArgs{...}
//
//	or:
//
//	        nil
type NetworktemplateVrfConfigPtrInput interface {
	pulumi.Input

	ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput
	ToNetworktemplateVrfConfigPtrOutputWithContext(context.Context) NetworktemplateVrfConfigPtrOutput
}

type networktemplateVrfConfigPtrType NetworktemplateVrfConfigArgs

func NetworktemplateVrfConfigPtr(v *NetworktemplateVrfConfigArgs) NetworktemplateVrfConfigPtrInput {
	return (*networktemplateVrfConfigPtrType)(v)
}

func (*networktemplateVrfConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateVrfConfig)(nil)).Elem()
}

func (i *networktemplateVrfConfigPtrType) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return i.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (i *networktemplateVrfConfigPtrType) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfConfigPtrOutput)
}

type NetworktemplateVrfConfigOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfConfig)(nil)).Elem()
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigOutput() NetworktemplateVrfConfigOutput {
	return o
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigOutputWithContext(ctx context.Context) NetworktemplateVrfConfigOutput {
	return o
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return o.ToNetworktemplateVrfConfigPtrOutputWithContext(context.Background())
}

func (o NetworktemplateVrfConfigOutput) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworktemplateVrfConfig) *NetworktemplateVrfConfig {
		return &v
	}).(NetworktemplateVrfConfigPtrOutput)
}

// whether to enable VRF (when supported on the device)
func (o NetworktemplateVrfConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworktemplateVrfConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type NetworktemplateVrfConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworktemplateVrfConfig)(nil)).Elem()
}

func (o NetworktemplateVrfConfigPtrOutput) ToNetworktemplateVrfConfigPtrOutput() NetworktemplateVrfConfigPtrOutput {
	return o
}

func (o NetworktemplateVrfConfigPtrOutput) ToNetworktemplateVrfConfigPtrOutputWithContext(ctx context.Context) NetworktemplateVrfConfigPtrOutput {
	return o
}

func (o NetworktemplateVrfConfigPtrOutput) Elem() NetworktemplateVrfConfigOutput {
	return o.ApplyT(func(v *NetworktemplateVrfConfig) NetworktemplateVrfConfig {
		if v != nil {
			return *v
		}
		var ret NetworktemplateVrfConfig
		return ret
	}).(NetworktemplateVrfConfigOutput)
}

// whether to enable VRF (when supported on the device)
func (o NetworktemplateVrfConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworktemplateVrfConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type NetworktemplateVrfInstances struct {
	// Property key is the destination CIDR (e.g. "10.0.0.0/8")
	ExtraRoutes map[string]NetworktemplateVrfInstancesExtraRoutes `pulumi:"extraRoutes"`
	Networks    []string                                          `pulumi:"networks"`
}

// NetworktemplateVrfInstancesInput is an input type that accepts NetworktemplateVrfInstancesArgs and NetworktemplateVrfInstancesOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesInput` via:
//
//	NetworktemplateVrfInstancesArgs{...}
type NetworktemplateVrfInstancesInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput
	ToNetworktemplateVrfInstancesOutputWithContext(context.Context) NetworktemplateVrfInstancesOutput
}

type NetworktemplateVrfInstancesArgs struct {
	// Property key is the destination CIDR (e.g. "10.0.0.0/8")
	ExtraRoutes NetworktemplateVrfInstancesExtraRoutesMapInput `pulumi:"extraRoutes"`
	Networks    pulumi.StringArrayInput                        `pulumi:"networks"`
}

func (NetworktemplateVrfInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstances)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesArgs) ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput {
	return i.ToNetworktemplateVrfInstancesOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesArgs) ToNetworktemplateVrfInstancesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesOutput)
}

// NetworktemplateVrfInstancesMapInput is an input type that accepts NetworktemplateVrfInstancesMap and NetworktemplateVrfInstancesMapOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesMapInput` via:
//
//	NetworktemplateVrfInstancesMap{ "key": NetworktemplateVrfInstancesArgs{...} }
type NetworktemplateVrfInstancesMapInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput
	ToNetworktemplateVrfInstancesMapOutputWithContext(context.Context) NetworktemplateVrfInstancesMapOutput
}

type NetworktemplateVrfInstancesMap map[string]NetworktemplateVrfInstancesInput

func (NetworktemplateVrfInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstances)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesMap) ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput {
	return i.ToNetworktemplateVrfInstancesMapOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesMap) ToNetworktemplateVrfInstancesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesMapOutput)
}

type NetworktemplateVrfInstancesOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstances)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesOutput) ToNetworktemplateVrfInstancesOutput() NetworktemplateVrfInstancesOutput {
	return o
}

func (o NetworktemplateVrfInstancesOutput) ToNetworktemplateVrfInstancesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesOutput {
	return o
}

// Property key is the destination CIDR (e.g. "10.0.0.0/8")
func (o NetworktemplateVrfInstancesOutput) ExtraRoutes() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstances) map[string]NetworktemplateVrfInstancesExtraRoutes {
		return v.ExtraRoutes
	}).(NetworktemplateVrfInstancesExtraRoutesMapOutput)
}

func (o NetworktemplateVrfInstancesOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstances) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type NetworktemplateVrfInstancesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstances)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesMapOutput) ToNetworktemplateVrfInstancesMapOutput() NetworktemplateVrfInstancesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesMapOutput) ToNetworktemplateVrfInstancesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateVrfInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateVrfInstances {
		return vs[0].(map[string]NetworktemplateVrfInstances)[vs[1].(string)]
	}).(NetworktemplateVrfInstancesOutput)
}

type NetworktemplateVrfInstancesExtraRoutes struct {
	// Next-hop address
	Via string `pulumi:"via"`
}

// NetworktemplateVrfInstancesExtraRoutesInput is an input type that accepts NetworktemplateVrfInstancesExtraRoutesArgs and NetworktemplateVrfInstancesExtraRoutesOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesExtraRoutesInput` via:
//
//	NetworktemplateVrfInstancesExtraRoutesArgs{...}
type NetworktemplateVrfInstancesExtraRoutesInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput
	ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(context.Context) NetworktemplateVrfInstancesExtraRoutesOutput
}

type NetworktemplateVrfInstancesExtraRoutesArgs struct {
	// Next-hop address
	Via pulumi.StringInput `pulumi:"via"`
}

func (NetworktemplateVrfInstancesExtraRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesExtraRoutesArgs) ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput {
	return i.ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesExtraRoutesArgs) ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesExtraRoutesOutput)
}

// NetworktemplateVrfInstancesExtraRoutesMapInput is an input type that accepts NetworktemplateVrfInstancesExtraRoutesMap and NetworktemplateVrfInstancesExtraRoutesMapOutput values.
// You can construct a concrete instance of `NetworktemplateVrfInstancesExtraRoutesMapInput` via:
//
//	NetworktemplateVrfInstancesExtraRoutesMap{ "key": NetworktemplateVrfInstancesExtraRoutesArgs{...} }
type NetworktemplateVrfInstancesExtraRoutesMapInput interface {
	pulumi.Input

	ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput
	ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput
}

type NetworktemplateVrfInstancesExtraRoutesMap map[string]NetworktemplateVrfInstancesExtraRoutesInput

func (NetworktemplateVrfInstancesExtraRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (i NetworktemplateVrfInstancesExtraRoutesMap) ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return i.ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(context.Background())
}

func (i NetworktemplateVrfInstancesExtraRoutesMap) ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworktemplateVrfInstancesExtraRoutesMapOutput)
}

type NetworktemplateVrfInstancesExtraRoutesOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesExtraRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesExtraRoutesOutput) ToNetworktemplateVrfInstancesExtraRoutesOutput() NetworktemplateVrfInstancesExtraRoutesOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesOutput) ToNetworktemplateVrfInstancesExtraRoutesOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesOutput {
	return o
}

// Next-hop address
func (o NetworktemplateVrfInstancesExtraRoutesOutput) Via() pulumi.StringOutput {
	return o.ApplyT(func(v NetworktemplateVrfInstancesExtraRoutes) string { return v.Via }).(pulumi.StringOutput)
}

type NetworktemplateVrfInstancesExtraRoutesMapOutput struct{ *pulumi.OutputState }

func (NetworktemplateVrfInstancesExtraRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworktemplateVrfInstancesExtraRoutes)(nil)).Elem()
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) ToNetworktemplateVrfInstancesExtraRoutesMapOutput() NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) ToNetworktemplateVrfInstancesExtraRoutesMapOutputWithContext(ctx context.Context) NetworktemplateVrfInstancesExtraRoutesMapOutput {
	return o
}

func (o NetworktemplateVrfInstancesExtraRoutesMapOutput) MapIndex(k pulumi.StringInput) NetworktemplateVrfInstancesExtraRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworktemplateVrfInstancesExtraRoutes {
		return vs[0].(map[string]NetworktemplateVrfInstancesExtraRoutes)[vs[1].(string)]
	}).(NetworktemplateVrfInstancesExtraRoutesOutput)
}

type SettingAnalytic struct {
	// enable Advanced Analytic feature (using SUB-ANA license)
	Enabled *bool `pulumi:"enabled"`
}

// SettingAnalyticInput is an input type that accepts SettingAnalyticArgs and SettingAnalyticOutput values.
// You can construct a concrete instance of `SettingAnalyticInput` via:
//
//	SettingAnalyticArgs{...}
type SettingAnalyticInput interface {
	pulumi.Input

	ToSettingAnalyticOutput() SettingAnalyticOutput
	ToSettingAnalyticOutputWithContext(context.Context) SettingAnalyticOutput
}

type SettingAnalyticArgs struct {
	// enable Advanced Analytic feature (using SUB-ANA license)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingAnalyticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAnalytic)(nil)).Elem()
}

func (i SettingAnalyticArgs) ToSettingAnalyticOutput() SettingAnalyticOutput {
	return i.ToSettingAnalyticOutputWithContext(context.Background())
}

func (i SettingAnalyticArgs) ToSettingAnalyticOutputWithContext(ctx context.Context) SettingAnalyticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAnalyticOutput)
}

func (i SettingAnalyticArgs) ToSettingAnalyticPtrOutput() SettingAnalyticPtrOutput {
	return i.ToSettingAnalyticPtrOutputWithContext(context.Background())
}

func (i SettingAnalyticArgs) ToSettingAnalyticPtrOutputWithContext(ctx context.Context) SettingAnalyticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAnalyticOutput).ToSettingAnalyticPtrOutputWithContext(ctx)
}

// SettingAnalyticPtrInput is an input type that accepts SettingAnalyticArgs, SettingAnalyticPtr and SettingAnalyticPtrOutput values.
// You can construct a concrete instance of `SettingAnalyticPtrInput` via:
//
//	        SettingAnalyticArgs{...}
//
//	or:
//
//	        nil
type SettingAnalyticPtrInput interface {
	pulumi.Input

	ToSettingAnalyticPtrOutput() SettingAnalyticPtrOutput
	ToSettingAnalyticPtrOutputWithContext(context.Context) SettingAnalyticPtrOutput
}

type settingAnalyticPtrType SettingAnalyticArgs

func SettingAnalyticPtr(v *SettingAnalyticArgs) SettingAnalyticPtrInput {
	return (*settingAnalyticPtrType)(v)
}

func (*settingAnalyticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingAnalytic)(nil)).Elem()
}

func (i *settingAnalyticPtrType) ToSettingAnalyticPtrOutput() SettingAnalyticPtrOutput {
	return i.ToSettingAnalyticPtrOutputWithContext(context.Background())
}

func (i *settingAnalyticPtrType) ToSettingAnalyticPtrOutputWithContext(ctx context.Context) SettingAnalyticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAnalyticPtrOutput)
}

type SettingAnalyticOutput struct{ *pulumi.OutputState }

func (SettingAnalyticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAnalytic)(nil)).Elem()
}

func (o SettingAnalyticOutput) ToSettingAnalyticOutput() SettingAnalyticOutput {
	return o
}

func (o SettingAnalyticOutput) ToSettingAnalyticOutputWithContext(ctx context.Context) SettingAnalyticOutput {
	return o
}

func (o SettingAnalyticOutput) ToSettingAnalyticPtrOutput() SettingAnalyticPtrOutput {
	return o.ToSettingAnalyticPtrOutputWithContext(context.Background())
}

func (o SettingAnalyticOutput) ToSettingAnalyticPtrOutputWithContext(ctx context.Context) SettingAnalyticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingAnalytic) *SettingAnalytic {
		return &v
	}).(SettingAnalyticPtrOutput)
}

// enable Advanced Analytic feature (using SUB-ANA license)
func (o SettingAnalyticOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingAnalytic) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingAnalyticPtrOutput struct{ *pulumi.OutputState }

func (SettingAnalyticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingAnalytic)(nil)).Elem()
}

func (o SettingAnalyticPtrOutput) ToSettingAnalyticPtrOutput() SettingAnalyticPtrOutput {
	return o
}

func (o SettingAnalyticPtrOutput) ToSettingAnalyticPtrOutputWithContext(ctx context.Context) SettingAnalyticPtrOutput {
	return o
}

func (o SettingAnalyticPtrOutput) Elem() SettingAnalyticOutput {
	return o.ApplyT(func(v *SettingAnalytic) SettingAnalytic {
		if v != nil {
			return *v
		}
		var ret SettingAnalytic
		return ret
	}).(SettingAnalyticOutput)
}

// enable Advanced Analytic feature (using SUB-ANA license)
func (o SettingAnalyticPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingAnalytic) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingAutoUpgrade struct {
	// custom versions for different models. Property key is the model name (e.g. "AP41")
	CustomVersions map[string]string `pulumi:"customVersions"`
	// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
	Enabled *bool `pulumi:"enabled"`
	// any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
	TimeOfDay *string `pulumi:"timeOfDay"`
	// desired version. enum: `beta`, `custom`, `stable`
	Version *string `pulumi:"version"`
}

// SettingAutoUpgradeInput is an input type that accepts SettingAutoUpgradeArgs and SettingAutoUpgradeOutput values.
// You can construct a concrete instance of `SettingAutoUpgradeInput` via:
//
//	SettingAutoUpgradeArgs{...}
type SettingAutoUpgradeInput interface {
	pulumi.Input

	ToSettingAutoUpgradeOutput() SettingAutoUpgradeOutput
	ToSettingAutoUpgradeOutputWithContext(context.Context) SettingAutoUpgradeOutput
}

type SettingAutoUpgradeArgs struct {
	// custom versions for different models. Property key is the model name (e.g. "AP41")
	CustomVersions pulumi.StringMapInput `pulumi:"customVersions"`
	// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
	TimeOfDay pulumi.StringPtrInput `pulumi:"timeOfDay"`
	// desired version. enum: `beta`, `custom`, `stable`
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SettingAutoUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAutoUpgrade)(nil)).Elem()
}

func (i SettingAutoUpgradeArgs) ToSettingAutoUpgradeOutput() SettingAutoUpgradeOutput {
	return i.ToSettingAutoUpgradeOutputWithContext(context.Background())
}

func (i SettingAutoUpgradeArgs) ToSettingAutoUpgradeOutputWithContext(ctx context.Context) SettingAutoUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAutoUpgradeOutput)
}

func (i SettingAutoUpgradeArgs) ToSettingAutoUpgradePtrOutput() SettingAutoUpgradePtrOutput {
	return i.ToSettingAutoUpgradePtrOutputWithContext(context.Background())
}

func (i SettingAutoUpgradeArgs) ToSettingAutoUpgradePtrOutputWithContext(ctx context.Context) SettingAutoUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAutoUpgradeOutput).ToSettingAutoUpgradePtrOutputWithContext(ctx)
}

// SettingAutoUpgradePtrInput is an input type that accepts SettingAutoUpgradeArgs, SettingAutoUpgradePtr and SettingAutoUpgradePtrOutput values.
// You can construct a concrete instance of `SettingAutoUpgradePtrInput` via:
//
//	        SettingAutoUpgradeArgs{...}
//
//	or:
//
//	        nil
type SettingAutoUpgradePtrInput interface {
	pulumi.Input

	ToSettingAutoUpgradePtrOutput() SettingAutoUpgradePtrOutput
	ToSettingAutoUpgradePtrOutputWithContext(context.Context) SettingAutoUpgradePtrOutput
}

type settingAutoUpgradePtrType SettingAutoUpgradeArgs

func SettingAutoUpgradePtr(v *SettingAutoUpgradeArgs) SettingAutoUpgradePtrInput {
	return (*settingAutoUpgradePtrType)(v)
}

func (*settingAutoUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingAutoUpgrade)(nil)).Elem()
}

func (i *settingAutoUpgradePtrType) ToSettingAutoUpgradePtrOutput() SettingAutoUpgradePtrOutput {
	return i.ToSettingAutoUpgradePtrOutputWithContext(context.Background())
}

func (i *settingAutoUpgradePtrType) ToSettingAutoUpgradePtrOutputWithContext(ctx context.Context) SettingAutoUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingAutoUpgradePtrOutput)
}

type SettingAutoUpgradeOutput struct{ *pulumi.OutputState }

func (SettingAutoUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingAutoUpgrade)(nil)).Elem()
}

func (o SettingAutoUpgradeOutput) ToSettingAutoUpgradeOutput() SettingAutoUpgradeOutput {
	return o
}

func (o SettingAutoUpgradeOutput) ToSettingAutoUpgradeOutputWithContext(ctx context.Context) SettingAutoUpgradeOutput {
	return o
}

func (o SettingAutoUpgradeOutput) ToSettingAutoUpgradePtrOutput() SettingAutoUpgradePtrOutput {
	return o.ToSettingAutoUpgradePtrOutputWithContext(context.Background())
}

func (o SettingAutoUpgradeOutput) ToSettingAutoUpgradePtrOutputWithContext(ctx context.Context) SettingAutoUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingAutoUpgrade) *SettingAutoUpgrade {
		return &v
	}).(SettingAutoUpgradePtrOutput)
}

// custom versions for different models. Property key is the model name (e.g. "AP41")
func (o SettingAutoUpgradeOutput) CustomVersions() pulumi.StringMapOutput {
	return o.ApplyT(func(v SettingAutoUpgrade) map[string]string { return v.CustomVersions }).(pulumi.StringMapOutput)
}

// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
func (o SettingAutoUpgradeOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingAutoUpgrade) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
func (o SettingAutoUpgradeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingAutoUpgrade) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
func (o SettingAutoUpgradeOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingAutoUpgrade) *string { return v.TimeOfDay }).(pulumi.StringPtrOutput)
}

// desired version. enum: `beta`, `custom`, `stable`
func (o SettingAutoUpgradeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingAutoUpgrade) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SettingAutoUpgradePtrOutput struct{ *pulumi.OutputState }

func (SettingAutoUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingAutoUpgrade)(nil)).Elem()
}

func (o SettingAutoUpgradePtrOutput) ToSettingAutoUpgradePtrOutput() SettingAutoUpgradePtrOutput {
	return o
}

func (o SettingAutoUpgradePtrOutput) ToSettingAutoUpgradePtrOutputWithContext(ctx context.Context) SettingAutoUpgradePtrOutput {
	return o
}

func (o SettingAutoUpgradePtrOutput) Elem() SettingAutoUpgradeOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) SettingAutoUpgrade {
		if v != nil {
			return *v
		}
		var ret SettingAutoUpgrade
		return ret
	}).(SettingAutoUpgradeOutput)
}

// custom versions for different models. Property key is the model name (e.g. "AP41")
func (o SettingAutoUpgradePtrOutput) CustomVersions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomVersions
	}).(pulumi.StringMapOutput)
}

// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
func (o SettingAutoUpgradePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

// whether auto upgrade should happen (Note that Mist may auto-upgrade if the version is not supported)
func (o SettingAutoUpgradePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format), upgrade will happen within up to 1-hour from this time
func (o SettingAutoUpgradePtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

// desired version. enum: `beta`, `custom`, `stable`
func (o SettingAutoUpgradePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingAutoUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type SettingBleConfig struct {
	// whether Mist beacons is enabled
	BeaconEnabled *bool `pulumi:"beaconEnabled"`
	// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
	BeaconRate *int `pulumi:"beaconRate"`
	// enum: `custom`, `default`
	BeaconRateMode *string `pulumi:"beaconRateMode"`
	// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
	BeamDisableds []int `pulumi:"beamDisableds"`
	// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
	CustomBlePacketEnabled *bool `pulumi:"customBlePacketEnabled"`
	// The custom frame to be sent out in this beacon. The frame must be a hexstring
	CustomBlePacketFrame *string `pulumi:"customBlePacketFrame"`
	// Frequency (msec) of data emitted by custom ble beacon
	CustomBlePacketFreqMsec *int `pulumi:"customBlePacketFreqMsec"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUidAdvPower *int    `pulumi:"eddystoneUidAdvPower"`
	EddystoneUidBeams    *string `pulumi:"eddystoneUidBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
	EddystoneUidEnabled *bool `pulumi:"eddystoneUidEnabled"`
	// Frequency (msec) of data emmit by Eddystone-UID beacon
	EddystoneUidFreqMsec *int `pulumi:"eddystoneUidFreqMsec"`
	// Eddystone-UID instance for the device
	EddystoneUidInstance *string `pulumi:"eddystoneUidInstance"`
	// Eddystone-UID namespace
	EddystoneUidNamespace *string `pulumi:"eddystoneUidNamespace"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUrlAdvPower *int    `pulumi:"eddystoneUrlAdvPower"`
	EddystoneUrlBeams    *string `pulumi:"eddystoneUrlBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
	EddystoneUrlEnabled *bool `pulumi:"eddystoneUrlEnabled"`
	// Frequency (msec) of data emit by Eddystone-UID beacon
	EddystoneUrlFreqMsec *int `pulumi:"eddystoneUrlFreqMsec"`
	// URL pointed by Eddystone-URL beacon
	EddystoneUrlUrl *string `pulumi:"eddystoneUrlUrl"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	IbeaconAdvPower *int    `pulumi:"ibeaconAdvPower"`
	IbeaconBeams    *string `pulumi:"ibeaconBeams"`
	// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
	IbeaconEnabled *bool `pulumi:"ibeaconEnabled"`
	// Frequency (msec) of data emmit for iBeacon
	IbeaconFreqMsec *int `pulumi:"ibeaconFreqMsec"`
	// Major number for iBeacon
	IbeaconMajor *int `pulumi:"ibeaconMajor"`
	// Minor number for iBeacon
	IbeaconMinor *int `pulumi:"ibeaconMinor"`
	// optional, if not specified, the same UUID as the beacon will be used
	IbeaconUuid *string `pulumi:"ibeaconUuid"`
	// required if `powerMode`==`custom`; else use `powerMode` as default
	Power *int `pulumi:"power"`
	// enum: `custom`, `default`
	PowerMode *string `pulumi:"powerMode"`
}

// SettingBleConfigInput is an input type that accepts SettingBleConfigArgs and SettingBleConfigOutput values.
// You can construct a concrete instance of `SettingBleConfigInput` via:
//
//	SettingBleConfigArgs{...}
type SettingBleConfigInput interface {
	pulumi.Input

	ToSettingBleConfigOutput() SettingBleConfigOutput
	ToSettingBleConfigOutputWithContext(context.Context) SettingBleConfigOutput
}

type SettingBleConfigArgs struct {
	// whether Mist beacons is enabled
	BeaconEnabled pulumi.BoolPtrInput `pulumi:"beaconEnabled"`
	// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
	BeaconRate pulumi.IntPtrInput `pulumi:"beaconRate"`
	// enum: `custom`, `default`
	BeaconRateMode pulumi.StringPtrInput `pulumi:"beaconRateMode"`
	// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
	BeamDisableds pulumi.IntArrayInput `pulumi:"beamDisableds"`
	// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
	CustomBlePacketEnabled pulumi.BoolPtrInput `pulumi:"customBlePacketEnabled"`
	// The custom frame to be sent out in this beacon. The frame must be a hexstring
	CustomBlePacketFrame pulumi.StringPtrInput `pulumi:"customBlePacketFrame"`
	// Frequency (msec) of data emitted by custom ble beacon
	CustomBlePacketFreqMsec pulumi.IntPtrInput `pulumi:"customBlePacketFreqMsec"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUidAdvPower pulumi.IntPtrInput    `pulumi:"eddystoneUidAdvPower"`
	EddystoneUidBeams    pulumi.StringPtrInput `pulumi:"eddystoneUidBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
	EddystoneUidEnabled pulumi.BoolPtrInput `pulumi:"eddystoneUidEnabled"`
	// Frequency (msec) of data emmit by Eddystone-UID beacon
	EddystoneUidFreqMsec pulumi.IntPtrInput `pulumi:"eddystoneUidFreqMsec"`
	// Eddystone-UID instance for the device
	EddystoneUidInstance pulumi.StringPtrInput `pulumi:"eddystoneUidInstance"`
	// Eddystone-UID namespace
	EddystoneUidNamespace pulumi.StringPtrInput `pulumi:"eddystoneUidNamespace"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	EddystoneUrlAdvPower pulumi.IntPtrInput    `pulumi:"eddystoneUrlAdvPower"`
	EddystoneUrlBeams    pulumi.StringPtrInput `pulumi:"eddystoneUrlBeams"`
	// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
	EddystoneUrlEnabled pulumi.BoolPtrInput `pulumi:"eddystoneUrlEnabled"`
	// Frequency (msec) of data emit by Eddystone-UID beacon
	EddystoneUrlFreqMsec pulumi.IntPtrInput `pulumi:"eddystoneUrlFreqMsec"`
	// URL pointed by Eddystone-URL beacon
	EddystoneUrlUrl pulumi.StringPtrInput `pulumi:"eddystoneUrlUrl"`
	// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
	IbeaconAdvPower pulumi.IntPtrInput    `pulumi:"ibeaconAdvPower"`
	IbeaconBeams    pulumi.StringPtrInput `pulumi:"ibeaconBeams"`
	// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
	IbeaconEnabled pulumi.BoolPtrInput `pulumi:"ibeaconEnabled"`
	// Frequency (msec) of data emmit for iBeacon
	IbeaconFreqMsec pulumi.IntPtrInput `pulumi:"ibeaconFreqMsec"`
	// Major number for iBeacon
	IbeaconMajor pulumi.IntPtrInput `pulumi:"ibeaconMajor"`
	// Minor number for iBeacon
	IbeaconMinor pulumi.IntPtrInput `pulumi:"ibeaconMinor"`
	// optional, if not specified, the same UUID as the beacon will be used
	IbeaconUuid pulumi.StringPtrInput `pulumi:"ibeaconUuid"`
	// required if `powerMode`==`custom`; else use `powerMode` as default
	Power pulumi.IntPtrInput `pulumi:"power"`
	// enum: `custom`, `default`
	PowerMode pulumi.StringPtrInput `pulumi:"powerMode"`
}

func (SettingBleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingBleConfig)(nil)).Elem()
}

func (i SettingBleConfigArgs) ToSettingBleConfigOutput() SettingBleConfigOutput {
	return i.ToSettingBleConfigOutputWithContext(context.Background())
}

func (i SettingBleConfigArgs) ToSettingBleConfigOutputWithContext(ctx context.Context) SettingBleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingBleConfigOutput)
}

func (i SettingBleConfigArgs) ToSettingBleConfigPtrOutput() SettingBleConfigPtrOutput {
	return i.ToSettingBleConfigPtrOutputWithContext(context.Background())
}

func (i SettingBleConfigArgs) ToSettingBleConfigPtrOutputWithContext(ctx context.Context) SettingBleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingBleConfigOutput).ToSettingBleConfigPtrOutputWithContext(ctx)
}

// SettingBleConfigPtrInput is an input type that accepts SettingBleConfigArgs, SettingBleConfigPtr and SettingBleConfigPtrOutput values.
// You can construct a concrete instance of `SettingBleConfigPtrInput` via:
//
//	        SettingBleConfigArgs{...}
//
//	or:
//
//	        nil
type SettingBleConfigPtrInput interface {
	pulumi.Input

	ToSettingBleConfigPtrOutput() SettingBleConfigPtrOutput
	ToSettingBleConfigPtrOutputWithContext(context.Context) SettingBleConfigPtrOutput
}

type settingBleConfigPtrType SettingBleConfigArgs

func SettingBleConfigPtr(v *SettingBleConfigArgs) SettingBleConfigPtrInput {
	return (*settingBleConfigPtrType)(v)
}

func (*settingBleConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingBleConfig)(nil)).Elem()
}

func (i *settingBleConfigPtrType) ToSettingBleConfigPtrOutput() SettingBleConfigPtrOutput {
	return i.ToSettingBleConfigPtrOutputWithContext(context.Background())
}

func (i *settingBleConfigPtrType) ToSettingBleConfigPtrOutputWithContext(ctx context.Context) SettingBleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingBleConfigPtrOutput)
}

type SettingBleConfigOutput struct{ *pulumi.OutputState }

func (SettingBleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingBleConfig)(nil)).Elem()
}

func (o SettingBleConfigOutput) ToSettingBleConfigOutput() SettingBleConfigOutput {
	return o
}

func (o SettingBleConfigOutput) ToSettingBleConfigOutputWithContext(ctx context.Context) SettingBleConfigOutput {
	return o
}

func (o SettingBleConfigOutput) ToSettingBleConfigPtrOutput() SettingBleConfigPtrOutput {
	return o.ToSettingBleConfigPtrOutputWithContext(context.Background())
}

func (o SettingBleConfigOutput) ToSettingBleConfigPtrOutputWithContext(ctx context.Context) SettingBleConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingBleConfig) *SettingBleConfig {
		return &v
	}).(SettingBleConfigPtrOutput)
}

// whether Mist beacons is enabled
func (o SettingBleConfigOutput) BeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *bool { return v.BeaconEnabled }).(pulumi.BoolPtrOutput)
}

// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
func (o SettingBleConfigOutput) BeaconRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.BeaconRate }).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o SettingBleConfigOutput) BeaconRateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.BeaconRateMode }).(pulumi.StringPtrOutput)
}

// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
func (o SettingBleConfigOutput) BeamDisableds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SettingBleConfig) []int { return v.BeamDisableds }).(pulumi.IntArrayOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
func (o SettingBleConfigOutput) CustomBlePacketEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *bool { return v.CustomBlePacketEnabled }).(pulumi.BoolPtrOutput)
}

// The custom frame to be sent out in this beacon. The frame must be a hexstring
func (o SettingBleConfigOutput) CustomBlePacketFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.CustomBlePacketFrame }).(pulumi.StringPtrOutput)
}

// Frequency (msec) of data emitted by custom ble beacon
func (o SettingBleConfigOutput) CustomBlePacketFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.CustomBlePacketFreqMsec }).(pulumi.IntPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigOutput) EddystoneUidAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.EddystoneUidAdvPower }).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigOutput) EddystoneUidBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.EddystoneUidBeams }).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
func (o SettingBleConfigOutput) EddystoneUidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *bool { return v.EddystoneUidEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit by Eddystone-UID beacon
func (o SettingBleConfigOutput) EddystoneUidFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.EddystoneUidFreqMsec }).(pulumi.IntPtrOutput)
}

// Eddystone-UID instance for the device
func (o SettingBleConfigOutput) EddystoneUidInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.EddystoneUidInstance }).(pulumi.StringPtrOutput)
}

// Eddystone-UID namespace
func (o SettingBleConfigOutput) EddystoneUidNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.EddystoneUidNamespace }).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigOutput) EddystoneUrlAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.EddystoneUrlAdvPower }).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigOutput) EddystoneUrlBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.EddystoneUrlBeams }).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
func (o SettingBleConfigOutput) EddystoneUrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *bool { return v.EddystoneUrlEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emit by Eddystone-UID beacon
func (o SettingBleConfigOutput) EddystoneUrlFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.EddystoneUrlFreqMsec }).(pulumi.IntPtrOutput)
}

// URL pointed by Eddystone-URL beacon
func (o SettingBleConfigOutput) EddystoneUrlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.EddystoneUrlUrl }).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigOutput) IbeaconAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.IbeaconAdvPower }).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigOutput) IbeaconBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.IbeaconBeams }).(pulumi.StringPtrOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
func (o SettingBleConfigOutput) IbeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *bool { return v.IbeaconEnabled }).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit for iBeacon
func (o SettingBleConfigOutput) IbeaconFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.IbeaconFreqMsec }).(pulumi.IntPtrOutput)
}

// Major number for iBeacon
func (o SettingBleConfigOutput) IbeaconMajor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.IbeaconMajor }).(pulumi.IntPtrOutput)
}

// Minor number for iBeacon
func (o SettingBleConfigOutput) IbeaconMinor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.IbeaconMinor }).(pulumi.IntPtrOutput)
}

// optional, if not specified, the same UUID as the beacon will be used
func (o SettingBleConfigOutput) IbeaconUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.IbeaconUuid }).(pulumi.StringPtrOutput)
}

// required if `powerMode`==`custom`; else use `powerMode` as default
func (o SettingBleConfigOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *int { return v.Power }).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o SettingBleConfigOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingBleConfig) *string { return v.PowerMode }).(pulumi.StringPtrOutput)
}

type SettingBleConfigPtrOutput struct{ *pulumi.OutputState }

func (SettingBleConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingBleConfig)(nil)).Elem()
}

func (o SettingBleConfigPtrOutput) ToSettingBleConfigPtrOutput() SettingBleConfigPtrOutput {
	return o
}

func (o SettingBleConfigPtrOutput) ToSettingBleConfigPtrOutputWithContext(ctx context.Context) SettingBleConfigPtrOutput {
	return o
}

func (o SettingBleConfigPtrOutput) Elem() SettingBleConfigOutput {
	return o.ApplyT(func(v *SettingBleConfig) SettingBleConfig {
		if v != nil {
			return *v
		}
		var ret SettingBleConfig
		return ret
	}).(SettingBleConfigOutput)
}

// whether Mist beacons is enabled
func (o SettingBleConfigPtrOutput) BeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.BeaconEnabled
	}).(pulumi.BoolPtrOutput)
}

// required if `beaconRateMode`==`custom`, 1-10, in number-beacons-per-second
func (o SettingBleConfigPtrOutput) BeaconRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.BeaconRate
	}).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o SettingBleConfigPtrOutput) BeaconRateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.BeaconRateMode
	}).(pulumi.StringPtrOutput)
}

// list of AP BLE location beam numbers (1-8) which should be disabled at the AP and not transmit location information (where beam 1 is oriented at the top the AP, growing counter-clock-wise, with 9 being the omni BLE beam)
func (o SettingBleConfigPtrOutput) BeamDisableds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SettingBleConfig) []int {
		if v == nil {
			return nil
		}
		return v.BeamDisableds
	}).(pulumi.IntArrayOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send custom packet
func (o SettingBleConfigPtrOutput) CustomBlePacketEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketEnabled
	}).(pulumi.BoolPtrOutput)
}

// The custom frame to be sent out in this beacon. The frame must be a hexstring
func (o SettingBleConfigPtrOutput) CustomBlePacketFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketFrame
	}).(pulumi.StringPtrOutput)
}

// Frequency (msec) of data emitted by custom ble beacon
func (o SettingBleConfigPtrOutput) CustomBlePacketFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.CustomBlePacketFreqMsec
	}).(pulumi.IntPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigPtrOutput) EddystoneUidAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUidAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigPtrOutput) EddystoneUidBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidBeams
	}).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-UID beacon is enabled
func (o SettingBleConfigPtrOutput) EddystoneUidEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EddystoneUidEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit by Eddystone-UID beacon
func (o SettingBleConfigPtrOutput) EddystoneUidFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUidFreqMsec
	}).(pulumi.IntPtrOutput)
}

// Eddystone-UID instance for the device
func (o SettingBleConfigPtrOutput) EddystoneUidInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidInstance
	}).(pulumi.StringPtrOutput)
}

// Eddystone-UID namespace
func (o SettingBleConfigPtrOutput) EddystoneUidNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUidNamespace
	}).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigPtrOutput) EddystoneUrlAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigPtrOutput) EddystoneUrlBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlBeams
	}).(pulumi.StringPtrOutput)
}

// only if `beaconEnabled`==`false`, Whether Eddystone-URL beacon is enabled
func (o SettingBleConfigPtrOutput) EddystoneUrlEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emit by Eddystone-UID beacon
func (o SettingBleConfigPtrOutput) EddystoneUrlFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlFreqMsec
	}).(pulumi.IntPtrOutput)
}

// URL pointed by Eddystone-URL beacon
func (o SettingBleConfigPtrOutput) EddystoneUrlUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.EddystoneUrlUrl
	}).(pulumi.StringPtrOutput)
}

// advertised TX Power, -100 to 20 (dBm), omit this attribute to use default
func (o SettingBleConfigPtrOutput) IbeaconAdvPower() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconAdvPower
	}).(pulumi.IntPtrOutput)
}

func (o SettingBleConfigPtrOutput) IbeaconBeams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.IbeaconBeams
	}).(pulumi.StringPtrOutput)
}

// can be enabled if `beaconEnabled`==`true`, whether to send iBeacon
func (o SettingBleConfigPtrOutput) IbeaconEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.IbeaconEnabled
	}).(pulumi.BoolPtrOutput)
}

// Frequency (msec) of data emmit for iBeacon
func (o SettingBleConfigPtrOutput) IbeaconFreqMsec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconFreqMsec
	}).(pulumi.IntPtrOutput)
}

// Major number for iBeacon
func (o SettingBleConfigPtrOutput) IbeaconMajor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconMajor
	}).(pulumi.IntPtrOutput)
}

// Minor number for iBeacon
func (o SettingBleConfigPtrOutput) IbeaconMinor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.IbeaconMinor
	}).(pulumi.IntPtrOutput)
}

// optional, if not specified, the same UUID as the beacon will be used
func (o SettingBleConfigPtrOutput) IbeaconUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.IbeaconUuid
	}).(pulumi.StringPtrOutput)
}

// required if `powerMode`==`custom`; else use `powerMode` as default
func (o SettingBleConfigPtrOutput) Power() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *int {
		if v == nil {
			return nil
		}
		return v.Power
	}).(pulumi.IntPtrOutput)
}

// enum: `custom`, `default`
func (o SettingBleConfigPtrOutput) PowerMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingBleConfig) *string {
		if v == nil {
			return nil
		}
		return v.PowerMode
	}).(pulumi.StringPtrOutput)
}

type SettingConfigPushPolicy struct {
	// stop any new config from being pushed to the device
	NoPush *bool `pulumi:"noPush"`
	// if enabled, new config will only be pushed to device within the specified time window
	PushWindow *SettingConfigPushPolicyPushWindow `pulumi:"pushWindow"`
}

// SettingConfigPushPolicyInput is an input type that accepts SettingConfigPushPolicyArgs and SettingConfigPushPolicyOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyInput` via:
//
//	SettingConfigPushPolicyArgs{...}
type SettingConfigPushPolicyInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyOutput() SettingConfigPushPolicyOutput
	ToSettingConfigPushPolicyOutputWithContext(context.Context) SettingConfigPushPolicyOutput
}

type SettingConfigPushPolicyArgs struct {
	// stop any new config from being pushed to the device
	NoPush pulumi.BoolPtrInput `pulumi:"noPush"`
	// if enabled, new config will only be pushed to device within the specified time window
	PushWindow SettingConfigPushPolicyPushWindowPtrInput `pulumi:"pushWindow"`
}

func (SettingConfigPushPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicy)(nil)).Elem()
}

func (i SettingConfigPushPolicyArgs) ToSettingConfigPushPolicyOutput() SettingConfigPushPolicyOutput {
	return i.ToSettingConfigPushPolicyOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyArgs) ToSettingConfigPushPolicyOutputWithContext(ctx context.Context) SettingConfigPushPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyOutput)
}

func (i SettingConfigPushPolicyArgs) ToSettingConfigPushPolicyPtrOutput() SettingConfigPushPolicyPtrOutput {
	return i.ToSettingConfigPushPolicyPtrOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyArgs) ToSettingConfigPushPolicyPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyOutput).ToSettingConfigPushPolicyPtrOutputWithContext(ctx)
}

// SettingConfigPushPolicyPtrInput is an input type that accepts SettingConfigPushPolicyArgs, SettingConfigPushPolicyPtr and SettingConfigPushPolicyPtrOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyPtrInput` via:
//
//	        SettingConfigPushPolicyArgs{...}
//
//	or:
//
//	        nil
type SettingConfigPushPolicyPtrInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyPtrOutput() SettingConfigPushPolicyPtrOutput
	ToSettingConfigPushPolicyPtrOutputWithContext(context.Context) SettingConfigPushPolicyPtrOutput
}

type settingConfigPushPolicyPtrType SettingConfigPushPolicyArgs

func SettingConfigPushPolicyPtr(v *SettingConfigPushPolicyArgs) SettingConfigPushPolicyPtrInput {
	return (*settingConfigPushPolicyPtrType)(v)
}

func (*settingConfigPushPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicy)(nil)).Elem()
}

func (i *settingConfigPushPolicyPtrType) ToSettingConfigPushPolicyPtrOutput() SettingConfigPushPolicyPtrOutput {
	return i.ToSettingConfigPushPolicyPtrOutputWithContext(context.Background())
}

func (i *settingConfigPushPolicyPtrType) ToSettingConfigPushPolicyPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPtrOutput)
}

type SettingConfigPushPolicyOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicy)(nil)).Elem()
}

func (o SettingConfigPushPolicyOutput) ToSettingConfigPushPolicyOutput() SettingConfigPushPolicyOutput {
	return o
}

func (o SettingConfigPushPolicyOutput) ToSettingConfigPushPolicyOutputWithContext(ctx context.Context) SettingConfigPushPolicyOutput {
	return o
}

func (o SettingConfigPushPolicyOutput) ToSettingConfigPushPolicyPtrOutput() SettingConfigPushPolicyPtrOutput {
	return o.ToSettingConfigPushPolicyPtrOutputWithContext(context.Background())
}

func (o SettingConfigPushPolicyOutput) ToSettingConfigPushPolicyPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingConfigPushPolicy) *SettingConfigPushPolicy {
		return &v
	}).(SettingConfigPushPolicyPtrOutput)
}

// stop any new config from being pushed to the device
func (o SettingConfigPushPolicyOutput) NoPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicy) *bool { return v.NoPush }).(pulumi.BoolPtrOutput)
}

// if enabled, new config will only be pushed to device within the specified time window
func (o SettingConfigPushPolicyOutput) PushWindow() SettingConfigPushPolicyPushWindowPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicy) *SettingConfigPushPolicyPushWindow { return v.PushWindow }).(SettingConfigPushPolicyPushWindowPtrOutput)
}

type SettingConfigPushPolicyPtrOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicy)(nil)).Elem()
}

func (o SettingConfigPushPolicyPtrOutput) ToSettingConfigPushPolicyPtrOutput() SettingConfigPushPolicyPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPtrOutput) ToSettingConfigPushPolicyPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPtrOutput) Elem() SettingConfigPushPolicyOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicy) SettingConfigPushPolicy {
		if v != nil {
			return *v
		}
		var ret SettingConfigPushPolicy
		return ret
	}).(SettingConfigPushPolicyOutput)
}

// stop any new config from being pushed to the device
func (o SettingConfigPushPolicyPtrOutput) NoPush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.NoPush
	}).(pulumi.BoolPtrOutput)
}

// if enabled, new config will only be pushed to device within the specified time window
func (o SettingConfigPushPolicyPtrOutput) PushWindow() SettingConfigPushPolicyPushWindowPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicy) *SettingConfigPushPolicyPushWindow {
		if v == nil {
			return nil
		}
		return v.PushWindow
	}).(SettingConfigPushPolicyPushWindowPtrOutput)
}

type SettingConfigPushPolicyPushWindow struct {
	Enabled *bool `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours *SettingConfigPushPolicyPushWindowHours `pulumi:"hours"`
}

// SettingConfigPushPolicyPushWindowInput is an input type that accepts SettingConfigPushPolicyPushWindowArgs and SettingConfigPushPolicyPushWindowOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyPushWindowInput` via:
//
//	SettingConfigPushPolicyPushWindowArgs{...}
type SettingConfigPushPolicyPushWindowInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyPushWindowOutput() SettingConfigPushPolicyPushWindowOutput
	ToSettingConfigPushPolicyPushWindowOutputWithContext(context.Context) SettingConfigPushPolicyPushWindowOutput
}

type SettingConfigPushPolicyPushWindowArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours SettingConfigPushPolicyPushWindowHoursPtrInput `pulumi:"hours"`
}

func (SettingConfigPushPolicyPushWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicyPushWindow)(nil)).Elem()
}

func (i SettingConfigPushPolicyPushWindowArgs) ToSettingConfigPushPolicyPushWindowOutput() SettingConfigPushPolicyPushWindowOutput {
	return i.ToSettingConfigPushPolicyPushWindowOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyPushWindowArgs) ToSettingConfigPushPolicyPushWindowOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowOutput)
}

func (i SettingConfigPushPolicyPushWindowArgs) ToSettingConfigPushPolicyPushWindowPtrOutput() SettingConfigPushPolicyPushWindowPtrOutput {
	return i.ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyPushWindowArgs) ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowOutput).ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(ctx)
}

// SettingConfigPushPolicyPushWindowPtrInput is an input type that accepts SettingConfigPushPolicyPushWindowArgs, SettingConfigPushPolicyPushWindowPtr and SettingConfigPushPolicyPushWindowPtrOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyPushWindowPtrInput` via:
//
//	        SettingConfigPushPolicyPushWindowArgs{...}
//
//	or:
//
//	        nil
type SettingConfigPushPolicyPushWindowPtrInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyPushWindowPtrOutput() SettingConfigPushPolicyPushWindowPtrOutput
	ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(context.Context) SettingConfigPushPolicyPushWindowPtrOutput
}

type settingConfigPushPolicyPushWindowPtrType SettingConfigPushPolicyPushWindowArgs

func SettingConfigPushPolicyPushWindowPtr(v *SettingConfigPushPolicyPushWindowArgs) SettingConfigPushPolicyPushWindowPtrInput {
	return (*settingConfigPushPolicyPushWindowPtrType)(v)
}

func (*settingConfigPushPolicyPushWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicyPushWindow)(nil)).Elem()
}

func (i *settingConfigPushPolicyPushWindowPtrType) ToSettingConfigPushPolicyPushWindowPtrOutput() SettingConfigPushPolicyPushWindowPtrOutput {
	return i.ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(context.Background())
}

func (i *settingConfigPushPolicyPushWindowPtrType) ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowPtrOutput)
}

type SettingConfigPushPolicyPushWindowOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyPushWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicyPushWindow)(nil)).Elem()
}

func (o SettingConfigPushPolicyPushWindowOutput) ToSettingConfigPushPolicyPushWindowOutput() SettingConfigPushPolicyPushWindowOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowOutput) ToSettingConfigPushPolicyPushWindowOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowOutput) ToSettingConfigPushPolicyPushWindowPtrOutput() SettingConfigPushPolicyPushWindowPtrOutput {
	return o.ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(context.Background())
}

func (o SettingConfigPushPolicyPushWindowOutput) ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingConfigPushPolicyPushWindow) *SettingConfigPushPolicyPushWindow {
		return &v
	}).(SettingConfigPushPolicyPushWindowPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindow) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o SettingConfigPushPolicyPushWindowOutput) Hours() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindow) *SettingConfigPushPolicyPushWindowHours { return v.Hours }).(SettingConfigPushPolicyPushWindowHoursPtrOutput)
}

type SettingConfigPushPolicyPushWindowPtrOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyPushWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicyPushWindow)(nil)).Elem()
}

func (o SettingConfigPushPolicyPushWindowPtrOutput) ToSettingConfigPushPolicyPushWindowPtrOutput() SettingConfigPushPolicyPushWindowPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowPtrOutput) ToSettingConfigPushPolicyPushWindowPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowPtrOutput) Elem() SettingConfigPushPolicyPushWindowOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindow) SettingConfigPushPolicyPushWindow {
		if v != nil {
			return *v
		}
		var ret SettingConfigPushPolicyPushWindow
		return ret
	}).(SettingConfigPushPolicyPushWindowOutput)
}

func (o SettingConfigPushPolicyPushWindowPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindow) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o SettingConfigPushPolicyPushWindowPtrOutput) Hours() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindow) *SettingConfigPushPolicyPushWindowHours {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(SettingConfigPushPolicyPushWindowHoursPtrOutput)
}

type SettingConfigPushPolicyPushWindowHours struct {
	Fri *string `pulumi:"fri"`
	Mon *string `pulumi:"mon"`
	Sat *string `pulumi:"sat"`
	Sun *string `pulumi:"sun"`
	Thu *string `pulumi:"thu"`
	Tue *string `pulumi:"tue"`
	Wed *string `pulumi:"wed"`
}

// SettingConfigPushPolicyPushWindowHoursInput is an input type that accepts SettingConfigPushPolicyPushWindowHoursArgs and SettingConfigPushPolicyPushWindowHoursOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyPushWindowHoursInput` via:
//
//	SettingConfigPushPolicyPushWindowHoursArgs{...}
type SettingConfigPushPolicyPushWindowHoursInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyPushWindowHoursOutput() SettingConfigPushPolicyPushWindowHoursOutput
	ToSettingConfigPushPolicyPushWindowHoursOutputWithContext(context.Context) SettingConfigPushPolicyPushWindowHoursOutput
}

type SettingConfigPushPolicyPushWindowHoursArgs struct {
	Fri pulumi.StringPtrInput `pulumi:"fri"`
	Mon pulumi.StringPtrInput `pulumi:"mon"`
	Sat pulumi.StringPtrInput `pulumi:"sat"`
	Sun pulumi.StringPtrInput `pulumi:"sun"`
	Thu pulumi.StringPtrInput `pulumi:"thu"`
	Tue pulumi.StringPtrInput `pulumi:"tue"`
	Wed pulumi.StringPtrInput `pulumi:"wed"`
}

func (SettingConfigPushPolicyPushWindowHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicyPushWindowHours)(nil)).Elem()
}

func (i SettingConfigPushPolicyPushWindowHoursArgs) ToSettingConfigPushPolicyPushWindowHoursOutput() SettingConfigPushPolicyPushWindowHoursOutput {
	return i.ToSettingConfigPushPolicyPushWindowHoursOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyPushWindowHoursArgs) ToSettingConfigPushPolicyPushWindowHoursOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowHoursOutput)
}

func (i SettingConfigPushPolicyPushWindowHoursArgs) ToSettingConfigPushPolicyPushWindowHoursPtrOutput() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return i.ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(context.Background())
}

func (i SettingConfigPushPolicyPushWindowHoursArgs) ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowHoursOutput).ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(ctx)
}

// SettingConfigPushPolicyPushWindowHoursPtrInput is an input type that accepts SettingConfigPushPolicyPushWindowHoursArgs, SettingConfigPushPolicyPushWindowHoursPtr and SettingConfigPushPolicyPushWindowHoursPtrOutput values.
// You can construct a concrete instance of `SettingConfigPushPolicyPushWindowHoursPtrInput` via:
//
//	        SettingConfigPushPolicyPushWindowHoursArgs{...}
//
//	or:
//
//	        nil
type SettingConfigPushPolicyPushWindowHoursPtrInput interface {
	pulumi.Input

	ToSettingConfigPushPolicyPushWindowHoursPtrOutput() SettingConfigPushPolicyPushWindowHoursPtrOutput
	ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(context.Context) SettingConfigPushPolicyPushWindowHoursPtrOutput
}

type settingConfigPushPolicyPushWindowHoursPtrType SettingConfigPushPolicyPushWindowHoursArgs

func SettingConfigPushPolicyPushWindowHoursPtr(v *SettingConfigPushPolicyPushWindowHoursArgs) SettingConfigPushPolicyPushWindowHoursPtrInput {
	return (*settingConfigPushPolicyPushWindowHoursPtrType)(v)
}

func (*settingConfigPushPolicyPushWindowHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicyPushWindowHours)(nil)).Elem()
}

func (i *settingConfigPushPolicyPushWindowHoursPtrType) ToSettingConfigPushPolicyPushWindowHoursPtrOutput() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return i.ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(context.Background())
}

func (i *settingConfigPushPolicyPushWindowHoursPtrType) ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingConfigPushPolicyPushWindowHoursPtrOutput)
}

type SettingConfigPushPolicyPushWindowHoursOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyPushWindowHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingConfigPushPolicyPushWindowHours)(nil)).Elem()
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) ToSettingConfigPushPolicyPushWindowHoursOutput() SettingConfigPushPolicyPushWindowHoursOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) ToSettingConfigPushPolicyPushWindowHoursOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) ToSettingConfigPushPolicyPushWindowHoursPtrOutput() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o.ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(context.Background())
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingConfigPushPolicyPushWindowHours) *SettingConfigPushPolicyPushWindowHours {
		return &v
	}).(SettingConfigPushPolicyPushWindowHoursPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Fri }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Mon }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Sat }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Sun }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Thu }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Tue }).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingConfigPushPolicyPushWindowHours) *string { return v.Wed }).(pulumi.StringPtrOutput)
}

type SettingConfigPushPolicyPushWindowHoursPtrOutput struct{ *pulumi.OutputState }

func (SettingConfigPushPolicyPushWindowHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingConfigPushPolicyPushWindowHours)(nil)).Elem()
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) ToSettingConfigPushPolicyPushWindowHoursPtrOutput() SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) ToSettingConfigPushPolicyPushWindowHoursPtrOutputWithContext(ctx context.Context) SettingConfigPushPolicyPushWindowHoursPtrOutput {
	return o
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Elem() SettingConfigPushPolicyPushWindowHoursOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) SettingConfigPushPolicyPushWindowHours {
		if v != nil {
			return *v
		}
		var ret SettingConfigPushPolicyPushWindowHours
		return ret
	}).(SettingConfigPushPolicyPushWindowHoursOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Fri
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Mon
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Sat
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Sun
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Thu
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Tue
	}).(pulumi.StringPtrOutput)
}

func (o SettingConfigPushPolicyPushWindowHoursPtrOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingConfigPushPolicyPushWindowHours) *string {
		if v == nil {
			return nil
		}
		return v.Wed
	}).(pulumi.StringPtrOutput)
}

type SettingCriticalUrlMonitoring struct {
	Enabled  *bool                                 `pulumi:"enabled"`
	Monitors []SettingCriticalUrlMonitoringMonitor `pulumi:"monitors"`
}

// SettingCriticalUrlMonitoringInput is an input type that accepts SettingCriticalUrlMonitoringArgs and SettingCriticalUrlMonitoringOutput values.
// You can construct a concrete instance of `SettingCriticalUrlMonitoringInput` via:
//
//	SettingCriticalUrlMonitoringArgs{...}
type SettingCriticalUrlMonitoringInput interface {
	pulumi.Input

	ToSettingCriticalUrlMonitoringOutput() SettingCriticalUrlMonitoringOutput
	ToSettingCriticalUrlMonitoringOutputWithContext(context.Context) SettingCriticalUrlMonitoringOutput
}

type SettingCriticalUrlMonitoringArgs struct {
	Enabled  pulumi.BoolPtrInput                           `pulumi:"enabled"`
	Monitors SettingCriticalUrlMonitoringMonitorArrayInput `pulumi:"monitors"`
}

func (SettingCriticalUrlMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCriticalUrlMonitoring)(nil)).Elem()
}

func (i SettingCriticalUrlMonitoringArgs) ToSettingCriticalUrlMonitoringOutput() SettingCriticalUrlMonitoringOutput {
	return i.ToSettingCriticalUrlMonitoringOutputWithContext(context.Background())
}

func (i SettingCriticalUrlMonitoringArgs) ToSettingCriticalUrlMonitoringOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCriticalUrlMonitoringOutput)
}

func (i SettingCriticalUrlMonitoringArgs) ToSettingCriticalUrlMonitoringPtrOutput() SettingCriticalUrlMonitoringPtrOutput {
	return i.ToSettingCriticalUrlMonitoringPtrOutputWithContext(context.Background())
}

func (i SettingCriticalUrlMonitoringArgs) ToSettingCriticalUrlMonitoringPtrOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCriticalUrlMonitoringOutput).ToSettingCriticalUrlMonitoringPtrOutputWithContext(ctx)
}

// SettingCriticalUrlMonitoringPtrInput is an input type that accepts SettingCriticalUrlMonitoringArgs, SettingCriticalUrlMonitoringPtr and SettingCriticalUrlMonitoringPtrOutput values.
// You can construct a concrete instance of `SettingCriticalUrlMonitoringPtrInput` via:
//
//	        SettingCriticalUrlMonitoringArgs{...}
//
//	or:
//
//	        nil
type SettingCriticalUrlMonitoringPtrInput interface {
	pulumi.Input

	ToSettingCriticalUrlMonitoringPtrOutput() SettingCriticalUrlMonitoringPtrOutput
	ToSettingCriticalUrlMonitoringPtrOutputWithContext(context.Context) SettingCriticalUrlMonitoringPtrOutput
}

type settingCriticalUrlMonitoringPtrType SettingCriticalUrlMonitoringArgs

func SettingCriticalUrlMonitoringPtr(v *SettingCriticalUrlMonitoringArgs) SettingCriticalUrlMonitoringPtrInput {
	return (*settingCriticalUrlMonitoringPtrType)(v)
}

func (*settingCriticalUrlMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCriticalUrlMonitoring)(nil)).Elem()
}

func (i *settingCriticalUrlMonitoringPtrType) ToSettingCriticalUrlMonitoringPtrOutput() SettingCriticalUrlMonitoringPtrOutput {
	return i.ToSettingCriticalUrlMonitoringPtrOutputWithContext(context.Background())
}

func (i *settingCriticalUrlMonitoringPtrType) ToSettingCriticalUrlMonitoringPtrOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCriticalUrlMonitoringPtrOutput)
}

type SettingCriticalUrlMonitoringOutput struct{ *pulumi.OutputState }

func (SettingCriticalUrlMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCriticalUrlMonitoring)(nil)).Elem()
}

func (o SettingCriticalUrlMonitoringOutput) ToSettingCriticalUrlMonitoringOutput() SettingCriticalUrlMonitoringOutput {
	return o
}

func (o SettingCriticalUrlMonitoringOutput) ToSettingCriticalUrlMonitoringOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringOutput {
	return o
}

func (o SettingCriticalUrlMonitoringOutput) ToSettingCriticalUrlMonitoringPtrOutput() SettingCriticalUrlMonitoringPtrOutput {
	return o.ToSettingCriticalUrlMonitoringPtrOutputWithContext(context.Background())
}

func (o SettingCriticalUrlMonitoringOutput) ToSettingCriticalUrlMonitoringPtrOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingCriticalUrlMonitoring) *SettingCriticalUrlMonitoring {
		return &v
	}).(SettingCriticalUrlMonitoringPtrOutput)
}

func (o SettingCriticalUrlMonitoringOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingCriticalUrlMonitoring) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o SettingCriticalUrlMonitoringOutput) Monitors() SettingCriticalUrlMonitoringMonitorArrayOutput {
	return o.ApplyT(func(v SettingCriticalUrlMonitoring) []SettingCriticalUrlMonitoringMonitor { return v.Monitors }).(SettingCriticalUrlMonitoringMonitorArrayOutput)
}

type SettingCriticalUrlMonitoringPtrOutput struct{ *pulumi.OutputState }

func (SettingCriticalUrlMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingCriticalUrlMonitoring)(nil)).Elem()
}

func (o SettingCriticalUrlMonitoringPtrOutput) ToSettingCriticalUrlMonitoringPtrOutput() SettingCriticalUrlMonitoringPtrOutput {
	return o
}

func (o SettingCriticalUrlMonitoringPtrOutput) ToSettingCriticalUrlMonitoringPtrOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringPtrOutput {
	return o
}

func (o SettingCriticalUrlMonitoringPtrOutput) Elem() SettingCriticalUrlMonitoringOutput {
	return o.ApplyT(func(v *SettingCriticalUrlMonitoring) SettingCriticalUrlMonitoring {
		if v != nil {
			return *v
		}
		var ret SettingCriticalUrlMonitoring
		return ret
	}).(SettingCriticalUrlMonitoringOutput)
}

func (o SettingCriticalUrlMonitoringPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingCriticalUrlMonitoring) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o SettingCriticalUrlMonitoringPtrOutput) Monitors() SettingCriticalUrlMonitoringMonitorArrayOutput {
	return o.ApplyT(func(v *SettingCriticalUrlMonitoring) []SettingCriticalUrlMonitoringMonitor {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(SettingCriticalUrlMonitoringMonitorArrayOutput)
}

type SettingCriticalUrlMonitoringMonitor struct {
	Url    *string `pulumi:"url"`
	VlanId *string `pulumi:"vlanId"`
}

// SettingCriticalUrlMonitoringMonitorInput is an input type that accepts SettingCriticalUrlMonitoringMonitorArgs and SettingCriticalUrlMonitoringMonitorOutput values.
// You can construct a concrete instance of `SettingCriticalUrlMonitoringMonitorInput` via:
//
//	SettingCriticalUrlMonitoringMonitorArgs{...}
type SettingCriticalUrlMonitoringMonitorInput interface {
	pulumi.Input

	ToSettingCriticalUrlMonitoringMonitorOutput() SettingCriticalUrlMonitoringMonitorOutput
	ToSettingCriticalUrlMonitoringMonitorOutputWithContext(context.Context) SettingCriticalUrlMonitoringMonitorOutput
}

type SettingCriticalUrlMonitoringMonitorArgs struct {
	Url    pulumi.StringPtrInput `pulumi:"url"`
	VlanId pulumi.StringPtrInput `pulumi:"vlanId"`
}

func (SettingCriticalUrlMonitoringMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCriticalUrlMonitoringMonitor)(nil)).Elem()
}

func (i SettingCriticalUrlMonitoringMonitorArgs) ToSettingCriticalUrlMonitoringMonitorOutput() SettingCriticalUrlMonitoringMonitorOutput {
	return i.ToSettingCriticalUrlMonitoringMonitorOutputWithContext(context.Background())
}

func (i SettingCriticalUrlMonitoringMonitorArgs) ToSettingCriticalUrlMonitoringMonitorOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCriticalUrlMonitoringMonitorOutput)
}

// SettingCriticalUrlMonitoringMonitorArrayInput is an input type that accepts SettingCriticalUrlMonitoringMonitorArray and SettingCriticalUrlMonitoringMonitorArrayOutput values.
// You can construct a concrete instance of `SettingCriticalUrlMonitoringMonitorArrayInput` via:
//
//	SettingCriticalUrlMonitoringMonitorArray{ SettingCriticalUrlMonitoringMonitorArgs{...} }
type SettingCriticalUrlMonitoringMonitorArrayInput interface {
	pulumi.Input

	ToSettingCriticalUrlMonitoringMonitorArrayOutput() SettingCriticalUrlMonitoringMonitorArrayOutput
	ToSettingCriticalUrlMonitoringMonitorArrayOutputWithContext(context.Context) SettingCriticalUrlMonitoringMonitorArrayOutput
}

type SettingCriticalUrlMonitoringMonitorArray []SettingCriticalUrlMonitoringMonitorInput

func (SettingCriticalUrlMonitoringMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingCriticalUrlMonitoringMonitor)(nil)).Elem()
}

func (i SettingCriticalUrlMonitoringMonitorArray) ToSettingCriticalUrlMonitoringMonitorArrayOutput() SettingCriticalUrlMonitoringMonitorArrayOutput {
	return i.ToSettingCriticalUrlMonitoringMonitorArrayOutputWithContext(context.Background())
}

func (i SettingCriticalUrlMonitoringMonitorArray) ToSettingCriticalUrlMonitoringMonitorArrayOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingCriticalUrlMonitoringMonitorArrayOutput)
}

type SettingCriticalUrlMonitoringMonitorOutput struct{ *pulumi.OutputState }

func (SettingCriticalUrlMonitoringMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingCriticalUrlMonitoringMonitor)(nil)).Elem()
}

func (o SettingCriticalUrlMonitoringMonitorOutput) ToSettingCriticalUrlMonitoringMonitorOutput() SettingCriticalUrlMonitoringMonitorOutput {
	return o
}

func (o SettingCriticalUrlMonitoringMonitorOutput) ToSettingCriticalUrlMonitoringMonitorOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringMonitorOutput {
	return o
}

func (o SettingCriticalUrlMonitoringMonitorOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingCriticalUrlMonitoringMonitor) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o SettingCriticalUrlMonitoringMonitorOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingCriticalUrlMonitoringMonitor) *string { return v.VlanId }).(pulumi.StringPtrOutput)
}

type SettingCriticalUrlMonitoringMonitorArrayOutput struct{ *pulumi.OutputState }

func (SettingCriticalUrlMonitoringMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingCriticalUrlMonitoringMonitor)(nil)).Elem()
}

func (o SettingCriticalUrlMonitoringMonitorArrayOutput) ToSettingCriticalUrlMonitoringMonitorArrayOutput() SettingCriticalUrlMonitoringMonitorArrayOutput {
	return o
}

func (o SettingCriticalUrlMonitoringMonitorArrayOutput) ToSettingCriticalUrlMonitoringMonitorArrayOutputWithContext(ctx context.Context) SettingCriticalUrlMonitoringMonitorArrayOutput {
	return o
}

func (o SettingCriticalUrlMonitoringMonitorArrayOutput) Index(i pulumi.IntInput) SettingCriticalUrlMonitoringMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingCriticalUrlMonitoringMonitor {
		return vs[0].([]SettingCriticalUrlMonitoringMonitor)[vs[1].(int)]
	}).(SettingCriticalUrlMonitoringMonitorOutput)
}

type SettingEngagement struct {
	DwellTagNames *SettingEngagementDwellTagNames `pulumi:"dwellTagNames"`
	// add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
	DwellTags *SettingEngagementDwellTags `pulumi:"dwellTags"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours *SettingEngagementHours `pulumi:"hours"`
	// max time, default is 43200(12h), max is 68400 (18h)
	MaxDwell *int `pulumi:"maxDwell"`
	// min time
	MinDwell *int `pulumi:"minDwell"`
}

// SettingEngagementInput is an input type that accepts SettingEngagementArgs and SettingEngagementOutput values.
// You can construct a concrete instance of `SettingEngagementInput` via:
//
//	SettingEngagementArgs{...}
type SettingEngagementInput interface {
	pulumi.Input

	ToSettingEngagementOutput() SettingEngagementOutput
	ToSettingEngagementOutputWithContext(context.Context) SettingEngagementOutput
}

type SettingEngagementArgs struct {
	DwellTagNames SettingEngagementDwellTagNamesPtrInput `pulumi:"dwellTagNames"`
	// add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
	DwellTags SettingEngagementDwellTagsPtrInput `pulumi:"dwellTags"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours SettingEngagementHoursPtrInput `pulumi:"hours"`
	// max time, default is 43200(12h), max is 68400 (18h)
	MaxDwell pulumi.IntPtrInput `pulumi:"maxDwell"`
	// min time
	MinDwell pulumi.IntPtrInput `pulumi:"minDwell"`
}

func (SettingEngagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagement)(nil)).Elem()
}

func (i SettingEngagementArgs) ToSettingEngagementOutput() SettingEngagementOutput {
	return i.ToSettingEngagementOutputWithContext(context.Background())
}

func (i SettingEngagementArgs) ToSettingEngagementOutputWithContext(ctx context.Context) SettingEngagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementOutput)
}

func (i SettingEngagementArgs) ToSettingEngagementPtrOutput() SettingEngagementPtrOutput {
	return i.ToSettingEngagementPtrOutputWithContext(context.Background())
}

func (i SettingEngagementArgs) ToSettingEngagementPtrOutputWithContext(ctx context.Context) SettingEngagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementOutput).ToSettingEngagementPtrOutputWithContext(ctx)
}

// SettingEngagementPtrInput is an input type that accepts SettingEngagementArgs, SettingEngagementPtr and SettingEngagementPtrOutput values.
// You can construct a concrete instance of `SettingEngagementPtrInput` via:
//
//	        SettingEngagementArgs{...}
//
//	or:
//
//	        nil
type SettingEngagementPtrInput interface {
	pulumi.Input

	ToSettingEngagementPtrOutput() SettingEngagementPtrOutput
	ToSettingEngagementPtrOutputWithContext(context.Context) SettingEngagementPtrOutput
}

type settingEngagementPtrType SettingEngagementArgs

func SettingEngagementPtr(v *SettingEngagementArgs) SettingEngagementPtrInput {
	return (*settingEngagementPtrType)(v)
}

func (*settingEngagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagement)(nil)).Elem()
}

func (i *settingEngagementPtrType) ToSettingEngagementPtrOutput() SettingEngagementPtrOutput {
	return i.ToSettingEngagementPtrOutputWithContext(context.Background())
}

func (i *settingEngagementPtrType) ToSettingEngagementPtrOutputWithContext(ctx context.Context) SettingEngagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementPtrOutput)
}

type SettingEngagementOutput struct{ *pulumi.OutputState }

func (SettingEngagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagement)(nil)).Elem()
}

func (o SettingEngagementOutput) ToSettingEngagementOutput() SettingEngagementOutput {
	return o
}

func (o SettingEngagementOutput) ToSettingEngagementOutputWithContext(ctx context.Context) SettingEngagementOutput {
	return o
}

func (o SettingEngagementOutput) ToSettingEngagementPtrOutput() SettingEngagementPtrOutput {
	return o.ToSettingEngagementPtrOutputWithContext(context.Background())
}

func (o SettingEngagementOutput) ToSettingEngagementPtrOutputWithContext(ctx context.Context) SettingEngagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingEngagement) *SettingEngagement {
		return &v
	}).(SettingEngagementPtrOutput)
}

func (o SettingEngagementOutput) DwellTagNames() SettingEngagementDwellTagNamesPtrOutput {
	return o.ApplyT(func(v SettingEngagement) *SettingEngagementDwellTagNames { return v.DwellTagNames }).(SettingEngagementDwellTagNamesPtrOutput)
}

// add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
func (o SettingEngagementOutput) DwellTags() SettingEngagementDwellTagsPtrOutput {
	return o.ApplyT(func(v SettingEngagement) *SettingEngagementDwellTags { return v.DwellTags }).(SettingEngagementDwellTagsPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o SettingEngagementOutput) Hours() SettingEngagementHoursPtrOutput {
	return o.ApplyT(func(v SettingEngagement) *SettingEngagementHours { return v.Hours }).(SettingEngagementHoursPtrOutput)
}

// max time, default is 43200(12h), max is 68400 (18h)
func (o SettingEngagementOutput) MaxDwell() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingEngagement) *int { return v.MaxDwell }).(pulumi.IntPtrOutput)
}

// min time
func (o SettingEngagementOutput) MinDwell() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingEngagement) *int { return v.MinDwell }).(pulumi.IntPtrOutput)
}

type SettingEngagementPtrOutput struct{ *pulumi.OutputState }

func (SettingEngagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagement)(nil)).Elem()
}

func (o SettingEngagementPtrOutput) ToSettingEngagementPtrOutput() SettingEngagementPtrOutput {
	return o
}

func (o SettingEngagementPtrOutput) ToSettingEngagementPtrOutputWithContext(ctx context.Context) SettingEngagementPtrOutput {
	return o
}

func (o SettingEngagementPtrOutput) Elem() SettingEngagementOutput {
	return o.ApplyT(func(v *SettingEngagement) SettingEngagement {
		if v != nil {
			return *v
		}
		var ret SettingEngagement
		return ret
	}).(SettingEngagementOutput)
}

func (o SettingEngagementPtrOutput) DwellTagNames() SettingEngagementDwellTagNamesPtrOutput {
	return o.ApplyT(func(v *SettingEngagement) *SettingEngagementDwellTagNames {
		if v == nil {
			return nil
		}
		return v.DwellTagNames
	}).(SettingEngagementDwellTagNamesPtrOutput)
}

// add tags to visits within the duration (in seconds), available tags (passerby, bounce, engaged, stationed)
func (o SettingEngagementPtrOutput) DwellTags() SettingEngagementDwellTagsPtrOutput {
	return o.ApplyT(func(v *SettingEngagement) *SettingEngagementDwellTags {
		if v == nil {
			return nil
		}
		return v.DwellTags
	}).(SettingEngagementDwellTagsPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o SettingEngagementPtrOutput) Hours() SettingEngagementHoursPtrOutput {
	return o.ApplyT(func(v *SettingEngagement) *SettingEngagementHours {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(SettingEngagementHoursPtrOutput)
}

// max time, default is 43200(12h), max is 68400 (18h)
func (o SettingEngagementPtrOutput) MaxDwell() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingEngagement) *int {
		if v == nil {
			return nil
		}
		return v.MaxDwell
	}).(pulumi.IntPtrOutput)
}

// min time
func (o SettingEngagementPtrOutput) MinDwell() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingEngagement) *int {
		if v == nil {
			return nil
		}
		return v.MinDwell
	}).(pulumi.IntPtrOutput)
}

type SettingEngagementDwellTagNames struct {
	Bounce    *string `pulumi:"bounce"`
	Engaged   *string `pulumi:"engaged"`
	Passerby  *string `pulumi:"passerby"`
	Stationed *string `pulumi:"stationed"`
}

// SettingEngagementDwellTagNamesInput is an input type that accepts SettingEngagementDwellTagNamesArgs and SettingEngagementDwellTagNamesOutput values.
// You can construct a concrete instance of `SettingEngagementDwellTagNamesInput` via:
//
//	SettingEngagementDwellTagNamesArgs{...}
type SettingEngagementDwellTagNamesInput interface {
	pulumi.Input

	ToSettingEngagementDwellTagNamesOutput() SettingEngagementDwellTagNamesOutput
	ToSettingEngagementDwellTagNamesOutputWithContext(context.Context) SettingEngagementDwellTagNamesOutput
}

type SettingEngagementDwellTagNamesArgs struct {
	Bounce    pulumi.StringPtrInput `pulumi:"bounce"`
	Engaged   pulumi.StringPtrInput `pulumi:"engaged"`
	Passerby  pulumi.StringPtrInput `pulumi:"passerby"`
	Stationed pulumi.StringPtrInput `pulumi:"stationed"`
}

func (SettingEngagementDwellTagNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementDwellTagNames)(nil)).Elem()
}

func (i SettingEngagementDwellTagNamesArgs) ToSettingEngagementDwellTagNamesOutput() SettingEngagementDwellTagNamesOutput {
	return i.ToSettingEngagementDwellTagNamesOutputWithContext(context.Background())
}

func (i SettingEngagementDwellTagNamesArgs) ToSettingEngagementDwellTagNamesOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagNamesOutput)
}

func (i SettingEngagementDwellTagNamesArgs) ToSettingEngagementDwellTagNamesPtrOutput() SettingEngagementDwellTagNamesPtrOutput {
	return i.ToSettingEngagementDwellTagNamesPtrOutputWithContext(context.Background())
}

func (i SettingEngagementDwellTagNamesArgs) ToSettingEngagementDwellTagNamesPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagNamesOutput).ToSettingEngagementDwellTagNamesPtrOutputWithContext(ctx)
}

// SettingEngagementDwellTagNamesPtrInput is an input type that accepts SettingEngagementDwellTagNamesArgs, SettingEngagementDwellTagNamesPtr and SettingEngagementDwellTagNamesPtrOutput values.
// You can construct a concrete instance of `SettingEngagementDwellTagNamesPtrInput` via:
//
//	        SettingEngagementDwellTagNamesArgs{...}
//
//	or:
//
//	        nil
type SettingEngagementDwellTagNamesPtrInput interface {
	pulumi.Input

	ToSettingEngagementDwellTagNamesPtrOutput() SettingEngagementDwellTagNamesPtrOutput
	ToSettingEngagementDwellTagNamesPtrOutputWithContext(context.Context) SettingEngagementDwellTagNamesPtrOutput
}

type settingEngagementDwellTagNamesPtrType SettingEngagementDwellTagNamesArgs

func SettingEngagementDwellTagNamesPtr(v *SettingEngagementDwellTagNamesArgs) SettingEngagementDwellTagNamesPtrInput {
	return (*settingEngagementDwellTagNamesPtrType)(v)
}

func (*settingEngagementDwellTagNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementDwellTagNames)(nil)).Elem()
}

func (i *settingEngagementDwellTagNamesPtrType) ToSettingEngagementDwellTagNamesPtrOutput() SettingEngagementDwellTagNamesPtrOutput {
	return i.ToSettingEngagementDwellTagNamesPtrOutputWithContext(context.Background())
}

func (i *settingEngagementDwellTagNamesPtrType) ToSettingEngagementDwellTagNamesPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagNamesPtrOutput)
}

type SettingEngagementDwellTagNamesOutput struct{ *pulumi.OutputState }

func (SettingEngagementDwellTagNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementDwellTagNames)(nil)).Elem()
}

func (o SettingEngagementDwellTagNamesOutput) ToSettingEngagementDwellTagNamesOutput() SettingEngagementDwellTagNamesOutput {
	return o
}

func (o SettingEngagementDwellTagNamesOutput) ToSettingEngagementDwellTagNamesOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesOutput {
	return o
}

func (o SettingEngagementDwellTagNamesOutput) ToSettingEngagementDwellTagNamesPtrOutput() SettingEngagementDwellTagNamesPtrOutput {
	return o.ToSettingEngagementDwellTagNamesPtrOutputWithContext(context.Background())
}

func (o SettingEngagementDwellTagNamesOutput) ToSettingEngagementDwellTagNamesPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingEngagementDwellTagNames) *SettingEngagementDwellTagNames {
		return &v
	}).(SettingEngagementDwellTagNamesPtrOutput)
}

func (o SettingEngagementDwellTagNamesOutput) Bounce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTagNames) *string { return v.Bounce }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesOutput) Engaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTagNames) *string { return v.Engaged }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesOutput) Passerby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTagNames) *string { return v.Passerby }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesOutput) Stationed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTagNames) *string { return v.Stationed }).(pulumi.StringPtrOutput)
}

type SettingEngagementDwellTagNamesPtrOutput struct{ *pulumi.OutputState }

func (SettingEngagementDwellTagNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementDwellTagNames)(nil)).Elem()
}

func (o SettingEngagementDwellTagNamesPtrOutput) ToSettingEngagementDwellTagNamesPtrOutput() SettingEngagementDwellTagNamesPtrOutput {
	return o
}

func (o SettingEngagementDwellTagNamesPtrOutput) ToSettingEngagementDwellTagNamesPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagNamesPtrOutput {
	return o
}

func (o SettingEngagementDwellTagNamesPtrOutput) Elem() SettingEngagementDwellTagNamesOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTagNames) SettingEngagementDwellTagNames {
		if v != nil {
			return *v
		}
		var ret SettingEngagementDwellTagNames
		return ret
	}).(SettingEngagementDwellTagNamesOutput)
}

func (o SettingEngagementDwellTagNamesPtrOutput) Bounce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTagNames) *string {
		if v == nil {
			return nil
		}
		return v.Bounce
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesPtrOutput) Engaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTagNames) *string {
		if v == nil {
			return nil
		}
		return v.Engaged
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesPtrOutput) Passerby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTagNames) *string {
		if v == nil {
			return nil
		}
		return v.Passerby
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagNamesPtrOutput) Stationed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTagNames) *string {
		if v == nil {
			return nil
		}
		return v.Stationed
	}).(pulumi.StringPtrOutput)
}

type SettingEngagementDwellTags struct {
	Bounce    *string `pulumi:"bounce"`
	Engaged   *string `pulumi:"engaged"`
	Passerby  *string `pulumi:"passerby"`
	Stationed *string `pulumi:"stationed"`
}

// SettingEngagementDwellTagsInput is an input type that accepts SettingEngagementDwellTagsArgs and SettingEngagementDwellTagsOutput values.
// You can construct a concrete instance of `SettingEngagementDwellTagsInput` via:
//
//	SettingEngagementDwellTagsArgs{...}
type SettingEngagementDwellTagsInput interface {
	pulumi.Input

	ToSettingEngagementDwellTagsOutput() SettingEngagementDwellTagsOutput
	ToSettingEngagementDwellTagsOutputWithContext(context.Context) SettingEngagementDwellTagsOutput
}

type SettingEngagementDwellTagsArgs struct {
	Bounce    pulumi.StringPtrInput `pulumi:"bounce"`
	Engaged   pulumi.StringPtrInput `pulumi:"engaged"`
	Passerby  pulumi.StringPtrInput `pulumi:"passerby"`
	Stationed pulumi.StringPtrInput `pulumi:"stationed"`
}

func (SettingEngagementDwellTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementDwellTags)(nil)).Elem()
}

func (i SettingEngagementDwellTagsArgs) ToSettingEngagementDwellTagsOutput() SettingEngagementDwellTagsOutput {
	return i.ToSettingEngagementDwellTagsOutputWithContext(context.Background())
}

func (i SettingEngagementDwellTagsArgs) ToSettingEngagementDwellTagsOutputWithContext(ctx context.Context) SettingEngagementDwellTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagsOutput)
}

func (i SettingEngagementDwellTagsArgs) ToSettingEngagementDwellTagsPtrOutput() SettingEngagementDwellTagsPtrOutput {
	return i.ToSettingEngagementDwellTagsPtrOutputWithContext(context.Background())
}

func (i SettingEngagementDwellTagsArgs) ToSettingEngagementDwellTagsPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagsOutput).ToSettingEngagementDwellTagsPtrOutputWithContext(ctx)
}

// SettingEngagementDwellTagsPtrInput is an input type that accepts SettingEngagementDwellTagsArgs, SettingEngagementDwellTagsPtr and SettingEngagementDwellTagsPtrOutput values.
// You can construct a concrete instance of `SettingEngagementDwellTagsPtrInput` via:
//
//	        SettingEngagementDwellTagsArgs{...}
//
//	or:
//
//	        nil
type SettingEngagementDwellTagsPtrInput interface {
	pulumi.Input

	ToSettingEngagementDwellTagsPtrOutput() SettingEngagementDwellTagsPtrOutput
	ToSettingEngagementDwellTagsPtrOutputWithContext(context.Context) SettingEngagementDwellTagsPtrOutput
}

type settingEngagementDwellTagsPtrType SettingEngagementDwellTagsArgs

func SettingEngagementDwellTagsPtr(v *SettingEngagementDwellTagsArgs) SettingEngagementDwellTagsPtrInput {
	return (*settingEngagementDwellTagsPtrType)(v)
}

func (*settingEngagementDwellTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementDwellTags)(nil)).Elem()
}

func (i *settingEngagementDwellTagsPtrType) ToSettingEngagementDwellTagsPtrOutput() SettingEngagementDwellTagsPtrOutput {
	return i.ToSettingEngagementDwellTagsPtrOutputWithContext(context.Background())
}

func (i *settingEngagementDwellTagsPtrType) ToSettingEngagementDwellTagsPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementDwellTagsPtrOutput)
}

type SettingEngagementDwellTagsOutput struct{ *pulumi.OutputState }

func (SettingEngagementDwellTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementDwellTags)(nil)).Elem()
}

func (o SettingEngagementDwellTagsOutput) ToSettingEngagementDwellTagsOutput() SettingEngagementDwellTagsOutput {
	return o
}

func (o SettingEngagementDwellTagsOutput) ToSettingEngagementDwellTagsOutputWithContext(ctx context.Context) SettingEngagementDwellTagsOutput {
	return o
}

func (o SettingEngagementDwellTagsOutput) ToSettingEngagementDwellTagsPtrOutput() SettingEngagementDwellTagsPtrOutput {
	return o.ToSettingEngagementDwellTagsPtrOutputWithContext(context.Background())
}

func (o SettingEngagementDwellTagsOutput) ToSettingEngagementDwellTagsPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingEngagementDwellTags) *SettingEngagementDwellTags {
		return &v
	}).(SettingEngagementDwellTagsPtrOutput)
}

func (o SettingEngagementDwellTagsOutput) Bounce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTags) *string { return v.Bounce }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsOutput) Engaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTags) *string { return v.Engaged }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsOutput) Passerby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTags) *string { return v.Passerby }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsOutput) Stationed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementDwellTags) *string { return v.Stationed }).(pulumi.StringPtrOutput)
}

type SettingEngagementDwellTagsPtrOutput struct{ *pulumi.OutputState }

func (SettingEngagementDwellTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementDwellTags)(nil)).Elem()
}

func (o SettingEngagementDwellTagsPtrOutput) ToSettingEngagementDwellTagsPtrOutput() SettingEngagementDwellTagsPtrOutput {
	return o
}

func (o SettingEngagementDwellTagsPtrOutput) ToSettingEngagementDwellTagsPtrOutputWithContext(ctx context.Context) SettingEngagementDwellTagsPtrOutput {
	return o
}

func (o SettingEngagementDwellTagsPtrOutput) Elem() SettingEngagementDwellTagsOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTags) SettingEngagementDwellTags {
		if v != nil {
			return *v
		}
		var ret SettingEngagementDwellTags
		return ret
	}).(SettingEngagementDwellTagsOutput)
}

func (o SettingEngagementDwellTagsPtrOutput) Bounce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTags) *string {
		if v == nil {
			return nil
		}
		return v.Bounce
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsPtrOutput) Engaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTags) *string {
		if v == nil {
			return nil
		}
		return v.Engaged
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsPtrOutput) Passerby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTags) *string {
		if v == nil {
			return nil
		}
		return v.Passerby
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementDwellTagsPtrOutput) Stationed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementDwellTags) *string {
		if v == nil {
			return nil
		}
		return v.Stationed
	}).(pulumi.StringPtrOutput)
}

type SettingEngagementHours struct {
	Fri *string `pulumi:"fri"`
	Mon *string `pulumi:"mon"`
	Sat *string `pulumi:"sat"`
	Sun *string `pulumi:"sun"`
	Thu *string `pulumi:"thu"`
	Tue *string `pulumi:"tue"`
	Wed *string `pulumi:"wed"`
}

// SettingEngagementHoursInput is an input type that accepts SettingEngagementHoursArgs and SettingEngagementHoursOutput values.
// You can construct a concrete instance of `SettingEngagementHoursInput` via:
//
//	SettingEngagementHoursArgs{...}
type SettingEngagementHoursInput interface {
	pulumi.Input

	ToSettingEngagementHoursOutput() SettingEngagementHoursOutput
	ToSettingEngagementHoursOutputWithContext(context.Context) SettingEngagementHoursOutput
}

type SettingEngagementHoursArgs struct {
	Fri pulumi.StringPtrInput `pulumi:"fri"`
	Mon pulumi.StringPtrInput `pulumi:"mon"`
	Sat pulumi.StringPtrInput `pulumi:"sat"`
	Sun pulumi.StringPtrInput `pulumi:"sun"`
	Thu pulumi.StringPtrInput `pulumi:"thu"`
	Tue pulumi.StringPtrInput `pulumi:"tue"`
	Wed pulumi.StringPtrInput `pulumi:"wed"`
}

func (SettingEngagementHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementHours)(nil)).Elem()
}

func (i SettingEngagementHoursArgs) ToSettingEngagementHoursOutput() SettingEngagementHoursOutput {
	return i.ToSettingEngagementHoursOutputWithContext(context.Background())
}

func (i SettingEngagementHoursArgs) ToSettingEngagementHoursOutputWithContext(ctx context.Context) SettingEngagementHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementHoursOutput)
}

func (i SettingEngagementHoursArgs) ToSettingEngagementHoursPtrOutput() SettingEngagementHoursPtrOutput {
	return i.ToSettingEngagementHoursPtrOutputWithContext(context.Background())
}

func (i SettingEngagementHoursArgs) ToSettingEngagementHoursPtrOutputWithContext(ctx context.Context) SettingEngagementHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementHoursOutput).ToSettingEngagementHoursPtrOutputWithContext(ctx)
}

// SettingEngagementHoursPtrInput is an input type that accepts SettingEngagementHoursArgs, SettingEngagementHoursPtr and SettingEngagementHoursPtrOutput values.
// You can construct a concrete instance of `SettingEngagementHoursPtrInput` via:
//
//	        SettingEngagementHoursArgs{...}
//
//	or:
//
//	        nil
type SettingEngagementHoursPtrInput interface {
	pulumi.Input

	ToSettingEngagementHoursPtrOutput() SettingEngagementHoursPtrOutput
	ToSettingEngagementHoursPtrOutputWithContext(context.Context) SettingEngagementHoursPtrOutput
}

type settingEngagementHoursPtrType SettingEngagementHoursArgs

func SettingEngagementHoursPtr(v *SettingEngagementHoursArgs) SettingEngagementHoursPtrInput {
	return (*settingEngagementHoursPtrType)(v)
}

func (*settingEngagementHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementHours)(nil)).Elem()
}

func (i *settingEngagementHoursPtrType) ToSettingEngagementHoursPtrOutput() SettingEngagementHoursPtrOutput {
	return i.ToSettingEngagementHoursPtrOutputWithContext(context.Background())
}

func (i *settingEngagementHoursPtrType) ToSettingEngagementHoursPtrOutputWithContext(ctx context.Context) SettingEngagementHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingEngagementHoursPtrOutput)
}

type SettingEngagementHoursOutput struct{ *pulumi.OutputState }

func (SettingEngagementHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingEngagementHours)(nil)).Elem()
}

func (o SettingEngagementHoursOutput) ToSettingEngagementHoursOutput() SettingEngagementHoursOutput {
	return o
}

func (o SettingEngagementHoursOutput) ToSettingEngagementHoursOutputWithContext(ctx context.Context) SettingEngagementHoursOutput {
	return o
}

func (o SettingEngagementHoursOutput) ToSettingEngagementHoursPtrOutput() SettingEngagementHoursPtrOutput {
	return o.ToSettingEngagementHoursPtrOutputWithContext(context.Background())
}

func (o SettingEngagementHoursOutput) ToSettingEngagementHoursPtrOutputWithContext(ctx context.Context) SettingEngagementHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingEngagementHours) *SettingEngagementHours {
		return &v
	}).(SettingEngagementHoursPtrOutput)
}

func (o SettingEngagementHoursOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Fri }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Mon }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Sat }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Sun }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Thu }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Tue }).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingEngagementHours) *string { return v.Wed }).(pulumi.StringPtrOutput)
}

type SettingEngagementHoursPtrOutput struct{ *pulumi.OutputState }

func (SettingEngagementHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingEngagementHours)(nil)).Elem()
}

func (o SettingEngagementHoursPtrOutput) ToSettingEngagementHoursPtrOutput() SettingEngagementHoursPtrOutput {
	return o
}

func (o SettingEngagementHoursPtrOutput) ToSettingEngagementHoursPtrOutputWithContext(ctx context.Context) SettingEngagementHoursPtrOutput {
	return o
}

func (o SettingEngagementHoursPtrOutput) Elem() SettingEngagementHoursOutput {
	return o.ApplyT(func(v *SettingEngagementHours) SettingEngagementHours {
		if v != nil {
			return *v
		}
		var ret SettingEngagementHours
		return ret
	}).(SettingEngagementHoursOutput)
}

func (o SettingEngagementHoursPtrOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Fri
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Mon
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Sat
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Sun
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Thu
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Tue
	}).(pulumi.StringPtrOutput)
}

func (o SettingEngagementHoursPtrOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingEngagementHours) *string {
		if v == nil {
			return nil
		}
		return v.Wed
	}).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmt struct {
	// for SSR only, as direct root access is not allowed
	AdminSshkeys []string                      `pulumi:"adminSshkeys"`
	AppProbing   *SettingGatewayMgmtAppProbing `pulumi:"appProbing"`
	// consumes uplink bandwidth, requires WA license
	AppUsage            *bool                                  `pulumi:"appUsage"`
	AutoSignatureUpdate *SettingGatewayMgmtAutoSignatureUpdate `pulumi:"autoSignatureUpdate"`
	// he rollback timer for commit confirmed
	ConfigRevertTimer *int `pulumi:"configRevertTimer"`
	// for both SSR and SRX disable console port
	DisableConsole *bool `pulumi:"disableConsole"`
	// for both SSR and SRX disable management interface
	DisableOob *bool    `pulumi:"disableOob"`
	ProbeHosts []string `pulumi:"probeHosts"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe *SettingGatewayMgmtProtectRe `pulumi:"protectRe"`
	// for SRX only
	RootPassword               *string `pulumi:"rootPassword"`
	SecurityLogSourceAddress   *string `pulumi:"securityLogSourceAddress"`
	SecurityLogSourceInterface *string `pulumi:"securityLogSourceInterface"`
}

// SettingGatewayMgmtInput is an input type that accepts SettingGatewayMgmtArgs and SettingGatewayMgmtOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtInput` via:
//
//	SettingGatewayMgmtArgs{...}
type SettingGatewayMgmtInput interface {
	pulumi.Input

	ToSettingGatewayMgmtOutput() SettingGatewayMgmtOutput
	ToSettingGatewayMgmtOutputWithContext(context.Context) SettingGatewayMgmtOutput
}

type SettingGatewayMgmtArgs struct {
	// for SSR only, as direct root access is not allowed
	AdminSshkeys pulumi.StringArrayInput              `pulumi:"adminSshkeys"`
	AppProbing   SettingGatewayMgmtAppProbingPtrInput `pulumi:"appProbing"`
	// consumes uplink bandwidth, requires WA license
	AppUsage            pulumi.BoolPtrInput                           `pulumi:"appUsage"`
	AutoSignatureUpdate SettingGatewayMgmtAutoSignatureUpdatePtrInput `pulumi:"autoSignatureUpdate"`
	// he rollback timer for commit confirmed
	ConfigRevertTimer pulumi.IntPtrInput `pulumi:"configRevertTimer"`
	// for both SSR and SRX disable console port
	DisableConsole pulumi.BoolPtrInput `pulumi:"disableConsole"`
	// for both SSR and SRX disable management interface
	DisableOob pulumi.BoolPtrInput     `pulumi:"disableOob"`
	ProbeHosts pulumi.StringArrayInput `pulumi:"probeHosts"`
	// restrict inbound-traffic to host
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
	ProtectRe SettingGatewayMgmtProtectRePtrInput `pulumi:"protectRe"`
	// for SRX only
	RootPassword               pulumi.StringPtrInput `pulumi:"rootPassword"`
	SecurityLogSourceAddress   pulumi.StringPtrInput `pulumi:"securityLogSourceAddress"`
	SecurityLogSourceInterface pulumi.StringPtrInput `pulumi:"securityLogSourceInterface"`
}

func (SettingGatewayMgmtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmt)(nil)).Elem()
}

func (i SettingGatewayMgmtArgs) ToSettingGatewayMgmtOutput() SettingGatewayMgmtOutput {
	return i.ToSettingGatewayMgmtOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtArgs) ToSettingGatewayMgmtOutputWithContext(ctx context.Context) SettingGatewayMgmtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtOutput)
}

func (i SettingGatewayMgmtArgs) ToSettingGatewayMgmtPtrOutput() SettingGatewayMgmtPtrOutput {
	return i.ToSettingGatewayMgmtPtrOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtArgs) ToSettingGatewayMgmtPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtOutput).ToSettingGatewayMgmtPtrOutputWithContext(ctx)
}

// SettingGatewayMgmtPtrInput is an input type that accepts SettingGatewayMgmtArgs, SettingGatewayMgmtPtr and SettingGatewayMgmtPtrOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtPtrInput` via:
//
//	        SettingGatewayMgmtArgs{...}
//
//	or:
//
//	        nil
type SettingGatewayMgmtPtrInput interface {
	pulumi.Input

	ToSettingGatewayMgmtPtrOutput() SettingGatewayMgmtPtrOutput
	ToSettingGatewayMgmtPtrOutputWithContext(context.Context) SettingGatewayMgmtPtrOutput
}

type settingGatewayMgmtPtrType SettingGatewayMgmtArgs

func SettingGatewayMgmtPtr(v *SettingGatewayMgmtArgs) SettingGatewayMgmtPtrInput {
	return (*settingGatewayMgmtPtrType)(v)
}

func (*settingGatewayMgmtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmt)(nil)).Elem()
}

func (i *settingGatewayMgmtPtrType) ToSettingGatewayMgmtPtrOutput() SettingGatewayMgmtPtrOutput {
	return i.ToSettingGatewayMgmtPtrOutputWithContext(context.Background())
}

func (i *settingGatewayMgmtPtrType) ToSettingGatewayMgmtPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtPtrOutput)
}

type SettingGatewayMgmtOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmt)(nil)).Elem()
}

func (o SettingGatewayMgmtOutput) ToSettingGatewayMgmtOutput() SettingGatewayMgmtOutput {
	return o
}

func (o SettingGatewayMgmtOutput) ToSettingGatewayMgmtOutputWithContext(ctx context.Context) SettingGatewayMgmtOutput {
	return o
}

func (o SettingGatewayMgmtOutput) ToSettingGatewayMgmtPtrOutput() SettingGatewayMgmtPtrOutput {
	return o.ToSettingGatewayMgmtPtrOutputWithContext(context.Background())
}

func (o SettingGatewayMgmtOutput) ToSettingGatewayMgmtPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingGatewayMgmt) *SettingGatewayMgmt {
		return &v
	}).(SettingGatewayMgmtPtrOutput)
}

// for SSR only, as direct root access is not allowed
func (o SettingGatewayMgmtOutput) AdminSshkeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) []string { return v.AdminSshkeys }).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtOutput) AppProbing() SettingGatewayMgmtAppProbingPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *SettingGatewayMgmtAppProbing { return v.AppProbing }).(SettingGatewayMgmtAppProbingPtrOutput)
}

// consumes uplink bandwidth, requires WA license
func (o SettingGatewayMgmtOutput) AppUsage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *bool { return v.AppUsage }).(pulumi.BoolPtrOutput)
}

func (o SettingGatewayMgmtOutput) AutoSignatureUpdate() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *SettingGatewayMgmtAutoSignatureUpdate { return v.AutoSignatureUpdate }).(SettingGatewayMgmtAutoSignatureUpdatePtrOutput)
}

// he rollback timer for commit confirmed
func (o SettingGatewayMgmtOutput) ConfigRevertTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *int { return v.ConfigRevertTimer }).(pulumi.IntPtrOutput)
}

// for both SSR and SRX disable console port
func (o SettingGatewayMgmtOutput) DisableConsole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *bool { return v.DisableConsole }).(pulumi.BoolPtrOutput)
}

// for both SSR and SRX disable management interface
func (o SettingGatewayMgmtOutput) DisableOob() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *bool { return v.DisableOob }).(pulumi.BoolPtrOutput)
}

func (o SettingGatewayMgmtOutput) ProbeHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) []string { return v.ProbeHosts }).(pulumi.StringArrayOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o SettingGatewayMgmtOutput) ProtectRe() SettingGatewayMgmtProtectRePtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *SettingGatewayMgmtProtectRe { return v.ProtectRe }).(SettingGatewayMgmtProtectRePtrOutput)
}

// for SRX only
func (o SettingGatewayMgmtOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *string { return v.RootPassword }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtOutput) SecurityLogSourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *string { return v.SecurityLogSourceAddress }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtOutput) SecurityLogSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmt) *string { return v.SecurityLogSourceInterface }).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmtPtrOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmt)(nil)).Elem()
}

func (o SettingGatewayMgmtPtrOutput) ToSettingGatewayMgmtPtrOutput() SettingGatewayMgmtPtrOutput {
	return o
}

func (o SettingGatewayMgmtPtrOutput) ToSettingGatewayMgmtPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtPtrOutput {
	return o
}

func (o SettingGatewayMgmtPtrOutput) Elem() SettingGatewayMgmtOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) SettingGatewayMgmt {
		if v != nil {
			return *v
		}
		var ret SettingGatewayMgmt
		return ret
	}).(SettingGatewayMgmtOutput)
}

// for SSR only, as direct root access is not allowed
func (o SettingGatewayMgmtPtrOutput) AdminSshkeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) []string {
		if v == nil {
			return nil
		}
		return v.AdminSshkeys
	}).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtPtrOutput) AppProbing() SettingGatewayMgmtAppProbingPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *SettingGatewayMgmtAppProbing {
		if v == nil {
			return nil
		}
		return v.AppProbing
	}).(SettingGatewayMgmtAppProbingPtrOutput)
}

// consumes uplink bandwidth, requires WA license
func (o SettingGatewayMgmtPtrOutput) AppUsage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.AppUsage
	}).(pulumi.BoolPtrOutput)
}

func (o SettingGatewayMgmtPtrOutput) AutoSignatureUpdate() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *SettingGatewayMgmtAutoSignatureUpdate {
		if v == nil {
			return nil
		}
		return v.AutoSignatureUpdate
	}).(SettingGatewayMgmtAutoSignatureUpdatePtrOutput)
}

// he rollback timer for commit confirmed
func (o SettingGatewayMgmtPtrOutput) ConfigRevertTimer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *int {
		if v == nil {
			return nil
		}
		return v.ConfigRevertTimer
	}).(pulumi.IntPtrOutput)
}

// for both SSR and SRX disable console port
func (o SettingGatewayMgmtPtrOutput) DisableConsole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.DisableConsole
	}).(pulumi.BoolPtrOutput)
}

// for both SSR and SRX disable management interface
func (o SettingGatewayMgmtPtrOutput) DisableOob() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOob
	}).(pulumi.BoolPtrOutput)
}

func (o SettingGatewayMgmtPtrOutput) ProbeHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) []string {
		if v == nil {
			return nil
		}
		return v.ProbeHosts
	}).(pulumi.StringArrayOutput)
}

// restrict inbound-traffic to host
// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default, if dhcpd is enabled, we'll make sure it works
func (o SettingGatewayMgmtPtrOutput) ProtectRe() SettingGatewayMgmtProtectRePtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *SettingGatewayMgmtProtectRe {
		if v == nil {
			return nil
		}
		return v.ProtectRe
	}).(SettingGatewayMgmtProtectRePtrOutput)
}

// for SRX only
func (o SettingGatewayMgmtPtrOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *string {
		if v == nil {
			return nil
		}
		return v.RootPassword
	}).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtPtrOutput) SecurityLogSourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *string {
		if v == nil {
			return nil
		}
		return v.SecurityLogSourceAddress
	}).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtPtrOutput) SecurityLogSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmt) *string {
		if v == nil {
			return nil
		}
		return v.SecurityLogSourceInterface
	}).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmtAppProbing struct {
	// app-keys from /api/v1/const/applications
	Apps       []string                                `pulumi:"apps"`
	CustomApps []SettingGatewayMgmtAppProbingCustomApp `pulumi:"customApps"`
	Enabled    *bool                                   `pulumi:"enabled"`
}

// SettingGatewayMgmtAppProbingInput is an input type that accepts SettingGatewayMgmtAppProbingArgs and SettingGatewayMgmtAppProbingOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAppProbingInput` via:
//
//	SettingGatewayMgmtAppProbingArgs{...}
type SettingGatewayMgmtAppProbingInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAppProbingOutput() SettingGatewayMgmtAppProbingOutput
	ToSettingGatewayMgmtAppProbingOutputWithContext(context.Context) SettingGatewayMgmtAppProbingOutput
}

type SettingGatewayMgmtAppProbingArgs struct {
	// app-keys from /api/v1/const/applications
	Apps       pulumi.StringArrayInput                         `pulumi:"apps"`
	CustomApps SettingGatewayMgmtAppProbingCustomAppArrayInput `pulumi:"customApps"`
	Enabled    pulumi.BoolPtrInput                             `pulumi:"enabled"`
}

func (SettingGatewayMgmtAppProbingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAppProbing)(nil)).Elem()
}

func (i SettingGatewayMgmtAppProbingArgs) ToSettingGatewayMgmtAppProbingOutput() SettingGatewayMgmtAppProbingOutput {
	return i.ToSettingGatewayMgmtAppProbingOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAppProbingArgs) ToSettingGatewayMgmtAppProbingOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAppProbingOutput)
}

func (i SettingGatewayMgmtAppProbingArgs) ToSettingGatewayMgmtAppProbingPtrOutput() SettingGatewayMgmtAppProbingPtrOutput {
	return i.ToSettingGatewayMgmtAppProbingPtrOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAppProbingArgs) ToSettingGatewayMgmtAppProbingPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAppProbingOutput).ToSettingGatewayMgmtAppProbingPtrOutputWithContext(ctx)
}

// SettingGatewayMgmtAppProbingPtrInput is an input type that accepts SettingGatewayMgmtAppProbingArgs, SettingGatewayMgmtAppProbingPtr and SettingGatewayMgmtAppProbingPtrOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAppProbingPtrInput` via:
//
//	        SettingGatewayMgmtAppProbingArgs{...}
//
//	or:
//
//	        nil
type SettingGatewayMgmtAppProbingPtrInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAppProbingPtrOutput() SettingGatewayMgmtAppProbingPtrOutput
	ToSettingGatewayMgmtAppProbingPtrOutputWithContext(context.Context) SettingGatewayMgmtAppProbingPtrOutput
}

type settingGatewayMgmtAppProbingPtrType SettingGatewayMgmtAppProbingArgs

func SettingGatewayMgmtAppProbingPtr(v *SettingGatewayMgmtAppProbingArgs) SettingGatewayMgmtAppProbingPtrInput {
	return (*settingGatewayMgmtAppProbingPtrType)(v)
}

func (*settingGatewayMgmtAppProbingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtAppProbing)(nil)).Elem()
}

func (i *settingGatewayMgmtAppProbingPtrType) ToSettingGatewayMgmtAppProbingPtrOutput() SettingGatewayMgmtAppProbingPtrOutput {
	return i.ToSettingGatewayMgmtAppProbingPtrOutputWithContext(context.Background())
}

func (i *settingGatewayMgmtAppProbingPtrType) ToSettingGatewayMgmtAppProbingPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAppProbingPtrOutput)
}

type SettingGatewayMgmtAppProbingOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAppProbingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAppProbing)(nil)).Elem()
}

func (o SettingGatewayMgmtAppProbingOutput) ToSettingGatewayMgmtAppProbingOutput() SettingGatewayMgmtAppProbingOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingOutput) ToSettingGatewayMgmtAppProbingOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingOutput) ToSettingGatewayMgmtAppProbingPtrOutput() SettingGatewayMgmtAppProbingPtrOutput {
	return o.ToSettingGatewayMgmtAppProbingPtrOutputWithContext(context.Background())
}

func (o SettingGatewayMgmtAppProbingOutput) ToSettingGatewayMgmtAppProbingPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingGatewayMgmtAppProbing) *SettingGatewayMgmtAppProbing {
		return &v
	}).(SettingGatewayMgmtAppProbingPtrOutput)
}

// app-keys from /api/v1/const/applications
func (o SettingGatewayMgmtAppProbingOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbing) []string { return v.Apps }).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtAppProbingOutput) CustomApps() SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbing) []SettingGatewayMgmtAppProbingCustomApp { return v.CustomApps }).(SettingGatewayMgmtAppProbingCustomAppArrayOutput)
}

func (o SettingGatewayMgmtAppProbingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbing) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingGatewayMgmtAppProbingPtrOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAppProbingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtAppProbing)(nil)).Elem()
}

func (o SettingGatewayMgmtAppProbingPtrOutput) ToSettingGatewayMgmtAppProbingPtrOutput() SettingGatewayMgmtAppProbingPtrOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingPtrOutput) ToSettingGatewayMgmtAppProbingPtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingPtrOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingPtrOutput) Elem() SettingGatewayMgmtAppProbingOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAppProbing) SettingGatewayMgmtAppProbing {
		if v != nil {
			return *v
		}
		var ret SettingGatewayMgmtAppProbing
		return ret
	}).(SettingGatewayMgmtAppProbingOutput)
}

// app-keys from /api/v1/const/applications
func (o SettingGatewayMgmtAppProbingPtrOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAppProbing) []string {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtAppProbingPtrOutput) CustomApps() SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAppProbing) []SettingGatewayMgmtAppProbingCustomApp {
		if v == nil {
			return nil
		}
		return v.CustomApps
	}).(SettingGatewayMgmtAppProbingCustomAppArrayOutput)
}

func (o SettingGatewayMgmtAppProbingPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAppProbing) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingGatewayMgmtAppProbingCustomApp struct {
	Address *string `pulumi:"address"`
	AppType *string `pulumi:"appType"`
	// Only 1 entry is allowed:
	//     * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
	//     * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
	Hostnames []string `pulumi:"hostnames"`
	Key       *string  `pulumi:"key"`
	Name      string   `pulumi:"name"`
	Network   *string  `pulumi:"network"`
	// if `protocol`==`icmp`
	PacketSize *int `pulumi:"packetSize"`
	// enum: `http`, `icmp`
	Protocol string  `pulumi:"protocol"`
	Url      *string `pulumi:"url"`
	Vrf      *string `pulumi:"vrf"`
}

// SettingGatewayMgmtAppProbingCustomAppInput is an input type that accepts SettingGatewayMgmtAppProbingCustomAppArgs and SettingGatewayMgmtAppProbingCustomAppOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAppProbingCustomAppInput` via:
//
//	SettingGatewayMgmtAppProbingCustomAppArgs{...}
type SettingGatewayMgmtAppProbingCustomAppInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAppProbingCustomAppOutput() SettingGatewayMgmtAppProbingCustomAppOutput
	ToSettingGatewayMgmtAppProbingCustomAppOutputWithContext(context.Context) SettingGatewayMgmtAppProbingCustomAppOutput
}

type SettingGatewayMgmtAppProbingCustomAppArgs struct {
	Address pulumi.StringPtrInput `pulumi:"address"`
	AppType pulumi.StringPtrInput `pulumi:"appType"`
	// Only 1 entry is allowed:
	//     * if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
	//     * if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	Key       pulumi.StringPtrInput   `pulumi:"key"`
	Name      pulumi.StringInput      `pulumi:"name"`
	Network   pulumi.StringPtrInput   `pulumi:"network"`
	// if `protocol`==`icmp`
	PacketSize pulumi.IntPtrInput `pulumi:"packetSize"`
	// enum: `http`, `icmp`
	Protocol pulumi.StringInput    `pulumi:"protocol"`
	Url      pulumi.StringPtrInput `pulumi:"url"`
	Vrf      pulumi.StringPtrInput `pulumi:"vrf"`
}

func (SettingGatewayMgmtAppProbingCustomAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAppProbingCustomApp)(nil)).Elem()
}

func (i SettingGatewayMgmtAppProbingCustomAppArgs) ToSettingGatewayMgmtAppProbingCustomAppOutput() SettingGatewayMgmtAppProbingCustomAppOutput {
	return i.ToSettingGatewayMgmtAppProbingCustomAppOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAppProbingCustomAppArgs) ToSettingGatewayMgmtAppProbingCustomAppOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingCustomAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAppProbingCustomAppOutput)
}

// SettingGatewayMgmtAppProbingCustomAppArrayInput is an input type that accepts SettingGatewayMgmtAppProbingCustomAppArray and SettingGatewayMgmtAppProbingCustomAppArrayOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAppProbingCustomAppArrayInput` via:
//
//	SettingGatewayMgmtAppProbingCustomAppArray{ SettingGatewayMgmtAppProbingCustomAppArgs{...} }
type SettingGatewayMgmtAppProbingCustomAppArrayInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAppProbingCustomAppArrayOutput() SettingGatewayMgmtAppProbingCustomAppArrayOutput
	ToSettingGatewayMgmtAppProbingCustomAppArrayOutputWithContext(context.Context) SettingGatewayMgmtAppProbingCustomAppArrayOutput
}

type SettingGatewayMgmtAppProbingCustomAppArray []SettingGatewayMgmtAppProbingCustomAppInput

func (SettingGatewayMgmtAppProbingCustomAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingGatewayMgmtAppProbingCustomApp)(nil)).Elem()
}

func (i SettingGatewayMgmtAppProbingCustomAppArray) ToSettingGatewayMgmtAppProbingCustomAppArrayOutput() SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return i.ToSettingGatewayMgmtAppProbingCustomAppArrayOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAppProbingCustomAppArray) ToSettingGatewayMgmtAppProbingCustomAppArrayOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAppProbingCustomAppArrayOutput)
}

type SettingGatewayMgmtAppProbingCustomAppOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAppProbingCustomAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAppProbingCustomApp)(nil)).Elem()
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) ToSettingGatewayMgmtAppProbingCustomAppOutput() SettingGatewayMgmtAppProbingCustomAppOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) ToSettingGatewayMgmtAppProbingCustomAppOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingCustomAppOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) AppType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.AppType }).(pulumi.StringPtrOutput)
}

// Only 1 entry is allowed:
//   - if `protocol`==`http`: URL (e.g. `http://test.com` or `https://test.com`)
//   - if `protocol`==`icmp`: IP Address (e.g. `1.2.3.4`)
func (o SettingGatewayMgmtAppProbingCustomAppOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) string { return v.Name }).(pulumi.StringOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// if `protocol`==`icmp`
func (o SettingGatewayMgmtAppProbingCustomAppOutput) PacketSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *int { return v.PacketSize }).(pulumi.IntPtrOutput)
}

// enum: `http`, `icmp`
func (o SettingGatewayMgmtAppProbingCustomAppOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtAppProbingCustomAppOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAppProbingCustomApp) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmtAppProbingCustomAppArrayOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAppProbingCustomAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingGatewayMgmtAppProbingCustomApp)(nil)).Elem()
}

func (o SettingGatewayMgmtAppProbingCustomAppArrayOutput) ToSettingGatewayMgmtAppProbingCustomAppArrayOutput() SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingCustomAppArrayOutput) ToSettingGatewayMgmtAppProbingCustomAppArrayOutputWithContext(ctx context.Context) SettingGatewayMgmtAppProbingCustomAppArrayOutput {
	return o
}

func (o SettingGatewayMgmtAppProbingCustomAppArrayOutput) Index(i pulumi.IntInput) SettingGatewayMgmtAppProbingCustomAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingGatewayMgmtAppProbingCustomApp {
		return vs[0].([]SettingGatewayMgmtAppProbingCustomApp)[vs[1].(int)]
	}).(SettingGatewayMgmtAppProbingCustomAppOutput)
}

type SettingGatewayMgmtAutoSignatureUpdate struct {
	// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
	DayOfWeek *string `pulumi:"dayOfWeek"`
	Enable    *bool   `pulumi:"enable"`
	// optional, Mist will decide the timing
	TimeOfDay *string `pulumi:"timeOfDay"`
}

// SettingGatewayMgmtAutoSignatureUpdateInput is an input type that accepts SettingGatewayMgmtAutoSignatureUpdateArgs and SettingGatewayMgmtAutoSignatureUpdateOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAutoSignatureUpdateInput` via:
//
//	SettingGatewayMgmtAutoSignatureUpdateArgs{...}
type SettingGatewayMgmtAutoSignatureUpdateInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAutoSignatureUpdateOutput() SettingGatewayMgmtAutoSignatureUpdateOutput
	ToSettingGatewayMgmtAutoSignatureUpdateOutputWithContext(context.Context) SettingGatewayMgmtAutoSignatureUpdateOutput
}

type SettingGatewayMgmtAutoSignatureUpdateArgs struct {
	// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	Enable    pulumi.BoolPtrInput   `pulumi:"enable"`
	// optional, Mist will decide the timing
	TimeOfDay pulumi.StringPtrInput `pulumi:"timeOfDay"`
}

func (SettingGatewayMgmtAutoSignatureUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAutoSignatureUpdate)(nil)).Elem()
}

func (i SettingGatewayMgmtAutoSignatureUpdateArgs) ToSettingGatewayMgmtAutoSignatureUpdateOutput() SettingGatewayMgmtAutoSignatureUpdateOutput {
	return i.ToSettingGatewayMgmtAutoSignatureUpdateOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAutoSignatureUpdateArgs) ToSettingGatewayMgmtAutoSignatureUpdateOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAutoSignatureUpdateOutput)
}

func (i SettingGatewayMgmtAutoSignatureUpdateArgs) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutput() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return i.ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtAutoSignatureUpdateArgs) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAutoSignatureUpdateOutput).ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(ctx)
}

// SettingGatewayMgmtAutoSignatureUpdatePtrInput is an input type that accepts SettingGatewayMgmtAutoSignatureUpdateArgs, SettingGatewayMgmtAutoSignatureUpdatePtr and SettingGatewayMgmtAutoSignatureUpdatePtrOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtAutoSignatureUpdatePtrInput` via:
//
//	        SettingGatewayMgmtAutoSignatureUpdateArgs{...}
//
//	or:
//
//	        nil
type SettingGatewayMgmtAutoSignatureUpdatePtrInput interface {
	pulumi.Input

	ToSettingGatewayMgmtAutoSignatureUpdatePtrOutput() SettingGatewayMgmtAutoSignatureUpdatePtrOutput
	ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(context.Context) SettingGatewayMgmtAutoSignatureUpdatePtrOutput
}

type settingGatewayMgmtAutoSignatureUpdatePtrType SettingGatewayMgmtAutoSignatureUpdateArgs

func SettingGatewayMgmtAutoSignatureUpdatePtr(v *SettingGatewayMgmtAutoSignatureUpdateArgs) SettingGatewayMgmtAutoSignatureUpdatePtrInput {
	return (*settingGatewayMgmtAutoSignatureUpdatePtrType)(v)
}

func (*settingGatewayMgmtAutoSignatureUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtAutoSignatureUpdate)(nil)).Elem()
}

func (i *settingGatewayMgmtAutoSignatureUpdatePtrType) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutput() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return i.ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(context.Background())
}

func (i *settingGatewayMgmtAutoSignatureUpdatePtrType) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtAutoSignatureUpdatePtrOutput)
}

type SettingGatewayMgmtAutoSignatureUpdateOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAutoSignatureUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtAutoSignatureUpdate)(nil)).Elem()
}

func (o SettingGatewayMgmtAutoSignatureUpdateOutput) ToSettingGatewayMgmtAutoSignatureUpdateOutput() SettingGatewayMgmtAutoSignatureUpdateOutput {
	return o
}

func (o SettingGatewayMgmtAutoSignatureUpdateOutput) ToSettingGatewayMgmtAutoSignatureUpdateOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdateOutput {
	return o
}

func (o SettingGatewayMgmtAutoSignatureUpdateOutput) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutput() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o.ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(context.Background())
}

func (o SettingGatewayMgmtAutoSignatureUpdateOutput) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingGatewayMgmtAutoSignatureUpdate) *SettingGatewayMgmtAutoSignatureUpdate {
		return &v
	}).(SettingGatewayMgmtAutoSignatureUpdatePtrOutput)
}

// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
func (o SettingGatewayMgmtAutoSignatureUpdateOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAutoSignatureUpdate) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtAutoSignatureUpdateOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAutoSignatureUpdate) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// optional, Mist will decide the timing
func (o SettingGatewayMgmtAutoSignatureUpdateOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtAutoSignatureUpdate) *string { return v.TimeOfDay }).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmtAutoSignatureUpdatePtrOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtAutoSignatureUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtAutoSignatureUpdate)(nil)).Elem()
}

func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutput() SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o
}

func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) ToSettingGatewayMgmtAutoSignatureUpdatePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtAutoSignatureUpdatePtrOutput {
	return o
}

func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) Elem() SettingGatewayMgmtAutoSignatureUpdateOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAutoSignatureUpdate) SettingGatewayMgmtAutoSignatureUpdate {
		if v != nil {
			return *v
		}
		var ret SettingGatewayMgmtAutoSignatureUpdate
		return ret
	}).(SettingGatewayMgmtAutoSignatureUpdateOutput)
}

// enum: `any`, `fri`, `mon`, `sat`, `sun`, `thu`, `tue`, `wed`
func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAutoSignatureUpdate) *string {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAutoSignatureUpdate) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// optional, Mist will decide the timing
func (o SettingGatewayMgmtAutoSignatureUpdatePtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtAutoSignatureUpdate) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

type SettingGatewayMgmtProtectRe struct {
	// optionally, services we'll allow. enum: `icmp`, `ssh`
	AllowedServices []string                            `pulumi:"allowedServices"`
	Customs         []SettingGatewayMgmtProtectReCustom `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled *bool `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts []string `pulumi:"trustedHosts"`
}

// SettingGatewayMgmtProtectReInput is an input type that accepts SettingGatewayMgmtProtectReArgs and SettingGatewayMgmtProtectReOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtProtectReInput` via:
//
//	SettingGatewayMgmtProtectReArgs{...}
type SettingGatewayMgmtProtectReInput interface {
	pulumi.Input

	ToSettingGatewayMgmtProtectReOutput() SettingGatewayMgmtProtectReOutput
	ToSettingGatewayMgmtProtectReOutputWithContext(context.Context) SettingGatewayMgmtProtectReOutput
}

type SettingGatewayMgmtProtectReArgs struct {
	// optionally, services we'll allow. enum: `icmp`, `ssh`
	AllowedServices pulumi.StringArrayInput                     `pulumi:"allowedServices"`
	Customs         SettingGatewayMgmtProtectReCustomArrayInput `pulumi:"customs"`
	// when enabled, all traffic that is not essential to our operation will be dropped
	// e.g. ntp / dns / traffic to mist will be allowed by default
	//      if dhcpd is enabled, we'll make sure it works
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// host/subnets we'll allow traffic to/from
	TrustedHosts pulumi.StringArrayInput `pulumi:"trustedHosts"`
}

func (SettingGatewayMgmtProtectReArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtProtectRe)(nil)).Elem()
}

func (i SettingGatewayMgmtProtectReArgs) ToSettingGatewayMgmtProtectReOutput() SettingGatewayMgmtProtectReOutput {
	return i.ToSettingGatewayMgmtProtectReOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtProtectReArgs) ToSettingGatewayMgmtProtectReOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtProtectReOutput)
}

func (i SettingGatewayMgmtProtectReArgs) ToSettingGatewayMgmtProtectRePtrOutput() SettingGatewayMgmtProtectRePtrOutput {
	return i.ToSettingGatewayMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtProtectReArgs) ToSettingGatewayMgmtProtectRePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtProtectReOutput).ToSettingGatewayMgmtProtectRePtrOutputWithContext(ctx)
}

// SettingGatewayMgmtProtectRePtrInput is an input type that accepts SettingGatewayMgmtProtectReArgs, SettingGatewayMgmtProtectRePtr and SettingGatewayMgmtProtectRePtrOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtProtectRePtrInput` via:
//
//	        SettingGatewayMgmtProtectReArgs{...}
//
//	or:
//
//	        nil
type SettingGatewayMgmtProtectRePtrInput interface {
	pulumi.Input

	ToSettingGatewayMgmtProtectRePtrOutput() SettingGatewayMgmtProtectRePtrOutput
	ToSettingGatewayMgmtProtectRePtrOutputWithContext(context.Context) SettingGatewayMgmtProtectRePtrOutput
}

type settingGatewayMgmtProtectRePtrType SettingGatewayMgmtProtectReArgs

func SettingGatewayMgmtProtectRePtr(v *SettingGatewayMgmtProtectReArgs) SettingGatewayMgmtProtectRePtrInput {
	return (*settingGatewayMgmtProtectRePtrType)(v)
}

func (*settingGatewayMgmtProtectRePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtProtectRe)(nil)).Elem()
}

func (i *settingGatewayMgmtProtectRePtrType) ToSettingGatewayMgmtProtectRePtrOutput() SettingGatewayMgmtProtectRePtrOutput {
	return i.ToSettingGatewayMgmtProtectRePtrOutputWithContext(context.Background())
}

func (i *settingGatewayMgmtProtectRePtrType) ToSettingGatewayMgmtProtectRePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectRePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtProtectRePtrOutput)
}

type SettingGatewayMgmtProtectReOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtProtectReOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtProtectRe)(nil)).Elem()
}

func (o SettingGatewayMgmtProtectReOutput) ToSettingGatewayMgmtProtectReOutput() SettingGatewayMgmtProtectReOutput {
	return o
}

func (o SettingGatewayMgmtProtectReOutput) ToSettingGatewayMgmtProtectReOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReOutput {
	return o
}

func (o SettingGatewayMgmtProtectReOutput) ToSettingGatewayMgmtProtectRePtrOutput() SettingGatewayMgmtProtectRePtrOutput {
	return o.ToSettingGatewayMgmtProtectRePtrOutputWithContext(context.Background())
}

func (o SettingGatewayMgmtProtectReOutput) ToSettingGatewayMgmtProtectRePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectRePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingGatewayMgmtProtectRe) *SettingGatewayMgmtProtectRe {
		return &v
	}).(SettingGatewayMgmtProtectRePtrOutput)
}

// optionally, services we'll allow. enum: `icmp`, `ssh`
func (o SettingGatewayMgmtProtectReOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectRe) []string { return v.AllowedServices }).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtProtectReOutput) Customs() SettingGatewayMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectRe) []SettingGatewayMgmtProtectReCustom { return v.Customs }).(SettingGatewayMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o SettingGatewayMgmtProtectReOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectRe) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o SettingGatewayMgmtProtectReOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectRe) []string { return v.TrustedHosts }).(pulumi.StringArrayOutput)
}

type SettingGatewayMgmtProtectRePtrOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtProtectRePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingGatewayMgmtProtectRe)(nil)).Elem()
}

func (o SettingGatewayMgmtProtectRePtrOutput) ToSettingGatewayMgmtProtectRePtrOutput() SettingGatewayMgmtProtectRePtrOutput {
	return o
}

func (o SettingGatewayMgmtProtectRePtrOutput) ToSettingGatewayMgmtProtectRePtrOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectRePtrOutput {
	return o
}

func (o SettingGatewayMgmtProtectRePtrOutput) Elem() SettingGatewayMgmtProtectReOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtProtectRe) SettingGatewayMgmtProtectRe {
		if v != nil {
			return *v
		}
		var ret SettingGatewayMgmtProtectRe
		return ret
	}).(SettingGatewayMgmtProtectReOutput)
}

// optionally, services we'll allow. enum: `icmp`, `ssh`
func (o SettingGatewayMgmtProtectRePtrOutput) AllowedServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.AllowedServices
	}).(pulumi.StringArrayOutput)
}

func (o SettingGatewayMgmtProtectRePtrOutput) Customs() SettingGatewayMgmtProtectReCustomArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtProtectRe) []SettingGatewayMgmtProtectReCustom {
		if v == nil {
			return nil
		}
		return v.Customs
	}).(SettingGatewayMgmtProtectReCustomArrayOutput)
}

// when enabled, all traffic that is not essential to our operation will be dropped
// e.g. ntp / dns / traffic to mist will be allowed by default
//
//	if dhcpd is enabled, we'll make sure it works
func (o SettingGatewayMgmtProtectRePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtProtectRe) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// host/subnets we'll allow traffic to/from
func (o SettingGatewayMgmtProtectRePtrOutput) TrustedHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingGatewayMgmtProtectRe) []string {
		if v == nil {
			return nil
		}
		return v.TrustedHosts
	}).(pulumi.StringArrayOutput)
}

type SettingGatewayMgmtProtectReCustom struct {
	// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	PortRange *string `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	Protocol *string  `pulumi:"protocol"`
	Subnets  []string `pulumi:"subnets"`
}

// SettingGatewayMgmtProtectReCustomInput is an input type that accepts SettingGatewayMgmtProtectReCustomArgs and SettingGatewayMgmtProtectReCustomOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtProtectReCustomInput` via:
//
//	SettingGatewayMgmtProtectReCustomArgs{...}
type SettingGatewayMgmtProtectReCustomInput interface {
	pulumi.Input

	ToSettingGatewayMgmtProtectReCustomOutput() SettingGatewayMgmtProtectReCustomOutput
	ToSettingGatewayMgmtProtectReCustomOutputWithContext(context.Context) SettingGatewayMgmtProtectReCustomOutput
}

type SettingGatewayMgmtProtectReCustomArgs struct {
	// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
	Protocol pulumi.StringPtrInput   `pulumi:"protocol"`
	Subnets  pulumi.StringArrayInput `pulumi:"subnets"`
}

func (SettingGatewayMgmtProtectReCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtProtectReCustom)(nil)).Elem()
}

func (i SettingGatewayMgmtProtectReCustomArgs) ToSettingGatewayMgmtProtectReCustomOutput() SettingGatewayMgmtProtectReCustomOutput {
	return i.ToSettingGatewayMgmtProtectReCustomOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtProtectReCustomArgs) ToSettingGatewayMgmtProtectReCustomOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtProtectReCustomOutput)
}

// SettingGatewayMgmtProtectReCustomArrayInput is an input type that accepts SettingGatewayMgmtProtectReCustomArray and SettingGatewayMgmtProtectReCustomArrayOutput values.
// You can construct a concrete instance of `SettingGatewayMgmtProtectReCustomArrayInput` via:
//
//	SettingGatewayMgmtProtectReCustomArray{ SettingGatewayMgmtProtectReCustomArgs{...} }
type SettingGatewayMgmtProtectReCustomArrayInput interface {
	pulumi.Input

	ToSettingGatewayMgmtProtectReCustomArrayOutput() SettingGatewayMgmtProtectReCustomArrayOutput
	ToSettingGatewayMgmtProtectReCustomArrayOutputWithContext(context.Context) SettingGatewayMgmtProtectReCustomArrayOutput
}

type SettingGatewayMgmtProtectReCustomArray []SettingGatewayMgmtProtectReCustomInput

func (SettingGatewayMgmtProtectReCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingGatewayMgmtProtectReCustom)(nil)).Elem()
}

func (i SettingGatewayMgmtProtectReCustomArray) ToSettingGatewayMgmtProtectReCustomArrayOutput() SettingGatewayMgmtProtectReCustomArrayOutput {
	return i.ToSettingGatewayMgmtProtectReCustomArrayOutputWithContext(context.Background())
}

func (i SettingGatewayMgmtProtectReCustomArray) ToSettingGatewayMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingGatewayMgmtProtectReCustomArrayOutput)
}

type SettingGatewayMgmtProtectReCustomOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtProtectReCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingGatewayMgmtProtectReCustom)(nil)).Elem()
}

func (o SettingGatewayMgmtProtectReCustomOutput) ToSettingGatewayMgmtProtectReCustomOutput() SettingGatewayMgmtProtectReCustomOutput {
	return o
}

func (o SettingGatewayMgmtProtectReCustomOutput) ToSettingGatewayMgmtProtectReCustomOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReCustomOutput {
	return o
}

// matched dst port, "0" means any. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
func (o SettingGatewayMgmtProtectReCustomOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectReCustom) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// enum: `any`, `icmp`, `tcp`, `udp`. Note: For `protocol`==`any` and  `portRange`==`any`, configure `trustedHosts` instead
func (o SettingGatewayMgmtProtectReCustomOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectReCustom) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SettingGatewayMgmtProtectReCustomOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingGatewayMgmtProtectReCustom) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type SettingGatewayMgmtProtectReCustomArrayOutput struct{ *pulumi.OutputState }

func (SettingGatewayMgmtProtectReCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingGatewayMgmtProtectReCustom)(nil)).Elem()
}

func (o SettingGatewayMgmtProtectReCustomArrayOutput) ToSettingGatewayMgmtProtectReCustomArrayOutput() SettingGatewayMgmtProtectReCustomArrayOutput {
	return o
}

func (o SettingGatewayMgmtProtectReCustomArrayOutput) ToSettingGatewayMgmtProtectReCustomArrayOutputWithContext(ctx context.Context) SettingGatewayMgmtProtectReCustomArrayOutput {
	return o
}

func (o SettingGatewayMgmtProtectReCustomArrayOutput) Index(i pulumi.IntInput) SettingGatewayMgmtProtectReCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingGatewayMgmtProtectReCustom {
		return vs[0].([]SettingGatewayMgmtProtectReCustom)[vs[1].(int)]
	}).(SettingGatewayMgmtProtectReCustomOutput)
}

type SettingLed struct {
	Brightness *int  `pulumi:"brightness"`
	Enabled    *bool `pulumi:"enabled"`
}

// SettingLedInput is an input type that accepts SettingLedArgs and SettingLedOutput values.
// You can construct a concrete instance of `SettingLedInput` via:
//
//	SettingLedArgs{...}
type SettingLedInput interface {
	pulumi.Input

	ToSettingLedOutput() SettingLedOutput
	ToSettingLedOutputWithContext(context.Context) SettingLedOutput
}

type SettingLedArgs struct {
	Brightness pulumi.IntPtrInput  `pulumi:"brightness"`
	Enabled    pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingLedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingLed)(nil)).Elem()
}

func (i SettingLedArgs) ToSettingLedOutput() SettingLedOutput {
	return i.ToSettingLedOutputWithContext(context.Background())
}

func (i SettingLedArgs) ToSettingLedOutputWithContext(ctx context.Context) SettingLedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingLedOutput)
}

func (i SettingLedArgs) ToSettingLedPtrOutput() SettingLedPtrOutput {
	return i.ToSettingLedPtrOutputWithContext(context.Background())
}

func (i SettingLedArgs) ToSettingLedPtrOutputWithContext(ctx context.Context) SettingLedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingLedOutput).ToSettingLedPtrOutputWithContext(ctx)
}

// SettingLedPtrInput is an input type that accepts SettingLedArgs, SettingLedPtr and SettingLedPtrOutput values.
// You can construct a concrete instance of `SettingLedPtrInput` via:
//
//	        SettingLedArgs{...}
//
//	or:
//
//	        nil
type SettingLedPtrInput interface {
	pulumi.Input

	ToSettingLedPtrOutput() SettingLedPtrOutput
	ToSettingLedPtrOutputWithContext(context.Context) SettingLedPtrOutput
}

type settingLedPtrType SettingLedArgs

func SettingLedPtr(v *SettingLedArgs) SettingLedPtrInput {
	return (*settingLedPtrType)(v)
}

func (*settingLedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingLed)(nil)).Elem()
}

func (i *settingLedPtrType) ToSettingLedPtrOutput() SettingLedPtrOutput {
	return i.ToSettingLedPtrOutputWithContext(context.Background())
}

func (i *settingLedPtrType) ToSettingLedPtrOutputWithContext(ctx context.Context) SettingLedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingLedPtrOutput)
}

type SettingLedOutput struct{ *pulumi.OutputState }

func (SettingLedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingLed)(nil)).Elem()
}

func (o SettingLedOutput) ToSettingLedOutput() SettingLedOutput {
	return o
}

func (o SettingLedOutput) ToSettingLedOutputWithContext(ctx context.Context) SettingLedOutput {
	return o
}

func (o SettingLedOutput) ToSettingLedPtrOutput() SettingLedPtrOutput {
	return o.ToSettingLedPtrOutputWithContext(context.Background())
}

func (o SettingLedOutput) ToSettingLedPtrOutputWithContext(ctx context.Context) SettingLedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingLed) *SettingLed {
		return &v
	}).(SettingLedPtrOutput)
}

func (o SettingLedOutput) Brightness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingLed) *int { return v.Brightness }).(pulumi.IntPtrOutput)
}

func (o SettingLedOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingLed) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingLedPtrOutput struct{ *pulumi.OutputState }

func (SettingLedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingLed)(nil)).Elem()
}

func (o SettingLedPtrOutput) ToSettingLedPtrOutput() SettingLedPtrOutput {
	return o
}

func (o SettingLedPtrOutput) ToSettingLedPtrOutputWithContext(ctx context.Context) SettingLedPtrOutput {
	return o
}

func (o SettingLedPtrOutput) Elem() SettingLedOutput {
	return o.ApplyT(func(v *SettingLed) SettingLed {
		if v != nil {
			return *v
		}
		var ret SettingLed
		return ret
	}).(SettingLedOutput)
}

func (o SettingLedPtrOutput) Brightness() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingLed) *int {
		if v == nil {
			return nil
		}
		return v.Brightness
	}).(pulumi.IntPtrOutput)
}

func (o SettingLedPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingLed) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingOccupancy struct {
	// indicate whether named BLE assets should be included in the zone occupancy calculation
	AssetsEnabled *bool `pulumi:"assetsEnabled"`
	// indicate whether connected WiFi clients should be included in the zone occupancy calculation
	ClientsEnabled *bool `pulumi:"clientsEnabled"`
	// minimum duration
	MinDuration *int `pulumi:"minDuration"`
	// indicate whether SDK clients should be included in the zone occupancy calculation
	SdkclientsEnabled *bool `pulumi:"sdkclientsEnabled"`
	// indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
	UnconnectedClientsEnabled *bool `pulumi:"unconnectedClientsEnabled"`
}

// SettingOccupancyInput is an input type that accepts SettingOccupancyArgs and SettingOccupancyOutput values.
// You can construct a concrete instance of `SettingOccupancyInput` via:
//
//	SettingOccupancyArgs{...}
type SettingOccupancyInput interface {
	pulumi.Input

	ToSettingOccupancyOutput() SettingOccupancyOutput
	ToSettingOccupancyOutputWithContext(context.Context) SettingOccupancyOutput
}

type SettingOccupancyArgs struct {
	// indicate whether named BLE assets should be included in the zone occupancy calculation
	AssetsEnabled pulumi.BoolPtrInput `pulumi:"assetsEnabled"`
	// indicate whether connected WiFi clients should be included in the zone occupancy calculation
	ClientsEnabled pulumi.BoolPtrInput `pulumi:"clientsEnabled"`
	// minimum duration
	MinDuration pulumi.IntPtrInput `pulumi:"minDuration"`
	// indicate whether SDK clients should be included in the zone occupancy calculation
	SdkclientsEnabled pulumi.BoolPtrInput `pulumi:"sdkclientsEnabled"`
	// indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
	UnconnectedClientsEnabled pulumi.BoolPtrInput `pulumi:"unconnectedClientsEnabled"`
}

func (SettingOccupancyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingOccupancy)(nil)).Elem()
}

func (i SettingOccupancyArgs) ToSettingOccupancyOutput() SettingOccupancyOutput {
	return i.ToSettingOccupancyOutputWithContext(context.Background())
}

func (i SettingOccupancyArgs) ToSettingOccupancyOutputWithContext(ctx context.Context) SettingOccupancyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOccupancyOutput)
}

func (i SettingOccupancyArgs) ToSettingOccupancyPtrOutput() SettingOccupancyPtrOutput {
	return i.ToSettingOccupancyPtrOutputWithContext(context.Background())
}

func (i SettingOccupancyArgs) ToSettingOccupancyPtrOutputWithContext(ctx context.Context) SettingOccupancyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOccupancyOutput).ToSettingOccupancyPtrOutputWithContext(ctx)
}

// SettingOccupancyPtrInput is an input type that accepts SettingOccupancyArgs, SettingOccupancyPtr and SettingOccupancyPtrOutput values.
// You can construct a concrete instance of `SettingOccupancyPtrInput` via:
//
//	        SettingOccupancyArgs{...}
//
//	or:
//
//	        nil
type SettingOccupancyPtrInput interface {
	pulumi.Input

	ToSettingOccupancyPtrOutput() SettingOccupancyPtrOutput
	ToSettingOccupancyPtrOutputWithContext(context.Context) SettingOccupancyPtrOutput
}

type settingOccupancyPtrType SettingOccupancyArgs

func SettingOccupancyPtr(v *SettingOccupancyArgs) SettingOccupancyPtrInput {
	return (*settingOccupancyPtrType)(v)
}

func (*settingOccupancyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingOccupancy)(nil)).Elem()
}

func (i *settingOccupancyPtrType) ToSettingOccupancyPtrOutput() SettingOccupancyPtrOutput {
	return i.ToSettingOccupancyPtrOutputWithContext(context.Background())
}

func (i *settingOccupancyPtrType) ToSettingOccupancyPtrOutputWithContext(ctx context.Context) SettingOccupancyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOccupancyPtrOutput)
}

type SettingOccupancyOutput struct{ *pulumi.OutputState }

func (SettingOccupancyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingOccupancy)(nil)).Elem()
}

func (o SettingOccupancyOutput) ToSettingOccupancyOutput() SettingOccupancyOutput {
	return o
}

func (o SettingOccupancyOutput) ToSettingOccupancyOutputWithContext(ctx context.Context) SettingOccupancyOutput {
	return o
}

func (o SettingOccupancyOutput) ToSettingOccupancyPtrOutput() SettingOccupancyPtrOutput {
	return o.ToSettingOccupancyPtrOutputWithContext(context.Background())
}

func (o SettingOccupancyOutput) ToSettingOccupancyPtrOutputWithContext(ctx context.Context) SettingOccupancyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingOccupancy) *SettingOccupancy {
		return &v
	}).(SettingOccupancyPtrOutput)
}

// indicate whether named BLE assets should be included in the zone occupancy calculation
func (o SettingOccupancyOutput) AssetsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingOccupancy) *bool { return v.AssetsEnabled }).(pulumi.BoolPtrOutput)
}

// indicate whether connected WiFi clients should be included in the zone occupancy calculation
func (o SettingOccupancyOutput) ClientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingOccupancy) *bool { return v.ClientsEnabled }).(pulumi.BoolPtrOutput)
}

// minimum duration
func (o SettingOccupancyOutput) MinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingOccupancy) *int { return v.MinDuration }).(pulumi.IntPtrOutput)
}

// indicate whether SDK clients should be included in the zone occupancy calculation
func (o SettingOccupancyOutput) SdkclientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingOccupancy) *bool { return v.SdkclientsEnabled }).(pulumi.BoolPtrOutput)
}

// indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
func (o SettingOccupancyOutput) UnconnectedClientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingOccupancy) *bool { return v.UnconnectedClientsEnabled }).(pulumi.BoolPtrOutput)
}

type SettingOccupancyPtrOutput struct{ *pulumi.OutputState }

func (SettingOccupancyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingOccupancy)(nil)).Elem()
}

func (o SettingOccupancyPtrOutput) ToSettingOccupancyPtrOutput() SettingOccupancyPtrOutput {
	return o
}

func (o SettingOccupancyPtrOutput) ToSettingOccupancyPtrOutputWithContext(ctx context.Context) SettingOccupancyPtrOutput {
	return o
}

func (o SettingOccupancyPtrOutput) Elem() SettingOccupancyOutput {
	return o.ApplyT(func(v *SettingOccupancy) SettingOccupancy {
		if v != nil {
			return *v
		}
		var ret SettingOccupancy
		return ret
	}).(SettingOccupancyOutput)
}

// indicate whether named BLE assets should be included in the zone occupancy calculation
func (o SettingOccupancyPtrOutput) AssetsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingOccupancy) *bool {
		if v == nil {
			return nil
		}
		return v.AssetsEnabled
	}).(pulumi.BoolPtrOutput)
}

// indicate whether connected WiFi clients should be included in the zone occupancy calculation
func (o SettingOccupancyPtrOutput) ClientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingOccupancy) *bool {
		if v == nil {
			return nil
		}
		return v.ClientsEnabled
	}).(pulumi.BoolPtrOutput)
}

// minimum duration
func (o SettingOccupancyPtrOutput) MinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingOccupancy) *int {
		if v == nil {
			return nil
		}
		return v.MinDuration
	}).(pulumi.IntPtrOutput)
}

// indicate whether SDK clients should be included in the zone occupancy calculation
func (o SettingOccupancyPtrOutput) SdkclientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingOccupancy) *bool {
		if v == nil {
			return nil
		}
		return v.SdkclientsEnabled
	}).(pulumi.BoolPtrOutput)
}

// indicate whether unconnected WiFi clients should be included in the zone occupancy calculation
func (o SettingOccupancyPtrOutput) UnconnectedClientsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingOccupancy) *bool {
		if v == nil {
			return nil
		}
		return v.UnconnectedClientsEnabled
	}).(pulumi.BoolPtrOutput)
}

type SettingProxy struct {
	Url *string `pulumi:"url"`
}

// SettingProxyInput is an input type that accepts SettingProxyArgs and SettingProxyOutput values.
// You can construct a concrete instance of `SettingProxyInput` via:
//
//	SettingProxyArgs{...}
type SettingProxyInput interface {
	pulumi.Input

	ToSettingProxyOutput() SettingProxyOutput
	ToSettingProxyOutputWithContext(context.Context) SettingProxyOutput
}

type SettingProxyArgs struct {
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (SettingProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingProxy)(nil)).Elem()
}

func (i SettingProxyArgs) ToSettingProxyOutput() SettingProxyOutput {
	return i.ToSettingProxyOutputWithContext(context.Background())
}

func (i SettingProxyArgs) ToSettingProxyOutputWithContext(ctx context.Context) SettingProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingProxyOutput)
}

func (i SettingProxyArgs) ToSettingProxyPtrOutput() SettingProxyPtrOutput {
	return i.ToSettingProxyPtrOutputWithContext(context.Background())
}

func (i SettingProxyArgs) ToSettingProxyPtrOutputWithContext(ctx context.Context) SettingProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingProxyOutput).ToSettingProxyPtrOutputWithContext(ctx)
}

// SettingProxyPtrInput is an input type that accepts SettingProxyArgs, SettingProxyPtr and SettingProxyPtrOutput values.
// You can construct a concrete instance of `SettingProxyPtrInput` via:
//
//	        SettingProxyArgs{...}
//
//	or:
//
//	        nil
type SettingProxyPtrInput interface {
	pulumi.Input

	ToSettingProxyPtrOutput() SettingProxyPtrOutput
	ToSettingProxyPtrOutputWithContext(context.Context) SettingProxyPtrOutput
}

type settingProxyPtrType SettingProxyArgs

func SettingProxyPtr(v *SettingProxyArgs) SettingProxyPtrInput {
	return (*settingProxyPtrType)(v)
}

func (*settingProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingProxy)(nil)).Elem()
}

func (i *settingProxyPtrType) ToSettingProxyPtrOutput() SettingProxyPtrOutput {
	return i.ToSettingProxyPtrOutputWithContext(context.Background())
}

func (i *settingProxyPtrType) ToSettingProxyPtrOutputWithContext(ctx context.Context) SettingProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingProxyPtrOutput)
}

type SettingProxyOutput struct{ *pulumi.OutputState }

func (SettingProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingProxy)(nil)).Elem()
}

func (o SettingProxyOutput) ToSettingProxyOutput() SettingProxyOutput {
	return o
}

func (o SettingProxyOutput) ToSettingProxyOutputWithContext(ctx context.Context) SettingProxyOutput {
	return o
}

func (o SettingProxyOutput) ToSettingProxyPtrOutput() SettingProxyPtrOutput {
	return o.ToSettingProxyPtrOutputWithContext(context.Background())
}

func (o SettingProxyOutput) ToSettingProxyPtrOutputWithContext(ctx context.Context) SettingProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingProxy) *SettingProxy {
		return &v
	}).(SettingProxyPtrOutput)
}

func (o SettingProxyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingProxy) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type SettingProxyPtrOutput struct{ *pulumi.OutputState }

func (SettingProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingProxy)(nil)).Elem()
}

func (o SettingProxyPtrOutput) ToSettingProxyPtrOutput() SettingProxyPtrOutput {
	return o
}

func (o SettingProxyPtrOutput) ToSettingProxyPtrOutputWithContext(ctx context.Context) SettingProxyPtrOutput {
	return o
}

func (o SettingProxyPtrOutput) Elem() SettingProxyOutput {
	return o.ApplyT(func(v *SettingProxy) SettingProxy {
		if v != nil {
			return *v
		}
		var ret SettingProxy
		return ret
	}).(SettingProxyOutput)
}

func (o SettingProxyPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingProxy) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type SettingRogue struct {
	// whether or not rogue detection is enabled
	Enabled *bool `pulumi:"enabled"`
	// whether or not honeypot detection is enabled
	HoneypotEnabled *bool `pulumi:"honeypotEnabled"`
	// minimum duration for a bssid to be considered rogue
	MinDuration *int `pulumi:"minDuration"`
	// minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
	MinRssi *int `pulumi:"minRssi"`
	// list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
	WhitelistedBssids []string `pulumi:"whitelistedBssids"`
	// list of SSIDs to whitelist
	WhitelistedSsids []string `pulumi:"whitelistedSsids"`
}

// SettingRogueInput is an input type that accepts SettingRogueArgs and SettingRogueOutput values.
// You can construct a concrete instance of `SettingRogueInput` via:
//
//	SettingRogueArgs{...}
type SettingRogueInput interface {
	pulumi.Input

	ToSettingRogueOutput() SettingRogueOutput
	ToSettingRogueOutputWithContext(context.Context) SettingRogueOutput
}

type SettingRogueArgs struct {
	// whether or not rogue detection is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// whether or not honeypot detection is enabled
	HoneypotEnabled pulumi.BoolPtrInput `pulumi:"honeypotEnabled"`
	// minimum duration for a bssid to be considered rogue
	MinDuration pulumi.IntPtrInput `pulumi:"minDuration"`
	// minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
	MinRssi pulumi.IntPtrInput `pulumi:"minRssi"`
	// list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
	WhitelistedBssids pulumi.StringArrayInput `pulumi:"whitelistedBssids"`
	// list of SSIDs to whitelist
	WhitelistedSsids pulumi.StringArrayInput `pulumi:"whitelistedSsids"`
}

func (SettingRogueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingRogue)(nil)).Elem()
}

func (i SettingRogueArgs) ToSettingRogueOutput() SettingRogueOutput {
	return i.ToSettingRogueOutputWithContext(context.Background())
}

func (i SettingRogueArgs) ToSettingRogueOutputWithContext(ctx context.Context) SettingRogueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRogueOutput)
}

func (i SettingRogueArgs) ToSettingRoguePtrOutput() SettingRoguePtrOutput {
	return i.ToSettingRoguePtrOutputWithContext(context.Background())
}

func (i SettingRogueArgs) ToSettingRoguePtrOutputWithContext(ctx context.Context) SettingRoguePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRogueOutput).ToSettingRoguePtrOutputWithContext(ctx)
}

// SettingRoguePtrInput is an input type that accepts SettingRogueArgs, SettingRoguePtr and SettingRoguePtrOutput values.
// You can construct a concrete instance of `SettingRoguePtrInput` via:
//
//	        SettingRogueArgs{...}
//
//	or:
//
//	        nil
type SettingRoguePtrInput interface {
	pulumi.Input

	ToSettingRoguePtrOutput() SettingRoguePtrOutput
	ToSettingRoguePtrOutputWithContext(context.Context) SettingRoguePtrOutput
}

type settingRoguePtrType SettingRogueArgs

func SettingRoguePtr(v *SettingRogueArgs) SettingRoguePtrInput {
	return (*settingRoguePtrType)(v)
}

func (*settingRoguePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingRogue)(nil)).Elem()
}

func (i *settingRoguePtrType) ToSettingRoguePtrOutput() SettingRoguePtrOutput {
	return i.ToSettingRoguePtrOutputWithContext(context.Background())
}

func (i *settingRoguePtrType) ToSettingRoguePtrOutputWithContext(ctx context.Context) SettingRoguePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRoguePtrOutput)
}

type SettingRogueOutput struct{ *pulumi.OutputState }

func (SettingRogueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingRogue)(nil)).Elem()
}

func (o SettingRogueOutput) ToSettingRogueOutput() SettingRogueOutput {
	return o
}

func (o SettingRogueOutput) ToSettingRogueOutputWithContext(ctx context.Context) SettingRogueOutput {
	return o
}

func (o SettingRogueOutput) ToSettingRoguePtrOutput() SettingRoguePtrOutput {
	return o.ToSettingRoguePtrOutputWithContext(context.Background())
}

func (o SettingRogueOutput) ToSettingRoguePtrOutputWithContext(ctx context.Context) SettingRoguePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingRogue) *SettingRogue {
		return &v
	}).(SettingRoguePtrOutput)
}

// whether or not rogue detection is enabled
func (o SettingRogueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRogue) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// whether or not honeypot detection is enabled
func (o SettingRogueOutput) HoneypotEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRogue) *bool { return v.HoneypotEnabled }).(pulumi.BoolPtrOutput)
}

// minimum duration for a bssid to be considered rogue
func (o SettingRogueOutput) MinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingRogue) *int { return v.MinDuration }).(pulumi.IntPtrOutput)
}

// minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
func (o SettingRogueOutput) MinRssi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingRogue) *int { return v.MinRssi }).(pulumi.IntPtrOutput)
}

// list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
func (o SettingRogueOutput) WhitelistedBssids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingRogue) []string { return v.WhitelistedBssids }).(pulumi.StringArrayOutput)
}

// list of SSIDs to whitelist
func (o SettingRogueOutput) WhitelistedSsids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingRogue) []string { return v.WhitelistedSsids }).(pulumi.StringArrayOutput)
}

type SettingRoguePtrOutput struct{ *pulumi.OutputState }

func (SettingRoguePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingRogue)(nil)).Elem()
}

func (o SettingRoguePtrOutput) ToSettingRoguePtrOutput() SettingRoguePtrOutput {
	return o
}

func (o SettingRoguePtrOutput) ToSettingRoguePtrOutputWithContext(ctx context.Context) SettingRoguePtrOutput {
	return o
}

func (o SettingRoguePtrOutput) Elem() SettingRogueOutput {
	return o.ApplyT(func(v *SettingRogue) SettingRogue {
		if v != nil {
			return *v
		}
		var ret SettingRogue
		return ret
	}).(SettingRogueOutput)
}

// whether or not rogue detection is enabled
func (o SettingRoguePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRogue) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// whether or not honeypot detection is enabled
func (o SettingRoguePtrOutput) HoneypotEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRogue) *bool {
		if v == nil {
			return nil
		}
		return v.HoneypotEnabled
	}).(pulumi.BoolPtrOutput)
}

// minimum duration for a bssid to be considered rogue
func (o SettingRoguePtrOutput) MinDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingRogue) *int {
		if v == nil {
			return nil
		}
		return v.MinDuration
	}).(pulumi.IntPtrOutput)
}

// minimum RSSI for an AP to be considered rogue (ignoring APs that’s far away)
func (o SettingRoguePtrOutput) MinRssi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingRogue) *int {
		if v == nil {
			return nil
		}
		return v.MinRssi
	}).(pulumi.IntPtrOutput)
}

// list of BSSIDs to whitelist. Ex: "cc-:8e-:6f-:d4-:bf-:16", "cc-8e-6f-d4-bf-16", "cc-73-*", "cc:82:*"
func (o SettingRoguePtrOutput) WhitelistedBssids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingRogue) []string {
		if v == nil {
			return nil
		}
		return v.WhitelistedBssids
	}).(pulumi.StringArrayOutput)
}

// list of SSIDs to whitelist
func (o SettingRoguePtrOutput) WhitelistedSsids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingRogue) []string {
		if v == nil {
			return nil
		}
		return v.WhitelistedSsids
	}).(pulumi.StringArrayOutput)
}

type SettingRtsa struct {
	AppWaking             *bool `pulumi:"appWaking"`
	DisableDeadReckoning  *bool `pulumi:"disableDeadReckoning"`
	DisablePressureSensor *bool `pulumi:"disablePressureSensor"`
	Enabled               *bool `pulumi:"enabled"`
	// asset tracking related
	TrackAsset *bool `pulumi:"trackAsset"`
}

// SettingRtsaInput is an input type that accepts SettingRtsaArgs and SettingRtsaOutput values.
// You can construct a concrete instance of `SettingRtsaInput` via:
//
//	SettingRtsaArgs{...}
type SettingRtsaInput interface {
	pulumi.Input

	ToSettingRtsaOutput() SettingRtsaOutput
	ToSettingRtsaOutputWithContext(context.Context) SettingRtsaOutput
}

type SettingRtsaArgs struct {
	AppWaking             pulumi.BoolPtrInput `pulumi:"appWaking"`
	DisableDeadReckoning  pulumi.BoolPtrInput `pulumi:"disableDeadReckoning"`
	DisablePressureSensor pulumi.BoolPtrInput `pulumi:"disablePressureSensor"`
	Enabled               pulumi.BoolPtrInput `pulumi:"enabled"`
	// asset tracking related
	TrackAsset pulumi.BoolPtrInput `pulumi:"trackAsset"`
}

func (SettingRtsaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingRtsa)(nil)).Elem()
}

func (i SettingRtsaArgs) ToSettingRtsaOutput() SettingRtsaOutput {
	return i.ToSettingRtsaOutputWithContext(context.Background())
}

func (i SettingRtsaArgs) ToSettingRtsaOutputWithContext(ctx context.Context) SettingRtsaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRtsaOutput)
}

func (i SettingRtsaArgs) ToSettingRtsaPtrOutput() SettingRtsaPtrOutput {
	return i.ToSettingRtsaPtrOutputWithContext(context.Background())
}

func (i SettingRtsaArgs) ToSettingRtsaPtrOutputWithContext(ctx context.Context) SettingRtsaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRtsaOutput).ToSettingRtsaPtrOutputWithContext(ctx)
}

// SettingRtsaPtrInput is an input type that accepts SettingRtsaArgs, SettingRtsaPtr and SettingRtsaPtrOutput values.
// You can construct a concrete instance of `SettingRtsaPtrInput` via:
//
//	        SettingRtsaArgs{...}
//
//	or:
//
//	        nil
type SettingRtsaPtrInput interface {
	pulumi.Input

	ToSettingRtsaPtrOutput() SettingRtsaPtrOutput
	ToSettingRtsaPtrOutputWithContext(context.Context) SettingRtsaPtrOutput
}

type settingRtsaPtrType SettingRtsaArgs

func SettingRtsaPtr(v *SettingRtsaArgs) SettingRtsaPtrInput {
	return (*settingRtsaPtrType)(v)
}

func (*settingRtsaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingRtsa)(nil)).Elem()
}

func (i *settingRtsaPtrType) ToSettingRtsaPtrOutput() SettingRtsaPtrOutput {
	return i.ToSettingRtsaPtrOutputWithContext(context.Background())
}

func (i *settingRtsaPtrType) ToSettingRtsaPtrOutputWithContext(ctx context.Context) SettingRtsaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingRtsaPtrOutput)
}

type SettingRtsaOutput struct{ *pulumi.OutputState }

func (SettingRtsaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingRtsa)(nil)).Elem()
}

func (o SettingRtsaOutput) ToSettingRtsaOutput() SettingRtsaOutput {
	return o
}

func (o SettingRtsaOutput) ToSettingRtsaOutputWithContext(ctx context.Context) SettingRtsaOutput {
	return o
}

func (o SettingRtsaOutput) ToSettingRtsaPtrOutput() SettingRtsaPtrOutput {
	return o.ToSettingRtsaPtrOutputWithContext(context.Background())
}

func (o SettingRtsaOutput) ToSettingRtsaPtrOutputWithContext(ctx context.Context) SettingRtsaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingRtsa) *SettingRtsa {
		return &v
	}).(SettingRtsaPtrOutput)
}

func (o SettingRtsaOutput) AppWaking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRtsa) *bool { return v.AppWaking }).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaOutput) DisableDeadReckoning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRtsa) *bool { return v.DisableDeadReckoning }).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaOutput) DisablePressureSensor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRtsa) *bool { return v.DisablePressureSensor }).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRtsa) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// asset tracking related
func (o SettingRtsaOutput) TrackAsset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingRtsa) *bool { return v.TrackAsset }).(pulumi.BoolPtrOutput)
}

type SettingRtsaPtrOutput struct{ *pulumi.OutputState }

func (SettingRtsaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingRtsa)(nil)).Elem()
}

func (o SettingRtsaPtrOutput) ToSettingRtsaPtrOutput() SettingRtsaPtrOutput {
	return o
}

func (o SettingRtsaPtrOutput) ToSettingRtsaPtrOutputWithContext(ctx context.Context) SettingRtsaPtrOutput {
	return o
}

func (o SettingRtsaPtrOutput) Elem() SettingRtsaOutput {
	return o.ApplyT(func(v *SettingRtsa) SettingRtsa {
		if v != nil {
			return *v
		}
		var ret SettingRtsa
		return ret
	}).(SettingRtsaOutput)
}

func (o SettingRtsaPtrOutput) AppWaking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRtsa) *bool {
		if v == nil {
			return nil
		}
		return v.AppWaking
	}).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaPtrOutput) DisableDeadReckoning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRtsa) *bool {
		if v == nil {
			return nil
		}
		return v.DisableDeadReckoning
	}).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaPtrOutput) DisablePressureSensor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRtsa) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePressureSensor
	}).(pulumi.BoolPtrOutput)
}

func (o SettingRtsaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRtsa) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// asset tracking related
func (o SettingRtsaPtrOutput) TrackAsset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingRtsa) *bool {
		if v == nil {
			return nil
		}
		return v.TrackAsset
	}).(pulumi.BoolPtrOutput)
}

type SettingSimpleAlert struct {
	ArpFailure  *SettingSimpleAlertArpFailure  `pulumi:"arpFailure"`
	DhcpFailure *SettingSimpleAlertDhcpFailure `pulumi:"dhcpFailure"`
	DnsFailure  *SettingSimpleAlertDnsFailure  `pulumi:"dnsFailure"`
}

// SettingSimpleAlertInput is an input type that accepts SettingSimpleAlertArgs and SettingSimpleAlertOutput values.
// You can construct a concrete instance of `SettingSimpleAlertInput` via:
//
//	SettingSimpleAlertArgs{...}
type SettingSimpleAlertInput interface {
	pulumi.Input

	ToSettingSimpleAlertOutput() SettingSimpleAlertOutput
	ToSettingSimpleAlertOutputWithContext(context.Context) SettingSimpleAlertOutput
}

type SettingSimpleAlertArgs struct {
	ArpFailure  SettingSimpleAlertArpFailurePtrInput  `pulumi:"arpFailure"`
	DhcpFailure SettingSimpleAlertDhcpFailurePtrInput `pulumi:"dhcpFailure"`
	DnsFailure  SettingSimpleAlertDnsFailurePtrInput  `pulumi:"dnsFailure"`
}

func (SettingSimpleAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlert)(nil)).Elem()
}

func (i SettingSimpleAlertArgs) ToSettingSimpleAlertOutput() SettingSimpleAlertOutput {
	return i.ToSettingSimpleAlertOutputWithContext(context.Background())
}

func (i SettingSimpleAlertArgs) ToSettingSimpleAlertOutputWithContext(ctx context.Context) SettingSimpleAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertOutput)
}

func (i SettingSimpleAlertArgs) ToSettingSimpleAlertPtrOutput() SettingSimpleAlertPtrOutput {
	return i.ToSettingSimpleAlertPtrOutputWithContext(context.Background())
}

func (i SettingSimpleAlertArgs) ToSettingSimpleAlertPtrOutputWithContext(ctx context.Context) SettingSimpleAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertOutput).ToSettingSimpleAlertPtrOutputWithContext(ctx)
}

// SettingSimpleAlertPtrInput is an input type that accepts SettingSimpleAlertArgs, SettingSimpleAlertPtr and SettingSimpleAlertPtrOutput values.
// You can construct a concrete instance of `SettingSimpleAlertPtrInput` via:
//
//	        SettingSimpleAlertArgs{...}
//
//	or:
//
//	        nil
type SettingSimpleAlertPtrInput interface {
	pulumi.Input

	ToSettingSimpleAlertPtrOutput() SettingSimpleAlertPtrOutput
	ToSettingSimpleAlertPtrOutputWithContext(context.Context) SettingSimpleAlertPtrOutput
}

type settingSimpleAlertPtrType SettingSimpleAlertArgs

func SettingSimpleAlertPtr(v *SettingSimpleAlertArgs) SettingSimpleAlertPtrInput {
	return (*settingSimpleAlertPtrType)(v)
}

func (*settingSimpleAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlert)(nil)).Elem()
}

func (i *settingSimpleAlertPtrType) ToSettingSimpleAlertPtrOutput() SettingSimpleAlertPtrOutput {
	return i.ToSettingSimpleAlertPtrOutputWithContext(context.Background())
}

func (i *settingSimpleAlertPtrType) ToSettingSimpleAlertPtrOutputWithContext(ctx context.Context) SettingSimpleAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertPtrOutput)
}

type SettingSimpleAlertOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlert)(nil)).Elem()
}

func (o SettingSimpleAlertOutput) ToSettingSimpleAlertOutput() SettingSimpleAlertOutput {
	return o
}

func (o SettingSimpleAlertOutput) ToSettingSimpleAlertOutputWithContext(ctx context.Context) SettingSimpleAlertOutput {
	return o
}

func (o SettingSimpleAlertOutput) ToSettingSimpleAlertPtrOutput() SettingSimpleAlertPtrOutput {
	return o.ToSettingSimpleAlertPtrOutputWithContext(context.Background())
}

func (o SettingSimpleAlertOutput) ToSettingSimpleAlertPtrOutputWithContext(ctx context.Context) SettingSimpleAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSimpleAlert) *SettingSimpleAlert {
		return &v
	}).(SettingSimpleAlertPtrOutput)
}

func (o SettingSimpleAlertOutput) ArpFailure() SettingSimpleAlertArpFailurePtrOutput {
	return o.ApplyT(func(v SettingSimpleAlert) *SettingSimpleAlertArpFailure { return v.ArpFailure }).(SettingSimpleAlertArpFailurePtrOutput)
}

func (o SettingSimpleAlertOutput) DhcpFailure() SettingSimpleAlertDhcpFailurePtrOutput {
	return o.ApplyT(func(v SettingSimpleAlert) *SettingSimpleAlertDhcpFailure { return v.DhcpFailure }).(SettingSimpleAlertDhcpFailurePtrOutput)
}

func (o SettingSimpleAlertOutput) DnsFailure() SettingSimpleAlertDnsFailurePtrOutput {
	return o.ApplyT(func(v SettingSimpleAlert) *SettingSimpleAlertDnsFailure { return v.DnsFailure }).(SettingSimpleAlertDnsFailurePtrOutput)
}

type SettingSimpleAlertPtrOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlert)(nil)).Elem()
}

func (o SettingSimpleAlertPtrOutput) ToSettingSimpleAlertPtrOutput() SettingSimpleAlertPtrOutput {
	return o
}

func (o SettingSimpleAlertPtrOutput) ToSettingSimpleAlertPtrOutputWithContext(ctx context.Context) SettingSimpleAlertPtrOutput {
	return o
}

func (o SettingSimpleAlertPtrOutput) Elem() SettingSimpleAlertOutput {
	return o.ApplyT(func(v *SettingSimpleAlert) SettingSimpleAlert {
		if v != nil {
			return *v
		}
		var ret SettingSimpleAlert
		return ret
	}).(SettingSimpleAlertOutput)
}

func (o SettingSimpleAlertPtrOutput) ArpFailure() SettingSimpleAlertArpFailurePtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlert) *SettingSimpleAlertArpFailure {
		if v == nil {
			return nil
		}
		return v.ArpFailure
	}).(SettingSimpleAlertArpFailurePtrOutput)
}

func (o SettingSimpleAlertPtrOutput) DhcpFailure() SettingSimpleAlertDhcpFailurePtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlert) *SettingSimpleAlertDhcpFailure {
		if v == nil {
			return nil
		}
		return v.DhcpFailure
	}).(SettingSimpleAlertDhcpFailurePtrOutput)
}

func (o SettingSimpleAlertPtrOutput) DnsFailure() SettingSimpleAlertDnsFailurePtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlert) *SettingSimpleAlertDnsFailure {
		if v == nil {
			return nil
		}
		return v.DnsFailure
	}).(SettingSimpleAlertDnsFailurePtrOutput)
}

type SettingSimpleAlertArpFailure struct {
	ClientCount *int `pulumi:"clientCount"`
	// failing within minutes
	Duration      *int `pulumi:"duration"`
	IncidentCount *int `pulumi:"incidentCount"`
}

// SettingSimpleAlertArpFailureInput is an input type that accepts SettingSimpleAlertArpFailureArgs and SettingSimpleAlertArpFailureOutput values.
// You can construct a concrete instance of `SettingSimpleAlertArpFailureInput` via:
//
//	SettingSimpleAlertArpFailureArgs{...}
type SettingSimpleAlertArpFailureInput interface {
	pulumi.Input

	ToSettingSimpleAlertArpFailureOutput() SettingSimpleAlertArpFailureOutput
	ToSettingSimpleAlertArpFailureOutputWithContext(context.Context) SettingSimpleAlertArpFailureOutput
}

type SettingSimpleAlertArpFailureArgs struct {
	ClientCount pulumi.IntPtrInput `pulumi:"clientCount"`
	// failing within minutes
	Duration      pulumi.IntPtrInput `pulumi:"duration"`
	IncidentCount pulumi.IntPtrInput `pulumi:"incidentCount"`
}

func (SettingSimpleAlertArpFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertArpFailure)(nil)).Elem()
}

func (i SettingSimpleAlertArpFailureArgs) ToSettingSimpleAlertArpFailureOutput() SettingSimpleAlertArpFailureOutput {
	return i.ToSettingSimpleAlertArpFailureOutputWithContext(context.Background())
}

func (i SettingSimpleAlertArpFailureArgs) ToSettingSimpleAlertArpFailureOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertArpFailureOutput)
}

func (i SettingSimpleAlertArpFailureArgs) ToSettingSimpleAlertArpFailurePtrOutput() SettingSimpleAlertArpFailurePtrOutput {
	return i.ToSettingSimpleAlertArpFailurePtrOutputWithContext(context.Background())
}

func (i SettingSimpleAlertArpFailureArgs) ToSettingSimpleAlertArpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertArpFailureOutput).ToSettingSimpleAlertArpFailurePtrOutputWithContext(ctx)
}

// SettingSimpleAlertArpFailurePtrInput is an input type that accepts SettingSimpleAlertArpFailureArgs, SettingSimpleAlertArpFailurePtr and SettingSimpleAlertArpFailurePtrOutput values.
// You can construct a concrete instance of `SettingSimpleAlertArpFailurePtrInput` via:
//
//	        SettingSimpleAlertArpFailureArgs{...}
//
//	or:
//
//	        nil
type SettingSimpleAlertArpFailurePtrInput interface {
	pulumi.Input

	ToSettingSimpleAlertArpFailurePtrOutput() SettingSimpleAlertArpFailurePtrOutput
	ToSettingSimpleAlertArpFailurePtrOutputWithContext(context.Context) SettingSimpleAlertArpFailurePtrOutput
}

type settingSimpleAlertArpFailurePtrType SettingSimpleAlertArpFailureArgs

func SettingSimpleAlertArpFailurePtr(v *SettingSimpleAlertArpFailureArgs) SettingSimpleAlertArpFailurePtrInput {
	return (*settingSimpleAlertArpFailurePtrType)(v)
}

func (*settingSimpleAlertArpFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertArpFailure)(nil)).Elem()
}

func (i *settingSimpleAlertArpFailurePtrType) ToSettingSimpleAlertArpFailurePtrOutput() SettingSimpleAlertArpFailurePtrOutput {
	return i.ToSettingSimpleAlertArpFailurePtrOutputWithContext(context.Background())
}

func (i *settingSimpleAlertArpFailurePtrType) ToSettingSimpleAlertArpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertArpFailurePtrOutput)
}

type SettingSimpleAlertArpFailureOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertArpFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertArpFailure)(nil)).Elem()
}

func (o SettingSimpleAlertArpFailureOutput) ToSettingSimpleAlertArpFailureOutput() SettingSimpleAlertArpFailureOutput {
	return o
}

func (o SettingSimpleAlertArpFailureOutput) ToSettingSimpleAlertArpFailureOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailureOutput {
	return o
}

func (o SettingSimpleAlertArpFailureOutput) ToSettingSimpleAlertArpFailurePtrOutput() SettingSimpleAlertArpFailurePtrOutput {
	return o.ToSettingSimpleAlertArpFailurePtrOutputWithContext(context.Background())
}

func (o SettingSimpleAlertArpFailureOutput) ToSettingSimpleAlertArpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSimpleAlertArpFailure) *SettingSimpleAlertArpFailure {
		return &v
	}).(SettingSimpleAlertArpFailurePtrOutput)
}

func (o SettingSimpleAlertArpFailureOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertArpFailure) *int { return v.ClientCount }).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertArpFailureOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertArpFailure) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertArpFailureOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertArpFailure) *int { return v.IncidentCount }).(pulumi.IntPtrOutput)
}

type SettingSimpleAlertArpFailurePtrOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertArpFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertArpFailure)(nil)).Elem()
}

func (o SettingSimpleAlertArpFailurePtrOutput) ToSettingSimpleAlertArpFailurePtrOutput() SettingSimpleAlertArpFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertArpFailurePtrOutput) ToSettingSimpleAlertArpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertArpFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertArpFailurePtrOutput) Elem() SettingSimpleAlertArpFailureOutput {
	return o.ApplyT(func(v *SettingSimpleAlertArpFailure) SettingSimpleAlertArpFailure {
		if v != nil {
			return *v
		}
		var ret SettingSimpleAlertArpFailure
		return ret
	}).(SettingSimpleAlertArpFailureOutput)
}

func (o SettingSimpleAlertArpFailurePtrOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertArpFailure) *int {
		if v == nil {
			return nil
		}
		return v.ClientCount
	}).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertArpFailurePtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertArpFailure) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertArpFailurePtrOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertArpFailure) *int {
		if v == nil {
			return nil
		}
		return v.IncidentCount
	}).(pulumi.IntPtrOutput)
}

type SettingSimpleAlertDhcpFailure struct {
	ClientCount *int `pulumi:"clientCount"`
	// failing within minutes
	Duration      *int `pulumi:"duration"`
	IncidentCount *int `pulumi:"incidentCount"`
}

// SettingSimpleAlertDhcpFailureInput is an input type that accepts SettingSimpleAlertDhcpFailureArgs and SettingSimpleAlertDhcpFailureOutput values.
// You can construct a concrete instance of `SettingSimpleAlertDhcpFailureInput` via:
//
//	SettingSimpleAlertDhcpFailureArgs{...}
type SettingSimpleAlertDhcpFailureInput interface {
	pulumi.Input

	ToSettingSimpleAlertDhcpFailureOutput() SettingSimpleAlertDhcpFailureOutput
	ToSettingSimpleAlertDhcpFailureOutputWithContext(context.Context) SettingSimpleAlertDhcpFailureOutput
}

type SettingSimpleAlertDhcpFailureArgs struct {
	ClientCount pulumi.IntPtrInput `pulumi:"clientCount"`
	// failing within minutes
	Duration      pulumi.IntPtrInput `pulumi:"duration"`
	IncidentCount pulumi.IntPtrInput `pulumi:"incidentCount"`
}

func (SettingSimpleAlertDhcpFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertDhcpFailure)(nil)).Elem()
}

func (i SettingSimpleAlertDhcpFailureArgs) ToSettingSimpleAlertDhcpFailureOutput() SettingSimpleAlertDhcpFailureOutput {
	return i.ToSettingSimpleAlertDhcpFailureOutputWithContext(context.Background())
}

func (i SettingSimpleAlertDhcpFailureArgs) ToSettingSimpleAlertDhcpFailureOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDhcpFailureOutput)
}

func (i SettingSimpleAlertDhcpFailureArgs) ToSettingSimpleAlertDhcpFailurePtrOutput() SettingSimpleAlertDhcpFailurePtrOutput {
	return i.ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(context.Background())
}

func (i SettingSimpleAlertDhcpFailureArgs) ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDhcpFailureOutput).ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(ctx)
}

// SettingSimpleAlertDhcpFailurePtrInput is an input type that accepts SettingSimpleAlertDhcpFailureArgs, SettingSimpleAlertDhcpFailurePtr and SettingSimpleAlertDhcpFailurePtrOutput values.
// You can construct a concrete instance of `SettingSimpleAlertDhcpFailurePtrInput` via:
//
//	        SettingSimpleAlertDhcpFailureArgs{...}
//
//	or:
//
//	        nil
type SettingSimpleAlertDhcpFailurePtrInput interface {
	pulumi.Input

	ToSettingSimpleAlertDhcpFailurePtrOutput() SettingSimpleAlertDhcpFailurePtrOutput
	ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(context.Context) SettingSimpleAlertDhcpFailurePtrOutput
}

type settingSimpleAlertDhcpFailurePtrType SettingSimpleAlertDhcpFailureArgs

func SettingSimpleAlertDhcpFailurePtr(v *SettingSimpleAlertDhcpFailureArgs) SettingSimpleAlertDhcpFailurePtrInput {
	return (*settingSimpleAlertDhcpFailurePtrType)(v)
}

func (*settingSimpleAlertDhcpFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertDhcpFailure)(nil)).Elem()
}

func (i *settingSimpleAlertDhcpFailurePtrType) ToSettingSimpleAlertDhcpFailurePtrOutput() SettingSimpleAlertDhcpFailurePtrOutput {
	return i.ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(context.Background())
}

func (i *settingSimpleAlertDhcpFailurePtrType) ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDhcpFailurePtrOutput)
}

type SettingSimpleAlertDhcpFailureOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertDhcpFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertDhcpFailure)(nil)).Elem()
}

func (o SettingSimpleAlertDhcpFailureOutput) ToSettingSimpleAlertDhcpFailureOutput() SettingSimpleAlertDhcpFailureOutput {
	return o
}

func (o SettingSimpleAlertDhcpFailureOutput) ToSettingSimpleAlertDhcpFailureOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailureOutput {
	return o
}

func (o SettingSimpleAlertDhcpFailureOutput) ToSettingSimpleAlertDhcpFailurePtrOutput() SettingSimpleAlertDhcpFailurePtrOutput {
	return o.ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(context.Background())
}

func (o SettingSimpleAlertDhcpFailureOutput) ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSimpleAlertDhcpFailure) *SettingSimpleAlertDhcpFailure {
		return &v
	}).(SettingSimpleAlertDhcpFailurePtrOutput)
}

func (o SettingSimpleAlertDhcpFailureOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDhcpFailure) *int { return v.ClientCount }).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertDhcpFailureOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDhcpFailure) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertDhcpFailureOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDhcpFailure) *int { return v.IncidentCount }).(pulumi.IntPtrOutput)
}

type SettingSimpleAlertDhcpFailurePtrOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertDhcpFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertDhcpFailure)(nil)).Elem()
}

func (o SettingSimpleAlertDhcpFailurePtrOutput) ToSettingSimpleAlertDhcpFailurePtrOutput() SettingSimpleAlertDhcpFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertDhcpFailurePtrOutput) ToSettingSimpleAlertDhcpFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDhcpFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertDhcpFailurePtrOutput) Elem() SettingSimpleAlertDhcpFailureOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDhcpFailure) SettingSimpleAlertDhcpFailure {
		if v != nil {
			return *v
		}
		var ret SettingSimpleAlertDhcpFailure
		return ret
	}).(SettingSimpleAlertDhcpFailureOutput)
}

func (o SettingSimpleAlertDhcpFailurePtrOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDhcpFailure) *int {
		if v == nil {
			return nil
		}
		return v.ClientCount
	}).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertDhcpFailurePtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDhcpFailure) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertDhcpFailurePtrOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDhcpFailure) *int {
		if v == nil {
			return nil
		}
		return v.IncidentCount
	}).(pulumi.IntPtrOutput)
}

type SettingSimpleAlertDnsFailure struct {
	ClientCount *int `pulumi:"clientCount"`
	// failing within minutes
	Duration      *int `pulumi:"duration"`
	IncidentCount *int `pulumi:"incidentCount"`
}

// SettingSimpleAlertDnsFailureInput is an input type that accepts SettingSimpleAlertDnsFailureArgs and SettingSimpleAlertDnsFailureOutput values.
// You can construct a concrete instance of `SettingSimpleAlertDnsFailureInput` via:
//
//	SettingSimpleAlertDnsFailureArgs{...}
type SettingSimpleAlertDnsFailureInput interface {
	pulumi.Input

	ToSettingSimpleAlertDnsFailureOutput() SettingSimpleAlertDnsFailureOutput
	ToSettingSimpleAlertDnsFailureOutputWithContext(context.Context) SettingSimpleAlertDnsFailureOutput
}

type SettingSimpleAlertDnsFailureArgs struct {
	ClientCount pulumi.IntPtrInput `pulumi:"clientCount"`
	// failing within minutes
	Duration      pulumi.IntPtrInput `pulumi:"duration"`
	IncidentCount pulumi.IntPtrInput `pulumi:"incidentCount"`
}

func (SettingSimpleAlertDnsFailureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertDnsFailure)(nil)).Elem()
}

func (i SettingSimpleAlertDnsFailureArgs) ToSettingSimpleAlertDnsFailureOutput() SettingSimpleAlertDnsFailureOutput {
	return i.ToSettingSimpleAlertDnsFailureOutputWithContext(context.Background())
}

func (i SettingSimpleAlertDnsFailureArgs) ToSettingSimpleAlertDnsFailureOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDnsFailureOutput)
}

func (i SettingSimpleAlertDnsFailureArgs) ToSettingSimpleAlertDnsFailurePtrOutput() SettingSimpleAlertDnsFailurePtrOutput {
	return i.ToSettingSimpleAlertDnsFailurePtrOutputWithContext(context.Background())
}

func (i SettingSimpleAlertDnsFailureArgs) ToSettingSimpleAlertDnsFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDnsFailureOutput).ToSettingSimpleAlertDnsFailurePtrOutputWithContext(ctx)
}

// SettingSimpleAlertDnsFailurePtrInput is an input type that accepts SettingSimpleAlertDnsFailureArgs, SettingSimpleAlertDnsFailurePtr and SettingSimpleAlertDnsFailurePtrOutput values.
// You can construct a concrete instance of `SettingSimpleAlertDnsFailurePtrInput` via:
//
//	        SettingSimpleAlertDnsFailureArgs{...}
//
//	or:
//
//	        nil
type SettingSimpleAlertDnsFailurePtrInput interface {
	pulumi.Input

	ToSettingSimpleAlertDnsFailurePtrOutput() SettingSimpleAlertDnsFailurePtrOutput
	ToSettingSimpleAlertDnsFailurePtrOutputWithContext(context.Context) SettingSimpleAlertDnsFailurePtrOutput
}

type settingSimpleAlertDnsFailurePtrType SettingSimpleAlertDnsFailureArgs

func SettingSimpleAlertDnsFailurePtr(v *SettingSimpleAlertDnsFailureArgs) SettingSimpleAlertDnsFailurePtrInput {
	return (*settingSimpleAlertDnsFailurePtrType)(v)
}

func (*settingSimpleAlertDnsFailurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertDnsFailure)(nil)).Elem()
}

func (i *settingSimpleAlertDnsFailurePtrType) ToSettingSimpleAlertDnsFailurePtrOutput() SettingSimpleAlertDnsFailurePtrOutput {
	return i.ToSettingSimpleAlertDnsFailurePtrOutputWithContext(context.Background())
}

func (i *settingSimpleAlertDnsFailurePtrType) ToSettingSimpleAlertDnsFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSimpleAlertDnsFailurePtrOutput)
}

type SettingSimpleAlertDnsFailureOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertDnsFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSimpleAlertDnsFailure)(nil)).Elem()
}

func (o SettingSimpleAlertDnsFailureOutput) ToSettingSimpleAlertDnsFailureOutput() SettingSimpleAlertDnsFailureOutput {
	return o
}

func (o SettingSimpleAlertDnsFailureOutput) ToSettingSimpleAlertDnsFailureOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailureOutput {
	return o
}

func (o SettingSimpleAlertDnsFailureOutput) ToSettingSimpleAlertDnsFailurePtrOutput() SettingSimpleAlertDnsFailurePtrOutput {
	return o.ToSettingSimpleAlertDnsFailurePtrOutputWithContext(context.Background())
}

func (o SettingSimpleAlertDnsFailureOutput) ToSettingSimpleAlertDnsFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSimpleAlertDnsFailure) *SettingSimpleAlertDnsFailure {
		return &v
	}).(SettingSimpleAlertDnsFailurePtrOutput)
}

func (o SettingSimpleAlertDnsFailureOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDnsFailure) *int { return v.ClientCount }).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertDnsFailureOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDnsFailure) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertDnsFailureOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingSimpleAlertDnsFailure) *int { return v.IncidentCount }).(pulumi.IntPtrOutput)
}

type SettingSimpleAlertDnsFailurePtrOutput struct{ *pulumi.OutputState }

func (SettingSimpleAlertDnsFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSimpleAlertDnsFailure)(nil)).Elem()
}

func (o SettingSimpleAlertDnsFailurePtrOutput) ToSettingSimpleAlertDnsFailurePtrOutput() SettingSimpleAlertDnsFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertDnsFailurePtrOutput) ToSettingSimpleAlertDnsFailurePtrOutputWithContext(ctx context.Context) SettingSimpleAlertDnsFailurePtrOutput {
	return o
}

func (o SettingSimpleAlertDnsFailurePtrOutput) Elem() SettingSimpleAlertDnsFailureOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDnsFailure) SettingSimpleAlertDnsFailure {
		if v != nil {
			return *v
		}
		var ret SettingSimpleAlertDnsFailure
		return ret
	}).(SettingSimpleAlertDnsFailureOutput)
}

func (o SettingSimpleAlertDnsFailurePtrOutput) ClientCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDnsFailure) *int {
		if v == nil {
			return nil
		}
		return v.ClientCount
	}).(pulumi.IntPtrOutput)
}

// failing within minutes
func (o SettingSimpleAlertDnsFailurePtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDnsFailure) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

func (o SettingSimpleAlertDnsFailurePtrOutput) IncidentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingSimpleAlertDnsFailure) *int {
		if v == nil {
			return nil
		}
		return v.IncidentCount
	}).(pulumi.IntPtrOutput)
}

type SettingSkyatp struct {
	Enabled *bool `pulumi:"enabled"`
	// whether to send IP-MAC mapping to SkyATP
	SendIpMacMapping *bool `pulumi:"sendIpMacMapping"`
}

// SettingSkyatpInput is an input type that accepts SettingSkyatpArgs and SettingSkyatpOutput values.
// You can construct a concrete instance of `SettingSkyatpInput` via:
//
//	SettingSkyatpArgs{...}
type SettingSkyatpInput interface {
	pulumi.Input

	ToSettingSkyatpOutput() SettingSkyatpOutput
	ToSettingSkyatpOutputWithContext(context.Context) SettingSkyatpOutput
}

type SettingSkyatpArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// whether to send IP-MAC mapping to SkyATP
	SendIpMacMapping pulumi.BoolPtrInput `pulumi:"sendIpMacMapping"`
}

func (SettingSkyatpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSkyatp)(nil)).Elem()
}

func (i SettingSkyatpArgs) ToSettingSkyatpOutput() SettingSkyatpOutput {
	return i.ToSettingSkyatpOutputWithContext(context.Background())
}

func (i SettingSkyatpArgs) ToSettingSkyatpOutputWithContext(ctx context.Context) SettingSkyatpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSkyatpOutput)
}

func (i SettingSkyatpArgs) ToSettingSkyatpPtrOutput() SettingSkyatpPtrOutput {
	return i.ToSettingSkyatpPtrOutputWithContext(context.Background())
}

func (i SettingSkyatpArgs) ToSettingSkyatpPtrOutputWithContext(ctx context.Context) SettingSkyatpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSkyatpOutput).ToSettingSkyatpPtrOutputWithContext(ctx)
}

// SettingSkyatpPtrInput is an input type that accepts SettingSkyatpArgs, SettingSkyatpPtr and SettingSkyatpPtrOutput values.
// You can construct a concrete instance of `SettingSkyatpPtrInput` via:
//
//	        SettingSkyatpArgs{...}
//
//	or:
//
//	        nil
type SettingSkyatpPtrInput interface {
	pulumi.Input

	ToSettingSkyatpPtrOutput() SettingSkyatpPtrOutput
	ToSettingSkyatpPtrOutputWithContext(context.Context) SettingSkyatpPtrOutput
}

type settingSkyatpPtrType SettingSkyatpArgs

func SettingSkyatpPtr(v *SettingSkyatpArgs) SettingSkyatpPtrInput {
	return (*settingSkyatpPtrType)(v)
}

func (*settingSkyatpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSkyatp)(nil)).Elem()
}

func (i *settingSkyatpPtrType) ToSettingSkyatpPtrOutput() SettingSkyatpPtrOutput {
	return i.ToSettingSkyatpPtrOutputWithContext(context.Background())
}

func (i *settingSkyatpPtrType) ToSettingSkyatpPtrOutputWithContext(ctx context.Context) SettingSkyatpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSkyatpPtrOutput)
}

type SettingSkyatpOutput struct{ *pulumi.OutputState }

func (SettingSkyatpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSkyatp)(nil)).Elem()
}

func (o SettingSkyatpOutput) ToSettingSkyatpOutput() SettingSkyatpOutput {
	return o
}

func (o SettingSkyatpOutput) ToSettingSkyatpOutputWithContext(ctx context.Context) SettingSkyatpOutput {
	return o
}

func (o SettingSkyatpOutput) ToSettingSkyatpPtrOutput() SettingSkyatpPtrOutput {
	return o.ToSettingSkyatpPtrOutputWithContext(context.Background())
}

func (o SettingSkyatpOutput) ToSettingSkyatpPtrOutputWithContext(ctx context.Context) SettingSkyatpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSkyatp) *SettingSkyatp {
		return &v
	}).(SettingSkyatpPtrOutput)
}

func (o SettingSkyatpOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSkyatp) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// whether to send IP-MAC mapping to SkyATP
func (o SettingSkyatpOutput) SendIpMacMapping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSkyatp) *bool { return v.SendIpMacMapping }).(pulumi.BoolPtrOutput)
}

type SettingSkyatpPtrOutput struct{ *pulumi.OutputState }

func (SettingSkyatpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSkyatp)(nil)).Elem()
}

func (o SettingSkyatpPtrOutput) ToSettingSkyatpPtrOutput() SettingSkyatpPtrOutput {
	return o
}

func (o SettingSkyatpPtrOutput) ToSettingSkyatpPtrOutputWithContext(ctx context.Context) SettingSkyatpPtrOutput {
	return o
}

func (o SettingSkyatpPtrOutput) Elem() SettingSkyatpOutput {
	return o.ApplyT(func(v *SettingSkyatp) SettingSkyatp {
		if v != nil {
			return *v
		}
		var ret SettingSkyatp
		return ret
	}).(SettingSkyatpOutput)
}

func (o SettingSkyatpPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSkyatp) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// whether to send IP-MAC mapping to SkyATP
func (o SettingSkyatpPtrOutput) SendIpMacMapping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSkyatp) *bool {
		if v == nil {
			return nil
		}
		return v.SendIpMacMapping
	}).(pulumi.BoolPtrOutput)
}

type SettingSrxApp struct {
	Enabled *bool `pulumi:"enabled"`
}

// SettingSrxAppInput is an input type that accepts SettingSrxAppArgs and SettingSrxAppOutput values.
// You can construct a concrete instance of `SettingSrxAppInput` via:
//
//	SettingSrxAppArgs{...}
type SettingSrxAppInput interface {
	pulumi.Input

	ToSettingSrxAppOutput() SettingSrxAppOutput
	ToSettingSrxAppOutputWithContext(context.Context) SettingSrxAppOutput
}

type SettingSrxAppArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingSrxAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSrxApp)(nil)).Elem()
}

func (i SettingSrxAppArgs) ToSettingSrxAppOutput() SettingSrxAppOutput {
	return i.ToSettingSrxAppOutputWithContext(context.Background())
}

func (i SettingSrxAppArgs) ToSettingSrxAppOutputWithContext(ctx context.Context) SettingSrxAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSrxAppOutput)
}

func (i SettingSrxAppArgs) ToSettingSrxAppPtrOutput() SettingSrxAppPtrOutput {
	return i.ToSettingSrxAppPtrOutputWithContext(context.Background())
}

func (i SettingSrxAppArgs) ToSettingSrxAppPtrOutputWithContext(ctx context.Context) SettingSrxAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSrxAppOutput).ToSettingSrxAppPtrOutputWithContext(ctx)
}

// SettingSrxAppPtrInput is an input type that accepts SettingSrxAppArgs, SettingSrxAppPtr and SettingSrxAppPtrOutput values.
// You can construct a concrete instance of `SettingSrxAppPtrInput` via:
//
//	        SettingSrxAppArgs{...}
//
//	or:
//
//	        nil
type SettingSrxAppPtrInput interface {
	pulumi.Input

	ToSettingSrxAppPtrOutput() SettingSrxAppPtrOutput
	ToSettingSrxAppPtrOutputWithContext(context.Context) SettingSrxAppPtrOutput
}

type settingSrxAppPtrType SettingSrxAppArgs

func SettingSrxAppPtr(v *SettingSrxAppArgs) SettingSrxAppPtrInput {
	return (*settingSrxAppPtrType)(v)
}

func (*settingSrxAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSrxApp)(nil)).Elem()
}

func (i *settingSrxAppPtrType) ToSettingSrxAppPtrOutput() SettingSrxAppPtrOutput {
	return i.ToSettingSrxAppPtrOutputWithContext(context.Background())
}

func (i *settingSrxAppPtrType) ToSettingSrxAppPtrOutputWithContext(ctx context.Context) SettingSrxAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSrxAppPtrOutput)
}

type SettingSrxAppOutput struct{ *pulumi.OutputState }

func (SettingSrxAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSrxApp)(nil)).Elem()
}

func (o SettingSrxAppOutput) ToSettingSrxAppOutput() SettingSrxAppOutput {
	return o
}

func (o SettingSrxAppOutput) ToSettingSrxAppOutputWithContext(ctx context.Context) SettingSrxAppOutput {
	return o
}

func (o SettingSrxAppOutput) ToSettingSrxAppPtrOutput() SettingSrxAppPtrOutput {
	return o.ToSettingSrxAppPtrOutputWithContext(context.Background())
}

func (o SettingSrxAppOutput) ToSettingSrxAppPtrOutputWithContext(ctx context.Context) SettingSrxAppPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSrxApp) *SettingSrxApp {
		return &v
	}).(SettingSrxAppPtrOutput)
}

func (o SettingSrxAppOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSrxApp) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingSrxAppPtrOutput struct{ *pulumi.OutputState }

func (SettingSrxAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSrxApp)(nil)).Elem()
}

func (o SettingSrxAppPtrOutput) ToSettingSrxAppPtrOutput() SettingSrxAppPtrOutput {
	return o
}

func (o SettingSrxAppPtrOutput) ToSettingSrxAppPtrOutputWithContext(ctx context.Context) SettingSrxAppPtrOutput {
	return o
}

func (o SettingSrxAppPtrOutput) Elem() SettingSrxAppOutput {
	return o.ApplyT(func(v *SettingSrxApp) SettingSrxApp {
		if v != nil {
			return *v
		}
		var ret SettingSrxApp
		return ret
	}).(SettingSrxAppOutput)
}

func (o SettingSrxAppPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSrxApp) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingSsr struct {
	ConductorHosts []string `pulumi:"conductorHosts"`
	DisableStats   *bool    `pulumi:"disableStats"`
}

// SettingSsrInput is an input type that accepts SettingSsrArgs and SettingSsrOutput values.
// You can construct a concrete instance of `SettingSsrInput` via:
//
//	SettingSsrArgs{...}
type SettingSsrInput interface {
	pulumi.Input

	ToSettingSsrOutput() SettingSsrOutput
	ToSettingSsrOutputWithContext(context.Context) SettingSsrOutput
}

type SettingSsrArgs struct {
	ConductorHosts pulumi.StringArrayInput `pulumi:"conductorHosts"`
	DisableStats   pulumi.BoolPtrInput     `pulumi:"disableStats"`
}

func (SettingSsrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSsr)(nil)).Elem()
}

func (i SettingSsrArgs) ToSettingSsrOutput() SettingSsrOutput {
	return i.ToSettingSsrOutputWithContext(context.Background())
}

func (i SettingSsrArgs) ToSettingSsrOutputWithContext(ctx context.Context) SettingSsrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSsrOutput)
}

func (i SettingSsrArgs) ToSettingSsrPtrOutput() SettingSsrPtrOutput {
	return i.ToSettingSsrPtrOutputWithContext(context.Background())
}

func (i SettingSsrArgs) ToSettingSsrPtrOutputWithContext(ctx context.Context) SettingSsrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSsrOutput).ToSettingSsrPtrOutputWithContext(ctx)
}

// SettingSsrPtrInput is an input type that accepts SettingSsrArgs, SettingSsrPtr and SettingSsrPtrOutput values.
// You can construct a concrete instance of `SettingSsrPtrInput` via:
//
//	        SettingSsrArgs{...}
//
//	or:
//
//	        nil
type SettingSsrPtrInput interface {
	pulumi.Input

	ToSettingSsrPtrOutput() SettingSsrPtrOutput
	ToSettingSsrPtrOutputWithContext(context.Context) SettingSsrPtrOutput
}

type settingSsrPtrType SettingSsrArgs

func SettingSsrPtr(v *SettingSsrArgs) SettingSsrPtrInput {
	return (*settingSsrPtrType)(v)
}

func (*settingSsrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSsr)(nil)).Elem()
}

func (i *settingSsrPtrType) ToSettingSsrPtrOutput() SettingSsrPtrOutput {
	return i.ToSettingSsrPtrOutputWithContext(context.Background())
}

func (i *settingSsrPtrType) ToSettingSsrPtrOutputWithContext(ctx context.Context) SettingSsrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSsrPtrOutput)
}

type SettingSsrOutput struct{ *pulumi.OutputState }

func (SettingSsrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSsr)(nil)).Elem()
}

func (o SettingSsrOutput) ToSettingSsrOutput() SettingSsrOutput {
	return o
}

func (o SettingSsrOutput) ToSettingSsrOutputWithContext(ctx context.Context) SettingSsrOutput {
	return o
}

func (o SettingSsrOutput) ToSettingSsrPtrOutput() SettingSsrPtrOutput {
	return o.ToSettingSsrPtrOutputWithContext(context.Background())
}

func (o SettingSsrOutput) ToSettingSsrPtrOutputWithContext(ctx context.Context) SettingSsrPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSsr) *SettingSsr {
		return &v
	}).(SettingSsrPtrOutput)
}

func (o SettingSsrOutput) ConductorHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingSsr) []string { return v.ConductorHosts }).(pulumi.StringArrayOutput)
}

func (o SettingSsrOutput) DisableStats() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSsr) *bool { return v.DisableStats }).(pulumi.BoolPtrOutput)
}

type SettingSsrPtrOutput struct{ *pulumi.OutputState }

func (SettingSsrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSsr)(nil)).Elem()
}

func (o SettingSsrPtrOutput) ToSettingSsrPtrOutput() SettingSsrPtrOutput {
	return o
}

func (o SettingSsrPtrOutput) ToSettingSsrPtrOutputWithContext(ctx context.Context) SettingSsrPtrOutput {
	return o
}

func (o SettingSsrPtrOutput) Elem() SettingSsrOutput {
	return o.ApplyT(func(v *SettingSsr) SettingSsr {
		if v != nil {
			return *v
		}
		var ret SettingSsr
		return ret
	}).(SettingSsrOutput)
}

func (o SettingSsrPtrOutput) ConductorHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingSsr) []string {
		if v == nil {
			return nil
		}
		return v.ConductorHosts
	}).(pulumi.StringArrayOutput)
}

func (o SettingSsrPtrOutput) DisableStats() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSsr) *bool {
		if v == nil {
			return nil
		}
		return v.DisableStats
	}).(pulumi.BoolPtrOutput)
}

type SettingSyntheticTest struct {
	Disabled     *bool                             `pulumi:"disabled"`
	Vlans        []SettingSyntheticTestVlan        `pulumi:"vlans"`
	WanSpeedtest *SettingSyntheticTestWanSpeedtest `pulumi:"wanSpeedtest"`
}

// SettingSyntheticTestInput is an input type that accepts SettingSyntheticTestArgs and SettingSyntheticTestOutput values.
// You can construct a concrete instance of `SettingSyntheticTestInput` via:
//
//	SettingSyntheticTestArgs{...}
type SettingSyntheticTestInput interface {
	pulumi.Input

	ToSettingSyntheticTestOutput() SettingSyntheticTestOutput
	ToSettingSyntheticTestOutputWithContext(context.Context) SettingSyntheticTestOutput
}

type SettingSyntheticTestArgs struct {
	Disabled     pulumi.BoolPtrInput                      `pulumi:"disabled"`
	Vlans        SettingSyntheticTestVlanArrayInput       `pulumi:"vlans"`
	WanSpeedtest SettingSyntheticTestWanSpeedtestPtrInput `pulumi:"wanSpeedtest"`
}

func (SettingSyntheticTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTest)(nil)).Elem()
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestOutput() SettingSyntheticTestOutput {
	return i.ToSettingSyntheticTestOutputWithContext(context.Background())
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestOutputWithContext(ctx context.Context) SettingSyntheticTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestOutput)
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return i.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (i SettingSyntheticTestArgs) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestOutput).ToSettingSyntheticTestPtrOutputWithContext(ctx)
}

// SettingSyntheticTestPtrInput is an input type that accepts SettingSyntheticTestArgs, SettingSyntheticTestPtr and SettingSyntheticTestPtrOutput values.
// You can construct a concrete instance of `SettingSyntheticTestPtrInput` via:
//
//	        SettingSyntheticTestArgs{...}
//
//	or:
//
//	        nil
type SettingSyntheticTestPtrInput interface {
	pulumi.Input

	ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput
	ToSettingSyntheticTestPtrOutputWithContext(context.Context) SettingSyntheticTestPtrOutput
}

type settingSyntheticTestPtrType SettingSyntheticTestArgs

func SettingSyntheticTestPtr(v *SettingSyntheticTestArgs) SettingSyntheticTestPtrInput {
	return (*settingSyntheticTestPtrType)(v)
}

func (*settingSyntheticTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTest)(nil)).Elem()
}

func (i *settingSyntheticTestPtrType) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return i.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (i *settingSyntheticTestPtrType) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestPtrOutput)
}

type SettingSyntheticTestOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTest)(nil)).Elem()
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestOutput() SettingSyntheticTestOutput {
	return o
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestOutputWithContext(ctx context.Context) SettingSyntheticTestOutput {
	return o
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return o.ToSettingSyntheticTestPtrOutputWithContext(context.Background())
}

func (o SettingSyntheticTestOutput) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSyntheticTest) *SettingSyntheticTest {
		return &v
	}).(SettingSyntheticTestPtrOutput)
}

func (o SettingSyntheticTestOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTest) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestOutput) Vlans() SettingSyntheticTestVlanArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTest) []SettingSyntheticTestVlan { return v.Vlans }).(SettingSyntheticTestVlanArrayOutput)
}

func (o SettingSyntheticTestOutput) WanSpeedtest() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTest) *SettingSyntheticTestWanSpeedtest { return v.WanSpeedtest }).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestPtrOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTest)(nil)).Elem()
}

func (o SettingSyntheticTestPtrOutput) ToSettingSyntheticTestPtrOutput() SettingSyntheticTestPtrOutput {
	return o
}

func (o SettingSyntheticTestPtrOutput) ToSettingSyntheticTestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestPtrOutput {
	return o
}

func (o SettingSyntheticTestPtrOutput) Elem() SettingSyntheticTestOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) SettingSyntheticTest {
		if v != nil {
			return *v
		}
		var ret SettingSyntheticTest
		return ret
	}).(SettingSyntheticTestOutput)
}

func (o SettingSyntheticTestPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestPtrOutput) Vlans() SettingSyntheticTestVlanArrayOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) []SettingSyntheticTestVlan {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(SettingSyntheticTestVlanArrayOutput)
}

func (o SettingSyntheticTestPtrOutput) WanSpeedtest() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTest) *SettingSyntheticTestWanSpeedtest {
		if v == nil {
			return nil
		}
		return v.WanSpeedtest
	}).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestVlan struct {
	CustomTestUrls []string `pulumi:"customTestUrls"`
	// for some vlans where we don't want this to run
	Disabled *bool    `pulumi:"disabled"`
	VlanIds  []string `pulumi:"vlanIds"`
}

// SettingSyntheticTestVlanInput is an input type that accepts SettingSyntheticTestVlanArgs and SettingSyntheticTestVlanOutput values.
// You can construct a concrete instance of `SettingSyntheticTestVlanInput` via:
//
//	SettingSyntheticTestVlanArgs{...}
type SettingSyntheticTestVlanInput interface {
	pulumi.Input

	ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput
	ToSettingSyntheticTestVlanOutputWithContext(context.Context) SettingSyntheticTestVlanOutput
}

type SettingSyntheticTestVlanArgs struct {
	CustomTestUrls pulumi.StringArrayInput `pulumi:"customTestUrls"`
	// for some vlans where we don't want this to run
	Disabled pulumi.BoolPtrInput     `pulumi:"disabled"`
	VlanIds  pulumi.StringArrayInput `pulumi:"vlanIds"`
}

func (SettingSyntheticTestVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestVlan)(nil)).Elem()
}

func (i SettingSyntheticTestVlanArgs) ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput {
	return i.ToSettingSyntheticTestVlanOutputWithContext(context.Background())
}

func (i SettingSyntheticTestVlanArgs) ToSettingSyntheticTestVlanOutputWithContext(ctx context.Context) SettingSyntheticTestVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestVlanOutput)
}

// SettingSyntheticTestVlanArrayInput is an input type that accepts SettingSyntheticTestVlanArray and SettingSyntheticTestVlanArrayOutput values.
// You can construct a concrete instance of `SettingSyntheticTestVlanArrayInput` via:
//
//	SettingSyntheticTestVlanArray{ SettingSyntheticTestVlanArgs{...} }
type SettingSyntheticTestVlanArrayInput interface {
	pulumi.Input

	ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput
	ToSettingSyntheticTestVlanArrayOutputWithContext(context.Context) SettingSyntheticTestVlanArrayOutput
}

type SettingSyntheticTestVlanArray []SettingSyntheticTestVlanInput

func (SettingSyntheticTestVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingSyntheticTestVlan)(nil)).Elem()
}

func (i SettingSyntheticTestVlanArray) ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput {
	return i.ToSettingSyntheticTestVlanArrayOutputWithContext(context.Background())
}

func (i SettingSyntheticTestVlanArray) ToSettingSyntheticTestVlanArrayOutputWithContext(ctx context.Context) SettingSyntheticTestVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestVlanArrayOutput)
}

type SettingSyntheticTestVlanOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestVlan)(nil)).Elem()
}

func (o SettingSyntheticTestVlanOutput) ToSettingSyntheticTestVlanOutput() SettingSyntheticTestVlanOutput {
	return o
}

func (o SettingSyntheticTestVlanOutput) ToSettingSyntheticTestVlanOutputWithContext(ctx context.Context) SettingSyntheticTestVlanOutput {
	return o
}

func (o SettingSyntheticTestVlanOutput) CustomTestUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) []string { return v.CustomTestUrls }).(pulumi.StringArrayOutput)
}

// for some vlans where we don't want this to run
func (o SettingSyntheticTestVlanOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o SettingSyntheticTestVlanOutput) VlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingSyntheticTestVlan) []string { return v.VlanIds }).(pulumi.StringArrayOutput)
}

type SettingSyntheticTestVlanArrayOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SettingSyntheticTestVlan)(nil)).Elem()
}

func (o SettingSyntheticTestVlanArrayOutput) ToSettingSyntheticTestVlanArrayOutput() SettingSyntheticTestVlanArrayOutput {
	return o
}

func (o SettingSyntheticTestVlanArrayOutput) ToSettingSyntheticTestVlanArrayOutputWithContext(ctx context.Context) SettingSyntheticTestVlanArrayOutput {
	return o
}

func (o SettingSyntheticTestVlanArrayOutput) Index(i pulumi.IntInput) SettingSyntheticTestVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SettingSyntheticTestVlan {
		return vs[0].([]SettingSyntheticTestVlan)[vs[1].(int)]
	}).(SettingSyntheticTestVlanOutput)
}

type SettingSyntheticTestWanSpeedtest struct {
	Enabled *bool `pulumi:"enabled"`
	// any / HH:MM (24-hour format)
	TimeOfDay *string `pulumi:"timeOfDay"`
}

// SettingSyntheticTestWanSpeedtestInput is an input type that accepts SettingSyntheticTestWanSpeedtestArgs and SettingSyntheticTestWanSpeedtestOutput values.
// You can construct a concrete instance of `SettingSyntheticTestWanSpeedtestInput` via:
//
//	SettingSyntheticTestWanSpeedtestArgs{...}
type SettingSyntheticTestWanSpeedtestInput interface {
	pulumi.Input

	ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput
	ToSettingSyntheticTestWanSpeedtestOutputWithContext(context.Context) SettingSyntheticTestWanSpeedtestOutput
}

type SettingSyntheticTestWanSpeedtestArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// any / HH:MM (24-hour format)
	TimeOfDay pulumi.StringPtrInput `pulumi:"timeOfDay"`
}

func (SettingSyntheticTestWanSpeedtestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput {
	return i.ToSettingSyntheticTestWanSpeedtestOutputWithContext(context.Background())
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestOutput)
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return i.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (i SettingSyntheticTestWanSpeedtestArgs) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestOutput).ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx)
}

// SettingSyntheticTestWanSpeedtestPtrInput is an input type that accepts SettingSyntheticTestWanSpeedtestArgs, SettingSyntheticTestWanSpeedtestPtr and SettingSyntheticTestWanSpeedtestPtrOutput values.
// You can construct a concrete instance of `SettingSyntheticTestWanSpeedtestPtrInput` via:
//
//	        SettingSyntheticTestWanSpeedtestArgs{...}
//
//	or:
//
//	        nil
type SettingSyntheticTestWanSpeedtestPtrInput interface {
	pulumi.Input

	ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput
	ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Context) SettingSyntheticTestWanSpeedtestPtrOutput
}

type settingSyntheticTestWanSpeedtestPtrType SettingSyntheticTestWanSpeedtestArgs

func SettingSyntheticTestWanSpeedtestPtr(v *SettingSyntheticTestWanSpeedtestArgs) SettingSyntheticTestWanSpeedtestPtrInput {
	return (*settingSyntheticTestWanSpeedtestPtrType)(v)
}

func (*settingSyntheticTestWanSpeedtestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (i *settingSyntheticTestWanSpeedtestPtrType) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return i.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (i *settingSyntheticTestWanSpeedtestPtrType) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

type SettingSyntheticTestWanSpeedtestOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestWanSpeedtestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestOutput() SettingSyntheticTestWanSpeedtestOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(context.Background())
}

func (o SettingSyntheticTestWanSpeedtestOutput) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingSyntheticTestWanSpeedtest) *SettingSyntheticTestWanSpeedtest {
		return &v
	}).(SettingSyntheticTestWanSpeedtestPtrOutput)
}

func (o SettingSyntheticTestWanSpeedtestOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestWanSpeedtest) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format)
func (o SettingSyntheticTestWanSpeedtestOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingSyntheticTestWanSpeedtest) *string { return v.TimeOfDay }).(pulumi.StringPtrOutput)
}

type SettingSyntheticTestWanSpeedtestPtrOutput struct{ *pulumi.OutputState }

func (SettingSyntheticTestWanSpeedtestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingSyntheticTestWanSpeedtest)(nil)).Elem()
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) ToSettingSyntheticTestWanSpeedtestPtrOutput() SettingSyntheticTestWanSpeedtestPtrOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) ToSettingSyntheticTestWanSpeedtestPtrOutputWithContext(ctx context.Context) SettingSyntheticTestWanSpeedtestPtrOutput {
	return o
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) Elem() SettingSyntheticTestWanSpeedtestOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) SettingSyntheticTestWanSpeedtest {
		if v != nil {
			return *v
		}
		var ret SettingSyntheticTestWanSpeedtest
		return ret
	}).(SettingSyntheticTestWanSpeedtestOutput)
}

func (o SettingSyntheticTestWanSpeedtestPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// any / HH:MM (24-hour format)
func (o SettingSyntheticTestWanSpeedtestPtrOutput) TimeOfDay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingSyntheticTestWanSpeedtest) *string {
		if v == nil {
			return nil
		}
		return v.TimeOfDay
	}).(pulumi.StringPtrOutput)
}

type SettingUplinkPortConfig struct {
	// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
	Dot1x *bool `pulumi:"dot1x"`
	// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
	KeepWlansUpIfDown *bool `pulumi:"keepWlansUpIfDown"`
}

// SettingUplinkPortConfigInput is an input type that accepts SettingUplinkPortConfigArgs and SettingUplinkPortConfigOutput values.
// You can construct a concrete instance of `SettingUplinkPortConfigInput` via:
//
//	SettingUplinkPortConfigArgs{...}
type SettingUplinkPortConfigInput interface {
	pulumi.Input

	ToSettingUplinkPortConfigOutput() SettingUplinkPortConfigOutput
	ToSettingUplinkPortConfigOutputWithContext(context.Context) SettingUplinkPortConfigOutput
}

type SettingUplinkPortConfigArgs struct {
	// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
	Dot1x pulumi.BoolPtrInput `pulumi:"dot1x"`
	// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
	KeepWlansUpIfDown pulumi.BoolPtrInput `pulumi:"keepWlansUpIfDown"`
}

func (SettingUplinkPortConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingUplinkPortConfig)(nil)).Elem()
}

func (i SettingUplinkPortConfigArgs) ToSettingUplinkPortConfigOutput() SettingUplinkPortConfigOutput {
	return i.ToSettingUplinkPortConfigOutputWithContext(context.Background())
}

func (i SettingUplinkPortConfigArgs) ToSettingUplinkPortConfigOutputWithContext(ctx context.Context) SettingUplinkPortConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUplinkPortConfigOutput)
}

func (i SettingUplinkPortConfigArgs) ToSettingUplinkPortConfigPtrOutput() SettingUplinkPortConfigPtrOutput {
	return i.ToSettingUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (i SettingUplinkPortConfigArgs) ToSettingUplinkPortConfigPtrOutputWithContext(ctx context.Context) SettingUplinkPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUplinkPortConfigOutput).ToSettingUplinkPortConfigPtrOutputWithContext(ctx)
}

// SettingUplinkPortConfigPtrInput is an input type that accepts SettingUplinkPortConfigArgs, SettingUplinkPortConfigPtr and SettingUplinkPortConfigPtrOutput values.
// You can construct a concrete instance of `SettingUplinkPortConfigPtrInput` via:
//
//	        SettingUplinkPortConfigArgs{...}
//
//	or:
//
//	        nil
type SettingUplinkPortConfigPtrInput interface {
	pulumi.Input

	ToSettingUplinkPortConfigPtrOutput() SettingUplinkPortConfigPtrOutput
	ToSettingUplinkPortConfigPtrOutputWithContext(context.Context) SettingUplinkPortConfigPtrOutput
}

type settingUplinkPortConfigPtrType SettingUplinkPortConfigArgs

func SettingUplinkPortConfigPtr(v *SettingUplinkPortConfigArgs) SettingUplinkPortConfigPtrInput {
	return (*settingUplinkPortConfigPtrType)(v)
}

func (*settingUplinkPortConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingUplinkPortConfig)(nil)).Elem()
}

func (i *settingUplinkPortConfigPtrType) ToSettingUplinkPortConfigPtrOutput() SettingUplinkPortConfigPtrOutput {
	return i.ToSettingUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (i *settingUplinkPortConfigPtrType) ToSettingUplinkPortConfigPtrOutputWithContext(ctx context.Context) SettingUplinkPortConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingUplinkPortConfigPtrOutput)
}

type SettingUplinkPortConfigOutput struct{ *pulumi.OutputState }

func (SettingUplinkPortConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingUplinkPortConfig)(nil)).Elem()
}

func (o SettingUplinkPortConfigOutput) ToSettingUplinkPortConfigOutput() SettingUplinkPortConfigOutput {
	return o
}

func (o SettingUplinkPortConfigOutput) ToSettingUplinkPortConfigOutputWithContext(ctx context.Context) SettingUplinkPortConfigOutput {
	return o
}

func (o SettingUplinkPortConfigOutput) ToSettingUplinkPortConfigPtrOutput() SettingUplinkPortConfigPtrOutput {
	return o.ToSettingUplinkPortConfigPtrOutputWithContext(context.Background())
}

func (o SettingUplinkPortConfigOutput) ToSettingUplinkPortConfigPtrOutputWithContext(ctx context.Context) SettingUplinkPortConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingUplinkPortConfig) *SettingUplinkPortConfig {
		return &v
	}).(SettingUplinkPortConfigPtrOutput)
}

// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
func (o SettingUplinkPortConfigOutput) Dot1x() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingUplinkPortConfig) *bool { return v.Dot1x }).(pulumi.BoolPtrOutput)
}

// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
func (o SettingUplinkPortConfigOutput) KeepWlansUpIfDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingUplinkPortConfig) *bool { return v.KeepWlansUpIfDown }).(pulumi.BoolPtrOutput)
}

type SettingUplinkPortConfigPtrOutput struct{ *pulumi.OutputState }

func (SettingUplinkPortConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingUplinkPortConfig)(nil)).Elem()
}

func (o SettingUplinkPortConfigPtrOutput) ToSettingUplinkPortConfigPtrOutput() SettingUplinkPortConfigPtrOutput {
	return o
}

func (o SettingUplinkPortConfigPtrOutput) ToSettingUplinkPortConfigPtrOutputWithContext(ctx context.Context) SettingUplinkPortConfigPtrOutput {
	return o
}

func (o SettingUplinkPortConfigPtrOutput) Elem() SettingUplinkPortConfigOutput {
	return o.ApplyT(func(v *SettingUplinkPortConfig) SettingUplinkPortConfig {
		if v != nil {
			return *v
		}
		var ret SettingUplinkPortConfig
		return ret
	}).(SettingUplinkPortConfigOutput)
}

// Whether to do 802.1x against uplink switch. When enaled, AP cert will be used to do EAP-TLS and the Org's CA Cert has to be provisioned at the switch
func (o SettingUplinkPortConfigPtrOutput) Dot1x() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingUplinkPortConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Dot1x
	}).(pulumi.BoolPtrOutput)
}

// by default, WLANs are disabled when uplink is down. In some scenario, like SiteSurvey, one would want the AP to keep sending beacons.
func (o SettingUplinkPortConfigPtrOutput) KeepWlansUpIfDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingUplinkPortConfig) *bool {
		if v == nil {
			return nil
		}
		return v.KeepWlansUpIfDown
	}).(pulumi.BoolPtrOutput)
}

type SettingVna struct {
	// enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
	Enabled *bool `pulumi:"enabled"`
}

// SettingVnaInput is an input type that accepts SettingVnaArgs and SettingVnaOutput values.
// You can construct a concrete instance of `SettingVnaInput` via:
//
//	SettingVnaArgs{...}
type SettingVnaInput interface {
	pulumi.Input

	ToSettingVnaOutput() SettingVnaOutput
	ToSettingVnaOutputWithContext(context.Context) SettingVnaOutput
}

type SettingVnaArgs struct {
	// enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingVnaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVna)(nil)).Elem()
}

func (i SettingVnaArgs) ToSettingVnaOutput() SettingVnaOutput {
	return i.ToSettingVnaOutputWithContext(context.Background())
}

func (i SettingVnaArgs) ToSettingVnaOutputWithContext(ctx context.Context) SettingVnaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVnaOutput)
}

func (i SettingVnaArgs) ToSettingVnaPtrOutput() SettingVnaPtrOutput {
	return i.ToSettingVnaPtrOutputWithContext(context.Background())
}

func (i SettingVnaArgs) ToSettingVnaPtrOutputWithContext(ctx context.Context) SettingVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVnaOutput).ToSettingVnaPtrOutputWithContext(ctx)
}

// SettingVnaPtrInput is an input type that accepts SettingVnaArgs, SettingVnaPtr and SettingVnaPtrOutput values.
// You can construct a concrete instance of `SettingVnaPtrInput` via:
//
//	        SettingVnaArgs{...}
//
//	or:
//
//	        nil
type SettingVnaPtrInput interface {
	pulumi.Input

	ToSettingVnaPtrOutput() SettingVnaPtrOutput
	ToSettingVnaPtrOutputWithContext(context.Context) SettingVnaPtrOutput
}

type settingVnaPtrType SettingVnaArgs

func SettingVnaPtr(v *SettingVnaArgs) SettingVnaPtrInput {
	return (*settingVnaPtrType)(v)
}

func (*settingVnaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingVna)(nil)).Elem()
}

func (i *settingVnaPtrType) ToSettingVnaPtrOutput() SettingVnaPtrOutput {
	return i.ToSettingVnaPtrOutputWithContext(context.Background())
}

func (i *settingVnaPtrType) ToSettingVnaPtrOutputWithContext(ctx context.Context) SettingVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVnaPtrOutput)
}

type SettingVnaOutput struct{ *pulumi.OutputState }

func (SettingVnaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVna)(nil)).Elem()
}

func (o SettingVnaOutput) ToSettingVnaOutput() SettingVnaOutput {
	return o
}

func (o SettingVnaOutput) ToSettingVnaOutputWithContext(ctx context.Context) SettingVnaOutput {
	return o
}

func (o SettingVnaOutput) ToSettingVnaPtrOutput() SettingVnaPtrOutput {
	return o.ToSettingVnaPtrOutputWithContext(context.Background())
}

func (o SettingVnaOutput) ToSettingVnaPtrOutputWithContext(ctx context.Context) SettingVnaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingVna) *SettingVna {
		return &v
	}).(SettingVnaPtrOutput)
}

// enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
func (o SettingVnaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingVna) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingVnaPtrOutput struct{ *pulumi.OutputState }

func (SettingVnaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingVna)(nil)).Elem()
}

func (o SettingVnaPtrOutput) ToSettingVnaPtrOutput() SettingVnaPtrOutput {
	return o
}

func (o SettingVnaPtrOutput) ToSettingVnaPtrOutputWithContext(ctx context.Context) SettingVnaPtrOutput {
	return o
}

func (o SettingVnaPtrOutput) Elem() SettingVnaOutput {
	return o.ApplyT(func(v *SettingVna) SettingVna {
		if v != nil {
			return *v
		}
		var ret SettingVna
		return ret
	}).(SettingVnaOutput)
}

// enable Virtual Network Assistant (using SUB-VNA license). This applied to AP / Switch / Gateway
func (o SettingVnaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingVna) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingVsInstance struct {
	Networks []string `pulumi:"networks"`
}

// SettingVsInstanceInput is an input type that accepts SettingVsInstanceArgs and SettingVsInstanceOutput values.
// You can construct a concrete instance of `SettingVsInstanceInput` via:
//
//	SettingVsInstanceArgs{...}
type SettingVsInstanceInput interface {
	pulumi.Input

	ToSettingVsInstanceOutput() SettingVsInstanceOutput
	ToSettingVsInstanceOutputWithContext(context.Context) SettingVsInstanceOutput
}

type SettingVsInstanceArgs struct {
	Networks pulumi.StringArrayInput `pulumi:"networks"`
}

func (SettingVsInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVsInstance)(nil)).Elem()
}

func (i SettingVsInstanceArgs) ToSettingVsInstanceOutput() SettingVsInstanceOutput {
	return i.ToSettingVsInstanceOutputWithContext(context.Background())
}

func (i SettingVsInstanceArgs) ToSettingVsInstanceOutputWithContext(ctx context.Context) SettingVsInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVsInstanceOutput)
}

// SettingVsInstanceMapInput is an input type that accepts SettingVsInstanceMap and SettingVsInstanceMapOutput values.
// You can construct a concrete instance of `SettingVsInstanceMapInput` via:
//
//	SettingVsInstanceMap{ "key": SettingVsInstanceArgs{...} }
type SettingVsInstanceMapInput interface {
	pulumi.Input

	ToSettingVsInstanceMapOutput() SettingVsInstanceMapOutput
	ToSettingVsInstanceMapOutputWithContext(context.Context) SettingVsInstanceMapOutput
}

type SettingVsInstanceMap map[string]SettingVsInstanceInput

func (SettingVsInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SettingVsInstance)(nil)).Elem()
}

func (i SettingVsInstanceMap) ToSettingVsInstanceMapOutput() SettingVsInstanceMapOutput {
	return i.ToSettingVsInstanceMapOutputWithContext(context.Background())
}

func (i SettingVsInstanceMap) ToSettingVsInstanceMapOutputWithContext(ctx context.Context) SettingVsInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingVsInstanceMapOutput)
}

type SettingVsInstanceOutput struct{ *pulumi.OutputState }

func (SettingVsInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingVsInstance)(nil)).Elem()
}

func (o SettingVsInstanceOutput) ToSettingVsInstanceOutput() SettingVsInstanceOutput {
	return o
}

func (o SettingVsInstanceOutput) ToSettingVsInstanceOutputWithContext(ctx context.Context) SettingVsInstanceOutput {
	return o
}

func (o SettingVsInstanceOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingVsInstance) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

type SettingVsInstanceMapOutput struct{ *pulumi.OutputState }

func (SettingVsInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SettingVsInstance)(nil)).Elem()
}

func (o SettingVsInstanceMapOutput) ToSettingVsInstanceMapOutput() SettingVsInstanceMapOutput {
	return o
}

func (o SettingVsInstanceMapOutput) ToSettingVsInstanceMapOutputWithContext(ctx context.Context) SettingVsInstanceMapOutput {
	return o
}

func (o SettingVsInstanceMapOutput) MapIndex(k pulumi.StringInput) SettingVsInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SettingVsInstance {
		return vs[0].(map[string]SettingVsInstance)[vs[1].(string)]
	}).(SettingVsInstanceOutput)
}

type SettingWanVna struct {
	Enabled *bool `pulumi:"enabled"`
}

// SettingWanVnaInput is an input type that accepts SettingWanVnaArgs and SettingWanVnaOutput values.
// You can construct a concrete instance of `SettingWanVnaInput` via:
//
//	SettingWanVnaArgs{...}
type SettingWanVnaInput interface {
	pulumi.Input

	ToSettingWanVnaOutput() SettingWanVnaOutput
	ToSettingWanVnaOutputWithContext(context.Context) SettingWanVnaOutput
}

type SettingWanVnaArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingWanVnaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWanVna)(nil)).Elem()
}

func (i SettingWanVnaArgs) ToSettingWanVnaOutput() SettingWanVnaOutput {
	return i.ToSettingWanVnaOutputWithContext(context.Background())
}

func (i SettingWanVnaArgs) ToSettingWanVnaOutputWithContext(ctx context.Context) SettingWanVnaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWanVnaOutput)
}

func (i SettingWanVnaArgs) ToSettingWanVnaPtrOutput() SettingWanVnaPtrOutput {
	return i.ToSettingWanVnaPtrOutputWithContext(context.Background())
}

func (i SettingWanVnaArgs) ToSettingWanVnaPtrOutputWithContext(ctx context.Context) SettingWanVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWanVnaOutput).ToSettingWanVnaPtrOutputWithContext(ctx)
}

// SettingWanVnaPtrInput is an input type that accepts SettingWanVnaArgs, SettingWanVnaPtr and SettingWanVnaPtrOutput values.
// You can construct a concrete instance of `SettingWanVnaPtrInput` via:
//
//	        SettingWanVnaArgs{...}
//
//	or:
//
//	        nil
type SettingWanVnaPtrInput interface {
	pulumi.Input

	ToSettingWanVnaPtrOutput() SettingWanVnaPtrOutput
	ToSettingWanVnaPtrOutputWithContext(context.Context) SettingWanVnaPtrOutput
}

type settingWanVnaPtrType SettingWanVnaArgs

func SettingWanVnaPtr(v *SettingWanVnaArgs) SettingWanVnaPtrInput {
	return (*settingWanVnaPtrType)(v)
}

func (*settingWanVnaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWanVna)(nil)).Elem()
}

func (i *settingWanVnaPtrType) ToSettingWanVnaPtrOutput() SettingWanVnaPtrOutput {
	return i.ToSettingWanVnaPtrOutputWithContext(context.Background())
}

func (i *settingWanVnaPtrType) ToSettingWanVnaPtrOutputWithContext(ctx context.Context) SettingWanVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWanVnaPtrOutput)
}

type SettingWanVnaOutput struct{ *pulumi.OutputState }

func (SettingWanVnaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWanVna)(nil)).Elem()
}

func (o SettingWanVnaOutput) ToSettingWanVnaOutput() SettingWanVnaOutput {
	return o
}

func (o SettingWanVnaOutput) ToSettingWanVnaOutputWithContext(ctx context.Context) SettingWanVnaOutput {
	return o
}

func (o SettingWanVnaOutput) ToSettingWanVnaPtrOutput() SettingWanVnaPtrOutput {
	return o.ToSettingWanVnaPtrOutputWithContext(context.Background())
}

func (o SettingWanVnaOutput) ToSettingWanVnaPtrOutputWithContext(ctx context.Context) SettingWanVnaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingWanVna) *SettingWanVna {
		return &v
	}).(SettingWanVnaPtrOutput)
}

func (o SettingWanVnaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWanVna) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingWanVnaPtrOutput struct{ *pulumi.OutputState }

func (SettingWanVnaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWanVna)(nil)).Elem()
}

func (o SettingWanVnaPtrOutput) ToSettingWanVnaPtrOutput() SettingWanVnaPtrOutput {
	return o
}

func (o SettingWanVnaPtrOutput) ToSettingWanVnaPtrOutputWithContext(ctx context.Context) SettingWanVnaPtrOutput {
	return o
}

func (o SettingWanVnaPtrOutput) Elem() SettingWanVnaOutput {
	return o.ApplyT(func(v *SettingWanVna) SettingWanVna {
		if v != nil {
			return *v
		}
		var ret SettingWanVna
		return ret
	}).(SettingWanVnaOutput)
}

func (o SettingWanVnaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWanVna) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingWids struct {
	RepeatedAuthFailures *SettingWidsRepeatedAuthFailures `pulumi:"repeatedAuthFailures"`
}

// SettingWidsInput is an input type that accepts SettingWidsArgs and SettingWidsOutput values.
// You can construct a concrete instance of `SettingWidsInput` via:
//
//	SettingWidsArgs{...}
type SettingWidsInput interface {
	pulumi.Input

	ToSettingWidsOutput() SettingWidsOutput
	ToSettingWidsOutputWithContext(context.Context) SettingWidsOutput
}

type SettingWidsArgs struct {
	RepeatedAuthFailures SettingWidsRepeatedAuthFailuresPtrInput `pulumi:"repeatedAuthFailures"`
}

func (SettingWidsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWids)(nil)).Elem()
}

func (i SettingWidsArgs) ToSettingWidsOutput() SettingWidsOutput {
	return i.ToSettingWidsOutputWithContext(context.Background())
}

func (i SettingWidsArgs) ToSettingWidsOutputWithContext(ctx context.Context) SettingWidsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsOutput)
}

func (i SettingWidsArgs) ToSettingWidsPtrOutput() SettingWidsPtrOutput {
	return i.ToSettingWidsPtrOutputWithContext(context.Background())
}

func (i SettingWidsArgs) ToSettingWidsPtrOutputWithContext(ctx context.Context) SettingWidsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsOutput).ToSettingWidsPtrOutputWithContext(ctx)
}

// SettingWidsPtrInput is an input type that accepts SettingWidsArgs, SettingWidsPtr and SettingWidsPtrOutput values.
// You can construct a concrete instance of `SettingWidsPtrInput` via:
//
//	        SettingWidsArgs{...}
//
//	or:
//
//	        nil
type SettingWidsPtrInput interface {
	pulumi.Input

	ToSettingWidsPtrOutput() SettingWidsPtrOutput
	ToSettingWidsPtrOutputWithContext(context.Context) SettingWidsPtrOutput
}

type settingWidsPtrType SettingWidsArgs

func SettingWidsPtr(v *SettingWidsArgs) SettingWidsPtrInput {
	return (*settingWidsPtrType)(v)
}

func (*settingWidsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWids)(nil)).Elem()
}

func (i *settingWidsPtrType) ToSettingWidsPtrOutput() SettingWidsPtrOutput {
	return i.ToSettingWidsPtrOutputWithContext(context.Background())
}

func (i *settingWidsPtrType) ToSettingWidsPtrOutputWithContext(ctx context.Context) SettingWidsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsPtrOutput)
}

type SettingWidsOutput struct{ *pulumi.OutputState }

func (SettingWidsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWids)(nil)).Elem()
}

func (o SettingWidsOutput) ToSettingWidsOutput() SettingWidsOutput {
	return o
}

func (o SettingWidsOutput) ToSettingWidsOutputWithContext(ctx context.Context) SettingWidsOutput {
	return o
}

func (o SettingWidsOutput) ToSettingWidsPtrOutput() SettingWidsPtrOutput {
	return o.ToSettingWidsPtrOutputWithContext(context.Background())
}

func (o SettingWidsOutput) ToSettingWidsPtrOutputWithContext(ctx context.Context) SettingWidsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingWids) *SettingWids {
		return &v
	}).(SettingWidsPtrOutput)
}

func (o SettingWidsOutput) RepeatedAuthFailures() SettingWidsRepeatedAuthFailuresPtrOutput {
	return o.ApplyT(func(v SettingWids) *SettingWidsRepeatedAuthFailures { return v.RepeatedAuthFailures }).(SettingWidsRepeatedAuthFailuresPtrOutput)
}

type SettingWidsPtrOutput struct{ *pulumi.OutputState }

func (SettingWidsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWids)(nil)).Elem()
}

func (o SettingWidsPtrOutput) ToSettingWidsPtrOutput() SettingWidsPtrOutput {
	return o
}

func (o SettingWidsPtrOutput) ToSettingWidsPtrOutputWithContext(ctx context.Context) SettingWidsPtrOutput {
	return o
}

func (o SettingWidsPtrOutput) Elem() SettingWidsOutput {
	return o.ApplyT(func(v *SettingWids) SettingWids {
		if v != nil {
			return *v
		}
		var ret SettingWids
		return ret
	}).(SettingWidsOutput)
}

func (o SettingWidsPtrOutput) RepeatedAuthFailures() SettingWidsRepeatedAuthFailuresPtrOutput {
	return o.ApplyT(func(v *SettingWids) *SettingWidsRepeatedAuthFailures {
		if v == nil {
			return nil
		}
		return v.RepeatedAuthFailures
	}).(SettingWidsRepeatedAuthFailuresPtrOutput)
}

type SettingWidsRepeatedAuthFailures struct {
	// window where a trigger will be detected and action to be taken (in seconds)
	Duration *int `pulumi:"duration"`
	// count of events to trigger
	Threshold *int `pulumi:"threshold"`
}

// SettingWidsRepeatedAuthFailuresInput is an input type that accepts SettingWidsRepeatedAuthFailuresArgs and SettingWidsRepeatedAuthFailuresOutput values.
// You can construct a concrete instance of `SettingWidsRepeatedAuthFailuresInput` via:
//
//	SettingWidsRepeatedAuthFailuresArgs{...}
type SettingWidsRepeatedAuthFailuresInput interface {
	pulumi.Input

	ToSettingWidsRepeatedAuthFailuresOutput() SettingWidsRepeatedAuthFailuresOutput
	ToSettingWidsRepeatedAuthFailuresOutputWithContext(context.Context) SettingWidsRepeatedAuthFailuresOutput
}

type SettingWidsRepeatedAuthFailuresArgs struct {
	// window where a trigger will be detected and action to be taken (in seconds)
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// count of events to trigger
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
}

func (SettingWidsRepeatedAuthFailuresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWidsRepeatedAuthFailures)(nil)).Elem()
}

func (i SettingWidsRepeatedAuthFailuresArgs) ToSettingWidsRepeatedAuthFailuresOutput() SettingWidsRepeatedAuthFailuresOutput {
	return i.ToSettingWidsRepeatedAuthFailuresOutputWithContext(context.Background())
}

func (i SettingWidsRepeatedAuthFailuresArgs) ToSettingWidsRepeatedAuthFailuresOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsRepeatedAuthFailuresOutput)
}

func (i SettingWidsRepeatedAuthFailuresArgs) ToSettingWidsRepeatedAuthFailuresPtrOutput() SettingWidsRepeatedAuthFailuresPtrOutput {
	return i.ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(context.Background())
}

func (i SettingWidsRepeatedAuthFailuresArgs) ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsRepeatedAuthFailuresOutput).ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(ctx)
}

// SettingWidsRepeatedAuthFailuresPtrInput is an input type that accepts SettingWidsRepeatedAuthFailuresArgs, SettingWidsRepeatedAuthFailuresPtr and SettingWidsRepeatedAuthFailuresPtrOutput values.
// You can construct a concrete instance of `SettingWidsRepeatedAuthFailuresPtrInput` via:
//
//	        SettingWidsRepeatedAuthFailuresArgs{...}
//
//	or:
//
//	        nil
type SettingWidsRepeatedAuthFailuresPtrInput interface {
	pulumi.Input

	ToSettingWidsRepeatedAuthFailuresPtrOutput() SettingWidsRepeatedAuthFailuresPtrOutput
	ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(context.Context) SettingWidsRepeatedAuthFailuresPtrOutput
}

type settingWidsRepeatedAuthFailuresPtrType SettingWidsRepeatedAuthFailuresArgs

func SettingWidsRepeatedAuthFailuresPtr(v *SettingWidsRepeatedAuthFailuresArgs) SettingWidsRepeatedAuthFailuresPtrInput {
	return (*settingWidsRepeatedAuthFailuresPtrType)(v)
}

func (*settingWidsRepeatedAuthFailuresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWidsRepeatedAuthFailures)(nil)).Elem()
}

func (i *settingWidsRepeatedAuthFailuresPtrType) ToSettingWidsRepeatedAuthFailuresPtrOutput() SettingWidsRepeatedAuthFailuresPtrOutput {
	return i.ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(context.Background())
}

func (i *settingWidsRepeatedAuthFailuresPtrType) ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWidsRepeatedAuthFailuresPtrOutput)
}

type SettingWidsRepeatedAuthFailuresOutput struct{ *pulumi.OutputState }

func (SettingWidsRepeatedAuthFailuresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWidsRepeatedAuthFailures)(nil)).Elem()
}

func (o SettingWidsRepeatedAuthFailuresOutput) ToSettingWidsRepeatedAuthFailuresOutput() SettingWidsRepeatedAuthFailuresOutput {
	return o
}

func (o SettingWidsRepeatedAuthFailuresOutput) ToSettingWidsRepeatedAuthFailuresOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresOutput {
	return o
}

func (o SettingWidsRepeatedAuthFailuresOutput) ToSettingWidsRepeatedAuthFailuresPtrOutput() SettingWidsRepeatedAuthFailuresPtrOutput {
	return o.ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(context.Background())
}

func (o SettingWidsRepeatedAuthFailuresOutput) ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingWidsRepeatedAuthFailures) *SettingWidsRepeatedAuthFailures {
		return &v
	}).(SettingWidsRepeatedAuthFailuresPtrOutput)
}

// window where a trigger will be detected and action to be taken (in seconds)
func (o SettingWidsRepeatedAuthFailuresOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingWidsRepeatedAuthFailures) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// count of events to trigger
func (o SettingWidsRepeatedAuthFailuresOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingWidsRepeatedAuthFailures) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

type SettingWidsRepeatedAuthFailuresPtrOutput struct{ *pulumi.OutputState }

func (SettingWidsRepeatedAuthFailuresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWidsRepeatedAuthFailures)(nil)).Elem()
}

func (o SettingWidsRepeatedAuthFailuresPtrOutput) ToSettingWidsRepeatedAuthFailuresPtrOutput() SettingWidsRepeatedAuthFailuresPtrOutput {
	return o
}

func (o SettingWidsRepeatedAuthFailuresPtrOutput) ToSettingWidsRepeatedAuthFailuresPtrOutputWithContext(ctx context.Context) SettingWidsRepeatedAuthFailuresPtrOutput {
	return o
}

func (o SettingWidsRepeatedAuthFailuresPtrOutput) Elem() SettingWidsRepeatedAuthFailuresOutput {
	return o.ApplyT(func(v *SettingWidsRepeatedAuthFailures) SettingWidsRepeatedAuthFailures {
		if v != nil {
			return *v
		}
		var ret SettingWidsRepeatedAuthFailures
		return ret
	}).(SettingWidsRepeatedAuthFailuresOutput)
}

// window where a trigger will be detected and action to be taken (in seconds)
func (o SettingWidsRepeatedAuthFailuresPtrOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingWidsRepeatedAuthFailures) *int {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.IntPtrOutput)
}

// count of events to trigger
func (o SettingWidsRepeatedAuthFailuresPtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingWidsRepeatedAuthFailures) *int {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.IntPtrOutput)
}

type SettingWifi struct {
	CiscoEnabled *bool `pulumi:"ciscoEnabled"`
	// whether to disable 11k
	Disable11k                        *bool `pulumi:"disable11k"`
	DisableRadiosWhenPowerConstrained *bool `pulumi:"disableRadiosWhenPowerConstrained"`
	// when proxyArp is enabled, check for arp spoofing.
	EnableArpSpoofCheck       *bool `pulumi:"enableArpSpoofCheck"`
	EnableSharedRadioScanning *bool `pulumi:"enableSharedRadioScanning"`
	// enable WIFI feature (using SUB-MAN license)
	Enabled *bool `pulumi:"enabled"`
	// whether to locate connected clients
	LocateConnected *bool `pulumi:"locateConnected"`
	// whether to locate unconnected clients
	LocateUnconnected *bool `pulumi:"locateUnconnected"`
	// whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
	MeshAllowDfs *bool `pulumi:"meshAllowDfs"`
	// used to enable/disable CRM
	MeshEnableCrm *bool `pulumi:"meshEnableCrm"`
	// whether to enable Mesh feature for the site
	MeshEnabled *bool `pulumi:"meshEnabled"`
	// optional passphrase of mesh networking, default is generated randomly
	MeshPsk *string `pulumi:"meshPsk"`
	// optional ssid of mesh networking, default is based on site_id
	MeshSsid *string `pulumi:"meshSsid"`
	// enum: `default`, `disabled`, `enabled`
	ProxyArp *string `pulumi:"proxyArp"`
}

// SettingWifiInput is an input type that accepts SettingWifiArgs and SettingWifiOutput values.
// You can construct a concrete instance of `SettingWifiInput` via:
//
//	SettingWifiArgs{...}
type SettingWifiInput interface {
	pulumi.Input

	ToSettingWifiOutput() SettingWifiOutput
	ToSettingWifiOutputWithContext(context.Context) SettingWifiOutput
}

type SettingWifiArgs struct {
	CiscoEnabled pulumi.BoolPtrInput `pulumi:"ciscoEnabled"`
	// whether to disable 11k
	Disable11k                        pulumi.BoolPtrInput `pulumi:"disable11k"`
	DisableRadiosWhenPowerConstrained pulumi.BoolPtrInput `pulumi:"disableRadiosWhenPowerConstrained"`
	// when proxyArp is enabled, check for arp spoofing.
	EnableArpSpoofCheck       pulumi.BoolPtrInput `pulumi:"enableArpSpoofCheck"`
	EnableSharedRadioScanning pulumi.BoolPtrInput `pulumi:"enableSharedRadioScanning"`
	// enable WIFI feature (using SUB-MAN license)
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// whether to locate connected clients
	LocateConnected pulumi.BoolPtrInput `pulumi:"locateConnected"`
	// whether to locate unconnected clients
	LocateUnconnected pulumi.BoolPtrInput `pulumi:"locateUnconnected"`
	// whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
	MeshAllowDfs pulumi.BoolPtrInput `pulumi:"meshAllowDfs"`
	// used to enable/disable CRM
	MeshEnableCrm pulumi.BoolPtrInput `pulumi:"meshEnableCrm"`
	// whether to enable Mesh feature for the site
	MeshEnabled pulumi.BoolPtrInput `pulumi:"meshEnabled"`
	// optional passphrase of mesh networking, default is generated randomly
	MeshPsk pulumi.StringPtrInput `pulumi:"meshPsk"`
	// optional ssid of mesh networking, default is based on site_id
	MeshSsid pulumi.StringPtrInput `pulumi:"meshSsid"`
	// enum: `default`, `disabled`, `enabled`
	ProxyArp pulumi.StringPtrInput `pulumi:"proxyArp"`
}

func (SettingWifiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWifi)(nil)).Elem()
}

func (i SettingWifiArgs) ToSettingWifiOutput() SettingWifiOutput {
	return i.ToSettingWifiOutputWithContext(context.Background())
}

func (i SettingWifiArgs) ToSettingWifiOutputWithContext(ctx context.Context) SettingWifiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWifiOutput)
}

func (i SettingWifiArgs) ToSettingWifiPtrOutput() SettingWifiPtrOutput {
	return i.ToSettingWifiPtrOutputWithContext(context.Background())
}

func (i SettingWifiArgs) ToSettingWifiPtrOutputWithContext(ctx context.Context) SettingWifiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWifiOutput).ToSettingWifiPtrOutputWithContext(ctx)
}

// SettingWifiPtrInput is an input type that accepts SettingWifiArgs, SettingWifiPtr and SettingWifiPtrOutput values.
// You can construct a concrete instance of `SettingWifiPtrInput` via:
//
//	        SettingWifiArgs{...}
//
//	or:
//
//	        nil
type SettingWifiPtrInput interface {
	pulumi.Input

	ToSettingWifiPtrOutput() SettingWifiPtrOutput
	ToSettingWifiPtrOutputWithContext(context.Context) SettingWifiPtrOutput
}

type settingWifiPtrType SettingWifiArgs

func SettingWifiPtr(v *SettingWifiArgs) SettingWifiPtrInput {
	return (*settingWifiPtrType)(v)
}

func (*settingWifiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWifi)(nil)).Elem()
}

func (i *settingWifiPtrType) ToSettingWifiPtrOutput() SettingWifiPtrOutput {
	return i.ToSettingWifiPtrOutputWithContext(context.Background())
}

func (i *settingWifiPtrType) ToSettingWifiPtrOutputWithContext(ctx context.Context) SettingWifiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWifiPtrOutput)
}

type SettingWifiOutput struct{ *pulumi.OutputState }

func (SettingWifiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWifi)(nil)).Elem()
}

func (o SettingWifiOutput) ToSettingWifiOutput() SettingWifiOutput {
	return o
}

func (o SettingWifiOutput) ToSettingWifiOutputWithContext(ctx context.Context) SettingWifiOutput {
	return o
}

func (o SettingWifiOutput) ToSettingWifiPtrOutput() SettingWifiPtrOutput {
	return o.ToSettingWifiPtrOutputWithContext(context.Background())
}

func (o SettingWifiOutput) ToSettingWifiPtrOutputWithContext(ctx context.Context) SettingWifiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingWifi) *SettingWifi {
		return &v
	}).(SettingWifiPtrOutput)
}

func (o SettingWifiOutput) CiscoEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.CiscoEnabled }).(pulumi.BoolPtrOutput)
}

// whether to disable 11k
func (o SettingWifiOutput) Disable11k() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.Disable11k }).(pulumi.BoolPtrOutput)
}

func (o SettingWifiOutput) DisableRadiosWhenPowerConstrained() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.DisableRadiosWhenPowerConstrained }).(pulumi.BoolPtrOutput)
}

// when proxyArp is enabled, check for arp spoofing.
func (o SettingWifiOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.EnableArpSpoofCheck }).(pulumi.BoolPtrOutput)
}

func (o SettingWifiOutput) EnableSharedRadioScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.EnableSharedRadioScanning }).(pulumi.BoolPtrOutput)
}

// enable WIFI feature (using SUB-MAN license)
func (o SettingWifiOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// whether to locate connected clients
func (o SettingWifiOutput) LocateConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.LocateConnected }).(pulumi.BoolPtrOutput)
}

// whether to locate unconnected clients
func (o SettingWifiOutput) LocateUnconnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.LocateUnconnected }).(pulumi.BoolPtrOutput)
}

// whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
func (o SettingWifiOutput) MeshAllowDfs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.MeshAllowDfs }).(pulumi.BoolPtrOutput)
}

// used to enable/disable CRM
func (o SettingWifiOutput) MeshEnableCrm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.MeshEnableCrm }).(pulumi.BoolPtrOutput)
}

// whether to enable Mesh feature for the site
func (o SettingWifiOutput) MeshEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWifi) *bool { return v.MeshEnabled }).(pulumi.BoolPtrOutput)
}

// optional passphrase of mesh networking, default is generated randomly
func (o SettingWifiOutput) MeshPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingWifi) *string { return v.MeshPsk }).(pulumi.StringPtrOutput)
}

// optional ssid of mesh networking, default is based on site_id
func (o SettingWifiOutput) MeshSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingWifi) *string { return v.MeshSsid }).(pulumi.StringPtrOutput)
}

// enum: `default`, `disabled`, `enabled`
func (o SettingWifiOutput) ProxyArp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingWifi) *string { return v.ProxyArp }).(pulumi.StringPtrOutput)
}

type SettingWifiPtrOutput struct{ *pulumi.OutputState }

func (SettingWifiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWifi)(nil)).Elem()
}

func (o SettingWifiPtrOutput) ToSettingWifiPtrOutput() SettingWifiPtrOutput {
	return o
}

func (o SettingWifiPtrOutput) ToSettingWifiPtrOutputWithContext(ctx context.Context) SettingWifiPtrOutput {
	return o
}

func (o SettingWifiPtrOutput) Elem() SettingWifiOutput {
	return o.ApplyT(func(v *SettingWifi) SettingWifi {
		if v != nil {
			return *v
		}
		var ret SettingWifi
		return ret
	}).(SettingWifiOutput)
}

func (o SettingWifiPtrOutput) CiscoEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.CiscoEnabled
	}).(pulumi.BoolPtrOutput)
}

// whether to disable 11k
func (o SettingWifiPtrOutput) Disable11k() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.Disable11k
	}).(pulumi.BoolPtrOutput)
}

func (o SettingWifiPtrOutput) DisableRadiosWhenPowerConstrained() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.DisableRadiosWhenPowerConstrained
	}).(pulumi.BoolPtrOutput)
}

// when proxyArp is enabled, check for arp spoofing.
func (o SettingWifiPtrOutput) EnableArpSpoofCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.EnableArpSpoofCheck
	}).(pulumi.BoolPtrOutput)
}

func (o SettingWifiPtrOutput) EnableSharedRadioScanning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSharedRadioScanning
	}).(pulumi.BoolPtrOutput)
}

// enable WIFI feature (using SUB-MAN license)
func (o SettingWifiPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// whether to locate connected clients
func (o SettingWifiPtrOutput) LocateConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.LocateConnected
	}).(pulumi.BoolPtrOutput)
}

// whether to locate unconnected clients
func (o SettingWifiPtrOutput) LocateUnconnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.LocateUnconnected
	}).(pulumi.BoolPtrOutput)
}

// whether to allow Mesh to use DFS channels. For DFS channels, Remote Mesh AP would have to do CAC when scanning for new Base AP, which is slow and will distrupt the connection. If roaming is desired, keep it disabled.
func (o SettingWifiPtrOutput) MeshAllowDfs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.MeshAllowDfs
	}).(pulumi.BoolPtrOutput)
}

// used to enable/disable CRM
func (o SettingWifiPtrOutput) MeshEnableCrm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.MeshEnableCrm
	}).(pulumi.BoolPtrOutput)
}

// whether to enable Mesh feature for the site
func (o SettingWifiPtrOutput) MeshEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *bool {
		if v == nil {
			return nil
		}
		return v.MeshEnabled
	}).(pulumi.BoolPtrOutput)
}

// optional passphrase of mesh networking, default is generated randomly
func (o SettingWifiPtrOutput) MeshPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *string {
		if v == nil {
			return nil
		}
		return v.MeshPsk
	}).(pulumi.StringPtrOutput)
}

// optional ssid of mesh networking, default is based on site_id
func (o SettingWifiPtrOutput) MeshSsid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *string {
		if v == nil {
			return nil
		}
		return v.MeshSsid
	}).(pulumi.StringPtrOutput)
}

// enum: `default`, `disabled`, `enabled`
func (o SettingWifiPtrOutput) ProxyArp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingWifi) *string {
		if v == nil {
			return nil
		}
		return v.ProxyArp
	}).(pulumi.StringPtrOutput)
}

type SettingWiredVna struct {
	Enabled *bool `pulumi:"enabled"`
}

// SettingWiredVnaInput is an input type that accepts SettingWiredVnaArgs and SettingWiredVnaOutput values.
// You can construct a concrete instance of `SettingWiredVnaInput` via:
//
//	SettingWiredVnaArgs{...}
type SettingWiredVnaInput interface {
	pulumi.Input

	ToSettingWiredVnaOutput() SettingWiredVnaOutput
	ToSettingWiredVnaOutputWithContext(context.Context) SettingWiredVnaOutput
}

type SettingWiredVnaArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (SettingWiredVnaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWiredVna)(nil)).Elem()
}

func (i SettingWiredVnaArgs) ToSettingWiredVnaOutput() SettingWiredVnaOutput {
	return i.ToSettingWiredVnaOutputWithContext(context.Background())
}

func (i SettingWiredVnaArgs) ToSettingWiredVnaOutputWithContext(ctx context.Context) SettingWiredVnaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWiredVnaOutput)
}

func (i SettingWiredVnaArgs) ToSettingWiredVnaPtrOutput() SettingWiredVnaPtrOutput {
	return i.ToSettingWiredVnaPtrOutputWithContext(context.Background())
}

func (i SettingWiredVnaArgs) ToSettingWiredVnaPtrOutputWithContext(ctx context.Context) SettingWiredVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWiredVnaOutput).ToSettingWiredVnaPtrOutputWithContext(ctx)
}

// SettingWiredVnaPtrInput is an input type that accepts SettingWiredVnaArgs, SettingWiredVnaPtr and SettingWiredVnaPtrOutput values.
// You can construct a concrete instance of `SettingWiredVnaPtrInput` via:
//
//	        SettingWiredVnaArgs{...}
//
//	or:
//
//	        nil
type SettingWiredVnaPtrInput interface {
	pulumi.Input

	ToSettingWiredVnaPtrOutput() SettingWiredVnaPtrOutput
	ToSettingWiredVnaPtrOutputWithContext(context.Context) SettingWiredVnaPtrOutput
}

type settingWiredVnaPtrType SettingWiredVnaArgs

func SettingWiredVnaPtr(v *SettingWiredVnaArgs) SettingWiredVnaPtrInput {
	return (*settingWiredVnaPtrType)(v)
}

func (*settingWiredVnaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWiredVna)(nil)).Elem()
}

func (i *settingWiredVnaPtrType) ToSettingWiredVnaPtrOutput() SettingWiredVnaPtrOutput {
	return i.ToSettingWiredVnaPtrOutputWithContext(context.Background())
}

func (i *settingWiredVnaPtrType) ToSettingWiredVnaPtrOutputWithContext(ctx context.Context) SettingWiredVnaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingWiredVnaPtrOutput)
}

type SettingWiredVnaOutput struct{ *pulumi.OutputState }

func (SettingWiredVnaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingWiredVna)(nil)).Elem()
}

func (o SettingWiredVnaOutput) ToSettingWiredVnaOutput() SettingWiredVnaOutput {
	return o
}

func (o SettingWiredVnaOutput) ToSettingWiredVnaOutputWithContext(ctx context.Context) SettingWiredVnaOutput {
	return o
}

func (o SettingWiredVnaOutput) ToSettingWiredVnaPtrOutput() SettingWiredVnaPtrOutput {
	return o.ToSettingWiredVnaPtrOutputWithContext(context.Background())
}

func (o SettingWiredVnaOutput) ToSettingWiredVnaPtrOutputWithContext(ctx context.Context) SettingWiredVnaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingWiredVna) *SettingWiredVna {
		return &v
	}).(SettingWiredVnaPtrOutput)
}

func (o SettingWiredVnaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingWiredVna) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type SettingWiredVnaPtrOutput struct{ *pulumi.OutputState }

func (SettingWiredVnaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingWiredVna)(nil)).Elem()
}

func (o SettingWiredVnaPtrOutput) ToSettingWiredVnaPtrOutput() SettingWiredVnaPtrOutput {
	return o
}

func (o SettingWiredVnaPtrOutput) ToSettingWiredVnaPtrOutputWithContext(ctx context.Context) SettingWiredVnaPtrOutput {
	return o
}

func (o SettingWiredVnaPtrOutput) Elem() SettingWiredVnaOutput {
	return o.ApplyT(func(v *SettingWiredVna) SettingWiredVna {
		if v != nil {
			return *v
		}
		var ret SettingWiredVna
		return ret
	}).(SettingWiredVnaOutput)
}

func (o SettingWiredVnaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingWiredVna) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type SettingZoneOccupancyAlert struct {
	// list of email addresses to send email notifications when the alert threshold is reached
	EmailNotifiers []string `pulumi:"emailNotifiers"`
	// indicate whether zone occupancy alert is enabled for the site
	Enabled *bool `pulumi:"enabled"`
	// sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
	Threshold *int `pulumi:"threshold"`
}

// SettingZoneOccupancyAlertInput is an input type that accepts SettingZoneOccupancyAlertArgs and SettingZoneOccupancyAlertOutput values.
// You can construct a concrete instance of `SettingZoneOccupancyAlertInput` via:
//
//	SettingZoneOccupancyAlertArgs{...}
type SettingZoneOccupancyAlertInput interface {
	pulumi.Input

	ToSettingZoneOccupancyAlertOutput() SettingZoneOccupancyAlertOutput
	ToSettingZoneOccupancyAlertOutputWithContext(context.Context) SettingZoneOccupancyAlertOutput
}

type SettingZoneOccupancyAlertArgs struct {
	// list of email addresses to send email notifications when the alert threshold is reached
	EmailNotifiers pulumi.StringArrayInput `pulumi:"emailNotifiers"`
	// indicate whether zone occupancy alert is enabled for the site
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
}

func (SettingZoneOccupancyAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingZoneOccupancyAlert)(nil)).Elem()
}

func (i SettingZoneOccupancyAlertArgs) ToSettingZoneOccupancyAlertOutput() SettingZoneOccupancyAlertOutput {
	return i.ToSettingZoneOccupancyAlertOutputWithContext(context.Background())
}

func (i SettingZoneOccupancyAlertArgs) ToSettingZoneOccupancyAlertOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingZoneOccupancyAlertOutput)
}

func (i SettingZoneOccupancyAlertArgs) ToSettingZoneOccupancyAlertPtrOutput() SettingZoneOccupancyAlertPtrOutput {
	return i.ToSettingZoneOccupancyAlertPtrOutputWithContext(context.Background())
}

func (i SettingZoneOccupancyAlertArgs) ToSettingZoneOccupancyAlertPtrOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingZoneOccupancyAlertOutput).ToSettingZoneOccupancyAlertPtrOutputWithContext(ctx)
}

// SettingZoneOccupancyAlertPtrInput is an input type that accepts SettingZoneOccupancyAlertArgs, SettingZoneOccupancyAlertPtr and SettingZoneOccupancyAlertPtrOutput values.
// You can construct a concrete instance of `SettingZoneOccupancyAlertPtrInput` via:
//
//	        SettingZoneOccupancyAlertArgs{...}
//
//	or:
//
//	        nil
type SettingZoneOccupancyAlertPtrInput interface {
	pulumi.Input

	ToSettingZoneOccupancyAlertPtrOutput() SettingZoneOccupancyAlertPtrOutput
	ToSettingZoneOccupancyAlertPtrOutputWithContext(context.Context) SettingZoneOccupancyAlertPtrOutput
}

type settingZoneOccupancyAlertPtrType SettingZoneOccupancyAlertArgs

func SettingZoneOccupancyAlertPtr(v *SettingZoneOccupancyAlertArgs) SettingZoneOccupancyAlertPtrInput {
	return (*settingZoneOccupancyAlertPtrType)(v)
}

func (*settingZoneOccupancyAlertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingZoneOccupancyAlert)(nil)).Elem()
}

func (i *settingZoneOccupancyAlertPtrType) ToSettingZoneOccupancyAlertPtrOutput() SettingZoneOccupancyAlertPtrOutput {
	return i.ToSettingZoneOccupancyAlertPtrOutputWithContext(context.Background())
}

func (i *settingZoneOccupancyAlertPtrType) ToSettingZoneOccupancyAlertPtrOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingZoneOccupancyAlertPtrOutput)
}

type SettingZoneOccupancyAlertOutput struct{ *pulumi.OutputState }

func (SettingZoneOccupancyAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingZoneOccupancyAlert)(nil)).Elem()
}

func (o SettingZoneOccupancyAlertOutput) ToSettingZoneOccupancyAlertOutput() SettingZoneOccupancyAlertOutput {
	return o
}

func (o SettingZoneOccupancyAlertOutput) ToSettingZoneOccupancyAlertOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertOutput {
	return o
}

func (o SettingZoneOccupancyAlertOutput) ToSettingZoneOccupancyAlertPtrOutput() SettingZoneOccupancyAlertPtrOutput {
	return o.ToSettingZoneOccupancyAlertPtrOutputWithContext(context.Background())
}

func (o SettingZoneOccupancyAlertOutput) ToSettingZoneOccupancyAlertPtrOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SettingZoneOccupancyAlert) *SettingZoneOccupancyAlert {
		return &v
	}).(SettingZoneOccupancyAlertPtrOutput)
}

// list of email addresses to send email notifications when the alert threshold is reached
func (o SettingZoneOccupancyAlertOutput) EmailNotifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingZoneOccupancyAlert) []string { return v.EmailNotifiers }).(pulumi.StringArrayOutput)
}

// indicate whether zone occupancy alert is enabled for the site
func (o SettingZoneOccupancyAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingZoneOccupancyAlert) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
func (o SettingZoneOccupancyAlertOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SettingZoneOccupancyAlert) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

type SettingZoneOccupancyAlertPtrOutput struct{ *pulumi.OutputState }

func (SettingZoneOccupancyAlertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingZoneOccupancyAlert)(nil)).Elem()
}

func (o SettingZoneOccupancyAlertPtrOutput) ToSettingZoneOccupancyAlertPtrOutput() SettingZoneOccupancyAlertPtrOutput {
	return o
}

func (o SettingZoneOccupancyAlertPtrOutput) ToSettingZoneOccupancyAlertPtrOutputWithContext(ctx context.Context) SettingZoneOccupancyAlertPtrOutput {
	return o
}

func (o SettingZoneOccupancyAlertPtrOutput) Elem() SettingZoneOccupancyAlertOutput {
	return o.ApplyT(func(v *SettingZoneOccupancyAlert) SettingZoneOccupancyAlert {
		if v != nil {
			return *v
		}
		var ret SettingZoneOccupancyAlert
		return ret
	}).(SettingZoneOccupancyAlertOutput)
}

// list of email addresses to send email notifications when the alert threshold is reached
func (o SettingZoneOccupancyAlertPtrOutput) EmailNotifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SettingZoneOccupancyAlert) []string {
		if v == nil {
			return nil
		}
		return v.EmailNotifiers
	}).(pulumi.StringArrayOutput)
}

// indicate whether zone occupancy alert is enabled for the site
func (o SettingZoneOccupancyAlertPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingZoneOccupancyAlert) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// sending zone-occupancy-alert webhook message only if a zone stays non-compliant (i.e. actual occupancy > occupancy_limit) for a minimum duration specified in the threshold, in minutes
func (o SettingZoneOccupancyAlertPtrOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SettingZoneOccupancyAlert) *int {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.IntPtrOutput)
}

type WlanAcctServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port *int `pulumi:"port"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// WlanAcctServerInput is an input type that accepts WlanAcctServerArgs and WlanAcctServerOutput values.
// You can construct a concrete instance of `WlanAcctServerInput` via:
//
//	WlanAcctServerArgs{...}
type WlanAcctServerInput interface {
	pulumi.Input

	ToWlanAcctServerOutput() WlanAcctServerOutput
	ToWlanAcctServerOutputWithContext(context.Context) WlanAcctServerOutput
}

type WlanAcctServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Acct port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (WlanAcctServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAcctServer)(nil)).Elem()
}

func (i WlanAcctServerArgs) ToWlanAcctServerOutput() WlanAcctServerOutput {
	return i.ToWlanAcctServerOutputWithContext(context.Background())
}

func (i WlanAcctServerArgs) ToWlanAcctServerOutputWithContext(ctx context.Context) WlanAcctServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAcctServerOutput)
}

// WlanAcctServerArrayInput is an input type that accepts WlanAcctServerArray and WlanAcctServerArrayOutput values.
// You can construct a concrete instance of `WlanAcctServerArrayInput` via:
//
//	WlanAcctServerArray{ WlanAcctServerArgs{...} }
type WlanAcctServerArrayInput interface {
	pulumi.Input

	ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput
	ToWlanAcctServerArrayOutputWithContext(context.Context) WlanAcctServerArrayOutput
}

type WlanAcctServerArray []WlanAcctServerInput

func (WlanAcctServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAcctServer)(nil)).Elem()
}

func (i WlanAcctServerArray) ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput {
	return i.ToWlanAcctServerArrayOutputWithContext(context.Background())
}

func (i WlanAcctServerArray) ToWlanAcctServerArrayOutputWithContext(ctx context.Context) WlanAcctServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAcctServerArrayOutput)
}

type WlanAcctServerOutput struct{ *pulumi.OutputState }

func (WlanAcctServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAcctServer)(nil)).Elem()
}

func (o WlanAcctServerOutput) ToWlanAcctServerOutput() WlanAcctServerOutput {
	return o
}

func (o WlanAcctServerOutput) ToWlanAcctServerOutputWithContext(ctx context.Context) WlanAcctServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o WlanAcctServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAcctServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o WlanAcctServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o WlanAcctServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o WlanAcctServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o WlanAcctServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Acct port of RADIUS server
func (o WlanAcctServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAcctServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// secret of RADIUS server
func (o WlanAcctServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAcctServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanAcctServerArrayOutput struct{ *pulumi.OutputState }

func (WlanAcctServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAcctServer)(nil)).Elem()
}

func (o WlanAcctServerArrayOutput) ToWlanAcctServerArrayOutput() WlanAcctServerArrayOutput {
	return o
}

func (o WlanAcctServerArrayOutput) ToWlanAcctServerArrayOutputWithContext(ctx context.Context) WlanAcctServerArrayOutput {
	return o
}

func (o WlanAcctServerArrayOutput) Index(i pulumi.IntInput) WlanAcctServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAcctServer {
		return vs[0].([]WlanAcctServer)[vs[1].(int)]
	}).(WlanAcctServerOutput)
}

type WlanAirwatch struct {
	// API Key
	ApiKey *string `pulumi:"apiKey"`
	// console URL
	ConsoleUrl *string `pulumi:"consoleUrl"`
	Enabled    *bool   `pulumi:"enabled"`
	// password
	Password *string `pulumi:"password"`
	// username
	Username *string `pulumi:"username"`
}

// WlanAirwatchInput is an input type that accepts WlanAirwatchArgs and WlanAirwatchOutput values.
// You can construct a concrete instance of `WlanAirwatchInput` via:
//
//	WlanAirwatchArgs{...}
type WlanAirwatchInput interface {
	pulumi.Input

	ToWlanAirwatchOutput() WlanAirwatchOutput
	ToWlanAirwatchOutputWithContext(context.Context) WlanAirwatchOutput
}

type WlanAirwatchArgs struct {
	// API Key
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// console URL
	ConsoleUrl pulumi.StringPtrInput `pulumi:"consoleUrl"`
	Enabled    pulumi.BoolPtrInput   `pulumi:"enabled"`
	// password
	Password pulumi.StringPtrInput `pulumi:"password"`
	// username
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (WlanAirwatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAirwatch)(nil)).Elem()
}

func (i WlanAirwatchArgs) ToWlanAirwatchOutput() WlanAirwatchOutput {
	return i.ToWlanAirwatchOutputWithContext(context.Background())
}

func (i WlanAirwatchArgs) ToWlanAirwatchOutputWithContext(ctx context.Context) WlanAirwatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchOutput)
}

func (i WlanAirwatchArgs) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return i.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (i WlanAirwatchArgs) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchOutput).ToWlanAirwatchPtrOutputWithContext(ctx)
}

// WlanAirwatchPtrInput is an input type that accepts WlanAirwatchArgs, WlanAirwatchPtr and WlanAirwatchPtrOutput values.
// You can construct a concrete instance of `WlanAirwatchPtrInput` via:
//
//	        WlanAirwatchArgs{...}
//
//	or:
//
//	        nil
type WlanAirwatchPtrInput interface {
	pulumi.Input

	ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput
	ToWlanAirwatchPtrOutputWithContext(context.Context) WlanAirwatchPtrOutput
}

type wlanAirwatchPtrType WlanAirwatchArgs

func WlanAirwatchPtr(v *WlanAirwatchArgs) WlanAirwatchPtrInput {
	return (*wlanAirwatchPtrType)(v)
}

func (*wlanAirwatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAirwatch)(nil)).Elem()
}

func (i *wlanAirwatchPtrType) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return i.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (i *wlanAirwatchPtrType) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAirwatchPtrOutput)
}

type WlanAirwatchOutput struct{ *pulumi.OutputState }

func (WlanAirwatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAirwatch)(nil)).Elem()
}

func (o WlanAirwatchOutput) ToWlanAirwatchOutput() WlanAirwatchOutput {
	return o
}

func (o WlanAirwatchOutput) ToWlanAirwatchOutputWithContext(ctx context.Context) WlanAirwatchOutput {
	return o
}

func (o WlanAirwatchOutput) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return o.ToWlanAirwatchPtrOutputWithContext(context.Background())
}

func (o WlanAirwatchOutput) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAirwatch) *WlanAirwatch {
		return &v
	}).(WlanAirwatchPtrOutput)
}

// API Key
func (o WlanAirwatchOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// console URL
func (o WlanAirwatchOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *string { return v.ConsoleUrl }).(pulumi.StringPtrOutput)
}

func (o WlanAirwatchOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// password
func (o WlanAirwatchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// username
func (o WlanAirwatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAirwatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type WlanAirwatchPtrOutput struct{ *pulumi.OutputState }

func (WlanAirwatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAirwatch)(nil)).Elem()
}

func (o WlanAirwatchPtrOutput) ToWlanAirwatchPtrOutput() WlanAirwatchPtrOutput {
	return o
}

func (o WlanAirwatchPtrOutput) ToWlanAirwatchPtrOutputWithContext(ctx context.Context) WlanAirwatchPtrOutput {
	return o
}

func (o WlanAirwatchPtrOutput) Elem() WlanAirwatchOutput {
	return o.ApplyT(func(v *WlanAirwatch) WlanAirwatch {
		if v != nil {
			return *v
		}
		var ret WlanAirwatch
		return ret
	}).(WlanAirwatchOutput)
}

// API Key
func (o WlanAirwatchPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// console URL
func (o WlanAirwatchPtrOutput) ConsoleUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return v.ConsoleUrl
	}).(pulumi.StringPtrOutput)
}

func (o WlanAirwatchPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// password
func (o WlanAirwatchPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// username
func (o WlanAirwatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAirwatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type WlanAppLimit struct {
	// Map from app key to bandwidth in kbps.
	// Property key is the app key, defined in Get Application List
	Apps    map[string]int `pulumi:"apps"`
	Enabled *bool          `pulumi:"enabled"`
	// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
	WxtagIds map[string]int `pulumi:"wxtagIds"`
}

// WlanAppLimitInput is an input type that accepts WlanAppLimitArgs and WlanAppLimitOutput values.
// You can construct a concrete instance of `WlanAppLimitInput` via:
//
//	WlanAppLimitArgs{...}
type WlanAppLimitInput interface {
	pulumi.Input

	ToWlanAppLimitOutput() WlanAppLimitOutput
	ToWlanAppLimitOutputWithContext(context.Context) WlanAppLimitOutput
}

type WlanAppLimitArgs struct {
	// Map from app key to bandwidth in kbps.
	// Property key is the app key, defined in Get Application List
	Apps    pulumi.IntMapInput  `pulumi:"apps"`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
	WxtagIds pulumi.IntMapInput `pulumi:"wxtagIds"`
}

func (WlanAppLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppLimit)(nil)).Elem()
}

func (i WlanAppLimitArgs) ToWlanAppLimitOutput() WlanAppLimitOutput {
	return i.ToWlanAppLimitOutputWithContext(context.Background())
}

func (i WlanAppLimitArgs) ToWlanAppLimitOutputWithContext(ctx context.Context) WlanAppLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitOutput)
}

func (i WlanAppLimitArgs) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return i.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (i WlanAppLimitArgs) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitOutput).ToWlanAppLimitPtrOutputWithContext(ctx)
}

// WlanAppLimitPtrInput is an input type that accepts WlanAppLimitArgs, WlanAppLimitPtr and WlanAppLimitPtrOutput values.
// You can construct a concrete instance of `WlanAppLimitPtrInput` via:
//
//	        WlanAppLimitArgs{...}
//
//	or:
//
//	        nil
type WlanAppLimitPtrInput interface {
	pulumi.Input

	ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput
	ToWlanAppLimitPtrOutputWithContext(context.Context) WlanAppLimitPtrOutput
}

type wlanAppLimitPtrType WlanAppLimitArgs

func WlanAppLimitPtr(v *WlanAppLimitArgs) WlanAppLimitPtrInput {
	return (*wlanAppLimitPtrType)(v)
}

func (*wlanAppLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppLimit)(nil)).Elem()
}

func (i *wlanAppLimitPtrType) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return i.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (i *wlanAppLimitPtrType) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppLimitPtrOutput)
}

type WlanAppLimitOutput struct{ *pulumi.OutputState }

func (WlanAppLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppLimit)(nil)).Elem()
}

func (o WlanAppLimitOutput) ToWlanAppLimitOutput() WlanAppLimitOutput {
	return o
}

func (o WlanAppLimitOutput) ToWlanAppLimitOutputWithContext(ctx context.Context) WlanAppLimitOutput {
	return o
}

func (o WlanAppLimitOutput) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return o.ToWlanAppLimitPtrOutputWithContext(context.Background())
}

func (o WlanAppLimitOutput) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAppLimit) *WlanAppLimit {
		return &v
	}).(WlanAppLimitPtrOutput)
}

// Map from app key to bandwidth in kbps.
// Property key is the app key, defined in Get Application List
func (o WlanAppLimitOutput) Apps() pulumi.IntMapOutput {
	return o.ApplyT(func(v WlanAppLimit) map[string]int { return v.Apps }).(pulumi.IntMapOutput)
}

func (o WlanAppLimitOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAppLimit) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
func (o WlanAppLimitOutput) WxtagIds() pulumi.IntMapOutput {
	return o.ApplyT(func(v WlanAppLimit) map[string]int { return v.WxtagIds }).(pulumi.IntMapOutput)
}

type WlanAppLimitPtrOutput struct{ *pulumi.OutputState }

func (WlanAppLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppLimit)(nil)).Elem()
}

func (o WlanAppLimitPtrOutput) ToWlanAppLimitPtrOutput() WlanAppLimitPtrOutput {
	return o
}

func (o WlanAppLimitPtrOutput) ToWlanAppLimitPtrOutputWithContext(ctx context.Context) WlanAppLimitPtrOutput {
	return o
}

func (o WlanAppLimitPtrOutput) Elem() WlanAppLimitOutput {
	return o.ApplyT(func(v *WlanAppLimit) WlanAppLimit {
		if v != nil {
			return *v
		}
		var ret WlanAppLimit
		return ret
	}).(WlanAppLimitOutput)
}

// Map from app key to bandwidth in kbps.
// Property key is the app key, defined in Get Application List
func (o WlanAppLimitPtrOutput) Apps() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WlanAppLimit) map[string]int {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(pulumi.IntMapOutput)
}

func (o WlanAppLimitPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAppLimit) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Map from wxtagId of Hostname Wxlan Tags to bandwidth in kbps. Property key is the `wxtagId`
func (o WlanAppLimitPtrOutput) WxtagIds() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WlanAppLimit) map[string]int {
		if v == nil {
			return nil
		}
		return v.WxtagIds
	}).(pulumi.IntMapOutput)
}

type WlanAppQos struct {
	Apps    map[string]WlanAppQosApps `pulumi:"apps"`
	Enabled *bool                     `pulumi:"enabled"`
	Others  []WlanAppQosOther         `pulumi:"others"`
}

// WlanAppQosInput is an input type that accepts WlanAppQosArgs and WlanAppQosOutput values.
// You can construct a concrete instance of `WlanAppQosInput` via:
//
//	WlanAppQosArgs{...}
type WlanAppQosInput interface {
	pulumi.Input

	ToWlanAppQosOutput() WlanAppQosOutput
	ToWlanAppQosOutputWithContext(context.Context) WlanAppQosOutput
}

type WlanAppQosArgs struct {
	Apps    WlanAppQosAppsMapInput    `pulumi:"apps"`
	Enabled pulumi.BoolPtrInput       `pulumi:"enabled"`
	Others  WlanAppQosOtherArrayInput `pulumi:"others"`
}

func (WlanAppQosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQos)(nil)).Elem()
}

func (i WlanAppQosArgs) ToWlanAppQosOutput() WlanAppQosOutput {
	return i.ToWlanAppQosOutputWithContext(context.Background())
}

func (i WlanAppQosArgs) ToWlanAppQosOutputWithContext(ctx context.Context) WlanAppQosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOutput)
}

func (i WlanAppQosArgs) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return i.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (i WlanAppQosArgs) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOutput).ToWlanAppQosPtrOutputWithContext(ctx)
}

// WlanAppQosPtrInput is an input type that accepts WlanAppQosArgs, WlanAppQosPtr and WlanAppQosPtrOutput values.
// You can construct a concrete instance of `WlanAppQosPtrInput` via:
//
//	        WlanAppQosArgs{...}
//
//	or:
//
//	        nil
type WlanAppQosPtrInput interface {
	pulumi.Input

	ToWlanAppQosPtrOutput() WlanAppQosPtrOutput
	ToWlanAppQosPtrOutputWithContext(context.Context) WlanAppQosPtrOutput
}

type wlanAppQosPtrType WlanAppQosArgs

func WlanAppQosPtr(v *WlanAppQosArgs) WlanAppQosPtrInput {
	return (*wlanAppQosPtrType)(v)
}

func (*wlanAppQosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppQos)(nil)).Elem()
}

func (i *wlanAppQosPtrType) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return i.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (i *wlanAppQosPtrType) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosPtrOutput)
}

type WlanAppQosOutput struct{ *pulumi.OutputState }

func (WlanAppQosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQos)(nil)).Elem()
}

func (o WlanAppQosOutput) ToWlanAppQosOutput() WlanAppQosOutput {
	return o
}

func (o WlanAppQosOutput) ToWlanAppQosOutputWithContext(ctx context.Context) WlanAppQosOutput {
	return o
}

func (o WlanAppQosOutput) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return o.ToWlanAppQosPtrOutputWithContext(context.Background())
}

func (o WlanAppQosOutput) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAppQos) *WlanAppQos {
		return &v
	}).(WlanAppQosPtrOutput)
}

func (o WlanAppQosOutput) Apps() WlanAppQosAppsMapOutput {
	return o.ApplyT(func(v WlanAppQos) map[string]WlanAppQosApps { return v.Apps }).(WlanAppQosAppsMapOutput)
}

func (o WlanAppQosOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAppQos) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanAppQosOutput) Others() WlanAppQosOtherArrayOutput {
	return o.ApplyT(func(v WlanAppQos) []WlanAppQosOther { return v.Others }).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosPtrOutput struct{ *pulumi.OutputState }

func (WlanAppQosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAppQos)(nil)).Elem()
}

func (o WlanAppQosPtrOutput) ToWlanAppQosPtrOutput() WlanAppQosPtrOutput {
	return o
}

func (o WlanAppQosPtrOutput) ToWlanAppQosPtrOutputWithContext(ctx context.Context) WlanAppQosPtrOutput {
	return o
}

func (o WlanAppQosPtrOutput) Elem() WlanAppQosOutput {
	return o.ApplyT(func(v *WlanAppQos) WlanAppQos {
		if v != nil {
			return *v
		}
		var ret WlanAppQos
		return ret
	}).(WlanAppQosOutput)
}

func (o WlanAppQosPtrOutput) Apps() WlanAppQosAppsMapOutput {
	return o.ApplyT(func(v *WlanAppQos) map[string]WlanAppQosApps {
		if v == nil {
			return nil
		}
		return v.Apps
	}).(WlanAppQosAppsMapOutput)
}

func (o WlanAppQosPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAppQos) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanAppQosPtrOutput) Others() WlanAppQosOtherArrayOutput {
	return o.ApplyT(func(v *WlanAppQos) []WlanAppQosOther {
		if v == nil {
			return nil
		}
		return v.Others
	}).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosApps struct {
	Dscp *int `pulumi:"dscp"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	DstSubnet *string `pulumi:"dstSubnet"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	SrcSubnet *string `pulumi:"srcSubnet"`
}

// WlanAppQosAppsInput is an input type that accepts WlanAppQosAppsArgs and WlanAppQosAppsOutput values.
// You can construct a concrete instance of `WlanAppQosAppsInput` via:
//
//	WlanAppQosAppsArgs{...}
type WlanAppQosAppsInput interface {
	pulumi.Input

	ToWlanAppQosAppsOutput() WlanAppQosAppsOutput
	ToWlanAppQosAppsOutputWithContext(context.Context) WlanAppQosAppsOutput
}

type WlanAppQosAppsArgs struct {
	Dscp pulumi.IntPtrInput `pulumi:"dscp"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	DstSubnet pulumi.StringPtrInput `pulumi:"dstSubnet"`
	// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
	SrcSubnet pulumi.StringPtrInput `pulumi:"srcSubnet"`
}

func (WlanAppQosAppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosApps)(nil)).Elem()
}

func (i WlanAppQosAppsArgs) ToWlanAppQosAppsOutput() WlanAppQosAppsOutput {
	return i.ToWlanAppQosAppsOutputWithContext(context.Background())
}

func (i WlanAppQosAppsArgs) ToWlanAppQosAppsOutputWithContext(ctx context.Context) WlanAppQosAppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosAppsOutput)
}

// WlanAppQosAppsMapInput is an input type that accepts WlanAppQosAppsMap and WlanAppQosAppsMapOutput values.
// You can construct a concrete instance of `WlanAppQosAppsMapInput` via:
//
//	WlanAppQosAppsMap{ "key": WlanAppQosAppsArgs{...} }
type WlanAppQosAppsMapInput interface {
	pulumi.Input

	ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput
	ToWlanAppQosAppsMapOutputWithContext(context.Context) WlanAppQosAppsMapOutput
}

type WlanAppQosAppsMap map[string]WlanAppQosAppsInput

func (WlanAppQosAppsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanAppQosApps)(nil)).Elem()
}

func (i WlanAppQosAppsMap) ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput {
	return i.ToWlanAppQosAppsMapOutputWithContext(context.Background())
}

func (i WlanAppQosAppsMap) ToWlanAppQosAppsMapOutputWithContext(ctx context.Context) WlanAppQosAppsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosAppsMapOutput)
}

type WlanAppQosAppsOutput struct{ *pulumi.OutputState }

func (WlanAppQosAppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosApps)(nil)).Elem()
}

func (o WlanAppQosAppsOutput) ToWlanAppQosAppsOutput() WlanAppQosAppsOutput {
	return o
}

func (o WlanAppQosAppsOutput) ToWlanAppQosAppsOutputWithContext(ctx context.Context) WlanAppQosAppsOutput {
	return o
}

func (o WlanAppQosAppsOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
func (o WlanAppQosAppsOutput) DstSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *string { return v.DstSubnet }).(pulumi.StringPtrOutput)
}

// subnet filter is not required but helps AP to only inspect certain traffic (thus reducing AP load)
func (o WlanAppQosAppsOutput) SrcSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosApps) *string { return v.SrcSubnet }).(pulumi.StringPtrOutput)
}

type WlanAppQosAppsMapOutput struct{ *pulumi.OutputState }

func (WlanAppQosAppsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanAppQosApps)(nil)).Elem()
}

func (o WlanAppQosAppsMapOutput) ToWlanAppQosAppsMapOutput() WlanAppQosAppsMapOutput {
	return o
}

func (o WlanAppQosAppsMapOutput) ToWlanAppQosAppsMapOutputWithContext(ctx context.Context) WlanAppQosAppsMapOutput {
	return o
}

func (o WlanAppQosAppsMapOutput) MapIndex(k pulumi.StringInput) WlanAppQosAppsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanAppQosApps {
		return vs[0].(map[string]WlanAppQosApps)[vs[1].(string)]
	}).(WlanAppQosAppsOutput)
}

type WlanAppQosOther struct {
	Dscp       *int    `pulumi:"dscp"`
	DstSubnet  *string `pulumi:"dstSubnet"`
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	SrcSubnet  *string `pulumi:"srcSubnet"`
}

// WlanAppQosOtherInput is an input type that accepts WlanAppQosOtherArgs and WlanAppQosOtherOutput values.
// You can construct a concrete instance of `WlanAppQosOtherInput` via:
//
//	WlanAppQosOtherArgs{...}
type WlanAppQosOtherInput interface {
	pulumi.Input

	ToWlanAppQosOtherOutput() WlanAppQosOtherOutput
	ToWlanAppQosOtherOutputWithContext(context.Context) WlanAppQosOtherOutput
}

type WlanAppQosOtherArgs struct {
	Dscp       pulumi.IntPtrInput    `pulumi:"dscp"`
	DstSubnet  pulumi.StringPtrInput `pulumi:"dstSubnet"`
	PortRanges pulumi.StringPtrInput `pulumi:"portRanges"`
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	SrcSubnet  pulumi.StringPtrInput `pulumi:"srcSubnet"`
}

func (WlanAppQosOtherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosOther)(nil)).Elem()
}

func (i WlanAppQosOtherArgs) ToWlanAppQosOtherOutput() WlanAppQosOtherOutput {
	return i.ToWlanAppQosOtherOutputWithContext(context.Background())
}

func (i WlanAppQosOtherArgs) ToWlanAppQosOtherOutputWithContext(ctx context.Context) WlanAppQosOtherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOtherOutput)
}

// WlanAppQosOtherArrayInput is an input type that accepts WlanAppQosOtherArray and WlanAppQosOtherArrayOutput values.
// You can construct a concrete instance of `WlanAppQosOtherArrayInput` via:
//
//	WlanAppQosOtherArray{ WlanAppQosOtherArgs{...} }
type WlanAppQosOtherArrayInput interface {
	pulumi.Input

	ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput
	ToWlanAppQosOtherArrayOutputWithContext(context.Context) WlanAppQosOtherArrayOutput
}

type WlanAppQosOtherArray []WlanAppQosOtherInput

func (WlanAppQosOtherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAppQosOther)(nil)).Elem()
}

func (i WlanAppQosOtherArray) ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput {
	return i.ToWlanAppQosOtherArrayOutputWithContext(context.Background())
}

func (i WlanAppQosOtherArray) ToWlanAppQosOtherArrayOutputWithContext(ctx context.Context) WlanAppQosOtherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAppQosOtherArrayOutput)
}

type WlanAppQosOtherOutput struct{ *pulumi.OutputState }

func (WlanAppQosOtherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAppQosOther)(nil)).Elem()
}

func (o WlanAppQosOtherOutput) ToWlanAppQosOtherOutput() WlanAppQosOtherOutput {
	return o
}

func (o WlanAppQosOtherOutput) ToWlanAppQosOtherOutputWithContext(ctx context.Context) WlanAppQosOtherOutput {
	return o
}

func (o WlanAppQosOtherOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *int { return v.Dscp }).(pulumi.IntPtrOutput)
}

func (o WlanAppQosOtherOutput) DstSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.DstSubnet }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o WlanAppQosOtherOutput) SrcSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAppQosOther) *string { return v.SrcSubnet }).(pulumi.StringPtrOutput)
}

type WlanAppQosOtherArrayOutput struct{ *pulumi.OutputState }

func (WlanAppQosOtherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAppQosOther)(nil)).Elem()
}

func (o WlanAppQosOtherArrayOutput) ToWlanAppQosOtherArrayOutput() WlanAppQosOtherArrayOutput {
	return o
}

func (o WlanAppQosOtherArrayOutput) ToWlanAppQosOtherArrayOutputWithContext(ctx context.Context) WlanAppQosOtherArrayOutput {
	return o
}

func (o WlanAppQosOtherArrayOutput) Index(i pulumi.IntInput) WlanAppQosOtherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAppQosOther {
		return vs[0].([]WlanAppQosOther)[vs[1].(int)]
	}).(WlanAppQosOtherOutput)
}

type WlanAuth struct {
	// SAE anti-clogging token threshold
	AnticlogThreshold *int `pulumi:"anticlogThreshold"`
	// whether to trigger EAP reauth when the session ends
	EapReauth *bool `pulumi:"eapReauth"`
	// whether to enable MAC Auth, uses the same auth_servers
	EnableMacAuth *bool `pulumi:"enableMacAuth"`
	// when `type`==`wep`
	KeyIdx *int `pulumi:"keyIdx"`
	// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
	Keys []string `pulumi:"keys"`
	// when `type`==`psk`, whether to only use multi_psk
	MultiPskOnly *bool `pulumi:"multiPskOnly"`
	// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
	Owe *string `pulumi:"owe"`
	// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
	Pairwises []string `pulumi:"pairwises"`
	// when `multiPskOnly`==`true`, whether private wlan is enabled
	PrivateWlan *bool `pulumi:"privateWlan"`
	// when `type`==`psk`, 8-64 characters, or 64 hex characters
	Psk *string `pulumi:"psk"`
	// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
	Type *string `pulumi:"type"`
	// enable WEP as secondary auth
	WepAsSecondaryAuth *bool `pulumi:"wepAsSecondaryAuth"`
}

// WlanAuthInput is an input type that accepts WlanAuthArgs and WlanAuthOutput values.
// You can construct a concrete instance of `WlanAuthInput` via:
//
//	WlanAuthArgs{...}
type WlanAuthInput interface {
	pulumi.Input

	ToWlanAuthOutput() WlanAuthOutput
	ToWlanAuthOutputWithContext(context.Context) WlanAuthOutput
}

type WlanAuthArgs struct {
	// SAE anti-clogging token threshold
	AnticlogThreshold pulumi.IntPtrInput `pulumi:"anticlogThreshold"`
	// whether to trigger EAP reauth when the session ends
	EapReauth pulumi.BoolPtrInput `pulumi:"eapReauth"`
	// whether to enable MAC Auth, uses the same auth_servers
	EnableMacAuth pulumi.BoolPtrInput `pulumi:"enableMacAuth"`
	// when `type`==`wep`
	KeyIdx pulumi.IntPtrInput `pulumi:"keyIdx"`
	// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// when `type`==`psk`, whether to only use multi_psk
	MultiPskOnly pulumi.BoolPtrInput `pulumi:"multiPskOnly"`
	// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
	Owe pulumi.StringPtrInput `pulumi:"owe"`
	// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
	Pairwises pulumi.StringArrayInput `pulumi:"pairwises"`
	// when `multiPskOnly`==`true`, whether private wlan is enabled
	PrivateWlan pulumi.BoolPtrInput `pulumi:"privateWlan"`
	// when `type`==`psk`, 8-64 characters, or 64 hex characters
	Psk pulumi.StringPtrInput `pulumi:"psk"`
	// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// enable WEP as secondary auth
	WepAsSecondaryAuth pulumi.BoolPtrInput `pulumi:"wepAsSecondaryAuth"`
}

func (WlanAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuth)(nil)).Elem()
}

func (i WlanAuthArgs) ToWlanAuthOutput() WlanAuthOutput {
	return i.ToWlanAuthOutputWithContext(context.Background())
}

func (i WlanAuthArgs) ToWlanAuthOutputWithContext(ctx context.Context) WlanAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthOutput)
}

func (i WlanAuthArgs) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return i.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (i WlanAuthArgs) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthOutput).ToWlanAuthPtrOutputWithContext(ctx)
}

// WlanAuthPtrInput is an input type that accepts WlanAuthArgs, WlanAuthPtr and WlanAuthPtrOutput values.
// You can construct a concrete instance of `WlanAuthPtrInput` via:
//
//	        WlanAuthArgs{...}
//
//	or:
//
//	        nil
type WlanAuthPtrInput interface {
	pulumi.Input

	ToWlanAuthPtrOutput() WlanAuthPtrOutput
	ToWlanAuthPtrOutputWithContext(context.Context) WlanAuthPtrOutput
}

type wlanAuthPtrType WlanAuthArgs

func WlanAuthPtr(v *WlanAuthArgs) WlanAuthPtrInput {
	return (*wlanAuthPtrType)(v)
}

func (*wlanAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAuth)(nil)).Elem()
}

func (i *wlanAuthPtrType) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return i.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (i *wlanAuthPtrType) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthPtrOutput)
}

type WlanAuthOutput struct{ *pulumi.OutputState }

func (WlanAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuth)(nil)).Elem()
}

func (o WlanAuthOutput) ToWlanAuthOutput() WlanAuthOutput {
	return o
}

func (o WlanAuthOutput) ToWlanAuthOutputWithContext(ctx context.Context) WlanAuthOutput {
	return o
}

func (o WlanAuthOutput) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return o.ToWlanAuthPtrOutputWithContext(context.Background())
}

func (o WlanAuthOutput) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanAuth) *WlanAuth {
		return &v
	}).(WlanAuthPtrOutput)
}

// SAE anti-clogging token threshold
func (o WlanAuthOutput) AnticlogThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuth) *int { return v.AnticlogThreshold }).(pulumi.IntPtrOutput)
}

// whether to trigger EAP reauth when the session ends
func (o WlanAuthOutput) EapReauth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.EapReauth }).(pulumi.BoolPtrOutput)
}

// whether to enable MAC Auth, uses the same auth_servers
func (o WlanAuthOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.EnableMacAuth }).(pulumi.BoolPtrOutput)
}

// when `type`==`wep`
func (o WlanAuthOutput) KeyIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuth) *int { return v.KeyIdx }).(pulumi.IntPtrOutput)
}

// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
func (o WlanAuthOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanAuth) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// when `type`==`psk`, whether to only use multi_psk
func (o WlanAuthOutput) MultiPskOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.MultiPskOnly }).(pulumi.BoolPtrOutput)
}

// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
func (o WlanAuthOutput) Owe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Owe }).(pulumi.StringPtrOutput)
}

// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
func (o WlanAuthOutput) Pairwises() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanAuth) []string { return v.Pairwises }).(pulumi.StringArrayOutput)
}

// when `multiPskOnly`==`true`, whether private wlan is enabled
func (o WlanAuthOutput) PrivateWlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.PrivateWlan }).(pulumi.BoolPtrOutput)
}

// when `type`==`psk`, 8-64 characters, or 64 hex characters
func (o WlanAuthOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Psk }).(pulumi.StringPtrOutput)
}

// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
func (o WlanAuthOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuth) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// enable WEP as secondary auth
func (o WlanAuthOutput) WepAsSecondaryAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuth) *bool { return v.WepAsSecondaryAuth }).(pulumi.BoolPtrOutput)
}

type WlanAuthPtrOutput struct{ *pulumi.OutputState }

func (WlanAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanAuth)(nil)).Elem()
}

func (o WlanAuthPtrOutput) ToWlanAuthPtrOutput() WlanAuthPtrOutput {
	return o
}

func (o WlanAuthPtrOutput) ToWlanAuthPtrOutputWithContext(ctx context.Context) WlanAuthPtrOutput {
	return o
}

func (o WlanAuthPtrOutput) Elem() WlanAuthOutput {
	return o.ApplyT(func(v *WlanAuth) WlanAuth {
		if v != nil {
			return *v
		}
		var ret WlanAuth
		return ret
	}).(WlanAuthOutput)
}

// SAE anti-clogging token threshold
func (o WlanAuthPtrOutput) AnticlogThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *int {
		if v == nil {
			return nil
		}
		return v.AnticlogThreshold
	}).(pulumi.IntPtrOutput)
}

// whether to trigger EAP reauth when the session ends
func (o WlanAuthPtrOutput) EapReauth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.EapReauth
	}).(pulumi.BoolPtrOutput)
}

// whether to enable MAC Auth, uses the same auth_servers
func (o WlanAuthPtrOutput) EnableMacAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.EnableMacAuth
	}).(pulumi.BoolPtrOutput)
}

// when `type`==`wep`
func (o WlanAuthPtrOutput) KeyIdx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *int {
		if v == nil {
			return nil
		}
		return v.KeyIdx
	}).(pulumi.IntPtrOutput)
}

// when type=wep, four 10-character or 26-character hex string, null can be used. All keys, if provided, have to be in the same length
func (o WlanAuthPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanAuth) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// when `type`==`psk`, whether to only use multi_psk
func (o WlanAuthPtrOutput) MultiPskOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.MultiPskOnly
	}).(pulumi.BoolPtrOutput)
}

// if `type`==`open`. enum: `disabled`, `enabled` (means transition mode), `required`
func (o WlanAuthPtrOutput) Owe() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Owe
	}).(pulumi.StringPtrOutput)
}

// when `type`=`psk` or `type`=`eap`, one or more of `wpa1-ccmp`, `wpa1-tkip`, `wpa2-ccmp`, `wpa2-tkip`, `wpa3`
func (o WlanAuthPtrOutput) Pairwises() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanAuth) []string {
		if v == nil {
			return nil
		}
		return v.Pairwises
	}).(pulumi.StringArrayOutput)
}

// when `multiPskOnly`==`true`, whether private wlan is enabled
func (o WlanAuthPtrOutput) PrivateWlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateWlan
	}).(pulumi.BoolPtrOutput)
}

// when `type`==`psk`, 8-64 characters, or 64 hex characters
func (o WlanAuthPtrOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Psk
	}).(pulumi.StringPtrOutput)
}

// enum: `eap`, `eap192`, `open`, `psk`, `psk-tkip`, `psk-wpa2-tkip`, `wep`
func (o WlanAuthPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// enable WEP as secondary auth
func (o WlanAuthPtrOutput) WepAsSecondaryAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanAuth) *bool {
		if v == nil {
			return nil
		}
		return v.WepAsSecondaryAuth
	}).(pulumi.BoolPtrOutput)
}

type WlanAuthServer struct {
	// ip / hostname of RADIUS server
	Host           string `pulumi:"host"`
	KeywrapEnabled *bool  `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat *string `pulumi:"keywrapFormat"`
	KeywrapKek    *string `pulumi:"keywrapKek"`
	KeywrapMack   *string `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port *int `pulumi:"port"`
	// whether to require Message-Authenticator in requests
	RequireMessageAuthenticator *bool `pulumi:"requireMessageAuthenticator"`
	// secret of RADIUS server
	Secret string `pulumi:"secret"`
}

// WlanAuthServerInput is an input type that accepts WlanAuthServerArgs and WlanAuthServerOutput values.
// You can construct a concrete instance of `WlanAuthServerInput` via:
//
//	WlanAuthServerArgs{...}
type WlanAuthServerInput interface {
	pulumi.Input

	ToWlanAuthServerOutput() WlanAuthServerOutput
	ToWlanAuthServerOutputWithContext(context.Context) WlanAuthServerOutput
}

type WlanAuthServerArgs struct {
	// ip / hostname of RADIUS server
	Host           pulumi.StringInput  `pulumi:"host"`
	KeywrapEnabled pulumi.BoolPtrInput `pulumi:"keywrapEnabled"`
	// enum: `ascii`, `hex`
	KeywrapFormat pulumi.StringPtrInput `pulumi:"keywrapFormat"`
	KeywrapKek    pulumi.StringPtrInput `pulumi:"keywrapKek"`
	KeywrapMack   pulumi.StringPtrInput `pulumi:"keywrapMack"`
	// Auth port of RADIUS server
	Port pulumi.IntPtrInput `pulumi:"port"`
	// whether to require Message-Authenticator in requests
	RequireMessageAuthenticator pulumi.BoolPtrInput `pulumi:"requireMessageAuthenticator"`
	// secret of RADIUS server
	Secret pulumi.StringInput `pulumi:"secret"`
}

func (WlanAuthServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuthServer)(nil)).Elem()
}

func (i WlanAuthServerArgs) ToWlanAuthServerOutput() WlanAuthServerOutput {
	return i.ToWlanAuthServerOutputWithContext(context.Background())
}

func (i WlanAuthServerArgs) ToWlanAuthServerOutputWithContext(ctx context.Context) WlanAuthServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthServerOutput)
}

// WlanAuthServerArrayInput is an input type that accepts WlanAuthServerArray and WlanAuthServerArrayOutput values.
// You can construct a concrete instance of `WlanAuthServerArrayInput` via:
//
//	WlanAuthServerArray{ WlanAuthServerArgs{...} }
type WlanAuthServerArrayInput interface {
	pulumi.Input

	ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput
	ToWlanAuthServerArrayOutputWithContext(context.Context) WlanAuthServerArrayOutput
}

type WlanAuthServerArray []WlanAuthServerInput

func (WlanAuthServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAuthServer)(nil)).Elem()
}

func (i WlanAuthServerArray) ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput {
	return i.ToWlanAuthServerArrayOutputWithContext(context.Background())
}

func (i WlanAuthServerArray) ToWlanAuthServerArrayOutputWithContext(ctx context.Context) WlanAuthServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanAuthServerArrayOutput)
}

type WlanAuthServerOutput struct{ *pulumi.OutputState }

func (WlanAuthServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanAuthServer)(nil)).Elem()
}

func (o WlanAuthServerOutput) ToWlanAuthServerOutput() WlanAuthServerOutput {
	return o
}

func (o WlanAuthServerOutput) ToWlanAuthServerOutputWithContext(ctx context.Context) WlanAuthServerOutput {
	return o
}

// ip / hostname of RADIUS server
func (o WlanAuthServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAuthServer) string { return v.Host }).(pulumi.StringOutput)
}

func (o WlanAuthServerOutput) KeywrapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *bool { return v.KeywrapEnabled }).(pulumi.BoolPtrOutput)
}

// enum: `ascii`, `hex`
func (o WlanAuthServerOutput) KeywrapFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapFormat }).(pulumi.StringPtrOutput)
}

func (o WlanAuthServerOutput) KeywrapKek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapKek }).(pulumi.StringPtrOutput)
}

func (o WlanAuthServerOutput) KeywrapMack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *string { return v.KeywrapMack }).(pulumi.StringPtrOutput)
}

// Auth port of RADIUS server
func (o WlanAuthServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// whether to require Message-Authenticator in requests
func (o WlanAuthServerOutput) RequireMessageAuthenticator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanAuthServer) *bool { return v.RequireMessageAuthenticator }).(pulumi.BoolPtrOutput)
}

// secret of RADIUS server
func (o WlanAuthServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanAuthServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanAuthServerArrayOutput struct{ *pulumi.OutputState }

func (WlanAuthServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanAuthServer)(nil)).Elem()
}

func (o WlanAuthServerArrayOutput) ToWlanAuthServerArrayOutput() WlanAuthServerArrayOutput {
	return o
}

func (o WlanAuthServerArrayOutput) ToWlanAuthServerArrayOutputWithContext(ctx context.Context) WlanAuthServerArrayOutput {
	return o
}

func (o WlanAuthServerArrayOutput) Index(i pulumi.IntInput) WlanAuthServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanAuthServer {
		return vs[0].([]WlanAuthServer)[vs[1].(int)]
	}).(WlanAuthServerOutput)
}

type WlanBonjour struct {
	// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
	AdditionalVlanIds []string `pulumi:"additionalVlanIds"`
	// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
	Enabled *bool `pulumi:"enabled"`
	// what services are allowed.
	// Property key is the service name
	Services map[string]WlanBonjourServices `pulumi:"services"`
}

// WlanBonjourInput is an input type that accepts WlanBonjourArgs and WlanBonjourOutput values.
// You can construct a concrete instance of `WlanBonjourInput` via:
//
//	WlanBonjourArgs{...}
type WlanBonjourInput interface {
	pulumi.Input

	ToWlanBonjourOutput() WlanBonjourOutput
	ToWlanBonjourOutputWithContext(context.Context) WlanBonjourOutput
}

type WlanBonjourArgs struct {
	// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
	AdditionalVlanIds pulumi.StringArrayInput `pulumi:"additionalVlanIds"`
	// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// what services are allowed.
	// Property key is the service name
	Services WlanBonjourServicesMapInput `pulumi:"services"`
}

func (WlanBonjourArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjour)(nil)).Elem()
}

func (i WlanBonjourArgs) ToWlanBonjourOutput() WlanBonjourOutput {
	return i.ToWlanBonjourOutputWithContext(context.Background())
}

func (i WlanBonjourArgs) ToWlanBonjourOutputWithContext(ctx context.Context) WlanBonjourOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourOutput)
}

func (i WlanBonjourArgs) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return i.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (i WlanBonjourArgs) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourOutput).ToWlanBonjourPtrOutputWithContext(ctx)
}

// WlanBonjourPtrInput is an input type that accepts WlanBonjourArgs, WlanBonjourPtr and WlanBonjourPtrOutput values.
// You can construct a concrete instance of `WlanBonjourPtrInput` via:
//
//	        WlanBonjourArgs{...}
//
//	or:
//
//	        nil
type WlanBonjourPtrInput interface {
	pulumi.Input

	ToWlanBonjourPtrOutput() WlanBonjourPtrOutput
	ToWlanBonjourPtrOutputWithContext(context.Context) WlanBonjourPtrOutput
}

type wlanBonjourPtrType WlanBonjourArgs

func WlanBonjourPtr(v *WlanBonjourArgs) WlanBonjourPtrInput {
	return (*wlanBonjourPtrType)(v)
}

func (*wlanBonjourPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanBonjour)(nil)).Elem()
}

func (i *wlanBonjourPtrType) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return i.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (i *wlanBonjourPtrType) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourPtrOutput)
}

type WlanBonjourOutput struct{ *pulumi.OutputState }

func (WlanBonjourOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjour)(nil)).Elem()
}

func (o WlanBonjourOutput) ToWlanBonjourOutput() WlanBonjourOutput {
	return o
}

func (o WlanBonjourOutput) ToWlanBonjourOutputWithContext(ctx context.Context) WlanBonjourOutput {
	return o
}

func (o WlanBonjourOutput) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return o.ToWlanBonjourPtrOutputWithContext(context.Background())
}

func (o WlanBonjourOutput) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanBonjour) *WlanBonjour {
		return &v
	}).(WlanBonjourPtrOutput)
}

// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
func (o WlanBonjourOutput) AdditionalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanBonjour) []string { return v.AdditionalVlanIds }).(pulumi.StringArrayOutput)
}

// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
func (o WlanBonjourOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanBonjour) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// what services are allowed.
// Property key is the service name
func (o WlanBonjourOutput) Services() WlanBonjourServicesMapOutput {
	return o.ApplyT(func(v WlanBonjour) map[string]WlanBonjourServices { return v.Services }).(WlanBonjourServicesMapOutput)
}

type WlanBonjourPtrOutput struct{ *pulumi.OutputState }

func (WlanBonjourPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanBonjour)(nil)).Elem()
}

func (o WlanBonjourPtrOutput) ToWlanBonjourPtrOutput() WlanBonjourPtrOutput {
	return o
}

func (o WlanBonjourPtrOutput) ToWlanBonjourPtrOutputWithContext(ctx context.Context) WlanBonjourPtrOutput {
	return o
}

func (o WlanBonjourPtrOutput) Elem() WlanBonjourOutput {
	return o.ApplyT(func(v *WlanBonjour) WlanBonjour {
		if v != nil {
			return *v
		}
		var ret WlanBonjour
		return ret
	}).(WlanBonjourOutput)
}

// additional VLAN IDs (on the LAN side or from other WLANs) should we be forwarding bonjour queries/responses
func (o WlanBonjourPtrOutput) AdditionalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanBonjour) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalVlanIds
	}).(pulumi.StringArrayOutput)
}

// whether to enable bonjour for this WLAN. Once enabled, limitBcast is assumed true, allowMdns is assumed false
func (o WlanBonjourPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanBonjour) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// what services are allowed.
// Property key is the service name
func (o WlanBonjourPtrOutput) Services() WlanBonjourServicesMapOutput {
	return o.ApplyT(func(v *WlanBonjour) map[string]WlanBonjourServices {
		if v == nil {
			return nil
		}
		return v.Services
	}).(WlanBonjourServicesMapOutput)
}

type WlanBonjourServices struct {
	// whether to prevent wireless clients to discover bonjour devices on the same WLAN
	DisableLocal *bool `pulumi:"disableLocal"`
	// optional, if the service is further restricted for certain RADIUS groups
	RadiusGroups []string `pulumi:"radiusGroups"`
	// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
	Scope *string `pulumi:"scope"`
}

// WlanBonjourServicesInput is an input type that accepts WlanBonjourServicesArgs and WlanBonjourServicesOutput values.
// You can construct a concrete instance of `WlanBonjourServicesInput` via:
//
//	WlanBonjourServicesArgs{...}
type WlanBonjourServicesInput interface {
	pulumi.Input

	ToWlanBonjourServicesOutput() WlanBonjourServicesOutput
	ToWlanBonjourServicesOutputWithContext(context.Context) WlanBonjourServicesOutput
}

type WlanBonjourServicesArgs struct {
	// whether to prevent wireless clients to discover bonjour devices on the same WLAN
	DisableLocal pulumi.BoolPtrInput `pulumi:"disableLocal"`
	// optional, if the service is further restricted for certain RADIUS groups
	RadiusGroups pulumi.StringArrayInput `pulumi:"radiusGroups"`
	// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (WlanBonjourServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjourServices)(nil)).Elem()
}

func (i WlanBonjourServicesArgs) ToWlanBonjourServicesOutput() WlanBonjourServicesOutput {
	return i.ToWlanBonjourServicesOutputWithContext(context.Background())
}

func (i WlanBonjourServicesArgs) ToWlanBonjourServicesOutputWithContext(ctx context.Context) WlanBonjourServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourServicesOutput)
}

// WlanBonjourServicesMapInput is an input type that accepts WlanBonjourServicesMap and WlanBonjourServicesMapOutput values.
// You can construct a concrete instance of `WlanBonjourServicesMapInput` via:
//
//	WlanBonjourServicesMap{ "key": WlanBonjourServicesArgs{...} }
type WlanBonjourServicesMapInput interface {
	pulumi.Input

	ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput
	ToWlanBonjourServicesMapOutputWithContext(context.Context) WlanBonjourServicesMapOutput
}

type WlanBonjourServicesMap map[string]WlanBonjourServicesInput

func (WlanBonjourServicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanBonjourServices)(nil)).Elem()
}

func (i WlanBonjourServicesMap) ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput {
	return i.ToWlanBonjourServicesMapOutputWithContext(context.Background())
}

func (i WlanBonjourServicesMap) ToWlanBonjourServicesMapOutputWithContext(ctx context.Context) WlanBonjourServicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanBonjourServicesMapOutput)
}

type WlanBonjourServicesOutput struct{ *pulumi.OutputState }

func (WlanBonjourServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanBonjourServices)(nil)).Elem()
}

func (o WlanBonjourServicesOutput) ToWlanBonjourServicesOutput() WlanBonjourServicesOutput {
	return o
}

func (o WlanBonjourServicesOutput) ToWlanBonjourServicesOutputWithContext(ctx context.Context) WlanBonjourServicesOutput {
	return o
}

// whether to prevent wireless clients to discover bonjour devices on the same WLAN
func (o WlanBonjourServicesOutput) DisableLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanBonjourServices) *bool { return v.DisableLocal }).(pulumi.BoolPtrOutput)
}

// optional, if the service is further restricted for certain RADIUS groups
func (o WlanBonjourServicesOutput) RadiusGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanBonjourServices) []string { return v.RadiusGroups }).(pulumi.StringArrayOutput)
}

// how bonjour services should be discovered for the same WLAN. enum: `sameAp`, `sameMap`, `sameSite`
func (o WlanBonjourServicesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanBonjourServices) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type WlanBonjourServicesMapOutput struct{ *pulumi.OutputState }

func (WlanBonjourServicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanBonjourServices)(nil)).Elem()
}

func (o WlanBonjourServicesMapOutput) ToWlanBonjourServicesMapOutput() WlanBonjourServicesMapOutput {
	return o
}

func (o WlanBonjourServicesMapOutput) ToWlanBonjourServicesMapOutputWithContext(ctx context.Context) WlanBonjourServicesMapOutput {
	return o
}

func (o WlanBonjourServicesMapOutput) MapIndex(k pulumi.StringInput) WlanBonjourServicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanBonjourServices {
		return vs[0].(map[string]WlanBonjourServices)[vs[1].(string)]
	}).(WlanBonjourServicesOutput)
}

type WlanCiscoCwa struct {
	// list of hostnames without http(s):// (matched by substring)
	AllowedHostnames []string `pulumi:"allowedHostnames"`
	// list of CIDRs
	AllowedSubnets []string `pulumi:"allowedSubnets"`
	// list of blocked CIDRs
	BlockedSubnets []string `pulumi:"blockedSubnets"`
	Enabled        *bool    `pulumi:"enabled"`
}

// WlanCiscoCwaInput is an input type that accepts WlanCiscoCwaArgs and WlanCiscoCwaOutput values.
// You can construct a concrete instance of `WlanCiscoCwaInput` via:
//
//	WlanCiscoCwaArgs{...}
type WlanCiscoCwaInput interface {
	pulumi.Input

	ToWlanCiscoCwaOutput() WlanCiscoCwaOutput
	ToWlanCiscoCwaOutputWithContext(context.Context) WlanCiscoCwaOutput
}

type WlanCiscoCwaArgs struct {
	// list of hostnames without http(s):// (matched by substring)
	AllowedHostnames pulumi.StringArrayInput `pulumi:"allowedHostnames"`
	// list of CIDRs
	AllowedSubnets pulumi.StringArrayInput `pulumi:"allowedSubnets"`
	// list of blocked CIDRs
	BlockedSubnets pulumi.StringArrayInput `pulumi:"blockedSubnets"`
	Enabled        pulumi.BoolPtrInput     `pulumi:"enabled"`
}

func (WlanCiscoCwaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCiscoCwa)(nil)).Elem()
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaOutput() WlanCiscoCwaOutput {
	return i.ToWlanCiscoCwaOutputWithContext(context.Background())
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaOutputWithContext(ctx context.Context) WlanCiscoCwaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaOutput)
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return i.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (i WlanCiscoCwaArgs) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaOutput).ToWlanCiscoCwaPtrOutputWithContext(ctx)
}

// WlanCiscoCwaPtrInput is an input type that accepts WlanCiscoCwaArgs, WlanCiscoCwaPtr and WlanCiscoCwaPtrOutput values.
// You can construct a concrete instance of `WlanCiscoCwaPtrInput` via:
//
//	        WlanCiscoCwaArgs{...}
//
//	or:
//
//	        nil
type WlanCiscoCwaPtrInput interface {
	pulumi.Input

	ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput
	ToWlanCiscoCwaPtrOutputWithContext(context.Context) WlanCiscoCwaPtrOutput
}

type wlanCiscoCwaPtrType WlanCiscoCwaArgs

func WlanCiscoCwaPtr(v *WlanCiscoCwaArgs) WlanCiscoCwaPtrInput {
	return (*wlanCiscoCwaPtrType)(v)
}

func (*wlanCiscoCwaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanCiscoCwa)(nil)).Elem()
}

func (i *wlanCiscoCwaPtrType) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return i.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (i *wlanCiscoCwaPtrType) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCiscoCwaPtrOutput)
}

type WlanCiscoCwaOutput struct{ *pulumi.OutputState }

func (WlanCiscoCwaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCiscoCwa)(nil)).Elem()
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaOutput() WlanCiscoCwaOutput {
	return o
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaOutputWithContext(ctx context.Context) WlanCiscoCwaOutput {
	return o
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return o.ToWlanCiscoCwaPtrOutputWithContext(context.Background())
}

func (o WlanCiscoCwaOutput) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanCiscoCwa) *WlanCiscoCwa {
		return &v
	}).(WlanCiscoCwaPtrOutput)
}

// list of hostnames without http(s):// (matched by substring)
func (o WlanCiscoCwaOutput) AllowedHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.AllowedHostnames }).(pulumi.StringArrayOutput)
}

// list of CIDRs
func (o WlanCiscoCwaOutput) AllowedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.AllowedSubnets }).(pulumi.StringArrayOutput)
}

// list of blocked CIDRs
func (o WlanCiscoCwaOutput) BlockedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanCiscoCwa) []string { return v.BlockedSubnets }).(pulumi.StringArrayOutput)
}

func (o WlanCiscoCwaOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCiscoCwa) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanCiscoCwaPtrOutput struct{ *pulumi.OutputState }

func (WlanCiscoCwaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanCiscoCwa)(nil)).Elem()
}

func (o WlanCiscoCwaPtrOutput) ToWlanCiscoCwaPtrOutput() WlanCiscoCwaPtrOutput {
	return o
}

func (o WlanCiscoCwaPtrOutput) ToWlanCiscoCwaPtrOutputWithContext(ctx context.Context) WlanCiscoCwaPtrOutput {
	return o
}

func (o WlanCiscoCwaPtrOutput) Elem() WlanCiscoCwaOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) WlanCiscoCwa {
		if v != nil {
			return *v
		}
		var ret WlanCiscoCwa
		return ret
	}).(WlanCiscoCwaOutput)
}

// list of hostnames without http(s):// (matched by substring)
func (o WlanCiscoCwaPtrOutput) AllowedHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.AllowedHostnames
	}).(pulumi.StringArrayOutput)
}

// list of CIDRs
func (o WlanCiscoCwaPtrOutput) AllowedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.AllowedSubnets
	}).(pulumi.StringArrayOutput)
}

// list of blocked CIDRs
func (o WlanCiscoCwaPtrOutput) BlockedSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) []string {
		if v == nil {
			return nil
		}
		return v.BlockedSubnets
	}).(pulumi.StringArrayOutput)
}

func (o WlanCiscoCwaPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanCiscoCwa) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanCoaServer struct {
	// whether to disable Event-Timestamp Check
	DisableEventTimestampCheck *bool  `pulumi:"disableEventTimestampCheck"`
	Enabled                    *bool  `pulumi:"enabled"`
	Ip                         string `pulumi:"ip"`
	Port                       *int   `pulumi:"port"`
	Secret                     string `pulumi:"secret"`
}

// WlanCoaServerInput is an input type that accepts WlanCoaServerArgs and WlanCoaServerOutput values.
// You can construct a concrete instance of `WlanCoaServerInput` via:
//
//	WlanCoaServerArgs{...}
type WlanCoaServerInput interface {
	pulumi.Input

	ToWlanCoaServerOutput() WlanCoaServerOutput
	ToWlanCoaServerOutputWithContext(context.Context) WlanCoaServerOutput
}

type WlanCoaServerArgs struct {
	// whether to disable Event-Timestamp Check
	DisableEventTimestampCheck pulumi.BoolPtrInput `pulumi:"disableEventTimestampCheck"`
	Enabled                    pulumi.BoolPtrInput `pulumi:"enabled"`
	Ip                         pulumi.StringInput  `pulumi:"ip"`
	Port                       pulumi.IntPtrInput  `pulumi:"port"`
	Secret                     pulumi.StringInput  `pulumi:"secret"`
}

func (WlanCoaServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCoaServer)(nil)).Elem()
}

func (i WlanCoaServerArgs) ToWlanCoaServerOutput() WlanCoaServerOutput {
	return i.ToWlanCoaServerOutputWithContext(context.Background())
}

func (i WlanCoaServerArgs) ToWlanCoaServerOutputWithContext(ctx context.Context) WlanCoaServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCoaServerOutput)
}

// WlanCoaServerArrayInput is an input type that accepts WlanCoaServerArray and WlanCoaServerArrayOutput values.
// You can construct a concrete instance of `WlanCoaServerArrayInput` via:
//
//	WlanCoaServerArray{ WlanCoaServerArgs{...} }
type WlanCoaServerArrayInput interface {
	pulumi.Input

	ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput
	ToWlanCoaServerArrayOutputWithContext(context.Context) WlanCoaServerArrayOutput
}

type WlanCoaServerArray []WlanCoaServerInput

func (WlanCoaServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanCoaServer)(nil)).Elem()
}

func (i WlanCoaServerArray) ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput {
	return i.ToWlanCoaServerArrayOutputWithContext(context.Background())
}

func (i WlanCoaServerArray) ToWlanCoaServerArrayOutputWithContext(ctx context.Context) WlanCoaServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanCoaServerArrayOutput)
}

type WlanCoaServerOutput struct{ *pulumi.OutputState }

func (WlanCoaServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanCoaServer)(nil)).Elem()
}

func (o WlanCoaServerOutput) ToWlanCoaServerOutput() WlanCoaServerOutput {
	return o
}

func (o WlanCoaServerOutput) ToWlanCoaServerOutputWithContext(ctx context.Context) WlanCoaServerOutput {
	return o
}

// whether to disable Event-Timestamp Check
func (o WlanCoaServerOutput) DisableEventTimestampCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *bool { return v.DisableEventTimestampCheck }).(pulumi.BoolPtrOutput)
}

func (o WlanCoaServerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanCoaServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v WlanCoaServer) string { return v.Ip }).(pulumi.StringOutput)
}

func (o WlanCoaServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanCoaServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o WlanCoaServerOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WlanCoaServer) string { return v.Secret }).(pulumi.StringOutput)
}

type WlanCoaServerArrayOutput struct{ *pulumi.OutputState }

func (WlanCoaServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanCoaServer)(nil)).Elem()
}

func (o WlanCoaServerArrayOutput) ToWlanCoaServerArrayOutput() WlanCoaServerArrayOutput {
	return o
}

func (o WlanCoaServerArrayOutput) ToWlanCoaServerArrayOutputWithContext(ctx context.Context) WlanCoaServerArrayOutput {
	return o
}

func (o WlanCoaServerArrayOutput) Index(i pulumi.IntInput) WlanCoaServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanCoaServer {
		return vs[0].([]WlanCoaServer)[vs[1].(int)]
	}).(WlanCoaServerOutput)
}

type WlanDnsServerRewrite struct {
	Enabled *bool `pulumi:"enabled"`
	// map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
	RadiusGroups map[string]string `pulumi:"radiusGroups"`
}

// WlanDnsServerRewriteInput is an input type that accepts WlanDnsServerRewriteArgs and WlanDnsServerRewriteOutput values.
// You can construct a concrete instance of `WlanDnsServerRewriteInput` via:
//
//	WlanDnsServerRewriteArgs{...}
type WlanDnsServerRewriteInput interface {
	pulumi.Input

	ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput
	ToWlanDnsServerRewriteOutputWithContext(context.Context) WlanDnsServerRewriteOutput
}

type WlanDnsServerRewriteArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
	RadiusGroups pulumi.StringMapInput `pulumi:"radiusGroups"`
}

func (WlanDnsServerRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDnsServerRewrite)(nil)).Elem()
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput {
	return i.ToWlanDnsServerRewriteOutputWithContext(context.Background())
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewriteOutputWithContext(ctx context.Context) WlanDnsServerRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewriteOutput)
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return i.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (i WlanDnsServerRewriteArgs) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewriteOutput).ToWlanDnsServerRewritePtrOutputWithContext(ctx)
}

// WlanDnsServerRewritePtrInput is an input type that accepts WlanDnsServerRewriteArgs, WlanDnsServerRewritePtr and WlanDnsServerRewritePtrOutput values.
// You can construct a concrete instance of `WlanDnsServerRewritePtrInput` via:
//
//	        WlanDnsServerRewriteArgs{...}
//
//	or:
//
//	        nil
type WlanDnsServerRewritePtrInput interface {
	pulumi.Input

	ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput
	ToWlanDnsServerRewritePtrOutputWithContext(context.Context) WlanDnsServerRewritePtrOutput
}

type wlanDnsServerRewritePtrType WlanDnsServerRewriteArgs

func WlanDnsServerRewritePtr(v *WlanDnsServerRewriteArgs) WlanDnsServerRewritePtrInput {
	return (*wlanDnsServerRewritePtrType)(v)
}

func (*wlanDnsServerRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDnsServerRewrite)(nil)).Elem()
}

func (i *wlanDnsServerRewritePtrType) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return i.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (i *wlanDnsServerRewritePtrType) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDnsServerRewritePtrOutput)
}

type WlanDnsServerRewriteOutput struct{ *pulumi.OutputState }

func (WlanDnsServerRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDnsServerRewrite)(nil)).Elem()
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewriteOutput() WlanDnsServerRewriteOutput {
	return o
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewriteOutputWithContext(ctx context.Context) WlanDnsServerRewriteOutput {
	return o
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return o.ToWlanDnsServerRewritePtrOutputWithContext(context.Background())
}

func (o WlanDnsServerRewriteOutput) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDnsServerRewrite) *WlanDnsServerRewrite {
		return &v
	}).(WlanDnsServerRewritePtrOutput)
}

func (o WlanDnsServerRewriteOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDnsServerRewrite) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
func (o WlanDnsServerRewriteOutput) RadiusGroups() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanDnsServerRewrite) map[string]string { return v.RadiusGroups }).(pulumi.StringMapOutput)
}

type WlanDnsServerRewritePtrOutput struct{ *pulumi.OutputState }

func (WlanDnsServerRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDnsServerRewrite)(nil)).Elem()
}

func (o WlanDnsServerRewritePtrOutput) ToWlanDnsServerRewritePtrOutput() WlanDnsServerRewritePtrOutput {
	return o
}

func (o WlanDnsServerRewritePtrOutput) ToWlanDnsServerRewritePtrOutputWithContext(ctx context.Context) WlanDnsServerRewritePtrOutput {
	return o
}

func (o WlanDnsServerRewritePtrOutput) Elem() WlanDnsServerRewriteOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) WlanDnsServerRewrite {
		if v != nil {
			return *v
		}
		var ret WlanDnsServerRewrite
		return ret
	}).(WlanDnsServerRewriteOutput)
}

func (o WlanDnsServerRewritePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// map between radiusGroup and the desired DNS server (IPv4 only). Property key is the RADIUS group, property value is the desired DNS Server
func (o WlanDnsServerRewritePtrOutput) RadiusGroups() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanDnsServerRewrite) map[string]string {
		if v == nil {
			return nil
		}
		return v.RadiusGroups
	}).(pulumi.StringMapOutput)
}

type WlanDynamicPsk struct {
	// default PSK to use if cloud WLC is not available, 8-63 characters
	DefaultPsk    *string `pulumi:"defaultPsk"`
	DefaultVlanId *string `pulumi:"defaultVlanId"`
	Enabled       *bool   `pulumi:"enabled"`
	// when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
	ForceLookup *bool `pulumi:"forceLookup"`
	// enum: `cloudPsks`, `radius`
	Source *string `pulumi:"source"`
}

// WlanDynamicPskInput is an input type that accepts WlanDynamicPskArgs and WlanDynamicPskOutput values.
// You can construct a concrete instance of `WlanDynamicPskInput` via:
//
//	WlanDynamicPskArgs{...}
type WlanDynamicPskInput interface {
	pulumi.Input

	ToWlanDynamicPskOutput() WlanDynamicPskOutput
	ToWlanDynamicPskOutputWithContext(context.Context) WlanDynamicPskOutput
}

type WlanDynamicPskArgs struct {
	// default PSK to use if cloud WLC is not available, 8-63 characters
	DefaultPsk    pulumi.StringPtrInput `pulumi:"defaultPsk"`
	DefaultVlanId pulumi.StringPtrInput `pulumi:"defaultVlanId"`
	Enabled       pulumi.BoolPtrInput   `pulumi:"enabled"`
	// when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
	ForceLookup pulumi.BoolPtrInput `pulumi:"forceLookup"`
	// enum: `cloudPsks`, `radius`
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (WlanDynamicPskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicPsk)(nil)).Elem()
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskOutput() WlanDynamicPskOutput {
	return i.ToWlanDynamicPskOutputWithContext(context.Background())
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskOutputWithContext(ctx context.Context) WlanDynamicPskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskOutput)
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return i.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (i WlanDynamicPskArgs) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskOutput).ToWlanDynamicPskPtrOutputWithContext(ctx)
}

// WlanDynamicPskPtrInput is an input type that accepts WlanDynamicPskArgs, WlanDynamicPskPtr and WlanDynamicPskPtrOutput values.
// You can construct a concrete instance of `WlanDynamicPskPtrInput` via:
//
//	        WlanDynamicPskArgs{...}
//
//	or:
//
//	        nil
type WlanDynamicPskPtrInput interface {
	pulumi.Input

	ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput
	ToWlanDynamicPskPtrOutputWithContext(context.Context) WlanDynamicPskPtrOutput
}

type wlanDynamicPskPtrType WlanDynamicPskArgs

func WlanDynamicPskPtr(v *WlanDynamicPskArgs) WlanDynamicPskPtrInput {
	return (*wlanDynamicPskPtrType)(v)
}

func (*wlanDynamicPskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicPsk)(nil)).Elem()
}

func (i *wlanDynamicPskPtrType) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return i.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (i *wlanDynamicPskPtrType) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicPskPtrOutput)
}

type WlanDynamicPskOutput struct{ *pulumi.OutputState }

func (WlanDynamicPskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicPsk)(nil)).Elem()
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskOutput() WlanDynamicPskOutput {
	return o
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskOutputWithContext(ctx context.Context) WlanDynamicPskOutput {
	return o
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return o.ToWlanDynamicPskPtrOutputWithContext(context.Background())
}

func (o WlanDynamicPskOutput) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDynamicPsk) *WlanDynamicPsk {
		return &v
	}).(WlanDynamicPskPtrOutput)
}

// default PSK to use if cloud WLC is not available, 8-63 characters
func (o WlanDynamicPskOutput) DefaultPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.DefaultPsk }).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskOutput) DefaultVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.DefaultVlanId }).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
func (o WlanDynamicPskOutput) ForceLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *bool { return v.ForceLookup }).(pulumi.BoolPtrOutput)
}

// enum: `cloudPsks`, `radius`
func (o WlanDynamicPskOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicPsk) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type WlanDynamicPskPtrOutput struct{ *pulumi.OutputState }

func (WlanDynamicPskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicPsk)(nil)).Elem()
}

func (o WlanDynamicPskPtrOutput) ToWlanDynamicPskPtrOutput() WlanDynamicPskPtrOutput {
	return o
}

func (o WlanDynamicPskPtrOutput) ToWlanDynamicPskPtrOutputWithContext(ctx context.Context) WlanDynamicPskPtrOutput {
	return o
}

func (o WlanDynamicPskPtrOutput) Elem() WlanDynamicPskOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) WlanDynamicPsk {
		if v != nil {
			return *v
		}
		var ret WlanDynamicPsk
		return ret
	}).(WlanDynamicPskOutput)
}

// default PSK to use if cloud WLC is not available, 8-63 characters
func (o WlanDynamicPskPtrOutput) DefaultPsk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPsk
	}).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskPtrOutput) DefaultVlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.DefaultVlanId
	}).(pulumi.StringPtrOutput)
}

func (o WlanDynamicPskPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// when 11r is enabled, we'll try to use the cached PMK, this can be disabled. `false` means auto
func (o WlanDynamicPskPtrOutput) ForceLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *bool {
		if v == nil {
			return nil
		}
		return v.ForceLookup
	}).(pulumi.BoolPtrOutput)
}

// enum: `cloudPsks`, `radius`
func (o WlanDynamicPskPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicPsk) *string {
		if v == nil {
			return nil
		}
		return v.Source
	}).(pulumi.StringPtrOutput)
}

type WlanDynamicVlan struct {
	// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
	DefaultVlanIds []string `pulumi:"defaultVlanIds"`
	// Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
	Enabled *bool `pulumi:"enabled"`
	// vlan_ids to be locally bridged
	LocalVlanIds []string `pulumi:"localVlanIds"`
	// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
	Type *string `pulumi:"type"`
	// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
	//   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
	//   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
	Vlans map[string]string `pulumi:"vlans"`
}

// WlanDynamicVlanInput is an input type that accepts WlanDynamicVlanArgs and WlanDynamicVlanOutput values.
// You can construct a concrete instance of `WlanDynamicVlanInput` via:
//
//	WlanDynamicVlanArgs{...}
type WlanDynamicVlanInput interface {
	pulumi.Input

	ToWlanDynamicVlanOutput() WlanDynamicVlanOutput
	ToWlanDynamicVlanOutputWithContext(context.Context) WlanDynamicVlanOutput
}

type WlanDynamicVlanArgs struct {
	// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
	DefaultVlanIds pulumi.StringArrayInput `pulumi:"defaultVlanIds"`
	// Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// vlan_ids to be locally bridged
	LocalVlanIds pulumi.StringArrayInput `pulumi:"localVlanIds"`
	// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
	Type pulumi.StringPtrInput `pulumi:"type"`
	// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
	//   * if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
	//   * if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
	Vlans pulumi.StringMapInput `pulumi:"vlans"`
}

func (WlanDynamicVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicVlan)(nil)).Elem()
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanOutput() WlanDynamicVlanOutput {
	return i.ToWlanDynamicVlanOutputWithContext(context.Background())
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanOutputWithContext(ctx context.Context) WlanDynamicVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanOutput)
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return i.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (i WlanDynamicVlanArgs) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanOutput).ToWlanDynamicVlanPtrOutputWithContext(ctx)
}

// WlanDynamicVlanPtrInput is an input type that accepts WlanDynamicVlanArgs, WlanDynamicVlanPtr and WlanDynamicVlanPtrOutput values.
// You can construct a concrete instance of `WlanDynamicVlanPtrInput` via:
//
//	        WlanDynamicVlanArgs{...}
//
//	or:
//
//	        nil
type WlanDynamicVlanPtrInput interface {
	pulumi.Input

	ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput
	ToWlanDynamicVlanPtrOutputWithContext(context.Context) WlanDynamicVlanPtrOutput
}

type wlanDynamicVlanPtrType WlanDynamicVlanArgs

func WlanDynamicVlanPtr(v *WlanDynamicVlanArgs) WlanDynamicVlanPtrInput {
	return (*wlanDynamicVlanPtrType)(v)
}

func (*wlanDynamicVlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicVlan)(nil)).Elem()
}

func (i *wlanDynamicVlanPtrType) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return i.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (i *wlanDynamicVlanPtrType) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanDynamicVlanPtrOutput)
}

type WlanDynamicVlanOutput struct{ *pulumi.OutputState }

func (WlanDynamicVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanDynamicVlan)(nil)).Elem()
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanOutput() WlanDynamicVlanOutput {
	return o
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanOutputWithContext(ctx context.Context) WlanDynamicVlanOutput {
	return o
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return o.ToWlanDynamicVlanPtrOutputWithContext(context.Background())
}

func (o WlanDynamicVlanOutput) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanDynamicVlan) *WlanDynamicVlan {
		return &v
	}).(WlanDynamicVlanPtrOutput)
}

// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
func (o WlanDynamicVlanOutput) DefaultVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanDynamicVlan) []string { return v.DefaultVlanIds }).(pulumi.StringArrayOutput)
}

// Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
func (o WlanDynamicVlanOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanDynamicVlan) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// vlan_ids to be locally bridged
func (o WlanDynamicVlanOutput) LocalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanDynamicVlan) []string { return v.LocalVlanIds }).(pulumi.StringArrayOutput)
}

// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
func (o WlanDynamicVlanOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanDynamicVlan) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
//   - if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
//   - if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
func (o WlanDynamicVlanOutput) Vlans() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanDynamicVlan) map[string]string { return v.Vlans }).(pulumi.StringMapOutput)
}

type WlanDynamicVlanPtrOutput struct{ *pulumi.OutputState }

func (WlanDynamicVlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanDynamicVlan)(nil)).Elem()
}

func (o WlanDynamicVlanPtrOutput) ToWlanDynamicVlanPtrOutput() WlanDynamicVlanPtrOutput {
	return o
}

func (o WlanDynamicVlanPtrOutput) ToWlanDynamicVlanPtrOutputWithContext(ctx context.Context) WlanDynamicVlanPtrOutput {
	return o
}

func (o WlanDynamicVlanPtrOutput) Elem() WlanDynamicVlanOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) WlanDynamicVlan {
		if v != nil {
			return *v
		}
		var ret WlanDynamicVlan
		return ret
	}).(WlanDynamicVlanOutput)
}

// Default VLAN ID(s) can be a number, a range of VLAN IDs, a variable or multiple numbers, ranges or variables as a VLAN pool. Default VLAN as a pool of VLANS requires 0.14.x or newer firmware
func (o WlanDynamicVlanPtrOutput) DefaultVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) []string {
		if v == nil {
			return nil
		}
		return v.DefaultVlanIds
	}).(pulumi.StringArrayOutput)
}

// Requires `vlanEnabled`==`true` to be set to `true`. Whether to enable dynamic vlan
func (o WlanDynamicVlanPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// vlan_ids to be locally bridged
func (o WlanDynamicVlanPtrOutput) LocalVlanIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) []string {
		if v == nil {
			return nil
		}
		return v.LocalVlanIds
	}).(pulumi.StringArrayOutput)
}

// standard (using Tunnel-Private-Group-ID, widely supported), airespace-interface-name (Airespace/Cisco). enum: `airespace-interface-name`, `standard`
func (o WlanDynamicVlanPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// map between vlanId (as string) to airespace interface names (comma-separated) or null for stndard mapping
//   - if `dynamic_vlan.type`==`standard`, property key is the Vlan ID and property value is \"\"
//   - if `dynamic_vlan.type`==`airespace-interface-name`, property key is the Vlan ID and property value is the Airespace Interface Name
func (o WlanDynamicVlanPtrOutput) Vlans() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanDynamicVlan) map[string]string {
		if v == nil {
			return nil
		}
		return v.Vlans
	}).(pulumi.StringMapOutput)
}

type WlanHotspot20 struct {
	DomainNames []string `pulumi:"domainNames"`
	// whether to enable hotspot 2.0 config
	Enabled   *bool    `pulumi:"enabled"`
	NaiRealms []string `pulumi:"naiRealms"`
	// list of operators to support
	Operators []string `pulumi:"operators"`
	Rcois     []string `pulumi:"rcois"`
	// venue name, default is site name
	VenueName *string `pulumi:"venueName"`
}

// WlanHotspot20Input is an input type that accepts WlanHotspot20Args and WlanHotspot20Output values.
// You can construct a concrete instance of `WlanHotspot20Input` via:
//
//	WlanHotspot20Args{...}
type WlanHotspot20Input interface {
	pulumi.Input

	ToWlanHotspot20Output() WlanHotspot20Output
	ToWlanHotspot20OutputWithContext(context.Context) WlanHotspot20Output
}

type WlanHotspot20Args struct {
	DomainNames pulumi.StringArrayInput `pulumi:"domainNames"`
	// whether to enable hotspot 2.0 config
	Enabled   pulumi.BoolPtrInput     `pulumi:"enabled"`
	NaiRealms pulumi.StringArrayInput `pulumi:"naiRealms"`
	// list of operators to support
	Operators pulumi.StringArrayInput `pulumi:"operators"`
	Rcois     pulumi.StringArrayInput `pulumi:"rcois"`
	// venue name, default is site name
	VenueName pulumi.StringPtrInput `pulumi:"venueName"`
}

func (WlanHotspot20Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanHotspot20)(nil)).Elem()
}

func (i WlanHotspot20Args) ToWlanHotspot20Output() WlanHotspot20Output {
	return i.ToWlanHotspot20OutputWithContext(context.Background())
}

func (i WlanHotspot20Args) ToWlanHotspot20OutputWithContext(ctx context.Context) WlanHotspot20Output {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20Output)
}

func (i WlanHotspot20Args) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return i.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (i WlanHotspot20Args) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20Output).ToWlanHotspot20PtrOutputWithContext(ctx)
}

// WlanHotspot20PtrInput is an input type that accepts WlanHotspot20Args, WlanHotspot20Ptr and WlanHotspot20PtrOutput values.
// You can construct a concrete instance of `WlanHotspot20PtrInput` via:
//
//	        WlanHotspot20Args{...}
//
//	or:
//
//	        nil
type WlanHotspot20PtrInput interface {
	pulumi.Input

	ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput
	ToWlanHotspot20PtrOutputWithContext(context.Context) WlanHotspot20PtrOutput
}

type wlanHotspot20PtrType WlanHotspot20Args

func WlanHotspot20Ptr(v *WlanHotspot20Args) WlanHotspot20PtrInput {
	return (*wlanHotspot20PtrType)(v)
}

func (*wlanHotspot20PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanHotspot20)(nil)).Elem()
}

func (i *wlanHotspot20PtrType) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return i.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (i *wlanHotspot20PtrType) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanHotspot20PtrOutput)
}

type WlanHotspot20Output struct{ *pulumi.OutputState }

func (WlanHotspot20Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanHotspot20)(nil)).Elem()
}

func (o WlanHotspot20Output) ToWlanHotspot20Output() WlanHotspot20Output {
	return o
}

func (o WlanHotspot20Output) ToWlanHotspot20OutputWithContext(ctx context.Context) WlanHotspot20Output {
	return o
}

func (o WlanHotspot20Output) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return o.ToWlanHotspot20PtrOutputWithContext(context.Background())
}

func (o WlanHotspot20Output) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanHotspot20) *WlanHotspot20 {
		return &v
	}).(WlanHotspot20PtrOutput)
}

func (o WlanHotspot20Output) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.DomainNames }).(pulumi.StringArrayOutput)
}

// whether to enable hotspot 2.0 config
func (o WlanHotspot20Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanHotspot20) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanHotspot20Output) NaiRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.NaiRealms }).(pulumi.StringArrayOutput)
}

// list of operators to support
func (o WlanHotspot20Output) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.Operators }).(pulumi.StringArrayOutput)
}

func (o WlanHotspot20Output) Rcois() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanHotspot20) []string { return v.Rcois }).(pulumi.StringArrayOutput)
}

// venue name, default is site name
func (o WlanHotspot20Output) VenueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanHotspot20) *string { return v.VenueName }).(pulumi.StringPtrOutput)
}

type WlanHotspot20PtrOutput struct{ *pulumi.OutputState }

func (WlanHotspot20PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanHotspot20)(nil)).Elem()
}

func (o WlanHotspot20PtrOutput) ToWlanHotspot20PtrOutput() WlanHotspot20PtrOutput {
	return o
}

func (o WlanHotspot20PtrOutput) ToWlanHotspot20PtrOutputWithContext(ctx context.Context) WlanHotspot20PtrOutput {
	return o
}

func (o WlanHotspot20PtrOutput) Elem() WlanHotspot20Output {
	return o.ApplyT(func(v *WlanHotspot20) WlanHotspot20 {
		if v != nil {
			return *v
		}
		var ret WlanHotspot20
		return ret
	}).(WlanHotspot20Output)
}

func (o WlanHotspot20PtrOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.DomainNames
	}).(pulumi.StringArrayOutput)
}

// whether to enable hotspot 2.0 config
func (o WlanHotspot20PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanHotspot20) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanHotspot20PtrOutput) NaiRealms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.NaiRealms
	}).(pulumi.StringArrayOutput)
}

// list of operators to support
func (o WlanHotspot20PtrOutput) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.Operators
	}).(pulumi.StringArrayOutput)
}

func (o WlanHotspot20PtrOutput) Rcois() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanHotspot20) []string {
		if v == nil {
			return nil
		}
		return v.Rcois
	}).(pulumi.StringArrayOutput)
}

// venue name, default is site name
func (o WlanHotspot20PtrOutput) VenueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanHotspot20) *string {
		if v == nil {
			return nil
		}
		return v.VenueName
	}).(pulumi.StringPtrOutput)
}

type WlanInjectDhcpOption82 struct {
	// information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
	//   * {{AP_MAC}}
	//   * {{AP_MAC_DASHED}}
	//   * {{AP_MODEL}}
	//   * {{AP_NAME}}
	//   * {{SITE_NAME}}
	//   * {{SSID}}
	CircuitId *string `pulumi:"circuitId"`
	// whether to inject option 82 when forwarding DHCP packets
	Enabled *bool `pulumi:"enabled"`
}

// WlanInjectDhcpOption82Input is an input type that accepts WlanInjectDhcpOption82Args and WlanInjectDhcpOption82Output values.
// You can construct a concrete instance of `WlanInjectDhcpOption82Input` via:
//
//	WlanInjectDhcpOption82Args{...}
type WlanInjectDhcpOption82Input interface {
	pulumi.Input

	ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output
	ToWlanInjectDhcpOption82OutputWithContext(context.Context) WlanInjectDhcpOption82Output
}

type WlanInjectDhcpOption82Args struct {
	// information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
	//   * {{AP_MAC}}
	//   * {{AP_MAC_DASHED}}
	//   * {{AP_MODEL}}
	//   * {{AP_NAME}}
	//   * {{SITE_NAME}}
	//   * {{SSID}}
	CircuitId pulumi.StringPtrInput `pulumi:"circuitId"`
	// whether to inject option 82 when forwarding DHCP packets
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (WlanInjectDhcpOption82Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanInjectDhcpOption82)(nil)).Elem()
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output {
	return i.ToWlanInjectDhcpOption82OutputWithContext(context.Background())
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82OutputWithContext(ctx context.Context) WlanInjectDhcpOption82Output {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82Output)
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return i.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (i WlanInjectDhcpOption82Args) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82Output).ToWlanInjectDhcpOption82PtrOutputWithContext(ctx)
}

// WlanInjectDhcpOption82PtrInput is an input type that accepts WlanInjectDhcpOption82Args, WlanInjectDhcpOption82Ptr and WlanInjectDhcpOption82PtrOutput values.
// You can construct a concrete instance of `WlanInjectDhcpOption82PtrInput` via:
//
//	        WlanInjectDhcpOption82Args{...}
//
//	or:
//
//	        nil
type WlanInjectDhcpOption82PtrInput interface {
	pulumi.Input

	ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput
	ToWlanInjectDhcpOption82PtrOutputWithContext(context.Context) WlanInjectDhcpOption82PtrOutput
}

type wlanInjectDhcpOption82PtrType WlanInjectDhcpOption82Args

func WlanInjectDhcpOption82Ptr(v *WlanInjectDhcpOption82Args) WlanInjectDhcpOption82PtrInput {
	return (*wlanInjectDhcpOption82PtrType)(v)
}

func (*wlanInjectDhcpOption82PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanInjectDhcpOption82)(nil)).Elem()
}

func (i *wlanInjectDhcpOption82PtrType) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return i.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (i *wlanInjectDhcpOption82PtrType) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanInjectDhcpOption82PtrOutput)
}

type WlanInjectDhcpOption82Output struct{ *pulumi.OutputState }

func (WlanInjectDhcpOption82Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanInjectDhcpOption82)(nil)).Elem()
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82Output() WlanInjectDhcpOption82Output {
	return o
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82OutputWithContext(ctx context.Context) WlanInjectDhcpOption82Output {
	return o
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return o.ToWlanInjectDhcpOption82PtrOutputWithContext(context.Background())
}

func (o WlanInjectDhcpOption82Output) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanInjectDhcpOption82) *WlanInjectDhcpOption82 {
		return &v
	}).(WlanInjectDhcpOption82PtrOutput)
}

// information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
//   - {{AP_MAC}}
//   - {{AP_MAC_DASHED}}
//   - {{AP_MODEL}}
//   - {{AP_NAME}}
//   - {{SITE_NAME}}
//   - {{SSID}}
func (o WlanInjectDhcpOption82Output) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanInjectDhcpOption82) *string { return v.CircuitId }).(pulumi.StringPtrOutput)
}

// whether to inject option 82 when forwarding DHCP packets
func (o WlanInjectDhcpOption82Output) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanInjectDhcpOption82) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanInjectDhcpOption82PtrOutput struct{ *pulumi.OutputState }

func (WlanInjectDhcpOption82PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanInjectDhcpOption82)(nil)).Elem()
}

func (o WlanInjectDhcpOption82PtrOutput) ToWlanInjectDhcpOption82PtrOutput() WlanInjectDhcpOption82PtrOutput {
	return o
}

func (o WlanInjectDhcpOption82PtrOutput) ToWlanInjectDhcpOption82PtrOutputWithContext(ctx context.Context) WlanInjectDhcpOption82PtrOutput {
	return o
}

func (o WlanInjectDhcpOption82PtrOutput) Elem() WlanInjectDhcpOption82Output {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) WlanInjectDhcpOption82 {
		if v != nil {
			return *v
		}
		var ret WlanInjectDhcpOption82
		return ret
	}).(WlanInjectDhcpOption82Output)
}

// information to set in the `circuitId` field of the DHCP Option 82. It is possible to use static string or the following variables (e.g. `{{SSID}}:{{AP_MAC}}`):
//   - {{AP_MAC}}
//   - {{AP_MAC_DASHED}}
//   - {{AP_MODEL}}
//   - {{AP_NAME}}
//   - {{SITE_NAME}}
//   - {{SSID}}
func (o WlanInjectDhcpOption82PtrOutput) CircuitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) *string {
		if v == nil {
			return nil
		}
		return v.CircuitId
	}).(pulumi.StringPtrOutput)
}

// whether to inject option 82 when forwarding DHCP packets
func (o WlanInjectDhcpOption82PtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanInjectDhcpOption82) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanMistNac struct {
	// when enabled:
	//   * `authServers` is ignored
	//   * `acctServers` is ignored
	//   * `auth_servers_*` are ignored
	//   * `coaServers` is ignored
	//   * `radsec` is ignored
	//   * `coaEnabled` is assumed'
	Enabled *bool `pulumi:"enabled"`
}

// WlanMistNacInput is an input type that accepts WlanMistNacArgs and WlanMistNacOutput values.
// You can construct a concrete instance of `WlanMistNacInput` via:
//
//	WlanMistNacArgs{...}
type WlanMistNacInput interface {
	pulumi.Input

	ToWlanMistNacOutput() WlanMistNacOutput
	ToWlanMistNacOutputWithContext(context.Context) WlanMistNacOutput
}

type WlanMistNacArgs struct {
	// when enabled:
	//   * `authServers` is ignored
	//   * `acctServers` is ignored
	//   * `auth_servers_*` are ignored
	//   * `coaServers` is ignored
	//   * `radsec` is ignored
	//   * `coaEnabled` is assumed'
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (WlanMistNacArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanMistNac)(nil)).Elem()
}

func (i WlanMistNacArgs) ToWlanMistNacOutput() WlanMistNacOutput {
	return i.ToWlanMistNacOutputWithContext(context.Background())
}

func (i WlanMistNacArgs) ToWlanMistNacOutputWithContext(ctx context.Context) WlanMistNacOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacOutput)
}

func (i WlanMistNacArgs) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return i.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (i WlanMistNacArgs) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacOutput).ToWlanMistNacPtrOutputWithContext(ctx)
}

// WlanMistNacPtrInput is an input type that accepts WlanMistNacArgs, WlanMistNacPtr and WlanMistNacPtrOutput values.
// You can construct a concrete instance of `WlanMistNacPtrInput` via:
//
//	        WlanMistNacArgs{...}
//
//	or:
//
//	        nil
type WlanMistNacPtrInput interface {
	pulumi.Input

	ToWlanMistNacPtrOutput() WlanMistNacPtrOutput
	ToWlanMistNacPtrOutputWithContext(context.Context) WlanMistNacPtrOutput
}

type wlanMistNacPtrType WlanMistNacArgs

func WlanMistNacPtr(v *WlanMistNacArgs) WlanMistNacPtrInput {
	return (*wlanMistNacPtrType)(v)
}

func (*wlanMistNacPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanMistNac)(nil)).Elem()
}

func (i *wlanMistNacPtrType) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return i.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (i *wlanMistNacPtrType) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanMistNacPtrOutput)
}

type WlanMistNacOutput struct{ *pulumi.OutputState }

func (WlanMistNacOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanMistNac)(nil)).Elem()
}

func (o WlanMistNacOutput) ToWlanMistNacOutput() WlanMistNacOutput {
	return o
}

func (o WlanMistNacOutput) ToWlanMistNacOutputWithContext(ctx context.Context) WlanMistNacOutput {
	return o
}

func (o WlanMistNacOutput) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return o.ToWlanMistNacPtrOutputWithContext(context.Background())
}

func (o WlanMistNacOutput) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanMistNac) *WlanMistNac {
		return &v
	}).(WlanMistNacPtrOutput)
}

// when enabled:
//   - `authServers` is ignored
//   - `acctServers` is ignored
//   - `auth_servers_*` are ignored
//   - `coaServers` is ignored
//   - `radsec` is ignored
//   - `coaEnabled` is assumed'
func (o WlanMistNacOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanMistNac) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type WlanMistNacPtrOutput struct{ *pulumi.OutputState }

func (WlanMistNacPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanMistNac)(nil)).Elem()
}

func (o WlanMistNacPtrOutput) ToWlanMistNacPtrOutput() WlanMistNacPtrOutput {
	return o
}

func (o WlanMistNacPtrOutput) ToWlanMistNacPtrOutputWithContext(ctx context.Context) WlanMistNacPtrOutput {
	return o
}

func (o WlanMistNacPtrOutput) Elem() WlanMistNacOutput {
	return o.ApplyT(func(v *WlanMistNac) WlanMistNac {
		if v != nil {
			return *v
		}
		var ret WlanMistNac
		return ret
	}).(WlanMistNacOutput)
}

// when enabled:
//   - `authServers` is ignored
//   - `acctServers` is ignored
//   - `auth_servers_*` are ignored
//   - `coaServers` is ignored
//   - `radsec` is ignored
//   - `coaEnabled` is assumed'
func (o WlanMistNacPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanMistNac) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type WlanPortal struct {
	// Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
	AllowWlanIdRoam *bool `pulumi:"allowWlanIdRoam"`
	// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
	AmazonClientId *string `pulumi:"amazonClientId"`
	// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
	AmazonClientSecret *string `pulumi:"amazonClientSecret"`
	// Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	AmazonEmailDomains []string `pulumi:"amazonEmailDomains"`
	// whether amazon is enabled as a login method
	AmazonEnabled *bool `pulumi:"amazonEnabled"`
	// Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
	AmazonExpire *int `pulumi:"amazonExpire"`
	// authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
	Auth *string `pulumi:"auth"`
	// Required if `azureEnabled`==`true`. Azure active directory app client id
	AzureClientId *string `pulumi:"azureClientId"`
	// Required if `azureEnabled`==`true`. Azure active directory app client secret
	AzureClientSecret *string `pulumi:"azureClientSecret"`
	// whether Azure Active Directory is enabled as a login method
	AzureEnabled *bool `pulumi:"azureEnabled"`
	// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
	AzureExpire *int `pulumi:"azureExpire"`
	// Required if `azureEnabled`==`true`. Azure active directory tenant id.
	AzureTenantId *string `pulumi:"azureTenantId"`
	// Required if `smsProvider`==`broadnet`
	BroadnetPassword *string `pulumi:"broadnetPassword"`
	// Required if `smsProvider`==`broadnet`
	BroadnetSid *string `pulumi:"broadnetSid"`
	// Required if `smsProvider`==`broadnet`
	BroadnetUserId *string `pulumi:"broadnetUserId"`
	// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
	BypassWhenCloudDown *bool `pulumi:"bypassWhenCloudDown"`
	// Required if `smsProvider`==`clickatell`
	ClickatellApiKey *string `pulumi:"clickatellApiKey"`
	// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
	CrossSite *bool `pulumi:"crossSite"`
	// whether email (access code verification) is enabled as a login method
	EmailEnabled *bool `pulumi:"emailEnabled"`
	// whether guest portal is enabled
	Enabled *bool `pulumi:"enabled"`
	// how long to remain authorized, in minutes
	Expire *int `pulumi:"expire"`
	// Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
	ExternalPortalUrl *string `pulumi:"externalPortalUrl"`
	// Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
	FacebookClientId *string `pulumi:"facebookClientId"`
	// Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
	FacebookClientSecret *string `pulumi:"facebookClientSecret"`
	// Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	FacebookEmailDomains []string `pulumi:"facebookEmailDomains"`
	// whether facebook is enabled as a login method
	FacebookEnabled *bool `pulumi:"facebookEnabled"`
	// Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
	FacebookExpire *int `pulumi:"facebookExpire"`
	// whether to forward the user to another URL after authorized
	Forward *bool `pulumi:"forward"`
	// the URL to forward the user to
	ForwardUrl *string `pulumi:"forwardUrl"`
	// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
	GoogleClientId *string `pulumi:"googleClientId"`
	// Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
	GoogleClientSecret *string `pulumi:"googleClientSecret"`
	// Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	GoogleEmailDomains []string `pulumi:"googleEmailDomains"`
	// whether google is enabled as login method
	GoogleEnabled *bool `pulumi:"googleEnabled"`
	// Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
	GoogleExpire *int `pulumi:"googleExpire"`
	// Required if `smsProvider`==`gupshup`
	GupshupPassword *string `pulumi:"gupshupPassword"`
	// Required if `smsProvider`==`gupshup`
	GupshupUserid *string `pulumi:"gupshupUserid"`
	// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
	MicrosoftClientId *string `pulumi:"microsoftClientId"`
	// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
	MicrosoftClientSecret *string `pulumi:"microsoftClientSecret"`
	// Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	MicrosoftEmailDomains []string `pulumi:"microsoftEmailDomains"`
	// whether microsoft 365 is enabled as a login method
	MicrosoftEnabled *bool `pulumi:"microsoftEnabled"`
	// Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
	MicrosoftExpire *int `pulumi:"microsoftExpire"`
	// Whether password is enabled
	PassphraseEnabled *bool `pulumi:"passphraseEnabled"`
	// Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
	PassphraseExpire *int `pulumi:"passphraseExpire"`
	// Required if `passphraseEnabled`==`true`.
	Password *string `pulumi:"password"`
	// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
	PredefinedSponsorsEnabled *bool `pulumi:"predefinedSponsorsEnabled"`
	// whether to hide sponsor’s email from list of sponsors
	PredefinedSponsorsHideEmail *bool `pulumi:"predefinedSponsorsHideEmail"`
	Privacy                     *bool `pulumi:"privacy"`
	// Required if `smsProvider`==`puzzel`
	PuzzelPassword *string `pulumi:"puzzelPassword"`
	// Required if `smsProvider`==`puzzel`
	PuzzelServiceId *string `pulumi:"puzzelServiceId"`
	// Required if `smsProvider`==`puzzel`
	PuzzelUsername *string `pulumi:"puzzelUsername"`
	// whether sms is enabled as a login method
	SmsEnabled *bool `pulumi:"smsEnabled"`
	// Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
	SmsExpire *int `pulumi:"smsExpire"`
	// Optional if `smsEnabled`==`true`. SMS Message format
	SmsMessageFormat *string `pulumi:"smsMessageFormat"`
	// Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
	SmsProvider *string `pulumi:"smsProvider"`
	// Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
	SponsorAutoApprove *bool `pulumi:"sponsorAutoApprove"`
	// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
	SponsorEmailDomains []string `pulumi:"sponsorEmailDomains"`
	// whether sponsor is enabled
	SponsorEnabled *bool `pulumi:"sponsorEnabled"`
	// Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
	SponsorExpire *int `pulumi:"sponsorExpire"`
	// Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
	SponsorLinkValidityDuration *string `pulumi:"sponsorLinkValidityDuration"`
	// Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
	SponsorNotifyAll *bool `pulumi:"sponsorNotifyAll"`
	// Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
	SponsorStatusNotify *bool `pulumi:"sponsorStatusNotify"`
	// object of allowed sponsors email with name. Required if `sponsorEnabled`
	//             is `true` and `sponsorEmailDomains` is empty.
	//
	//             Property key is the sponsor email, Property value is the sponsor name
	Sponsors map[string]string `pulumi:"sponsors"`
	// Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	SsoDefaultRole *string `pulumi:"ssoDefaultRole"`
	// Optionl if `wlanPortalAuth`==`sso`
	SsoForcedRole *string `pulumi:"ssoForcedRole"`
	// Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
	SsoIdpCert *string `pulumi:"ssoIdpCert"`
	// Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
	SsoIdpSignAlgo *string `pulumi:"ssoIdpSignAlgo"`
	// Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
	SsoIdpSsoUrl *string `pulumi:"ssoIdpSsoUrl"`
	// Required if `wlanPortalAuth`==`sso`, IDP issuer URL
	SsoIssuer *string `pulumi:"ssoIssuer"`
	// Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
	SsoNameidFormat *string `pulumi:"ssoNameidFormat"`
	// Required if `smsProvider`==`telstra`, Client ID provided by Telstra
	TelstraClientId *string `pulumi:"telstraClientId"`
	// Required if `smsProvider`==`telstra`, Client secret provided by Telstra
	TelstraClientSecret *string `pulumi:"telstraClientSecret"`
	// Required if `smsProvider`==`twilio`, Auth token account with twilio account
	TwilioAuthToken *string `pulumi:"twilioAuthToken"`
	// Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
	TwilioPhoneNumber *string `pulumi:"twilioPhoneNumber"`
	// Required if `smsProvider`==`twilio`, Account SID provided by Twilio
	TwilioSid *string `pulumi:"twilioSid"`
}

// WlanPortalInput is an input type that accepts WlanPortalArgs and WlanPortalOutput values.
// You can construct a concrete instance of `WlanPortalInput` via:
//
//	WlanPortalArgs{...}
type WlanPortalInput interface {
	pulumi.Input

	ToWlanPortalOutput() WlanPortalOutput
	ToWlanPortalOutputWithContext(context.Context) WlanPortalOutput
}

type WlanPortalArgs struct {
	// Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
	AllowWlanIdRoam pulumi.BoolPtrInput `pulumi:"allowWlanIdRoam"`
	// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
	AmazonClientId pulumi.StringPtrInput `pulumi:"amazonClientId"`
	// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
	AmazonClientSecret pulumi.StringPtrInput `pulumi:"amazonClientSecret"`
	// Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	AmazonEmailDomains pulumi.StringArrayInput `pulumi:"amazonEmailDomains"`
	// whether amazon is enabled as a login method
	AmazonEnabled pulumi.BoolPtrInput `pulumi:"amazonEnabled"`
	// Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
	AmazonExpire pulumi.IntPtrInput `pulumi:"amazonExpire"`
	// authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
	Auth pulumi.StringPtrInput `pulumi:"auth"`
	// Required if `azureEnabled`==`true`. Azure active directory app client id
	AzureClientId pulumi.StringPtrInput `pulumi:"azureClientId"`
	// Required if `azureEnabled`==`true`. Azure active directory app client secret
	AzureClientSecret pulumi.StringPtrInput `pulumi:"azureClientSecret"`
	// whether Azure Active Directory is enabled as a login method
	AzureEnabled pulumi.BoolPtrInput `pulumi:"azureEnabled"`
	// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
	AzureExpire pulumi.IntPtrInput `pulumi:"azureExpire"`
	// Required if `azureEnabled`==`true`. Azure active directory tenant id.
	AzureTenantId pulumi.StringPtrInput `pulumi:"azureTenantId"`
	// Required if `smsProvider`==`broadnet`
	BroadnetPassword pulumi.StringPtrInput `pulumi:"broadnetPassword"`
	// Required if `smsProvider`==`broadnet`
	BroadnetSid pulumi.StringPtrInput `pulumi:"broadnetSid"`
	// Required if `smsProvider`==`broadnet`
	BroadnetUserId pulumi.StringPtrInput `pulumi:"broadnetUserId"`
	// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
	BypassWhenCloudDown pulumi.BoolPtrInput `pulumi:"bypassWhenCloudDown"`
	// Required if `smsProvider`==`clickatell`
	ClickatellApiKey pulumi.StringPtrInput `pulumi:"clickatellApiKey"`
	// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
	CrossSite pulumi.BoolPtrInput `pulumi:"crossSite"`
	// whether email (access code verification) is enabled as a login method
	EmailEnabled pulumi.BoolPtrInput `pulumi:"emailEnabled"`
	// whether guest portal is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// how long to remain authorized, in minutes
	Expire pulumi.IntPtrInput `pulumi:"expire"`
	// Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
	ExternalPortalUrl pulumi.StringPtrInput `pulumi:"externalPortalUrl"`
	// Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
	FacebookClientId pulumi.StringPtrInput `pulumi:"facebookClientId"`
	// Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
	FacebookClientSecret pulumi.StringPtrInput `pulumi:"facebookClientSecret"`
	// Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	FacebookEmailDomains pulumi.StringArrayInput `pulumi:"facebookEmailDomains"`
	// whether facebook is enabled as a login method
	FacebookEnabled pulumi.BoolPtrInput `pulumi:"facebookEnabled"`
	// Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
	FacebookExpire pulumi.IntPtrInput `pulumi:"facebookExpire"`
	// whether to forward the user to another URL after authorized
	Forward pulumi.BoolPtrInput `pulumi:"forward"`
	// the URL to forward the user to
	ForwardUrl pulumi.StringPtrInput `pulumi:"forwardUrl"`
	// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
	GoogleClientId pulumi.StringPtrInput `pulumi:"googleClientId"`
	// Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
	GoogleClientSecret pulumi.StringPtrInput `pulumi:"googleClientSecret"`
	// Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	GoogleEmailDomains pulumi.StringArrayInput `pulumi:"googleEmailDomains"`
	// whether google is enabled as login method
	GoogleEnabled pulumi.BoolPtrInput `pulumi:"googleEnabled"`
	// Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
	GoogleExpire pulumi.IntPtrInput `pulumi:"googleExpire"`
	// Required if `smsProvider`==`gupshup`
	GupshupPassword pulumi.StringPtrInput `pulumi:"gupshupPassword"`
	// Required if `smsProvider`==`gupshup`
	GupshupUserid pulumi.StringPtrInput `pulumi:"gupshupUserid"`
	// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
	MicrosoftClientId pulumi.StringPtrInput `pulumi:"microsoftClientId"`
	// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
	MicrosoftClientSecret pulumi.StringPtrInput `pulumi:"microsoftClientSecret"`
	// Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
	MicrosoftEmailDomains pulumi.StringArrayInput `pulumi:"microsoftEmailDomains"`
	// whether microsoft 365 is enabled as a login method
	MicrosoftEnabled pulumi.BoolPtrInput `pulumi:"microsoftEnabled"`
	// Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
	MicrosoftExpire pulumi.IntPtrInput `pulumi:"microsoftExpire"`
	// Whether password is enabled
	PassphraseEnabled pulumi.BoolPtrInput `pulumi:"passphraseEnabled"`
	// Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
	PassphraseExpire pulumi.IntPtrInput `pulumi:"passphraseExpire"`
	// Required if `passphraseEnabled`==`true`.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
	PredefinedSponsorsEnabled pulumi.BoolPtrInput `pulumi:"predefinedSponsorsEnabled"`
	// whether to hide sponsor’s email from list of sponsors
	PredefinedSponsorsHideEmail pulumi.BoolPtrInput `pulumi:"predefinedSponsorsHideEmail"`
	Privacy                     pulumi.BoolPtrInput `pulumi:"privacy"`
	// Required if `smsProvider`==`puzzel`
	PuzzelPassword pulumi.StringPtrInput `pulumi:"puzzelPassword"`
	// Required if `smsProvider`==`puzzel`
	PuzzelServiceId pulumi.StringPtrInput `pulumi:"puzzelServiceId"`
	// Required if `smsProvider`==`puzzel`
	PuzzelUsername pulumi.StringPtrInput `pulumi:"puzzelUsername"`
	// whether sms is enabled as a login method
	SmsEnabled pulumi.BoolPtrInput `pulumi:"smsEnabled"`
	// Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
	SmsExpire pulumi.IntPtrInput `pulumi:"smsExpire"`
	// Optional if `smsEnabled`==`true`. SMS Message format
	SmsMessageFormat pulumi.StringPtrInput `pulumi:"smsMessageFormat"`
	// Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
	SmsProvider pulumi.StringPtrInput `pulumi:"smsProvider"`
	// Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
	SponsorAutoApprove pulumi.BoolPtrInput `pulumi:"sponsorAutoApprove"`
	// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
	SponsorEmailDomains pulumi.StringArrayInput `pulumi:"sponsorEmailDomains"`
	// whether sponsor is enabled
	SponsorEnabled pulumi.BoolPtrInput `pulumi:"sponsorEnabled"`
	// Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
	SponsorExpire pulumi.IntPtrInput `pulumi:"sponsorExpire"`
	// Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
	SponsorLinkValidityDuration pulumi.StringPtrInput `pulumi:"sponsorLinkValidityDuration"`
	// Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
	SponsorNotifyAll pulumi.BoolPtrInput `pulumi:"sponsorNotifyAll"`
	// Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
	SponsorStatusNotify pulumi.BoolPtrInput `pulumi:"sponsorStatusNotify"`
	// object of allowed sponsors email with name. Required if `sponsorEnabled`
	//             is `true` and `sponsorEmailDomains` is empty.
	//
	//             Property key is the sponsor email, Property value is the sponsor name
	Sponsors pulumi.StringMapInput `pulumi:"sponsors"`
	// Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
	SsoDefaultRole pulumi.StringPtrInput `pulumi:"ssoDefaultRole"`
	// Optionl if `wlanPortalAuth`==`sso`
	SsoForcedRole pulumi.StringPtrInput `pulumi:"ssoForcedRole"`
	// Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
	SsoIdpCert pulumi.StringPtrInput `pulumi:"ssoIdpCert"`
	// Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
	SsoIdpSignAlgo pulumi.StringPtrInput `pulumi:"ssoIdpSignAlgo"`
	// Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
	SsoIdpSsoUrl pulumi.StringPtrInput `pulumi:"ssoIdpSsoUrl"`
	// Required if `wlanPortalAuth`==`sso`, IDP issuer URL
	SsoIssuer pulumi.StringPtrInput `pulumi:"ssoIssuer"`
	// Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
	SsoNameidFormat pulumi.StringPtrInput `pulumi:"ssoNameidFormat"`
	// Required if `smsProvider`==`telstra`, Client ID provided by Telstra
	TelstraClientId pulumi.StringPtrInput `pulumi:"telstraClientId"`
	// Required if `smsProvider`==`telstra`, Client secret provided by Telstra
	TelstraClientSecret pulumi.StringPtrInput `pulumi:"telstraClientSecret"`
	// Required if `smsProvider`==`twilio`, Auth token account with twilio account
	TwilioAuthToken pulumi.StringPtrInput `pulumi:"twilioAuthToken"`
	// Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
	TwilioPhoneNumber pulumi.StringPtrInput `pulumi:"twilioPhoneNumber"`
	// Required if `smsProvider`==`twilio`, Account SID provided by Twilio
	TwilioSid pulumi.StringPtrInput `pulumi:"twilioSid"`
}

func (WlanPortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortal)(nil)).Elem()
}

func (i WlanPortalArgs) ToWlanPortalOutput() WlanPortalOutput {
	return i.ToWlanPortalOutputWithContext(context.Background())
}

func (i WlanPortalArgs) ToWlanPortalOutputWithContext(ctx context.Context) WlanPortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalOutput)
}

func (i WlanPortalArgs) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return i.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (i WlanPortalArgs) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalOutput).ToWlanPortalPtrOutputWithContext(ctx)
}

// WlanPortalPtrInput is an input type that accepts WlanPortalArgs, WlanPortalPtr and WlanPortalPtrOutput values.
// You can construct a concrete instance of `WlanPortalPtrInput` via:
//
//	        WlanPortalArgs{...}
//
//	or:
//
//	        nil
type WlanPortalPtrInput interface {
	pulumi.Input

	ToWlanPortalPtrOutput() WlanPortalPtrOutput
	ToWlanPortalPtrOutputWithContext(context.Context) WlanPortalPtrOutput
}

type wlanPortalPtrType WlanPortalArgs

func WlanPortalPtr(v *WlanPortalArgs) WlanPortalPtrInput {
	return (*wlanPortalPtrType)(v)
}

func (*wlanPortalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortal)(nil)).Elem()
}

func (i *wlanPortalPtrType) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return i.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (i *wlanPortalPtrType) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalPtrOutput)
}

type WlanPortalOutput struct{ *pulumi.OutputState }

func (WlanPortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortal)(nil)).Elem()
}

func (o WlanPortalOutput) ToWlanPortalOutput() WlanPortalOutput {
	return o
}

func (o WlanPortalOutput) ToWlanPortalOutputWithContext(ctx context.Context) WlanPortalOutput {
	return o
}

func (o WlanPortalOutput) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return o.ToWlanPortalPtrOutputWithContext(context.Background())
}

func (o WlanPortalOutput) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanPortal) *WlanPortal {
		return &v
	}).(WlanPortalPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalOutput) AllowWlanIdRoam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.AllowWlanIdRoam }).(pulumi.BoolPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) AmazonClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AmazonClientId }).(pulumi.StringPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) AmazonClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AmazonClientSecret }).(pulumi.StringPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) AmazonEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.AmazonEmailDomains }).(pulumi.StringArrayOutput)
}

// whether amazon is enabled as a login method
func (o WlanPortalOutput) AmazonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.AmazonEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) AmazonExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.AmazonExpire }).(pulumi.IntPtrOutput)
}

// authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
func (o WlanPortalOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.Auth }).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory app client id
func (o WlanPortalOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureClientId }).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory app client secret
func (o WlanPortalOutput) AzureClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureClientSecret }).(pulumi.StringPtrOutput)
}

// whether Azure Active Directory is enabled as a login method
func (o WlanPortalOutput) AzureEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.AzureEnabled }).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) AzureExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.AzureExpire }).(pulumi.IntPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory tenant id.
func (o WlanPortalOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.AzureTenantId }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetPassword }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetSid }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalOutput) BroadnetUserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.BroadnetUserId }).(pulumi.StringPtrOutput)
}

// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
func (o WlanPortalOutput) BypassWhenCloudDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.BypassWhenCloudDown }).(pulumi.BoolPtrOutput)
}

// Required if `smsProvider`==`clickatell`
func (o WlanPortalOutput) ClickatellApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ClickatellApiKey }).(pulumi.StringPtrOutput)
}

// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalOutput) CrossSite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.CrossSite }).(pulumi.BoolPtrOutput)
}

// whether email (access code verification) is enabled as a login method
func (o WlanPortalOutput) EmailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.EmailEnabled }).(pulumi.BoolPtrOutput)
}

// whether guest portal is enabled
func (o WlanPortalOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// how long to remain authorized, in minutes
func (o WlanPortalOutput) Expire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.Expire }).(pulumi.IntPtrOutput)
}

// Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
func (o WlanPortalOutput) ExternalPortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ExternalPortalUrl }).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) FacebookClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.FacebookClientId }).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) FacebookClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.FacebookClientSecret }).(pulumi.StringPtrOutput)
}

// Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) FacebookEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.FacebookEmailDomains }).(pulumi.StringArrayOutput)
}

// whether facebook is enabled as a login method
func (o WlanPortalOutput) FacebookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.FacebookEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) FacebookExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.FacebookExpire }).(pulumi.IntPtrOutput)
}

// whether to forward the user to another URL after authorized
func (o WlanPortalOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Forward }).(pulumi.BoolPtrOutput)
}

// the URL to forward the user to
func (o WlanPortalOutput) ForwardUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.ForwardUrl }).(pulumi.StringPtrOutput)
}

// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) GoogleClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GoogleClientId }).(pulumi.StringPtrOutput)
}

// Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) GoogleClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GoogleClientSecret }).(pulumi.StringPtrOutput)
}

// Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) GoogleEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.GoogleEmailDomains }).(pulumi.StringArrayOutput)
}

// whether google is enabled as login method
func (o WlanPortalOutput) GoogleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.GoogleEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) GoogleExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.GoogleExpire }).(pulumi.IntPtrOutput)
}

// Required if `smsProvider`==`gupshup`
func (o WlanPortalOutput) GupshupPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GupshupPassword }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`gupshup`
func (o WlanPortalOutput) GupshupUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.GupshupUserid }).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalOutput) MicrosoftClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.MicrosoftClientId }).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalOutput) MicrosoftClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.MicrosoftClientSecret }).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalOutput) MicrosoftEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.MicrosoftEmailDomains }).(pulumi.StringArrayOutput)
}

// whether microsoft 365 is enabled as a login method
func (o WlanPortalOutput) MicrosoftEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.MicrosoftEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) MicrosoftExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.MicrosoftExpire }).(pulumi.IntPtrOutput)
}

// Whether password is enabled
func (o WlanPortalOutput) PassphraseEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.PassphraseEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
func (o WlanPortalOutput) PassphraseExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.PassphraseExpire }).(pulumi.IntPtrOutput)
}

// Required if `passphraseEnabled`==`true`.
func (o WlanPortalOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
func (o WlanPortalOutput) PredefinedSponsorsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.PredefinedSponsorsEnabled }).(pulumi.BoolPtrOutput)
}

// whether to hide sponsor’s email from list of sponsors
func (o WlanPortalOutput) PredefinedSponsorsHideEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.PredefinedSponsorsHideEmail }).(pulumi.BoolPtrOutput)
}

func (o WlanPortalOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.Privacy }).(pulumi.BoolPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelPassword }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelServiceId }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalOutput) PuzzelUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.PuzzelUsername }).(pulumi.StringPtrOutput)
}

// whether sms is enabled as a login method
func (o WlanPortalOutput) SmsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SmsEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) SmsExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.SmsExpire }).(pulumi.IntPtrOutput)
}

// Optional if `smsEnabled`==`true`. SMS Message format
func (o WlanPortalOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SmsMessageFormat }).(pulumi.StringPtrOutput)
}

// Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
func (o WlanPortalOutput) SmsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SmsProvider }).(pulumi.StringPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
func (o WlanPortalOutput) SponsorAutoApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorAutoApprove }).(pulumi.BoolPtrOutput)
}

// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
func (o WlanPortalOutput) SponsorEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanPortal) []string { return v.SponsorEmailDomains }).(pulumi.StringArrayOutput)
}

// whether sponsor is enabled
func (o WlanPortalOutput) SponsorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorEnabled }).(pulumi.BoolPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
func (o WlanPortalOutput) SponsorExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortal) *int { return v.SponsorExpire }).(pulumi.IntPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
func (o WlanPortalOutput) SponsorLinkValidityDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SponsorLinkValidityDuration }).(pulumi.StringPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
func (o WlanPortalOutput) SponsorNotifyAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorNotifyAll }).(pulumi.BoolPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
func (o WlanPortalOutput) SponsorStatusNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortal) *bool { return v.SponsorStatusNotify }).(pulumi.BoolPtrOutput)
}

// object of allowed sponsors email with name. Required if `sponsorEnabled`
//
//	is `true` and `sponsorEmailDomains` is empty.
//
//	Property key is the sponsor email, Property value is the sponsor name
func (o WlanPortalOutput) Sponsors() pulumi.StringMapOutput {
	return o.ApplyT(func(v WlanPortal) map[string]string { return v.Sponsors }).(pulumi.StringMapOutput)
}

// Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
func (o WlanPortalOutput) SsoDefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoDefaultRole }).(pulumi.StringPtrOutput)
}

// Optionl if `wlanPortalAuth`==`sso`
func (o WlanPortalOutput) SsoForcedRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoForcedRole }).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
func (o WlanPortalOutput) SsoIdpCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpCert }).(pulumi.StringPtrOutput)
}

// Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
func (o WlanPortalOutput) SsoIdpSignAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpSignAlgo }).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
func (o WlanPortalOutput) SsoIdpSsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIdpSsoUrl }).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`, IDP issuer URL
func (o WlanPortalOutput) SsoIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoIssuer }).(pulumi.StringPtrOutput)
}

// Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
func (o WlanPortalOutput) SsoNameidFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.SsoNameidFormat }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`telstra`, Client ID provided by Telstra
func (o WlanPortalOutput) TelstraClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TelstraClientId }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`telstra`, Client secret provided by Telstra
func (o WlanPortalOutput) TelstraClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TelstraClientSecret }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Auth token account with twilio account
func (o WlanPortalOutput) TwilioAuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioAuthToken }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
func (o WlanPortalOutput) TwilioPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioPhoneNumber }).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Account SID provided by Twilio
func (o WlanPortalOutput) TwilioSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortal) *string { return v.TwilioSid }).(pulumi.StringPtrOutput)
}

type WlanPortalPtrOutput struct{ *pulumi.OutputState }

func (WlanPortalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortal)(nil)).Elem()
}

func (o WlanPortalPtrOutput) ToWlanPortalPtrOutput() WlanPortalPtrOutput {
	return o
}

func (o WlanPortalPtrOutput) ToWlanPortalPtrOutputWithContext(ctx context.Context) WlanPortalPtrOutput {
	return o
}

func (o WlanPortalPtrOutput) Elem() WlanPortalOutput {
	return o.ApplyT(func(v *WlanPortal) WlanPortal {
		if v != nil {
			return *v
		}
		var ret WlanPortal
		return ret
	}).(WlanPortalOutput)
}

// Optional if `amazonEnabled`==`true`. Whether to allow guest to connect to other Guest WLANs (with different `WLAN.ssid`) of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalPtrOutput) AllowWlanIdRoam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.AllowWlanIdRoam
	}).(pulumi.BoolPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) AmazonClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AmazonClientId
	}).(pulumi.StringPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Amazon OAuth2 client secret. If amazonClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) AmazonClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AmazonClientSecret
	}).(pulumi.StringPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) AmazonEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.AmazonEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether amazon is enabled as a login method
func (o WlanPortalPtrOutput) AmazonEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.AmazonEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `amazonEnabled`==`true`. Interval for which guest remains authorized using amazon auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) AmazonExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.AmazonExpire
	}).(pulumi.IntPtrOutput)
}

// authentication scheme. enum: `amazon`, `azure`, `email`, `external`, `facebook`, `google`, `microsoft`, `multi`, `none`, `password`, `sponsor`, `sso`
func (o WlanPortalPtrOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory app client id
func (o WlanPortalPtrOutput) AzureClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientId
	}).(pulumi.StringPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory app client secret
func (o WlanPortalPtrOutput) AzureClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureClientSecret
	}).(pulumi.StringPtrOutput)
}

// whether Azure Active Directory is enabled as a login method
func (o WlanPortalPtrOutput) AzureEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.AzureEnabled
	}).(pulumi.BoolPtrOutput)
}

// interval for which guest remains authorized using azure auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) AzureExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.AzureExpire
	}).(pulumi.IntPtrOutput)
}

// Required if `azureEnabled`==`true`. Azure active directory tenant id.
func (o WlanPortalPtrOutput) AzureTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.AzureTenantId
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetPassword
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetSid
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`broadnet`
func (o WlanPortalPtrOutput) BroadnetUserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.BroadnetUserId
	}).(pulumi.StringPtrOutput)
}

// whether to bypass the guest portal when cloud not reachable (and apply the default policies)
func (o WlanPortalPtrOutput) BypassWhenCloudDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.BypassWhenCloudDown
	}).(pulumi.BoolPtrOutput)
}

// Required if `smsProvider`==`clickatell`
func (o WlanPortalPtrOutput) ClickatellApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ClickatellApiKey
	}).(pulumi.StringPtrOutput)
}

// whether to allow guest to roam between WLANs (with same `WLAN.ssid`, regardless of variables) of different sites of same org without reauthentication (disable randomMac for seamless roaming)
func (o WlanPortalPtrOutput) CrossSite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.CrossSite
	}).(pulumi.BoolPtrOutput)
}

// whether email (access code verification) is enabled as a login method
func (o WlanPortalPtrOutput) EmailEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.EmailEnabled
	}).(pulumi.BoolPtrOutput)
}

// whether guest portal is enabled
func (o WlanPortalPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// how long to remain authorized, in minutes
func (o WlanPortalPtrOutput) Expire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.Expire
	}).(pulumi.IntPtrOutput)
}

// Required if `wlanPortalAuth`==`external`. External portal URL (e.g. https://host/url) where we can append our query parameters to
func (o WlanPortalPtrOutput) ExternalPortalUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ExternalPortalUrl
	}).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`. Facebook OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) FacebookClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.FacebookClientId
	}).(pulumi.StringPtrOutput)
}

// Required if `facebookEnabled`==`true`. Facebook OAuth2 app secret. If facebookClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) FacebookClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.FacebookClientSecret
	}).(pulumi.StringPtrOutput)
}

// Optional if `facebookEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) FacebookEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.FacebookEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether facebook is enabled as a login method
func (o WlanPortalPtrOutput) FacebookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.FacebookEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `facebookEnabled`==`true`. Interval for which guest remains authorized using facebook auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) FacebookExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.FacebookExpire
	}).(pulumi.IntPtrOutput)
}

// whether to forward the user to another URL after authorized
func (o WlanPortalPtrOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Forward
	}).(pulumi.BoolPtrOutput)
}

// the URL to forward the user to
func (o WlanPortalPtrOutput) ForwardUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.ForwardUrl
	}).(pulumi.StringPtrOutput)
}

// Google OAuth2 app id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) GoogleClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GoogleClientId
	}).(pulumi.StringPtrOutput)
}

// Optional if `googleEnabled`==`true`. Google OAuth2 app secret. If googleClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) GoogleClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GoogleClientSecret
	}).(pulumi.StringPtrOutput)
}

// Optional if `googleEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) GoogleEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.GoogleEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether google is enabled as login method
func (o WlanPortalPtrOutput) GoogleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.GoogleEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `googleEnabled`==`true`. Interval for which guest remains authorized using google auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) GoogleExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.GoogleExpire
	}).(pulumi.IntPtrOutput)
}

// Required if `smsProvider`==`gupshup`
func (o WlanPortalPtrOutput) GupshupPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GupshupPassword
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`gupshup`
func (o WlanPortalPtrOutput) GupshupUserid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.GupshupUserid
	}).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client id. This is optional. If not provided, it will use a default one.
func (o WlanPortalPtrOutput) MicrosoftClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftClientId
	}).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Microsoft 365 OAuth2 client secret. If microsoftClientId was provided, provide a correspoinding value. Else leave blank.
func (o WlanPortalPtrOutput) MicrosoftClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.MicrosoftClientSecret
	}).(pulumi.StringPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Matches authenticated user email against provided domains. If null or [], all authenticated emails will be allowed.
func (o WlanPortalPtrOutput) MicrosoftEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.MicrosoftEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether microsoft 365 is enabled as a login method
func (o WlanPortalPtrOutput) MicrosoftEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.MicrosoftEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `microsoftEnabled`==`true`. Interval for which guest remains authorized using microsoft auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) MicrosoftExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.MicrosoftExpire
	}).(pulumi.IntPtrOutput)
}

// Whether password is enabled
func (o WlanPortalPtrOutput) PassphraseEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.PassphraseEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `passphraseEnabled`==`true`. Interval for which guest remains authorized using passphrase auth (in minutes), if not provided, uses `expire`
func (o WlanPortalPtrOutput) PassphraseExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.PassphraseExpire
	}).(pulumi.IntPtrOutput)
}

// Required if `passphraseEnabled`==`true`.
func (o WlanPortalPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// whether to show list of sponsor emails mentioned in `sponsors` object as a dropdown. If both `sponsorNotifyAll` and `predefinedSponsorsEnabled` are false, behaviour is acc to `sponsorEmailDomains`
func (o WlanPortalPtrOutput) PredefinedSponsorsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.PredefinedSponsorsEnabled
	}).(pulumi.BoolPtrOutput)
}

// whether to hide sponsor’s email from list of sponsors
func (o WlanPortalPtrOutput) PredefinedSponsorsHideEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.PredefinedSponsorsHideEmail
	}).(pulumi.BoolPtrOutput)
}

func (o WlanPortalPtrOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.Privacy
	}).(pulumi.BoolPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelPassword
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelServiceId
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`puzzel`
func (o WlanPortalPtrOutput) PuzzelUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.PuzzelUsername
	}).(pulumi.StringPtrOutput)
}

// whether sms is enabled as a login method
func (o WlanPortalPtrOutput) SmsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SmsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `smsEnabled`==`true`. Interval for which guest remains authorized using sms auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) SmsExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.SmsExpire
	}).(pulumi.IntPtrOutput)
}

// Optional if `smsEnabled`==`true`. SMS Message format
func (o WlanPortalPtrOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SmsMessageFormat
	}).(pulumi.StringPtrOutput)
}

// Optioanl if `smsEnabled`==`true`. enum: `broadnet`, `clickatell`, `gupshup`, `manual`, `puzzel`, `telstra`, `twilio`
func (o WlanPortalPtrOutput) SmsProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SmsProvider
	}).(pulumi.StringPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. Whether to automatically approve guest and allow sponsor to revoke guest access, needs predefinedSponsorsEnabled enabled and sponsorNotifyAll disabled
func (o WlanPortalPtrOutput) SponsorAutoApprove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorAutoApprove
	}).(pulumi.BoolPtrOutput)
}

// list of domain allowed for sponsor email. Required if `sponsorEnabled` is `true` and `sponsors` is empty.
func (o WlanPortalPtrOutput) SponsorEmailDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanPortal) []string {
		if v == nil {
			return nil
		}
		return v.SponsorEmailDomains
	}).(pulumi.StringArrayOutput)
}

// whether sponsor is enabled
func (o WlanPortalPtrOutput) SponsorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorEnabled
	}).(pulumi.BoolPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. Interval for which guest remains authorized using sponsor auth (in minutes), if not provided, uses expire`
func (o WlanPortalPtrOutput) SponsorExpire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *int {
		if v == nil {
			return nil
		}
		return v.SponsorExpire
	}).(pulumi.IntPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. How long to remain valid sponsored guest request approve/deny link received in email, in minutes.
func (o WlanPortalPtrOutput) SponsorLinkValidityDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SponsorLinkValidityDuration
	}).(pulumi.StringPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. whether to notify all sponsors that are mentioned in `sponsors` object. Both `sponsorNotifyAll` and `predefinedSponsorsEnabled` should be true in order to notify sponsors. If true, email sent to 10 sponsors in no particular order.
func (o WlanPortalPtrOutput) SponsorNotifyAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorNotifyAll
	}).(pulumi.BoolPtrOutput)
}

// Optional if `sponsorEnabled`==`true`. If enabled, guest will get email about sponsor's action (approve/deny)
func (o WlanPortalPtrOutput) SponsorStatusNotify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *bool {
		if v == nil {
			return nil
		}
		return v.SponsorStatusNotify
	}).(pulumi.BoolPtrOutput)
}

// object of allowed sponsors email with name. Required if `sponsorEnabled`
//
//	is `true` and `sponsorEmailDomains` is empty.
//
//	Property key is the sponsor email, Property value is the sponsor name
func (o WlanPortalPtrOutput) Sponsors() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WlanPortal) map[string]string {
		if v == nil {
			return nil
		}
		return v.Sponsors
	}).(pulumi.StringMapOutput)
}

// Optionl if `wlanPortalAuth`==`sso`, default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched
func (o WlanPortalPtrOutput) SsoDefaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoDefaultRole
	}).(pulumi.StringPtrOutput)
}

// Optionl if `wlanPortalAuth`==`sso`
func (o WlanPortalPtrOutput) SsoForcedRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoForcedRole
	}).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`. IDP Cert (used to verify the signed response)
func (o WlanPortalPtrOutput) SsoIdpCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpCert
	}).(pulumi.StringPtrOutput)
}

// Optioanl if `wlanPortalAuth`==`sso`, Signing algorithm for SAML Assertion. enum: `sha1`, `sha256`, `sha384`, `sha512`
func (o WlanPortalPtrOutput) SsoIdpSignAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpSignAlgo
	}).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`, IDP Single-Sign-On URL
func (o WlanPortalPtrOutput) SsoIdpSsoUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIdpSsoUrl
	}).(pulumi.StringPtrOutput)
}

// Required if `wlanPortalAuth`==`sso`, IDP issuer URL
func (o WlanPortalPtrOutput) SsoIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoIssuer
	}).(pulumi.StringPtrOutput)
}

// Optional if `wlanPortalAuth`==`sso`. enum: `email`, `unspecified`
func (o WlanPortalPtrOutput) SsoNameidFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.SsoNameidFormat
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`telstra`, Client ID provided by Telstra
func (o WlanPortalPtrOutput) TelstraClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TelstraClientId
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`telstra`, Client secret provided by Telstra
func (o WlanPortalPtrOutput) TelstraClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TelstraClientSecret
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Auth token account with twilio account
func (o WlanPortalPtrOutput) TwilioAuthToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioAuthToken
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Twilio phone number associated with the account. See example for accepted format.
func (o WlanPortalPtrOutput) TwilioPhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioPhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Required if `smsProvider`==`twilio`, Account SID provided by Twilio
func (o WlanPortalPtrOutput) TwilioSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortal) *string {
		if v == nil {
			return nil
		}
		return v.TwilioSid
	}).(pulumi.StringPtrOutput)
}

type WlanPortalTemplatePortalTemplate struct {
	AccessCodeAlternateEmail *string `pulumi:"accessCodeAlternateEmail"`
	// defines alignment on portal. enum: `center`, `left`, `right`
	Alignment *string `pulumi:"alignment"`
	// label for Amazon auth button
	AuthButtonAmazon *string `pulumi:"authButtonAmazon"`
	// label for Azure auth button
	AuthButtonAzure *string `pulumi:"authButtonAzure"`
	// label for Email auth button
	AuthButtonEmail *string `pulumi:"authButtonEmail"`
	// label for Facebook auth button
	AuthButtonFacebook *string `pulumi:"authButtonFacebook"`
	// label for Google auth button
	AuthButtonGoogle *string `pulumi:"authButtonGoogle"`
	// label for Microsoft auth button
	AuthButtonMicrosoft *string `pulumi:"authButtonMicrosoft"`
	// label for passphrase auth button
	AuthButtonPassphrase *string `pulumi:"authButtonPassphrase"`
	// label for SMS auth button
	AuthButtonSms *string `pulumi:"authButtonSms"`
	// label for Sponsor auth button
	AuthButtonSponsor *string `pulumi:"authButtonSponsor"`
	AuthLabel         *string `pulumi:"authLabel"`
	// label of the link to go back to /logon
	BackLink *string `pulumi:"backLink"`
	// Portal main color
	Color      *string `pulumi:"color"`
	ColorDark  *string `pulumi:"colorDark"`
	ColorLight *string `pulumi:"colorLight"`
	// whether company field is required
	Company *bool `pulumi:"company"`
	// error message when company not provided
	CompanyError *string `pulumi:"companyError"`
	// label of company field
	CompanyLabel *string `pulumi:"companyLabel"`
	// whether email field is required
	Email *bool `pulumi:"email"`
	// error message when a user has valid social login but doesn't match specified email domains.
	EmailAccessDomainError *string `pulumi:"emailAccessDomainError"`
	// Label for cancel confirmation code submission using email auth
	EmailCancel         *string `pulumi:"emailCancel"`
	EmailCodeCancel     *string `pulumi:"emailCodeCancel"`
	EmailCodeError      *string `pulumi:"emailCodeError"`
	EmailCodeFieldLabel *string `pulumi:"emailCodeFieldLabel"`
	EmailCodeMessage    *string `pulumi:"emailCodeMessage"`
	EmailCodeSubmit     *string `pulumi:"emailCodeSubmit"`
	EmailCodeTitle      *string `pulumi:"emailCodeTitle"`
	// error message when email not provided
	EmailError      *string `pulumi:"emailError"`
	EmailFieldLabel *string `pulumi:"emailFieldLabel"`
	// label of email field
	EmailLabel   *string `pulumi:"emailLabel"`
	EmailMessage *string `pulumi:"emailMessage"`
	// Label for confirmation code submit button using email auth
	EmailSubmit *string `pulumi:"emailSubmit"`
	// Title for the Email registration
	EmailTitle *string `pulumi:"emailTitle"`
	// whether to ask field1
	Field1 *bool `pulumi:"field1"`
	// error message when field1 not provided
	Field1error *string `pulumi:"field1error"`
	// label of field1
	Field1label *string `pulumi:"field1label"`
	// whether field1 is required field
	Field1required *bool `pulumi:"field1required"`
	// whether to ask field2
	Field2 *bool `pulumi:"field2"`
	// error message when field2 not provided
	Field2error *string `pulumi:"field2error"`
	// label of field2
	Field2label *string `pulumi:"field2label"`
	// whether field2 is required field
	Field2required *bool `pulumi:"field2required"`
	// whether to ask field3
	Field3 *bool `pulumi:"field3"`
	// error message when field3 not provided
	Field3error *string `pulumi:"field3error"`
	// label of field3
	Field3label *string `pulumi:"field3label"`
	// whether field3 is required field
	Field3required *bool `pulumi:"field3required"`
	// whether to ask field4
	Field4 *bool `pulumi:"field4"`
	// error message when field4 not provided
	Field4error *string `pulumi:"field4error"`
	// label of field4
	Field4label *string `pulumi:"field4label"`
	// whether field4 is required field
	Field4required *bool `pulumi:"field4required"`
	// Can be used to localize the portal based on the User Agent. Allowed property key values are:
	//   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
	//   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
	//   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
	//   `zh-Hans`, `zh-Hant`
	Locales map[string]WlanPortalTemplatePortalTemplateLocales `pulumi:"locales"`
	// path to the background image file. File must be a `png` image`
	Logo      *string `pulumi:"logo"`
	Message   *string `pulumi:"message"`
	MultiAuth *bool   `pulumi:"multiAuth"`
	// whether name field is required
	Name *bool `pulumi:"name"`
	// error message when name not provided
	NameError *string `pulumi:"nameError"`
	// label of name field
	NameLabel *string `pulumi:"nameLabel"`
	// Default value for the `Do not store` checkbox
	OptOutDefault *bool `pulumi:"optOutDefault"`
	// whether to display Do Not Store My Personal Information
	Optout *bool `pulumi:"optout"`
	// label for Do Not Store My Personal Information
	OptoutLabel *string `pulumi:"optoutLabel"`
	PageTitle   *string `pulumi:"pageTitle"`
	// Label for the Passphrase cancel button
	PassphraseCancel *string `pulumi:"passphraseCancel"`
	// error message when invalid passphrase is provided
	PassphraseError *string `pulumi:"passphraseError"`
	// Passphrase
	PassphraseLabel   *string `pulumi:"passphraseLabel"`
	PassphraseMessage *string `pulumi:"passphraseMessage"`
	// Label for the Passphrase submit button
	PassphraseSubmit *string `pulumi:"passphraseSubmit"`
	// Title for passphrase details page
	PassphraseTitle *string `pulumi:"passphraseTitle"`
	// whether to show \"Powered by Mist\"
	PoweredBy *bool `pulumi:"poweredBy"`
	// wheter to require the Privacy Term acceptance
	Privacy *bool `pulumi:"privacy"`
	// prefix of the label of the link to go to Privacy Policy
	PrivacyPolicyAcceptLabel *string `pulumi:"privacyPolicyAcceptLabel"`
	// error message when Privacy Policy not accepted
	PrivacyPolicyError *string `pulumi:"privacyPolicyError"`
	// label of the link to go to Privacy Policy
	PrivacyPolicyLink *string `pulumi:"privacyPolicyLink"`
	// text of the Privacy Policy
	PrivacyPolicyText *string `pulumi:"privacyPolicyText"`
	// label to denote required field
	RequiredFieldLabel *string `pulumi:"requiredFieldLabel"`
	ResponsiveLayout   *bool   `pulumi:"responsiveLayout"`
	// label of the button to /signin
	SignInLabel       *string `pulumi:"signInLabel"`
	SmsCarrierDefault *string `pulumi:"smsCarrierDefault"`
	SmsCarrierError   *string `pulumi:"smsCarrierError"`
	// label for mobile carrier drop-down list
	SmsCarrierFieldLabel *string `pulumi:"smsCarrierFieldLabel"`
	// Label for cancel confirmation code submission
	SmsCodeCancel *string `pulumi:"smsCodeCancel"`
	// error message when confirmation code is invalid
	SmsCodeError      *string `pulumi:"smsCodeError"`
	SmsCodeFieldLabel *string `pulumi:"smsCodeFieldLabel"`
	SmsCodeMessage    *string `pulumi:"smsCodeMessage"`
	// Label for confirmation code submit button
	SmsCodeSubmit        *string `pulumi:"smsCodeSubmit"`
	SmsCodeTitle         *string `pulumi:"smsCodeTitle"`
	SmsCountryFieldLabel *string `pulumi:"smsCountryFieldLabel"`
	SmsCountryFormat     *string `pulumi:"smsCountryFormat"`
	// Label for checkbox to specify that the user has access code
	SmsHaveAccessCode *string `pulumi:"smsHaveAccessCode"`
	SmsIsTwilio       *bool   `pulumi:"smsIsTwilio"`
	// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
	SmsMessageFormat *string `pulumi:"smsMessageFormat"`
	// label for canceling mobile details for SMS auth
	SmsNumberCancel *string `pulumi:"smsNumberCancel"`
	SmsNumberError  *string `pulumi:"smsNumberError"`
	// label for field to provide mobile number
	SmsNumberFieldLabel *string `pulumi:"smsNumberFieldLabel"`
	SmsNumberFormat     *string `pulumi:"smsNumberFormat"`
	SmsNumberMessage    *string `pulumi:"smsNumberMessage"`
	// label for submit button for code generation
	SmsNumberSubmit *string `pulumi:"smsNumberSubmit"`
	// Title for phone number details
	SmsNumberTitle    *string `pulumi:"smsNumberTitle"`
	SmsUsernameFormat *string `pulumi:"smsUsernameFormat"`
	// how long confirmation code should be considered valid (in minutes)
	SmsValidityDuration *int    `pulumi:"smsValidityDuration"`
	SponsorBackLink     *string `pulumi:"sponsorBackLink"`
	SponsorCancel       *string `pulumi:"sponsorCancel"`
	// label for Sponsor Email
	SponsorEmail      *string `pulumi:"sponsorEmail"`
	SponsorEmailError *string `pulumi:"sponsorEmailError"`
	// html template to replace/override default sponsor email template
	// Sponsor Email Template supports following template variables:
	//   * `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
	//   * `denyUrl`: Renders URL to reject the request
	//   * `guestEmail`: Renders Email ID of the guest
	//   * `guestName`: Renders Name of the guest
	//   * `field1`: Renders value of the Custom Field 1
	//   * `field2`: Renders value of the Custom Field 2
	//   * `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
	//   * `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
	SponsorEmailTemplate *string `pulumi:"sponsorEmailTemplate"`
	SponsorInfoApproved  *string `pulumi:"sponsorInfoApproved"`
	SponsorInfoDenied    *string `pulumi:"sponsorInfoDenied"`
	SponsorInfoPending   *string `pulumi:"sponsorInfoPending"`
	// label for Sponsor Name
	SponsorName        *string `pulumi:"sponsorName"`
	SponsorNameError   *string `pulumi:"sponsorNameError"`
	SponsorNotePending *string `pulumi:"sponsorNotePending"`
	// submit button label request Wifi Access and notify sponsor about guest request
	SponsorRequestAccess *string `pulumi:"sponsorRequestAccess"`
	// text to display if sponsor approves request
	SponsorStatusApproved *string `pulumi:"sponsorStatusApproved"`
	// text to display when sponsor denies request
	SponsorStatusDenied *string `pulumi:"sponsorStatusDenied"`
	// text to display if request is still pending
	SponsorStatusPending *string `pulumi:"sponsorStatusPending"`
	// submit button label to notify sponsor about guest request
	SponsorSubmit      *string `pulumi:"sponsorSubmit"`
	SponsorsError      *string `pulumi:"sponsorsError"`
	SponsorsFieldLabel *string `pulumi:"sponsorsFieldLabel"`
	Tos                *bool   `pulumi:"tos"`
	// prefix of the label of the link to go to tos
	TosAcceptLabel *string `pulumi:"tosAcceptLabel"`
	// error message when tos not accepted
	TosError *string `pulumi:"tosError"`
	// label of the link to go to tos
	TosLink *string `pulumi:"tosLink"`
	// text of the Terms of Service
	TosText *string `pulumi:"tosText"`
}

// WlanPortalTemplatePortalTemplateInput is an input type that accepts WlanPortalTemplatePortalTemplateArgs and WlanPortalTemplatePortalTemplateOutput values.
// You can construct a concrete instance of `WlanPortalTemplatePortalTemplateInput` via:
//
//	WlanPortalTemplatePortalTemplateArgs{...}
type WlanPortalTemplatePortalTemplateInput interface {
	pulumi.Input

	ToWlanPortalTemplatePortalTemplateOutput() WlanPortalTemplatePortalTemplateOutput
	ToWlanPortalTemplatePortalTemplateOutputWithContext(context.Context) WlanPortalTemplatePortalTemplateOutput
}

type WlanPortalTemplatePortalTemplateArgs struct {
	AccessCodeAlternateEmail pulumi.StringPtrInput `pulumi:"accessCodeAlternateEmail"`
	// defines alignment on portal. enum: `center`, `left`, `right`
	Alignment pulumi.StringPtrInput `pulumi:"alignment"`
	// label for Amazon auth button
	AuthButtonAmazon pulumi.StringPtrInput `pulumi:"authButtonAmazon"`
	// label for Azure auth button
	AuthButtonAzure pulumi.StringPtrInput `pulumi:"authButtonAzure"`
	// label for Email auth button
	AuthButtonEmail pulumi.StringPtrInput `pulumi:"authButtonEmail"`
	// label for Facebook auth button
	AuthButtonFacebook pulumi.StringPtrInput `pulumi:"authButtonFacebook"`
	// label for Google auth button
	AuthButtonGoogle pulumi.StringPtrInput `pulumi:"authButtonGoogle"`
	// label for Microsoft auth button
	AuthButtonMicrosoft pulumi.StringPtrInput `pulumi:"authButtonMicrosoft"`
	// label for passphrase auth button
	AuthButtonPassphrase pulumi.StringPtrInput `pulumi:"authButtonPassphrase"`
	// label for SMS auth button
	AuthButtonSms pulumi.StringPtrInput `pulumi:"authButtonSms"`
	// label for Sponsor auth button
	AuthButtonSponsor pulumi.StringPtrInput `pulumi:"authButtonSponsor"`
	AuthLabel         pulumi.StringPtrInput `pulumi:"authLabel"`
	// label of the link to go back to /logon
	BackLink pulumi.StringPtrInput `pulumi:"backLink"`
	// Portal main color
	Color      pulumi.StringPtrInput `pulumi:"color"`
	ColorDark  pulumi.StringPtrInput `pulumi:"colorDark"`
	ColorLight pulumi.StringPtrInput `pulumi:"colorLight"`
	// whether company field is required
	Company pulumi.BoolPtrInput `pulumi:"company"`
	// error message when company not provided
	CompanyError pulumi.StringPtrInput `pulumi:"companyError"`
	// label of company field
	CompanyLabel pulumi.StringPtrInput `pulumi:"companyLabel"`
	// whether email field is required
	Email pulumi.BoolPtrInput `pulumi:"email"`
	// error message when a user has valid social login but doesn't match specified email domains.
	EmailAccessDomainError pulumi.StringPtrInput `pulumi:"emailAccessDomainError"`
	// Label for cancel confirmation code submission using email auth
	EmailCancel         pulumi.StringPtrInput `pulumi:"emailCancel"`
	EmailCodeCancel     pulumi.StringPtrInput `pulumi:"emailCodeCancel"`
	EmailCodeError      pulumi.StringPtrInput `pulumi:"emailCodeError"`
	EmailCodeFieldLabel pulumi.StringPtrInput `pulumi:"emailCodeFieldLabel"`
	EmailCodeMessage    pulumi.StringPtrInput `pulumi:"emailCodeMessage"`
	EmailCodeSubmit     pulumi.StringPtrInput `pulumi:"emailCodeSubmit"`
	EmailCodeTitle      pulumi.StringPtrInput `pulumi:"emailCodeTitle"`
	// error message when email not provided
	EmailError      pulumi.StringPtrInput `pulumi:"emailError"`
	EmailFieldLabel pulumi.StringPtrInput `pulumi:"emailFieldLabel"`
	// label of email field
	EmailLabel   pulumi.StringPtrInput `pulumi:"emailLabel"`
	EmailMessage pulumi.StringPtrInput `pulumi:"emailMessage"`
	// Label for confirmation code submit button using email auth
	EmailSubmit pulumi.StringPtrInput `pulumi:"emailSubmit"`
	// Title for the Email registration
	EmailTitle pulumi.StringPtrInput `pulumi:"emailTitle"`
	// whether to ask field1
	Field1 pulumi.BoolPtrInput `pulumi:"field1"`
	// error message when field1 not provided
	Field1error pulumi.StringPtrInput `pulumi:"field1error"`
	// label of field1
	Field1label pulumi.StringPtrInput `pulumi:"field1label"`
	// whether field1 is required field
	Field1required pulumi.BoolPtrInput `pulumi:"field1required"`
	// whether to ask field2
	Field2 pulumi.BoolPtrInput `pulumi:"field2"`
	// error message when field2 not provided
	Field2error pulumi.StringPtrInput `pulumi:"field2error"`
	// label of field2
	Field2label pulumi.StringPtrInput `pulumi:"field2label"`
	// whether field2 is required field
	Field2required pulumi.BoolPtrInput `pulumi:"field2required"`
	// whether to ask field3
	Field3 pulumi.BoolPtrInput `pulumi:"field3"`
	// error message when field3 not provided
	Field3error pulumi.StringPtrInput `pulumi:"field3error"`
	// label of field3
	Field3label pulumi.StringPtrInput `pulumi:"field3label"`
	// whether field3 is required field
	Field3required pulumi.BoolPtrInput `pulumi:"field3required"`
	// whether to ask field4
	Field4 pulumi.BoolPtrInput `pulumi:"field4"`
	// error message when field4 not provided
	Field4error pulumi.StringPtrInput `pulumi:"field4error"`
	// label of field4
	Field4label pulumi.StringPtrInput `pulumi:"field4label"`
	// whether field4 is required field
	Field4required pulumi.BoolPtrInput `pulumi:"field4required"`
	// Can be used to localize the portal based on the User Agent. Allowed property key values are:
	//   `ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
	//   `he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
	//   `pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
	//   `zh-Hans`, `zh-Hant`
	Locales WlanPortalTemplatePortalTemplateLocalesMapInput `pulumi:"locales"`
	// path to the background image file. File must be a `png` image`
	Logo      pulumi.StringPtrInput `pulumi:"logo"`
	Message   pulumi.StringPtrInput `pulumi:"message"`
	MultiAuth pulumi.BoolPtrInput   `pulumi:"multiAuth"`
	// whether name field is required
	Name pulumi.BoolPtrInput `pulumi:"name"`
	// error message when name not provided
	NameError pulumi.StringPtrInput `pulumi:"nameError"`
	// label of name field
	NameLabel pulumi.StringPtrInput `pulumi:"nameLabel"`
	// Default value for the `Do not store` checkbox
	OptOutDefault pulumi.BoolPtrInput `pulumi:"optOutDefault"`
	// whether to display Do Not Store My Personal Information
	Optout pulumi.BoolPtrInput `pulumi:"optout"`
	// label for Do Not Store My Personal Information
	OptoutLabel pulumi.StringPtrInput `pulumi:"optoutLabel"`
	PageTitle   pulumi.StringPtrInput `pulumi:"pageTitle"`
	// Label for the Passphrase cancel button
	PassphraseCancel pulumi.StringPtrInput `pulumi:"passphraseCancel"`
	// error message when invalid passphrase is provided
	PassphraseError pulumi.StringPtrInput `pulumi:"passphraseError"`
	// Passphrase
	PassphraseLabel   pulumi.StringPtrInput `pulumi:"passphraseLabel"`
	PassphraseMessage pulumi.StringPtrInput `pulumi:"passphraseMessage"`
	// Label for the Passphrase submit button
	PassphraseSubmit pulumi.StringPtrInput `pulumi:"passphraseSubmit"`
	// Title for passphrase details page
	PassphraseTitle pulumi.StringPtrInput `pulumi:"passphraseTitle"`
	// whether to show \"Powered by Mist\"
	PoweredBy pulumi.BoolPtrInput `pulumi:"poweredBy"`
	// wheter to require the Privacy Term acceptance
	Privacy pulumi.BoolPtrInput `pulumi:"privacy"`
	// prefix of the label of the link to go to Privacy Policy
	PrivacyPolicyAcceptLabel pulumi.StringPtrInput `pulumi:"privacyPolicyAcceptLabel"`
	// error message when Privacy Policy not accepted
	PrivacyPolicyError pulumi.StringPtrInput `pulumi:"privacyPolicyError"`
	// label of the link to go to Privacy Policy
	PrivacyPolicyLink pulumi.StringPtrInput `pulumi:"privacyPolicyLink"`
	// text of the Privacy Policy
	PrivacyPolicyText pulumi.StringPtrInput `pulumi:"privacyPolicyText"`
	// label to denote required field
	RequiredFieldLabel pulumi.StringPtrInput `pulumi:"requiredFieldLabel"`
	ResponsiveLayout   pulumi.BoolPtrInput   `pulumi:"responsiveLayout"`
	// label of the button to /signin
	SignInLabel       pulumi.StringPtrInput `pulumi:"signInLabel"`
	SmsCarrierDefault pulumi.StringPtrInput `pulumi:"smsCarrierDefault"`
	SmsCarrierError   pulumi.StringPtrInput `pulumi:"smsCarrierError"`
	// label for mobile carrier drop-down list
	SmsCarrierFieldLabel pulumi.StringPtrInput `pulumi:"smsCarrierFieldLabel"`
	// Label for cancel confirmation code submission
	SmsCodeCancel pulumi.StringPtrInput `pulumi:"smsCodeCancel"`
	// error message when confirmation code is invalid
	SmsCodeError      pulumi.StringPtrInput `pulumi:"smsCodeError"`
	SmsCodeFieldLabel pulumi.StringPtrInput `pulumi:"smsCodeFieldLabel"`
	SmsCodeMessage    pulumi.StringPtrInput `pulumi:"smsCodeMessage"`
	// Label for confirmation code submit button
	SmsCodeSubmit        pulumi.StringPtrInput `pulumi:"smsCodeSubmit"`
	SmsCodeTitle         pulumi.StringPtrInput `pulumi:"smsCodeTitle"`
	SmsCountryFieldLabel pulumi.StringPtrInput `pulumi:"smsCountryFieldLabel"`
	SmsCountryFormat     pulumi.StringPtrInput `pulumi:"smsCountryFormat"`
	// Label for checkbox to specify that the user has access code
	SmsHaveAccessCode pulumi.StringPtrInput `pulumi:"smsHaveAccessCode"`
	SmsIsTwilio       pulumi.BoolPtrInput   `pulumi:"smsIsTwilio"`
	// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
	SmsMessageFormat pulumi.StringPtrInput `pulumi:"smsMessageFormat"`
	// label for canceling mobile details for SMS auth
	SmsNumberCancel pulumi.StringPtrInput `pulumi:"smsNumberCancel"`
	SmsNumberError  pulumi.StringPtrInput `pulumi:"smsNumberError"`
	// label for field to provide mobile number
	SmsNumberFieldLabel pulumi.StringPtrInput `pulumi:"smsNumberFieldLabel"`
	SmsNumberFormat     pulumi.StringPtrInput `pulumi:"smsNumberFormat"`
	SmsNumberMessage    pulumi.StringPtrInput `pulumi:"smsNumberMessage"`
	// label for submit button for code generation
	SmsNumberSubmit pulumi.StringPtrInput `pulumi:"smsNumberSubmit"`
	// Title for phone number details
	SmsNumberTitle    pulumi.StringPtrInput `pulumi:"smsNumberTitle"`
	SmsUsernameFormat pulumi.StringPtrInput `pulumi:"smsUsernameFormat"`
	// how long confirmation code should be considered valid (in minutes)
	SmsValidityDuration pulumi.IntPtrInput    `pulumi:"smsValidityDuration"`
	SponsorBackLink     pulumi.StringPtrInput `pulumi:"sponsorBackLink"`
	SponsorCancel       pulumi.StringPtrInput `pulumi:"sponsorCancel"`
	// label for Sponsor Email
	SponsorEmail      pulumi.StringPtrInput `pulumi:"sponsorEmail"`
	SponsorEmailError pulumi.StringPtrInput `pulumi:"sponsorEmailError"`
	// html template to replace/override default sponsor email template
	// Sponsor Email Template supports following template variables:
	//   * `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
	//   * `denyUrl`: Renders URL to reject the request
	//   * `guestEmail`: Renders Email ID of the guest
	//   * `guestName`: Renders Name of the guest
	//   * `field1`: Renders value of the Custom Field 1
	//   * `field2`: Renders value of the Custom Field 2
	//   * `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
	//   * `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
	SponsorEmailTemplate pulumi.StringPtrInput `pulumi:"sponsorEmailTemplate"`
	SponsorInfoApproved  pulumi.StringPtrInput `pulumi:"sponsorInfoApproved"`
	SponsorInfoDenied    pulumi.StringPtrInput `pulumi:"sponsorInfoDenied"`
	SponsorInfoPending   pulumi.StringPtrInput `pulumi:"sponsorInfoPending"`
	// label for Sponsor Name
	SponsorName        pulumi.StringPtrInput `pulumi:"sponsorName"`
	SponsorNameError   pulumi.StringPtrInput `pulumi:"sponsorNameError"`
	SponsorNotePending pulumi.StringPtrInput `pulumi:"sponsorNotePending"`
	// submit button label request Wifi Access and notify sponsor about guest request
	SponsorRequestAccess pulumi.StringPtrInput `pulumi:"sponsorRequestAccess"`
	// text to display if sponsor approves request
	SponsorStatusApproved pulumi.StringPtrInput `pulumi:"sponsorStatusApproved"`
	// text to display when sponsor denies request
	SponsorStatusDenied pulumi.StringPtrInput `pulumi:"sponsorStatusDenied"`
	// text to display if request is still pending
	SponsorStatusPending pulumi.StringPtrInput `pulumi:"sponsorStatusPending"`
	// submit button label to notify sponsor about guest request
	SponsorSubmit      pulumi.StringPtrInput `pulumi:"sponsorSubmit"`
	SponsorsError      pulumi.StringPtrInput `pulumi:"sponsorsError"`
	SponsorsFieldLabel pulumi.StringPtrInput `pulumi:"sponsorsFieldLabel"`
	Tos                pulumi.BoolPtrInput   `pulumi:"tos"`
	// prefix of the label of the link to go to tos
	TosAcceptLabel pulumi.StringPtrInput `pulumi:"tosAcceptLabel"`
	// error message when tos not accepted
	TosError pulumi.StringPtrInput `pulumi:"tosError"`
	// label of the link to go to tos
	TosLink pulumi.StringPtrInput `pulumi:"tosLink"`
	// text of the Terms of Service
	TosText pulumi.StringPtrInput `pulumi:"tosText"`
}

func (WlanPortalTemplatePortalTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortalTemplatePortalTemplate)(nil)).Elem()
}

func (i WlanPortalTemplatePortalTemplateArgs) ToWlanPortalTemplatePortalTemplateOutput() WlanPortalTemplatePortalTemplateOutput {
	return i.ToWlanPortalTemplatePortalTemplateOutputWithContext(context.Background())
}

func (i WlanPortalTemplatePortalTemplateArgs) ToWlanPortalTemplatePortalTemplateOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalTemplatePortalTemplateOutput)
}

func (i WlanPortalTemplatePortalTemplateArgs) ToWlanPortalTemplatePortalTemplatePtrOutput() WlanPortalTemplatePortalTemplatePtrOutput {
	return i.ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(context.Background())
}

func (i WlanPortalTemplatePortalTemplateArgs) ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalTemplatePortalTemplateOutput).ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(ctx)
}

// WlanPortalTemplatePortalTemplatePtrInput is an input type that accepts WlanPortalTemplatePortalTemplateArgs, WlanPortalTemplatePortalTemplatePtr and WlanPortalTemplatePortalTemplatePtrOutput values.
// You can construct a concrete instance of `WlanPortalTemplatePortalTemplatePtrInput` via:
//
//	        WlanPortalTemplatePortalTemplateArgs{...}
//
//	or:
//
//	        nil
type WlanPortalTemplatePortalTemplatePtrInput interface {
	pulumi.Input

	ToWlanPortalTemplatePortalTemplatePtrOutput() WlanPortalTemplatePortalTemplatePtrOutput
	ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(context.Context) WlanPortalTemplatePortalTemplatePtrOutput
}

type wlanPortalTemplatePortalTemplatePtrType WlanPortalTemplatePortalTemplateArgs

func WlanPortalTemplatePortalTemplatePtr(v *WlanPortalTemplatePortalTemplateArgs) WlanPortalTemplatePortalTemplatePtrInput {
	return (*wlanPortalTemplatePortalTemplatePtrType)(v)
}

func (*wlanPortalTemplatePortalTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortalTemplatePortalTemplate)(nil)).Elem()
}

func (i *wlanPortalTemplatePortalTemplatePtrType) ToWlanPortalTemplatePortalTemplatePtrOutput() WlanPortalTemplatePortalTemplatePtrOutput {
	return i.ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(context.Background())
}

func (i *wlanPortalTemplatePortalTemplatePtrType) ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalTemplatePortalTemplatePtrOutput)
}

type WlanPortalTemplatePortalTemplateOutput struct{ *pulumi.OutputState }

func (WlanPortalTemplatePortalTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortalTemplatePortalTemplate)(nil)).Elem()
}

func (o WlanPortalTemplatePortalTemplateOutput) ToWlanPortalTemplatePortalTemplateOutput() WlanPortalTemplatePortalTemplateOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplateOutput) ToWlanPortalTemplatePortalTemplateOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplateOutput) ToWlanPortalTemplatePortalTemplatePtrOutput() WlanPortalTemplatePortalTemplatePtrOutput {
	return o.ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(context.Background())
}

func (o WlanPortalTemplatePortalTemplateOutput) ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanPortalTemplatePortalTemplate) *WlanPortalTemplatePortalTemplate {
		return &v
	}).(WlanPortalTemplatePortalTemplatePtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) AccessCodeAlternateEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AccessCodeAlternateEmail }).(pulumi.StringPtrOutput)
}

// defines alignment on portal. enum: `center`, `left`, `right`
func (o WlanPortalTemplatePortalTemplateOutput) Alignment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Alignment }).(pulumi.StringPtrOutput)
}

// label for Amazon auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonAmazon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonAmazon }).(pulumi.StringPtrOutput)
}

// label for Azure auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonAzure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonAzure }).(pulumi.StringPtrOutput)
}

// label for Email auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonEmail }).(pulumi.StringPtrOutput)
}

// label for Facebook auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonFacebook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonFacebook }).(pulumi.StringPtrOutput)
}

// label for Google auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonGoogle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonGoogle }).(pulumi.StringPtrOutput)
}

// label for Microsoft auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonMicrosoft() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonMicrosoft }).(pulumi.StringPtrOutput)
}

// label for passphrase auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonPassphrase }).(pulumi.StringPtrOutput)
}

// label for SMS auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonSms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonSms }).(pulumi.StringPtrOutput)
}

// label for Sponsor auth button
func (o WlanPortalTemplatePortalTemplateOutput) AuthButtonSponsor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthButtonSponsor }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) AuthLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.AuthLabel }).(pulumi.StringPtrOutput)
}

// label of the link to go back to /logon
func (o WlanPortalTemplatePortalTemplateOutput) BackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.BackLink }).(pulumi.StringPtrOutput)
}

// Portal main color
func (o WlanPortalTemplatePortalTemplateOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Color }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) ColorDark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.ColorDark }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) ColorLight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.ColorLight }).(pulumi.StringPtrOutput)
}

// whether company field is required
func (o WlanPortalTemplatePortalTemplateOutput) Company() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Company }).(pulumi.BoolPtrOutput)
}

// error message when company not provided
func (o WlanPortalTemplatePortalTemplateOutput) CompanyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.CompanyError }).(pulumi.StringPtrOutput)
}

// label of company field
func (o WlanPortalTemplatePortalTemplateOutput) CompanyLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.CompanyLabel }).(pulumi.StringPtrOutput)
}

// whether email field is required
func (o WlanPortalTemplatePortalTemplateOutput) Email() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Email }).(pulumi.BoolPtrOutput)
}

// error message when a user has valid social login but doesn't match specified email domains.
func (o WlanPortalTemplatePortalTemplateOutput) EmailAccessDomainError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailAccessDomainError }).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission using email auth
func (o WlanPortalTemplatePortalTemplateOutput) EmailCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeMessage }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailCodeTitle }).(pulumi.StringPtrOutput)
}

// error message when email not provided
func (o WlanPortalTemplatePortalTemplateOutput) EmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailFieldLabel }).(pulumi.StringPtrOutput)
}

// label of email field
func (o WlanPortalTemplatePortalTemplateOutput) EmailLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) EmailMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailMessage }).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button using email auth
func (o WlanPortalTemplatePortalTemplateOutput) EmailSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailSubmit }).(pulumi.StringPtrOutput)
}

// Title for the Email registration
func (o WlanPortalTemplatePortalTemplateOutput) EmailTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.EmailTitle }).(pulumi.StringPtrOutput)
}

// whether to ask field1
func (o WlanPortalTemplatePortalTemplateOutput) Field1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field1 }).(pulumi.BoolPtrOutput)
}

// error message when field1 not provided
func (o WlanPortalTemplatePortalTemplateOutput) Field1error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field1error }).(pulumi.StringPtrOutput)
}

// label of field1
func (o WlanPortalTemplatePortalTemplateOutput) Field1label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field1label }).(pulumi.StringPtrOutput)
}

// whether field1 is required field
func (o WlanPortalTemplatePortalTemplateOutput) Field1required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field1required }).(pulumi.BoolPtrOutput)
}

// whether to ask field2
func (o WlanPortalTemplatePortalTemplateOutput) Field2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field2 }).(pulumi.BoolPtrOutput)
}

// error message when field2 not provided
func (o WlanPortalTemplatePortalTemplateOutput) Field2error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field2error }).(pulumi.StringPtrOutput)
}

// label of field2
func (o WlanPortalTemplatePortalTemplateOutput) Field2label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field2label }).(pulumi.StringPtrOutput)
}

// whether field2 is required field
func (o WlanPortalTemplatePortalTemplateOutput) Field2required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field2required }).(pulumi.BoolPtrOutput)
}

// whether to ask field3
func (o WlanPortalTemplatePortalTemplateOutput) Field3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field3 }).(pulumi.BoolPtrOutput)
}

// error message when field3 not provided
func (o WlanPortalTemplatePortalTemplateOutput) Field3error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field3error }).(pulumi.StringPtrOutput)
}

// label of field3
func (o WlanPortalTemplatePortalTemplateOutput) Field3label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field3label }).(pulumi.StringPtrOutput)
}

// whether field3 is required field
func (o WlanPortalTemplatePortalTemplateOutput) Field3required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field3required }).(pulumi.BoolPtrOutput)
}

// whether to ask field4
func (o WlanPortalTemplatePortalTemplateOutput) Field4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field4 }).(pulumi.BoolPtrOutput)
}

// error message when field4 not provided
func (o WlanPortalTemplatePortalTemplateOutput) Field4error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field4error }).(pulumi.StringPtrOutput)
}

// label of field4
func (o WlanPortalTemplatePortalTemplateOutput) Field4label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Field4label }).(pulumi.StringPtrOutput)
}

// whether field4 is required field
func (o WlanPortalTemplatePortalTemplateOutput) Field4required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Field4required }).(pulumi.BoolPtrOutput)
}

// Can be used to localize the portal based on the User Agent. Allowed property key values are:
//
//	`ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
//	`he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
//	`pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
//	`zh-Hans`, `zh-Hant`
func (o WlanPortalTemplatePortalTemplateOutput) Locales() WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) map[string]WlanPortalTemplatePortalTemplateLocales {
		return v.Locales
	}).(WlanPortalTemplatePortalTemplateLocalesMapOutput)
}

// path to the background image file. File must be a `png` image`
func (o WlanPortalTemplatePortalTemplateOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) MultiAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.MultiAuth }).(pulumi.BoolPtrOutput)
}

// whether name field is required
func (o WlanPortalTemplatePortalTemplateOutput) Name() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Name }).(pulumi.BoolPtrOutput)
}

// error message when name not provided
func (o WlanPortalTemplatePortalTemplateOutput) NameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.NameError }).(pulumi.StringPtrOutput)
}

// label of name field
func (o WlanPortalTemplatePortalTemplateOutput) NameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.NameLabel }).(pulumi.StringPtrOutput)
}

// Default value for the `Do not store` checkbox
func (o WlanPortalTemplatePortalTemplateOutput) OptOutDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.OptOutDefault }).(pulumi.BoolPtrOutput)
}

// whether to display Do Not Store My Personal Information
func (o WlanPortalTemplatePortalTemplateOutput) Optout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Optout }).(pulumi.BoolPtrOutput)
}

// label for Do Not Store My Personal Information
func (o WlanPortalTemplatePortalTemplateOutput) OptoutLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.OptoutLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) PageTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PageTitle }).(pulumi.StringPtrOutput)
}

// Label for the Passphrase cancel button
func (o WlanPortalTemplatePortalTemplateOutput) PassphraseCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseCancel }).(pulumi.StringPtrOutput)
}

// error message when invalid passphrase is provided
func (o WlanPortalTemplatePortalTemplateOutput) PassphraseError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseError }).(pulumi.StringPtrOutput)
}

// Passphrase
func (o WlanPortalTemplatePortalTemplateOutput) PassphraseLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) PassphraseMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseMessage }).(pulumi.StringPtrOutput)
}

// Label for the Passphrase submit button
func (o WlanPortalTemplatePortalTemplateOutput) PassphraseSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseSubmit }).(pulumi.StringPtrOutput)
}

// Title for passphrase details page
func (o WlanPortalTemplatePortalTemplateOutput) PassphraseTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PassphraseTitle }).(pulumi.StringPtrOutput)
}

// whether to show \"Powered by Mist\"
func (o WlanPortalTemplatePortalTemplateOutput) PoweredBy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.PoweredBy }).(pulumi.BoolPtrOutput)
}

// wheter to require the Privacy Term acceptance
func (o WlanPortalTemplatePortalTemplateOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Privacy }).(pulumi.BoolPtrOutput)
}

// prefix of the label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplateOutput) PrivacyPolicyAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PrivacyPolicyAcceptLabel }).(pulumi.StringPtrOutput)
}

// error message when Privacy Policy not accepted
func (o WlanPortalTemplatePortalTemplateOutput) PrivacyPolicyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PrivacyPolicyError }).(pulumi.StringPtrOutput)
}

// label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplateOutput) PrivacyPolicyLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PrivacyPolicyLink }).(pulumi.StringPtrOutput)
}

// text of the Privacy Policy
func (o WlanPortalTemplatePortalTemplateOutput) PrivacyPolicyText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.PrivacyPolicyText }).(pulumi.StringPtrOutput)
}

// label to denote required field
func (o WlanPortalTemplatePortalTemplateOutput) RequiredFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.RequiredFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) ResponsiveLayout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.ResponsiveLayout }).(pulumi.BoolPtrOutput)
}

// label of the button to /signin
func (o WlanPortalTemplatePortalTemplateOutput) SignInLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SignInLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCarrierDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCarrierDefault }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCarrierError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCarrierError }).(pulumi.StringPtrOutput)
}

// label for mobile carrier drop-down list
func (o WlanPortalTemplatePortalTemplateOutput) SmsCarrierFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCarrierFieldLabel }).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission
func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeCancel }).(pulumi.StringPtrOutput)
}

// error message when confirmation code is invalid
func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeMessage }).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button
func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCodeTitle }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCountryFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCountryFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsCountryFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsCountryFormat }).(pulumi.StringPtrOutput)
}

// Label for checkbox to specify that the user has access code
func (o WlanPortalTemplatePortalTemplateOutput) SmsHaveAccessCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsHaveAccessCode }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsIsTwilio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.SmsIsTwilio }).(pulumi.BoolPtrOutput)
}

// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
func (o WlanPortalTemplatePortalTemplateOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsMessageFormat }).(pulumi.StringPtrOutput)
}

// label for canceling mobile details for SMS auth
func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberError }).(pulumi.StringPtrOutput)
}

// label for field to provide mobile number
func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberFormat }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberMessage }).(pulumi.StringPtrOutput)
}

// label for submit button for code generation
func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberSubmit }).(pulumi.StringPtrOutput)
}

// Title for phone number details
func (o WlanPortalTemplatePortalTemplateOutput) SmsNumberTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsNumberTitle }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SmsUsernameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SmsUsernameFormat }).(pulumi.StringPtrOutput)
}

// how long confirmation code should be considered valid (in minutes)
func (o WlanPortalTemplatePortalTemplateOutput) SmsValidityDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *int { return v.SmsValidityDuration }).(pulumi.IntPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorBackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorBackLink }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorCancel }).(pulumi.StringPtrOutput)
}

// label for Sponsor Email
func (o WlanPortalTemplatePortalTemplateOutput) SponsorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorEmail }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorEmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorEmailError }).(pulumi.StringPtrOutput)
}

// html template to replace/override default sponsor email template
// Sponsor Email Template supports following template variables:
//   - `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
//   - `denyUrl`: Renders URL to reject the request
//   - `guestEmail`: Renders Email ID of the guest
//   - `guestName`: Renders Name of the guest
//   - `field1`: Renders value of the Custom Field 1
//   - `field2`: Renders value of the Custom Field 2
//   - `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
//   - `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
func (o WlanPortalTemplatePortalTemplateOutput) SponsorEmailTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorEmailTemplate }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorInfoApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorInfoApproved }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorInfoDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorInfoDenied }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorInfoPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorInfoPending }).(pulumi.StringPtrOutput)
}

// label for Sponsor Name
func (o WlanPortalTemplatePortalTemplateOutput) SponsorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorName }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorNameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorNameError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorNotePending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorNotePending }).(pulumi.StringPtrOutput)
}

// submit button label request Wifi Access and notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplateOutput) SponsorRequestAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorRequestAccess }).(pulumi.StringPtrOutput)
}

// text to display if sponsor approves request
func (o WlanPortalTemplatePortalTemplateOutput) SponsorStatusApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorStatusApproved }).(pulumi.StringPtrOutput)
}

// text to display when sponsor denies request
func (o WlanPortalTemplatePortalTemplateOutput) SponsorStatusDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorStatusDenied }).(pulumi.StringPtrOutput)
}

// text to display if request is still pending
func (o WlanPortalTemplatePortalTemplateOutput) SponsorStatusPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorStatusPending }).(pulumi.StringPtrOutput)
}

// submit button label to notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplateOutput) SponsorSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorsError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorsError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) SponsorsFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.SponsorsFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateOutput) Tos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *bool { return v.Tos }).(pulumi.BoolPtrOutput)
}

// prefix of the label of the link to go to tos
func (o WlanPortalTemplatePortalTemplateOutput) TosAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.TosAcceptLabel }).(pulumi.StringPtrOutput)
}

// error message when tos not accepted
func (o WlanPortalTemplatePortalTemplateOutput) TosError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.TosError }).(pulumi.StringPtrOutput)
}

// label of the link to go to tos
func (o WlanPortalTemplatePortalTemplateOutput) TosLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.TosLink }).(pulumi.StringPtrOutput)
}

// text of the Terms of Service
func (o WlanPortalTemplatePortalTemplateOutput) TosText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplate) *string { return v.TosText }).(pulumi.StringPtrOutput)
}

type WlanPortalTemplatePortalTemplatePtrOutput struct{ *pulumi.OutputState }

func (WlanPortalTemplatePortalTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanPortalTemplatePortalTemplate)(nil)).Elem()
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) ToWlanPortalTemplatePortalTemplatePtrOutput() WlanPortalTemplatePortalTemplatePtrOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) ToWlanPortalTemplatePortalTemplatePtrOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplatePtrOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) Elem() WlanPortalTemplatePortalTemplateOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) WlanPortalTemplatePortalTemplate {
		if v != nil {
			return *v
		}
		var ret WlanPortalTemplatePortalTemplate
		return ret
	}).(WlanPortalTemplatePortalTemplateOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) AccessCodeAlternateEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AccessCodeAlternateEmail
	}).(pulumi.StringPtrOutput)
}

// defines alignment on portal. enum: `center`, `left`, `right`
func (o WlanPortalTemplatePortalTemplatePtrOutput) Alignment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Alignment
	}).(pulumi.StringPtrOutput)
}

// label for Amazon auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonAmazon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonAmazon
	}).(pulumi.StringPtrOutput)
}

// label for Azure auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonAzure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonAzure
	}).(pulumi.StringPtrOutput)
}

// label for Email auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonEmail
	}).(pulumi.StringPtrOutput)
}

// label for Facebook auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonFacebook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonFacebook
	}).(pulumi.StringPtrOutput)
}

// label for Google auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonGoogle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonGoogle
	}).(pulumi.StringPtrOutput)
}

// label for Microsoft auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonMicrosoft() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonMicrosoft
	}).(pulumi.StringPtrOutput)
}

// label for passphrase auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonPassphrase
	}).(pulumi.StringPtrOutput)
}

// label for SMS auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonSms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonSms
	}).(pulumi.StringPtrOutput)
}

// label for Sponsor auth button
func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthButtonSponsor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthButtonSponsor
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) AuthLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.AuthLabel
	}).(pulumi.StringPtrOutput)
}

// label of the link to go back to /logon
func (o WlanPortalTemplatePortalTemplatePtrOutput) BackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.BackLink
	}).(pulumi.StringPtrOutput)
}

// Portal main color
func (o WlanPortalTemplatePortalTemplatePtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Color
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) ColorDark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ColorDark
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) ColorLight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ColorLight
	}).(pulumi.StringPtrOutput)
}

// whether company field is required
func (o WlanPortalTemplatePortalTemplatePtrOutput) Company() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Company
	}).(pulumi.BoolPtrOutput)
}

// error message when company not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) CompanyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.CompanyError
	}).(pulumi.StringPtrOutput)
}

// label of company field
func (o WlanPortalTemplatePortalTemplatePtrOutput) CompanyLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.CompanyLabel
	}).(pulumi.StringPtrOutput)
}

// whether email field is required
func (o WlanPortalTemplatePortalTemplatePtrOutput) Email() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.BoolPtrOutput)
}

// error message when a user has valid social login but doesn't match specified email domains.
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailAccessDomainError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailAccessDomainError
	}).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission using email auth
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCancel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeCancel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeError
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeMessage
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeSubmit
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailCodeTitle
	}).(pulumi.StringPtrOutput)
}

// error message when email not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailError
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailFieldLabel
	}).(pulumi.StringPtrOutput)
}

// label of email field
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailMessage
	}).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button using email auth
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailSubmit
	}).(pulumi.StringPtrOutput)
}

// Title for the Email registration
func (o WlanPortalTemplatePortalTemplatePtrOutput) EmailTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.EmailTitle
	}).(pulumi.StringPtrOutput)
}

// whether to ask field1
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field1
	}).(pulumi.BoolPtrOutput)
}

// error message when field1 not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field1error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field1error
	}).(pulumi.StringPtrOutput)
}

// label of field1
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field1label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field1label
	}).(pulumi.StringPtrOutput)
}

// whether field1 is required field
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field1required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field1required
	}).(pulumi.BoolPtrOutput)
}

// whether to ask field2
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field2
	}).(pulumi.BoolPtrOutput)
}

// error message when field2 not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field2error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field2error
	}).(pulumi.StringPtrOutput)
}

// label of field2
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field2label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field2label
	}).(pulumi.StringPtrOutput)
}

// whether field2 is required field
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field2required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field2required
	}).(pulumi.BoolPtrOutput)
}

// whether to ask field3
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field3
	}).(pulumi.BoolPtrOutput)
}

// error message when field3 not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field3error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field3error
	}).(pulumi.StringPtrOutput)
}

// label of field3
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field3label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field3label
	}).(pulumi.StringPtrOutput)
}

// whether field3 is required field
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field3required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field3required
	}).(pulumi.BoolPtrOutput)
}

// whether to ask field4
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field4
	}).(pulumi.BoolPtrOutput)
}

// error message when field4 not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field4error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field4error
	}).(pulumi.StringPtrOutput)
}

// label of field4
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field4label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Field4label
	}).(pulumi.StringPtrOutput)
}

// whether field4 is required field
func (o WlanPortalTemplatePortalTemplatePtrOutput) Field4required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Field4required
	}).(pulumi.BoolPtrOutput)
}

// Can be used to localize the portal based on the User Agent. Allowed property key values are:
//
//	`ar`, `ca-ES`, `cs-CZ`, `da-DK`, `de-DE`, `el-GR`, `en-GB`, `en-US`, `es-ES`, `fi-FI`, `fr-FR`,
//	`he-IL`, `hi-IN`, `hr-HR`, `hu-HU`, `id-ID`, `it-IT`, `ja-J^`, `ko-KT`, `ms-MY`, `nb-NO`, `nl-NL`,
//	`pl-PL`, `pt-BR`, `pt-PT`, `ro-RO`, `ru-RU`, `sk-SK`, `sv-SE`, `th-TH`, `tr-TR`, `uk-UA`, `vi-VN`,
//	`zh-Hans`, `zh-Hant`
func (o WlanPortalTemplatePortalTemplatePtrOutput) Locales() WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) map[string]WlanPortalTemplatePortalTemplateLocales {
		if v == nil {
			return nil
		}
		return v.Locales
	}).(WlanPortalTemplatePortalTemplateLocalesMapOutput)
}

// path to the background image file. File must be a `png` image`
func (o WlanPortalTemplatePortalTemplatePtrOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Logo
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) MultiAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.MultiAuth
	}).(pulumi.BoolPtrOutput)
}

// whether name field is required
func (o WlanPortalTemplatePortalTemplatePtrOutput) Name() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.BoolPtrOutput)
}

// error message when name not provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) NameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.NameError
	}).(pulumi.StringPtrOutput)
}

// label of name field
func (o WlanPortalTemplatePortalTemplatePtrOutput) NameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.NameLabel
	}).(pulumi.StringPtrOutput)
}

// Default value for the `Do not store` checkbox
func (o WlanPortalTemplatePortalTemplatePtrOutput) OptOutDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.OptOutDefault
	}).(pulumi.BoolPtrOutput)
}

// whether to display Do Not Store My Personal Information
func (o WlanPortalTemplatePortalTemplatePtrOutput) Optout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Optout
	}).(pulumi.BoolPtrOutput)
}

// label for Do Not Store My Personal Information
func (o WlanPortalTemplatePortalTemplatePtrOutput) OptoutLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.OptoutLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) PageTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PageTitle
	}).(pulumi.StringPtrOutput)
}

// Label for the Passphrase cancel button
func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseCancel
	}).(pulumi.StringPtrOutput)
}

// error message when invalid passphrase is provided
func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseError
	}).(pulumi.StringPtrOutput)
}

// Passphrase
func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseMessage
	}).(pulumi.StringPtrOutput)
}

// Label for the Passphrase submit button
func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseSubmit
	}).(pulumi.StringPtrOutput)
}

// Title for passphrase details page
func (o WlanPortalTemplatePortalTemplatePtrOutput) PassphraseTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PassphraseTitle
	}).(pulumi.StringPtrOutput)
}

// whether to show \"Powered by Mist\"
func (o WlanPortalTemplatePortalTemplatePtrOutput) PoweredBy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.PoweredBy
	}).(pulumi.BoolPtrOutput)
}

// wheter to require the Privacy Term acceptance
func (o WlanPortalTemplatePortalTemplatePtrOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Privacy
	}).(pulumi.BoolPtrOutput)
}

// prefix of the label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplatePtrOutput) PrivacyPolicyAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PrivacyPolicyAcceptLabel
	}).(pulumi.StringPtrOutput)
}

// error message when Privacy Policy not accepted
func (o WlanPortalTemplatePortalTemplatePtrOutput) PrivacyPolicyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PrivacyPolicyError
	}).(pulumi.StringPtrOutput)
}

// label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplatePtrOutput) PrivacyPolicyLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PrivacyPolicyLink
	}).(pulumi.StringPtrOutput)
}

// text of the Privacy Policy
func (o WlanPortalTemplatePortalTemplatePtrOutput) PrivacyPolicyText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.PrivacyPolicyText
	}).(pulumi.StringPtrOutput)
}

// label to denote required field
func (o WlanPortalTemplatePortalTemplatePtrOutput) RequiredFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.RequiredFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) ResponsiveLayout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.ResponsiveLayout
	}).(pulumi.BoolPtrOutput)
}

// label of the button to /signin
func (o WlanPortalTemplatePortalTemplatePtrOutput) SignInLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SignInLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCarrierDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCarrierDefault
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCarrierError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCarrierError
	}).(pulumi.StringPtrOutput)
}

// label for mobile carrier drop-down list
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCarrierFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCarrierFieldLabel
	}).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeCancel
	}).(pulumi.StringPtrOutput)
}

// error message when confirmation code is invalid
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeError
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeMessage
	}).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeSubmit
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCodeTitle
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCountryFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCountryFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsCountryFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsCountryFormat
	}).(pulumi.StringPtrOutput)
}

// Label for checkbox to specify that the user has access code
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsHaveAccessCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsHaveAccessCode
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsIsTwilio() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.SmsIsTwilio
	}).(pulumi.BoolPtrOutput)
}

// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsMessageFormat
	}).(pulumi.StringPtrOutput)
}

// label for canceling mobile details for SMS auth
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberCancel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberError
	}).(pulumi.StringPtrOutput)
}

// label for field to provide mobile number
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberFormat
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberMessage
	}).(pulumi.StringPtrOutput)
}

// label for submit button for code generation
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberSubmit
	}).(pulumi.StringPtrOutput)
}

// Title for phone number details
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsNumberTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsNumberTitle
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsUsernameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SmsUsernameFormat
	}).(pulumi.StringPtrOutput)
}

// how long confirmation code should be considered valid (in minutes)
func (o WlanPortalTemplatePortalTemplatePtrOutput) SmsValidityDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *int {
		if v == nil {
			return nil
		}
		return v.SmsValidityDuration
	}).(pulumi.IntPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorBackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorBackLink
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorCancel
	}).(pulumi.StringPtrOutput)
}

// label for Sponsor Email
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorEmail
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorEmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorEmailError
	}).(pulumi.StringPtrOutput)
}

// html template to replace/override default sponsor email template
// Sponsor Email Template supports following template variables:
//   - `approveUrl`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized
//   - `denyUrl`: Renders URL to reject the request
//   - `guestEmail`: Renders Email ID of the guest
//   - `guestName`: Renders Name of the guest
//   - `field1`: Renders value of the Custom Field 1
//   - `field2`: Renders value of the Custom Field 2
//   - `sponsorLinkValidityDuration`: Renders validity time of the request (i.e. Approve/Deny URL)
//   - `authExpireMinutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorEmailTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorEmailTemplate
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorInfoApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorInfoApproved
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorInfoDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorInfoDenied
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorInfoPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorInfoPending
	}).(pulumi.StringPtrOutput)
}

// label for Sponsor Name
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorName
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorNameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorNameError
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorNotePending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorNotePending
	}).(pulumi.StringPtrOutput)
}

// submit button label request Wifi Access and notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorRequestAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorRequestAccess
	}).(pulumi.StringPtrOutput)
}

// text to display if sponsor approves request
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorStatusApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorStatusApproved
	}).(pulumi.StringPtrOutput)
}

// text to display when sponsor denies request
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorStatusDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorStatusDenied
	}).(pulumi.StringPtrOutput)
}

// text to display if request is still pending
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorStatusPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorStatusPending
	}).(pulumi.StringPtrOutput)
}

// submit button label to notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorSubmit
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorsError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorsError
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) SponsorsFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.SponsorsFieldLabel
	}).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplatePtrOutput) Tos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *bool {
		if v == nil {
			return nil
		}
		return v.Tos
	}).(pulumi.BoolPtrOutput)
}

// prefix of the label of the link to go to tos
func (o WlanPortalTemplatePortalTemplatePtrOutput) TosAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TosAcceptLabel
	}).(pulumi.StringPtrOutput)
}

// error message when tos not accepted
func (o WlanPortalTemplatePortalTemplatePtrOutput) TosError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TosError
	}).(pulumi.StringPtrOutput)
}

// label of the link to go to tos
func (o WlanPortalTemplatePortalTemplatePtrOutput) TosLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TosLink
	}).(pulumi.StringPtrOutput)
}

// text of the Terms of Service
func (o WlanPortalTemplatePortalTemplatePtrOutput) TosText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanPortalTemplatePortalTemplate) *string {
		if v == nil {
			return nil
		}
		return v.TosText
	}).(pulumi.StringPtrOutput)
}

type WlanPortalTemplatePortalTemplateLocales struct {
	// label for Amazon auth button
	AuthButtonAmazon *string `pulumi:"authButtonAmazon"`
	// label for Azure auth button
	AuthButtonAzure *string `pulumi:"authButtonAzure"`
	// label for Email auth button
	AuthButtonEmail *string `pulumi:"authButtonEmail"`
	// label for Facebook auth button
	AuthButtonFacebook *string `pulumi:"authButtonFacebook"`
	// label for Google auth button
	AuthButtonGoogle *string `pulumi:"authButtonGoogle"`
	// label for Microsoft auth button
	AuthButtonMicrosoft *string `pulumi:"authButtonMicrosoft"`
	// label for passphrase auth button
	AuthButtonPassphrase *string `pulumi:"authButtonPassphrase"`
	// label for SMS auth button
	AuthButtonSms *string `pulumi:"authButtonSms"`
	// label for Sponsor auth button
	AuthButtonSponsor *string `pulumi:"authButtonSponsor"`
	AuthLabel         *string `pulumi:"authLabel"`
	// label of the link to go back to /logon
	BackLink *string `pulumi:"backLink"`
	// error message when company not provided
	CompanyError *string `pulumi:"companyError"`
	// label of company field
	CompanyLabel *string `pulumi:"companyLabel"`
	// error message when a user has valid social login but doesn't match specified email domains.
	EmailAccessDomainError *string `pulumi:"emailAccessDomainError"`
	// Label for cancel confirmation code submission using email auth
	EmailCancel         *string `pulumi:"emailCancel"`
	EmailCodeCancel     *string `pulumi:"emailCodeCancel"`
	EmailCodeError      *string `pulumi:"emailCodeError"`
	EmailCodeFieldLabel *string `pulumi:"emailCodeFieldLabel"`
	EmailCodeMessage    *string `pulumi:"emailCodeMessage"`
	EmailCodeSubmit     *string `pulumi:"emailCodeSubmit"`
	EmailCodeTitle      *string `pulumi:"emailCodeTitle"`
	// error message when email not provided
	EmailError      *string `pulumi:"emailError"`
	EmailFieldLabel *string `pulumi:"emailFieldLabel"`
	// label of email field
	EmailLabel   *string `pulumi:"emailLabel"`
	EmailMessage *string `pulumi:"emailMessage"`
	// Label for confirmation code submit button using email auth
	EmailSubmit *string `pulumi:"emailSubmit"`
	// Title for the Email registration
	EmailTitle *string `pulumi:"emailTitle"`
	// error message when field1 not provided
	Field1error *string `pulumi:"field1error"`
	// label of field1
	Field1label *string `pulumi:"field1label"`
	// error message when field2 not provided
	Field2error *string `pulumi:"field2error"`
	// label of field2
	Field2label *string `pulumi:"field2label"`
	// error message when field3 not provided
	Field3error *string `pulumi:"field3error"`
	// label of field3
	Field3label *string `pulumi:"field3label"`
	// error message when field4 not provided
	Field4error *string `pulumi:"field4error"`
	// label of field4
	Field4label *string `pulumi:"field4label"`
	Message     *string `pulumi:"message"`
	// error message when name not provided
	NameError *string `pulumi:"nameError"`
	// label of name field
	NameLabel *string `pulumi:"nameLabel"`
	// label for Do Not Store My Personal Information
	OptoutLabel *string `pulumi:"optoutLabel"`
	PageTitle   *string `pulumi:"pageTitle"`
	// Label for the Passphrase cancel button
	PassphraseCancel *string `pulumi:"passphraseCancel"`
	// error message when invalid passphrase is provided
	PassphraseError *string `pulumi:"passphraseError"`
	// Passphrase
	PassphraseLabel   *string `pulumi:"passphraseLabel"`
	PassphraseMessage *string `pulumi:"passphraseMessage"`
	// Label for the Passphrase submit button
	PassphraseSubmit *string `pulumi:"passphraseSubmit"`
	// Title for passphrase details page
	PassphraseTitle *string `pulumi:"passphraseTitle"`
	// prefix of the label of the link to go to Privacy Policy
	PrivacyPolicyAcceptLabel *string `pulumi:"privacyPolicyAcceptLabel"`
	// error message when Privacy Policy not accepted
	PrivacyPolicyError *string `pulumi:"privacyPolicyError"`
	// label of the link to go to Privacy Policy
	PrivacyPolicyLink *string `pulumi:"privacyPolicyLink"`
	// text of the Privacy Policy
	PrivacyPolicyText *string `pulumi:"privacyPolicyText"`
	// label to denote required field
	RequiredFieldLabel *string `pulumi:"requiredFieldLabel"`
	// label of the button to /signin
	SignInLabel       *string `pulumi:"signInLabel"`
	SmsCarrierDefault *string `pulumi:"smsCarrierDefault"`
	SmsCarrierError   *string `pulumi:"smsCarrierError"`
	// label for mobile carrier drop-down list
	SmsCarrierFieldLabel *string `pulumi:"smsCarrierFieldLabel"`
	// Label for cancel confirmation code submission
	SmsCodeCancel *string `pulumi:"smsCodeCancel"`
	// error message when confirmation code is invalid
	SmsCodeError      *string `pulumi:"smsCodeError"`
	SmsCodeFieldLabel *string `pulumi:"smsCodeFieldLabel"`
	SmsCodeMessage    *string `pulumi:"smsCodeMessage"`
	// Label for confirmation code submit button
	SmsCodeSubmit        *string `pulumi:"smsCodeSubmit"`
	SmsCodeTitle         *string `pulumi:"smsCodeTitle"`
	SmsCountryFieldLabel *string `pulumi:"smsCountryFieldLabel"`
	SmsCountryFormat     *string `pulumi:"smsCountryFormat"`
	// Label for checkbox to specify that the user has access code
	SmsHaveAccessCode *string `pulumi:"smsHaveAccessCode"`
	// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
	SmsMessageFormat *string `pulumi:"smsMessageFormat"`
	// label for canceling mobile details for SMS auth
	SmsNumberCancel *string `pulumi:"smsNumberCancel"`
	SmsNumberError  *string `pulumi:"smsNumberError"`
	// label for field to provide mobile number
	SmsNumberFieldLabel *string `pulumi:"smsNumberFieldLabel"`
	SmsNumberFormat     *string `pulumi:"smsNumberFormat"`
	SmsNumberMessage    *string `pulumi:"smsNumberMessage"`
	// label for submit button for code generation
	SmsNumberSubmit *string `pulumi:"smsNumberSubmit"`
	// Title for phone number details
	SmsNumberTitle    *string `pulumi:"smsNumberTitle"`
	SmsUsernameFormat *string `pulumi:"smsUsernameFormat"`
	SponsorBackLink   *string `pulumi:"sponsorBackLink"`
	SponsorCancel     *string `pulumi:"sponsorCancel"`
	// label for Sponsor Email
	SponsorEmail        *string `pulumi:"sponsorEmail"`
	SponsorEmailError   *string `pulumi:"sponsorEmailError"`
	SponsorInfoApproved *string `pulumi:"sponsorInfoApproved"`
	SponsorInfoDenied   *string `pulumi:"sponsorInfoDenied"`
	SponsorInfoPending  *string `pulumi:"sponsorInfoPending"`
	// label for Sponsor Name
	SponsorName        *string `pulumi:"sponsorName"`
	SponsorNameError   *string `pulumi:"sponsorNameError"`
	SponsorNotePending *string `pulumi:"sponsorNotePending"`
	// submit button label request Wifi Access and notify sponsor about guest request
	SponsorRequestAccess *string `pulumi:"sponsorRequestAccess"`
	// text to display if sponsor approves request
	SponsorStatusApproved *string `pulumi:"sponsorStatusApproved"`
	// text to display when sponsor denies request
	SponsorStatusDenied *string `pulumi:"sponsorStatusDenied"`
	// text to display if request is still pending
	SponsorStatusPending *string `pulumi:"sponsorStatusPending"`
	// submit button label to notify sponsor about guest request
	SponsorSubmit      *string `pulumi:"sponsorSubmit"`
	SponsorsError      *string `pulumi:"sponsorsError"`
	SponsorsFieldLabel *string `pulumi:"sponsorsFieldLabel"`
	// prefix of the label of the link to go to tos
	TosAcceptLabel *string `pulumi:"tosAcceptLabel"`
	// error message when tos not accepted
	TosError *string `pulumi:"tosError"`
	// label of the link to go to tos
	TosLink *string `pulumi:"tosLink"`
	// text of the Terms of Service
	TosText *string `pulumi:"tosText"`
}

// WlanPortalTemplatePortalTemplateLocalesInput is an input type that accepts WlanPortalTemplatePortalTemplateLocalesArgs and WlanPortalTemplatePortalTemplateLocalesOutput values.
// You can construct a concrete instance of `WlanPortalTemplatePortalTemplateLocalesInput` via:
//
//	WlanPortalTemplatePortalTemplateLocalesArgs{...}
type WlanPortalTemplatePortalTemplateLocalesInput interface {
	pulumi.Input

	ToWlanPortalTemplatePortalTemplateLocalesOutput() WlanPortalTemplatePortalTemplateLocalesOutput
	ToWlanPortalTemplatePortalTemplateLocalesOutputWithContext(context.Context) WlanPortalTemplatePortalTemplateLocalesOutput
}

type WlanPortalTemplatePortalTemplateLocalesArgs struct {
	// label for Amazon auth button
	AuthButtonAmazon pulumi.StringPtrInput `pulumi:"authButtonAmazon"`
	// label for Azure auth button
	AuthButtonAzure pulumi.StringPtrInput `pulumi:"authButtonAzure"`
	// label for Email auth button
	AuthButtonEmail pulumi.StringPtrInput `pulumi:"authButtonEmail"`
	// label for Facebook auth button
	AuthButtonFacebook pulumi.StringPtrInput `pulumi:"authButtonFacebook"`
	// label for Google auth button
	AuthButtonGoogle pulumi.StringPtrInput `pulumi:"authButtonGoogle"`
	// label for Microsoft auth button
	AuthButtonMicrosoft pulumi.StringPtrInput `pulumi:"authButtonMicrosoft"`
	// label for passphrase auth button
	AuthButtonPassphrase pulumi.StringPtrInput `pulumi:"authButtonPassphrase"`
	// label for SMS auth button
	AuthButtonSms pulumi.StringPtrInput `pulumi:"authButtonSms"`
	// label for Sponsor auth button
	AuthButtonSponsor pulumi.StringPtrInput `pulumi:"authButtonSponsor"`
	AuthLabel         pulumi.StringPtrInput `pulumi:"authLabel"`
	// label of the link to go back to /logon
	BackLink pulumi.StringPtrInput `pulumi:"backLink"`
	// error message when company not provided
	CompanyError pulumi.StringPtrInput `pulumi:"companyError"`
	// label of company field
	CompanyLabel pulumi.StringPtrInput `pulumi:"companyLabel"`
	// error message when a user has valid social login but doesn't match specified email domains.
	EmailAccessDomainError pulumi.StringPtrInput `pulumi:"emailAccessDomainError"`
	// Label for cancel confirmation code submission using email auth
	EmailCancel         pulumi.StringPtrInput `pulumi:"emailCancel"`
	EmailCodeCancel     pulumi.StringPtrInput `pulumi:"emailCodeCancel"`
	EmailCodeError      pulumi.StringPtrInput `pulumi:"emailCodeError"`
	EmailCodeFieldLabel pulumi.StringPtrInput `pulumi:"emailCodeFieldLabel"`
	EmailCodeMessage    pulumi.StringPtrInput `pulumi:"emailCodeMessage"`
	EmailCodeSubmit     pulumi.StringPtrInput `pulumi:"emailCodeSubmit"`
	EmailCodeTitle      pulumi.StringPtrInput `pulumi:"emailCodeTitle"`
	// error message when email not provided
	EmailError      pulumi.StringPtrInput `pulumi:"emailError"`
	EmailFieldLabel pulumi.StringPtrInput `pulumi:"emailFieldLabel"`
	// label of email field
	EmailLabel   pulumi.StringPtrInput `pulumi:"emailLabel"`
	EmailMessage pulumi.StringPtrInput `pulumi:"emailMessage"`
	// Label for confirmation code submit button using email auth
	EmailSubmit pulumi.StringPtrInput `pulumi:"emailSubmit"`
	// Title for the Email registration
	EmailTitle pulumi.StringPtrInput `pulumi:"emailTitle"`
	// error message when field1 not provided
	Field1error pulumi.StringPtrInput `pulumi:"field1error"`
	// label of field1
	Field1label pulumi.StringPtrInput `pulumi:"field1label"`
	// error message when field2 not provided
	Field2error pulumi.StringPtrInput `pulumi:"field2error"`
	// label of field2
	Field2label pulumi.StringPtrInput `pulumi:"field2label"`
	// error message when field3 not provided
	Field3error pulumi.StringPtrInput `pulumi:"field3error"`
	// label of field3
	Field3label pulumi.StringPtrInput `pulumi:"field3label"`
	// error message when field4 not provided
	Field4error pulumi.StringPtrInput `pulumi:"field4error"`
	// label of field4
	Field4label pulumi.StringPtrInput `pulumi:"field4label"`
	Message     pulumi.StringPtrInput `pulumi:"message"`
	// error message when name not provided
	NameError pulumi.StringPtrInput `pulumi:"nameError"`
	// label of name field
	NameLabel pulumi.StringPtrInput `pulumi:"nameLabel"`
	// label for Do Not Store My Personal Information
	OptoutLabel pulumi.StringPtrInput `pulumi:"optoutLabel"`
	PageTitle   pulumi.StringPtrInput `pulumi:"pageTitle"`
	// Label for the Passphrase cancel button
	PassphraseCancel pulumi.StringPtrInput `pulumi:"passphraseCancel"`
	// error message when invalid passphrase is provided
	PassphraseError pulumi.StringPtrInput `pulumi:"passphraseError"`
	// Passphrase
	PassphraseLabel   pulumi.StringPtrInput `pulumi:"passphraseLabel"`
	PassphraseMessage pulumi.StringPtrInput `pulumi:"passphraseMessage"`
	// Label for the Passphrase submit button
	PassphraseSubmit pulumi.StringPtrInput `pulumi:"passphraseSubmit"`
	// Title for passphrase details page
	PassphraseTitle pulumi.StringPtrInput `pulumi:"passphraseTitle"`
	// prefix of the label of the link to go to Privacy Policy
	PrivacyPolicyAcceptLabel pulumi.StringPtrInput `pulumi:"privacyPolicyAcceptLabel"`
	// error message when Privacy Policy not accepted
	PrivacyPolicyError pulumi.StringPtrInput `pulumi:"privacyPolicyError"`
	// label of the link to go to Privacy Policy
	PrivacyPolicyLink pulumi.StringPtrInput `pulumi:"privacyPolicyLink"`
	// text of the Privacy Policy
	PrivacyPolicyText pulumi.StringPtrInput `pulumi:"privacyPolicyText"`
	// label to denote required field
	RequiredFieldLabel pulumi.StringPtrInput `pulumi:"requiredFieldLabel"`
	// label of the button to /signin
	SignInLabel       pulumi.StringPtrInput `pulumi:"signInLabel"`
	SmsCarrierDefault pulumi.StringPtrInput `pulumi:"smsCarrierDefault"`
	SmsCarrierError   pulumi.StringPtrInput `pulumi:"smsCarrierError"`
	// label for mobile carrier drop-down list
	SmsCarrierFieldLabel pulumi.StringPtrInput `pulumi:"smsCarrierFieldLabel"`
	// Label for cancel confirmation code submission
	SmsCodeCancel pulumi.StringPtrInput `pulumi:"smsCodeCancel"`
	// error message when confirmation code is invalid
	SmsCodeError      pulumi.StringPtrInput `pulumi:"smsCodeError"`
	SmsCodeFieldLabel pulumi.StringPtrInput `pulumi:"smsCodeFieldLabel"`
	SmsCodeMessage    pulumi.StringPtrInput `pulumi:"smsCodeMessage"`
	// Label for confirmation code submit button
	SmsCodeSubmit        pulumi.StringPtrInput `pulumi:"smsCodeSubmit"`
	SmsCodeTitle         pulumi.StringPtrInput `pulumi:"smsCodeTitle"`
	SmsCountryFieldLabel pulumi.StringPtrInput `pulumi:"smsCountryFieldLabel"`
	SmsCountryFormat     pulumi.StringPtrInput `pulumi:"smsCountryFormat"`
	// Label for checkbox to specify that the user has access code
	SmsHaveAccessCode pulumi.StringPtrInput `pulumi:"smsHaveAccessCode"`
	// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
	SmsMessageFormat pulumi.StringPtrInput `pulumi:"smsMessageFormat"`
	// label for canceling mobile details for SMS auth
	SmsNumberCancel pulumi.StringPtrInput `pulumi:"smsNumberCancel"`
	SmsNumberError  pulumi.StringPtrInput `pulumi:"smsNumberError"`
	// label for field to provide mobile number
	SmsNumberFieldLabel pulumi.StringPtrInput `pulumi:"smsNumberFieldLabel"`
	SmsNumberFormat     pulumi.StringPtrInput `pulumi:"smsNumberFormat"`
	SmsNumberMessage    pulumi.StringPtrInput `pulumi:"smsNumberMessage"`
	// label for submit button for code generation
	SmsNumberSubmit pulumi.StringPtrInput `pulumi:"smsNumberSubmit"`
	// Title for phone number details
	SmsNumberTitle    pulumi.StringPtrInput `pulumi:"smsNumberTitle"`
	SmsUsernameFormat pulumi.StringPtrInput `pulumi:"smsUsernameFormat"`
	SponsorBackLink   pulumi.StringPtrInput `pulumi:"sponsorBackLink"`
	SponsorCancel     pulumi.StringPtrInput `pulumi:"sponsorCancel"`
	// label for Sponsor Email
	SponsorEmail        pulumi.StringPtrInput `pulumi:"sponsorEmail"`
	SponsorEmailError   pulumi.StringPtrInput `pulumi:"sponsorEmailError"`
	SponsorInfoApproved pulumi.StringPtrInput `pulumi:"sponsorInfoApproved"`
	SponsorInfoDenied   pulumi.StringPtrInput `pulumi:"sponsorInfoDenied"`
	SponsorInfoPending  pulumi.StringPtrInput `pulumi:"sponsorInfoPending"`
	// label for Sponsor Name
	SponsorName        pulumi.StringPtrInput `pulumi:"sponsorName"`
	SponsorNameError   pulumi.StringPtrInput `pulumi:"sponsorNameError"`
	SponsorNotePending pulumi.StringPtrInput `pulumi:"sponsorNotePending"`
	// submit button label request Wifi Access and notify sponsor about guest request
	SponsorRequestAccess pulumi.StringPtrInput `pulumi:"sponsorRequestAccess"`
	// text to display if sponsor approves request
	SponsorStatusApproved pulumi.StringPtrInput `pulumi:"sponsorStatusApproved"`
	// text to display when sponsor denies request
	SponsorStatusDenied pulumi.StringPtrInput `pulumi:"sponsorStatusDenied"`
	// text to display if request is still pending
	SponsorStatusPending pulumi.StringPtrInput `pulumi:"sponsorStatusPending"`
	// submit button label to notify sponsor about guest request
	SponsorSubmit      pulumi.StringPtrInput `pulumi:"sponsorSubmit"`
	SponsorsError      pulumi.StringPtrInput `pulumi:"sponsorsError"`
	SponsorsFieldLabel pulumi.StringPtrInput `pulumi:"sponsorsFieldLabel"`
	// prefix of the label of the link to go to tos
	TosAcceptLabel pulumi.StringPtrInput `pulumi:"tosAcceptLabel"`
	// error message when tos not accepted
	TosError pulumi.StringPtrInput `pulumi:"tosError"`
	// label of the link to go to tos
	TosLink pulumi.StringPtrInput `pulumi:"tosLink"`
	// text of the Terms of Service
	TosText pulumi.StringPtrInput `pulumi:"tosText"`
}

func (WlanPortalTemplatePortalTemplateLocalesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortalTemplatePortalTemplateLocales)(nil)).Elem()
}

func (i WlanPortalTemplatePortalTemplateLocalesArgs) ToWlanPortalTemplatePortalTemplateLocalesOutput() WlanPortalTemplatePortalTemplateLocalesOutput {
	return i.ToWlanPortalTemplatePortalTemplateLocalesOutputWithContext(context.Background())
}

func (i WlanPortalTemplatePortalTemplateLocalesArgs) ToWlanPortalTemplatePortalTemplateLocalesOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateLocalesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalTemplatePortalTemplateLocalesOutput)
}

// WlanPortalTemplatePortalTemplateLocalesMapInput is an input type that accepts WlanPortalTemplatePortalTemplateLocalesMap and WlanPortalTemplatePortalTemplateLocalesMapOutput values.
// You can construct a concrete instance of `WlanPortalTemplatePortalTemplateLocalesMapInput` via:
//
//	WlanPortalTemplatePortalTemplateLocalesMap{ "key": WlanPortalTemplatePortalTemplateLocalesArgs{...} }
type WlanPortalTemplatePortalTemplateLocalesMapInput interface {
	pulumi.Input

	ToWlanPortalTemplatePortalTemplateLocalesMapOutput() WlanPortalTemplatePortalTemplateLocalesMapOutput
	ToWlanPortalTemplatePortalTemplateLocalesMapOutputWithContext(context.Context) WlanPortalTemplatePortalTemplateLocalesMapOutput
}

type WlanPortalTemplatePortalTemplateLocalesMap map[string]WlanPortalTemplatePortalTemplateLocalesInput

func (WlanPortalTemplatePortalTemplateLocalesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanPortalTemplatePortalTemplateLocales)(nil)).Elem()
}

func (i WlanPortalTemplatePortalTemplateLocalesMap) ToWlanPortalTemplatePortalTemplateLocalesMapOutput() WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return i.ToWlanPortalTemplatePortalTemplateLocalesMapOutputWithContext(context.Background())
}

func (i WlanPortalTemplatePortalTemplateLocalesMap) ToWlanPortalTemplatePortalTemplateLocalesMapOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanPortalTemplatePortalTemplateLocalesMapOutput)
}

type WlanPortalTemplatePortalTemplateLocalesOutput struct{ *pulumi.OutputState }

func (WlanPortalTemplatePortalTemplateLocalesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanPortalTemplatePortalTemplateLocales)(nil)).Elem()
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) ToWlanPortalTemplatePortalTemplateLocalesOutput() WlanPortalTemplatePortalTemplateLocalesOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) ToWlanPortalTemplatePortalTemplateLocalesOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateLocalesOutput {
	return o
}

// label for Amazon auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonAmazon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonAmazon }).(pulumi.StringPtrOutput)
}

// label for Azure auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonAzure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonAzure }).(pulumi.StringPtrOutput)
}

// label for Email auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonEmail }).(pulumi.StringPtrOutput)
}

// label for Facebook auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonFacebook() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonFacebook }).(pulumi.StringPtrOutput)
}

// label for Google auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonGoogle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonGoogle }).(pulumi.StringPtrOutput)
}

// label for Microsoft auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonMicrosoft() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonMicrosoft }).(pulumi.StringPtrOutput)
}

// label for passphrase auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonPassphrase }).(pulumi.StringPtrOutput)
}

// label for SMS auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonSms() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonSms }).(pulumi.StringPtrOutput)
}

// label for Sponsor auth button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthButtonSponsor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthButtonSponsor }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) AuthLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.AuthLabel }).(pulumi.StringPtrOutput)
}

// label of the link to go back to /logon
func (o WlanPortalTemplatePortalTemplateLocalesOutput) BackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.BackLink }).(pulumi.StringPtrOutput)
}

// error message when company not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) CompanyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.CompanyError }).(pulumi.StringPtrOutput)
}

// label of company field
func (o WlanPortalTemplatePortalTemplateLocalesOutput) CompanyLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.CompanyLabel }).(pulumi.StringPtrOutput)
}

// error message when a user has valid social login but doesn't match specified email domains.
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailAccessDomainError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailAccessDomainError }).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission using email auth
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeMessage }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailCodeTitle }).(pulumi.StringPtrOutput)
}

// error message when email not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailFieldLabel }).(pulumi.StringPtrOutput)
}

// label of email field
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailMessage }).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button using email auth
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailSubmit }).(pulumi.StringPtrOutput)
}

// Title for the Email registration
func (o WlanPortalTemplatePortalTemplateLocalesOutput) EmailTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.EmailTitle }).(pulumi.StringPtrOutput)
}

// error message when field1 not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field1error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field1error }).(pulumi.StringPtrOutput)
}

// label of field1
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field1label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field1label }).(pulumi.StringPtrOutput)
}

// error message when field2 not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field2error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field2error }).(pulumi.StringPtrOutput)
}

// label of field2
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field2label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field2label }).(pulumi.StringPtrOutput)
}

// error message when field3 not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field3error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field3error }).(pulumi.StringPtrOutput)
}

// label of field3
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field3label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field3label }).(pulumi.StringPtrOutput)
}

// error message when field4 not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field4error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field4error }).(pulumi.StringPtrOutput)
}

// label of field4
func (o WlanPortalTemplatePortalTemplateLocalesOutput) Field4label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Field4label }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// error message when name not provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) NameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.NameError }).(pulumi.StringPtrOutput)
}

// label of name field
func (o WlanPortalTemplatePortalTemplateLocalesOutput) NameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.NameLabel }).(pulumi.StringPtrOutput)
}

// label for Do Not Store My Personal Information
func (o WlanPortalTemplatePortalTemplateLocalesOutput) OptoutLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.OptoutLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) PageTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PageTitle }).(pulumi.StringPtrOutput)
}

// Label for the Passphrase cancel button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseCancel }).(pulumi.StringPtrOutput)
}

// error message when invalid passphrase is provided
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseError }).(pulumi.StringPtrOutput)
}

// Passphrase
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseMessage }).(pulumi.StringPtrOutput)
}

// Label for the Passphrase submit button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseSubmit }).(pulumi.StringPtrOutput)
}

// Title for passphrase details page
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PassphraseTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PassphraseTitle }).(pulumi.StringPtrOutput)
}

// prefix of the label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PrivacyPolicyAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PrivacyPolicyAcceptLabel }).(pulumi.StringPtrOutput)
}

// error message when Privacy Policy not accepted
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PrivacyPolicyError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PrivacyPolicyError }).(pulumi.StringPtrOutput)
}

// label of the link to go to Privacy Policy
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PrivacyPolicyLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PrivacyPolicyLink }).(pulumi.StringPtrOutput)
}

// text of the Privacy Policy
func (o WlanPortalTemplatePortalTemplateLocalesOutput) PrivacyPolicyText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.PrivacyPolicyText }).(pulumi.StringPtrOutput)
}

// label to denote required field
func (o WlanPortalTemplatePortalTemplateLocalesOutput) RequiredFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.RequiredFieldLabel }).(pulumi.StringPtrOutput)
}

// label of the button to /signin
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SignInLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SignInLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCarrierDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCarrierDefault }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCarrierError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCarrierError }).(pulumi.StringPtrOutput)
}

// label for mobile carrier drop-down list
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCarrierFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCarrierFieldLabel }).(pulumi.StringPtrOutput)
}

// Label for cancel confirmation code submission
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeCancel }).(pulumi.StringPtrOutput)
}

// error message when confirmation code is invalid
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeMessage }).(pulumi.StringPtrOutput)
}

// Label for confirmation code submit button
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCodeTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCodeTitle }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCountryFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCountryFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsCountryFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsCountryFormat }).(pulumi.StringPtrOutput)
}

// Label for checkbox to specify that the user has access code
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsHaveAccessCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsHaveAccessCode }).(pulumi.StringPtrOutput)
}

// format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsMessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsMessageFormat }).(pulumi.StringPtrOutput)
}

// label for canceling mobile details for SMS auth
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberCancel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberError }).(pulumi.StringPtrOutput)
}

// label for field to provide mobile number
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberFieldLabel }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberFormat }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberMessage }).(pulumi.StringPtrOutput)
}

// label for submit button for code generation
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberSubmit }).(pulumi.StringPtrOutput)
}

// Title for phone number details
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsNumberTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsNumberTitle }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SmsUsernameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SmsUsernameFormat }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorBackLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorBackLink }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorCancel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorCancel }).(pulumi.StringPtrOutput)
}

// label for Sponsor Email
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorEmail }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorEmailError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorEmailError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorInfoApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorInfoApproved }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorInfoDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorInfoDenied }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorInfoPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorInfoPending }).(pulumi.StringPtrOutput)
}

// label for Sponsor Name
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorName }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorNameError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorNameError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorNotePending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorNotePending }).(pulumi.StringPtrOutput)
}

// submit button label request Wifi Access and notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorRequestAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorRequestAccess }).(pulumi.StringPtrOutput)
}

// text to display if sponsor approves request
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorStatusApproved() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorStatusApproved }).(pulumi.StringPtrOutput)
}

// text to display when sponsor denies request
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorStatusDenied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorStatusDenied }).(pulumi.StringPtrOutput)
}

// text to display if request is still pending
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorStatusPending() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorStatusPending }).(pulumi.StringPtrOutput)
}

// submit button label to notify sponsor about guest request
func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorSubmit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorSubmit }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorsError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorsError }).(pulumi.StringPtrOutput)
}

func (o WlanPortalTemplatePortalTemplateLocalesOutput) SponsorsFieldLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.SponsorsFieldLabel }).(pulumi.StringPtrOutput)
}

// prefix of the label of the link to go to tos
func (o WlanPortalTemplatePortalTemplateLocalesOutput) TosAcceptLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.TosAcceptLabel }).(pulumi.StringPtrOutput)
}

// error message when tos not accepted
func (o WlanPortalTemplatePortalTemplateLocalesOutput) TosError() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.TosError }).(pulumi.StringPtrOutput)
}

// label of the link to go to tos
func (o WlanPortalTemplatePortalTemplateLocalesOutput) TosLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.TosLink }).(pulumi.StringPtrOutput)
}

// text of the Terms of Service
func (o WlanPortalTemplatePortalTemplateLocalesOutput) TosText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanPortalTemplatePortalTemplateLocales) *string { return v.TosText }).(pulumi.StringPtrOutput)
}

type WlanPortalTemplatePortalTemplateLocalesMapOutput struct{ *pulumi.OutputState }

func (WlanPortalTemplatePortalTemplateLocalesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanPortalTemplatePortalTemplateLocales)(nil)).Elem()
}

func (o WlanPortalTemplatePortalTemplateLocalesMapOutput) ToWlanPortalTemplatePortalTemplateLocalesMapOutput() WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplateLocalesMapOutput) ToWlanPortalTemplatePortalTemplateLocalesMapOutputWithContext(ctx context.Context) WlanPortalTemplatePortalTemplateLocalesMapOutput {
	return o
}

func (o WlanPortalTemplatePortalTemplateLocalesMapOutput) MapIndex(k pulumi.StringInput) WlanPortalTemplatePortalTemplateLocalesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanPortalTemplatePortalTemplateLocales {
		return vs[0].(map[string]WlanPortalTemplatePortalTemplateLocales)[vs[1].(string)]
	}).(WlanPortalTemplatePortalTemplateLocalesOutput)
}

type WlanQos struct {
	// enum: `background`, `bestEffort`, `video`, `voice`
	Class *string `pulumi:"class"`
	// whether to overwrite QoS
	Overwrite *bool `pulumi:"overwrite"`
}

// WlanQosInput is an input type that accepts WlanQosArgs and WlanQosOutput values.
// You can construct a concrete instance of `WlanQosInput` via:
//
//	WlanQosArgs{...}
type WlanQosInput interface {
	pulumi.Input

	ToWlanQosOutput() WlanQosOutput
	ToWlanQosOutputWithContext(context.Context) WlanQosOutput
}

type WlanQosArgs struct {
	// enum: `background`, `bestEffort`, `video`, `voice`
	Class pulumi.StringPtrInput `pulumi:"class"`
	// whether to overwrite QoS
	Overwrite pulumi.BoolPtrInput `pulumi:"overwrite"`
}

func (WlanQosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanQos)(nil)).Elem()
}

func (i WlanQosArgs) ToWlanQosOutput() WlanQosOutput {
	return i.ToWlanQosOutputWithContext(context.Background())
}

func (i WlanQosArgs) ToWlanQosOutputWithContext(ctx context.Context) WlanQosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosOutput)
}

func (i WlanQosArgs) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return i.ToWlanQosPtrOutputWithContext(context.Background())
}

func (i WlanQosArgs) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosOutput).ToWlanQosPtrOutputWithContext(ctx)
}

// WlanQosPtrInput is an input type that accepts WlanQosArgs, WlanQosPtr and WlanQosPtrOutput values.
// You can construct a concrete instance of `WlanQosPtrInput` via:
//
//	        WlanQosArgs{...}
//
//	or:
//
//	        nil
type WlanQosPtrInput interface {
	pulumi.Input

	ToWlanQosPtrOutput() WlanQosPtrOutput
	ToWlanQosPtrOutputWithContext(context.Context) WlanQosPtrOutput
}

type wlanQosPtrType WlanQosArgs

func WlanQosPtr(v *WlanQosArgs) WlanQosPtrInput {
	return (*wlanQosPtrType)(v)
}

func (*wlanQosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanQos)(nil)).Elem()
}

func (i *wlanQosPtrType) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return i.ToWlanQosPtrOutputWithContext(context.Background())
}

func (i *wlanQosPtrType) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanQosPtrOutput)
}

type WlanQosOutput struct{ *pulumi.OutputState }

func (WlanQosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanQos)(nil)).Elem()
}

func (o WlanQosOutput) ToWlanQosOutput() WlanQosOutput {
	return o
}

func (o WlanQosOutput) ToWlanQosOutputWithContext(ctx context.Context) WlanQosOutput {
	return o
}

func (o WlanQosOutput) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return o.ToWlanQosPtrOutputWithContext(context.Background())
}

func (o WlanQosOutput) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanQos) *WlanQos {
		return &v
	}).(WlanQosPtrOutput)
}

// enum: `background`, `bestEffort`, `video`, `voice`
func (o WlanQosOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanQos) *string { return v.Class }).(pulumi.StringPtrOutput)
}

// whether to overwrite QoS
func (o WlanQosOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanQos) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

type WlanQosPtrOutput struct{ *pulumi.OutputState }

func (WlanQosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanQos)(nil)).Elem()
}

func (o WlanQosPtrOutput) ToWlanQosPtrOutput() WlanQosPtrOutput {
	return o
}

func (o WlanQosPtrOutput) ToWlanQosPtrOutputWithContext(ctx context.Context) WlanQosPtrOutput {
	return o
}

func (o WlanQosPtrOutput) Elem() WlanQosOutput {
	return o.ApplyT(func(v *WlanQos) WlanQos {
		if v != nil {
			return *v
		}
		var ret WlanQos
		return ret
	}).(WlanQosOutput)
}

// enum: `background`, `bestEffort`, `video`, `voice`
func (o WlanQosPtrOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanQos) *string {
		if v == nil {
			return nil
		}
		return v.Class
	}).(pulumi.StringPtrOutput)
}

// whether to overwrite QoS
func (o WlanQosPtrOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanQos) *bool {
		if v == nil {
			return nil
		}
		return v.Overwrite
	}).(pulumi.BoolPtrOutput)
}

type WlanRadsec struct {
	CoaEnabled  *bool `pulumi:"coaEnabled"`
	Enabled     *bool `pulumi:"enabled"`
	IdleTimeout *int  `pulumi:"idleTimeout"`
	// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
	MxclusterIds []string `pulumi:"mxclusterIds"`
	// default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
	ProxyHosts []string `pulumi:"proxyHosts"`
	// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
	ServerName *string `pulumi:"serverName"`
	// List of Radsec Servers. Only if not Mist Edge.
	Servers []WlanRadsecServer `pulumi:"servers"`
	// use mxedge(s) as radsecproxy
	UseMxedge *bool `pulumi:"useMxedge"`
	// To use Site mxedges when this WLAN does not use mxtunnel
	UseSiteMxedge *bool `pulumi:"useSiteMxedge"`
}

// WlanRadsecInput is an input type that accepts WlanRadsecArgs and WlanRadsecOutput values.
// You can construct a concrete instance of `WlanRadsecInput` via:
//
//	WlanRadsecArgs{...}
type WlanRadsecInput interface {
	pulumi.Input

	ToWlanRadsecOutput() WlanRadsecOutput
	ToWlanRadsecOutputWithContext(context.Context) WlanRadsecOutput
}

type WlanRadsecArgs struct {
	CoaEnabled  pulumi.BoolPtrInput `pulumi:"coaEnabled"`
	Enabled     pulumi.BoolPtrInput `pulumi:"enabled"`
	IdleTimeout pulumi.IntPtrInput  `pulumi:"idleTimeout"`
	// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
	MxclusterIds pulumi.StringArrayInput `pulumi:"mxclusterIds"`
	// default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
	ProxyHosts pulumi.StringArrayInput `pulumi:"proxyHosts"`
	// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// List of Radsec Servers. Only if not Mist Edge.
	Servers WlanRadsecServerArrayInput `pulumi:"servers"`
	// use mxedge(s) as radsecproxy
	UseMxedge pulumi.BoolPtrInput `pulumi:"useMxedge"`
	// To use Site mxedges when this WLAN does not use mxtunnel
	UseSiteMxedge pulumi.BoolPtrInput `pulumi:"useSiteMxedge"`
}

func (WlanRadsecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsec)(nil)).Elem()
}

func (i WlanRadsecArgs) ToWlanRadsecOutput() WlanRadsecOutput {
	return i.ToWlanRadsecOutputWithContext(context.Background())
}

func (i WlanRadsecArgs) ToWlanRadsecOutputWithContext(ctx context.Context) WlanRadsecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecOutput)
}

func (i WlanRadsecArgs) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return i.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (i WlanRadsecArgs) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecOutput).ToWlanRadsecPtrOutputWithContext(ctx)
}

// WlanRadsecPtrInput is an input type that accepts WlanRadsecArgs, WlanRadsecPtr and WlanRadsecPtrOutput values.
// You can construct a concrete instance of `WlanRadsecPtrInput` via:
//
//	        WlanRadsecArgs{...}
//
//	or:
//
//	        nil
type WlanRadsecPtrInput interface {
	pulumi.Input

	ToWlanRadsecPtrOutput() WlanRadsecPtrOutput
	ToWlanRadsecPtrOutputWithContext(context.Context) WlanRadsecPtrOutput
}

type wlanRadsecPtrType WlanRadsecArgs

func WlanRadsecPtr(v *WlanRadsecArgs) WlanRadsecPtrInput {
	return (*wlanRadsecPtrType)(v)
}

func (*wlanRadsecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanRadsec)(nil)).Elem()
}

func (i *wlanRadsecPtrType) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return i.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (i *wlanRadsecPtrType) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecPtrOutput)
}

type WlanRadsecOutput struct{ *pulumi.OutputState }

func (WlanRadsecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsec)(nil)).Elem()
}

func (o WlanRadsecOutput) ToWlanRadsecOutput() WlanRadsecOutput {
	return o
}

func (o WlanRadsecOutput) ToWlanRadsecOutputWithContext(ctx context.Context) WlanRadsecOutput {
	return o
}

func (o WlanRadsecOutput) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return o.ToWlanRadsecPtrOutputWithContext(context.Background())
}

func (o WlanRadsecOutput) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanRadsec) *WlanRadsec {
		return &v
	}).(WlanRadsecPtrOutput)
}

func (o WlanRadsecOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.CoaEnabled }).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *int { return v.IdleTimeout }).(pulumi.IntPtrOutput)
}

// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
func (o WlanRadsecOutput) MxclusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []string { return v.MxclusterIds }).(pulumi.StringArrayOutput)
}

// default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
func (o WlanRadsecOutput) ProxyHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []string { return v.ProxyHosts }).(pulumi.StringArrayOutput)
}

// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
func (o WlanRadsecOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// List of Radsec Servers. Only if not Mist Edge.
func (o WlanRadsecOutput) Servers() WlanRadsecServerArrayOutput {
	return o.ApplyT(func(v WlanRadsec) []WlanRadsecServer { return v.Servers }).(WlanRadsecServerArrayOutput)
}

// use mxedge(s) as radsecproxy
func (o WlanRadsecOutput) UseMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.UseMxedge }).(pulumi.BoolPtrOutput)
}

// To use Site mxedges when this WLAN does not use mxtunnel
func (o WlanRadsecOutput) UseSiteMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanRadsec) *bool { return v.UseSiteMxedge }).(pulumi.BoolPtrOutput)
}

type WlanRadsecPtrOutput struct{ *pulumi.OutputState }

func (WlanRadsecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanRadsec)(nil)).Elem()
}

func (o WlanRadsecPtrOutput) ToWlanRadsecPtrOutput() WlanRadsecPtrOutput {
	return o
}

func (o WlanRadsecPtrOutput) ToWlanRadsecPtrOutputWithContext(ctx context.Context) WlanRadsecPtrOutput {
	return o
}

func (o WlanRadsecPtrOutput) Elem() WlanRadsecOutput {
	return o.ApplyT(func(v *WlanRadsec) WlanRadsec {
		if v != nil {
			return *v
		}
		var ret WlanRadsec
		return ret
	}).(WlanRadsecOutput)
}

func (o WlanRadsecPtrOutput) CoaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.CoaEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o WlanRadsecPtrOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.IntPtrOutput)
}

// To use Org mxedges when this WLAN does not use mxtunnel, specify their mxcluster_ids. Org mxedge(s) identified by mxcluster_ids
func (o WlanRadsecPtrOutput) MxclusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []string {
		if v == nil {
			return nil
		}
		return v.MxclusterIds
	}).(pulumi.StringArrayOutput)
}

// default is site.mxedge.radsec.proxy_hosts which must be a superset of all `wlans[*].radsec.proxy_hosts`. When `radsec.proxy_hosts` are not used, tunnel peers (org or site mxedges) are used irrespective of `useSiteMxedge`
func (o WlanRadsecPtrOutput) ProxyHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []string {
		if v == nil {
			return nil
		}
		return v.ProxyHosts
	}).(pulumi.StringArrayOutput)
}

// name of the server to verify (against the cacerts in Org Setting). Only if not Mist Edge.
func (o WlanRadsecPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// List of Radsec Servers. Only if not Mist Edge.
func (o WlanRadsecPtrOutput) Servers() WlanRadsecServerArrayOutput {
	return o.ApplyT(func(v *WlanRadsec) []WlanRadsecServer {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(WlanRadsecServerArrayOutput)
}

// use mxedge(s) as radsecproxy
func (o WlanRadsecPtrOutput) UseMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.UseMxedge
	}).(pulumi.BoolPtrOutput)
}

// To use Site mxedges when this WLAN does not use mxtunnel
func (o WlanRadsecPtrOutput) UseSiteMxedge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanRadsec) *bool {
		if v == nil {
			return nil
		}
		return v.UseSiteMxedge
	}).(pulumi.BoolPtrOutput)
}

type WlanRadsecServer struct {
	Host *string `pulumi:"host"`
	Port *int    `pulumi:"port"`
}

// WlanRadsecServerInput is an input type that accepts WlanRadsecServerArgs and WlanRadsecServerOutput values.
// You can construct a concrete instance of `WlanRadsecServerInput` via:
//
//	WlanRadsecServerArgs{...}
type WlanRadsecServerInput interface {
	pulumi.Input

	ToWlanRadsecServerOutput() WlanRadsecServerOutput
	ToWlanRadsecServerOutputWithContext(context.Context) WlanRadsecServerOutput
}

type WlanRadsecServerArgs struct {
	Host pulumi.StringPtrInput `pulumi:"host"`
	Port pulumi.IntPtrInput    `pulumi:"port"`
}

func (WlanRadsecServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsecServer)(nil)).Elem()
}

func (i WlanRadsecServerArgs) ToWlanRadsecServerOutput() WlanRadsecServerOutput {
	return i.ToWlanRadsecServerOutputWithContext(context.Background())
}

func (i WlanRadsecServerArgs) ToWlanRadsecServerOutputWithContext(ctx context.Context) WlanRadsecServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecServerOutput)
}

// WlanRadsecServerArrayInput is an input type that accepts WlanRadsecServerArray and WlanRadsecServerArrayOutput values.
// You can construct a concrete instance of `WlanRadsecServerArrayInput` via:
//
//	WlanRadsecServerArray{ WlanRadsecServerArgs{...} }
type WlanRadsecServerArrayInput interface {
	pulumi.Input

	ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput
	ToWlanRadsecServerArrayOutputWithContext(context.Context) WlanRadsecServerArrayOutput
}

type WlanRadsecServerArray []WlanRadsecServerInput

func (WlanRadsecServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanRadsecServer)(nil)).Elem()
}

func (i WlanRadsecServerArray) ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput {
	return i.ToWlanRadsecServerArrayOutputWithContext(context.Background())
}

func (i WlanRadsecServerArray) ToWlanRadsecServerArrayOutputWithContext(ctx context.Context) WlanRadsecServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRadsecServerArrayOutput)
}

type WlanRadsecServerOutput struct{ *pulumi.OutputState }

func (WlanRadsecServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRadsecServer)(nil)).Elem()
}

func (o WlanRadsecServerOutput) ToWlanRadsecServerOutput() WlanRadsecServerOutput {
	return o
}

func (o WlanRadsecServerOutput) ToWlanRadsecServerOutputWithContext(ctx context.Context) WlanRadsecServerOutput {
	return o
}

func (o WlanRadsecServerOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRadsecServer) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o WlanRadsecServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanRadsecServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type WlanRadsecServerArrayOutput struct{ *pulumi.OutputState }

func (WlanRadsecServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WlanRadsecServer)(nil)).Elem()
}

func (o WlanRadsecServerArrayOutput) ToWlanRadsecServerArrayOutput() WlanRadsecServerArrayOutput {
	return o
}

func (o WlanRadsecServerArrayOutput) ToWlanRadsecServerArrayOutputWithContext(ctx context.Context) WlanRadsecServerArrayOutput {
	return o
}

func (o WlanRadsecServerArrayOutput) Index(i pulumi.IntInput) WlanRadsecServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WlanRadsecServer {
		return vs[0].([]WlanRadsecServer)[vs[1].(int)]
	}).(WlanRadsecServerOutput)
}

type WlanRateset struct {
	// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
	Ht *string `pulumi:"ht"`
	// if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`
	Legacies []string `pulumi:"legacies"`
	// Minimum RSSI for client to connect, 0 means not enforcing
	MinRssi *int `pulumi:"minRssi"`
	// Data Rates template to apply. enum:
	//   * `no-legacy`: no 11b
	//   * `compatible`: all, like before, default setting that Broadcom/Atheros used
	//   * `legacy-only`: disable 802.11n and 802.11ac
	//   * `high-density`: no 11b, no low rates
	//   * `custom`: user defined
	Template *string `pulumi:"template"`
	// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
	Vht *string `pulumi:"vht"`
}

// WlanRatesetInput is an input type that accepts WlanRatesetArgs and WlanRatesetOutput values.
// You can construct a concrete instance of `WlanRatesetInput` via:
//
//	WlanRatesetArgs{...}
type WlanRatesetInput interface {
	pulumi.Input

	ToWlanRatesetOutput() WlanRatesetOutput
	ToWlanRatesetOutputWithContext(context.Context) WlanRatesetOutput
}

type WlanRatesetArgs struct {
	// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
	Ht pulumi.StringPtrInput `pulumi:"ht"`
	// if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`
	Legacies pulumi.StringArrayInput `pulumi:"legacies"`
	// Minimum RSSI for client to connect, 0 means not enforcing
	MinRssi pulumi.IntPtrInput `pulumi:"minRssi"`
	// Data Rates template to apply. enum:
	//   * `no-legacy`: no 11b
	//   * `compatible`: all, like before, default setting that Broadcom/Atheros used
	//   * `legacy-only`: disable 802.11n and 802.11ac
	//   * `high-density`: no 11b, no low rates
	//   * `custom`: user defined
	Template pulumi.StringPtrInput `pulumi:"template"`
	// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
	Vht pulumi.StringPtrInput `pulumi:"vht"`
}

func (WlanRatesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRateset)(nil)).Elem()
}

func (i WlanRatesetArgs) ToWlanRatesetOutput() WlanRatesetOutput {
	return i.ToWlanRatesetOutputWithContext(context.Background())
}

func (i WlanRatesetArgs) ToWlanRatesetOutputWithContext(ctx context.Context) WlanRatesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRatesetOutput)
}

// WlanRatesetMapInput is an input type that accepts WlanRatesetMap and WlanRatesetMapOutput values.
// You can construct a concrete instance of `WlanRatesetMapInput` via:
//
//	WlanRatesetMap{ "key": WlanRatesetArgs{...} }
type WlanRatesetMapInput interface {
	pulumi.Input

	ToWlanRatesetMapOutput() WlanRatesetMapOutput
	ToWlanRatesetMapOutputWithContext(context.Context) WlanRatesetMapOutput
}

type WlanRatesetMap map[string]WlanRatesetInput

func (WlanRatesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanRateset)(nil)).Elem()
}

func (i WlanRatesetMap) ToWlanRatesetMapOutput() WlanRatesetMapOutput {
	return i.ToWlanRatesetMapOutputWithContext(context.Background())
}

func (i WlanRatesetMap) ToWlanRatesetMapOutputWithContext(ctx context.Context) WlanRatesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanRatesetMapOutput)
}

type WlanRatesetOutput struct{ *pulumi.OutputState }

func (WlanRatesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanRateset)(nil)).Elem()
}

func (o WlanRatesetOutput) ToWlanRatesetOutput() WlanRatesetOutput {
	return o
}

func (o WlanRatesetOutput) ToWlanRatesetOutputWithContext(ctx context.Context) WlanRatesetOutput {
	return o
}

// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 00ff 00f0 001f limits HT rates to MCS 0-7 for 1 stream, MCS 4-7 for 2 stream (i.e. MCS 12-15), MCS 1-5 for 3 stream (i.e. MCS 16-20)
func (o WlanRatesetOutput) Ht() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRateset) *string { return v.Ht }).(pulumi.StringPtrOutput)
}

// if `template`==`custom`. List of supported rates (IE=1) and extended supported rates (IE=50) for custom template, append ‘b’ at the end to indicate a rate being basic/mandatory. If `template`==`custom` is configured and legacy does not define at least one basic rate, it will use `no-legacy` default values. enum: `1`, `11`, `11b`, `12`, `12b`, `18`, `18b`, `1b`, `2`, `24`, `24b`, `2b`, `36`, `36b`, `48`, `48b`, `5.5`, `5.5b`, `54`, `54b`, `6`, `6b`, `9`, `9b`
func (o WlanRatesetOutput) Legacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WlanRateset) []string { return v.Legacies }).(pulumi.StringArrayOutput)
}

// Minimum RSSI for client to connect, 0 means not enforcing
func (o WlanRatesetOutput) MinRssi() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WlanRateset) *int { return v.MinRssi }).(pulumi.IntPtrOutput)
}

// Data Rates template to apply. enum:
//   - `no-legacy`: no 11b
//   - `compatible`: all, like before, default setting that Broadcom/Atheros used
//   - `legacy-only`: disable 802.11n and 802.11ac
//   - `high-density`: no 11b, no low rates
//   - `custom`: user defined
func (o WlanRatesetOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRateset) *string { return v.Template }).(pulumi.StringPtrOutput)
}

// if `template`==`custom`. MCS bitmasks for 4 streams (16-bit for each stream, MCS0 is least significant bit), e.g. 03ff 01ff 00ff limits VHT rates to MCS 0-9 for 1 stream, MCS 0-8 for 2 streams, and MCS 0-7 for 3 streams.
func (o WlanRatesetOutput) Vht() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanRateset) *string { return v.Vht }).(pulumi.StringPtrOutput)
}

type WlanRatesetMapOutput struct{ *pulumi.OutputState }

func (WlanRatesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]WlanRateset)(nil)).Elem()
}

func (o WlanRatesetMapOutput) ToWlanRatesetMapOutput() WlanRatesetMapOutput {
	return o
}

func (o WlanRatesetMapOutput) ToWlanRatesetMapOutputWithContext(ctx context.Context) WlanRatesetMapOutput {
	return o
}

func (o WlanRatesetMapOutput) MapIndex(k pulumi.StringInput) WlanRatesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) WlanRateset {
		return vs[0].(map[string]WlanRateset)[vs[1].(string)]
	}).(WlanRatesetOutput)
}

type WlanSchedule struct {
	Enabled *bool `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours *WlanScheduleHours `pulumi:"hours"`
}

// WlanScheduleInput is an input type that accepts WlanScheduleArgs and WlanScheduleOutput values.
// You can construct a concrete instance of `WlanScheduleInput` via:
//
//	WlanScheduleArgs{...}
type WlanScheduleInput interface {
	pulumi.Input

	ToWlanScheduleOutput() WlanScheduleOutput
	ToWlanScheduleOutputWithContext(context.Context) WlanScheduleOutput
}

type WlanScheduleArgs struct {
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
	//
	// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
	Hours WlanScheduleHoursPtrInput `pulumi:"hours"`
}

func (WlanScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanSchedule)(nil)).Elem()
}

func (i WlanScheduleArgs) ToWlanScheduleOutput() WlanScheduleOutput {
	return i.ToWlanScheduleOutputWithContext(context.Background())
}

func (i WlanScheduleArgs) ToWlanScheduleOutputWithContext(ctx context.Context) WlanScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleOutput)
}

func (i WlanScheduleArgs) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return i.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (i WlanScheduleArgs) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleOutput).ToWlanSchedulePtrOutputWithContext(ctx)
}

// WlanSchedulePtrInput is an input type that accepts WlanScheduleArgs, WlanSchedulePtr and WlanSchedulePtrOutput values.
// You can construct a concrete instance of `WlanSchedulePtrInput` via:
//
//	        WlanScheduleArgs{...}
//
//	or:
//
//	        nil
type WlanSchedulePtrInput interface {
	pulumi.Input

	ToWlanSchedulePtrOutput() WlanSchedulePtrOutput
	ToWlanSchedulePtrOutputWithContext(context.Context) WlanSchedulePtrOutput
}

type wlanSchedulePtrType WlanScheduleArgs

func WlanSchedulePtr(v *WlanScheduleArgs) WlanSchedulePtrInput {
	return (*wlanSchedulePtrType)(v)
}

func (*wlanSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanSchedule)(nil)).Elem()
}

func (i *wlanSchedulePtrType) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return i.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (i *wlanSchedulePtrType) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanSchedulePtrOutput)
}

type WlanScheduleOutput struct{ *pulumi.OutputState }

func (WlanScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanSchedule)(nil)).Elem()
}

func (o WlanScheduleOutput) ToWlanScheduleOutput() WlanScheduleOutput {
	return o
}

func (o WlanScheduleOutput) ToWlanScheduleOutputWithContext(ctx context.Context) WlanScheduleOutput {
	return o
}

func (o WlanScheduleOutput) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return o.ToWlanSchedulePtrOutputWithContext(context.Background())
}

func (o WlanScheduleOutput) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanSchedule) *WlanSchedule {
		return &v
	}).(WlanSchedulePtrOutput)
}

func (o WlanScheduleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WlanSchedule) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o WlanScheduleOutput) Hours() WlanScheduleHoursPtrOutput {
	return o.ApplyT(func(v WlanSchedule) *WlanScheduleHours { return v.Hours }).(WlanScheduleHoursPtrOutput)
}

type WlanSchedulePtrOutput struct{ *pulumi.OutputState }

func (WlanSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanSchedule)(nil)).Elem()
}

func (o WlanSchedulePtrOutput) ToWlanSchedulePtrOutput() WlanSchedulePtrOutput {
	return o
}

func (o WlanSchedulePtrOutput) ToWlanSchedulePtrOutputWithContext(ctx context.Context) WlanSchedulePtrOutput {
	return o
}

func (o WlanSchedulePtrOutput) Elem() WlanScheduleOutput {
	return o.ApplyT(func(v *WlanSchedule) WlanSchedule {
		if v != nil {
			return *v
		}
		var ret WlanSchedule
		return ret
	}).(WlanScheduleOutput)
}

func (o WlanSchedulePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WlanSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// hours of operation filter, the available days (mon, tue, wed, thu, fri, sat, sun).
//
// **Note**: If the dow is not defined then it\u2019\ s treated as 00:00-23:59.
func (o WlanSchedulePtrOutput) Hours() WlanScheduleHoursPtrOutput {
	return o.ApplyT(func(v *WlanSchedule) *WlanScheduleHours {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(WlanScheduleHoursPtrOutput)
}

type WlanScheduleHours struct {
	Fri *string `pulumi:"fri"`
	Mon *string `pulumi:"mon"`
	Sat *string `pulumi:"sat"`
	Sun *string `pulumi:"sun"`
	Thu *string `pulumi:"thu"`
	Tue *string `pulumi:"tue"`
	Wed *string `pulumi:"wed"`
}

// WlanScheduleHoursInput is an input type that accepts WlanScheduleHoursArgs and WlanScheduleHoursOutput values.
// You can construct a concrete instance of `WlanScheduleHoursInput` via:
//
//	WlanScheduleHoursArgs{...}
type WlanScheduleHoursInput interface {
	pulumi.Input

	ToWlanScheduleHoursOutput() WlanScheduleHoursOutput
	ToWlanScheduleHoursOutputWithContext(context.Context) WlanScheduleHoursOutput
}

type WlanScheduleHoursArgs struct {
	Fri pulumi.StringPtrInput `pulumi:"fri"`
	Mon pulumi.StringPtrInput `pulumi:"mon"`
	Sat pulumi.StringPtrInput `pulumi:"sat"`
	Sun pulumi.StringPtrInput `pulumi:"sun"`
	Thu pulumi.StringPtrInput `pulumi:"thu"`
	Tue pulumi.StringPtrInput `pulumi:"tue"`
	Wed pulumi.StringPtrInput `pulumi:"wed"`
}

func (WlanScheduleHoursArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanScheduleHours)(nil)).Elem()
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursOutput() WlanScheduleHoursOutput {
	return i.ToWlanScheduleHoursOutputWithContext(context.Background())
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursOutputWithContext(ctx context.Context) WlanScheduleHoursOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursOutput)
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return i.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (i WlanScheduleHoursArgs) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursOutput).ToWlanScheduleHoursPtrOutputWithContext(ctx)
}

// WlanScheduleHoursPtrInput is an input type that accepts WlanScheduleHoursArgs, WlanScheduleHoursPtr and WlanScheduleHoursPtrOutput values.
// You can construct a concrete instance of `WlanScheduleHoursPtrInput` via:
//
//	        WlanScheduleHoursArgs{...}
//
//	or:
//
//	        nil
type WlanScheduleHoursPtrInput interface {
	pulumi.Input

	ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput
	ToWlanScheduleHoursPtrOutputWithContext(context.Context) WlanScheduleHoursPtrOutput
}

type wlanScheduleHoursPtrType WlanScheduleHoursArgs

func WlanScheduleHoursPtr(v *WlanScheduleHoursArgs) WlanScheduleHoursPtrInput {
	return (*wlanScheduleHoursPtrType)(v)
}

func (*wlanScheduleHoursPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanScheduleHours)(nil)).Elem()
}

func (i *wlanScheduleHoursPtrType) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return i.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (i *wlanScheduleHoursPtrType) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WlanScheduleHoursPtrOutput)
}

type WlanScheduleHoursOutput struct{ *pulumi.OutputState }

func (WlanScheduleHoursOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WlanScheduleHours)(nil)).Elem()
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursOutput() WlanScheduleHoursOutput {
	return o
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursOutputWithContext(ctx context.Context) WlanScheduleHoursOutput {
	return o
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return o.ToWlanScheduleHoursPtrOutputWithContext(context.Background())
}

func (o WlanScheduleHoursOutput) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WlanScheduleHours) *WlanScheduleHours {
		return &v
	}).(WlanScheduleHoursPtrOutput)
}

func (o WlanScheduleHoursOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Fri }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Mon }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Sat }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Sun }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Thu }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Tue }).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WlanScheduleHours) *string { return v.Wed }).(pulumi.StringPtrOutput)
}

type WlanScheduleHoursPtrOutput struct{ *pulumi.OutputState }

func (WlanScheduleHoursPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WlanScheduleHours)(nil)).Elem()
}

func (o WlanScheduleHoursPtrOutput) ToWlanScheduleHoursPtrOutput() WlanScheduleHoursPtrOutput {
	return o
}

func (o WlanScheduleHoursPtrOutput) ToWlanScheduleHoursPtrOutputWithContext(ctx context.Context) WlanScheduleHoursPtrOutput {
	return o
}

func (o WlanScheduleHoursPtrOutput) Elem() WlanScheduleHoursOutput {
	return o.ApplyT(func(v *WlanScheduleHours) WlanScheduleHours {
		if v != nil {
			return *v
		}
		var ret WlanScheduleHours
		return ret
	}).(WlanScheduleHoursOutput)
}

func (o WlanScheduleHoursPtrOutput) Fri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Fri
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Mon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Mon
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Sat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Sat
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Sun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Sun
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Thu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Thu
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Tue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Tue
	}).(pulumi.StringPtrOutput)
}

func (o WlanScheduleHoursPtrOutput) Wed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WlanScheduleHours) *string {
		if v == nil {
			return nil
		}
		return v.Wed
	}).(pulumi.StringPtrOutput)
}

type WxtagSpec struct {
	// matched destination port, "0" means any
	PortRange *string `pulumi:"portRange"`
	// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
	Protocol *string `pulumi:"protocol"`
	// matched destination subnets and/or IP Addresses
	Subnets []string `pulumi:"subnets"`
}

// WxtagSpecInput is an input type that accepts WxtagSpecArgs and WxtagSpecOutput values.
// You can construct a concrete instance of `WxtagSpecInput` via:
//
//	WxtagSpecArgs{...}
type WxtagSpecInput interface {
	pulumi.Input

	ToWxtagSpecOutput() WxtagSpecOutput
	ToWxtagSpecOutputWithContext(context.Context) WxtagSpecOutput
}

type WxtagSpecArgs struct {
	// matched destination port, "0" means any
	PortRange pulumi.StringPtrInput `pulumi:"portRange"`
	// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// matched destination subnets and/or IP Addresses
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
}

func (WxtagSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WxtagSpec)(nil)).Elem()
}

func (i WxtagSpecArgs) ToWxtagSpecOutput() WxtagSpecOutput {
	return i.ToWxtagSpecOutputWithContext(context.Background())
}

func (i WxtagSpecArgs) ToWxtagSpecOutputWithContext(ctx context.Context) WxtagSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WxtagSpecOutput)
}

// WxtagSpecArrayInput is an input type that accepts WxtagSpecArray and WxtagSpecArrayOutput values.
// You can construct a concrete instance of `WxtagSpecArrayInput` via:
//
//	WxtagSpecArray{ WxtagSpecArgs{...} }
type WxtagSpecArrayInput interface {
	pulumi.Input

	ToWxtagSpecArrayOutput() WxtagSpecArrayOutput
	ToWxtagSpecArrayOutputWithContext(context.Context) WxtagSpecArrayOutput
}

type WxtagSpecArray []WxtagSpecInput

func (WxtagSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WxtagSpec)(nil)).Elem()
}

func (i WxtagSpecArray) ToWxtagSpecArrayOutput() WxtagSpecArrayOutput {
	return i.ToWxtagSpecArrayOutputWithContext(context.Background())
}

func (i WxtagSpecArray) ToWxtagSpecArrayOutputWithContext(ctx context.Context) WxtagSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WxtagSpecArrayOutput)
}

type WxtagSpecOutput struct{ *pulumi.OutputState }

func (WxtagSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WxtagSpec)(nil)).Elem()
}

func (o WxtagSpecOutput) ToWxtagSpecOutput() WxtagSpecOutput {
	return o
}

func (o WxtagSpecOutput) ToWxtagSpecOutputWithContext(ctx context.Context) WxtagSpecOutput {
	return o
}

// matched destination port, "0" means any
func (o WxtagSpecOutput) PortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WxtagSpec) *string { return v.PortRange }).(pulumi.StringPtrOutput)
}

// tcp / udp / icmp / gre / any / ":protocol_number", `protocolNumber` is between 1-254
func (o WxtagSpecOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WxtagSpec) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// matched destination subnets and/or IP Addresses
func (o WxtagSpecOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WxtagSpec) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

type WxtagSpecArrayOutput struct{ *pulumi.OutputState }

func (WxtagSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WxtagSpec)(nil)).Elem()
}

func (o WxtagSpecArrayOutput) ToWxtagSpecArrayOutput() WxtagSpecArrayOutput {
	return o
}

func (o WxtagSpecArrayOutput) ToWxtagSpecArrayOutputWithContext(ctx context.Context) WxtagSpecArrayOutput {
	return o
}

func (o WxtagSpecArrayOutput) Index(i pulumi.IntInput) WxtagSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WxtagSpec {
		return vs[0].([]WxtagSpec)[vs[1].(int)]
	}).(WxtagSpecOutput)
}

type BaseLatlng struct {
	Lat float64 `pulumi:"lat"`
	Lng float64 `pulumi:"lng"`
}

// BaseLatlngInput is an input type that accepts BaseLatlngArgs and BaseLatlngOutput values.
// You can construct a concrete instance of `BaseLatlngInput` via:
//
//	BaseLatlngArgs{...}
type BaseLatlngInput interface {
	pulumi.Input

	ToBaseLatlngOutput() BaseLatlngOutput
	ToBaseLatlngOutputWithContext(context.Context) BaseLatlngOutput
}

type BaseLatlngArgs struct {
	Lat pulumi.Float64Input `pulumi:"lat"`
	Lng pulumi.Float64Input `pulumi:"lng"`
}

func (BaseLatlngArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseLatlng)(nil)).Elem()
}

func (i BaseLatlngArgs) ToBaseLatlngOutput() BaseLatlngOutput {
	return i.ToBaseLatlngOutputWithContext(context.Background())
}

func (i BaseLatlngArgs) ToBaseLatlngOutputWithContext(ctx context.Context) BaseLatlngOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseLatlngOutput)
}

func (i BaseLatlngArgs) ToBaseLatlngPtrOutput() BaseLatlngPtrOutput {
	return i.ToBaseLatlngPtrOutputWithContext(context.Background())
}

func (i BaseLatlngArgs) ToBaseLatlngPtrOutputWithContext(ctx context.Context) BaseLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseLatlngOutput).ToBaseLatlngPtrOutputWithContext(ctx)
}

// BaseLatlngPtrInput is an input type that accepts BaseLatlngArgs, BaseLatlngPtr and BaseLatlngPtrOutput values.
// You can construct a concrete instance of `BaseLatlngPtrInput` via:
//
//	        BaseLatlngArgs{...}
//
//	or:
//
//	        nil
type BaseLatlngPtrInput interface {
	pulumi.Input

	ToBaseLatlngPtrOutput() BaseLatlngPtrOutput
	ToBaseLatlngPtrOutputWithContext(context.Context) BaseLatlngPtrOutput
}

type baseLatlngPtrType BaseLatlngArgs

func BaseLatlngPtr(v *BaseLatlngArgs) BaseLatlngPtrInput {
	return (*baseLatlngPtrType)(v)
}

func (*baseLatlngPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseLatlng)(nil)).Elem()
}

func (i *baseLatlngPtrType) ToBaseLatlngPtrOutput() BaseLatlngPtrOutput {
	return i.ToBaseLatlngPtrOutputWithContext(context.Background())
}

func (i *baseLatlngPtrType) ToBaseLatlngPtrOutputWithContext(ctx context.Context) BaseLatlngPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BaseLatlngPtrOutput)
}

type BaseLatlngOutput struct{ *pulumi.OutputState }

func (BaseLatlngOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BaseLatlng)(nil)).Elem()
}

func (o BaseLatlngOutput) ToBaseLatlngOutput() BaseLatlngOutput {
	return o
}

func (o BaseLatlngOutput) ToBaseLatlngOutputWithContext(ctx context.Context) BaseLatlngOutput {
	return o
}

func (o BaseLatlngOutput) ToBaseLatlngPtrOutput() BaseLatlngPtrOutput {
	return o.ToBaseLatlngPtrOutputWithContext(context.Background())
}

func (o BaseLatlngOutput) ToBaseLatlngPtrOutputWithContext(ctx context.Context) BaseLatlngPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BaseLatlng) *BaseLatlng {
		return &v
	}).(BaseLatlngPtrOutput)
}

func (o BaseLatlngOutput) Lat() pulumi.Float64Output {
	return o.ApplyT(func(v BaseLatlng) float64 { return v.Lat }).(pulumi.Float64Output)
}

func (o BaseLatlngOutput) Lng() pulumi.Float64Output {
	return o.ApplyT(func(v BaseLatlng) float64 { return v.Lng }).(pulumi.Float64Output)
}

type BaseLatlngPtrOutput struct{ *pulumi.OutputState }

func (BaseLatlngPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BaseLatlng)(nil)).Elem()
}

func (o BaseLatlngPtrOutput) ToBaseLatlngPtrOutput() BaseLatlngPtrOutput {
	return o
}

func (o BaseLatlngPtrOutput) ToBaseLatlngPtrOutputWithContext(ctx context.Context) BaseLatlngPtrOutput {
	return o
}

func (o BaseLatlngPtrOutput) Elem() BaseLatlngOutput {
	return o.ApplyT(func(v *BaseLatlng) BaseLatlng {
		if v != nil {
			return *v
		}
		var ret BaseLatlng
		return ret
	}).(BaseLatlngOutput)
}

func (o BaseLatlngPtrOutput) Lat() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BaseLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lat
	}).(pulumi.Float64PtrOutput)
}

func (o BaseLatlngPtrOutput) Lng() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BaseLatlng) *float64 {
		if v == nil {
			return nil
		}
		return &v.Lng
	}).(pulumi.Float64PtrOutput)
}

type GetPsksSitePsk struct {
	// sso id for psk created from psk portal
	AdminSsoId  string  `pulumi:"adminSsoId"`
	CreatedTime float64 `pulumi:"createdTime"`
	// email to send psk expiring notifications to
	Email string `pulumi:"email"`
	// Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
	ExpireTime int `pulumi:"expireTime"`
	// Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
	ExpiryNotificationTime int    `pulumi:"expiryNotificationTime"`
	Id                     string `pulumi:"id"`
	// if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
	Mac          string  `pulumi:"mac"`
	ModifiedTime float64 `pulumi:"modifiedTime"`
	Name         string  `pulumi:"name"`
	Note         string  `pulumi:"note"`
	// If set to true, reminder notification will be sent when psk is about to expire
	NotifyExpiry bool `pulumi:"notifyExpiry"`
	// If set to true, notification will be sent when psk is created or edited
	NotifyOnCreateOrEdit bool `pulumi:"notifyOnCreateOrEdit"`
	// previous passphrase of the PSK if it has been rotated
	OldPassphrase string `pulumi:"oldPassphrase"`
	OrgId         string `pulumi:"orgId"`
	// passphrase of the PSK (8-63 character or 64 in hex)
	Passphrase string `pulumi:"passphrase"`
	Role       string `pulumi:"role"`
	SiteId     string `pulumi:"siteId"`
	// SSID this PSK should be applicable to
	Ssid string `pulumi:"ssid"`
	// enum: `macs`, `multi`, `single`
	Usage  string `pulumi:"usage"`
	VlanId string `pulumi:"vlanId"`
}

// GetPsksSitePskInput is an input type that accepts GetPsksSitePskArgs and GetPsksSitePskOutput values.
// You can construct a concrete instance of `GetPsksSitePskInput` via:
//
//	GetPsksSitePskArgs{...}
type GetPsksSitePskInput interface {
	pulumi.Input

	ToGetPsksSitePskOutput() GetPsksSitePskOutput
	ToGetPsksSitePskOutputWithContext(context.Context) GetPsksSitePskOutput
}

type GetPsksSitePskArgs struct {
	// sso id for psk created from psk portal
	AdminSsoId  pulumi.StringInput  `pulumi:"adminSsoId"`
	CreatedTime pulumi.Float64Input `pulumi:"createdTime"`
	// email to send psk expiring notifications to
	Email pulumi.StringInput `pulumi:"email"`
	// Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
	ExpireTime pulumi.IntInput `pulumi:"expireTime"`
	// Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
	ExpiryNotificationTime pulumi.IntInput    `pulumi:"expiryNotificationTime"`
	Id                     pulumi.StringInput `pulumi:"id"`
	// if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
	Mac          pulumi.StringInput  `pulumi:"mac"`
	ModifiedTime pulumi.Float64Input `pulumi:"modifiedTime"`
	Name         pulumi.StringInput  `pulumi:"name"`
	Note         pulumi.StringInput  `pulumi:"note"`
	// If set to true, reminder notification will be sent when psk is about to expire
	NotifyExpiry pulumi.BoolInput `pulumi:"notifyExpiry"`
	// If set to true, notification will be sent when psk is created or edited
	NotifyOnCreateOrEdit pulumi.BoolInput `pulumi:"notifyOnCreateOrEdit"`
	// previous passphrase of the PSK if it has been rotated
	OldPassphrase pulumi.StringInput `pulumi:"oldPassphrase"`
	OrgId         pulumi.StringInput `pulumi:"orgId"`
	// passphrase of the PSK (8-63 character or 64 in hex)
	Passphrase pulumi.StringInput `pulumi:"passphrase"`
	Role       pulumi.StringInput `pulumi:"role"`
	SiteId     pulumi.StringInput `pulumi:"siteId"`
	// SSID this PSK should be applicable to
	Ssid pulumi.StringInput `pulumi:"ssid"`
	// enum: `macs`, `multi`, `single`
	Usage  pulumi.StringInput `pulumi:"usage"`
	VlanId pulumi.StringInput `pulumi:"vlanId"`
}

func (GetPsksSitePskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPsksSitePsk)(nil)).Elem()
}

func (i GetPsksSitePskArgs) ToGetPsksSitePskOutput() GetPsksSitePskOutput {
	return i.ToGetPsksSitePskOutputWithContext(context.Background())
}

func (i GetPsksSitePskArgs) ToGetPsksSitePskOutputWithContext(ctx context.Context) GetPsksSitePskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPsksSitePskOutput)
}

// GetPsksSitePskArrayInput is an input type that accepts GetPsksSitePskArray and GetPsksSitePskArrayOutput values.
// You can construct a concrete instance of `GetPsksSitePskArrayInput` via:
//
//	GetPsksSitePskArray{ GetPsksSitePskArgs{...} }
type GetPsksSitePskArrayInput interface {
	pulumi.Input

	ToGetPsksSitePskArrayOutput() GetPsksSitePskArrayOutput
	ToGetPsksSitePskArrayOutputWithContext(context.Context) GetPsksSitePskArrayOutput
}

type GetPsksSitePskArray []GetPsksSitePskInput

func (GetPsksSitePskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPsksSitePsk)(nil)).Elem()
}

func (i GetPsksSitePskArray) ToGetPsksSitePskArrayOutput() GetPsksSitePskArrayOutput {
	return i.ToGetPsksSitePskArrayOutputWithContext(context.Background())
}

func (i GetPsksSitePskArray) ToGetPsksSitePskArrayOutputWithContext(ctx context.Context) GetPsksSitePskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPsksSitePskArrayOutput)
}

type GetPsksSitePskOutput struct{ *pulumi.OutputState }

func (GetPsksSitePskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPsksSitePsk)(nil)).Elem()
}

func (o GetPsksSitePskOutput) ToGetPsksSitePskOutput() GetPsksSitePskOutput {
	return o
}

func (o GetPsksSitePskOutput) ToGetPsksSitePskOutputWithContext(ctx context.Context) GetPsksSitePskOutput {
	return o
}

// sso id for psk created from psk portal
func (o GetPsksSitePskOutput) AdminSsoId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.AdminSsoId }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetPsksSitePsk) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

// email to send psk expiring notifications to
func (o GetPsksSitePskOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Email }).(pulumi.StringOutput)
}

// Expire time for this PSK key (epoch time in seconds). Default `null` (as no expiration)
func (o GetPsksSitePskOutput) ExpireTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetPsksSitePsk) int { return v.ExpireTime }).(pulumi.IntOutput)
}

// Number of days before psk is expired. Used as to when to start sending reminder notification when the psk is about to expire
func (o GetPsksSitePskOutput) ExpiryNotificationTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetPsksSitePsk) int { return v.ExpiryNotificationTime }).(pulumi.IntOutput)
}

func (o GetPsksSitePskOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Id }).(pulumi.StringOutput)
}

// if `usage`==`single`, the mac that this PSK ties to, empty if `auto-binding`
func (o GetPsksSitePskOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Mac }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetPsksSitePsk) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

func (o GetPsksSitePskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) Note() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Note }).(pulumi.StringOutput)
}

// If set to true, reminder notification will be sent when psk is about to expire
func (o GetPsksSitePskOutput) NotifyExpiry() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPsksSitePsk) bool { return v.NotifyExpiry }).(pulumi.BoolOutput)
}

// If set to true, notification will be sent when psk is created or edited
func (o GetPsksSitePskOutput) NotifyOnCreateOrEdit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPsksSitePsk) bool { return v.NotifyOnCreateOrEdit }).(pulumi.BoolOutput)
}

// previous passphrase of the PSK if it has been rotated
func (o GetPsksSitePskOutput) OldPassphrase() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.OldPassphrase }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.OrgId }).(pulumi.StringOutput)
}

// passphrase of the PSK (8-63 character or 64 in hex)
func (o GetPsksSitePskOutput) Passphrase() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Passphrase }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.SiteId }).(pulumi.StringOutput)
}

// SSID this PSK should be applicable to
func (o GetPsksSitePskOutput) Ssid() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Ssid }).(pulumi.StringOutput)
}

// enum: `macs`, `multi`, `single`
func (o GetPsksSitePskOutput) Usage() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.Usage }).(pulumi.StringOutput)
}

func (o GetPsksSitePskOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPsksSitePsk) string { return v.VlanId }).(pulumi.StringOutput)
}

type GetPsksSitePskArrayOutput struct{ *pulumi.OutputState }

func (GetPsksSitePskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPsksSitePsk)(nil)).Elem()
}

func (o GetPsksSitePskArrayOutput) ToGetPsksSitePskArrayOutput() GetPsksSitePskArrayOutput {
	return o
}

func (o GetPsksSitePskArrayOutput) ToGetPsksSitePskArrayOutputWithContext(ctx context.Context) GetPsksSitePskArrayOutput {
	return o
}

func (o GetPsksSitePskArrayOutput) Index(i pulumi.IntInput) GetPsksSitePskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPsksSitePsk {
		return vs[0].([]GetPsksSitePsk)[vs[1].(int)]
	}).(GetPsksSitePskOutput)
}

type GetWebhooksSiteWebhook struct {
	CreatedTime float64 `pulumi:"createdTime"`
	// whether webhook is enabled
	Enabled bool `pulumi:"enabled"`
	// if `type`=`http-post`, additional custom HTTP headers to add
	// the headers name and value must be string, total bytes of headers name and value must be less than 1000
	Headers      map[string]string `pulumi:"headers"`
	Id           string            `pulumi:"id"`
	ModifiedTime float64           `pulumi:"modifiedTime"`
	// name of the webhook
	Name string `pulumi:"name"`
	// required when `oauth2GrantType`==`clientCredentials`
	Oauth2ClientId string `pulumi:"oauth2ClientId"`
	// required when `oauth2GrantType`==`clientCredentials`
	Oauth2ClientSecret string `pulumi:"oauth2ClientSecret"`
	// required when `type`==`oauth2`. enum: `clientCredentials`, `password`
	Oauth2GrantType string `pulumi:"oauth2GrantType"`
	// required when `oauth2GrantType`==`password`
	Oauth2Password string `pulumi:"oauth2Password"`
	// required when `type`==`oauth2`, if provided, will be used in the token request
	Oauth2Scopes []string `pulumi:"oauth2Scopes"`
	// required when `type`==`oauth2`
	Oauth2TokenUrl string `pulumi:"oauth2TokenUrl"`
	// required when `oauth2GrantType`==`password`
	Oauth2Username string `pulumi:"oauth2Username"`
	OrgId          string `pulumi:"orgId"`
	// only if `type`=`http-post`
	Secret string `pulumi:"secret"`
	SiteId string `pulumi:"siteId"`
	// required if `type`=`splunk`
	// If splunkToken is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'
	SplunkToken string `pulumi:"splunkToken"`
	// N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.
	Topics []string `pulumi:"topics"`
	// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
	Type string `pulumi:"type"`
	Url  string `pulumi:"url"`
	// when url uses HTTPS, whether to verify the certificate
	VerifyCert bool `pulumi:"verifyCert"`
}

// GetWebhooksSiteWebhookInput is an input type that accepts GetWebhooksSiteWebhookArgs and GetWebhooksSiteWebhookOutput values.
// You can construct a concrete instance of `GetWebhooksSiteWebhookInput` via:
//
//	GetWebhooksSiteWebhookArgs{...}
type GetWebhooksSiteWebhookInput interface {
	pulumi.Input

	ToGetWebhooksSiteWebhookOutput() GetWebhooksSiteWebhookOutput
	ToGetWebhooksSiteWebhookOutputWithContext(context.Context) GetWebhooksSiteWebhookOutput
}

type GetWebhooksSiteWebhookArgs struct {
	CreatedTime pulumi.Float64Input `pulumi:"createdTime"`
	// whether webhook is enabled
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// if `type`=`http-post`, additional custom HTTP headers to add
	// the headers name and value must be string, total bytes of headers name and value must be less than 1000
	Headers      pulumi.StringMapInput `pulumi:"headers"`
	Id           pulumi.StringInput    `pulumi:"id"`
	ModifiedTime pulumi.Float64Input   `pulumi:"modifiedTime"`
	// name of the webhook
	Name pulumi.StringInput `pulumi:"name"`
	// required when `oauth2GrantType`==`clientCredentials`
	Oauth2ClientId pulumi.StringInput `pulumi:"oauth2ClientId"`
	// required when `oauth2GrantType`==`clientCredentials`
	Oauth2ClientSecret pulumi.StringInput `pulumi:"oauth2ClientSecret"`
	// required when `type`==`oauth2`. enum: `clientCredentials`, `password`
	Oauth2GrantType pulumi.StringInput `pulumi:"oauth2GrantType"`
	// required when `oauth2GrantType`==`password`
	Oauth2Password pulumi.StringInput `pulumi:"oauth2Password"`
	// required when `type`==`oauth2`, if provided, will be used in the token request
	Oauth2Scopes pulumi.StringArrayInput `pulumi:"oauth2Scopes"`
	// required when `type`==`oauth2`
	Oauth2TokenUrl pulumi.StringInput `pulumi:"oauth2TokenUrl"`
	// required when `oauth2GrantType`==`password`
	Oauth2Username pulumi.StringInput `pulumi:"oauth2Username"`
	OrgId          pulumi.StringInput `pulumi:"orgId"`
	// only if `type`=`http-post`
	Secret pulumi.StringInput `pulumi:"secret"`
	SiteId pulumi.StringInput `pulumi:"siteId"`
	// required if `type`=`splunk`
	// If splunkToken is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'
	SplunkToken pulumi.StringInput `pulumi:"splunkToken"`
	// N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
	// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
	Type pulumi.StringInput `pulumi:"type"`
	Url  pulumi.StringInput `pulumi:"url"`
	// when url uses HTTPS, whether to verify the certificate
	VerifyCert pulumi.BoolInput `pulumi:"verifyCert"`
}

func (GetWebhooksSiteWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhooksSiteWebhook)(nil)).Elem()
}

func (i GetWebhooksSiteWebhookArgs) ToGetWebhooksSiteWebhookOutput() GetWebhooksSiteWebhookOutput {
	return i.ToGetWebhooksSiteWebhookOutputWithContext(context.Background())
}

func (i GetWebhooksSiteWebhookArgs) ToGetWebhooksSiteWebhookOutputWithContext(ctx context.Context) GetWebhooksSiteWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhooksSiteWebhookOutput)
}

// GetWebhooksSiteWebhookArrayInput is an input type that accepts GetWebhooksSiteWebhookArray and GetWebhooksSiteWebhookArrayOutput values.
// You can construct a concrete instance of `GetWebhooksSiteWebhookArrayInput` via:
//
//	GetWebhooksSiteWebhookArray{ GetWebhooksSiteWebhookArgs{...} }
type GetWebhooksSiteWebhookArrayInput interface {
	pulumi.Input

	ToGetWebhooksSiteWebhookArrayOutput() GetWebhooksSiteWebhookArrayOutput
	ToGetWebhooksSiteWebhookArrayOutputWithContext(context.Context) GetWebhooksSiteWebhookArrayOutput
}

type GetWebhooksSiteWebhookArray []GetWebhooksSiteWebhookInput

func (GetWebhooksSiteWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhooksSiteWebhook)(nil)).Elem()
}

func (i GetWebhooksSiteWebhookArray) ToGetWebhooksSiteWebhookArrayOutput() GetWebhooksSiteWebhookArrayOutput {
	return i.ToGetWebhooksSiteWebhookArrayOutputWithContext(context.Background())
}

func (i GetWebhooksSiteWebhookArray) ToGetWebhooksSiteWebhookArrayOutputWithContext(ctx context.Context) GetWebhooksSiteWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhooksSiteWebhookArrayOutput)
}

type GetWebhooksSiteWebhookOutput struct{ *pulumi.OutputState }

func (GetWebhooksSiteWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhooksSiteWebhook)(nil)).Elem()
}

func (o GetWebhooksSiteWebhookOutput) ToGetWebhooksSiteWebhookOutput() GetWebhooksSiteWebhookOutput {
	return o
}

func (o GetWebhooksSiteWebhookOutput) ToGetWebhooksSiteWebhookOutputWithContext(ctx context.Context) GetWebhooksSiteWebhookOutput {
	return o
}

func (o GetWebhooksSiteWebhookOutput) CreatedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) float64 { return v.CreatedTime }).(pulumi.Float64Output)
}

// whether webhook is enabled
func (o GetWebhooksSiteWebhookOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// if `type`=`http-post`, additional custom HTTP headers to add
// the headers name and value must be string, total bytes of headers name and value must be less than 1000
func (o GetWebhooksSiteWebhookOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o GetWebhooksSiteWebhookOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWebhooksSiteWebhookOutput) ModifiedTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) float64 { return v.ModifiedTime }).(pulumi.Float64Output)
}

// name of the webhook
func (o GetWebhooksSiteWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Name }).(pulumi.StringOutput)
}

// required when `oauth2GrantType`==`clientCredentials`
func (o GetWebhooksSiteWebhookOutput) Oauth2ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2ClientId }).(pulumi.StringOutput)
}

// required when `oauth2GrantType`==`clientCredentials`
func (o GetWebhooksSiteWebhookOutput) Oauth2ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2ClientSecret }).(pulumi.StringOutput)
}

// required when `type`==`oauth2`. enum: `clientCredentials`, `password`
func (o GetWebhooksSiteWebhookOutput) Oauth2GrantType() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2GrantType }).(pulumi.StringOutput)
}

// required when `oauth2GrantType`==`password`
func (o GetWebhooksSiteWebhookOutput) Oauth2Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2Password }).(pulumi.StringOutput)
}

// required when `type`==`oauth2`, if provided, will be used in the token request
func (o GetWebhooksSiteWebhookOutput) Oauth2Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) []string { return v.Oauth2Scopes }).(pulumi.StringArrayOutput)
}

// required when `type`==`oauth2`
func (o GetWebhooksSiteWebhookOutput) Oauth2TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2TokenUrl }).(pulumi.StringOutput)
}

// required when `oauth2GrantType`==`password`
func (o GetWebhooksSiteWebhookOutput) Oauth2Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Oauth2Username }).(pulumi.StringOutput)
}

func (o GetWebhooksSiteWebhookOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.OrgId }).(pulumi.StringOutput)
}

// only if `type`=`http-post`
func (o GetWebhooksSiteWebhookOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Secret }).(pulumi.StringOutput)
}

func (o GetWebhooksSiteWebhookOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.SiteId }).(pulumi.StringOutput)
}

// required if `type`=`splunk`
// If splunkToken is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.'
func (o GetWebhooksSiteWebhookOutput) SplunkToken() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.SplunkToken }).(pulumi.StringOutput)
}

// N.B. For org webhooks, only device_events/alarms/audits/client-join/client-sessions/nac-sessions/nac_events topics are supported.
func (o GetWebhooksSiteWebhookOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

// enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`
func (o GetWebhooksSiteWebhookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetWebhooksSiteWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) string { return v.Url }).(pulumi.StringOutput)
}

// when url uses HTTPS, whether to verify the certificate
func (o GetWebhooksSiteWebhookOutput) VerifyCert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetWebhooksSiteWebhook) bool { return v.VerifyCert }).(pulumi.BoolOutput)
}

type GetWebhooksSiteWebhookArrayOutput struct{ *pulumi.OutputState }

func (GetWebhooksSiteWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhooksSiteWebhook)(nil)).Elem()
}

func (o GetWebhooksSiteWebhookArrayOutput) ToGetWebhooksSiteWebhookArrayOutput() GetWebhooksSiteWebhookArrayOutput {
	return o
}

func (o GetWebhooksSiteWebhookArrayOutput) ToGetWebhooksSiteWebhookArrayOutputWithContext(ctx context.Context) GetWebhooksSiteWebhookArrayOutput {
	return o
}

func (o GetWebhooksSiteWebhookArrayOutput) Index(i pulumi.IntInput) GetWebhooksSiteWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebhooksSiteWebhook {
		return vs[0].([]GetWebhooksSiteWebhook)[vs[1].(int)]
	}).(GetWebhooksSiteWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsInput)(nil)).Elem(), EvpnTopologyEvpnOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsPtrInput)(nil)).Elem(), EvpnTopologyEvpnOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsOverlayInput)(nil)).Elem(), EvpnTopologyEvpnOptionsOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsOverlayPtrInput)(nil)).Elem(), EvpnTopologyEvpnOptionsOverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsUnderlayInput)(nil)).Elem(), EvpnTopologyEvpnOptionsUnderlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsUnderlayPtrInput)(nil)).Elem(), EvpnTopologyEvpnOptionsUnderlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsVsInstancesInput)(nil)).Elem(), EvpnTopologyEvpnOptionsVsInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologyEvpnOptionsVsInstancesMapInput)(nil)).Elem(), EvpnTopologyEvpnOptionsVsInstancesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologySwitchesInput)(nil)).Elem(), EvpnTopologySwitchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnTopologySwitchesMapInput)(nil)).Elem(), EvpnTopologySwitchesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyInput)(nil)).Elem(), NetworktemplateAclPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyArrayInput)(nil)).Elem(), NetworktemplateAclPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyActionInput)(nil)).Elem(), NetworktemplateAclPolicyActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclPolicyActionArrayInput)(nil)).Elem(), NetworktemplateAclPolicyActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsInput)(nil)).Elem(), NetworktemplateAclTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsMapInput)(nil)).Elem(), NetworktemplateAclTagsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsSpecInput)(nil)).Elem(), NetworktemplateAclTagsSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateAclTagsSpecArrayInput)(nil)).Elem(), NetworktemplateAclTagsSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateDhcpSnoopingInput)(nil)).Elem(), NetworktemplateDhcpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateDhcpSnoopingPtrInput)(nil)).Elem(), NetworktemplateDhcpSnoopingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6Input)(nil)).Elem(), NetworktemplateExtraRoutes6Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6MapInput)(nil)).Elem(), NetworktemplateExtraRoutes6Map{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualifiedInput)(nil)).Elem(), NetworktemplateExtraRoutes6NextQualifiedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutes6NextQualifiedMapInput)(nil)).Elem(), NetworktemplateExtraRoutes6NextQualifiedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesInput)(nil)).Elem(), NetworktemplateExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesMapInput)(nil)).Elem(), NetworktemplateExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesNextQualifiedInput)(nil)).Elem(), NetworktemplateExtraRoutesNextQualifiedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateExtraRoutesNextQualifiedMapInput)(nil)).Elem(), NetworktemplateExtraRoutesNextQualifiedMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateMistNacInput)(nil)).Elem(), NetworktemplateMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateMistNacPtrInput)(nil)).Elem(), NetworktemplateMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateNetworksInput)(nil)).Elem(), NetworktemplateNetworksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateNetworksMapInput)(nil)).Elem(), NetworktemplateNetworksMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateOspfAreasInput)(nil)).Elem(), NetworktemplateOspfAreasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateOspfAreasMapInput)(nil)).Elem(), NetworktemplateOspfAreasMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateOspfAreasOspfNetworksInput)(nil)).Elem(), NetworktemplateOspfAreasOspfNetworksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateOspfAreasOspfNetworksMapInput)(nil)).Elem(), NetworktemplateOspfAreasOspfNetworksMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortMirroringInput)(nil)).Elem(), NetworktemplatePortMirroringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortMirroringMapInput)(nil)).Elem(), NetworktemplatePortMirroringMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesInput)(nil)).Elem(), NetworktemplatePortUsagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesMapInput)(nil)).Elem(), NetworktemplatePortUsagesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesRuleInput)(nil)).Elem(), NetworktemplatePortUsagesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesRuleArrayInput)(nil)).Elem(), NetworktemplatePortUsagesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesStormControlInput)(nil)).Elem(), NetworktemplatePortUsagesStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplatePortUsagesStormControlPtrInput)(nil)).Elem(), NetworktemplatePortUsagesStormControlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigInput)(nil)).Elem(), NetworktemplateRadiusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigPtrInput)(nil)).Elem(), NetworktemplateRadiusConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAcctServerInput)(nil)).Elem(), NetworktemplateRadiusConfigAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAcctServerArrayInput)(nil)).Elem(), NetworktemplateRadiusConfigAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAuthServerInput)(nil)).Elem(), NetworktemplateRadiusConfigAuthServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRadiusConfigAuthServerArrayInput)(nil)).Elem(), NetworktemplateRadiusConfigAuthServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogInput)(nil)).Elem(), NetworktemplateRemoteSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogPtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogArchiveInput)(nil)).Elem(), NetworktemplateRemoteSyslogArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogArchivePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsolePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogConsoleContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogConsoleContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchiveInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileArchivePtrInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileArchiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogFileContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogFileContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogServerContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogServerContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserContentInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateRemoteSyslogUserContentArrayInput)(nil)).Elem(), NetworktemplateRemoteSyslogUserContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigClientListInput)(nil)).Elem(), NetworktemplateSnmpConfigClientListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigClientListArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigClientListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroupInput)(nil)).Elem(), NetworktemplateSnmpConfigTrapGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigTrapGroupArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigTrapGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigV2cConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV2cConfigArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV2cConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContentInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddressInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetAddressArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameterInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigTargetParameterArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigTargetParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUserInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigUsmUserArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigUsmUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigViewInput)(nil)).Elem(), NetworktemplateSnmpConfigViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSnmpConfigViewArrayInput)(nil)).Elem(), NetworktemplateSnmpConfigViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingInput)(nil)).Elem(), NetworktemplateSwitchMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingPtrInput)(nil)).Elem(), NetworktemplateSwitchMatchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleArrayInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleIpConfigInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleIpConfigPtrInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleOobIpConfigInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRuleOobIpConfigPtrInput)(nil)).Elem(), NetworktemplateSwitchMatchingRuleOobIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfigInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortConfigMapInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortConfigMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroringInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortMirroringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMatchingRulePortMirroringMapInput)(nil)).Elem(), NetworktemplateSwitchMatchingRulePortMirroringMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtInput)(nil)).Elem(), NetworktemplateSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtPtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtLocalAccountsInput)(nil)).Elem(), NetworktemplateSwitchMgmtLocalAccountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtLocalAccountsMapInput)(nil)).Elem(), NetworktemplateSwitchMgmtLocalAccountsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectRePtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustomInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtProtectReCustomArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtProtectReCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsPtrInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServerInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsAcctServerArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServerInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsTacplusServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateSwitchMgmtTacacsTacplusServerArrayInput)(nil)).Elem(), NetworktemplateSwitchMgmtTacacsTacplusServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfConfigInput)(nil)).Elem(), NetworktemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfConfigPtrInput)(nil)).Elem(), NetworktemplateVrfConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesInput)(nil)).Elem(), NetworktemplateVrfInstancesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesMapInput)(nil)).Elem(), NetworktemplateVrfInstancesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutesInput)(nil)).Elem(), NetworktemplateVrfInstancesExtraRoutesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworktemplateVrfInstancesExtraRoutesMapInput)(nil)).Elem(), NetworktemplateVrfInstancesExtraRoutesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAnalyticInput)(nil)).Elem(), SettingAnalyticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAnalyticPtrInput)(nil)).Elem(), SettingAnalyticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAutoUpgradeInput)(nil)).Elem(), SettingAutoUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingAutoUpgradePtrInput)(nil)).Elem(), SettingAutoUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingBleConfigInput)(nil)).Elem(), SettingBleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingBleConfigPtrInput)(nil)).Elem(), SettingBleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyInput)(nil)).Elem(), SettingConfigPushPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyPtrInput)(nil)).Elem(), SettingConfigPushPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyPushWindowInput)(nil)).Elem(), SettingConfigPushPolicyPushWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyPushWindowPtrInput)(nil)).Elem(), SettingConfigPushPolicyPushWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyPushWindowHoursInput)(nil)).Elem(), SettingConfigPushPolicyPushWindowHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingConfigPushPolicyPushWindowHoursPtrInput)(nil)).Elem(), SettingConfigPushPolicyPushWindowHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCriticalUrlMonitoringInput)(nil)).Elem(), SettingCriticalUrlMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCriticalUrlMonitoringPtrInput)(nil)).Elem(), SettingCriticalUrlMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCriticalUrlMonitoringMonitorInput)(nil)).Elem(), SettingCriticalUrlMonitoringMonitorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingCriticalUrlMonitoringMonitorArrayInput)(nil)).Elem(), SettingCriticalUrlMonitoringMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementInput)(nil)).Elem(), SettingEngagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementPtrInput)(nil)).Elem(), SettingEngagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementDwellTagNamesInput)(nil)).Elem(), SettingEngagementDwellTagNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementDwellTagNamesPtrInput)(nil)).Elem(), SettingEngagementDwellTagNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementDwellTagsInput)(nil)).Elem(), SettingEngagementDwellTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementDwellTagsPtrInput)(nil)).Elem(), SettingEngagementDwellTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementHoursInput)(nil)).Elem(), SettingEngagementHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingEngagementHoursPtrInput)(nil)).Elem(), SettingEngagementHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtInput)(nil)).Elem(), SettingGatewayMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtPtrInput)(nil)).Elem(), SettingGatewayMgmtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAppProbingInput)(nil)).Elem(), SettingGatewayMgmtAppProbingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAppProbingPtrInput)(nil)).Elem(), SettingGatewayMgmtAppProbingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAppProbingCustomAppInput)(nil)).Elem(), SettingGatewayMgmtAppProbingCustomAppArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAppProbingCustomAppArrayInput)(nil)).Elem(), SettingGatewayMgmtAppProbingCustomAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAutoSignatureUpdateInput)(nil)).Elem(), SettingGatewayMgmtAutoSignatureUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtAutoSignatureUpdatePtrInput)(nil)).Elem(), SettingGatewayMgmtAutoSignatureUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtProtectReInput)(nil)).Elem(), SettingGatewayMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtProtectRePtrInput)(nil)).Elem(), SettingGatewayMgmtProtectReArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtProtectReCustomInput)(nil)).Elem(), SettingGatewayMgmtProtectReCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingGatewayMgmtProtectReCustomArrayInput)(nil)).Elem(), SettingGatewayMgmtProtectReCustomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingLedInput)(nil)).Elem(), SettingLedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingLedPtrInput)(nil)).Elem(), SettingLedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingOccupancyInput)(nil)).Elem(), SettingOccupancyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingOccupancyPtrInput)(nil)).Elem(), SettingOccupancyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingProxyInput)(nil)).Elem(), SettingProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingProxyPtrInput)(nil)).Elem(), SettingProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingRogueInput)(nil)).Elem(), SettingRogueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingRoguePtrInput)(nil)).Elem(), SettingRogueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingRtsaInput)(nil)).Elem(), SettingRtsaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingRtsaPtrInput)(nil)).Elem(), SettingRtsaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertInput)(nil)).Elem(), SettingSimpleAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertPtrInput)(nil)).Elem(), SettingSimpleAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertArpFailureInput)(nil)).Elem(), SettingSimpleAlertArpFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertArpFailurePtrInput)(nil)).Elem(), SettingSimpleAlertArpFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertDhcpFailureInput)(nil)).Elem(), SettingSimpleAlertDhcpFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertDhcpFailurePtrInput)(nil)).Elem(), SettingSimpleAlertDhcpFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertDnsFailureInput)(nil)).Elem(), SettingSimpleAlertDnsFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSimpleAlertDnsFailurePtrInput)(nil)).Elem(), SettingSimpleAlertDnsFailureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSkyatpInput)(nil)).Elem(), SettingSkyatpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSkyatpPtrInput)(nil)).Elem(), SettingSkyatpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSrxAppInput)(nil)).Elem(), SettingSrxAppArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSrxAppPtrInput)(nil)).Elem(), SettingSrxAppArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSsrInput)(nil)).Elem(), SettingSsrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSsrPtrInput)(nil)).Elem(), SettingSsrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestInput)(nil)).Elem(), SettingSyntheticTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestPtrInput)(nil)).Elem(), SettingSyntheticTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestVlanInput)(nil)).Elem(), SettingSyntheticTestVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestVlanArrayInput)(nil)).Elem(), SettingSyntheticTestVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestWanSpeedtestInput)(nil)).Elem(), SettingSyntheticTestWanSpeedtestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingSyntheticTestWanSpeedtestPtrInput)(nil)).Elem(), SettingSyntheticTestWanSpeedtestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUplinkPortConfigInput)(nil)).Elem(), SettingUplinkPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingUplinkPortConfigPtrInput)(nil)).Elem(), SettingUplinkPortConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVnaInput)(nil)).Elem(), SettingVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVnaPtrInput)(nil)).Elem(), SettingVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVsInstanceInput)(nil)).Elem(), SettingVsInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingVsInstanceMapInput)(nil)).Elem(), SettingVsInstanceMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWanVnaInput)(nil)).Elem(), SettingWanVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWanVnaPtrInput)(nil)).Elem(), SettingWanVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWidsInput)(nil)).Elem(), SettingWidsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWidsPtrInput)(nil)).Elem(), SettingWidsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWidsRepeatedAuthFailuresInput)(nil)).Elem(), SettingWidsRepeatedAuthFailuresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWidsRepeatedAuthFailuresPtrInput)(nil)).Elem(), SettingWidsRepeatedAuthFailuresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWifiInput)(nil)).Elem(), SettingWifiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWifiPtrInput)(nil)).Elem(), SettingWifiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWiredVnaInput)(nil)).Elem(), SettingWiredVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingWiredVnaPtrInput)(nil)).Elem(), SettingWiredVnaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingZoneOccupancyAlertInput)(nil)).Elem(), SettingZoneOccupancyAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingZoneOccupancyAlertPtrInput)(nil)).Elem(), SettingZoneOccupancyAlertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAcctServerInput)(nil)).Elem(), WlanAcctServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAcctServerArrayInput)(nil)).Elem(), WlanAcctServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAirwatchInput)(nil)).Elem(), WlanAirwatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAirwatchPtrInput)(nil)).Elem(), WlanAirwatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppLimitInput)(nil)).Elem(), WlanAppLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppLimitPtrInput)(nil)).Elem(), WlanAppLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosInput)(nil)).Elem(), WlanAppQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosPtrInput)(nil)).Elem(), WlanAppQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosAppsInput)(nil)).Elem(), WlanAppQosAppsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosAppsMapInput)(nil)).Elem(), WlanAppQosAppsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosOtherInput)(nil)).Elem(), WlanAppQosOtherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAppQosOtherArrayInput)(nil)).Elem(), WlanAppQosOtherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthInput)(nil)).Elem(), WlanAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthPtrInput)(nil)).Elem(), WlanAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthServerInput)(nil)).Elem(), WlanAuthServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanAuthServerArrayInput)(nil)).Elem(), WlanAuthServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourInput)(nil)).Elem(), WlanBonjourArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourPtrInput)(nil)).Elem(), WlanBonjourArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourServicesInput)(nil)).Elem(), WlanBonjourServicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanBonjourServicesMapInput)(nil)).Elem(), WlanBonjourServicesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCiscoCwaInput)(nil)).Elem(), WlanCiscoCwaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCiscoCwaPtrInput)(nil)).Elem(), WlanCiscoCwaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCoaServerInput)(nil)).Elem(), WlanCoaServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanCoaServerArrayInput)(nil)).Elem(), WlanCoaServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDnsServerRewriteInput)(nil)).Elem(), WlanDnsServerRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDnsServerRewritePtrInput)(nil)).Elem(), WlanDnsServerRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicPskInput)(nil)).Elem(), WlanDynamicPskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicPskPtrInput)(nil)).Elem(), WlanDynamicPskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicVlanInput)(nil)).Elem(), WlanDynamicVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanDynamicVlanPtrInput)(nil)).Elem(), WlanDynamicVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanHotspot20Input)(nil)).Elem(), WlanHotspot20Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanHotspot20PtrInput)(nil)).Elem(), WlanHotspot20Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanInjectDhcpOption82Input)(nil)).Elem(), WlanInjectDhcpOption82Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanInjectDhcpOption82PtrInput)(nil)).Elem(), WlanInjectDhcpOption82Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanMistNacInput)(nil)).Elem(), WlanMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanMistNacPtrInput)(nil)).Elem(), WlanMistNacArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalInput)(nil)).Elem(), WlanPortalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalPtrInput)(nil)).Elem(), WlanPortalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalTemplatePortalTemplateInput)(nil)).Elem(), WlanPortalTemplatePortalTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalTemplatePortalTemplatePtrInput)(nil)).Elem(), WlanPortalTemplatePortalTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalTemplatePortalTemplateLocalesInput)(nil)).Elem(), WlanPortalTemplatePortalTemplateLocalesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanPortalTemplatePortalTemplateLocalesMapInput)(nil)).Elem(), WlanPortalTemplatePortalTemplateLocalesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanQosInput)(nil)).Elem(), WlanQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanQosPtrInput)(nil)).Elem(), WlanQosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecInput)(nil)).Elem(), WlanRadsecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecPtrInput)(nil)).Elem(), WlanRadsecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecServerInput)(nil)).Elem(), WlanRadsecServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRadsecServerArrayInput)(nil)).Elem(), WlanRadsecServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRatesetInput)(nil)).Elem(), WlanRatesetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanRatesetMapInput)(nil)).Elem(), WlanRatesetMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleInput)(nil)).Elem(), WlanScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanSchedulePtrInput)(nil)).Elem(), WlanScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleHoursInput)(nil)).Elem(), WlanScheduleHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WlanScheduleHoursPtrInput)(nil)).Elem(), WlanScheduleHoursArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WxtagSpecInput)(nil)).Elem(), WxtagSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WxtagSpecArrayInput)(nil)).Elem(), WxtagSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseLatlngInput)(nil)).Elem(), BaseLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BaseLatlngPtrInput)(nil)).Elem(), BaseLatlngArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPsksSitePskInput)(nil)).Elem(), GetPsksSitePskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPsksSitePskArrayInput)(nil)).Elem(), GetPsksSitePskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhooksSiteWebhookInput)(nil)).Elem(), GetWebhooksSiteWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhooksSiteWebhookArrayInput)(nil)).Elem(), GetWebhooksSiteWebhookArray{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsPtrOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsOverlayOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsOverlayPtrOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsUnderlayOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsUnderlayPtrOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsVsInstancesOutput{})
	pulumi.RegisterOutputType(EvpnTopologyEvpnOptionsVsInstancesMapOutput{})
	pulumi.RegisterOutputType(EvpnTopologySwitchesOutput{})
	pulumi.RegisterOutputType(EvpnTopologySwitchesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyActionOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclPolicyActionArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsSpecOutput{})
	pulumi.RegisterOutputType(NetworktemplateAclTagsSpecArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateDhcpSnoopingOutput{})
	pulumi.RegisterOutputType(NetworktemplateDhcpSnoopingPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6Output{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6MapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6NextQualifiedOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutes6NextQualifiedMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesNextQualifiedOutput{})
	pulumi.RegisterOutputType(NetworktemplateExtraRoutesNextQualifiedMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateMistNacOutput{})
	pulumi.RegisterOutputType(NetworktemplateMistNacPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateNetworksOutput{})
	pulumi.RegisterOutputType(NetworktemplateNetworksMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateOspfAreasOutput{})
	pulumi.RegisterOutputType(NetworktemplateOspfAreasMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateOspfAreasOspfNetworksOutput{})
	pulumi.RegisterOutputType(NetworktemplateOspfAreasOspfNetworksMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortMirroringOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortMirroringMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesRuleOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesStormControlOutput{})
	pulumi.RegisterOutputType(NetworktemplatePortUsagesStormControlPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAcctServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAcctServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAuthServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRadiusConfigAuthServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogArchiveOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogArchivePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsolePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogConsoleContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArchiveOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileArchivePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogFileContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogServerContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateRemoteSyslogUserContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigClientListOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigClientListArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigTrapGroupOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigTrapGroupArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV2cConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV2cConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigNotifyFilterContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetAddressOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetAddressArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetParameterOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigTargetParameterArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmUserOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigUsmUserArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmAccessPrefixListArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigV3ConfigVacmSecurityToGroupContentArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigViewOutput{})
	pulumi.RegisterOutputType(NetworktemplateSnmpConfigViewArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleIpConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleIpConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleOobIpConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRuleOobIpConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortConfigMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortMirroringOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMatchingRulePortMirroringMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtLocalAccountsOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtLocalAccountsMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectRePtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReCustomOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtProtectReCustomArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsAcctServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsAcctServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsTacplusServerOutput{})
	pulumi.RegisterOutputType(NetworktemplateSwitchMgmtTacacsTacplusServerArrayOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfConfigOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesMapOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesExtraRoutesOutput{})
	pulumi.RegisterOutputType(NetworktemplateVrfInstancesExtraRoutesMapOutput{})
	pulumi.RegisterOutputType(SettingAnalyticOutput{})
	pulumi.RegisterOutputType(SettingAnalyticPtrOutput{})
	pulumi.RegisterOutputType(SettingAutoUpgradeOutput{})
	pulumi.RegisterOutputType(SettingAutoUpgradePtrOutput{})
	pulumi.RegisterOutputType(SettingBleConfigOutput{})
	pulumi.RegisterOutputType(SettingBleConfigPtrOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyPtrOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyPushWindowOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyPushWindowPtrOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyPushWindowHoursOutput{})
	pulumi.RegisterOutputType(SettingConfigPushPolicyPushWindowHoursPtrOutput{})
	pulumi.RegisterOutputType(SettingCriticalUrlMonitoringOutput{})
	pulumi.RegisterOutputType(SettingCriticalUrlMonitoringPtrOutput{})
	pulumi.RegisterOutputType(SettingCriticalUrlMonitoringMonitorOutput{})
	pulumi.RegisterOutputType(SettingCriticalUrlMonitoringMonitorArrayOutput{})
	pulumi.RegisterOutputType(SettingEngagementOutput{})
	pulumi.RegisterOutputType(SettingEngagementPtrOutput{})
	pulumi.RegisterOutputType(SettingEngagementDwellTagNamesOutput{})
	pulumi.RegisterOutputType(SettingEngagementDwellTagNamesPtrOutput{})
	pulumi.RegisterOutputType(SettingEngagementDwellTagsOutput{})
	pulumi.RegisterOutputType(SettingEngagementDwellTagsPtrOutput{})
	pulumi.RegisterOutputType(SettingEngagementHoursOutput{})
	pulumi.RegisterOutputType(SettingEngagementHoursPtrOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtPtrOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAppProbingOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAppProbingPtrOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAppProbingCustomAppOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAppProbingCustomAppArrayOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAutoSignatureUpdateOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtAutoSignatureUpdatePtrOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtProtectReOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtProtectRePtrOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtProtectReCustomOutput{})
	pulumi.RegisterOutputType(SettingGatewayMgmtProtectReCustomArrayOutput{})
	pulumi.RegisterOutputType(SettingLedOutput{})
	pulumi.RegisterOutputType(SettingLedPtrOutput{})
	pulumi.RegisterOutputType(SettingOccupancyOutput{})
	pulumi.RegisterOutputType(SettingOccupancyPtrOutput{})
	pulumi.RegisterOutputType(SettingProxyOutput{})
	pulumi.RegisterOutputType(SettingProxyPtrOutput{})
	pulumi.RegisterOutputType(SettingRogueOutput{})
	pulumi.RegisterOutputType(SettingRoguePtrOutput{})
	pulumi.RegisterOutputType(SettingRtsaOutput{})
	pulumi.RegisterOutputType(SettingRtsaPtrOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertPtrOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertArpFailureOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertArpFailurePtrOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertDhcpFailureOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertDhcpFailurePtrOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertDnsFailureOutput{})
	pulumi.RegisterOutputType(SettingSimpleAlertDnsFailurePtrOutput{})
	pulumi.RegisterOutputType(SettingSkyatpOutput{})
	pulumi.RegisterOutputType(SettingSkyatpPtrOutput{})
	pulumi.RegisterOutputType(SettingSrxAppOutput{})
	pulumi.RegisterOutputType(SettingSrxAppPtrOutput{})
	pulumi.RegisterOutputType(SettingSsrOutput{})
	pulumi.RegisterOutputType(SettingSsrPtrOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestPtrOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestVlanOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestVlanArrayOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestWanSpeedtestOutput{})
	pulumi.RegisterOutputType(SettingSyntheticTestWanSpeedtestPtrOutput{})
	pulumi.RegisterOutputType(SettingUplinkPortConfigOutput{})
	pulumi.RegisterOutputType(SettingUplinkPortConfigPtrOutput{})
	pulumi.RegisterOutputType(SettingVnaOutput{})
	pulumi.RegisterOutputType(SettingVnaPtrOutput{})
	pulumi.RegisterOutputType(SettingVsInstanceOutput{})
	pulumi.RegisterOutputType(SettingVsInstanceMapOutput{})
	pulumi.RegisterOutputType(SettingWanVnaOutput{})
	pulumi.RegisterOutputType(SettingWanVnaPtrOutput{})
	pulumi.RegisterOutputType(SettingWidsOutput{})
	pulumi.RegisterOutputType(SettingWidsPtrOutput{})
	pulumi.RegisterOutputType(SettingWidsRepeatedAuthFailuresOutput{})
	pulumi.RegisterOutputType(SettingWidsRepeatedAuthFailuresPtrOutput{})
	pulumi.RegisterOutputType(SettingWifiOutput{})
	pulumi.RegisterOutputType(SettingWifiPtrOutput{})
	pulumi.RegisterOutputType(SettingWiredVnaOutput{})
	pulumi.RegisterOutputType(SettingWiredVnaPtrOutput{})
	pulumi.RegisterOutputType(SettingZoneOccupancyAlertOutput{})
	pulumi.RegisterOutputType(SettingZoneOccupancyAlertPtrOutput{})
	pulumi.RegisterOutputType(WlanAcctServerOutput{})
	pulumi.RegisterOutputType(WlanAcctServerArrayOutput{})
	pulumi.RegisterOutputType(WlanAirwatchOutput{})
	pulumi.RegisterOutputType(WlanAirwatchPtrOutput{})
	pulumi.RegisterOutputType(WlanAppLimitOutput{})
	pulumi.RegisterOutputType(WlanAppLimitPtrOutput{})
	pulumi.RegisterOutputType(WlanAppQosOutput{})
	pulumi.RegisterOutputType(WlanAppQosPtrOutput{})
	pulumi.RegisterOutputType(WlanAppQosAppsOutput{})
	pulumi.RegisterOutputType(WlanAppQosAppsMapOutput{})
	pulumi.RegisterOutputType(WlanAppQosOtherOutput{})
	pulumi.RegisterOutputType(WlanAppQosOtherArrayOutput{})
	pulumi.RegisterOutputType(WlanAuthOutput{})
	pulumi.RegisterOutputType(WlanAuthPtrOutput{})
	pulumi.RegisterOutputType(WlanAuthServerOutput{})
	pulumi.RegisterOutputType(WlanAuthServerArrayOutput{})
	pulumi.RegisterOutputType(WlanBonjourOutput{})
	pulumi.RegisterOutputType(WlanBonjourPtrOutput{})
	pulumi.RegisterOutputType(WlanBonjourServicesOutput{})
	pulumi.RegisterOutputType(WlanBonjourServicesMapOutput{})
	pulumi.RegisterOutputType(WlanCiscoCwaOutput{})
	pulumi.RegisterOutputType(WlanCiscoCwaPtrOutput{})
	pulumi.RegisterOutputType(WlanCoaServerOutput{})
	pulumi.RegisterOutputType(WlanCoaServerArrayOutput{})
	pulumi.RegisterOutputType(WlanDnsServerRewriteOutput{})
	pulumi.RegisterOutputType(WlanDnsServerRewritePtrOutput{})
	pulumi.RegisterOutputType(WlanDynamicPskOutput{})
	pulumi.RegisterOutputType(WlanDynamicPskPtrOutput{})
	pulumi.RegisterOutputType(WlanDynamicVlanOutput{})
	pulumi.RegisterOutputType(WlanDynamicVlanPtrOutput{})
	pulumi.RegisterOutputType(WlanHotspot20Output{})
	pulumi.RegisterOutputType(WlanHotspot20PtrOutput{})
	pulumi.RegisterOutputType(WlanInjectDhcpOption82Output{})
	pulumi.RegisterOutputType(WlanInjectDhcpOption82PtrOutput{})
	pulumi.RegisterOutputType(WlanMistNacOutput{})
	pulumi.RegisterOutputType(WlanMistNacPtrOutput{})
	pulumi.RegisterOutputType(WlanPortalOutput{})
	pulumi.RegisterOutputType(WlanPortalPtrOutput{})
	pulumi.RegisterOutputType(WlanPortalTemplatePortalTemplateOutput{})
	pulumi.RegisterOutputType(WlanPortalTemplatePortalTemplatePtrOutput{})
	pulumi.RegisterOutputType(WlanPortalTemplatePortalTemplateLocalesOutput{})
	pulumi.RegisterOutputType(WlanPortalTemplatePortalTemplateLocalesMapOutput{})
	pulumi.RegisterOutputType(WlanQosOutput{})
	pulumi.RegisterOutputType(WlanQosPtrOutput{})
	pulumi.RegisterOutputType(WlanRadsecOutput{})
	pulumi.RegisterOutputType(WlanRadsecPtrOutput{})
	pulumi.RegisterOutputType(WlanRadsecServerOutput{})
	pulumi.RegisterOutputType(WlanRadsecServerArrayOutput{})
	pulumi.RegisterOutputType(WlanRatesetOutput{})
	pulumi.RegisterOutputType(WlanRatesetMapOutput{})
	pulumi.RegisterOutputType(WlanScheduleOutput{})
	pulumi.RegisterOutputType(WlanSchedulePtrOutput{})
	pulumi.RegisterOutputType(WlanScheduleHoursOutput{})
	pulumi.RegisterOutputType(WlanScheduleHoursPtrOutput{})
	pulumi.RegisterOutputType(WxtagSpecOutput{})
	pulumi.RegisterOutputType(WxtagSpecArrayOutput{})
	pulumi.RegisterOutputType(BaseLatlngOutput{})
	pulumi.RegisterOutputType(BaseLatlngPtrOutput{})
	pulumi.RegisterOutputType(GetPsksSitePskOutput{})
	pulumi.RegisterOutputType(GetPsksSitePskArrayOutput{})
	pulumi.RegisterOutputType(GetWebhooksSiteWebhookOutput{})
	pulumi.RegisterOutputType(GetWebhooksSiteWebhookArrayOutput{})
}
