// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the Org Settings.The Org Settings can be used to customize the Org configuration
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := org.NewVpn(ctx, "vpn_one", &org.VpnArgs{
//				OrgId: pulumi.Any(terraformTest.Id),
//				Name:  pulumi.String("vpn_one"),
//				Paths: org.VpnPathsMap{
//					"AWS_Hub_Profile1-WAN1": &org.VpnPathsArgs{
//						BfdProfile: pulumi.String("broadband"),
//					},
//					"AWS_Hub_Profile1-WAN2": nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `mist_org_setting` with:
//
// Org Setting can be imported by specifying the org_id
//
// ```sh
// $ pulumi import junipermist:org/setting:Setting setting_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
// ```
type Setting struct {
	pulumi.CustomResourceState

	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
	// `deviceUpdownThreshold` is ignored.
	ApUpdownThreshold pulumi.IntOutput          `pulumi:"apUpdownThreshold"`
	ApiPolicy         SettingApiPolicyPtrOutput `pulumi:"apiPolicy"`
	// list of PEM-encoded ca certs
	Cacerts     pulumi.StringArrayOutput    `pulumi:"cacerts"`
	Celona      SettingCelonaPtrOutput      `pulumi:"celona"`
	Cloudshark  SettingCloudsharkPtrOutput  `pulumi:"cloudshark"`
	Cradlepoint SettingCradlepointPtrOutput `pulumi:"cradlepoint"`
	// common device cert, optional
	DeviceCert SettingDeviceCertPtrOutput `pulumi:"deviceCert"`
	// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
	// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
	// immediate)
	DeviceUpdownThreshold pulumi.IntOutput `pulumi:"deviceUpdownThreshold"`
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap pulumi.BoolOutput `pulumi:"disablePcap"`
	// whether to disable remote shell access for an entire org
	DisableRemoteShell pulumi.BoolOutput `pulumi:"disableRemoteShell"`
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
	// `deviceUpdownThreshold` is ignored.
	GatewayUpdownThreshold pulumi.IntOutput          `pulumi:"gatewayUpdownThreshold"`
	Installer              SettingInstallerPtrOutput `pulumi:"installer"`
	Jcloud                 SettingJcloudPtrOutput    `pulumi:"jcloud"`
	Juniper                SettingJuniperOutput      `pulumi:"juniper"`
	// management-related properties
	Mgmt              SettingMgmtPtrOutput       `pulumi:"mgmt"`
	MistNac           SettingMistNacPtrOutput    `pulumi:"mistNac"`
	MxedgeFipsEnabled pulumi.BoolOutput          `pulumi:"mxedgeFipsEnabled"`
	MxedgeMgmt        SettingMxedgeMgmtPtrOutput `pulumi:"mxedgeMgmt"`
	OrgId             pulumi.StringOutput        `pulumi:"orgId"`
	// password policy
	PasswordPolicy     SettingPasswordPolicyPtrOutput     `pulumi:"passwordPolicy"`
	Pcap               SettingPcapPtrOutput               `pulumi:"pcap"`
	PortChannelization SettingPortChannelizationPtrOutput `pulumi:"portChannelization"`
	Security           SettingSecurityPtrOutput           `pulumi:"security"`
	SwitchMgmt         SettingSwitchMgmtPtrOutput         `pulumi:"switchMgmt"`
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
	// `deviceUpdownThreshold` is ignored.
	SwitchUpdownThreshold pulumi.IntOutput              `pulumi:"switchUpdownThreshold"`
	SyntheticTest         SettingSyntheticTestPtrOutput `pulumi:"syntheticTest"`
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout pulumi.IntOutput           `pulumi:"uiIdleTimeout"`
	VpnOptions    SettingVpnOptionsPtrOutput `pulumi:"vpnOptions"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Setting
	err := ctx.RegisterResource("junipermist:org/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("junipermist:org/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
	// `deviceUpdownThreshold` is ignored.
	ApUpdownThreshold *int              `pulumi:"apUpdownThreshold"`
	ApiPolicy         *SettingApiPolicy `pulumi:"apiPolicy"`
	// list of PEM-encoded ca certs
	Cacerts     []string            `pulumi:"cacerts"`
	Celona      *SettingCelona      `pulumi:"celona"`
	Cloudshark  *SettingCloudshark  `pulumi:"cloudshark"`
	Cradlepoint *SettingCradlepoint `pulumi:"cradlepoint"`
	// common device cert, optional
	DeviceCert *SettingDeviceCert `pulumi:"deviceCert"`
	// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
	// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
	// immediate)
	DeviceUpdownThreshold *int `pulumi:"deviceUpdownThreshold"`
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap *bool `pulumi:"disablePcap"`
	// whether to disable remote shell access for an entire org
	DisableRemoteShell *bool `pulumi:"disableRemoteShell"`
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
	// `deviceUpdownThreshold` is ignored.
	GatewayUpdownThreshold *int              `pulumi:"gatewayUpdownThreshold"`
	Installer              *SettingInstaller `pulumi:"installer"`
	Jcloud                 *SettingJcloud    `pulumi:"jcloud"`
	Juniper                *SettingJuniper   `pulumi:"juniper"`
	// management-related properties
	Mgmt              *SettingMgmt       `pulumi:"mgmt"`
	MistNac           *SettingMistNac    `pulumi:"mistNac"`
	MxedgeFipsEnabled *bool              `pulumi:"mxedgeFipsEnabled"`
	MxedgeMgmt        *SettingMxedgeMgmt `pulumi:"mxedgeMgmt"`
	OrgId             *string            `pulumi:"orgId"`
	// password policy
	PasswordPolicy     *SettingPasswordPolicy     `pulumi:"passwordPolicy"`
	Pcap               *SettingPcap               `pulumi:"pcap"`
	PortChannelization *SettingPortChannelization `pulumi:"portChannelization"`
	Security           *SettingSecurity           `pulumi:"security"`
	SwitchMgmt         *SettingSwitchMgmt         `pulumi:"switchMgmt"`
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
	// `deviceUpdownThreshold` is ignored.
	SwitchUpdownThreshold *int                  `pulumi:"switchUpdownThreshold"`
	SyntheticTest         *SettingSyntheticTest `pulumi:"syntheticTest"`
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout *int               `pulumi:"uiIdleTimeout"`
	VpnOptions    *SettingVpnOptions `pulumi:"vpnOptions"`
}

type SettingState struct {
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
	// `deviceUpdownThreshold` is ignored.
	ApUpdownThreshold pulumi.IntPtrInput
	ApiPolicy         SettingApiPolicyPtrInput
	// list of PEM-encoded ca certs
	Cacerts     pulumi.StringArrayInput
	Celona      SettingCelonaPtrInput
	Cloudshark  SettingCloudsharkPtrInput
	Cradlepoint SettingCradlepointPtrInput
	// common device cert, optional
	DeviceCert SettingDeviceCertPtrInput
	// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
	// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
	// immediate)
	DeviceUpdownThreshold pulumi.IntPtrInput
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap pulumi.BoolPtrInput
	// whether to disable remote shell access for an entire org
	DisableRemoteShell pulumi.BoolPtrInput
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
	// `deviceUpdownThreshold` is ignored.
	GatewayUpdownThreshold pulumi.IntPtrInput
	Installer              SettingInstallerPtrInput
	Jcloud                 SettingJcloudPtrInput
	Juniper                SettingJuniperPtrInput
	// management-related properties
	Mgmt              SettingMgmtPtrInput
	MistNac           SettingMistNacPtrInput
	MxedgeFipsEnabled pulumi.BoolPtrInput
	MxedgeMgmt        SettingMxedgeMgmtPtrInput
	OrgId             pulumi.StringPtrInput
	// password policy
	PasswordPolicy     SettingPasswordPolicyPtrInput
	Pcap               SettingPcapPtrInput
	PortChannelization SettingPortChannelizationPtrInput
	Security           SettingSecurityPtrInput
	SwitchMgmt         SettingSwitchMgmtPtrInput
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
	// `deviceUpdownThreshold` is ignored.
	SwitchUpdownThreshold pulumi.IntPtrInput
	SyntheticTest         SettingSyntheticTestPtrInput
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout pulumi.IntPtrInput
	VpnOptions    SettingVpnOptionsPtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
	// `deviceUpdownThreshold` is ignored.
	ApUpdownThreshold *int              `pulumi:"apUpdownThreshold"`
	ApiPolicy         *SettingApiPolicy `pulumi:"apiPolicy"`
	// list of PEM-encoded ca certs
	Cacerts     []string            `pulumi:"cacerts"`
	Celona      *SettingCelona      `pulumi:"celona"`
	Cloudshark  *SettingCloudshark  `pulumi:"cloudshark"`
	Cradlepoint *SettingCradlepoint `pulumi:"cradlepoint"`
	// common device cert, optional
	DeviceCert *SettingDeviceCert `pulumi:"deviceCert"`
	// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
	// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
	// immediate)
	DeviceUpdownThreshold *int `pulumi:"deviceUpdownThreshold"`
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap *bool `pulumi:"disablePcap"`
	// whether to disable remote shell access for an entire org
	DisableRemoteShell *bool `pulumi:"disableRemoteShell"`
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
	// `deviceUpdownThreshold` is ignored.
	GatewayUpdownThreshold *int              `pulumi:"gatewayUpdownThreshold"`
	Installer              *SettingInstaller `pulumi:"installer"`
	Jcloud                 *SettingJcloud    `pulumi:"jcloud"`
	// management-related properties
	Mgmt              *SettingMgmt       `pulumi:"mgmt"`
	MistNac           *SettingMistNac    `pulumi:"mistNac"`
	MxedgeFipsEnabled *bool              `pulumi:"mxedgeFipsEnabled"`
	MxedgeMgmt        *SettingMxedgeMgmt `pulumi:"mxedgeMgmt"`
	OrgId             string             `pulumi:"orgId"`
	// password policy
	PasswordPolicy     *SettingPasswordPolicy     `pulumi:"passwordPolicy"`
	Pcap               *SettingPcap               `pulumi:"pcap"`
	PortChannelization *SettingPortChannelization `pulumi:"portChannelization"`
	Security           *SettingSecurity           `pulumi:"security"`
	SwitchMgmt         *SettingSwitchMgmt         `pulumi:"switchMgmt"`
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
	// `deviceUpdownThreshold` is ignored.
	SwitchUpdownThreshold *int                  `pulumi:"switchUpdownThreshold"`
	SyntheticTest         *SettingSyntheticTest `pulumi:"syntheticTest"`
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout *int               `pulumi:"uiIdleTimeout"`
	VpnOptions    *SettingVpnOptions `pulumi:"vpnOptions"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
	// `deviceUpdownThreshold` is ignored.
	ApUpdownThreshold pulumi.IntPtrInput
	ApiPolicy         SettingApiPolicyPtrInput
	// list of PEM-encoded ca certs
	Cacerts     pulumi.StringArrayInput
	Celona      SettingCelonaPtrInput
	Cloudshark  SettingCloudsharkPtrInput
	Cradlepoint SettingCradlepointPtrInput
	// common device cert, optional
	DeviceCert SettingDeviceCertPtrInput
	// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
	// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
	// immediate)
	DeviceUpdownThreshold pulumi.IntPtrInput
	// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
	DisablePcap pulumi.BoolPtrInput
	// whether to disable remote shell access for an entire org
	DisableRemoteShell pulumi.BoolPtrInput
	// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
	// `deviceUpdownThreshold` is ignored.
	GatewayUpdownThreshold pulumi.IntPtrInput
	Installer              SettingInstallerPtrInput
	Jcloud                 SettingJcloudPtrInput
	// management-related properties
	Mgmt              SettingMgmtPtrInput
	MistNac           SettingMistNacPtrInput
	MxedgeFipsEnabled pulumi.BoolPtrInput
	MxedgeMgmt        SettingMxedgeMgmtPtrInput
	OrgId             pulumi.StringInput
	// password policy
	PasswordPolicy     SettingPasswordPolicyPtrInput
	Pcap               SettingPcapPtrInput
	PortChannelization SettingPortChannelizationPtrInput
	Security           SettingSecurityPtrInput
	SwitchMgmt         SettingSwitchMgmtPtrInput
	// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
	// `deviceUpdownThreshold` is ignored.
	SwitchUpdownThreshold pulumi.IntPtrInput
	SyntheticTest         SettingSyntheticTestPtrInput
	// automatically logout the user when UI session is inactive. `0` means disabled
	UiIdleTimeout pulumi.IntPtrInput
	VpnOptions    SettingVpnOptionsPtrInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}

type SettingInput interface {
	pulumi.Input

	ToSettingOutput() SettingOutput
	ToSettingOutputWithContext(ctx context.Context) SettingOutput
}

func (*Setting) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (i *Setting) ToSettingOutput() SettingOutput {
	return i.ToSettingOutputWithContext(context.Background())
}

func (i *Setting) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingOutput)
}

// SettingArrayInput is an input type that accepts SettingArray and SettingArrayOutput values.
// You can construct a concrete instance of `SettingArrayInput` via:
//
//	SettingArray{ SettingArgs{...} }
type SettingArrayInput interface {
	pulumi.Input

	ToSettingArrayOutput() SettingArrayOutput
	ToSettingArrayOutputWithContext(context.Context) SettingArrayOutput
}

type SettingArray []SettingInput

func (SettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (i SettingArray) ToSettingArrayOutput() SettingArrayOutput {
	return i.ToSettingArrayOutputWithContext(context.Background())
}

func (i SettingArray) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingArrayOutput)
}

// SettingMapInput is an input type that accepts SettingMap and SettingMapOutput values.
// You can construct a concrete instance of `SettingMapInput` via:
//
//	SettingMap{ "key": SettingArgs{...} }
type SettingMapInput interface {
	pulumi.Input

	ToSettingMapOutput() SettingMapOutput
	ToSettingMapOutputWithContext(context.Context) SettingMapOutput
}

type SettingMap map[string]SettingInput

func (SettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (i SettingMap) ToSettingMapOutput() SettingMapOutput {
	return i.ToSettingMapOutputWithContext(context.Background())
}

func (i SettingMap) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingMapOutput)
}

type SettingOutput struct{ *pulumi.OutputState }

func (SettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Setting)(nil)).Elem()
}

func (o SettingOutput) ToSettingOutput() SettingOutput {
	return o
}

func (o SettingOutput) ToSettingOutputWithContext(ctx context.Context) SettingOutput {
	return o
}

// enable threshold-based device down delivery for AP devices only. When configured it takes effect for AP devices and
// `deviceUpdownThreshold` is ignored.
func (o SettingOutput) ApUpdownThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.ApUpdownThreshold }).(pulumi.IntOutput)
}

func (o SettingOutput) ApiPolicy() SettingApiPolicyPtrOutput {
	return o.ApplyT(func(v *Setting) SettingApiPolicyPtrOutput { return v.ApiPolicy }).(SettingApiPolicyPtrOutput)
}

// list of PEM-encoded ca certs
func (o SettingOutput) Cacerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringArrayOutput { return v.Cacerts }).(pulumi.StringArrayOutput)
}

func (o SettingOutput) Celona() SettingCelonaPtrOutput {
	return o.ApplyT(func(v *Setting) SettingCelonaPtrOutput { return v.Celona }).(SettingCelonaPtrOutput)
}

func (o SettingOutput) Cloudshark() SettingCloudsharkPtrOutput {
	return o.ApplyT(func(v *Setting) SettingCloudsharkPtrOutput { return v.Cloudshark }).(SettingCloudsharkPtrOutput)
}

func (o SettingOutput) Cradlepoint() SettingCradlepointPtrOutput {
	return o.ApplyT(func(v *Setting) SettingCradlepointPtrOutput { return v.Cradlepoint }).(SettingCradlepointPtrOutput)
}

// common device cert, optional
func (o SettingOutput) DeviceCert() SettingDeviceCertPtrOutput {
	return o.ApplyT(func(v *Setting) SettingDeviceCertPtrOutput { return v.DeviceCert }).(SettingDeviceCertPtrOutput)
}

// enable threshold-based device down delivery via * device-updowns webhooks topic, * Mist Alert Framework; e.g. send
// AP/SW/GW down event only if AP/SW/GW Up is not seen within the threshold in minutes; 0 - 240, default is 0 (trigger
// immediate)
func (o SettingOutput) DeviceUpdownThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.DeviceUpdownThreshold }).(pulumi.IntOutput)
}

// whether to disallow Mist to analyze pcap files (this is required for marvis pcap)
func (o SettingOutput) DisablePcap() pulumi.BoolOutput {
	return o.ApplyT(func(v *Setting) pulumi.BoolOutput { return v.DisablePcap }).(pulumi.BoolOutput)
}

// whether to disable remote shell access for an entire org
func (o SettingOutput) DisableRemoteShell() pulumi.BoolOutput {
	return o.ApplyT(func(v *Setting) pulumi.BoolOutput { return v.DisableRemoteShell }).(pulumi.BoolOutput)
}

// enable threshold-based device down delivery for Gateway devices only. When configured it takes effect for GW devices and
// `deviceUpdownThreshold` is ignored.
func (o SettingOutput) GatewayUpdownThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.GatewayUpdownThreshold }).(pulumi.IntOutput)
}

func (o SettingOutput) Installer() SettingInstallerPtrOutput {
	return o.ApplyT(func(v *Setting) SettingInstallerPtrOutput { return v.Installer }).(SettingInstallerPtrOutput)
}

func (o SettingOutput) Jcloud() SettingJcloudPtrOutput {
	return o.ApplyT(func(v *Setting) SettingJcloudPtrOutput { return v.Jcloud }).(SettingJcloudPtrOutput)
}

func (o SettingOutput) Juniper() SettingJuniperOutput {
	return o.ApplyT(func(v *Setting) SettingJuniperOutput { return v.Juniper }).(SettingJuniperOutput)
}

// management-related properties
func (o SettingOutput) Mgmt() SettingMgmtPtrOutput {
	return o.ApplyT(func(v *Setting) SettingMgmtPtrOutput { return v.Mgmt }).(SettingMgmtPtrOutput)
}

func (o SettingOutput) MistNac() SettingMistNacPtrOutput {
	return o.ApplyT(func(v *Setting) SettingMistNacPtrOutput { return v.MistNac }).(SettingMistNacPtrOutput)
}

func (o SettingOutput) MxedgeFipsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Setting) pulumi.BoolOutput { return v.MxedgeFipsEnabled }).(pulumi.BoolOutput)
}

func (o SettingOutput) MxedgeMgmt() SettingMxedgeMgmtPtrOutput {
	return o.ApplyT(func(v *Setting) SettingMxedgeMgmtPtrOutput { return v.MxedgeMgmt }).(SettingMxedgeMgmtPtrOutput)
}

func (o SettingOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Setting) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// password policy
func (o SettingOutput) PasswordPolicy() SettingPasswordPolicyPtrOutput {
	return o.ApplyT(func(v *Setting) SettingPasswordPolicyPtrOutput { return v.PasswordPolicy }).(SettingPasswordPolicyPtrOutput)
}

func (o SettingOutput) Pcap() SettingPcapPtrOutput {
	return o.ApplyT(func(v *Setting) SettingPcapPtrOutput { return v.Pcap }).(SettingPcapPtrOutput)
}

func (o SettingOutput) PortChannelization() SettingPortChannelizationPtrOutput {
	return o.ApplyT(func(v *Setting) SettingPortChannelizationPtrOutput { return v.PortChannelization }).(SettingPortChannelizationPtrOutput)
}

func (o SettingOutput) Security() SettingSecurityPtrOutput {
	return o.ApplyT(func(v *Setting) SettingSecurityPtrOutput { return v.Security }).(SettingSecurityPtrOutput)
}

func (o SettingOutput) SwitchMgmt() SettingSwitchMgmtPtrOutput {
	return o.ApplyT(func(v *Setting) SettingSwitchMgmtPtrOutput { return v.SwitchMgmt }).(SettingSwitchMgmtPtrOutput)
}

// enable threshold-based device down delivery for Switch devices only. When configured it takes effect for SW devices and
// `deviceUpdownThreshold` is ignored.
func (o SettingOutput) SwitchUpdownThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.SwitchUpdownThreshold }).(pulumi.IntOutput)
}

func (o SettingOutput) SyntheticTest() SettingSyntheticTestPtrOutput {
	return o.ApplyT(func(v *Setting) SettingSyntheticTestPtrOutput { return v.SyntheticTest }).(SettingSyntheticTestPtrOutput)
}

// automatically logout the user when UI session is inactive. `0` means disabled
func (o SettingOutput) UiIdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Setting) pulumi.IntOutput { return v.UiIdleTimeout }).(pulumi.IntOutput)
}

func (o SettingOutput) VpnOptions() SettingVpnOptionsPtrOutput {
	return o.ApplyT(func(v *Setting) SettingVpnOptionsPtrOutput { return v.VpnOptions }).(SettingVpnOptionsPtrOutput)
}

type SettingArrayOutput struct{ *pulumi.OutputState }

func (SettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Setting)(nil)).Elem()
}

func (o SettingArrayOutput) ToSettingArrayOutput() SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) ToSettingArrayOutputWithContext(ctx context.Context) SettingArrayOutput {
	return o
}

func (o SettingArrayOutput) Index(i pulumi.IntInput) SettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].([]*Setting)[vs[1].(int)]
	}).(SettingOutput)
}

type SettingMapOutput struct{ *pulumi.OutputState }

func (SettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Setting)(nil)).Elem()
}

func (o SettingMapOutput) ToSettingMapOutput() SettingMapOutput {
	return o
}

func (o SettingMapOutput) ToSettingMapOutputWithContext(ctx context.Context) SettingMapOutput {
	return o
}

func (o SettingMapOutput) MapIndex(k pulumi.StringInput) SettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Setting {
		return vs[0].(map[string]*Setting)[vs[1].(string)]
	}).(SettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingInput)(nil)).Elem(), &Setting{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingArrayInput)(nil)).Elem(), SettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingMapInput)(nil)).Elem(), SettingMap{})
	pulumi.RegisterOutputType(SettingOutput{})
	pulumi.RegisterOutputType(SettingArrayOutput{})
	pulumi.RegisterOutputType(SettingMapOutput{})
}
