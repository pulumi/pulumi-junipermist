// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages WAN Assurance Services (Applications).
//
// A Service is used to define a Custom Application that can be used in the `servicePolicies`. These Services can be referenced by their name in
// * the Service Policies (`mist_org_servicepolicy.services`)
// * the Gateway configuration (`mist_device_gateway.service_policies.services`)
// * the Gateway Templates (`mist_org_gatewaytemplate.service_policies.services`)
// * the HUB Profiles (`mist_org_deviceprofile_gateway.service_policies.services`)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := org.NewService(ctx, "service_one", &org.ServiceArgs{
//				OrgId: pulumi.Any(terraformTest.Id),
//				Name:  pulumi.String("service_one"),
//				Addresses: pulumi.StringArray{
//					pulumi.String("10.3.0.0/24"),
//					pulumi.String("10.4.0.0/24"),
//				},
//				Type: pulumi.String("custom"),
//				Specs: org.ServiceSpecArray{
//					&org.ServiceSpecArgs{
//						Protocol:   pulumi.String("tcp"),
//						Port_range: "443",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `mist_org_service` with:
//
// Org Service can be imported by specifying the org_id and the service_id
//
// ```sh
// $ pulumi import junipermist:org/service:Service service_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
type Service struct {
	pulumi.CustomResourceState

	// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
	AppCategories pulumi.StringArrayOutput `pulumi:"appCategories"`
	// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
	AppSubcategories pulumi.StringArrayOutput `pulumi:"appSubcategories"`
	// When `type`==`apps`, list of applications are available through:
	//   * List Applications
	//   * List Gateway Applications
	//   * /insight/top_app_by-bytes?wired=true
	Apps pulumi.StringArrayOutput `pulumi:"apps"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitDown pulumi.IntPtrOutput `pulumi:"clientLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitUp pulumi.IntPtrOutput    `pulumi:"clientLimitUp"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	Dscp          pulumi.StringPtrOutput `pulumi:"dscp"`
	// enum: `nonRevertible`, `none`, `revertible`
	FailoverPolicy pulumi.StringPtrOutput `pulumi:"failoverPolicy"`
	// If `type`==`custom`, web filtering
	Hostnames  pulumi.StringArrayOutput `pulumi:"hostnames"`
	MaxJitter  pulumi.StringPtrOutput   `pulumi:"maxJitter"`
	MaxLatency pulumi.StringPtrOutput   `pulumi:"maxLatency"`
	MaxLoss    pulumi.StringPtrOutput   `pulumi:"maxLoss"`
	Name       pulumi.StringOutput      `pulumi:"name"`
	OrgId      pulumi.StringOutput      `pulumi:"orgId"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitDown pulumi.IntPtrOutput `pulumi:"serviceLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitUp pulumi.IntPtrOutput `pulumi:"serviceLimitUp"`
	// Whether to enable measure SLE
	SleEnabled pulumi.BoolPtrOutput `pulumi:"sleEnabled"`
	// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
	Specs                         ServiceSpecArrayOutput `pulumi:"specs"`
	SsrRelaxedTcpStateEnforcement pulumi.BoolPtrOutput   `pulumi:"ssrRelaxedTcpStateEnforcement"`
	// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
	TrafficClass pulumi.StringPtrOutput `pulumi:"trafficClass"`
	// values from List Traffic Types
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
	// enum: `appCategories`, `apps`, `custom`, `urls`
	Type pulumi.StringOutput `pulumi:"type"`
	// When `type`==`urls`, no need for spec as URL can encode the ports being used
	Urls pulumi.StringArrayOutput `pulumi:"urls"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("junipermist:org/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("junipermist:org/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
	Addresses []string `pulumi:"addresses"`
	// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
	AppCategories []string `pulumi:"appCategories"`
	// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
	AppSubcategories []string `pulumi:"appSubcategories"`
	// When `type`==`apps`, list of applications are available through:
	//   * List Applications
	//   * List Gateway Applications
	//   * /insight/top_app_by-bytes?wired=true
	Apps []string `pulumi:"apps"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitDown *int `pulumi:"clientLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitUp *int    `pulumi:"clientLimitUp"`
	Description   *string `pulumi:"description"`
	Dscp          *string `pulumi:"dscp"`
	// enum: `nonRevertible`, `none`, `revertible`
	FailoverPolicy *string `pulumi:"failoverPolicy"`
	// If `type`==`custom`, web filtering
	Hostnames  []string `pulumi:"hostnames"`
	MaxJitter  *string  `pulumi:"maxJitter"`
	MaxLatency *string  `pulumi:"maxLatency"`
	MaxLoss    *string  `pulumi:"maxLoss"`
	Name       *string  `pulumi:"name"`
	OrgId      *string  `pulumi:"orgId"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitDown *int `pulumi:"serviceLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitUp *int `pulumi:"serviceLimitUp"`
	// Whether to enable measure SLE
	SleEnabled *bool `pulumi:"sleEnabled"`
	// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
	Specs                         []ServiceSpec `pulumi:"specs"`
	SsrRelaxedTcpStateEnforcement *bool         `pulumi:"ssrRelaxedTcpStateEnforcement"`
	// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
	TrafficClass *string `pulumi:"trafficClass"`
	// values from List Traffic Types
	TrafficType *string `pulumi:"trafficType"`
	// enum: `appCategories`, `apps`, `custom`, `urls`
	Type *string `pulumi:"type"`
	// When `type`==`urls`, no need for spec as URL can encode the ports being used
	Urls []string `pulumi:"urls"`
}

type ServiceState struct {
	// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
	Addresses pulumi.StringArrayInput
	// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
	AppCategories pulumi.StringArrayInput
	// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
	AppSubcategories pulumi.StringArrayInput
	// When `type`==`apps`, list of applications are available through:
	//   * List Applications
	//   * List Gateway Applications
	//   * /insight/top_app_by-bytes?wired=true
	Apps pulumi.StringArrayInput
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitDown pulumi.IntPtrInput
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitUp pulumi.IntPtrInput
	Description   pulumi.StringPtrInput
	Dscp          pulumi.StringPtrInput
	// enum: `nonRevertible`, `none`, `revertible`
	FailoverPolicy pulumi.StringPtrInput
	// If `type`==`custom`, web filtering
	Hostnames  pulumi.StringArrayInput
	MaxJitter  pulumi.StringPtrInput
	MaxLatency pulumi.StringPtrInput
	MaxLoss    pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	OrgId      pulumi.StringPtrInput
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitDown pulumi.IntPtrInput
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitUp pulumi.IntPtrInput
	// Whether to enable measure SLE
	SleEnabled pulumi.BoolPtrInput
	// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
	Specs                         ServiceSpecArrayInput
	SsrRelaxedTcpStateEnforcement pulumi.BoolPtrInput
	// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
	TrafficClass pulumi.StringPtrInput
	// values from List Traffic Types
	TrafficType pulumi.StringPtrInput
	// enum: `appCategories`, `apps`, `custom`, `urls`
	Type pulumi.StringPtrInput
	// When `type`==`urls`, no need for spec as URL can encode the ports being used
	Urls pulumi.StringArrayInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
	Addresses []string `pulumi:"addresses"`
	// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
	AppCategories []string `pulumi:"appCategories"`
	// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
	AppSubcategories []string `pulumi:"appSubcategories"`
	// When `type`==`apps`, list of applications are available through:
	//   * List Applications
	//   * List Gateway Applications
	//   * /insight/top_app_by-bytes?wired=true
	Apps []string `pulumi:"apps"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitDown *int `pulumi:"clientLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitUp *int    `pulumi:"clientLimitUp"`
	Description   *string `pulumi:"description"`
	Dscp          *string `pulumi:"dscp"`
	// enum: `nonRevertible`, `none`, `revertible`
	FailoverPolicy *string `pulumi:"failoverPolicy"`
	// If `type`==`custom`, web filtering
	Hostnames  []string `pulumi:"hostnames"`
	MaxJitter  *string  `pulumi:"maxJitter"`
	MaxLatency *string  `pulumi:"maxLatency"`
	MaxLoss    *string  `pulumi:"maxLoss"`
	Name       *string  `pulumi:"name"`
	OrgId      string   `pulumi:"orgId"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitDown *int `pulumi:"serviceLimitDown"`
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitUp *int `pulumi:"serviceLimitUp"`
	// Whether to enable measure SLE
	SleEnabled *bool `pulumi:"sleEnabled"`
	// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
	Specs                         []ServiceSpec `pulumi:"specs"`
	SsrRelaxedTcpStateEnforcement *bool         `pulumi:"ssrRelaxedTcpStateEnforcement"`
	// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
	TrafficClass *string `pulumi:"trafficClass"`
	// values from List Traffic Types
	TrafficType *string `pulumi:"trafficType"`
	// enum: `appCategories`, `apps`, `custom`, `urls`
	Type *string `pulumi:"type"`
	// When `type`==`urls`, no need for spec as URL can encode the ports being used
	Urls []string `pulumi:"urls"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
	Addresses pulumi.StringArrayInput
	// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
	AppCategories pulumi.StringArrayInput
	// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
	AppSubcategories pulumi.StringArrayInput
	// When `type`==`apps`, list of applications are available through:
	//   * List Applications
	//   * List Gateway Applications
	//   * /insight/top_app_by-bytes?wired=true
	Apps pulumi.StringArrayInput
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitDown pulumi.IntPtrInput
	// 0 means unlimited, value from 0 to 107374182
	ClientLimitUp pulumi.IntPtrInput
	Description   pulumi.StringPtrInput
	Dscp          pulumi.StringPtrInput
	// enum: `nonRevertible`, `none`, `revertible`
	FailoverPolicy pulumi.StringPtrInput
	// If `type`==`custom`, web filtering
	Hostnames  pulumi.StringArrayInput
	MaxJitter  pulumi.StringPtrInput
	MaxLatency pulumi.StringPtrInput
	MaxLoss    pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	OrgId      pulumi.StringInput
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitDown pulumi.IntPtrInput
	// 0 means unlimited, value from 0 to 107374182
	ServiceLimitUp pulumi.IntPtrInput
	// Whether to enable measure SLE
	SleEnabled pulumi.BoolPtrInput
	// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
	Specs                         ServiceSpecArrayInput
	SsrRelaxedTcpStateEnforcement pulumi.BoolPtrInput
	// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
	TrafficClass pulumi.StringPtrInput
	// values from List Traffic Types
	TrafficType pulumi.StringPtrInput
	// enum: `appCategories`, `apps`, `custom`, `urls`
	Type pulumi.StringPtrInput
	// When `type`==`urls`, no need for spec as URL can encode the ports being used
	Urls pulumi.StringArrayInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// If `type`==`custom`, IPv4 and/or IPv6 subnets (e.g. 10.0.0.0/8, fd28::/128)
func (o ServiceOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

// When `type`==`appCategories`, list of application categories are available through List App Category Definitions
func (o ServiceOutput) AppCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.AppCategories }).(pulumi.StringArrayOutput)
}

// When `type`==`appCategories`, list of application categories are available through List App Sub Category Definitions
func (o ServiceOutput) AppSubcategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.AppSubcategories }).(pulumi.StringArrayOutput)
}

// When `type`==`apps`, list of applications are available through:
//   - List Applications
//   - List Gateway Applications
//   - /insight/top_app_by-bytes?wired=true
func (o ServiceOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Apps }).(pulumi.StringArrayOutput)
}

// 0 means unlimited, value from 0 to 107374182
func (o ServiceOutput) ClientLimitDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ClientLimitDown }).(pulumi.IntPtrOutput)
}

// 0 means unlimited, value from 0 to 107374182
func (o ServiceOutput) ClientLimitUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ClientLimitUp }).(pulumi.IntPtrOutput)
}

func (o ServiceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) Dscp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Dscp }).(pulumi.StringPtrOutput)
}

// enum: `nonRevertible`, `none`, `revertible`
func (o ServiceOutput) FailoverPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.FailoverPolicy }).(pulumi.StringPtrOutput)
}

// If `type`==`custom`, web filtering
func (o ServiceOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

func (o ServiceOutput) MaxJitter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.MaxJitter }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) MaxLatency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.MaxLatency }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) MaxLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.MaxLoss }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// 0 means unlimited, value from 0 to 107374182
func (o ServiceOutput) ServiceLimitDown() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ServiceLimitDown }).(pulumi.IntPtrOutput)
}

// 0 means unlimited, value from 0 to 107374182
func (o ServiceOutput) ServiceLimitUp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.IntPtrOutput { return v.ServiceLimitUp }).(pulumi.IntPtrOutput)
}

// Whether to enable measure SLE
func (o ServiceOutput) SleEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.SleEnabled }).(pulumi.BoolPtrOutput)
}

// When `type`==`custom`, optional, if it doesn't exist, http and https is assumed
func (o ServiceOutput) Specs() ServiceSpecArrayOutput {
	return o.ApplyT(func(v *Service) ServiceSpecArrayOutput { return v.Specs }).(ServiceSpecArrayOutput)
}

func (o ServiceOutput) SsrRelaxedTcpStateEnforcement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.SsrRelaxedTcpStateEnforcement }).(pulumi.BoolPtrOutput)
}

// when `trafficType`==`custom`. enum: `bestEffort`, `high`, `low`, `medium`
func (o ServiceOutput) TrafficClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.TrafficClass }).(pulumi.StringPtrOutput)
}

// values from List Traffic Types
func (o ServiceOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

// enum: `appCategories`, `apps`, `custom`, `urls`
func (o ServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When `type`==`urls`, no need for spec as URL can encode the ports being used
func (o ServiceOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Urls }).(pulumi.StringArrayOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
