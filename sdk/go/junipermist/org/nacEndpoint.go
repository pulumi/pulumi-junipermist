// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the NAC Endpoints (User MACs).
//
// NAC Endpoints (User MACs) provide a database of endpoints identified by their MAC addresses. They can be used assign each endpoint with various attributes, such as name, VLAN, role and client label.  Once an endpoint is labeled, the label name can be used to create `org.Nactag` resource as match criteria.
//
// The `org.Nactag` resource can be used to create Tags regrouping one or multiple endpoint MAC Addresses, but the use of the User MACs provides additional features:
// * possitility to assign specific attributes, like a Name, a Radius Group, a VLAN ID, ...
// * possibility to assign one or multiple Tags (Labels) to a User MAC
// * improved management for large list of MAC Addresses
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := org.NewNacEndpoint(ctx, "endpoint_one", &org.NacEndpointArgs{
//				Mac: pulumi.String("921b638445cd"),
//				Labels: pulumi.StringArray{
//					pulumi.String("byod"),
//					pulumi.String("flr1"),
//				},
//				Vlan:        pulumi.String("30"),
//				Notes:       pulumi.String("mac address refers to Canon printers"),
//				Name:        pulumi.String("endpoint_one"),
//				RadiusGroup: pulumi.String("VIP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `mist_org_nac_endpoint` with:
//
// NAC Endpoint can be imported by specifying the org_id and the nac_endpoint_id
//
// ```sh
// $ pulumi import junipermist:org/nacEndpoint:NacEndpoint endpoint_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
type NacEndpoint struct {
	pulumi.CustomResourceState

	Labels pulumi.StringArrayOutput `pulumi:"labels"`
	// only non-local-admin MAC is accepted
	Mac         pulumi.StringOutput `pulumi:"mac"`
	Name        pulumi.StringOutput `pulumi:"name"`
	Notes       pulumi.StringOutput `pulumi:"notes"`
	OrgId       pulumi.StringOutput `pulumi:"orgId"`
	RadiusGroup pulumi.StringOutput `pulumi:"radiusGroup"`
	Vlan        pulumi.StringOutput `pulumi:"vlan"`
}

// NewNacEndpoint registers a new resource with the given unique name, arguments, and options.
func NewNacEndpoint(ctx *pulumi.Context,
	name string, args *NacEndpointArgs, opts ...pulumi.ResourceOption) (*NacEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Mac == nil {
		return nil, errors.New("invalid value for required argument 'Mac'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NacEndpoint
	err := ctx.RegisterResource("junipermist:org/nacEndpoint:NacEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNacEndpoint gets an existing NacEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNacEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NacEndpointState, opts ...pulumi.ResourceOption) (*NacEndpoint, error) {
	var resource NacEndpoint
	err := ctx.ReadResource("junipermist:org/nacEndpoint:NacEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NacEndpoint resources.
type nacEndpointState struct {
	Labels []string `pulumi:"labels"`
	// only non-local-admin MAC is accepted
	Mac         *string `pulumi:"mac"`
	Name        *string `pulumi:"name"`
	Notes       *string `pulumi:"notes"`
	OrgId       *string `pulumi:"orgId"`
	RadiusGroup *string `pulumi:"radiusGroup"`
	Vlan        *string `pulumi:"vlan"`
}

type NacEndpointState struct {
	Labels pulumi.StringArrayInput
	// only non-local-admin MAC is accepted
	Mac         pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Notes       pulumi.StringPtrInput
	OrgId       pulumi.StringPtrInput
	RadiusGroup pulumi.StringPtrInput
	Vlan        pulumi.StringPtrInput
}

func (NacEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*nacEndpointState)(nil)).Elem()
}

type nacEndpointArgs struct {
	Labels []string `pulumi:"labels"`
	// only non-local-admin MAC is accepted
	Mac         string  `pulumi:"mac"`
	Name        *string `pulumi:"name"`
	Notes       *string `pulumi:"notes"`
	OrgId       string  `pulumi:"orgId"`
	RadiusGroup *string `pulumi:"radiusGroup"`
	Vlan        *string `pulumi:"vlan"`
}

// The set of arguments for constructing a NacEndpoint resource.
type NacEndpointArgs struct {
	Labels pulumi.StringArrayInput
	// only non-local-admin MAC is accepted
	Mac         pulumi.StringInput
	Name        pulumi.StringPtrInput
	Notes       pulumi.StringPtrInput
	OrgId       pulumi.StringInput
	RadiusGroup pulumi.StringPtrInput
	Vlan        pulumi.StringPtrInput
}

func (NacEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nacEndpointArgs)(nil)).Elem()
}

type NacEndpointInput interface {
	pulumi.Input

	ToNacEndpointOutput() NacEndpointOutput
	ToNacEndpointOutputWithContext(ctx context.Context) NacEndpointOutput
}

func (*NacEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**NacEndpoint)(nil)).Elem()
}

func (i *NacEndpoint) ToNacEndpointOutput() NacEndpointOutput {
	return i.ToNacEndpointOutputWithContext(context.Background())
}

func (i *NacEndpoint) ToNacEndpointOutputWithContext(ctx context.Context) NacEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacEndpointOutput)
}

// NacEndpointArrayInput is an input type that accepts NacEndpointArray and NacEndpointArrayOutput values.
// You can construct a concrete instance of `NacEndpointArrayInput` via:
//
//	NacEndpointArray{ NacEndpointArgs{...} }
type NacEndpointArrayInput interface {
	pulumi.Input

	ToNacEndpointArrayOutput() NacEndpointArrayOutput
	ToNacEndpointArrayOutputWithContext(context.Context) NacEndpointArrayOutput
}

type NacEndpointArray []NacEndpointInput

func (NacEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NacEndpoint)(nil)).Elem()
}

func (i NacEndpointArray) ToNacEndpointArrayOutput() NacEndpointArrayOutput {
	return i.ToNacEndpointArrayOutputWithContext(context.Background())
}

func (i NacEndpointArray) ToNacEndpointArrayOutputWithContext(ctx context.Context) NacEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacEndpointArrayOutput)
}

// NacEndpointMapInput is an input type that accepts NacEndpointMap and NacEndpointMapOutput values.
// You can construct a concrete instance of `NacEndpointMapInput` via:
//
//	NacEndpointMap{ "key": NacEndpointArgs{...} }
type NacEndpointMapInput interface {
	pulumi.Input

	ToNacEndpointMapOutput() NacEndpointMapOutput
	ToNacEndpointMapOutputWithContext(context.Context) NacEndpointMapOutput
}

type NacEndpointMap map[string]NacEndpointInput

func (NacEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NacEndpoint)(nil)).Elem()
}

func (i NacEndpointMap) ToNacEndpointMapOutput() NacEndpointMapOutput {
	return i.ToNacEndpointMapOutputWithContext(context.Background())
}

func (i NacEndpointMap) ToNacEndpointMapOutputWithContext(ctx context.Context) NacEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacEndpointMapOutput)
}

type NacEndpointOutput struct{ *pulumi.OutputState }

func (NacEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NacEndpoint)(nil)).Elem()
}

func (o NacEndpointOutput) ToNacEndpointOutput() NacEndpointOutput {
	return o
}

func (o NacEndpointOutput) ToNacEndpointOutputWithContext(ctx context.Context) NacEndpointOutput {
	return o
}

func (o NacEndpointOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringArrayOutput { return v.Labels }).(pulumi.StringArrayOutput)
}

// only non-local-admin MAC is accepted
func (o NacEndpointOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o NacEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NacEndpointOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.Notes }).(pulumi.StringOutput)
}

func (o NacEndpointOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

func (o NacEndpointOutput) RadiusGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.RadiusGroup }).(pulumi.StringOutput)
}

func (o NacEndpointOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v *NacEndpoint) pulumi.StringOutput { return v.Vlan }).(pulumi.StringOutput)
}

type NacEndpointArrayOutput struct{ *pulumi.OutputState }

func (NacEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NacEndpoint)(nil)).Elem()
}

func (o NacEndpointArrayOutput) ToNacEndpointArrayOutput() NacEndpointArrayOutput {
	return o
}

func (o NacEndpointArrayOutput) ToNacEndpointArrayOutputWithContext(ctx context.Context) NacEndpointArrayOutput {
	return o
}

func (o NacEndpointArrayOutput) Index(i pulumi.IntInput) NacEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NacEndpoint {
		return vs[0].([]*NacEndpoint)[vs[1].(int)]
	}).(NacEndpointOutput)
}

type NacEndpointMapOutput struct{ *pulumi.OutputState }

func (NacEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NacEndpoint)(nil)).Elem()
}

func (o NacEndpointMapOutput) ToNacEndpointMapOutput() NacEndpointMapOutput {
	return o
}

func (o NacEndpointMapOutput) ToNacEndpointMapOutputWithContext(ctx context.Context) NacEndpointMapOutput {
	return o
}

func (o NacEndpointMapOutput) MapIndex(k pulumi.StringInput) NacEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NacEndpoint {
		return vs[0].(map[string]*NacEndpoint)[vs[1].(string)]
	}).(NacEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NacEndpointInput)(nil)).Elem(), &NacEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacEndpointArrayInput)(nil)).Elem(), NacEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacEndpointMapInput)(nil)).Elem(), NacEndpointMap{})
	pulumi.RegisterOutputType(NacEndpointOutput{})
	pulumi.RegisterOutputType(NacEndpointArrayOutput{})
	pulumi.RegisterOutputType(NacEndpointMapOutput{})
}
