// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the Org Inventory.
// It can be used to claim, unclaim, assign, unassign, reassign devices.
//
// ->Removing a device from the `devices` list or `inventory` map will NOT release it unless `unclaimWhenDestroyed` is set to `true`
//
// > **WARNING** The `devices` attribute (list) is deprecated and is replaced by the `inventory` attribute (map) as it can generate "inconsistent result after apply" errors. If this happen, is is required to force a refresh of the state to synchronise the new list.
//
// The `devices` attribute will generate inconsistent result after apply when
// * a device other than the last one is removed from the list
// * a device is added somewhere other than the end of the list
//
// ## Import
//
// Using `pulumi import`, import `mist_org_inventory` with:
//
// Org Inventory can be imported by specifying the org_id
//
// ```sh
// $ pulumi import junipermist:org/inventory:Inventory inventory_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a
// ```
type Inventory struct {
	pulumi.CustomResourceState

	// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
	//
	// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
	// Please update your configurations to use the `inventory` attribute.
	Devices InventoryDeviceArrayOutput `pulumi:"devices"`
	// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
	// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
	// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
	Inventory InventoryInventoryMapOutput `pulumi:"inventory"`
	OrgId     pulumi.StringOutput         `pulumi:"orgId"`
}

// NewInventory registers a new resource with the given unique name, arguments, and options.
func NewInventory(ctx *pulumi.Context,
	name string, args *InventoryArgs, opts ...pulumi.ResourceOption) (*Inventory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Inventory
	err := ctx.RegisterResource("junipermist:org/inventory:Inventory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventory gets an existing Inventory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryState, opts ...pulumi.ResourceOption) (*Inventory, error) {
	var resource Inventory
	err := ctx.ReadResource("junipermist:org/inventory:Inventory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Inventory resources.
type inventoryState struct {
	// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
	//
	// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
	// Please update your configurations to use the `inventory` attribute.
	Devices []InventoryDevice `pulumi:"devices"`
	// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
	// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
	// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
	Inventory map[string]InventoryInventory `pulumi:"inventory"`
	OrgId     *string                       `pulumi:"orgId"`
}

type InventoryState struct {
	// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
	//
	// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
	// Please update your configurations to use the `inventory` attribute.
	Devices InventoryDeviceArrayInput
	// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
	// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
	// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
	Inventory InventoryInventoryMapInput
	OrgId     pulumi.StringPtrInput
}

func (InventoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryState)(nil)).Elem()
}

type inventoryArgs struct {
	// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
	//
	// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
	// Please update your configurations to use the `inventory` attribute.
	Devices []InventoryDevice `pulumi:"devices"`
	// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
	// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
	// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
	Inventory map[string]InventoryInventory `pulumi:"inventory"`
	OrgId     string                        `pulumi:"orgId"`
}

// The set of arguments for constructing a Inventory resource.
type InventoryArgs struct {
	// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
	//
	// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
	// Please update your configurations to use the `inventory` attribute.
	Devices InventoryDeviceArrayInput
	// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
	// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
	// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
	Inventory InventoryInventoryMapInput
	OrgId     pulumi.StringInput
}

func (InventoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryArgs)(nil)).Elem()
}

type InventoryInput interface {
	pulumi.Input

	ToInventoryOutput() InventoryOutput
	ToInventoryOutputWithContext(ctx context.Context) InventoryOutput
}

func (*Inventory) ElementType() reflect.Type {
	return reflect.TypeOf((**Inventory)(nil)).Elem()
}

func (i *Inventory) ToInventoryOutput() InventoryOutput {
	return i.ToInventoryOutputWithContext(context.Background())
}

func (i *Inventory) ToInventoryOutputWithContext(ctx context.Context) InventoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryOutput)
}

// InventoryArrayInput is an input type that accepts InventoryArray and InventoryArrayOutput values.
// You can construct a concrete instance of `InventoryArrayInput` via:
//
//	InventoryArray{ InventoryArgs{...} }
type InventoryArrayInput interface {
	pulumi.Input

	ToInventoryArrayOutput() InventoryArrayOutput
	ToInventoryArrayOutputWithContext(context.Context) InventoryArrayOutput
}

type InventoryArray []InventoryInput

func (InventoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Inventory)(nil)).Elem()
}

func (i InventoryArray) ToInventoryArrayOutput() InventoryArrayOutput {
	return i.ToInventoryArrayOutputWithContext(context.Background())
}

func (i InventoryArray) ToInventoryArrayOutputWithContext(ctx context.Context) InventoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryArrayOutput)
}

// InventoryMapInput is an input type that accepts InventoryMap and InventoryMapOutput values.
// You can construct a concrete instance of `InventoryMapInput` via:
//
//	InventoryMap{ "key": InventoryArgs{...} }
type InventoryMapInput interface {
	pulumi.Input

	ToInventoryMapOutput() InventoryMapOutput
	ToInventoryMapOutputWithContext(context.Context) InventoryMapOutput
}

type InventoryMap map[string]InventoryInput

func (InventoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Inventory)(nil)).Elem()
}

func (i InventoryMap) ToInventoryMapOutput() InventoryMapOutput {
	return i.ToInventoryMapOutputWithContext(context.Background())
}

func (i InventoryMap) ToInventoryMapOutputWithContext(ctx context.Context) InventoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryMapOutput)
}

type InventoryOutput struct{ *pulumi.OutputState }

func (InventoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Inventory)(nil)).Elem()
}

func (o InventoryOutput) ToInventoryOutput() InventoryOutput {
	return o
}

func (o InventoryOutput) ToInventoryOutputWithContext(ctx context.Context) InventoryOutput {
	return o
}

// **DEPRECATED** List of devices to manage. Exactly one of `claimCode` or `mac` field must be set
//
// Deprecated: The `devices` attribute has been deprecated in version v0.2.0 of the Juniper-Mist Provider. It has been replaced with the `inventory` map and may be removed in future versions.
// Please update your configurations to use the `inventory` attribute.
func (o InventoryOutput) Devices() InventoryDeviceArrayOutput {
	return o.ApplyT(func(v *Inventory) InventoryDeviceArrayOutput { return v.Devices }).(InventoryDeviceArrayOutput)
}

// Property key can be the device Claim Code or the device MAC Address: * Claim Code: used to claim the device to the Mist
// Organization and manage it. Format is `[0-9A-Z]{15}` (e.g `01234ABCDE56789`) * MAC Address: used to managed a device
// already in the Mist Organization (claimed or adopted devices). Format is `[0-9a-f]{12}` (e.g `5684dae9ac8b`) >
func (o InventoryOutput) Inventory() InventoryInventoryMapOutput {
	return o.ApplyT(func(v *Inventory) InventoryInventoryMapOutput { return v.Inventory }).(InventoryInventoryMapOutput)
}

func (o InventoryOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Inventory) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

type InventoryArrayOutput struct{ *pulumi.OutputState }

func (InventoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Inventory)(nil)).Elem()
}

func (o InventoryArrayOutput) ToInventoryArrayOutput() InventoryArrayOutput {
	return o
}

func (o InventoryArrayOutput) ToInventoryArrayOutputWithContext(ctx context.Context) InventoryArrayOutput {
	return o
}

func (o InventoryArrayOutput) Index(i pulumi.IntInput) InventoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Inventory {
		return vs[0].([]*Inventory)[vs[1].(int)]
	}).(InventoryOutput)
}

type InventoryMapOutput struct{ *pulumi.OutputState }

func (InventoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Inventory)(nil)).Elem()
}

func (o InventoryMapOutput) ToInventoryMapOutput() InventoryMapOutput {
	return o
}

func (o InventoryMapOutput) ToInventoryMapOutputWithContext(ctx context.Context) InventoryMapOutput {
	return o
}

func (o InventoryMapOutput) MapIndex(k pulumi.StringInput) InventoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Inventory {
		return vs[0].(map[string]*Inventory)[vs[1].(string)]
	}).(InventoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryInput)(nil)).Elem(), &Inventory{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryArrayInput)(nil)).Elem(), InventoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryMapInput)(nil)).Elem(), InventoryMap{})
	pulumi.RegisterOutputType(InventoryOutput{})
	pulumi.RegisterOutputType(InventoryArrayOutput{})
	pulumi.RegisterOutputType(InventoryMapOutput{})
}
