// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the WAN Assurance Networks.The Networks are used in the `servicePolicies` from the Gateway configuration and Gateway templates
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := org.NewNetwork(ctx, "network_one", &org.NetworkArgs{
//				OrgId:                pulumi.Any(terraformTest.Id),
//				Name:                 pulumi.String("network_one"),
//				Subnet:               pulumi.String("10.4.0.0/24"),
//				DisallowMistServices: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import junipermist:org/network:Network Using terraform import, import `mist_org_network` using the `import` command:
// ```
//
// Gateway cluster can be imported by specifying the org_id and the network_id
//
// ```sh
// $ pulumi import junipermist:org/network:Network network_one 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
//
// In Terraform v1.5.0 and later, use an import block to import `mist_org_network` with `id={org_id}.{network_id}`:
//
// tf
//
// import {
//
//	to = mist_org_network.network_one
//
//	id = "17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309"
//
// }
type Network struct {
	pulumi.CustomResourceState

	// whether to disallow Mist Devices in the network
	DisallowMistServices pulumi.BoolOutput              `pulumi:"disallowMistServices"`
	Gateway              pulumi.StringPtrOutput         `pulumi:"gateway"`
	Gateway6             pulumi.StringPtrOutput         `pulumi:"gateway6"`
	InternalAccess       NetworkInternalAccessPtrOutput `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess NetworkInternetAccessPtrOutput `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation pulumi.BoolPtrOutput `pulumi:"isolation"`
	Name      pulumi.StringOutput  `pulumi:"name"`
	OrgId     pulumi.StringOutput  `pulumi:"orgId"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks pulumi.StringArrayOutput `pulumi:"routedForNetworks"`
	Subnet            pulumi.StringOutput      `pulumi:"subnet"`
	Subnet6           pulumi.StringPtrOutput   `pulumi:"subnet6"`
	Tenants           NetworkTenantsMapOutput  `pulumi:"tenants"`
	VlanId            pulumi.StringPtrOutput   `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess NetworkVpnAccessMapOutput `pulumi:"vpnAccess"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("junipermist:org/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("junipermist:org/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices *bool                  `pulumi:"disallowMistServices"`
	Gateway              *string                `pulumi:"gateway"`
	Gateway6             *string                `pulumi:"gateway6"`
	InternalAccess       *NetworkInternalAccess `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess *NetworkInternetAccess `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation *bool   `pulumi:"isolation"`
	Name      *string `pulumi:"name"`
	OrgId     *string `pulumi:"orgId"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks []string                  `pulumi:"routedForNetworks"`
	Subnet            *string                   `pulumi:"subnet"`
	Subnet6           *string                   `pulumi:"subnet6"`
	Tenants           map[string]NetworkTenants `pulumi:"tenants"`
	VlanId            *string                   `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess map[string]NetworkVpnAccess `pulumi:"vpnAccess"`
}

type NetworkState struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices pulumi.BoolPtrInput
	Gateway              pulumi.StringPtrInput
	Gateway6             pulumi.StringPtrInput
	InternalAccess       NetworkInternalAccessPtrInput
	// whether this network has direct internet access
	InternetAccess NetworkInternetAccessPtrInput
	// whether to allow clients in the network to talk to each other
	Isolation pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	OrgId     pulumi.StringPtrInput
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks pulumi.StringArrayInput
	Subnet            pulumi.StringPtrInput
	Subnet6           pulumi.StringPtrInput
	Tenants           NetworkTenantsMapInput
	VlanId            pulumi.StringPtrInput
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess NetworkVpnAccessMapInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices *bool                  `pulumi:"disallowMistServices"`
	Gateway              *string                `pulumi:"gateway"`
	Gateway6             *string                `pulumi:"gateway6"`
	InternalAccess       *NetworkInternalAccess `pulumi:"internalAccess"`
	// whether this network has direct internet access
	InternetAccess *NetworkInternetAccess `pulumi:"internetAccess"`
	// whether to allow clients in the network to talk to each other
	Isolation *bool   `pulumi:"isolation"`
	Name      *string `pulumi:"name"`
	OrgId     string  `pulumi:"orgId"`
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks []string                  `pulumi:"routedForNetworks"`
	Subnet            string                    `pulumi:"subnet"`
	Subnet6           *string                   `pulumi:"subnet6"`
	Tenants           map[string]NetworkTenants `pulumi:"tenants"`
	VlanId            *string                   `pulumi:"vlanId"`
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess map[string]NetworkVpnAccess `pulumi:"vpnAccess"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// whether to disallow Mist Devices in the network
	DisallowMistServices pulumi.BoolPtrInput
	Gateway              pulumi.StringPtrInput
	Gateway6             pulumi.StringPtrInput
	InternalAccess       NetworkInternalAccessPtrInput
	// whether this network has direct internet access
	InternetAccess NetworkInternetAccessPtrInput
	// whether to allow clients in the network to talk to each other
	Isolation pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	OrgId     pulumi.StringInput
	// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
	RoutedForNetworks pulumi.StringArrayInput
	Subnet            pulumi.StringInput
	Subnet6           pulumi.StringPtrInput
	Tenants           NetworkTenantsMapInput
	VlanId            pulumi.StringPtrInput
	// Property key is the VPN name. Whether this network can be accessed from vpn
	VpnAccess NetworkVpnAccessMapInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

// whether to disallow Mist Devices in the network
func (o NetworkOutput) DisallowMistServices() pulumi.BoolOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolOutput { return v.DisallowMistServices }).(pulumi.BoolOutput)
}

func (o NetworkOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) Gateway6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Gateway6 }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) InternalAccess() NetworkInternalAccessPtrOutput {
	return o.ApplyT(func(v *Network) NetworkInternalAccessPtrOutput { return v.InternalAccess }).(NetworkInternalAccessPtrOutput)
}

// whether this network has direct internet access
func (o NetworkOutput) InternetAccess() NetworkInternetAccessPtrOutput {
	return o.ApplyT(func(v *Network) NetworkInternetAccessPtrOutput { return v.InternetAccess }).(NetworkInternetAccessPtrOutput)
}

// whether to allow clients in the network to talk to each other
func (o NetworkOutput) Isolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.BoolPtrOutput { return v.Isolation }).(pulumi.BoolPtrOutput)
}

func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// for a Network (usually LAN), it can be routable to other networks (e.g. OSPF)
func (o NetworkOutput) RoutedForNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.RoutedForNetworks }).(pulumi.StringArrayOutput)
}

func (o NetworkOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

func (o NetworkOutput) Subnet6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Subnet6 }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) Tenants() NetworkTenantsMapOutput {
	return o.ApplyT(func(v *Network) NetworkTenantsMapOutput { return v.Tenants }).(NetworkTenantsMapOutput)
}

func (o NetworkOutput) VlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.VlanId }).(pulumi.StringPtrOutput)
}

// Property key is the VPN name. Whether this network can be accessed from vpn
func (o NetworkOutput) VpnAccess() NetworkVpnAccessMapOutput {
	return o.ApplyT(func(v *Network) NetworkVpnAccessMapOutput { return v.VpnAccess }).(NetworkVpnAccessMapOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}
