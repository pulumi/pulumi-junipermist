// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package org

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages NAC IDPs (Identity Providers).
// The NAC IDPs to validate NAC client accounts against an IDP with OAuth2.0, LDAP/LDAPS, or a local Mist Edge.
// Mist Access Assurance can also retrieve group membership from the IDP, and use this information in the NAC Rules (`org.Nacrule` resource)
//
// IMPORTANT:
// * Once created, the NAC IDP must be registered in the `org.Setting` resource (full path: `mist_org_setting.mist_nac.idps`).
// * The associated REALMS are configured under `mist_org_setting.mist_nac.idps`
// * To make the IDP the Default IDP, set the IDP ID under `mist_org_setting.mist_nac.default_idp_id`
//
// For SAML IDP, the NAC IDP Metadata can be retrieved with the `org.getNacidpMetadata` data source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-junipermist/sdk/go/junipermist/org"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// OAuth with Azure Example
//			_, err := org.NewNacidp(ctx, "idp_azure", &org.NacidpArgs{
//				OrgId:                 pulumi.Any(terraformTest.Id),
//				Name:                  pulumi.String("idp_azure"),
//				IdpType:               pulumi.String("oauth"),
//				OauthCcClientId:       pulumi.String("client_id"),
//				OauthCcClientSecret:   pulumi.String("-----BEGIN CERTIFICATE-----MIIF0jC .../fSCGx7-----END CERTIFICATE-----"),
//				OauthRopcClientId:     pulumi.String("ropc_client_id"),
//				OauthRopcClientSecret: pulumi.String("ropc_client_secret"),
//				OauthTenantId:         pulumi.String("tenant_id"),
//				OauthType:             pulumi.String("azure"),
//			})
//			if err != nil {
//				return err
//			}
//			// Custom LDAP Example
//			_, err = org.NewNacidp(ctx, "idp_ldap", &org.NacidpArgs{
//				OrgId:          pulumi.Any(terraformTest.Id),
//				Name:           pulumi.String("idp_ldap"),
//				IdpType:        pulumi.String("ldap"),
//				LdapType:       pulumi.String("custom"),
//				GroupFilter:    pulumi.String("memberOf"),
//				MemberFilter:   pulumi.String("memberOf"),
//				LdapUserFilter: pulumi.String("(mail=%s)"),
//				LdapServerHosts: pulumi.StringArray{
//					pulumi.String("ldap.mycorp.com"),
//					pulumi.String("1.2.3.4"),
//				},
//				LdapBaseDn:       pulumi.String("DC=abc,DC=com"),
//				LdapBindDn:       pulumi.String("CN=admin,CN=users,DC=abc,DC=com"),
//				LdapBindPassword: pulumi.String("secret!password"),
//				LdapCacerts: pulumi.StringArray{
//					pulumi.String("-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----"),
//					pulumi.String("-----BEGIN CERTIFICATE-----\nBhMCRVMxFDASBgNVBAoMC1N0YXJ0Q29tIENBMSwwKgYDVn-----END CERTIFICATE-----"),
//				},
//				LdapClientCert: pulumi.String("-----BEGIN CERTIFICATE-----\nMIIFZjCCA06gAwIBAgIIP61/1qm/uDowDQYJKoZIhvcNAQELBQE\n-----END CERTIFICATE-----"),
//				LdapClientKey:  pulumi.String("-----BEGIN PRI..."),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Using `pulumi import`, import `mist_org_nacidp` with:
//
// Org PSK can be imported by specifying the org_id and the nacidp_id
//
// ```sh
// $ pulumi import junipermist:org/nacidp:Nacidp idp_azure 17b46405-3a6d-4715-8bb4-6bb6d06f316a.d3c42998-9012-4859-9743-6b9bee475309
// ```
type Nacidp struct {
	pulumi.CustomResourceState

	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
	GroupFilter pulumi.StringPtrOutput `pulumi:"groupFilter"`
	// enum: `ldap`, `mxedgeProxy`, `oauth`
	IdpType pulumi.StringOutput `pulumi:"idpType"`
	// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
	LdapBaseDn pulumi.StringPtrOutput `pulumi:"ldapBaseDn"`
	// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
	LdapBindDn pulumi.StringPtrOutput `pulumi:"ldapBindDn"`
	// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
	LdapBindPassword pulumi.StringPtrOutput `pulumi:"ldapBindPassword"`
	// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
	LdapCacerts pulumi.StringArrayOutput `pulumi:"ldapCacerts"`
	// if `idpType`==`ldap`, LDAPS Client certificate
	LdapClientCert pulumi.StringPtrOutput `pulumi:"ldapClientCert"`
	// if `idpType`==`ldap`, Key for the `ldapClientCert`
	LdapClientKey pulumi.StringPtrOutput `pulumi:"ldapClientKey"`
	// if `ldapType`==`custom`
	LdapGroupAttr pulumi.StringPtrOutput `pulumi:"ldapGroupAttr"`
	// if `ldapType`==`custom`
	LdapGroupDn pulumi.StringPtrOutput `pulumi:"ldapGroupDn"`
	// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
	LdapResolveGroups pulumi.BoolOutput `pulumi:"ldapResolveGroups"`
	// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
	LdapServerHosts pulumi.StringArrayOutput `pulumi:"ldapServerHosts"`
	// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
	LdapType pulumi.StringPtrOutput `pulumi:"ldapType"`
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
	LdapUserFilter pulumi.StringPtrOutput `pulumi:"ldapUserFilter"`
	// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
	MemberFilter pulumi.StringPtrOutput `pulumi:"memberFilter"`
	// name
	Name pulumi.StringOutput `pulumi:"name"`
	// Required if `idpType`==`oauth`, Client Credentials
	OauthCcClientId pulumi.StringPtrOutput `pulumi:"oauthCcClientId"`
	// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
	OauthCcClientSecret pulumi.StringPtrOutput `pulumi:"oauthCcClientSecret"`
	// if `idpType`==`oauth`
	OauthDiscoveryUrl pulumi.StringPtrOutput `pulumi:"oauthDiscoveryUrl"`
	// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
	OauthPingIdentityRegion pulumi.StringOutput `pulumi:"oauthPingIdentityRegion"`
	// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
	OauthRopcClientId pulumi.StringPtrOutput `pulumi:"oauthRopcClientId"`
	// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
	OauthRopcClientSecret pulumi.StringPtrOutput `pulumi:"oauthRopcClientSecret"`
	// Required if `idpType`==`oauth`, oauth*tenant*id
	OauthTenantId pulumi.StringPtrOutput `pulumi:"oauthTenantId"`
	// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
	OauthType pulumi.StringOutput `pulumi:"oauthType"`
	OrgId     pulumi.StringOutput `pulumi:"orgId"`
	// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled pulumi.BoolOutput `pulumi:"scimEnabled"`
	// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken pulumi.StringOutput `pulumi:"scimSecretToken"`
}

// NewNacidp registers a new resource with the given unique name, arguments, and options.
func NewNacidp(ctx *pulumi.Context,
	name string, args *NacidpArgs, opts ...pulumi.ResourceOption) (*Nacidp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdpType == nil {
		return nil, errors.New("invalid value for required argument 'IdpType'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nacidp
	err := ctx.RegisterResource("junipermist:org/nacidp:Nacidp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNacidp gets an existing Nacidp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNacidp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NacidpState, opts ...pulumi.ResourceOption) (*Nacidp, error) {
	var resource Nacidp
	err := ctx.ReadResource("junipermist:org/nacidp:Nacidp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nacidp resources.
type nacidpState struct {
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
	GroupFilter *string `pulumi:"groupFilter"`
	// enum: `ldap`, `mxedgeProxy`, `oauth`
	IdpType *string `pulumi:"idpType"`
	// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
	LdapBindDn *string `pulumi:"ldapBindDn"`
	// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
	LdapBindPassword *string `pulumi:"ldapBindPassword"`
	// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
	LdapCacerts []string `pulumi:"ldapCacerts"`
	// if `idpType`==`ldap`, LDAPS Client certificate
	LdapClientCert *string `pulumi:"ldapClientCert"`
	// if `idpType`==`ldap`, Key for the `ldapClientCert`
	LdapClientKey *string `pulumi:"ldapClientKey"`
	// if `ldapType`==`custom`
	LdapGroupAttr *string `pulumi:"ldapGroupAttr"`
	// if `ldapType`==`custom`
	LdapGroupDn *string `pulumi:"ldapGroupDn"`
	// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
	LdapResolveGroups *bool `pulumi:"ldapResolveGroups"`
	// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
	LdapServerHosts []string `pulumi:"ldapServerHosts"`
	// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
	LdapType *string `pulumi:"ldapType"`
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
	LdapUserFilter *string `pulumi:"ldapUserFilter"`
	// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
	MemberFilter *string `pulumi:"memberFilter"`
	// name
	Name *string `pulumi:"name"`
	// Required if `idpType`==`oauth`, Client Credentials
	OauthCcClientId *string `pulumi:"oauthCcClientId"`
	// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
	OauthCcClientSecret *string `pulumi:"oauthCcClientSecret"`
	// if `idpType`==`oauth`
	OauthDiscoveryUrl *string `pulumi:"oauthDiscoveryUrl"`
	// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
	OauthPingIdentityRegion *string `pulumi:"oauthPingIdentityRegion"`
	// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
	OauthRopcClientId *string `pulumi:"oauthRopcClientId"`
	// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
	OauthRopcClientSecret *string `pulumi:"oauthRopcClientSecret"`
	// Required if `idpType`==`oauth`, oauth*tenant*id
	OauthTenantId *string `pulumi:"oauthTenantId"`
	// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
	OauthType *string `pulumi:"oauthType"`
	OrgId     *string `pulumi:"orgId"`
	// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled *bool `pulumi:"scimEnabled"`
	// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken *string `pulumi:"scimSecretToken"`
}

type NacidpState struct {
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
	GroupFilter pulumi.StringPtrInput
	// enum: `ldap`, `mxedgeProxy`, `oauth`
	IdpType pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
	LdapBaseDn pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
	LdapBindDn pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
	LdapBindPassword pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
	LdapCacerts pulumi.StringArrayInput
	// if `idpType`==`ldap`, LDAPS Client certificate
	LdapClientCert pulumi.StringPtrInput
	// if `idpType`==`ldap`, Key for the `ldapClientCert`
	LdapClientKey pulumi.StringPtrInput
	// if `ldapType`==`custom`
	LdapGroupAttr pulumi.StringPtrInput
	// if `ldapType`==`custom`
	LdapGroupDn pulumi.StringPtrInput
	// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
	LdapResolveGroups pulumi.BoolPtrInput
	// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
	LdapServerHosts pulumi.StringArrayInput
	// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
	LdapType pulumi.StringPtrInput
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
	LdapUserFilter pulumi.StringPtrInput
	// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
	MemberFilter pulumi.StringPtrInput
	// name
	Name pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, Client Credentials
	OauthCcClientId pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
	OauthCcClientSecret pulumi.StringPtrInput
	// if `idpType`==`oauth`
	OauthDiscoveryUrl pulumi.StringPtrInput
	// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
	OauthPingIdentityRegion pulumi.StringPtrInput
	// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
	OauthRopcClientId pulumi.StringPtrInput
	// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
	OauthRopcClientSecret pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, oauth*tenant*id
	OauthTenantId pulumi.StringPtrInput
	// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
	OauthType pulumi.StringPtrInput
	OrgId     pulumi.StringPtrInput
	// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled pulumi.BoolPtrInput
	// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken pulumi.StringPtrInput
}

func (NacidpState) ElementType() reflect.Type {
	return reflect.TypeOf((*nacidpState)(nil)).Elem()
}

type nacidpArgs struct {
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
	GroupFilter *string `pulumi:"groupFilter"`
	// enum: `ldap`, `mxedgeProxy`, `oauth`
	IdpType string `pulumi:"idpType"`
	// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
	LdapBaseDn *string `pulumi:"ldapBaseDn"`
	// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
	LdapBindDn *string `pulumi:"ldapBindDn"`
	// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
	LdapBindPassword *string `pulumi:"ldapBindPassword"`
	// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
	LdapCacerts []string `pulumi:"ldapCacerts"`
	// if `idpType`==`ldap`, LDAPS Client certificate
	LdapClientCert *string `pulumi:"ldapClientCert"`
	// if `idpType`==`ldap`, Key for the `ldapClientCert`
	LdapClientKey *string `pulumi:"ldapClientKey"`
	// if `ldapType`==`custom`
	LdapGroupAttr *string `pulumi:"ldapGroupAttr"`
	// if `ldapType`==`custom`
	LdapGroupDn *string `pulumi:"ldapGroupDn"`
	// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
	LdapResolveGroups *bool `pulumi:"ldapResolveGroups"`
	// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
	LdapServerHosts []string `pulumi:"ldapServerHosts"`
	// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
	LdapType *string `pulumi:"ldapType"`
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
	LdapUserFilter *string `pulumi:"ldapUserFilter"`
	// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
	MemberFilter *string `pulumi:"memberFilter"`
	// name
	Name *string `pulumi:"name"`
	// Required if `idpType`==`oauth`, Client Credentials
	OauthCcClientId *string `pulumi:"oauthCcClientId"`
	// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
	OauthCcClientSecret *string `pulumi:"oauthCcClientSecret"`
	// if `idpType`==`oauth`
	OauthDiscoveryUrl *string `pulumi:"oauthDiscoveryUrl"`
	// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
	OauthPingIdentityRegion *string `pulumi:"oauthPingIdentityRegion"`
	// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
	OauthRopcClientId *string `pulumi:"oauthRopcClientId"`
	// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
	OauthRopcClientSecret *string `pulumi:"oauthRopcClientSecret"`
	// Required if `idpType`==`oauth`, oauth*tenant*id
	OauthTenantId *string `pulumi:"oauthTenantId"`
	// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
	OauthType *string `pulumi:"oauthType"`
	OrgId     string  `pulumi:"orgId"`
	// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled *bool `pulumi:"scimEnabled"`
	// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken *string `pulumi:"scimSecretToken"`
}

// The set of arguments for constructing a Nacidp resource.
type NacidpArgs struct {
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
	GroupFilter pulumi.StringPtrInput
	// enum: `ldap`, `mxedgeProxy`, `oauth`
	IdpType pulumi.StringInput
	// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
	LdapBaseDn pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
	LdapBindDn pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
	LdapBindPassword pulumi.StringPtrInput
	// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
	LdapCacerts pulumi.StringArrayInput
	// if `idpType`==`ldap`, LDAPS Client certificate
	LdapClientCert pulumi.StringPtrInput
	// if `idpType`==`ldap`, Key for the `ldapClientCert`
	LdapClientKey pulumi.StringPtrInput
	// if `ldapType`==`custom`
	LdapGroupAttr pulumi.StringPtrInput
	// if `ldapType`==`custom`
	LdapGroupDn pulumi.StringPtrInput
	// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
	LdapResolveGroups pulumi.BoolPtrInput
	// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
	LdapServerHosts pulumi.StringArrayInput
	// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
	LdapType pulumi.StringPtrInput
	// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
	LdapUserFilter pulumi.StringPtrInput
	// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
	MemberFilter pulumi.StringPtrInput
	// name
	Name pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, Client Credentials
	OauthCcClientId pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
	OauthCcClientSecret pulumi.StringPtrInput
	// if `idpType`==`oauth`
	OauthDiscoveryUrl pulumi.StringPtrInput
	// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
	OauthPingIdentityRegion pulumi.StringPtrInput
	// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
	OauthRopcClientId pulumi.StringPtrInput
	// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
	OauthRopcClientSecret pulumi.StringPtrInput
	// Required if `idpType`==`oauth`, oauth*tenant*id
	OauthTenantId pulumi.StringPtrInput
	// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
	OauthType pulumi.StringPtrInput
	OrgId     pulumi.StringInput
	// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
	ScimEnabled pulumi.BoolPtrInput
	// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
	ScimSecretToken pulumi.StringPtrInput
}

func (NacidpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nacidpArgs)(nil)).Elem()
}

type NacidpInput interface {
	pulumi.Input

	ToNacidpOutput() NacidpOutput
	ToNacidpOutputWithContext(ctx context.Context) NacidpOutput
}

func (*Nacidp) ElementType() reflect.Type {
	return reflect.TypeOf((**Nacidp)(nil)).Elem()
}

func (i *Nacidp) ToNacidpOutput() NacidpOutput {
	return i.ToNacidpOutputWithContext(context.Background())
}

func (i *Nacidp) ToNacidpOutputWithContext(ctx context.Context) NacidpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacidpOutput)
}

// NacidpArrayInput is an input type that accepts NacidpArray and NacidpArrayOutput values.
// You can construct a concrete instance of `NacidpArrayInput` via:
//
//	NacidpArray{ NacidpArgs{...} }
type NacidpArrayInput interface {
	pulumi.Input

	ToNacidpArrayOutput() NacidpArrayOutput
	ToNacidpArrayOutputWithContext(context.Context) NacidpArrayOutput
}

type NacidpArray []NacidpInput

func (NacidpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nacidp)(nil)).Elem()
}

func (i NacidpArray) ToNacidpArrayOutput() NacidpArrayOutput {
	return i.ToNacidpArrayOutputWithContext(context.Background())
}

func (i NacidpArray) ToNacidpArrayOutputWithContext(ctx context.Context) NacidpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacidpArrayOutput)
}

// NacidpMapInput is an input type that accepts NacidpMap and NacidpMapOutput values.
// You can construct a concrete instance of `NacidpMapInput` via:
//
//	NacidpMap{ "key": NacidpArgs{...} }
type NacidpMapInput interface {
	pulumi.Input

	ToNacidpMapOutput() NacidpMapOutput
	ToNacidpMapOutputWithContext(context.Context) NacidpMapOutput
}

type NacidpMap map[string]NacidpInput

func (NacidpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nacidp)(nil)).Elem()
}

func (i NacidpMap) ToNacidpMapOutput() NacidpMapOutput {
	return i.ToNacidpMapOutputWithContext(context.Background())
}

func (i NacidpMap) ToNacidpMapOutputWithContext(ctx context.Context) NacidpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NacidpMapOutput)
}

type NacidpOutput struct{ *pulumi.OutputState }

func (NacidpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nacidp)(nil)).Elem()
}

func (o NacidpOutput) ToNacidpOutput() NacidpOutput {
	return o
}

func (o NacidpOutput) ToNacidpOutputWithContext(ctx context.Context) NacidpOutput {
	return o
}

// Required if `ldapType`==`custom`, LDAP filter that will identify the type of group
func (o NacidpOutput) GroupFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.GroupFilter }).(pulumi.StringPtrOutput)
}

// enum: `ldap`, `mxedgeProxy`, `oauth`
func (o NacidpOutput) IdpType() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.IdpType }).(pulumi.StringOutput)
}

// Required if `idpType`==`ldap`, whole domain or a specific organization unit (container) in Search base to specify where users and groups are found in the LDAP tree
func (o NacidpOutput) LdapBaseDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapBaseDn }).(pulumi.StringPtrOutput)
}

// Required if `idpType`==`ldap`, the account used to authenticate against the LDAP
func (o NacidpOutput) LdapBindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapBindDn }).(pulumi.StringPtrOutput)
}

// Required if `idpType`==`ldap`, the password used to authenticate against the LDAP
func (o NacidpOutput) LdapBindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapBindPassword }).(pulumi.StringPtrOutput)
}

// Required if `idpType`==`ldap`, list of CA certificates to validate the LDAP certificate
func (o NacidpOutput) LdapCacerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringArrayOutput { return v.LdapCacerts }).(pulumi.StringArrayOutput)
}

// if `idpType`==`ldap`, LDAPS Client certificate
func (o NacidpOutput) LdapClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapClientCert }).(pulumi.StringPtrOutput)
}

// if `idpType`==`ldap`, Key for the `ldapClientCert`
func (o NacidpOutput) LdapClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapClientKey }).(pulumi.StringPtrOutput)
}

// if `ldapType`==`custom`
func (o NacidpOutput) LdapGroupAttr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapGroupAttr }).(pulumi.StringPtrOutput)
}

// if `ldapType`==`custom`
func (o NacidpOutput) LdapGroupDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapGroupDn }).(pulumi.StringPtrOutput)
}

// if `idpType`==`ldap`, whether to recursively resolve LDAP groups
func (o NacidpOutput) LdapResolveGroups() pulumi.BoolOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.BoolOutput { return v.LdapResolveGroups }).(pulumi.BoolOutput)
}

// if `idpType`==`ldap`, list of LDAP/LDAPS server IP Addresses or Hostnames
func (o NacidpOutput) LdapServerHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringArrayOutput { return v.LdapServerHosts }).(pulumi.StringArrayOutput)
}

// if `idpType`==`ldap`. enum: `azure`, `custom`, `google`, `okta`, `pingIdentity`
func (o NacidpOutput) LdapType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapType }).(pulumi.StringPtrOutput)
}

// Required if `ldapType`==`custom`, LDAP filter that will identify the type of user
func (o NacidpOutput) LdapUserFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.LdapUserFilter }).(pulumi.StringPtrOutput)
}

// Required if `ldapType`==`custom`,LDAP filter that will identify the type of member
func (o NacidpOutput) MemberFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.MemberFilter }).(pulumi.StringPtrOutput)
}

// name
func (o NacidpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required if `idpType`==`oauth`, Client Credentials
func (o NacidpOutput) OauthCcClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthCcClientId }).(pulumi.StringPtrOutput)
}

// Required if `idpType`==`oauth`, oauth*cc*client_secret is RSA private key, of the form "-----BEGIN RSA PRIVATE KEY--...."
func (o NacidpOutput) OauthCcClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthCcClientSecret }).(pulumi.StringPtrOutput)
}

// if `idpType`==`oauth`
func (o NacidpOutput) OauthDiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthDiscoveryUrl }).(pulumi.StringPtrOutput)
}

// enum: `us` (United States, default), `ca` (Canada), `eu` (Europe), `asia` (Asia), `au` (Australia)
func (o NacidpOutput) OauthPingIdentityRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.OauthPingIdentityRegion }).(pulumi.StringOutput)
}

// if `idpType`==`oauth`, ropc = Resource Owner Password Credentials
func (o NacidpOutput) OauthRopcClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthRopcClientId }).(pulumi.StringPtrOutput)
}

// if `oauthType`==`azure` or `oauthType`==`azure-gov`. oauth*ropc*client_secret can be empty
func (o NacidpOutput) OauthRopcClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthRopcClientSecret }).(pulumi.StringPtrOutput)
}

// Required if `idpType`==`oauth`, oauth*tenant*id
func (o NacidpOutput) OauthTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringPtrOutput { return v.OauthTenantId }).(pulumi.StringPtrOutput)
}

// if `idpType`==`oauth`. enum: `azure`, `azure-gov`, `okta`, `pingIdentity`
func (o NacidpOutput) OauthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.OauthType }).(pulumi.StringOutput)
}

func (o NacidpOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// if `idpType`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP
func (o NacidpOutput) ScimEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.BoolOutput { return v.ScimEnabled }).(pulumi.BoolOutput)
}

// if `idpType`==`oauth`, scim*secret*token (auto-generated when not provided by caller and `scimEnabled`==`true`, empty string when `scimEnabled`==`false`) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP
func (o NacidpOutput) ScimSecretToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Nacidp) pulumi.StringOutput { return v.ScimSecretToken }).(pulumi.StringOutput)
}

type NacidpArrayOutput struct{ *pulumi.OutputState }

func (NacidpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nacidp)(nil)).Elem()
}

func (o NacidpArrayOutput) ToNacidpArrayOutput() NacidpArrayOutput {
	return o
}

func (o NacidpArrayOutput) ToNacidpArrayOutputWithContext(ctx context.Context) NacidpArrayOutput {
	return o
}

func (o NacidpArrayOutput) Index(i pulumi.IntInput) NacidpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nacidp {
		return vs[0].([]*Nacidp)[vs[1].(int)]
	}).(NacidpOutput)
}

type NacidpMapOutput struct{ *pulumi.OutputState }

func (NacidpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nacidp)(nil)).Elem()
}

func (o NacidpMapOutput) ToNacidpMapOutput() NacidpMapOutput {
	return o
}

func (o NacidpMapOutput) ToNacidpMapOutputWithContext(ctx context.Context) NacidpMapOutput {
	return o
}

func (o NacidpMapOutput) MapIndex(k pulumi.StringInput) NacidpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nacidp {
		return vs[0].(map[string]*Nacidp)[vs[1].(string)]
	}).(NacidpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NacidpInput)(nil)).Elem(), &Nacidp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacidpArrayInput)(nil)).Elem(), NacidpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NacidpMapInput)(nil)).Elem(), NacidpMap{})
	pulumi.RegisterOutputType(NacidpOutput{})
	pulumi.RegisterOutputType(NacidpArrayOutput{})
	pulumi.RegisterOutputType(NacidpMapOutput{})
}
